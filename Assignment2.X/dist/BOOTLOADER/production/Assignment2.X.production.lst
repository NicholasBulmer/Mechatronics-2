

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Sep 16 16:39:44 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1,inline
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1,inline
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1,inline
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   196                           	psect	text172,global,reloc=2,class=CODE,delta=1
   197                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   198                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   199  0000                     
   200                           ; Version 1.43
   201                           ; Generated 25/07/2017 GMT
   202                           ; 
   203                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   204                           ; All rights reserved.
   205                           ; 
   206                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   207                           ; 
   208                           ; Redistribution and use in source and binary forms, with or without modification, are
   209                           ; permitted provided that the following conditions are met:
   210                           ; 
   211                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   212                           ;        conditions and the following disclaimer.
   213                           ; 
   214                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   215                           ;        of conditions and the following disclaimer in the documentation and/or other
   216                           ;        materials provided with the distribution.
   217                           ; 
   218                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   219                           ;        software without specific prior written permission.
   220                           ; 
   221                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   222                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   223                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   224                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   225                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   226                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   227                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   228                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   229                           ; 
   230                           ; 
   231                           ; Code-generator required, PIC18F67J50 Definitions
   232                           ; 
   233                           ; SFR Addresses
   234  0000                     
   235                           	psect	idataCOMRAM
   236  0166E8                     __pidataCOMRAM:
   237                           	opt stack 0
   238                           
   239                           ;initializer for _gCursor
   240  0166E8  0006               	dw	6
   241  0166EA  0006               	dw	6
   242                           
   243                           ;initializer for _Bus_State
   244  0166EC  01                 	db	1
   245                           
   246                           ;initializer for _A
   247  0166ED  41                 	db	65
   248                           
   249                           ;initializer for _a
   250  0166EE  61                 	db	97
   251                           
   252                           ;initializer for _zero
   253  0166EF  30                 	db	48
   254                           
   255                           ;initializer for _l
   256  0166F0  80                 	db	128
   257                           
   258                           ;initializer for _w
   259  0166F1  80                 	db	128
   260                           
   261                           	psect	idataBANK0
   262  01671E                     __pidataBANK0:
   263                           	opt stack 0
   264                           
   265                           ;initializer for _TimerX
   266  01671E  0008               	dw	8
   267                           
   268                           ;initializer for _MinDist
   269  016720  03E8               	dw	1000
   270                           
   271                           ;initializer for _gForecolour
   272  016722  FFFF               	dw	65535
   273                           
   274                           ;initializer for _change
   275  016724  01                 	db	1
   276                           
   277                           	psect	idataBANK3
   278  0166B8                     __pidataBANK3:
   279                           	opt stack 0
   280                           
   281                           ;initializer for Console_Render@F6956
   282  0166B8  0006               	dw	6
   283  0166BA  0006               	dw	6
   284                           
   285                           ;initializer for _gLineSize
   286  0166BC  0080               	dw	128
   287  0166BE  0007               	dw	7
   288                           
   289                           ;initializer for _gCharSize
   290  0166C0  0005               	dw	5
   291  0166C2  0007               	dw	7
   292                           
   293                           	psect	mediumconst
   294  00FC32                     __pmediumconst:
   295                           	opt stack 0
   296  00FC32  00                 	db	0
   297  00FC33                     _InitList:
   298                           	opt stack 0
   299  00FC33  1100               	dw	4352
   300  00FC35  0080               	dw	128
   301  00FC37  012C               	dw	300
   302  00FC39  B100               	dw	45312
   303  00FC3B  0002               	dw	2
   304  00FC3D  0035               	dw	53
   305  00FC3F  0036               	dw	54
   306  00FC41  B200               	dw	45568
   307  00FC43  0002               	dw	2
   308  00FC45  0035               	dw	53
   309  00FC47  0036               	dw	54
   310  00FC49  B300               	dw	45824
   311  00FC4B  0002               	dw	2
   312  00FC4D  0035               	dw	53
   313  00FC4F  0036               	dw	54
   314  00FC51  0002               	dw	2
   315  00FC53  0035               	dw	53
   316  00FC55  0036               	dw	54
   317  00FC57  B400               	dw	46080
   318  00FC59  0000               	dw	0
   319  00FC5B  C000               	dw	49152
   320  00FC5D  00A2               	dw	162
   321  00FC5F  0002               	dw	2
   322  00FC61  0084               	dw	132
   323  00FC63  C100               	dw	49408
   324  00FC65  00C5               	dw	197
   325  00FC67  C200               	dw	49664
   326  00FC69  000D               	dw	13
   327  00FC6B  0000               	dw	0
   328  00FC6D  C300               	dw	49920
   329  00FC6F  008D               	dw	141
   330  00FC71  002A               	dw	42
   331  00FC73  C400               	dw	50176
   332  00FC75  008D               	dw	141
   333  00FC77  00EE               	dw	238
   334  00FC79  C500               	dw	50432
   335  00FC7B  000A               	dw	10
   336  00FC7D  3600               	dw	13824
   337  00FC7F  00C8               	dw	200
   338  00FC81  E000               	dw	57344
   339  00FC83  0012               	dw	18
   340  00FC85  001C               	dw	28
   341  00FC87  0010               	dw	16
   342  00FC89  0018               	dw	24
   343  00FC8B  0033               	dw	51
   344  00FC8D  002C               	dw	44
   345  00FC8F  0025               	dw	37
   346  00FC91  0028               	dw	40
   347  00FC93  0028               	dw	40
   348  00FC95  0027               	dw	39
   349  00FC97  002F               	dw	47
   350  00FC99  003C               	dw	60
   351  00FC9B  0000               	dw	0
   352  00FC9D  0003               	dw	3
   353  00FC9F  0003               	dw	3
   354  00FCA1  0010               	dw	16
   355  00FCA3  0080               	dw	128
   356  00FCA5  0078               	dw	120
   357  00FCA7  E100               	dw	57600
   358  00FCA9  0012               	dw	18
   359  00FCAB  001C               	dw	28
   360  00FCAD  0010               	dw	16
   361  00FCAF  0018               	dw	24
   362  00FCB1  002D               	dw	45
   363  00FCB3  0028               	dw	40
   364  00FCB5  0023               	dw	35
   365  00FCB7  0028               	dw	40
   366  00FCB9  0028               	dw	40
   367  00FCBB  0026               	dw	38
   368  00FCBD  002F               	dw	47
   369  00FCBF  003B               	dw	59
   370  00FCC1  0000               	dw	0
   371  00FCC3  0003               	dw	3
   372  00FCC5  0003               	dw	3
   373  00FCC7  0010               	dw	16
   374  00FCC9  3A00               	dw	14848
   375  00FCCB  0005               	dw	5
   376  00FCCD  2A00               	dw	10752
   377  00FCCF  0000               	dw	0
   378  00FCD1  0002               	dw	2
   379  00FCD3  0000               	dw	0
   380  00FCD5  0081               	dw	129
   381  00FCD7  2B00               	dw	11008
   382  00FCD9  0000               	dw	0
   383  00FCDB  0003               	dw	3
   384  00FCDD  0000               	dw	0
   385  00FCDF  00A2               	dw	162
   386  00FCE1  2900               	dw	10496
   387  00FCE3  2C00               	dw	11264
   388  00FCE5                     __end_of_InitList:
   389                           	opt stack 0
   390  00FCE5                     Timer0_Init@PRESCALE:
   391                           	opt stack 0
   392  00FCE5  0002               	dw	2
   393  00FCE7  0004               	dw	4
   394  00FCE9  0008               	dw	8
   395  00FCEB  0010               	dw	16
   396  00FCED  0020               	dw	32
   397  00FCEF  0040               	dw	64
   398  00FCF1  0080               	dw	128
   399  00FCF3  0100               	dw	256
   400  00FCF5                     __end_ofTimer0_Init@PRESCALE:
   401                           	opt stack 0
   402  00FCF5                     PortProperty_Valid@F6830:
   403                           	opt stack 0
   404  00FCF5  00                 	db	0
   405  00FCF6  01                 	db	1
   406  00FCF7  02                 	db	2
   407  00FCF8  00                 	db	0
   408  00FCF9  01                 	db	1
   409  00FCFA  00                 	db	0
   410  00FCFB  01                 	db	1
   411  00FCFC  00                 	db	0
   412  00FCFD  02                 	db	2
   413  00FCFE  02                 	db	2
   414  00FCFF  00                 	db	0
   415  00FD00  00                 	db	0
   416  00FD01  03                 	db	3
   417  00FD02  03                 	db	3
   418  00FD03  03                 	db	3
   419  00FD04  00                 	db	0
   420  00FD05                     __end_ofPortProperty_Valid@F6830:
   421                           	opt stack 0
   422  00FD05                     _dpowers:
   423                           	opt stack 0
   424  00FD05  0001               	dw	1
   425  00FD07  000A               	dw	10
   426  00FD09  0064               	dw	100
   427  00FD0B  03E8               	dw	1000
   428  00FD0D  2710               	dw	10000
   429  00FD0F                     __end_of_dpowers:
   430                           	opt stack 0
   431  00FD0F                     _MASKS:
   432                           	opt stack 0
   433  00FD0F  00                 	db	0
   434  00FD10  01                 	db	1
   435  00FD11  03                 	db	3
   436  00FD12  07                 	db	7
   437  00FD13  0F                 	db	15
   438  00FD14  1F                 	db	31
   439  00FD15  3F                 	db	63
   440  00FD16  7F                 	db	127
   441  00FD17  FF                 	db	255
   442  00FD18                     __end_of_MASKS:
   443                           	opt stack 0
   444  00FD18                     HMI_SetButton@F7213:
   445                           	opt stack 0
   446  00FD18  00                 	db	0
   447  00FD19  02                 	db	2
   448  00FD1A  01                 	db	1
   449  00FD1B  03                 	db	3
   450  00FD1C                     __end_ofHMI_SetButton@F7213:
   451                           	opt stack 0
   452  00FD1C                     Timer2_Init@PRESCALE:
   453                           	opt stack 0
   454  00FD1C  01                 	db	1
   455  00FD1D  04                 	db	4
   456  00FD1E  10                 	db	16
   457  00FD1F                     __end_ofTimer2_Init@PRESCALE:
   458                           	opt stack 0
   459  00FD1F                     _Font5x7:
   460                           	opt stack 0
   461  00FD1F  00                 	db	0
   462  00FD20  00                 	db	0
   463  00FD21  00                 	db	0
   464  00FD22  00                 	db	0
   465  00FD23  00                 	db	0
   466  00FD24  00                 	db	0
   467  00FD25  00                 	db	0
   468  00FD26  5F                 	db	95
   469  00FD27  00                 	db	0
   470  00FD28  00                 	db	0
   471  00FD29  00                 	db	0
   472  00FD2A  07                 	db	7
   473  00FD2B  00                 	db	0
   474  00FD2C  07                 	db	7
   475  00FD2D  00                 	db	0
   476  00FD2E  14                 	db	20
   477  00FD2F  7F                 	db	127
   478  00FD30  14                 	db	20
   479  00FD31  7F                 	db	127
   480  00FD32  14                 	db	20
   481  00FD33  24                 	db	36
   482  00FD34  2A                 	db	42
   483  00FD35  7F                 	db	127
   484  00FD36  2A                 	db	42
   485  00FD37  12                 	db	18
   486  00FD38  23                 	db	35
   487  00FD39  13                 	db	19
   488  00FD3A  08                 	db	8
   489  00FD3B  64                 	db	100
   490  00FD3C  62                 	db	98
   491  00FD3D  36                 	db	54
   492  00FD3E  49                 	db	73
   493  00FD3F  55                 	db	85
   494  00FD40  22                 	db	34
   495  00FD41  50                 	db	80
   496  00FD42  00                 	db	0
   497  00FD43  05                 	db	5
   498  00FD44  03                 	db	3
   499  00FD45  00                 	db	0
   500  00FD46  00                 	db	0
   501  00FD47  00                 	db	0
   502  00FD48  1C                 	db	28
   503  00FD49  22                 	db	34
   504  00FD4A  41                 	db	65
   505  00FD4B  00                 	db	0
   506  00FD4C  00                 	db	0
   507  00FD4D  41                 	db	65
   508  00FD4E  22                 	db	34
   509  00FD4F  1C                 	db	28
   510  00FD50  00                 	db	0
   511  00FD51  08                 	db	8
   512  00FD52  2A                 	db	42
   513  00FD53  1C                 	db	28
   514  00FD54  2A                 	db	42
   515  00FD55  08                 	db	8
   516  00FD56  08                 	db	8
   517  00FD57  08                 	db	8
   518  00FD58  3E                 	db	62
   519  00FD59  08                 	db	8
   520  00FD5A  08                 	db	8
   521  00FD5B  00                 	db	0
   522  00FD5C  50                 	db	80
   523  00FD5D  30                 	db	48
   524  00FD5E  00                 	db	0
   525  00FD5F  00                 	db	0
   526  00FD60  08                 	db	8
   527  00FD61  08                 	db	8
   528  00FD62  08                 	db	8
   529  00FD63  08                 	db	8
   530  00FD64  08                 	db	8
   531  00FD65  00                 	db	0
   532  00FD66  60                 	db	96
   533  00FD67  60                 	db	96
   534  00FD68  00                 	db	0
   535  00FD69  00                 	db	0
   536  00FD6A  20                 	db	32
   537  00FD6B  10                 	db	16
   538  00FD6C  08                 	db	8
   539  00FD6D  04                 	db	4
   540  00FD6E  02                 	db	2
   541  00FD6F  3E                 	db	62
   542  00FD70  51                 	db	81
   543  00FD71  49                 	db	73
   544  00FD72  45                 	db	69
   545  00FD73  3E                 	db	62
   546  00FD74  00                 	db	0
   547  00FD75  42                 	db	66
   548  00FD76  7F                 	db	127
   549  00FD77  40                 	db	64
   550  00FD78  00                 	db	0
   551  00FD79  42                 	db	66
   552  00FD7A  61                 	db	97
   553  00FD7B  51                 	db	81
   554  00FD7C  49                 	db	73
   555  00FD7D  46                 	db	70
   556  00FD7E  21                 	db	33
   557  00FD7F  41                 	db	65
   558  00FD80  45                 	db	69
   559  00FD81  4B                 	db	75
   560  00FD82  31                 	db	49
   561  00FD83  18                 	db	24
   562  00FD84  14                 	db	20
   563  00FD85  12                 	db	18
   564  00FD86  7F                 	db	127
   565  00FD87  10                 	db	16
   566  00FD88  27                 	db	39
   567  00FD89  45                 	db	69
   568  00FD8A  45                 	db	69
   569  00FD8B  45                 	db	69
   570  00FD8C  39                 	db	57
   571  00FD8D  3C                 	db	60
   572  00FD8E  4A                 	db	74
   573  00FD8F  49                 	db	73
   574  00FD90  49                 	db	73
   575  00FD91  30                 	db	48
   576  00FD92  01                 	db	1
   577  00FD93  71                 	db	113
   578  00FD94  09                 	db	9
   579  00FD95  05                 	db	5
   580  00FD96  03                 	db	3
   581  00FD97  36                 	db	54
   582  00FD98  49                 	db	73
   583  00FD99  49                 	db	73
   584  00FD9A  49                 	db	73
   585  00FD9B  36                 	db	54
   586  00FD9C  06                 	db	6
   587  00FD9D  49                 	db	73
   588  00FD9E  49                 	db	73
   589  00FD9F  29                 	db	41
   590  00FDA0  1E                 	db	30
   591  00FDA1  00                 	db	0
   592  00FDA2  36                 	db	54
   593  00FDA3  36                 	db	54
   594  00FDA4  00                 	db	0
   595  00FDA5  00                 	db	0
   596  00FDA6  00                 	db	0
   597  00FDA7  56                 	db	86
   598  00FDA8  36                 	db	54
   599  00FDA9  00                 	db	0
   600  00FDAA  00                 	db	0
   601  00FDAB  00                 	db	0
   602  00FDAC  08                 	db	8
   603  00FDAD  14                 	db	20
   604  00FDAE  22                 	db	34
   605  00FDAF  41                 	db	65
   606  00FDB0  14                 	db	20
   607  00FDB1  14                 	db	20
   608  00FDB2  14                 	db	20
   609  00FDB3  14                 	db	20
   610  00FDB4  14                 	db	20
   611  00FDB5  41                 	db	65
   612  00FDB6  22                 	db	34
   613  00FDB7  14                 	db	20
   614  00FDB8  08                 	db	8
   615  00FDB9  00                 	db	0
   616  00FDBA  02                 	db	2
   617  00FDBB  01                 	db	1
   618  00FDBC  51                 	db	81
   619  00FDBD  09                 	db	9
   620  00FDBE  06                 	db	6
   621  00FDBF  32                 	db	50
   622  00FDC0  49                 	db	73
   623  00FDC1  79                 	db	121
   624  00FDC2  41                 	db	65
   625  00FDC3  3E                 	db	62
   626  00FDC4  7E                 	db	126
   627  00FDC5  11                 	db	17
   628  00FDC6  11                 	db	17
   629  00FDC7  11                 	db	17
   630  00FDC8  7E                 	db	126
   631  00FDC9  7F                 	db	127
   632  00FDCA  49                 	db	73
   633  00FDCB  49                 	db	73
   634  00FDCC  49                 	db	73
   635  00FDCD  36                 	db	54
   636  00FDCE  3E                 	db	62
   637  00FDCF  41                 	db	65
   638  00FDD0  41                 	db	65
   639  00FDD1  41                 	db	65
   640  00FDD2  22                 	db	34
   641  00FDD3  7F                 	db	127
   642  00FDD4  41                 	db	65
   643  00FDD5  41                 	db	65
   644  00FDD6  22                 	db	34
   645  00FDD7  1C                 	db	28
   646  00FDD8  7F                 	db	127
   647  00FDD9  49                 	db	73
   648  00FDDA  49                 	db	73
   649  00FDDB  49                 	db	73
   650  00FDDC  41                 	db	65
   651  00FDDD  7F                 	db	127
   652  00FDDE  09                 	db	9
   653  00FDDF  09                 	db	9
   654  00FDE0  01                 	db	1
   655  00FDE1  01                 	db	1
   656  00FDE2  3E                 	db	62
   657  00FDE3  41                 	db	65
   658  00FDE4  41                 	db	65
   659  00FDE5  51                 	db	81
   660  00FDE6  32                 	db	50
   661  00FDE7  7F                 	db	127
   662  00FDE8  08                 	db	8
   663  00FDE9  08                 	db	8
   664  00FDEA  08                 	db	8
   665  00FDEB  7F                 	db	127
   666  00FDEC  00                 	db	0
   667  00FDED  41                 	db	65
   668  00FDEE  7F                 	db	127
   669  00FDEF  41                 	db	65
   670  00FDF0  00                 	db	0
   671  00FDF1  20                 	db	32
   672  00FDF2  40                 	db	64
   673  00FDF3  41                 	db	65
   674  00FDF4  3F                 	db	63
   675  00FDF5  01                 	db	1
   676  00FDF6  7F                 	db	127
   677  00FDF7  08                 	db	8
   678  00FDF8  14                 	db	20
   679  00FDF9  22                 	db	34
   680  00FDFA  41                 	db	65
   681  00FDFB  7F                 	db	127
   682  00FDFC  40                 	db	64
   683  00FDFD  40                 	db	64
   684  00FDFE  40                 	db	64
   685  00FDFF  40                 	db	64
   686  00FE00  7F                 	db	127
   687  00FE01  02                 	db	2
   688  00FE02  04                 	db	4
   689  00FE03  02                 	db	2
   690  00FE04  7F                 	db	127
   691  00FE05  7F                 	db	127
   692  00FE06  04                 	db	4
   693  00FE07  08                 	db	8
   694  00FE08  10                 	db	16
   695  00FE09  7F                 	db	127
   696  00FE0A  3E                 	db	62
   697  00FE0B  41                 	db	65
   698  00FE0C  41                 	db	65
   699  00FE0D  41                 	db	65
   700  00FE0E  3E                 	db	62
   701  00FE0F  7F                 	db	127
   702  00FE10  09                 	db	9
   703  00FE11  09                 	db	9
   704  00FE12  09                 	db	9
   705  00FE13  06                 	db	6
   706  00FE14  3E                 	db	62
   707  00FE15  41                 	db	65
   708  00FE16  51                 	db	81
   709  00FE17  21                 	db	33
   710  00FE18  5E                 	db	94
   711  00FE19  7F                 	db	127
   712  00FE1A  09                 	db	9
   713  00FE1B  19                 	db	25
   714  00FE1C  29                 	db	41
   715  00FE1D  46                 	db	70
   716  00FE1E  46                 	db	70
   717  00FE1F  49                 	db	73
   718  00FE20  49                 	db	73
   719  00FE21  49                 	db	73
   720  00FE22  31                 	db	49
   721  00FE23  01                 	db	1
   722  00FE24  01                 	db	1
   723  00FE25  7F                 	db	127
   724  00FE26  01                 	db	1
   725  00FE27  01                 	db	1
   726  00FE28  3F                 	db	63
   727  00FE29  40                 	db	64
   728  00FE2A  40                 	db	64
   729  00FE2B  40                 	db	64
   730  00FE2C  3F                 	db	63
   731  00FE2D  1F                 	db	31
   732  00FE2E  20                 	db	32
   733  00FE2F  40                 	db	64
   734  00FE30  20                 	db	32
   735  00FE31  1F                 	db	31
   736  00FE32  7F                 	db	127
   737  00FE33  20                 	db	32
   738  00FE34  18                 	db	24
   739  00FE35  20                 	db	32
   740  00FE36  7F                 	db	127
   741  00FE37  63                 	db	99
   742  00FE38  14                 	db	20
   743  00FE39  08                 	db	8
   744  00FE3A  14                 	db	20
   745  00FE3B  63                 	db	99
   746  00FE3C  03                 	db	3
   747  00FE3D  04                 	db	4
   748  00FE3E  78                 	db	120
   749  00FE3F  04                 	db	4
   750  00FE40  03                 	db	3
   751  00FE41  61                 	db	97
   752  00FE42  51                 	db	81
   753  00FE43  49                 	db	73
   754  00FE44  45                 	db	69
   755  00FE45  43                 	db	67
   756  00FE46  00                 	db	0
   757  00FE47  00                 	db	0
   758  00FE48  7F                 	db	127
   759  00FE49  41                 	db	65
   760  00FE4A  41                 	db	65
   761  00FE4B  02                 	db	2
   762  00FE4C  04                 	db	4
   763  00FE4D  08                 	db	8
   764  00FE4E  10                 	db	16
   765  00FE4F  20                 	db	32
   766  00FE50  41                 	db	65
   767  00FE51  41                 	db	65
   768  00FE52  7F                 	db	127
   769  00FE53  00                 	db	0
   770  00FE54  00                 	db	0
   771  00FE55  04                 	db	4
   772  00FE56  02                 	db	2
   773  00FE57  01                 	db	1
   774  00FE58  02                 	db	2
   775  00FE59  04                 	db	4
   776  00FE5A  40                 	db	64
   777  00FE5B  40                 	db	64
   778  00FE5C  40                 	db	64
   779  00FE5D  40                 	db	64
   780  00FE5E  40                 	db	64
   781  00FE5F  00                 	db	0
   782  00FE60  01                 	db	1
   783  00FE61  02                 	db	2
   784  00FE62  04                 	db	4
   785  00FE63  00                 	db	0
   786  00FE64  20                 	db	32
   787  00FE65  54                 	db	84
   788  00FE66  54                 	db	84
   789  00FE67  54                 	db	84
   790  00FE68  78                 	db	120
   791  00FE69  7F                 	db	127
   792  00FE6A  48                 	db	72
   793  00FE6B  44                 	db	68
   794  00FE6C  44                 	db	68
   795  00FE6D  38                 	db	56
   796  00FE6E  38                 	db	56
   797  00FE6F  44                 	db	68
   798  00FE70  44                 	db	68
   799  00FE71  44                 	db	68
   800  00FE72  20                 	db	32
   801  00FE73  38                 	db	56
   802  00FE74  44                 	db	68
   803  00FE75  44                 	db	68
   804  00FE76  48                 	db	72
   805  00FE77  7F                 	db	127
   806  00FE78  38                 	db	56
   807  00FE79  54                 	db	84
   808  00FE7A  54                 	db	84
   809  00FE7B  54                 	db	84
   810  00FE7C  18                 	db	24
   811  00FE7D  08                 	db	8
   812  00FE7E  7E                 	db	126
   813  00FE7F  09                 	db	9
   814  00FE80  01                 	db	1
   815  00FE81  02                 	db	2
   816  00FE82  08                 	db	8
   817  00FE83  14                 	db	20
   818  00FE84  54                 	db	84
   819  00FE85  54                 	db	84
   820  00FE86  3C                 	db	60
   821  00FE87  7F                 	db	127
   822  00FE88  08                 	db	8
   823  00FE89  04                 	db	4
   824  00FE8A  04                 	db	4
   825  00FE8B  78                 	db	120
   826  00FE8C  00                 	db	0
   827  00FE8D  44                 	db	68
   828  00FE8E  7D                 	db	125
   829  00FE8F  40                 	db	64
   830  00FE90  00                 	db	0
   831  00FE91  20                 	db	32
   832  00FE92  40                 	db	64
   833  00FE93  44                 	db	68
   834  00FE94  3D                 	db	61
   835  00FE95  00                 	db	0
   836  00FE96  00                 	db	0
   837  00FE97  7F                 	db	127
   838  00FE98  10                 	db	16
   839  00FE99  28                 	db	40
   840  00FE9A  44                 	db	68
   841  00FE9B  00                 	db	0
   842  00FE9C  41                 	db	65
   843  00FE9D  7F                 	db	127
   844  00FE9E  40                 	db	64
   845  00FE9F  00                 	db	0
   846  00FEA0  7C                 	db	124
   847  00FEA1  04                 	db	4
   848  00FEA2  18                 	db	24
   849  00FEA3  04                 	db	4
   850  00FEA4  78                 	db	120
   851  00FEA5  7C                 	db	124
   852  00FEA6  08                 	db	8
   853  00FEA7  04                 	db	4
   854  00FEA8  04                 	db	4
   855  00FEA9  78                 	db	120
   856  00FEAA  38                 	db	56
   857  00FEAB  44                 	db	68
   858  00FEAC  44                 	db	68
   859  00FEAD  44                 	db	68
   860  00FEAE  38                 	db	56
   861  00FEAF  7C                 	db	124
   862  00FEB0  14                 	db	20
   863  00FEB1  14                 	db	20
   864  00FEB2  14                 	db	20
   865  00FEB3  08                 	db	8
   866  00FEB4  08                 	db	8
   867  00FEB5  14                 	db	20
   868  00FEB6  14                 	db	20
   869  00FEB7  18                 	db	24
   870  00FEB8  7C                 	db	124
   871  00FEB9  7C                 	db	124
   872  00FEBA  08                 	db	8
   873  00FEBB  04                 	db	4
   874  00FEBC  04                 	db	4
   875  00FEBD  08                 	db	8
   876  00FEBE  48                 	db	72
   877  00FEBF  54                 	db	84
   878  00FEC0  54                 	db	84
   879  00FEC1  54                 	db	84
   880  00FEC2  20                 	db	32
   881  00FEC3  04                 	db	4
   882  00FEC4  3F                 	db	63
   883  00FEC5  44                 	db	68
   884  00FEC6  40                 	db	64
   885  00FEC7  20                 	db	32
   886  00FEC8  3C                 	db	60
   887  00FEC9  40                 	db	64
   888  00FECA  40                 	db	64
   889  00FECB  20                 	db	32
   890  00FECC  7C                 	db	124
   891  00FECD  1C                 	db	28
   892  00FECE  20                 	db	32
   893  00FECF  40                 	db	64
   894  00FED0  20                 	db	32
   895  00FED1  1C                 	db	28
   896  00FED2  3C                 	db	60
   897  00FED3  40                 	db	64
   898  00FED4  30                 	db	48
   899  00FED5  40                 	db	64
   900  00FED6  3C                 	db	60
   901  00FED7  44                 	db	68
   902  00FED8  28                 	db	40
   903  00FED9  10                 	db	16
   904  00FEDA  28                 	db	40
   905  00FEDB  44                 	db	68
   906  00FEDC  0C                 	db	12
   907  00FEDD  50                 	db	80
   908  00FEDE  50                 	db	80
   909  00FEDF  50                 	db	80
   910  00FEE0  3C                 	db	60
   911  00FEE1  44                 	db	68
   912  00FEE2  64                 	db	100
   913  00FEE3  54                 	db	84
   914  00FEE4  4C                 	db	76
   915  00FEE5  44                 	db	68
   916  00FEE6  00                 	db	0
   917  00FEE7  08                 	db	8
   918  00FEE8  36                 	db	54
   919  00FEE9  41                 	db	65
   920  00FEEA  00                 	db	0
   921  00FEEB  00                 	db	0
   922  00FEEC  00                 	db	0
   923  00FEED  7F                 	db	127
   924  00FEEE  00                 	db	0
   925  00FEEF  00                 	db	0
   926  00FEF0  00                 	db	0
   927  00FEF1  41                 	db	65
   928  00FEF2  36                 	db	54
   929  00FEF3  08                 	db	8
   930  00FEF4  00                 	db	0
   931  00FEF5  08                 	db	8
   932  00FEF6  08                 	db	8
   933  00FEF7  2A                 	db	42
   934  00FEF8  1C                 	db	28
   935  00FEF9  08                 	db	8
   936  00FEFA  08                 	db	8
   937  00FEFB  1C                 	db	28
   938  00FEFC  2A                 	db	42
   939  00FEFD  08                 	db	8
   940  00FEFE  08                 	db	8
   941  00FEFF                     __end_of_Font5x7:
   942                           	opt stack 0
   943  00FEFF                     _PortG_Property:
   944                           	opt stack 0
   945  00FEFF  FC00               	dw	64512
   946  00FF01                     __end_of_PortG_Property:
   947                           	opt stack 0
   948  00FF01                     _PortF_Property:
   949                           	opt stack 0
   950  00FF01  0FFF               	dw	4095
   951  00FF03                     __end_of_PortF_Property:
   952                           	opt stack 0
   953  00FF03                     _PortE_Property:
   954                           	opt stack 0
   955  00FF03  0000               	dw	0
   956  00FF05                     __end_of_PortE_Property:
   957                           	opt stack 0
   958  00FF05                     _PortD_Property:
   959                           	opt stack 0
   960  00FF05  FFFF               	dw	65535
   961  00FF07                     __end_of_PortD_Property:
   962                           	opt stack 0
   963  00FF07                     _PortC_Property:
   964                           	opt stack 0
   965  00FF07  FFF0               	dw	65520
   966  00FF09                     __end_of_PortC_Property:
   967                           	opt stack 0
   968  00FF09                     _PortB_Property:
   969                           	opt stack 0
   970  00FF09  FF00               	dw	65280
   971  00FF0B                     __end_of_PortB_Property:
   972                           	opt stack 0
   973  00FF0B                     _PortA_Property:
   974                           	opt stack 0
   975  00FF0B  00FF               	dw	255
   976  00FF0D                     __end_of_PortA_Property:
   977                           	opt stack 0
   978  0000                     _TMR0	set	4054
   979  0000                     _RCREG1	set	4015
   980  0000                     _TXREG1	set	4014
   981  0000                     _SPBRG1	set	4016
   982  0000                     _TXSTA1bits	set	4013
   983  0000                     _BAUDCON1bits	set	3966
   984  0000                     _RCSTA1	set	4012
   985  0000                     _TXSTA1	set	4013
   986  0000                     _TRISCbits	set	3988
   987  0000                     _PR2	set	4043
   988  0000                     _T2CONbits	set	4042
   989  0000                     _T0CONbits	set	4053
   990  0000                     _RCONbits	set	4048
   991  0000                     _OSCTUNEbits	set	3995
   992  0000                     _PIR3	set	4004
   993  0000                     _PIR2	set	4001
   994  0000                     _PIR1	set	3998
   995  0000                     _INTCONbits	set	4082
   996  0000                     _SSP2CON2bits	set	3947
   997  0000                     _SSP1CON2bits	set	4037
   998  0000                     _SSP1ADD	set	4040
   999  0000                     _ANCON0	set	4033
  1000  0000                     _ADRESL	set	4035
  1001  0000                     _ADRESH	set	4036
  1002  0000                     _ADCON1bits	set	4033
  1003  0000                     _ADCON0bits	set	4034
  1004  0000                     _SSP2CON1bits	set	3948
  1005  0000                     _SSP1CON1bits	set	4038
  1006  0000                     _SSP2STATbits	set	3949
  1007  0000                     _SSP1STATbits	set	4039
  1008  0000                     _PIE3bits	set	4003
  1009  0000                     _PIE1bits	set	3997
  1010  0000                     _PIR3bits	set	4004
  1011  0000                     _PIR1bits	set	3998
  1012  0000                     _IPR3bits	set	4005
  1013  0000                     _IPR1bits	set	3999
  1014  0000                     _PORTFbits	set	3973
  1015  0000                     _SSP2CON2	set	3947
  1016  0000                     _SSP1CON2	set	4037
  1017  0000                     _SSP2BUF	set	3951
  1018  0000                     _SSP2CON1	set	3948
  1019  0000                     _SSP2STAT	set	3949
  1020  0000                     _SSP1BUF	set	4041
  1021  0000                     _SSP1CON1	set	4038
  1022  0000                     _SSP1STAT	set	4039
  1023  0000                     _LATG	set	3983
  1024  0000                     _LATF	set	3982
  1025  0000                     _LATE	set	3981
  1026  0000                     _LATD	set	3980
  1027  0000                     _LATC	set	3979
  1028  0000                     _LATB	set	3978
  1029  0000                     _LATA	set	3977
  1030  0000                     _TRISG	set	3992
  1031  0000                     _TRISF	set	3991
  1032  0000                     _TRISE	set	3990
  1033  0000                     _TRISD	set	3989
  1034  0000                     _TRISC	set	3988
  1035  0000                     _TRISB	set	3987
  1036  0000                     _TRISA	set	3986
  1037  0000                     _PORTG	set	3974
  1038  0000                     _PORTF	set	3973
  1039  0000                     _PORTE	set	3972
  1040  0000                     _PORTD	set	3971
  1041  0000                     _PORTC	set	3970
  1042  0000                     _PORTB	set	3969
  1043  0000                     _PORTA	set	3968
  1044  00FF0D                     STR_10:
  1045  00FF0D  43                 	db	67	;'C'
  1046  00FF0E  6C                 	db	108	;'l'
  1047  00FF0F  6F                 	db	111	;'o'
  1048  00FF10  73                 	db	115	;'s'
  1049  00FF11  65                 	db	101	;'e'
  1050  00FF12  73                 	db	115	;'s'
  1051  00FF13  74                 	db	116	;'t'
  1052  00FF14  20                 	db	32
  1053  00FF15  57                 	db	87	;'W'
  1054  00FF16  61                 	db	97	;'a'
  1055  00FF17  6C                 	db	108	;'l'
  1056  00FF18  6C                 	db	108	;'l'
  1057  00FF19  3A                 	db	58	;':'
  1058  00FF1A  25                 	db	37
  1059  00FF1B  75                 	db	117	;'u'
  1060  00FF1C  0A                 	db	10
  1061  00FF1D  43                 	db	67	;'C'
  1062  00FF1E  6C                 	db	108	;'l'
  1063  00FF1F  6F                 	db	111	;'o'
  1064  00FF20  73                 	db	115	;'s'
  1065  00FF21  65                 	db	101	;'e'
  1066  00FF22  73                 	db	115	;'s'
  1067  00FF23  74                 	db	116	;'t'
  1068  00FF24  20                 	db	32
  1069  00FF25  41                 	db	65	;'A'
  1070  00FF26  6E                 	db	110	;'n'
  1071  00FF27  67                 	db	103	;'g'
  1072  00FF28  6C                 	db	108	;'l'
  1073  00FF29  65                 	db	101	;'e'
  1074  00FF2A  3A                 	db	58	;':'
  1075  00FF2B  25                 	db	37
  1076  00FF2C  64                 	db	100	;'d'
  1077  00FF2D  0A                 	db	10
  1078  00FF2E  4C                 	db	76	;'L'
  1079  00FF2F  65                 	db	101	;'e'
  1080  00FF30  66                 	db	102	;'f'
  1081  00FF31  74                 	db	116	;'t'
  1082  00FF32  20                 	db	32
  1083  00FF33  42                 	db	66	;'B'
  1084  00FF34  75                 	db	117	;'u'
  1085  00FF35  6D                 	db	109	;'m'
  1086  00FF36  70                 	db	112	;'p'
  1087  00FF37  3A                 	db	58	;':'
  1088  00FF38  25                 	db	37
  1089  00FF39  75                 	db	117	;'u'
  1090  00FF3A  0A                 	db	10
  1091  00FF3B  52                 	db	82	;'R'
  1092  00FF3C  69                 	db	105	;'i'
  1093  00FF3D  67                 	db	103	;'g'
  1094  00FF3E  68                 	db	104	;'h'
  1095  00FF3F  74                 	db	116	;'t'
  1096  00FF40  42                 	db	66	;'B'
  1097  00FF41  75                 	db	117	;'u'
  1098  00FF42  6D                 	db	109	;'m'
  1099  00FF43  70                 	db	112	;'p'
  1100  00FF44  3A                 	db	58	;':'
  1101  00FF45  25                 	db	37
  1102  00FF46  75                 	db	117	;'u'
  1103  00FF47  0A                 	db	10
  1104  00FF48  41                 	db	65	;'A'
  1105  00FF49  6E                 	db	110	;'n'
  1106  00FF4A  67                 	db	103	;'g'
  1107  00FF4B  6C                 	db	108	;'l'
  1108  00FF4C  65                 	db	101	;'e'
  1109  00FF4D  54                 	db	84	;'T'
  1110  00FF4E  6F                 	db	111	;'o'
  1111  00FF4F  54                 	db	84	;'T'
  1112  00FF50  75                 	db	117	;'u'
  1113  00FF51  72                 	db	114	;'r'
  1114  00FF52  6E                 	db	110	;'n'
  1115  00FF53  3A                 	db	58	;':'
  1116  00FF54  20                 	db	32
  1117  00FF55  25                 	db	37
  1118  00FF56  64                 	db	100	;'d'
  1119  00FF57  0A                 	db	10
  1120  00FF58  00                 	db	0
  1121  00FF59                     STR_2:
  1122  00FF59  43                 	db	67	;'C'
  1123  00FF5A  6C                 	db	108	;'l'
  1124  00FF5B  6F                 	db	111	;'o'
  1125  00FF5C  73                 	db	115	;'s'
  1126  00FF5D  65                 	db	101	;'e'
  1127  00FF5E  73                 	db	115	;'s'
  1128  00FF5F  74                 	db	116	;'t'
  1129  00FF60  20                 	db	32
  1130  00FF61  57                 	db	87	;'W'
  1131  00FF62  61                 	db	97	;'a'
  1132  00FF63  6C                 	db	108	;'l'
  1133  00FF64  6C                 	db	108	;'l'
  1134  00FF65  3A                 	db	58	;':'
  1135  00FF66  25                 	db	37
  1136  00FF67  75                 	db	117	;'u'
  1137  00FF68  0A                 	db	10
  1138  00FF69  43                 	db	67	;'C'
  1139  00FF6A  6C                 	db	108	;'l'
  1140  00FF6B  6F                 	db	111	;'o'
  1141  00FF6C  73                 	db	115	;'s'
  1142  00FF6D  65                 	db	101	;'e'
  1143  00FF6E  73                 	db	115	;'s'
  1144  00FF6F  74                 	db	116	;'t'
  1145  00FF70  20                 	db	32
  1146  00FF71  41                 	db	65	;'A'
  1147  00FF72  6E                 	db	110	;'n'
  1148  00FF73  67                 	db	103	;'g'
  1149  00FF74  6C                 	db	108	;'l'
  1150  00FF75  65                 	db	101	;'e'
  1151  00FF76  3A                 	db	58	;':'
  1152  00FF77  25                 	db	37
  1153  00FF78  64                 	db	100	;'d'
  1154  00FF79  0A                 	db	10
  1155  00FF7A  4C                 	db	76	;'L'
  1156  00FF7B  65                 	db	101	;'e'
  1157  00FF7C  66                 	db	102	;'f'
  1158  00FF7D  74                 	db	116	;'t'
  1159  00FF7E  20                 	db	32
  1160  00FF7F  42                 	db	66	;'B'
  1161  00FF80  75                 	db	117	;'u'
  1162  00FF81  6D                 	db	109	;'m'
  1163  00FF82  70                 	db	112	;'p'
  1164  00FF83  3A                 	db	58	;':'
  1165  00FF84  25                 	db	37
  1166  00FF85  75                 	db	117	;'u'
  1167  00FF86  0A                 	db	10
  1168  00FF87  52                 	db	82	;'R'
  1169  00FF88  69                 	db	105	;'i'
  1170  00FF89  67                 	db	103	;'g'
  1171  00FF8A  68                 	db	104	;'h'
  1172  00FF8B  74                 	db	116	;'t'
  1173  00FF8C  42                 	db	66	;'B'
  1174  00FF8D  75                 	db	117	;'u'
  1175  00FF8E  6D                 	db	109	;'m'
  1176  00FF8F  70                 	db	112	;'p'
  1177  00FF90  3A                 	db	58	;':'
  1178  00FF91  25                 	db	37
  1179  00FF92  75                 	db	117	;'u'
  1180  00FF93  0A                 	db	10
  1181  00FF94  00                 	db	0
  1182  00FF95                     STR_4:
  1183  00FF95  54                 	db	84	;'T'
  1184  00FF96  6F                 	db	111	;'o'
  1185  00FF97  74                 	db	116	;'t'
  1186  00FF98  61                 	db	97	;'a'
  1187  00FF99  6C                 	db	108	;'l'
  1188  00FF9A  20                 	db	32
  1189  00FF9B  44                 	db	68	;'D'
  1190  00FF9C  69                 	db	105	;'i'
  1191  00FF9D  73                 	db	115	;'s'
  1192  00FF9E  74                 	db	116	;'t'
  1193  00FF9F  61                 	db	97	;'a'
  1194  00FFA0  6E                 	db	110	;'n'
  1195  00FFA1  63                 	db	99	;'c'
  1196  00FFA2  65                 	db	101	;'e'
  1197  00FFA3  3A                 	db	58	;':'
  1198  00FFA4  25                 	db	37
  1199  00FFA5  75                 	db	117	;'u'
  1200  00FFA6  0A                 	db	10
  1201  00FFA7  4C                 	db	76	;'L'
  1202  00FFA8  65                 	db	101	;'e'
  1203  00FFA9  66                 	db	102	;'f'
  1204  00FFAA  74                 	db	116	;'t'
  1205  00FFAB  20                 	db	32
  1206  00FFAC  42                 	db	66	;'B'
  1207  00FFAD  75                 	db	117	;'u'
  1208  00FFAE  6D                 	db	109	;'m'
  1209  00FFAF  70                 	db	112	;'p'
  1210  00FFB0  3A                 	db	58	;':'
  1211  00FFB1  25                 	db	37
  1212  00FFB2  75                 	db	117	;'u'
  1213  00FFB3  0A                 	db	10
  1214  00FFB4  52                 	db	82	;'R'
  1215  00FFB5  69                 	db	105	;'i'
  1216  00FFB6  67                 	db	103	;'g'
  1217  00FFB7  68                 	db	104	;'h'
  1218  00FFB8  74                 	db	116	;'t'
  1219  00FFB9  20                 	db	32
  1220  00FFBA  42                 	db	66	;'B'
  1221  00FFBB  75                 	db	117	;'u'
  1222  00FFBC  6D                 	db	109	;'m'
  1223  00FFBD  70                 	db	112	;'p'
  1224  00FFBE  3A                 	db	58	;':'
  1225  00FFBF  25                 	db	37
  1226  00FFC0  75                 	db	117	;'u'
  1227  00FFC1  0A                 	db	10
  1228  00FFC2  00                 	db	0
  1229  00FFC3                     STR_13:
  1230  00FFC3  20                 	db	32
  1231  00FFC4  20                 	db	32
  1232  00FFC5  20                 	db	32
  1233  00FFC6  20                 	db	32
  1234  00FFC7  20                 	db	32
  1235  00FFC8  20                 	db	32
  1236  00FFC9  20                 	db	32
  1237  00FFCA  20                 	db	32
  1238  00FFCB  20                 	db	32
  1239  00FFCC  20                 	db	32
  1240  00FFCD  20                 	db	32
  1241  00FFCE  20                 	db	32
  1242  00FFCF  20                 	db	32
  1243  00FFD0  20                 	db	32
  1244  00FFD1  20                 	db	32
  1245  00FFD2  20                 	db	32
  1246  00FFD3  20                 	db	32
  1247  00FFD4  20                 	db	32
  1248  00FFD5  20                 	db	32
  1249  00FFD6  0A                 	db	10
  1250  00FFD7  00                 	db	0
  1251  00FFD8                     STR_12:
  1252  00FFD8  50                 	db	80	;'P'
  1253  00FFD9  6C                 	db	108	;'l'
  1254  00FFDA  65                 	db	101	;'e'
  1255  00FFDB  61                 	db	97	;'a'
  1256  00FFDC  73                 	db	115	;'s'
  1257  00FFDD  65                 	db	101	;'e'
  1258  00FFDE  20                 	db	32
  1259  00FFDF  73                 	db	115	;'s'
  1260  00FFE0  65                 	db	101	;'e'
  1261  00FFE1  6C                 	db	108	;'l'
  1262  00FFE2  65                 	db	101	;'e'
  1263  00FFE3  63                 	db	99	;'c'
  1264  00FFE4  74                 	db	116	;'t'
  1265  00FFE5  20                 	db	32
  1266  00FFE6  6D                 	db	109	;'m'
  1267  00FFE7  6F                 	db	111	;'o'
  1268  00FFE8  64                 	db	100	;'d'
  1269  00FFE9  65                 	db	101	;'e'
  1270  00FFEA  2E                 	db	46
  1271  00FFEB  0A                 	db	10
  1272  00FFEC  00                 	db	0
  1273  00FFED                     STR_8:
  1274  00FFED  44                 	db	68	;'D'
  1275  00FFEE  69                 	db	105	;'i'
  1276  00FFEF  73                 	db	115	;'s'
  1277  00FFF0  74                 	db	116	;'t'
  1278  00FFF1  61                 	db	97	;'a'
  1279  00FFF2  6E                 	db	110	;'n'
  1280  00FFF3  63                 	db	99	;'c'
  1281  00FFF4  65                 	db	101	;'e'
  1282  00FFF5  3A                 	db	58	;':'
  1283  00FFF6  20                 	db	32
  1284  00FFF7  25                 	db	37
  1285  00FFF8  64                 	db	100	;'d'
  1286  00FFF9  0A                 	db	10
  1287  00FFFA  00                 	db	0
  1288  00FFFB                     STR_1:
  1289  00FFFB  25                 	db	37
  1290  00FFFC  63                 	db	99	;'c'
  1291  00FFFD  00                 	db	0
  1292  0000                     
  1293                           ; #config settings
  1294  00FFFE  00                 	db	0	; dummy byte at the end
  1295  0000                     
  1296                           	psect	cinit
  1297  014570                     __pcinit:
  1298                           	opt stack 0
  1299  014570                     start_initialization:
  1300                           	opt stack 0
  1301  014570                     __initialization:
  1302                           	opt stack 0
  1303                           
  1304                           ; Initialize objects allocated to BANK3 (12 bytes)
  1305                           ; load TBLPTR registers with __pidataBANK3
  1306  014570  0EB8               	movlw	low __pidataBANK3
  1307  014572  6EF6               	movwf	tblptrl,c
  1308  014574  0E66               	movlw	high __pidataBANK3
  1309  014576  6EF7               	movwf	tblptrh,c
  1310  014578  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1311  01457A  6EF8               	movwf	tblptru,c
  1312  01457C  EE03  F0E8         	lfsr	0,__pdataBANK3
  1313  014580  EE10 F00C          	lfsr	1,12
  1314  014584                     copy_data0:
  1315  014584  0009               	tblrd		*+
  1316  014586  CFF5 FFEE          	movff	tablat,postinc0
  1317  01458A  50E5               	movf	postdec1,w,c
  1318  01458C  50E1               	movf	fsr1l,w,c
  1319  01458E  E1FA               	bnz	copy_data0
  1320                           
  1321                           ; Initialize objects allocated to BANK0 (7 bytes)
  1322                           ; load TBLPTR registers with __pidataBANK0
  1323  014590  0E1E               	movlw	low __pidataBANK0
  1324  014592  6EF6               	movwf	tblptrl,c
  1325  014594  0E67               	movlw	high __pidataBANK0
  1326  014596  6EF7               	movwf	tblptrh,c
  1327  014598  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1328  01459A  6EF8               	movwf	tblptru,c
  1329  01459C  EE00  F0F9         	lfsr	0,__pdataBANK0
  1330  0145A0  EE10 F007          	lfsr	1,7
  1331  0145A4                     copy_data1:
  1332  0145A4  0009               	tblrd		*+
  1333  0145A6  CFF5 FFEE          	movff	tablat,postinc0
  1334  0145AA  50E5               	movf	postdec1,w,c
  1335  0145AC  50E1               	movf	fsr1l,w,c
  1336  0145AE  E1FA               	bnz	copy_data1
  1337                           
  1338                           ; Initialize objects allocated to COMRAM (10 bytes)
  1339                           ; load TBLPTR registers with __pidataCOMRAM
  1340  0145B0  0EE8               	movlw	low __pidataCOMRAM
  1341  0145B2  6EF6               	movwf	tblptrl,c
  1342  0145B4  0E66               	movlw	high __pidataCOMRAM
  1343  0145B6  6EF7               	movwf	tblptrh,c
  1344  0145B8  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1345  0145BA  6EF8               	movwf	tblptru,c
  1346  0145BC  EE00  F047         	lfsr	0,__pdataCOMRAM
  1347  0145C0  EE10 F00A          	lfsr	1,10
  1348  0145C4                     copy_data2:
  1349  0145C4  0009               	tblrd		*+
  1350  0145C6  CFF5 FFEE          	movff	tablat,postinc0
  1351  0145CA  50E5               	movf	postdec1,w,c
  1352  0145CC  50E1               	movf	fsr1l,w,c
  1353  0145CE  E1FA               	bnz	copy_data2
  1354                           
  1355                           ; Clear objects allocated to BIGRAM (300 bytes)
  1356  0145D0  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1357  0145D4  EE11 F02C          	lfsr	1,300
  1358  0145D8                     clear_0:
  1359  0145D8  6AEE               	clrf	postinc0,c
  1360  0145DA  50E5               	movf	postdec1,w,c
  1361  0145DC  50E1               	movf	fsr1l,w,c
  1362  0145DE  E1FC               	bnz	clear_0
  1363  0145E0  50E2               	movf	fsr1h,w,c
  1364  0145E2  E1FA               	bnz	clear_0
  1365                           
  1366                           ; Clear objects allocated to BANK4 (170 bytes)
  1367  0145E4  EE04  F000         	lfsr	0,__pbssBANK4
  1368  0145E8  0EAA               	movlw	170
  1369  0145EA                     clear_1:
  1370  0145EA  6AEE               	clrf	postinc0,c
  1371  0145EC  06E8               	decf	wreg,f,c
  1372  0145EE  E1FD               	bnz	clear_1
  1373                           
  1374                           ; Clear objects allocated to BANK3 (232 bytes)
  1375  0145F0  EE03  F000         	lfsr	0,__pbssBANK3
  1376  0145F4  0EE8               	movlw	232
  1377  0145F6                     clear_2:
  1378  0145F6  6AEE               	clrf	postinc0,c
  1379  0145F8  06E8               	decf	wreg,f,c
  1380  0145FA  E1FD               	bnz	clear_2
  1381                           
  1382                           ; Clear objects allocated to BANK0 (90 bytes)
  1383  0145FC  EE00  F060         	lfsr	0,__pbssBANK0
  1384  014600  0E5A               	movlw	90
  1385  014602                     clear_3:
  1386  014602  6AEE               	clrf	postinc0,c
  1387  014604  06E8               	decf	wreg,f,c
  1388  014606  E1FD               	bnz	clear_3
  1389                           
  1390                           ; Clear objects allocated to COMRAM (30 bytes)
  1391  014608  EE00  F029         	lfsr	0,__pbssCOMRAM
  1392  01460C  0E1E               	movlw	30
  1393  01460E                     clear_4:
  1394  01460E  6AEE               	clrf	postinc0,c
  1395  014610  06E8               	decf	wreg,f,c
  1396  014612  E1FD               	bnz	clear_4
  1397  014614                     end_of_initialization:
  1398                           	opt stack 0
  1399  014614                     __end_of__initialization:
  1400                           	opt stack 0
  1401  014614  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1402  014616  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1403  014618  0100               	movlb	0
  1404  01461A  EF43  F09D         	goto	_main	;jump to C main() function
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           
  1415                           	psect	bssCOMRAM
  1416  000029                     __pbssCOMRAM:
  1417                           	opt stack 0
  1418  000029                     _COUNTER:
  1419                           	opt stack 0
  1420  000029                     	ds	2
  1421  00002B                     HMI_GRender@a:
  1422                           	opt stack 0
  1423  00002B                     	ds	2
  1424  00002D                     SPI_Send9@dat:
  1425                           	opt stack 0
  1426  00002D                     	ds	2
  1427  00002F                     _iRDropCaster:
  1428                           	opt stack 0
  1429  00002F                     	ds	1
  1430  000030                     _iRVirtualWall:
  1431                           	opt stack 0
  1432  000030                     	ds	1
  1433  000031                     _iRCliffR:
  1434                           	opt stack 0
  1435  000031                     	ds	1
  1436  000032                     _iRCliffFR:
  1437                           	opt stack 0
  1438  000032                     	ds	1
  1439  000033                     _iRCliffFL:
  1440                           	opt stack 0
  1441  000033                     	ds	1
  1442  000034                     _iRCliffL:
  1443                           	opt stack 0
  1444  000034                     	ds	1
  1445  000035                     _iRWall:
  1446                           	opt stack 0
  1447  000035                     	ds	1
  1448  000036                     _iRBumpDrop:
  1449                           	opt stack 0
  1450  000036                     	ds	1
  1451  000037                     _iRScriptIndex:
  1452                           	opt stack 0
  1453  000037                     	ds	1
  1454  000038                     _u:
  1455                           	opt stack 0
  1456  000038                     	ds	1
  1457  000039                     _j:
  1458                           	opt stack 0
  1459  000039                     	ds	1
  1460  00003A                     _i:
  1461                           	opt stack 0
  1462  00003A                     	ds	1
  1463  00003B                     rand@screw:
  1464                           	opt stack 0
  1465  00003B                     	ds	1
  1466  00003C                     _ADC_Initialised:
  1467                           	opt stack 0
  1468  00003C                     	ds	1
  1469  00003D                     OutSeg@a:
  1470                           	opt stack 0
  1471  00003D                     	ds	1
  1472  00003E                     OutSeg@segset:
  1473                           	opt stack 0
  1474  00003E                     	ds	1
  1475  00003F                     OutSeg@cur:
  1476                           	opt stack 0
  1477  00003F                     	ds	1
  1478  000040                     _I2C1T:
  1479                           	opt stack 0
  1480  000040                     	ds	7
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1h	equ	0xFE2
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	dataCOMRAM
  1492  000047                     __pdataCOMRAM:
  1493                           	opt stack 0
  1494  000047                     _gCursor:
  1495                           	opt stack 0
  1496  000047                     	ds	4
  1497  00004B                     _Bus_State:
  1498                           	opt stack 0
  1499  00004B                     	ds	1
  1500  00004C                     	ds	1
  1501  00004D                     	ds	1
  1502  00004E                     	ds	1
  1503  00004F                     _l:
  1504                           	opt stack 0
  1505  00004F                     	ds	1
  1506  000050                     _w:
  1507                           	opt stack 0
  1508  000050                     	ds	1
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           fsr1h	equ	0xFE2
  1517                           fsr1l	equ	0xFE1
  1518                           
  1519                           	psect	bssBANK0
  1520  000060                     __pbssBANK0:
  1521                           	opt stack 0
  1522  000060                     _gISR:
  1523                           	opt stack 0
  1524  000060                     	ds	3
  1525  000063                     _lQueue:
  1526                           	opt stack 0
  1527  000063                     	ds	3
  1528  000066                     _lStepFunction:
  1529                           	opt stack 0
  1530  000066                     	ds	3
  1531  000069                     _dist:
  1532                           	opt stack 0
  1533  000069                     	ds	2
  1534  00006B                     _angleToClosestWall:
  1535                           	opt stack 0
  1536  00006B                     	ds	2
  1537  00006D                     _IRValue:
  1538                           	opt stack 0
  1539  00006D                     	ds	2
  1540  00006F                     _Stepstomin:
  1541                           	opt stack 0
  1542  00006F                     	ds	2
  1543  000071                     _StepRotate:
  1544                           	opt stack 0
  1545  000071                     	ds	2
  1546  000073                     _mode:
  1547                           	opt stack 0
  1548  000073                     	ds	2
  1549  000075                     _angleTotal:
  1550                           	opt stack 0
  1551  000075                     	ds	2
  1552  000077                     _distanceTotal:
  1553                           	opt stack 0
  1554  000077                     	ds	2
  1555  000079                     _iRDistance:
  1556                           	opt stack 0
  1557  000079                     	ds	2
  1558  00007B                     _pShiftVal:
  1559                           	opt stack 0
  1560  00007B                     	ds	2
  1561  00007D                     _val:
  1562                           	opt stack 0
  1563  00007D                     	ds	2
  1564  00007F                     _lMotor:
  1565                           	opt stack 0
  1566  00007F                     	ds	2
  1567  000081                     _lCurrent:
  1568                           	opt stack 0
  1569  000081                     	ds	2
  1570  000083                     _gBackcolour:
  1571                           	opt stack 0
  1572  000083                     	ds	2
  1573  000085                     _iRDropLeft:
  1574                           	opt stack 0
  1575  000085                     	ds	1
  1576  000086                     _iRDropRight:
  1577                           	opt stack 0
  1578  000086                     	ds	1
  1579  000087                     _iRBumpLeft:
  1580                           	opt stack 0
  1581  000087                     	ds	1
  1582  000088                     _iRBumpRight:
  1583                           	opt stack 0
  1584  000088                     	ds	1
  1585  000089                     Event_TestButton@j:
  1586                           	opt stack 0
  1587  000089                     	ds	1
  1588  00008A                     Timer2_Init@PRE:
  1589                           	opt stack 0
  1590  00008A                     	ds	1
  1591  00008B                     Timer2_Init@INDEX:
  1592                           	opt stack 0
  1593  00008B                     	ds	1
  1594  00008C                     Timer0_Init@PRE:
  1595                           	opt stack 0
  1596  00008C                     	ds	1
  1597  00008D                     _INDEX:
  1598                           	opt stack 0
  1599  00008D                     	ds	1
  1600  00008E                     _lBufferY:
  1601                           	opt stack 0
  1602  00008E                     	ds	1
  1603  00008F                     _lBufferX:
  1604                           	opt stack 0
  1605  00008F                     	ds	1
  1606  000090                     _clearall:
  1607                           	opt stack 0
  1608  000090                     	ds	1
  1609  000091                     _PortE:
  1610                           	opt stack 0
  1611  000091                     	ds	10
  1612  00009B                     _PortD:
  1613                           	opt stack 0
  1614  00009B                     	ds	10
  1615  0000A5                     _PortC:
  1616                           	opt stack 0
  1617  0000A5                     	ds	10
  1618  0000AF                     _Stepper:
  1619                           	opt stack 0
  1620  0000AF                     	ds	6
  1621  0000B5                     _ADC_AN0:
  1622                           	opt stack 0
  1623  0000B5                     	ds	5
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1h	equ	0xFE2
  1632                           fsr1l	equ	0xFE1
  1633                           
  1634                           	psect	dataBANK0
  1635  0000F9                     __pdataBANK0:
  1636                           	opt stack 0
  1637  0000F9                     _TimerX:
  1638                           	opt stack 0
  1639  0000F9                     	ds	2
  1640  0000FB                     _MinDist:
  1641                           	opt stack 0
  1642  0000FB                     	ds	2
  1643  0000FD                     _gForecolour:
  1644                           	opt stack 0
  1645  0000FD                     	ds	2
  1646  0000FF                     _change:
  1647                           	opt stack 0
  1648  0000FF                     	ds	1
  1649                           tblptru	equ	0xFF8
  1650                           tblptrh	equ	0xFF7
  1651                           tblptrl	equ	0xFF6
  1652                           tablat	equ	0xFF5
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           postdec1	equ	0xFE5
  1656                           fsr1h	equ	0xFE2
  1657                           fsr1l	equ	0xFE1
  1658                           
  1659                           	psect	bssBANK3
  1660  000300                     __pbssBANK3:
  1661                           	opt stack 0
  1662  000300                     _lCBuffer:
  1663                           	opt stack 0
  1664  000300                     	ds	30
  1665  00031E                     _iRAngleSS:
  1666                           	opt stack 0
  1667  00031E                     	ds	4
  1668  000322                     _iRDistanceSS:
  1669                           	opt stack 0
  1670  000322                     	ds	4
  1671  000326                     Timer2_Init@DIV:
  1672                           	opt stack 0
  1673  000326                     	ds	4
  1674  00032A                     Timer0_Init@DIV:
  1675                           	opt stack 0
  1676  00032A                     	ds	4
  1677  00032E                     _I2C2_More:
  1678                           	opt stack 0
  1679  00032E                     	ds	3
  1680  000331                     _I2C1_More:
  1681                           	opt stack 0
  1682  000331                     	ds	3
  1683  000334                     _I2C2_Done:
  1684                           	opt stack 0
  1685  000334                     	ds	3
  1686  000337                     _I2C1_Done:
  1687                           	opt stack 0
  1688  000337                     	ds	3
  1689  00033A                     _dip:
  1690                           	opt stack 0
  1691  00033A                     	ds	2
  1692  00033C                     _iRAngle:
  1693                           	opt stack 0
  1694  00033C                     	ds	2
  1695  00033E                     _HMIBoard:
  1696                           	opt stack 0
  1697  00033E                     	ds	58
  1698  000378                     _SPI1:
  1699                           	opt stack 0
  1700  000378                     	ds	11
  1701  000383                     _SPI2:
  1702                           	opt stack 0
  1703  000383                     	ds	11
  1704  00038E                     _DIPSwitch:
  1705                           	opt stack 0
  1706  00038E                     	ds	10
  1707  000398                     _TestButton:
  1708                           	opt stack 0
  1709  000398                     	ds	10
  1710  0003A2                     _PortG:
  1711                           	opt stack 0
  1712  0003A2                     	ds	10
  1713  0003AC                     _PortB:
  1714                           	opt stack 0
  1715  0003AC                     	ds	10
  1716  0003B6                     _PortA:
  1717                           	opt stack 0
  1718  0003B6                     	ds	10
  1719  0003C0                     _PortF:
  1720                           	opt stack 0
  1721  0003C0                     	ds	10
  1722  0003CA                     _I2C2T:
  1723                           	opt stack 0
  1724  0003CA                     	ds	7
  1725  0003D1                     _ADC_AN3:
  1726                           	opt stack 0
  1727  0003D1                     	ds	5
  1728  0003D6                     _ADC_AN2:
  1729                           	opt stack 0
  1730  0003D6                     	ds	5
  1731  0003DB                     _ADC_AN1:
  1732                           	opt stack 0
  1733  0003DB                     	ds	5
  1734  0003E0                     LCD_DrawRectangle@p4:
  1735                           	opt stack 0
  1736  0003E0                     	ds	4
  1737  0003E4                     LCD_DrawRectangle@p2:
  1738                           	opt stack 0
  1739  0003E4                     	ds	4
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           postdec1	equ	0xFE5
  1747                           fsr1h	equ	0xFE2
  1748                           fsr1l	equ	0xFE1
  1749                           
  1750                           	psect	dataBANK3
  1751  0003E8                     __pdataBANK3:
  1752                           	opt stack 0
  1753  0003E8                     Console_Render@F6956:
  1754                           	opt stack 0
  1755  0003E8                     	ds	4
  1756  0003EC                     _gLineSize:
  1757                           	opt stack 0
  1758  0003EC                     	ds	4
  1759  0003F0                     _gCharSize:
  1760                           	opt stack 0
  1761  0003F0                     	ds	4
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1h	equ	0xFE2
  1770                           fsr1l	equ	0xFE1
  1771                           
  1772                           	psect	bssBANK4
  1773  000400                     __pbssBANK4:
  1774                           	opt stack 0
  1775  000400                     _iRScriptStack:
  1776                           	opt stack 0
  1777  000400                     	ds	100
  1778  000464                     Console_MakeField@Fill:
  1779                           	opt stack 0
  1780  000464                     	ds	70
  1781                           tblptru	equ	0xFF8
  1782                           tblptrh	equ	0xFF7
  1783                           tblptrl	equ	0xFF6
  1784                           tablat	equ	0xFF5
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1h	equ	0xFE2
  1789                           fsr1l	equ	0xFE1
  1790                           
  1791                           	psect	bssBIGRAM
  1792  0004AA                     __pbssBIGRAM:
  1793                           	opt stack 0
  1794  0004AA                     _lBuffer:
  1795                           	opt stack 0
  1796  0004AA                     	ds	300
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1h	equ	0xFE2
  1805                           fsr1l	equ	0xFE1
  1806                           
  1807                           	psect	cstackBANK3
  1808  0003F4                     __pcstackBANK3:
  1809                           	opt stack 0
  1810  0003F4                     ??_mode1:
  1811                           
  1812                           ; 1 bytes @ 0x0
  1813  0003F4                     	ds	2
  1814  0003F6                     mode1@moveto:
  1815                           	opt stack 0
  1816                           
  1817                           ; 2 bytes @ 0x2
  1818  0003F6                     	ds	2
  1819  0003F8                     _mode1$15594:
  1820                           	opt stack 0
  1821                           
  1822                           ; 4 bytes @ 0x4
  1823  0003F8                     	ds	4
  1824  0003FC                     ??_main:
  1825                           
  1826                           ; 1 bytes @ 0x8
  1827  0003FC                     	ds	2
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           postinc0	equ	0xFEE
  1833                           wreg	equ	0xFE8
  1834                           postdec1	equ	0xFE5
  1835                           fsr1h	equ	0xFE2
  1836                           fsr1l	equ	0xFE1
  1837                           
  1838                           	psect	cstackBANK2
  1839  000200                     __pcstackBANK2:
  1840                           	opt stack 0
  1841  000200                     irobot_query_and_update@TXArray:
  1842                           	opt stack 0
  1843                           
  1844                           ; 256 bytes @ 0x0
  1845  000200                     	ds	256
  1846                           tblptru	equ	0xFF8
  1847                           tblptrh	equ	0xFF7
  1848                           tblptrl	equ	0xFF6
  1849                           tablat	equ	0xFF5
  1850                           postinc0	equ	0xFEE
  1851                           wreg	equ	0xFE8
  1852                           postdec1	equ	0xFE5
  1853                           fsr1h	equ	0xFE2
  1854                           fsr1l	equ	0xFE1
  1855                           
  1856                           	psect	cstackBANK1
  1857  000100                     __pcstackBANK1:
  1858                           	opt stack 0
  1859  000100                     ??___fltol:
  1860  000100                     Port_SetType@Output:
  1861                           	opt stack 0
  1862  000100                     Button_Init@pInput:
  1863                           	opt stack 0
  1864  000100                     irobot_query_and_update@RXArray:
  1865                           	opt stack 0
  1866                           
  1867                           ; 256 bytes @ 0x0
  1868  000100                     	ds	1
  1869  000101                     Port_Init@pInput:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x1
  1873  000101                     	ds	1
  1874  000102                     Button_Init@pThreshold:
  1875                           	opt stack 0
  1876                           
  1877                           ; 2 bytes @ 0x2
  1878  000102                     	ds	1
  1879  000103                     Port_Init@pPort:
  1880                           	opt stack 0
  1881                           
  1882                           ; 1 bytes @ 0x3
  1883  000103                     	ds	1
  1884  000104                     ??_Port_Init:
  1885  000104                     ??_findClosestWall:
  1886  000104                     Button_Init@pInitIO:
  1887                           	opt stack 0
  1888                           
  1889                           ; 3 bytes @ 0x4
  1890  000104                     	ds	2
  1891  000106                     Port_Init@i:
  1892                           	opt stack 0
  1893  000106                     _findClosestWall$15593:
  1894                           	opt stack 0
  1895                           
  1896                           ; 4 bytes @ 0x6
  1897  000106                     	ds	1
  1898  000107                     Button_Init@pGetState:
  1899                           	opt stack 0
  1900                           
  1901                           ; 3 bytes @ 0x7
  1902  000107                     	ds	3
  1903  00010A                     Button_Init@pFunction:
  1904                           	opt stack 0
  1905                           
  1906                           ; 3 bytes @ 0xA
  1907  00010A                     	ds	246
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           postdec1	equ	0xFE5
  1915                           fsr1h	equ	0xFE2
  1916                           fsr1l	equ	0xFE1
  1917                           
  1918                           	psect	cstackBANK0
  1919  0000BA                     __pcstackBANK0:
  1920                           	opt stack 0
  1921  0000BA                     ??_Console_ClearCursor:
  1922  0000BA                     ??_ADC_SetChannel:
  1923  0000BA                     ??_ADC_ConversionTime:
  1924  0000BA                     ??_ADC_SetupIO:
  1925  0000BA                     ??_sort_iRBumpDrop:
  1926  0000BA                     ?_load_iRScriptStack:
  1927                           	opt stack 0
  1928  0000BA                     ??_Console_Init:
  1929  0000BA                     ??_Console_NewLine:
  1930  0000BA                     ??_Console_FormFeed:
  1931  0000BA                     ??_HMI_SetButton:
  1932  0000BA                     ?_GetPortProperties:
  1933                           	opt stack 0
  1934  0000BA                     ?_GetPortPORT:
  1935                           	opt stack 0
  1936  0000BA                     ?_GetPortTRIS:
  1937                           	opt stack 0
  1938  0000BA                     ?_twos_complement_of:
  1939                           	opt stack 0
  1940  0000BA                     ?___wmul:
  1941                           	opt stack 0
  1942  0000BA                     ?___awdiv:
  1943                           	opt stack 0
  1944  0000BA                     ?___lwdiv:
  1945                           	opt stack 0
  1946  0000BA                     ?___fldiv:
  1947                           	opt stack 0
  1948  0000BA                     ?___lldiv:
  1949                           	opt stack 0
  1950  0000BA                     ?___xxtofl:
  1951                           	opt stack 0
  1952  0000BA                     Mode_Set@pMode:
  1953                           	opt stack 0
  1954  0000BA                     ToSegment@pCHR:
  1955                           	opt stack 0
  1956  0000BA                     HMI_SetBar@pValue:
  1957                           	opt stack 0
  1958  0000BA                     ADC_ClockDivision@pDivide:
  1959                           	opt stack 0
  1960  0000BA                     get_packet_size@packetID:
  1961                           	opt stack 0
  1962  0000BA                     eusart_putch@eusartSendChar:
  1963                           	opt stack 0
  1964  0000BA                     Port_GetPin@pInput:
  1965                           	opt stack 0
  1966  0000BA                     Port_GetQuad@pInput:
  1967                           	opt stack 0
  1968  0000BA                     SPI_DisableISR@pInput:
  1969                           	opt stack 0
  1970  0000BA                     SPI_DCS@pInput:
  1971                           	opt stack 0
  1972  0000BA                     SPI_Send@pInput:
  1973                           	opt stack 0
  1974  0000BA                     Byte_SetBit@pInput:
  1975                           	opt stack 0
  1976  0000BA                     Byte_GetBit@pInput:
  1977                           	opt stack 0
  1978  0000BA                     Byte_SetZone@pInput:
  1979                           	opt stack 0
  1980  0000BA                     Byte_GetZone@pInput:
  1981                           	opt stack 0
  1982  0000BA                     Byte_SetByte@pInput:
  1983                           	opt stack 0
  1984  0000BA                     delay_ms@ms:
  1985                           	opt stack 0
  1986  0000BA                     delay_us@us:
  1987                           	opt stack 0
  1988  0000BA                     reverse@input:
  1989                           	opt stack 0
  1990  0000BA                     twos_complement_of@complementValue:
  1991                           	opt stack 0
  1992  0000BA                     ___wmul@multiplier:
  1993                           	opt stack 0
  1994  0000BA                     ___awdiv@dividend:
  1995                           	opt stack 0
  1996  0000BA                     ___lwdiv@dividend:
  1997                           	opt stack 0
  1998  0000BA                     MXK_Queue@pCallback:
  1999                           	opt stack 0
  2000  0000BA                     Timer0_Start@pFunction:
  2001                           	opt stack 0
  2002  0000BA                     ___lldiv@dividend:
  2003                           	opt stack 0
  2004  0000BA                     ___fldiv@b:
  2005                           	opt stack 0
  2006  0000BA                     ___xxtofl@val:
  2007                           	opt stack 0
  2008                           
  2009                           ; 4 bytes @ 0x0
  2010  0000BA                     	ds	1
  2011  0000BB                     ADC_SetChannel@pChannel:
  2012                           	opt stack 0
  2013  0000BB                     ADC_ClockDivision@reg:
  2014                           	opt stack 0
  2015  0000BB                     ADC_ConversionTime@pCount:
  2016                           	opt stack 0
  2017  0000BB                     rx_assign@packetIDValue:
  2018                           	opt stack 0
  2019  0000BB                     irobot_song_play@songNumber:
  2020                           	opt stack 0
  2021  0000BB                     HMI_SetSegments@pString:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x1
  2025  0000BB                     	ds	1
  2026  0000BC                     GetPortProperties@pInput:
  2027                           	opt stack 0
  2028  0000BC                     GetPortPORT@pInput:
  2029                           	opt stack 0
  2030  0000BC                     GetPortTRIS@pInput:
  2031                           	opt stack 0
  2032  0000BC                     Port_GetPin@pPin:
  2033                           	opt stack 0
  2034  0000BC                     Port_GetQuad@pQuad:
  2035                           	opt stack 0
  2036  0000BC                     SPI_Send@pData:
  2037                           	opt stack 0
  2038  0000BC                     Byte_SetBit@pBit:
  2039                           	opt stack 0
  2040  0000BC                     Byte_GetBit@pBit:
  2041                           	opt stack 0
  2042  0000BC                     Byte_SetZone@pMax:
  2043                           	opt stack 0
  2044  0000BC                     Byte_GetZone@pMax:
  2045                           	opt stack 0
  2046  0000BC                     Byte_SetByte@pValue:
  2047                           	opt stack 0
  2048  0000BC                     Console_Init@x:
  2049                           	opt stack 0
  2050  0000BC                     Console_FormFeed@x:
  2051                           	opt stack 0
  2052  0000BC                     ADC_SetupIO@pChannel:
  2053                           	opt stack 0
  2054  0000BC                     ADC_ClockDivision@unfound:
  2055                           	opt stack 0
  2056  0000BC                     rx_assign@byteNumber:
  2057                           	opt stack 0
  2058  0000BC                     reverse@length:
  2059                           	opt stack 0
  2060  0000BC                     ADC_Start@pInput:
  2061                           	opt stack 0
  2062  0000BC                     ___wmul@multiplicand:
  2063                           	opt stack 0
  2064  0000BC                     ___awdiv@divisor:
  2065                           	opt stack 0
  2066  0000BC                     ___lwdiv@divisor:
  2067                           	opt stack 0
  2068  0000BC                     delay_ms@u:
  2069                           	opt stack 0
  2070  0000BC                     delay_us@u:
  2071                           	opt stack 0
  2072  0000BC                     HMI_SetButton@reindex:
  2073                           	opt stack 0
  2074                           
  2075                           ; 4 bytes @ 0x2
  2076  0000BC                     	ds	1
  2077  0000BD                     ??_Port_GetPin:
  2078  0000BD                     ??_Port_GetQuad:
  2079  0000BD                     ??_Byte_GetBit:
  2080  0000BD                     ??_rx_assign:
  2081  0000BD                     LCD_Write@mode:
  2082                           	opt stack 0
  2083  0000BD                     Byte_SetBit@pValue:
  2084                           	opt stack 0
  2085  0000BD                     Byte_SetZone@pChunk:
  2086                           	opt stack 0
  2087  0000BD                     Byte_GetZone@pChunk:
  2088                           	opt stack 0
  2089  0000BD                     Console_Init@y:
  2090                           	opt stack 0
  2091  0000BD                     Console_FormFeed@y:
  2092                           	opt stack 0
  2093  0000BD                     OutSeg@pSegment:
  2094                           	opt stack 0
  2095  0000BD                     ADC_SetupIO@MASK:
  2096                           	opt stack 0
  2097  0000BD                     Motor_Move@pMotor:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x3
  2101  0000BD                     	ds	1
  2102  0000BE                     ??_Byte_SetBit:
  2103  0000BE                     ??_Console_IncrementCursor:
  2104  0000BE                     ??_OutSeg:
  2105  0000BE                     ??_ADC_Start:
  2106  0000BE                     ??___xxtofl:
  2107  0000BE                     LCD_Write@value:
  2108                           	opt stack 0
  2109  0000BE                     Byte_GetBit@Output:
  2110                           	opt stack 0
  2111  0000BE                     Byte_SetZone@pChunkSize:
  2112                           	opt stack 0
  2113  0000BE                     Byte_GetZone@pChunkSize:
  2114                           	opt stack 0
  2115  0000BE                     reverse@tempVar:
  2116                           	opt stack 0
  2117  0000BE                     ___awdiv@counter:
  2118                           	opt stack 0
  2119  0000BE                     ___lwdiv@counter:
  2120                           	opt stack 0
  2121  0000BE                     HMI_SetSegments@in:
  2122                           	opt stack 0
  2123  0000BE                     ADC_Init@pInput:
  2124                           	opt stack 0
  2125  0000BE                     ___wmul@product:
  2126                           	opt stack 0
  2127  0000BE                     ___lldiv@divisor:
  2128                           	opt stack 0
  2129  0000BE                     ___fldiv@a:
  2130                           	opt stack 0
  2131                           
  2132                           ; 4 bytes @ 0x4
  2133  0000BE                     	ds	1
  2134  0000BF                     ??_Byte_GetZone:
  2135  0000BF                     ?_Console_MakeField:
  2136                           	opt stack 0
  2137  0000BF                     Set_Addr_Window@ys:
  2138                           	opt stack 0
  2139  0000BF                     Set_Rotation@m:
  2140                           	opt stack 0
  2141  0000BF                     Port_GetPin@Output:
  2142                           	opt stack 0
  2143  0000BF                     Port_GetQuad@Output:
  2144                           	opt stack 0
  2145  0000BF                     Byte_SetZone@pValue:
  2146                           	opt stack 0
  2147  0000BF                     rx_assign@packetID:
  2148                           	opt stack 0
  2149  0000BF                     ___awdiv@sign:
  2150                           	opt stack 0
  2151  0000BF                     LCD_Word_Write@value:
  2152                           	opt stack 0
  2153  0000BF                     reverse@iterator:
  2154                           	opt stack 0
  2155  0000BF                     Motor_Move@pDelta:
  2156                           	opt stack 0
  2157  0000BF                     ___lwdiv@quotient:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x5
  2161  0000BF                     	ds	1
  2162  0000C0                     ?_irobot_query_and_update:
  2163                           	opt stack 0
  2164  0000C0                     ??_Byte_SetZone:
  2165  0000C0                     Set_Addr_Window@xe:
  2166                           	opt stack 0
  2167  0000C0                     Set_Rotation@rotation:
  2168                           	opt stack 0
  2169  0000C0                     Byte_GetZone@MASK:
  2170                           	opt stack 0
  2171  0000C0                     OutSeg@pInput:
  2172                           	opt stack 0
  2173  0000C0                     HMI_SetButton@pValue:
  2174                           	opt stack 0
  2175  0000C0                     ADC_Init@pChannel:
  2176                           	opt stack 0
  2177  0000C0                     MXK_BlockSwitchTo@CUR:
  2178                           	opt stack 0
  2179  0000C0                     MXK_SwitchTo@CUR:
  2180                           	opt stack 0
  2181  0000C0                     ___awdiv@quotient:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x6
  2185  0000C0                     	ds	1
  2186  0000C1                     ??_Console_MakeField:
  2187  0000C1                     ?___lwmod:
  2188                           	opt stack 0
  2189  0000C1                     Set_Addr_Window@ye:
  2190                           	opt stack 0
  2191  0000C1                     Byte_GetZone@Offset:
  2192                           	opt stack 0
  2193  0000C1                     OutSeg@out:
  2194                           	opt stack 0
  2195  0000C1                     HMI_SetButton@v:
  2196                           	opt stack 0
  2197  0000C1                     MXK_BlockSwitchTo@pModule:
  2198                           	opt stack 0
  2199  0000C1                     MXK_SwitchTo@pModule:
  2200                           	opt stack 0
  2201  0000C1                     ___lwmod@dividend:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x7
  2205  0000C1                     	ds	1
  2206  0000C2                     ??___fldiv:
  2207  0000C2                     ??_Console_Tab:
  2208  0000C2                     Set_Addr_Window@xs:
  2209                           	opt stack 0
  2210  0000C2                     Byte_GetZone@Output:
  2211                           	opt stack 0
  2212  0000C2                     ___xxtofl@sign:
  2213                           	opt stack 0
  2214  0000C2                     HMI_Render@a:
  2215                           	opt stack 0
  2216  0000C2                     ___lldiv@quotient:
  2217                           	opt stack 0
  2218                           
  2219                           ; 4 bytes @ 0x8
  2220  0000C2                     	ds	1
  2221  0000C3                     Byte_SetZone@Offset:
  2222                           	opt stack 0
  2223  0000C3                     ___xxtofl@exp:
  2224                           	opt stack 0
  2225  0000C3                     LCD_Fill@pColour:
  2226                           	opt stack 0
  2227  0000C3                     LCD_FillRectangle@pColour:
  2228                           	opt stack 0
  2229  0000C3                     Byte_GetPair@pInput:
  2230                           	opt stack 0
  2231  0000C3                     Console_MakeField@Index:
  2232                           	opt stack 0
  2233  0000C3                     ___lwmod@divisor:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x9
  2237  0000C3                     	ds	1
  2238  0000C4                     ??_load_iRScriptStack:
  2239  0000C4                     Byte_SetZone@MASK:
  2240                           	opt stack 0
  2241  0000C4                     ___xxtofl@arg:
  2242                           	opt stack 0
  2243                           
  2244                           ; 4 bytes @ 0xA
  2245  0000C4                     	ds	1
  2246  0000C5                     LCD_Fill@i:
  2247                           	opt stack 0
  2248  0000C5                     Byte_GetPair@pPair:
  2249                           	opt stack 0
  2250  0000C5                     Console_MakeField@pInput:
  2251                           	opt stack 0
  2252  0000C5                     ___lwmod@counter:
  2253                           	opt stack 0
  2254  0000C5                     Byte_SetPair@pInput:
  2255                           	opt stack 0
  2256  0000C5                     Byte_SetQuad@pInput:
  2257                           	opt stack 0
  2258  0000C5                     LCD_FillRectangle@pPoint:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0xB
  2262  0000C5                     	ds	1
  2263  0000C6                     LCD_Fill@j:
  2264                           	opt stack 0
  2265  0000C6                     ___lldiv@counter:
  2266                           	opt stack 0
  2267  0000C6                     ___fldiv@sign:
  2268                           	opt stack 0
  2269  0000C6                     Word_GetPair@pInput:
  2270                           	opt stack 0
  2271  0000C6                     itos@input:
  2272                           	opt stack 0
  2273  0000C6                     Console_MakeField@Column:
  2274                           	opt stack 0
  2275  0000C6                     load_iRScriptStack@loadByte:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0xC
  2279  0000C6                     	ds	1
  2280  0000C7                     Byte_SetPair@pPair:
  2281                           	opt stack 0
  2282  0000C7                     Byte_SetQuad@pQuad:
  2283                           	opt stack 0
  2284  0000C7                     Console_Tab@t:
  2285                           	opt stack 0
  2286  0000C7                     Timer0_Init@pFrequency:
  2287                           	opt stack 0
  2288  0000C7                     Timer2_Init@pFrequency:
  2289                           	opt stack 0
  2290  0000C7                     ___fldiv@rem:
  2291                           	opt stack 0
  2292                           
  2293                           ; 4 bytes @ 0xD
  2294  0000C7                     	ds	1
  2295  0000C8                     ?___flmul:
  2296                           	opt stack 0
  2297  0000C8                     Byte_SetPair@pValue:
  2298                           	opt stack 0
  2299  0000C8                     Byte_SetQuad@pValue:
  2300                           	opt stack 0
  2301  0000C8                     Word_GetPair@pPair:
  2302                           	opt stack 0
  2303  0000C8                     Console_Tab@i:
  2304                           	opt stack 0
  2305  0000C8                     load_iRScriptStack@bytesToLoad:
  2306                           	opt stack 0
  2307  0000C8                     itos@destination:
  2308                           	opt stack 0
  2309  0000C8                     _Console_MakeField$10974:
  2310                           	opt stack 0
  2311  0000C8                     ___flmul@b:
  2312                           	opt stack 0
  2313                           
  2314                           ; 4 bytes @ 0xE
  2315  0000C8                     	ds	1
  2316  0000C9                     Console_Tab@c:
  2317                           	opt stack 0
  2318  0000C9                     load_iRScriptStack@i:
  2319                           	opt stack 0
  2320  0000C9                     Port_SetPin@pInput:
  2321                           	opt stack 0
  2322  0000C9                     Port_Set@pInput:
  2323                           	opt stack 0
  2324  0000C9                     SPI_MinSpeed@pInput:
  2325                           	opt stack 0
  2326  0000C9                     SPI_MaxSpeed@pInput:
  2327                           	opt stack 0
  2328  0000C9                     Word_SetPair@pInput:
  2329                           	opt stack 0
  2330  0000C9                     PortProperty_Valid@pInput:
  2331                           	opt stack 0
  2332  0000C9                     LCD_FillRectangle@pSize:
  2333                           	opt stack 0
  2334                           
  2335                           ; 4 bytes @ 0xF
  2336  0000C9                     	ds	1
  2337  0000CA                     ??_irobot_query_and_update:
  2338  0000CA                     ??_Console_PrintChar:
  2339  0000CA                     Console_MakeField@x:
  2340                           	opt stack 0
  2341  0000CA                     irobot_leds@LEDBit:
  2342                           	opt stack 0
  2343  0000CA                     itos@Data:
  2344                           	opt stack 0
  2345  0000CA                     irobot_move@moveSpeed:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x10
  2349  0000CA                     	ds	1
  2350  0000CB                     ??_Timer2_Init:
  2351  0000CB                     ??_Timer0_Init:
  2352  0000CB                     Port_SetPin@pPin:
  2353                           	opt stack 0
  2354  0000CB                     Port_Set@pValue:
  2355                           	opt stack 0
  2356  0000CB                     Word_SetPair@pPair:
  2357                           	opt stack 0
  2358  0000CB                     PortProperty_Valid@pPinDrive:
  2359                           	opt stack 0
  2360  0000CB                     Console_MakeField@y:
  2361                           	opt stack 0
  2362  0000CB                     irobot_leds@powerColour:
  2363                           	opt stack 0
  2364  0000CB                     ___fldiv@new_exp:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x11
  2368  0000CB                     	ds	1
  2369  0000CC                     ??_Port_Set:
  2370  0000CC                     Port_SetPin@pValue:
  2371                           	opt stack 0
  2372  0000CC                     Word_SetPair@pValue:
  2373                           	opt stack 0
  2374  0000CC                     PortProperty_Valid@pPin:
  2375                           	opt stack 0
  2376  0000CC                     irobot_leds@powerLuminosity:
  2377                           	opt stack 0
  2378  0000CC                     LCD_DrawField@pField:
  2379                           	opt stack 0
  2380  0000CC                     itos@Length:
  2381                           	opt stack 0
  2382  0000CC                     irobot_move@moveTurnRadius:
  2383                           	opt stack 0
  2384  0000CC                     Timer2_Init@RDIV:
  2385                           	opt stack 0
  2386  0000CC                     ___flmul@a:
  2387                           	opt stack 0
  2388                           
  2389                           ; 4 bytes @ 0x12
  2390  0000CC                     	ds	1
  2391  0000CD                     ??_PortProperty_Valid:
  2392  0000CD                     ??_LCD_FillRectangle:
  2393  0000CD                     Port_SetPin@Type:
  2394                           	opt stack 0
  2395  0000CD                     Console_PrintChar@pInput:
  2396                           	opt stack 0
  2397  0000CD                     irobot_leds@isScript:
  2398                           	opt stack 0
  2399  0000CD                     Timer0_Init@pCPUClock:
  2400                           	opt stack 0
  2401  0000CD                     ___fldiv@grs:
  2402                           	opt stack 0
  2403                           
  2404                           ; 4 bytes @ 0x13
  2405  0000CD                     	ds	1
  2406  0000CE                     ??_irobot_move:
  2407  0000CE                     LED_Set@pValue:
  2408                           	opt stack 0
  2409  0000CE                     putch@c:
  2410                           	opt stack 0
  2411  0000CE                     irobot_led_power_on@powerOnColour:
  2412                           	opt stack 0
  2413  0000CE                     Port_TogglePin@pInput:
  2414                           	opt stack 0
  2415  0000CE                     itos@Out:
  2416                           	opt stack 0
  2417  0000CE                     LCD_DrawField@pPoint:
  2418                           	opt stack 0
  2419                           
  2420                           ; 4 bytes @ 0x14
  2421  0000CE                     	ds	1
  2422  0000CF                     ?_printf:
  2423                           	opt stack 0
  2424  0000CF                     LCD_FillRectangle@i:
  2425                           	opt stack 0
  2426  0000CF                     LED_Set@pLED:
  2427                           	opt stack 0
  2428  0000CF                     irobot_query_and_update@packetIDs:
  2429                           	opt stack 0
  2430  0000CF                     printf@f:
  2431                           	opt stack 0
  2432  0000CF                     PortProperty_Valid@Errors:
  2433                           	opt stack 0
  2434                           
  2435                           ; 16 bytes @ 0x15
  2436  0000CF                     	ds	1
  2437  0000D0                     ??___flmul:
  2438  0000D0                     LCD_FillRectangle@j:
  2439                           	opt stack 0
  2440  0000D0                     Port_TogglePin@pPin:
  2441                           	opt stack 0
  2442  0000D0                     HMI_SetNumber@pInput:
  2443                           	opt stack 0
  2444  0000D0                     Timer2_Init@pCPUClock:
  2445                           	opt stack 0
  2446                           
  2447                           ; 4 bytes @ 0x16
  2448  0000D0                     	ds	1
  2449  0000D1                     Port_TogglePin@Value:
  2450                           	opt stack 0
  2451  0000D1                     irobot_query_and_update@streamSize:
  2452                           	opt stack 0
  2453  0000D1                     ___fldiv@bexp:
  2454                           	opt stack 0
  2455  0000D1                     Timer0_Init@DIVIDE:
  2456                           	opt stack 0
  2457                           
  2458                           ; 4 bytes @ 0x17
  2459  0000D1                     	ds	1
  2460  0000D2                     LED_Toggle@pLED:
  2461                           	opt stack 0
  2462  0000D2                     irobot_query_and_update@numberOfPacketRequests:
  2463                           	opt stack 0
  2464  0000D2                     irobot_move@isScript:
  2465                           	opt stack 0
  2466  0000D2                     ___fldiv@aexp:
  2467                           	opt stack 0
  2468  0000D2                     LCD_DrawField@pSize:
  2469                           	opt stack 0
  2470                           
  2471                           ; 4 bytes @ 0x18
  2472  0000D2                     	ds	1
  2473  0000D3                     Event_DIPSwitch@pState:
  2474                           	opt stack 0
  2475  0000D3                     Event_TestButton@pState:
  2476                           	opt stack 0
  2477  0000D3                     irobot_query_and_update@packetVariable:
  2478                           	opt stack 0
  2479  0000D3                     irobot_stop_motion@isScript:
  2480                           	opt stack 0
  2481  0000D3                     irobot_rotate@rotateAngle:
  2482                           	opt stack 0
  2483  0000D3                     irobot_move_straight@straightSpeed:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x19
  2487  0000D3                     	ds	1
  2488  0000D4                     Event_DIPSwitch@Bar:
  2489                           	opt stack 0
  2490  0000D4                     irobot_query_and_update@j:
  2491                           	opt stack 0
  2492  0000D4                     ___flmul@sign:
  2493                           	opt stack 0
  2494  0000D4                     Timer2_Init@DIVIDE:
  2495                           	opt stack 0
  2496                           
  2497                           ; 4 bytes @ 0x1A
  2498  0000D4                     	ds	1
  2499  0000D5                     irobot_query_and_update@startIndex:
  2500                           	opt stack 0
  2501  0000D5                     ___flmul@aexp:
  2502                           	opt stack 0
  2503  0000D5                     Button_Poll@pButton:
  2504                           	opt stack 0
  2505  0000D5                     Motor_Speed@pMotor:
  2506                           	opt stack 0
  2507  0000D5                     irobot_rotate@rotateSpeed:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x1B
  2511  0000D5                     	ds	1
  2512  0000D6                     ??_LCD_DrawField:
  2513  0000D6                     irobot_query_and_update@i:
  2514                           	opt stack 0
  2515  0000D6                     ___flmul@grs:
  2516                           	opt stack 0
  2517                           
  2518                           ; 4 bytes @ 0x1C
  2519  0000D6                     	ds	1
  2520  0000D7                     Button_Poll@pIncrement:
  2521                           	opt stack 0
  2522  0000D7                     irobot_rotate@isScript:
  2523                           	opt stack 0
  2524  0000D7                     Motor_Speed@pFrequency:
  2525                           	opt stack 0
  2526                           
  2527                           ; 2 bytes @ 0x1D
  2528  0000D7                     	ds	1
  2529  0000D8                     ??_Button_Poll:
  2530  0000D8                     LCD_DrawField@count:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x1E
  2534  0000D8                     	ds	1
  2535  0000D9                     
  2536                           ; 1 bytes @ 0x1F
  2537  0000D9                     	ds	1
  2538  0000DA                     LCD_DrawField@xmax:
  2539                           	opt stack 0
  2540  0000DA                     ___flmul@bexp:
  2541                           	opt stack 0
  2542                           
  2543                           ; 1 bytes @ 0x20
  2544  0000DA                     	ds	1
  2545  0000DB                     ??_printf:
  2546  0000DB                     LCD_DrawField@ymax:
  2547                           	opt stack 0
  2548  0000DB                     ___flmul@prod:
  2549                           	opt stack 0
  2550                           
  2551                           ; 4 bytes @ 0x21
  2552  0000DB                     	ds	1
  2553  0000DC                     LCD_DrawField@i:
  2554                           	opt stack 0
  2555  0000DC                     printf@prec:
  2556                           	opt stack 0
  2557  0000DC                     Port_Set@TypeRequired:
  2558                           	opt stack 0
  2559                           
  2560                           ; 2 bytes @ 0x22
  2561  0000DC                     	ds	1
  2562  0000DD                     ??_Console_Render:
  2563  0000DD                     Button_Poll@Pin:
  2564                           	opt stack 0
  2565  0000DD                     printf@flag:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x23
  2569  0000DD                     	ds	1
  2570  0000DE                     Port_Set@TypeActual:
  2571                           	opt stack 0
  2572  0000DE                     printf@ap:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x24
  2576  0000DE                     	ds	1
  2577  0000DF                     PortProperty_Valid@Pair:
  2578                           	opt stack 0
  2579  0000DF                     Console_Render@temp:
  2580                           	opt stack 0
  2581  0000DF                     ___flmul@temp:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x25
  2585  0000DF                     	ds	1
  2586  0000E0                     Port_Set@Type:
  2587                           	opt stack 0
  2588  0000E0                     Port_CheckPairType@pInput:
  2589                           	opt stack 0
  2590  0000E0                     Port_SetPinType@pInput:
  2591                           	opt stack 0
  2592  0000E0                     printf@val:
  2593                           	opt stack 0
  2594  0000E0                     Console_Render@lCursor:
  2595                           	opt stack 0
  2596                           
  2597                           ; 4 bytes @ 0x26
  2598  0000E0                     	ds	1
  2599  0000E1                     ?_ADC_Voltage:
  2600                           	opt stack 0
  2601  0000E1                     ADC_Voltage@pInput:
  2602                           	opt stack 0
  2603                           
  2604                           ; 2 bytes @ 0x27
  2605  0000E1                     	ds	1
  2606  0000E2                     Port_CheckPairType@pPair:
  2607                           	opt stack 0
  2608  0000E2                     Port_SetPinType@pPin:
  2609                           	opt stack 0
  2610  0000E2                     printf@c:
  2611                           	opt stack 0
  2612                           
  2613                           ; 1 bytes @ 0x28
  2614  0000E2                     	ds	1
  2615  0000E3                     Port_CheckPairType@pDrive:
  2616                           	opt stack 0
  2617  0000E3                     Port_SetPinType@pType:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x29
  2621  0000E3                     	ds	1
  2622  0000E4                     Port_CheckPairType@Pin1:
  2623                           	opt stack 0
  2624  0000E4                     Port_SetPinType@Output:
  2625                           	opt stack 0
  2626  0000E4                     Console_Render@x:
  2627                           	opt stack 0
  2628                           
  2629                           ; 1 bytes @ 0x2A
  2630  0000E4                     	ds	1
  2631  0000E5                     ??_ADC_Voltage:
  2632  0000E5                     Port_CheckPairType@Pin2:
  2633                           	opt stack 0
  2634  0000E5                     Console_Render@y:
  2635                           	opt stack 0
  2636  0000E5                     Port_SetPinType@Props:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x2B
  2640  0000E5                     	ds	1
  2641  0000E6                     Port_CheckPairType@Output:
  2642                           	opt stack 0
  2643  0000E6                     mode2@dist:
  2644                           	opt stack 0
  2645                           
  2646                           ; 2 bytes @ 0x2C
  2647  0000E6                     	ds	1
  2648  0000E7                     LED_Init@pLED:
  2649                           	opt stack 0
  2650  0000E7                     Port_CheckPairType@Props:
  2651                           	opt stack 0
  2652  0000E7                     Motor_Init@pMotor:
  2653                           	opt stack 0
  2654  0000E7                     SPI_Init@pClock:
  2655                           	opt stack 0
  2656  0000E7                     ADC_Voltage@max:
  2657                           	opt stack 0
  2658                           
  2659                           ; 4 bytes @ 0x2D
  2660  0000E7                     	ds	2
  2661  0000E9                     Port_CheckQuadType@pInput:
  2662                           	opt stack 0
  2663  0000E9                     Motor_Init@pAddress:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x2F
  2667  0000E9                     	ds	2
  2668  0000EB                     Port_CheckQuadType@pQuad:
  2669                           	opt stack 0
  2670  0000EB                     SPI_Init@pChannel:
  2671                           	opt stack 0
  2672  0000EB                     ADC_Voltage@ref:
  2673                           	opt stack 0
  2674                           
  2675                           ; 4 bytes @ 0x31
  2676  0000EB                     	ds	1
  2677  0000EC                     Port_CheckQuadType@pDrive:
  2678                           	opt stack 0
  2679  0000EC                     SPI_Init@pMode:
  2680                           	opt stack 0
  2681                           
  2682                           ; 1 bytes @ 0x32
  2683  0000EC                     	ds	1
  2684  0000ED                     Port_CheckQuadType@Pair1:
  2685                           	opt stack 0
  2686  0000ED                     SPI_Init@pInput:
  2687                           	opt stack 0
  2688                           
  2689                           ; 2 bytes @ 0x33
  2690  0000ED                     	ds	1
  2691  0000EE                     Port_CheckQuadType@Pair2:
  2692                           	opt stack 0
  2693                           
  2694                           ; 1 bytes @ 0x34
  2695  0000EE                     	ds	1
  2696  0000EF                     ??_LCD_Init:
  2697  0000EF                     Port_CheckQuadType@Output:
  2698                           	opt stack 0
  2699  0000EF                     ADC_Voltage@output:
  2700                           	opt stack 0
  2701                           
  2702                           ; 4 bytes @ 0x35
  2703  0000EF                     	ds	1
  2704  0000F0                     Port_CheckPortType@pInput:
  2705                           	opt stack 0
  2706  0000F0                     Port_SetQuadType@pInput:
  2707                           	opt stack 0
  2708                           
  2709                           ; 2 bytes @ 0x36
  2710  0000F0                     	ds	1
  2711  0000F1                     LCD_Init@i:
  2712                           	opt stack 0
  2713                           
  2714                           ; 2 bytes @ 0x37
  2715  0000F1                     	ds	1
  2716  0000F2                     Port_CheckPortType@pDrive:
  2717                           	opt stack 0
  2718  0000F2                     Port_SetQuadType@pQuad:
  2719                           	opt stack 0
  2720                           
  2721                           ; 1 bytes @ 0x38
  2722  0000F2                     	ds	1
  2723  0000F3                     ?___fltol:
  2724                           	opt stack 0
  2725  0000F3                     Port_CheckPortType@Output:
  2726                           	opt stack 0
  2727  0000F3                     Port_SetQuadType@pType:
  2728                           	opt stack 0
  2729  0000F3                     ___fltol@f1:
  2730                           	opt stack 0
  2731                           
  2732                           ; 4 bytes @ 0x39
  2733  0000F3                     	ds	1
  2734  0000F4                     Port_SetQuadType@Output:
  2735                           	opt stack 0
  2736  0000F4                     Port_SetType@pInput:
  2737                           	opt stack 0
  2738                           
  2739                           ; 2 bytes @ 0x3A
  2740  0000F4                     	ds	1
  2741  0000F5                     HMI_Init@in:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x3B
  2745  0000F5                     	ds	1
  2746  0000F6                     Port_SetType@pType:
  2747                           	opt stack 0
  2748                           
  2749                           ; 1 bytes @ 0x3C
  2750  0000F6                     	ds	1
  2751  0000F7                     ??_Port_SetType:
  2752  0000F7                     ___fltol@sign1:
  2753                           	opt stack 0
  2754                           
  2755                           ; 1 bytes @ 0x3D
  2756  0000F7                     	ds	1
  2757  0000F8                     ___fltol@exp1:
  2758                           	opt stack 0
  2759                           
  2760                           ; 1 bytes @ 0x3E
  2761  0000F8                     	ds	1
  2762  0000F9                     tblptru	equ	0xFF8
  2763                           tblptrh	equ	0xFF7
  2764                           tblptrl	equ	0xFF6
  2765                           tablat	equ	0xFF5
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           fsr1h	equ	0xFE2
  2770                           fsr1l	equ	0xFE1
  2771                           
  2772                           ; 1 bytes @ 0x3F
  2773                           
  2774                           	psect	cstackCOMRAM
  2775  000001                     __pcstackCOMRAM:
  2776                           	opt stack 0
  2777  000001                     i2Byte_SetBit@pInput:
  2778                           	opt stack 0
  2779  000001                     i2Byte_GetZone@pInput:
  2780                           	opt stack 0
  2781  000001                     i2delay_us@us:
  2782                           	opt stack 0
  2783  000001                     i2MXK_Queue@pCallback:
  2784                           	opt stack 0
  2785                           
  2786                           ; 3 bytes @ 0x0
  2787  000001                     	ds	2
  2788  000003                     i2Byte_SetBit@pBit:
  2789                           	opt stack 0
  2790  000003                     i2Byte_GetZone@pMax:
  2791                           	opt stack 0
  2792  000003                     i2delay_us@u:
  2793                           	opt stack 0
  2794                           
  2795                           ; 4 bytes @ 0x2
  2796  000003                     	ds	1
  2797  000004                     i2Byte_SetBit@pValue:
  2798                           	opt stack 0
  2799  000004                     i2Byte_GetZone@pChunk:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0x3
  2803  000004                     	ds	1
  2804  000005                     ??i2_Byte_SetBit:
  2805  000005                     i2Byte_GetZone@pChunkSize:
  2806                           	opt stack 0
  2807                           
  2808                           ; 1 bytes @ 0x4
  2809  000005                     	ds	1
  2810  000006                     ??i2_Byte_GetZone:
  2811                           
  2812                           ; 1 bytes @ 0x5
  2813  000006                     	ds	1
  2814  000007                     i2Byte_GetZone@MASK:
  2815                           	opt stack 0
  2816  000007                     i2MXK_SwitchTo@CUR:
  2817                           	opt stack 0
  2818                           
  2819                           ; 1 bytes @ 0x6
  2820  000007                     	ds	1
  2821  000008                     i2Byte_GetZone@Offset:
  2822                           	opt stack 0
  2823  000008                     i2MXK_SwitchTo@pModule:
  2824                           	opt stack 0
  2825                           
  2826                           ; 1 bytes @ 0x7
  2827  000008                     	ds	1
  2828  000009                     i2Byte_GetZone@Output:
  2829                           	opt stack 0
  2830                           
  2831                           ; 1 bytes @ 0x8
  2832  000009                     	ds	1
  2833  00000A                     i2Byte_GetPair@pInput:
  2834                           	opt stack 0
  2835                           
  2836                           ; 2 bytes @ 0x9
  2837  00000A                     	ds	2
  2838  00000C                     i2Byte_GetPair@pPair:
  2839                           	opt stack 0
  2840                           
  2841                           ; 1 bytes @ 0xB
  2842  00000C                     	ds	1
  2843  00000D                     i2Word_GetPair@pInput:
  2844                           	opt stack 0
  2845                           
  2846                           ; 2 bytes @ 0xC
  2847  00000D                     	ds	2
  2848  00000F                     i2Word_GetPair@pPair:
  2849                           	opt stack 0
  2850                           
  2851                           ; 1 bytes @ 0xE
  2852  00000F                     	ds	1
  2853  000010                     i2Port_SetPin@pInput:
  2854                           	opt stack 0
  2855                           
  2856                           ; 2 bytes @ 0xF
  2857  000010                     	ds	2
  2858  000012                     i2Port_SetPin@pPin:
  2859                           	opt stack 0
  2860                           
  2861                           ; 1 bytes @ 0x11
  2862  000012                     	ds	1
  2863  000013                     i2Port_SetPin@pValue:
  2864                           	opt stack 0
  2865                           
  2866                           ; 1 bytes @ 0x12
  2867  000013                     	ds	1
  2868  000014                     i2Port_SetPin@Type:
  2869                           	opt stack 0
  2870                           
  2871                           ; 1 bytes @ 0x13
  2872  000014                     	ds	1
  2873  000015                     
  2874                           ; 1 bytes @ 0x14
  2875  000015                     	ds	2
  2876  000017                     ??_ISR_Function:
  2877                           
  2878                           ; 1 bytes @ 0x16
  2879  000017                     	ds	18
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           postdec1	equ	0xFE5
  2887                           fsr1h	equ	0xFE2
  2888                           fsr1l	equ	0xFE1
  2889                           
  2890 ;;
  2891 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2892 ;;
  2893 ;; *************** function _main *****************
  2894 ;; Defined at:
  2895 ;;		line 347 in file "main.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;Total ram usage:        2 bytes
  2914 ;; Hardware stack levels required when called:   18
  2915 ;; This function calls:
  2916 ;;		_Console_Render
  2917 ;;		_HMI_Poll
  2918 ;;		_MXK_Dequeue
  2919 ;;		_MXK_Release
  2920 ;;		_MXK_SwitchTo
  2921 ;;		_getMode
  2922 ;;		_init
  2923 ;;		_mode1
  2924 ;;		_mode2
  2925 ;;		_mode3
  2926 ;;		_mode4
  2927 ;;		_printf
  2928 ;; This function is called by:
  2929 ;;		Startup code after reset
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           	psect	text0
  2934  013A86                     __ptext0:
  2935                           	opt stack 0
  2936  013A86                     _main:
  2937                           	opt stack 13
  2938                           
  2939                           ;main.c: 348: init();
  2940                           
  2941                           ;incstack = 0
  2942  013A86  ECB9  F0A3         	call	_init	;wreg free
  2943  013A8A                     l2404:
  2944                           
  2945                           ;main.c: 350: getMode();
  2946  013A8A  EC8B  F0A0         	call	_getMode	;wreg free
  2947                           
  2948                           ;main.c: 351: switch (mode) {
  2949  013A8E  D053               	goto	l2405
  2950  013A90                     
  2951                           ;main.c: 353: mode1();
  2952  013A90  EC65  F086         	call	_mode1	;wreg free
  2953                           
  2954                           ;main.c: 354: break;
  2955  013A94  D7FA               	goto	l2404
  2956  013A96                     
  2957                           ;main.c: 356: mode2();
  2958  013A96  ECD0  F09C         	call	_mode2	;wreg free
  2959                           
  2960                           ;main.c: 357: break;
  2961  013A9A  D7F7               	goto	l2404
  2962  013A9C                     
  2963                           ;main.c: 359: mode3();
  2964  013A9C  ECF8  F0B2         	call	_mode3	;wreg free
  2965                           
  2966                           ;main.c: 360: break;
  2967  013AA0  D7F4               	goto	l2404
  2968  013AA2                     
  2969                           ;main.c: 362: mode4();
  2970  013AA2  EC22  F09A         	call	_mode4	;wreg free
  2971                           
  2972                           ;main.c: 363: break;
  2973  013AA6  D7F1               	goto	l2404
  2974  013AA8                     
  2975                           ;main.c: 365: if (MXK_SwitchTo(eMXK_HMI)) {
  2976  013AA8  0E01               	movlw	1
  2977  013AAA  EC41  F0AF         	call	_MXK_SwitchTo
  2978  013AAE  0900               	iorlw	0
  2979  013AB0  B4D8               	btfsc	status,2,c
  2980  013AB2  D7EB               	goto	l2404
  2981                           
  2982                           ;main.c: 366: printf("%c", (char)35);
  2983  013AB4  0EFB               	movlw	low STR_1
  2984  013AB6  0100               	movlb	0	; () banked
  2985  013AB8  6FCF               	movwf	printf@f& (0+255),b
  2986  013ABA  0EFF               	movlw	high STR_1
  2987  013ABC  0100               	movlb	0	; () banked
  2988  013ABE  6FD0               	movwf	(printf@f+1)& (0+255),b
  2989  013AC0  0E00               	movlw	0
  2990  013AC2  0100               	movlb	0	; () banked
  2991  013AC4  6FD2               	movwf	(?_printf+3)& (0+255),b
  2992  013AC6  0E23               	movlw	35
  2993  013AC8  6FD1               	movwf	(?_printf+2)& (0+255),b
  2994  013ACA  EC7A  F092         	call	_printf	;wreg free
  2995                           
  2996                           ;main.c: 367: printf("Please select mode.\n");
  2997  013ACE  0ED8               	movlw	low STR_12
  2998  013AD0  0100               	movlb	0	; () banked
  2999  013AD2  6FCF               	movwf	printf@f& (0+255),b
  3000  013AD4  0EFF               	movlw	high STR_12
  3001  013AD6  0100               	movlb	0	; () banked
  3002  013AD8  6FD0               	movwf	(printf@f+1)& (0+255),b
  3003  013ADA  EC7A  F092         	call	_printf	;wreg free
  3004                           
  3005                           ;main.c: 368: printf("                   \n");
  3006  013ADE  0EC3               	movlw	low STR_13
  3007  013AE0  0100               	movlb	0	; () banked
  3008  013AE2  6FCF               	movwf	printf@f& (0+255),b
  3009  013AE4  0EFF               	movlw	high STR_13
  3010  013AE6  0100               	movlb	0	; () banked
  3011  013AE8  6FD0               	movwf	(printf@f+1)& (0+255),b
  3012  013AEA  EC7A  F092         	call	_printf	;wreg free
  3013                           
  3014                           ;main.c: 369: printf("                   \n");
  3015  013AEE  0EC3               	movlw	low STR_13
  3016  013AF0  0100               	movlb	0	; () banked
  3017  013AF2  6FCF               	movwf	printf@f& (0+255),b
  3018  013AF4  0EFF               	movlw	high STR_13
  3019  013AF6  0100               	movlb	0	; () banked
  3020  013AF8  6FD0               	movwf	(printf@f+1)& (0+255),b
  3021  013AFA  EC7A  F092         	call	_printf	;wreg free
  3022                           
  3023                           ;main.c: 370: printf("                   \n");
  3024  013AFE  0EC3               	movlw	low STR_13
  3025  013B00  0100               	movlb	0	; () banked
  3026  013B02  6FCF               	movwf	printf@f& (0+255),b
  3027  013B04  0EFF               	movlw	high STR_13
  3028  013B06  0100               	movlb	0	; () banked
  3029  013B08  6FD0               	movwf	(printf@f+1)& (0+255),b
  3030  013B0A  EC7A  F092         	call	_printf	;wreg free
  3031                           
  3032                           ;main.c: 371: printf("                   \n");
  3033  013B0E  0EC3               	movlw	low STR_13
  3034  013B10  0100               	movlb	0	; () banked
  3035  013B12  6FCF               	movwf	printf@f& (0+255),b
  3036  013B14  0EFF               	movlw	high STR_13
  3037  013B16  0100               	movlb	0	; () banked
  3038  013B18  6FD0               	movwf	(printf@f+1)& (0+255),b
  3039  013B1A  EC7A  F092         	call	_printf	;wreg free
  3040                           
  3041                           ;main.c: 372: Console_Render();
  3042  013B1E  EC8E  F08F         	call	_Console_Render	;wreg free
  3043                           
  3044                           ;main.c: 373: HMI_Poll();
  3045  013B22  EC05  F0AA         	call	_HMI_Poll	;wreg free
  3046                           
  3047                           ;main.c: 374: if (MXK_Release())
  3048  013B26  EC6F  F0B2         	call	_MXK_Release	;wreg free
  3049  013B2A  0900               	iorlw	0
  3050  013B2C  B4D8               	btfsc	status,2,c
  3051  013B2E  D7AD               	goto	l2404
  3052                           
  3053                           ;main.c: 375: MXK_Dequeue();
  3054  013B30  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  3055                           
  3056                           ;main.c: 376: }
  3057                           ;main.c: 377: }
  3058  013B34  D7AA               	goto	l2404
  3059  013B36                     l2405:
  3060  013B36  C073  F3FC         	movff	_mode,??_main
  3061  013B3A  C074  F3FD         	movff	_mode+1,??_main+1
  3062                           
  3063                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3064                           ; Switch size 1, requested type "space"
  3065                           ; Number of cases is 1, Range of values is 0 to 0
  3066                           ; switch strategies available:
  3067                           ; Name         Instructions Cycles
  3068                           ; simple_byte            4     3 (average)
  3069                           ;	Chosen strategy is simple_byte
  3070  013B3E  0103               	movlb	3	; () banked
  3071  013B40  51FD               	movf	(??_main+1)& (0+255),w,b
  3072  013B42  0A00               	xorlw	0	; case 0
  3073  013B44  A4D8               	btfss	status,2,c
  3074  013B46  D7B0               	goto	l2411
  3075                           
  3076                           ; BSR set to: 3
  3077                           ; Switch size 1, requested type "space"
  3078                           ; Number of cases is 4, Range of values is 1 to 4
  3079                           ; switch strategies available:
  3080                           ; Name         Instructions Cycles
  3081                           ; simple_byte           13     7 (average)
  3082                           ;	Chosen strategy is simple_byte
  3083  013B48  0103               	movlb	3	; () banked
  3084  013B4A  51FC               	movf	??_main& (0+255),w,b
  3085  013B4C  0A01               	xorlw	1	; case 1
  3086  013B4E  B4D8               	btfsc	status,2,c
  3087  013B50  D79F               	goto	l2406
  3088  013B52  0A03               	xorlw	3	; case 2
  3089  013B54  B4D8               	btfsc	status,2,c
  3090  013B56  D79F               	goto	l2408
  3091  013B58  0A01               	xorlw	1	; case 3
  3092  013B5A  B4D8               	btfsc	status,2,c
  3093  013B5C  D79F               	goto	l2409
  3094  013B5E  0A07               	xorlw	7	; case 4
  3095  013B60  B4D8               	btfsc	status,2,c
  3096  013B62  D79F               	goto	l2410
  3097  013B64  D7A1               	goto	l2411
  3098  013B66                     __end_of_main:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           postinc0	equ	0xFEE
  3105                           wreg	equ	0xFE8
  3106                           postdec1	equ	0xFE5
  3107                           fsr1h	equ	0xFE2
  3108                           fsr1l	equ	0xFE1
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _mode4 *****************
  3112 ;; Defined at:
  3113 ;;		line 317 in file "main.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;		None
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;		None
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:        0 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:   17
  3134 ;; This function calls:
  3135 ;;		_Console_Render
  3136 ;;		_MXK_Dequeue
  3137 ;;		_MXK_Release
  3138 ;;		_MXK_SwitchTo
  3139 ;;		_delay_ms
  3140 ;;		_findClosestWall
  3141 ;;		_irobot_move_straight
  3142 ;;		_irobot_song_play
  3143 ;;		_irobot_stop_motion
  3144 ;;		_printf
  3145 ;;		_safeToGo
  3146 ;;		_update_bump_and_cliff
  3147 ;;		_update_distance
  3148 ;; This function is called by:
  3149 ;;		_main
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text1
  3154  013444                     __ptext1:
  3155                           	opt stack 0
  3156  013444                     _mode4:
  3157                           	opt stack 13
  3158                           
  3159                           ;main.c: 318: safeToGo();
  3160                           
  3161                           ; BSR set to: 3
  3162                           ;incstack = 0
  3163  013444  EC00  F0AE         	call	_safeToGo	;wreg free
  3164                           
  3165                           ;main.c: 319: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3166  013448  D07D               	goto	l2392
  3167  01344A                     
  3168                           ;main.c: 320: findClosestWall();
  3169  01344A  EC62  F084         	call	_findClosestWall	;wreg free
  3170                           
  3171                           ;main.c: 321: delay_ms(80);
  3172  01344E  0E00               	movlw	0
  3173  013450  0100               	movlb	0	; () banked
  3174  013452  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  3175  013454  0E50               	movlw	80
  3176  013456  6FBA               	movwf	delay_ms@ms& (0+255),b
  3177  013458  EC18  F0AB         	call	_delay_ms	;wreg free
  3178                           
  3179                           ;main.c: 322: irobot_move_straight(200);
  3180  01345C  0E00               	movlw	0
  3181  01345E  0100               	movlb	0	; () banked
  3182  013460  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3183  013462  0EC8               	movlw	200
  3184  013464  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3185  013466  EC98  F0B2         	call	_irobot_move_straight	;wreg free
  3186                           
  3187                           ;main.c: 323: dist = 0;
  3188  01346A  0E00               	movlw	0
  3189  01346C  0100               	movlb	0	; () banked
  3190  01346E  6F6A               	movwf	(_dist+1)& (0+255),b
  3191  013470  0E00               	movlw	0
  3192  013472  6F69               	movwf	_dist& (0+255),b
  3193                           
  3194                           ;main.c: 324: while (dist < 300 && !iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDro
      +                          pLeft) {
  3195  013474  D00C               	goto	l2386
  3196  013476                     
  3197                           ; BSR set to: 0
  3198                           ;main.c: 325: update_distance();
  3199                           
  3200                           ; BSR set to: 0
  3201  013476  EC17  F0B3         	call	_update_distance	;wreg free
  3202                           
  3203                           ;main.c: 326: dist += iRDistance;
  3204  01347A  0100               	movlb	0	; () banked
  3205  01347C  5179               	movf	_iRDistance& (0+255),w,b
  3206  01347E  0100               	movlb	0	; () banked
  3207  013480  2769               	addwf	_dist& (0+255),f,b
  3208  013482  0100               	movlb	0	; () banked
  3209  013484  517A               	movf	(_iRDistance+1)& (0+255),w,b
  3210  013486  0100               	movlb	0	; () banked
  3211  013488  236A               	addwfc	(_dist+1)& (0+255),f,b
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;main.c: 327: update_bump_and_cliff();
  3215  01348A  EC3C  F0B0         	call	_update_bump_and_cliff	;wreg free
  3216  01348E                     l2386:
  3217  01348E  0100               	movlb	0	; () banked
  3218  013490  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  3219  013492  D008               	goto	u14130
  3220  013494  0E2C               	movlw	44
  3221  013496  0100               	movlb	0	; () banked
  3222  013498  5D69               	subwf	_dist& (0+255),w,b
  3223  01349A  0E01               	movlw	1
  3224  01349C  0100               	movlb	0	; () banked
  3225  01349E  596A               	subwfb	(_dist+1)& (0+255),w,b
  3226  0134A0  B0D8               	btfsc	status,0,c
  3227  0134A2  D010               	goto	u14170
  3228  0134A4                     u14130:
  3229                           
  3230                           ; BSR set to: 0
  3231  0134A4  0100               	movlb	0	; () banked
  3232  0134A6  5187               	movf	_iRBumpLeft& (0+255),w,b
  3233  0134A8  A4D8               	btfss	status,2,c
  3234  0134AA  D00C               	goto	u14170
  3235                           
  3236                           ; BSR set to: 0
  3237  0134AC  0100               	movlb	0	; () banked
  3238  0134AE  5188               	movf	_iRBumpRight& (0+255),w,b
  3239  0134B0  A4D8               	btfss	status,2,c
  3240  0134B2  D008               	goto	u14170
  3241                           
  3242                           ; BSR set to: 0
  3243  0134B4  0100               	movlb	0	; () banked
  3244  0134B6  5186               	movf	_iRDropRight& (0+255),w,b
  3245  0134B8  A4D8               	btfss	status,2,c
  3246  0134BA  D004               	goto	u14170
  3247                           
  3248                           ; BSR set to: 0
  3249  0134BC  0100               	movlb	0	; () banked
  3250  0134BE  5185               	movf	_iRDropLeft& (0+255),w,b
  3251  0134C0  B4D8               	btfsc	status,2,c
  3252  0134C2  D7D9               	goto	l2387
  3253  0134C4                     u14170:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 328: }
  3257                           ;main.c: 330: irobot_stop_motion(0);
  3258                           
  3259                           ; BSR set to: 0
  3260                           
  3261                           ; BSR set to: 0
  3262  0134C4  0E00               	movlw	0
  3263  0134C6  ECB6  F0AE         	call	_irobot_stop_motion
  3264                           
  3265                           ;main.c: 331: if (MXK_SwitchTo(eMXK_HMI)) {
  3266  0134CA  0E01               	movlw	1
  3267  0134CC  EC41  F0AF         	call	_MXK_SwitchTo
  3268  0134D0  0900               	iorlw	0
  3269  0134D2  B4D8               	btfsc	status,2,c
  3270  0134D4  D037               	goto	l2392
  3271                           
  3272                           ;main.c: 332: printf("%c", (char)35);
  3273  0134D6  0EFB               	movlw	low STR_1
  3274  0134D8  0100               	movlb	0	; () banked
  3275  0134DA  6FCF               	movwf	printf@f& (0+255),b
  3276  0134DC  0EFF               	movlw	high STR_1
  3277  0134DE  0100               	movlb	0	; () banked
  3278  0134E0  6FD0               	movwf	(printf@f+1)& (0+255),b
  3279  0134E2  0E00               	movlw	0
  3280  0134E4  0100               	movlb	0	; () banked
  3281  0134E6  6FD2               	movwf	(?_printf+3)& (0+255),b
  3282  0134E8  0E23               	movlw	35
  3283  0134EA  6FD1               	movwf	(?_printf+2)& (0+255),b
  3284  0134EC  EC7A  F092         	call	_printf	;wreg free
  3285                           
  3286                           ;main.c: 333: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\nAng
      +                          leToTurn: %d\n", MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight, angleToClosestWal
      +                          l -67);
  3287  0134F0  0E0D               	movlw	low STR_10
  3288  0134F2  0100               	movlb	0	; () banked
  3289  0134F4  6FCF               	movwf	printf@f& (0+255),b
  3290  0134F6  0EFF               	movlw	high STR_10
  3291  0134F8  0100               	movlb	0	; () banked
  3292  0134FA  6FD0               	movwf	(printf@f+1)& (0+255),b
  3293  0134FC  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3294  013500  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3295  013504  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3296  013508  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3297  01350C  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3298  013510  0100               	movlb	0	; () banked
  3299  013512  6BD6               	clrf	(?_printf+7)& (0+255),b
  3300  013514  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3301  013518  0100               	movlb	0	; () banked
  3302  01351A  6BD8               	clrf	(?_printf+9)& (0+255),b
  3303  01351C  0EBD               	movlw	189
  3304  01351E  0100               	movlb	0	; () banked
  3305  013520  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3306  013522  0100               	movlb	0	; () banked
  3307  013524  6FD9               	movwf	(?_printf+10)& (0+255),b
  3308  013526  0EFF               	movlw	255
  3309  013528  0100               	movlb	0	; () banked
  3310  01352A  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3311  01352C  0100               	movlb	0	; () banked
  3312  01352E  6FDA               	movwf	(?_printf+11)& (0+255),b
  3313  013530  EC7A  F092         	call	_printf	;wreg free
  3314                           
  3315                           ;main.c: 334: Console_Render();
  3316  013534  EC8E  F08F         	call	_Console_Render	;wreg free
  3317                           
  3318                           ;main.c: 335: if (MXK_Release())
  3319  013538  EC6F  F0B2         	call	_MXK_Release	;wreg free
  3320  01353C  0900               	iorlw	0
  3321  01353E  A4D8               	btfss	status,2,c
  3322                           
  3323                           ;main.c: 336: MXK_Dequeue();
  3324  013540  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  3325  013544                     l2392:
  3326  013544  0100               	movlb	0	; () banked
  3327  013546  5187               	movf	_iRBumpLeft& (0+255),w,b
  3328  013548  A4D8               	btfss	status,2,c
  3329  01354A  D00C               	goto	u14230
  3330                           
  3331                           ; BSR set to: 0
  3332  01354C  0100               	movlb	0	; () banked
  3333  01354E  5188               	movf	_iRBumpRight& (0+255),w,b
  3334  013550  A4D8               	btfss	status,2,c
  3335  013552  D008               	goto	u14230
  3336                           
  3337                           ; BSR set to: 0
  3338  013554  0100               	movlb	0	; () banked
  3339  013556  5186               	movf	_iRDropRight& (0+255),w,b
  3340  013558  A4D8               	btfss	status,2,c
  3341  01355A  D004               	goto	u14230
  3342                           
  3343                           ; BSR set to: 0
  3344  01355C  0100               	movlb	0	; () banked
  3345  01355E  5185               	movf	_iRDropLeft& (0+255),w,b
  3346  013560  B4D8               	btfsc	status,2,c
  3347  013562  D773               	goto	l2385
  3348  013564                     u14230:
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;main.c: 337: }
  3352                           ;main.c: 338: }
  3353                           ;main.c: 339: irobot_song_play(0);
  3354                           
  3355                           ; BSR set to: 0
  3356                           
  3357                           ; BSR set to: 0
  3358  013564  0E00               	movlw	0
  3359  013566  EC03  F0B3         	call	_irobot_song_play
  3360                           
  3361                           ;main.c: 340: irobot_stop_motion(0);
  3362  01356A  0E00               	movlw	0
  3363  01356C  ECB6  F0AE         	call	_irobot_stop_motion
  3364  013570  0100               	movlb	0	; () banked
  3365  013572  51AF               	movf	_Stepper& (0+255),w,b
  3366  013574  0100               	movlb	0	; () banked
  3367  013576  11B0               	iorwf	(_Stepper+1)& (0+255),w,b
  3368  013578  B4D8               	btfsc	status,2,c
  3369  01357A  0012               	return	
  3370  01357C  D7F9               	goto	l2397
  3371  01357E                     __end_of_mode4:
  3372                           	opt stack 0
  3373                           tblptru	equ	0xFF8
  3374                           tblptrh	equ	0xFF7
  3375                           tblptrl	equ	0xFF6
  3376                           tablat	equ	0xFF5
  3377                           postinc0	equ	0xFEE
  3378                           wreg	equ	0xFE8
  3379                           postdec1	equ	0xFE5
  3380                           fsr1h	equ	0xFE2
  3381                           fsr1l	equ	0xFE1
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function _findClosestWall *****************
  3385 ;; Defined at:
  3386 ;;		line 151 in file "main.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;		None
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;Total ram usage:        6 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:   13
  3407 ;; This function calls:
  3408 ;;		_ADC_Start
  3409 ;;		_ADC_Voltage
  3410 ;;		_Console_Render
  3411 ;;		_HMI_Render
  3412 ;;		_HMI_SetNumber
  3413 ;;		_MXK_Dequeue
  3414 ;;		_MXK_Release
  3415 ;;		_MXK_SwitchTo
  3416 ;;		_Motor_Move
  3417 ;;		_Motor_Speed
  3418 ;;		___fldiv
  3419 ;;		___flmul
  3420 ;;		___fltol
  3421 ;;		___xxtofl
  3422 ;;		_irobot_rotate
  3423 ;;		_printf
  3424 ;; This function is called by:
  3425 ;;		_mode4
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text2
  3430  0108C4                     __ptext2:
  3431                           	opt stack 0
  3432  0108C4                     _findClosestWall:
  3433                           	opt stack 16
  3434                           
  3435                           ;main.c: 152: StepRotate = 401;
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;incstack = 0
  3439  0108C4  0E01               	movlw	1
  3440  0108C6  0100               	movlb	0	; () banked
  3441  0108C8  6F72               	movwf	(_StepRotate+1)& (0+255),b
  3442  0108CA  0E91               	movlw	145
  3443  0108CC  6F71               	movwf	_StepRotate& (0+255),b
  3444                           
  3445                           ;main.c: 153: MinDist = 1000;
  3446  0108CE  0E03               	movlw	3
  3447  0108D0  0100               	movlb	0	; () banked
  3448  0108D2  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3449  0108D4  0EE8               	movlw	232
  3450  0108D6  6FFB               	movwf	_MinDist& (0+255),b
  3451                           
  3452                           ;main.c: 154: Stepstomin = 0;
  3453  0108D8  0E00               	movlw	0
  3454  0108DA  0100               	movlb	0	; () banked
  3455  0108DC  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  3456  0108DE  0E00               	movlw	0
  3457  0108E0  6F6F               	movwf	_Stepstomin& (0+255),b
  3458                           
  3459                           ;main.c: 155: angleToClosestWall = 1000;
  3460  0108E2  0E03               	movlw	3
  3461  0108E4  0100               	movlb	0	; () banked
  3462  0108E6  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3463  0108E8  0EE8               	movlw	232
  3464  0108EA  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3465                           
  3466                           ;main.c: 156: IRValue = 0;
  3467  0108EC  0E00               	movlw	0
  3468  0108EE  0100               	movlb	0	; () banked
  3469  0108F0  6F6E               	movwf	(_IRValue+1)& (0+255),b
  3470  0108F2  0E00               	movlw	0
  3471  0108F4  6F6D               	movwf	_IRValue& (0+255),b
  3472                           
  3473                           ;main.c: 157: TimerX = 8;
  3474  0108F6  0E00               	movlw	0
  3475  0108F8  0100               	movlb	0	; () banked
  3476  0108FA  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3477  0108FC  0E08               	movlw	8
  3478  0108FE  6FF9               	movwf	_TimerX& (0+255),b
  3479                           
  3480                           ;main.c: 158: while (StepRotate > 0) {
  3481  010900  D15A               	goto	l2338
  3482  010902                     
  3483                           ; BSR set to: 0
  3484                           ;main.c: 159: StepRotate--;
  3485                           
  3486                           ; BSR set to: 0
  3487  010902  0100               	movlb	0	; () banked
  3488  010904  0771               	decf	_StepRotate& (0+255),f,b
  3489  010906  A0D8               	btfss	status,0,c
  3490  010908  0772               	decf	(_StepRotate+1)& (0+255),f,b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;main.c: 160: ADC_Start(&ADC_AN0);
  3494  01090A  0EB5               	movlw	low _ADC_AN0
  3495  01090C  0100               	movlb	0	; () banked
  3496  01090E  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3497  010910  0E00               	movlw	high _ADC_AN0
  3498  010912  0100               	movlb	0	; () banked
  3499  010914  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3500  010916  ECA1  F0A7         	call	_ADC_Start	;wreg free
  3501                           
  3502                           ;main.c: 161: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3503  01091A  0EB5               	movlw	low _ADC_AN0
  3504  01091C  0100               	movlb	0	; () banked
  3505  01091E  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3506  010920  0E00               	movlw	high _ADC_AN0
  3507  010922  0100               	movlb	0	; () banked
  3508  010924  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3509  010926  ECB3  F09D         	call	_ADC_Voltage	;wreg free
  3510  01092A  C0E1  F106         	movff	?_ADC_Voltage,_findClosestWall$15593
  3511  01092E  C0E2  F107         	movff	?_ADC_Voltage+1,_findClosestWall$15593+1
  3512  010932  C0E3  F108         	movff	?_ADC_Voltage+2,_findClosestWall$15593+2
  3513  010936  C0E4  F109         	movff	?_ADC_Voltage+3,_findClosestWall$15593+3
  3514                           
  3515                           ;main.c: 161: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3516  01093A  C106  F0BE         	movff	_findClosestWall$15593,___fldiv@a
  3517  01093E  C107  F0BF         	movff	_findClosestWall$15593+1,___fldiv@a+1
  3518  010942  C108  F0C0         	movff	_findClosestWall$15593+2,___fldiv@a+2
  3519  010946  C109  F0C1         	movff	_findClosestWall$15593+3,___fldiv@a+3
  3520  01094A  0E00               	movlw	0
  3521  01094C  0100               	movlb	0	; () banked
  3522  01094E  6FBA               	movwf	___fldiv@b& (0+255),b
  3523  010950  0E00               	movlw	0
  3524  010952  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3525  010954  0E6C               	movlw	108
  3526  010956  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3527  010958  0E42               	movlw	66
  3528  01095A  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3529  01095C  EC4F  F088         	call	___fldiv	;wreg free
  3530  010960  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3531  010964  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3532  010968  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3533  01096C  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3534  010970  EC52  F09B         	call	___fltol	;wreg free
  3535  010974  C0F3  F06D         	movff	?___fltol,_IRValue
  3536  010978  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3537                           
  3538                           ;main.c: 162: if (MXK_SwitchTo(eMXK_HMI)) {
  3539  01097C  0E01               	movlw	1
  3540  01097E  EC41  F0AF         	call	_MXK_SwitchTo
  3541  010982  0900               	iorlw	0
  3542  010984  B4D8               	btfsc	status,2,c
  3543  010986  D00E               	goto	l2327
  3544                           
  3545                           ;main.c: 163: HMI_SetNumber(IRValue);
  3546  010988  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3547  01098C  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3548  010990  EC6A  F0B1         	call	_HMI_SetNumber	;wreg free
  3549                           
  3550                           ;main.c: 164: HMI_Render();
  3551  010994  ECA2  F0AF         	call	_HMI_Render	;wreg free
  3552                           
  3553                           ;main.c: 165: if (MXK_Release())
  3554  010998  EC6F  F0B2         	call	_MXK_Release	;wreg free
  3555  01099C  0900               	iorlw	0
  3556  01099E  A4D8               	btfss	status,2,c
  3557                           
  3558                           ;main.c: 166: MXK_Dequeue();
  3559  0109A0  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  3560  0109A4                     l2327:
  3561                           
  3562                           ;main.c: 167: }
  3563                           ;main.c: 168: if (IRValue < MinDist) {
  3564  0109A4  0100               	movlb	0	; () banked
  3565  0109A6  51FB               	movf	_MinDist& (0+255),w,b
  3566  0109A8  0100               	movlb	0	; () banked
  3567  0109AA  5D6D               	subwf	_IRValue& (0+255),w,b
  3568  0109AC  0100               	movlb	0	; () banked
  3569  0109AE  516E               	movf	(_IRValue+1)& (0+255),w,b
  3570  0109B0  0A80               	xorlw	128
  3571  0109B2  0101               	movlb	1	; () banked
  3572  0109B4  6F04               	movwf	??_findClosestWall& (0+255),b
  3573  0109B6  0100               	movlb	0	; () banked
  3574  0109B8  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3575  0109BA  0A80               	xorlw	128
  3576  0109BC  0101               	movlb	1	; () banked
  3577  0109BE  5904               	subwfb	??_findClosestWall& (0+255),w,b
  3578  0109C0  B0D8               	btfsc	status,0,c
  3579  0109C2  D008               	goto	l2328
  3580                           
  3581                           ; BSR set to: 1
  3582                           ;main.c: 169: MinDist = IRValue;
  3583  0109C4  C06D  F0FB         	movff	_IRValue,_MinDist
  3584  0109C8  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  3585                           
  3586                           ;main.c: 170: Stepstomin = StepRotate;
  3587  0109CC  C071  F06F         	movff	_StepRotate,_Stepstomin
  3588  0109D0  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  3589  0109D4                     l2328:
  3590                           
  3591                           ; BSR set to: 1
  3592                           ;main.c: 171: }
  3593                           ;main.c: 172: if (MXK_SwitchTo(eMXK_Motor)) {
  3594                           
  3595                           ; BSR set to: 1
  3596  0109D4  0E08               	movlw	8
  3597  0109D6  EC41  F0AF         	call	_MXK_SwitchTo
  3598  0109DA  0900               	iorlw	0
  3599  0109DC  B4D8               	btfsc	status,2,c
  3600  0109DE  D01F               	goto	l2330
  3601                           
  3602                           ;main.c: 173: Motor_Speed(&Stepper, (100));
  3603  0109E0  0EAF               	movlw	low _Stepper
  3604  0109E2  0100               	movlb	0	; () banked
  3605  0109E4  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3606  0109E6  0E00               	movlw	high _Stepper
  3607  0109E8  0100               	movlb	0	; () banked
  3608  0109EA  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3609  0109EC  0E00               	movlw	0
  3610  0109EE  0100               	movlb	0	; () banked
  3611  0109F0  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3612  0109F2  0E64               	movlw	100
  3613  0109F4  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3614  0109F6  EC55  F0B1         	call	_Motor_Speed	;wreg free
  3615                           
  3616                           ;main.c: 174: Motor_Move(&Stepper, -1);
  3617  0109FA  0EAF               	movlw	low _Stepper
  3618  0109FC  0100               	movlb	0	; () banked
  3619  0109FE  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3620  010A00  0E00               	movlw	high _Stepper
  3621  010A02  0100               	movlb	0	; () banked
  3622  010A04  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3623  010A06  0EFF               	movlw	255
  3624  010A08  0100               	movlb	0	; () banked
  3625  010A0A  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3626  010A0C  69BF               	setf	Motor_Move@pDelta& (0+255),b
  3627  010A0E  EC59  F0B0         	call	_Motor_Move	;wreg free
  3628                           
  3629                           ;main.c: 175: if (MXK_Release())
  3630  010A12  EC6F  F0B2         	call	_MXK_Release	;wreg free
  3631  010A16  0900               	iorlw	0
  3632  010A18  A4D8               	btfss	status,2,c
  3633                           
  3634                           ;main.c: 176: MXK_Dequeue();
  3635  010A1A  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  3636  010A1E                     l2330:
  3637                           
  3638                           ;main.c: 177: }
  3639                           ;main.c: 178: TimerX = 10;
  3640  010A1E  0E00               	movlw	0
  3641  010A20  0100               	movlb	0	; () banked
  3642  010A22  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3643  010A24  0E0A               	movlw	10
  3644  010A26  6FF9               	movwf	_TimerX& (0+255),b
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;main.c: 179: if (TimerX > 0) {
  3648  010A28  0100               	movlb	0	; () banked
  3649  010A2A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3650  010A2C  D063               	goto	u13800
  3651  010A2E  0100               	movlb	0	; () banked
  3652  010A30  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3653  010A32  E156               	bnz	l16313
  3654  010A34  0100               	movlb	0	; () banked
  3655  010A36  05F9               	decf	_TimerX& (0+255),w,b
  3656  010A38  B0D8               	btfsc	status,0,c
  3657  010A3A  D052               	goto	l2332
  3658  010A3C  D05B               	goto	u13800
  3659  010A3E                     l16295:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;main.c: 181: ADC_Start(&ADC_AN0);
  3663  010A3E  0EB5               	movlw	low _ADC_AN0
  3664  010A40  0100               	movlb	0	; () banked
  3665  010A42  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3666  010A44  0E00               	movlw	high _ADC_AN0
  3667  010A46  0100               	movlb	0	; () banked
  3668  010A48  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3669  010A4A  ECA1  F0A7         	call	_ADC_Start	;wreg free
  3670                           
  3671                           ;main.c: 182: if (MXK_SwitchTo(eMXK_HMI)) {
  3672  010A4E  0E01               	movlw	1
  3673  010A50  EC41  F0AF         	call	_MXK_SwitchTo
  3674  010A54  0900               	iorlw	0
  3675  010A56  B4D8               	btfsc	status,2,c
  3676  010A58  D00E               	goto	l2335
  3677                           
  3678                           ;main.c: 183: HMI_SetNumber(IRValue);
  3679  010A5A  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3680  010A5E  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3681  010A62  EC6A  F0B1         	call	_HMI_SetNumber	;wreg free
  3682                           
  3683                           ;main.c: 184: HMI_Render();
  3684  010A66  ECA2  F0AF         	call	_HMI_Render	;wreg free
  3685                           
  3686                           ;main.c: 185: if (MXK_Release())
  3687  010A6A  EC6F  F0B2         	call	_MXK_Release	;wreg free
  3688  010A6E  0900               	iorlw	0
  3689  010A70  A4D8               	btfss	status,2,c
  3690                           
  3691                           ;main.c: 186: MXK_Dequeue();
  3692  010A72  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  3693  010A76                     l2335:
  3694                           
  3695                           ;main.c: 187: }
  3696                           ;main.c: 188: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3697  010A76  0EB5               	movlw	low _ADC_AN0
  3698  010A78  0100               	movlb	0	; () banked
  3699  010A7A  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3700  010A7C  0E00               	movlw	high _ADC_AN0
  3701  010A7E  0100               	movlb	0	; () banked
  3702  010A80  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3703  010A82  ECB3  F09D         	call	_ADC_Voltage	;wreg free
  3704  010A86  C0E1  F106         	movff	?_ADC_Voltage,_findClosestWall$15593
  3705  010A8A  C0E2  F107         	movff	?_ADC_Voltage+1,_findClosestWall$15593+1
  3706  010A8E  C0E3  F108         	movff	?_ADC_Voltage+2,_findClosestWall$15593+2
  3707  010A92  C0E4  F109         	movff	?_ADC_Voltage+3,_findClosestWall$15593+3
  3708                           
  3709                           ;main.c: 187: }
  3710                           ;main.c: 188: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3711  010A96  C106  F0BE         	movff	_findClosestWall$15593,___fldiv@a
  3712  010A9A  C107  F0BF         	movff	_findClosestWall$15593+1,___fldiv@a+1
  3713  010A9E  C108  F0C0         	movff	_findClosestWall$15593+2,___fldiv@a+2
  3714  010AA2  C109  F0C1         	movff	_findClosestWall$15593+3,___fldiv@a+3
  3715  010AA6  0E00               	movlw	0
  3716  010AA8  0100               	movlb	0	; () banked
  3717  010AAA  6FBA               	movwf	___fldiv@b& (0+255),b
  3718  010AAC  0E00               	movlw	0
  3719  010AAE  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3720  010AB0  0E6C               	movlw	108
  3721  010AB2  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3722  010AB4  0E42               	movlw	66
  3723  010AB6  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3724  010AB8  EC4F  F088         	call	___fldiv	;wreg free
  3725  010ABC  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3726  010AC0  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3727  010AC4  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3728  010AC8  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3729  010ACC  EC52  F09B         	call	___fltol	;wreg free
  3730  010AD0  C0F3  F06D         	movff	?___fltol,_IRValue
  3731  010AD4  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3732                           
  3733                           ;main.c: 189: TimerX--;
  3734  010AD8  0100               	movlb	0	; () banked
  3735  010ADA  07F9               	decf	_TimerX& (0+255),f,b
  3736  010ADC  A0D8               	btfss	status,0,c
  3737  010ADE  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3738  010AE0                     l2332:
  3739  010AE0                     l16313:
  3740                           
  3741                           ; BSR set to: 0
  3742  010AE0  0100               	movlb	0	; () banked
  3743  010AE2  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3744  010AE4  D007               	goto	u13800
  3745  010AE6  0100               	movlb	0	; () banked
  3746  010AE8  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3747  010AEA  E1A9               	bnz	l16295
  3748  010AEC  0100               	movlb	0	; () banked
  3749  010AEE  05F9               	decf	_TimerX& (0+255),w,b
  3750  010AF0  B0D8               	btfsc	status,0,c
  3751  010AF2  D7A5               	goto	l2333
  3752  010AF4                     u13800:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 190: }
  3756                           ;main.c: 191: }
  3757                           ;main.c: 192: angleToClosestWall = Stepstomin * 0.67;
  3758                           
  3759                           ; BSR set to: 0
  3760                           
  3761                           ; BSR set to: 0
  3762  010AF4  0E1F               	movlw	31
  3763  010AF6  0100               	movlb	0	; () banked
  3764  010AF8  6FCC               	movwf	___flmul@a& (0+255),b
  3765  010AFA  0E85               	movlw	133
  3766  010AFC  6FCD               	movwf	(___flmul@a+1)& (0+255),b
  3767  010AFE  0E2B               	movlw	43
  3768  010B00  6FCE               	movwf	(___flmul@a+2)& (0+255),b
  3769  010B02  0E3F               	movlw	63
  3770  010B04  6FCF               	movwf	(___flmul@a+3)& (0+255),b
  3771  010B06  C06F  F0BA         	movff	_Stepstomin,___xxtofl@val
  3772  010B0A  C070  F0BB         	movff	_Stepstomin+1,___xxtofl@val+1
  3773  010B0E  0100               	movlb	0	; () banked
  3774  010B10  0E00               	movlw	0
  3775  010B12  BFBB               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3776  010B14  0EFF               	movlw	-1
  3777  010B16  6FBC               	movwf	(___xxtofl@val+2)& (0+255),b
  3778  010B18  6FBD               	movwf	(___xxtofl@val+3)& (0+255),b
  3779  010B1A  0E01               	movlw	1
  3780  010B1C  EC93  F091         	call	___xxtofl
  3781  010B20  C0BA  F0C8         	movff	?___xxtofl,___flmul@b
  3782  010B24  C0BB  F0C9         	movff	?___xxtofl+1,___flmul@b+1
  3783  010B28  C0BC  F0CA         	movff	?___xxtofl+2,___flmul@b+2
  3784  010B2C  C0BD  F0CB         	movff	?___xxtofl+3,___flmul@b+3
  3785  010B30  EC00  F080         	call	___flmul	;wreg free
  3786  010B34  C0C8  F0F3         	movff	?___flmul,___fltol@f1
  3787  010B38  C0C9  F0F4         	movff	?___flmul+1,___fltol@f1+1
  3788  010B3C  C0CA  F0F5         	movff	?___flmul+2,___fltol@f1+2
  3789  010B40  C0CB  F0F6         	movff	?___flmul+3,___fltol@f1+3
  3790  010B44  EC52  F09B         	call	___fltol	;wreg free
  3791  010B48  C0F3  F06B         	movff	?___fltol,_angleToClosestWall
  3792  010B4C  C0F4  F06C         	movff	?___fltol+1,_angleToClosestWall+1
  3793                           
  3794                           ;main.c: 193: if (MXK_SwitchTo(eMXK_HMI)) {
  3795  010B50  0E01               	movlw	1
  3796  010B52  EC41  F0AF         	call	_MXK_SwitchTo
  3797  010B56  0900               	iorlw	0
  3798  010B58  B4D8               	btfsc	status,2,c
  3799  010B5A  D02D               	goto	l2338
  3800                           
  3801                           ;main.c: 194: printf("%c", (char)35);
  3802  010B5C  0EFB               	movlw	low STR_1
  3803  010B5E  0100               	movlb	0	; () banked
  3804  010B60  6FCF               	movwf	printf@f& (0+255),b
  3805  010B62  0EFF               	movlw	high STR_1
  3806  010B64  0100               	movlb	0	; () banked
  3807  010B66  6FD0               	movwf	(printf@f+1)& (0+255),b
  3808  010B68  0E00               	movlw	0
  3809  010B6A  0100               	movlb	0	; () banked
  3810  010B6C  6FD2               	movwf	(?_printf+3)& (0+255),b
  3811  010B6E  0E23               	movlw	35
  3812  010B70  6FD1               	movwf	(?_printf+2)& (0+255),b
  3813  010B72  EC7A  F092         	call	_printf	;wreg free
  3814                           
  3815                           ;main.c: 195: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3816  010B76  0E59               	movlw	low STR_2
  3817  010B78  0100               	movlb	0	; () banked
  3818  010B7A  6FCF               	movwf	printf@f& (0+255),b
  3819  010B7C  0EFF               	movlw	high STR_2
  3820  010B7E  0100               	movlb	0	; () banked
  3821  010B80  6FD0               	movwf	(printf@f+1)& (0+255),b
  3822  010B82  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3823  010B86  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3824  010B8A  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3825  010B8E  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3826  010B92  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3827  010B96  0100               	movlb	0	; () banked
  3828  010B98  6BD6               	clrf	(?_printf+7)& (0+255),b
  3829  010B9A  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3830  010B9E  0100               	movlb	0	; () banked
  3831  010BA0  6BD8               	clrf	(?_printf+9)& (0+255),b
  3832  010BA2  EC7A  F092         	call	_printf	;wreg free
  3833                           
  3834                           ;main.c: 196: Console_Render();
  3835  010BA6  EC8E  F08F         	call	_Console_Render	;wreg free
  3836                           
  3837                           ;main.c: 197: if (MXK_Release())
  3838  010BAA  EC6F  F0B2         	call	_MXK_Release	;wreg free
  3839  010BAE  0900               	iorlw	0
  3840  010BB0  A4D8               	btfss	status,2,c
  3841                           
  3842                           ;main.c: 198: MXK_Dequeue();
  3843  010BB2  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  3844  010BB6                     l2338:
  3845  010BB6  0100               	movlb	0	; () banked
  3846  010BB8  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  3847  010BBA  D007               	goto	u13830
  3848  010BBC  0100               	movlb	0	; () banked
  3849  010BBE  5172               	movf	(_StepRotate+1)& (0+255),w,b
  3850  010BC0  E103               	bnz	u13831
  3851  010BC2  0100               	movlb	0	; () banked
  3852  010BC4  0571               	decf	_StepRotate& (0+255),w,b
  3853  010BC6  B0D8               	btfsc	status,0,c
  3854  010BC8                     u13831:
  3855  010BC8  D69C               	goto	l2325
  3856  010BCA                     u13830:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;main.c: 199: }
  3860                           ;main.c: 200: }
  3861                           ;main.c: 201: Motor_Speed(&Stepper, (200));
  3862                           
  3863                           ; BSR set to: 0
  3864  010BCA  0EAF               	movlw	low _Stepper
  3865  010BCC  0100               	movlb	0	; () banked
  3866  010BCE  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3867  010BD0  0E00               	movlw	high _Stepper
  3868  010BD2  0100               	movlb	0	; () banked
  3869  010BD4  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3870  010BD6  0E00               	movlw	0
  3871  010BD8  0100               	movlb	0	; () banked
  3872  010BDA  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3873  010BDC  0EC8               	movlw	200
  3874  010BDE  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3875  010BE0  EC55  F0B1         	call	_Motor_Speed	;wreg free
  3876                           
  3877                           ;main.c: 202: Motor_Move(&Stepper, 400);
  3878  010BE4  0EAF               	movlw	low _Stepper
  3879  010BE6  0100               	movlb	0	; () banked
  3880  010BE8  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3881  010BEA  0E00               	movlw	high _Stepper
  3882  010BEC  0100               	movlb	0	; () banked
  3883  010BEE  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3884  010BF0  0E01               	movlw	1
  3885  010BF2  0100               	movlb	0	; () banked
  3886  010BF4  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3887  010BF6  0E90               	movlw	144
  3888  010BF8  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  3889  010BFA  EC59  F0B0         	call	_Motor_Move	;wreg free
  3890                           
  3891                           ;main.c: 203: angleToClosestWall = angleToClosestWall - 67;
  3892  010BFE  0EBD               	movlw	189
  3893  010C00  0100               	movlb	0	; () banked
  3894  010C02  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3895  010C04  0100               	movlb	0	; () banked
  3896  010C06  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3897  010C08  0EFF               	movlw	255
  3898  010C0A  0100               	movlb	0	; () banked
  3899  010C0C  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3900  010C0E  0100               	movlb	0	; () banked
  3901  010C10  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;main.c: 204: if(angleToClosestWall < 0) {
  3905  010C12  0100               	movlb	0	; () banked
  3906  010C14  AF6C               	btfss	(_angleToClosestWall+1)& (0+255),7,b
  3907  010C16  D027               	goto	l2340
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;main.c: 205: angleToClosestWall = angleToClosestWall + (2*angleToClosestWall);
  3911  010C18  C06B  F104         	movff	_angleToClosestWall,??_findClosestWall
  3912  010C1C  C06C  F105         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3913  010C20  90D8               	bcf	status,0,c
  3914  010C22  0101               	movlb	1	; () banked
  3915  010C24  3704               	rlcf	??_findClosestWall& (0+255),f,b
  3916  010C26  3705               	rlcf	(??_findClosestWall+1)& (0+255),f,b
  3917  010C28  0100               	movlb	0	; () banked
  3918  010C2A  516B               	movf	_angleToClosestWall& (0+255),w,b
  3919  010C2C  0101               	movlb	1	; () banked
  3920  010C2E  2504               	addwf	??_findClosestWall& (0+255),w,b
  3921  010C30  0100               	movlb	0	; () banked
  3922  010C32  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3923  010C34  0100               	movlb	0	; () banked
  3924  010C36  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  3925  010C38  0101               	movlb	1	; () banked
  3926  010C3A  2105               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3927  010C3C  0100               	movlb	0	; () banked
  3928  010C3E  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3929                           
  3930                           ;main.c: 206: angleToClosestWall = 270 - angleToClosestWall;
  3931  010C40  C06B  F104         	movff	_angleToClosestWall,??_findClosestWall
  3932  010C44  C06C  F105         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3933  010C48  0101               	movlb	1	; () banked
  3934  010C4A  1F04               	comf	??_findClosestWall& (0+255),f,b
  3935  010C4C  1F05               	comf	(??_findClosestWall+1)& (0+255),f,b
  3936  010C4E  4B04               	infsnz	??_findClosestWall& (0+255),f,b
  3937  010C50  2B05               	incf	(??_findClosestWall+1)& (0+255),f,b
  3938  010C52  0E0E               	movlw	14
  3939  010C54  0101               	movlb	1	; () banked
  3940  010C56  2504               	addwf	??_findClosestWall& (0+255),w,b
  3941  010C58  0100               	movlb	0	; () banked
  3942  010C5A  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3943  010C5C  0E01               	movlw	1
  3944  010C5E  0101               	movlb	1	; () banked
  3945  010C60  2105               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3946  010C62  0100               	movlb	0	; () banked
  3947  010C64  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3948  010C66                     l2340:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;main.c: 207: }
  3952                           ;main.c: 208: if(!(angleToClosestWall > 65 && angleToClosestWall < 70)) {
  3953  010C66  0100               	movlb	0	; () banked
  3954  010C68  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3955  010C6A  D013               	goto	u13860
  3956  010C6C  0100               	movlb	0	; () banked
  3957  010C6E  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  3958  010C70  E105               	bnz	u13850
  3959  010C72  0E42               	movlw	66
  3960  010C74  0100               	movlb	0	; () banked
  3961  010C76  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  3962  010C78  A0D8               	btfss	status,0,c
  3963  010C7A  D00B               	goto	u13860
  3964  010C7C                     u13850:
  3965                           
  3966                           ; BSR set to: 0
  3967  010C7C  0100               	movlb	0	; () banked
  3968  010C7E  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3969  010C80  0012               	return	
  3970  010C82  0100               	movlb	0	; () banked
  3971  010C84  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  3972  010C86  E105               	bnz	l16339
  3973  010C88  0E46               	movlw	70
  3974  010C8A  0100               	movlb	0	; () banked
  3975  010C8C  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  3976  010C8E  A0D8               	btfss	status,0,c
  3977  010C90  0012               	return	
  3978  010C92                     u13860:
  3979  010C92                     l16339:
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;main.c: 209: irobot_rotate(0, 270 - angleToClosestWall, 200);
  3983  010C92  C06B  F104         	movff	_angleToClosestWall,??_findClosestWall
  3984  010C96  C06C  F105         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3985  010C9A  0101               	movlb	1	; () banked
  3986  010C9C  1F04               	comf	??_findClosestWall& (0+255),f,b
  3987  010C9E  1F05               	comf	(??_findClosestWall+1)& (0+255),f,b
  3988  010CA0  4B04               	infsnz	??_findClosestWall& (0+255),f,b
  3989  010CA2  2B05               	incf	(??_findClosestWall+1)& (0+255),f,b
  3990  010CA4  0E0E               	movlw	14
  3991  010CA6  0101               	movlb	1	; () banked
  3992  010CA8  2504               	addwf	??_findClosestWall& (0+255),w,b
  3993  010CAA  0100               	movlb	0	; () banked
  3994  010CAC  6FD3               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3995  010CAE  0E01               	movlw	1
  3996  010CB0  0101               	movlb	1	; () banked
  3997  010CB2  2105               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3998  010CB4  0100               	movlb	0	; () banked
  3999  010CB6  6FD4               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4000  010CB8  0E00               	movlw	0
  4001  010CBA  0100               	movlb	0	; () banked
  4002  010CBC  6FD6               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4003  010CBE  0EC8               	movlw	200
  4004  010CC0  6FD5               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4005  010CC2  0E00               	movlw	0
  4006  010CC4  ECE8  F0AB         	call	_irobot_rotate
  4007  010CC8  0012               	return	
  4008  010CCA                     __end_of_findClosestWall:
  4009                           	opt stack 0
  4010                           tblptru	equ	0xFF8
  4011                           tblptrh	equ	0xFF7
  4012                           tblptrl	equ	0xFF6
  4013                           tablat	equ	0xFF5
  4014                           postinc0	equ	0xFEE
  4015                           wreg	equ	0xFE8
  4016                           postdec1	equ	0xFE5
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           status	equ	0xFD8
  4020                           
  4021 ;; *************** function _mode3 *****************
  4022 ;; Defined at:
  4023 ;;		line 308 in file "main.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;		None
  4026 ;; Auto vars:     Size  Location     Type
  4027 ;;		None
  4028 ;; Return value:  Size  Location     Type
  4029 ;;                  1    wreg      void 
  4030 ;; Registers used:
  4031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;Total ram usage:        0 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; Hardware stack levels required when called:   17
  4044 ;; This function calls:
  4045 ;;		_move_and_rotate
  4046 ;;		_safeToGo
  4047 ;; This function is called by:
  4048 ;;		_main
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           	psect	text3
  4053  0165F0                     __ptext3:
  4054                           	opt stack 0
  4055  0165F0                     _mode3:
  4056                           	opt stack 13
  4057                           
  4058                           ;main.c: 309: safeToGo();
  4059                           
  4060                           ;incstack = 0
  4061  0165F0  EC00  F0AE         	call	_safeToGo	;wreg free
  4062                           
  4063                           ;main.c: 310: move_and_rotate();
  4064  0165F4  ECE3  F0A7         	call	_move_and_rotate	;wreg free
  4065                           
  4066                           ;main.c: 311: move_and_rotate();
  4067  0165F8  ECE3  F0A7         	call	_move_and_rotate	;wreg free
  4068                           
  4069                           ;main.c: 312: move_and_rotate();
  4070  0165FC  ECE3  F0A7         	call	_move_and_rotate	;wreg free
  4071                           
  4072                           ;main.c: 313: move_and_rotate();
  4073  016600  ECE3  F0A7         	call	_move_and_rotate	;wreg free
  4074  016604  0012               	return		;funcret
  4075  016606                     __end_of_mode3:
  4076                           	opt stack 0
  4077                           tblptru	equ	0xFF8
  4078                           tblptrh	equ	0xFF7
  4079                           tblptrl	equ	0xFF6
  4080                           tablat	equ	0xFF5
  4081                           postinc0	equ	0xFEE
  4082                           wreg	equ	0xFE8
  4083                           postdec1	equ	0xFE5
  4084                           fsr1h	equ	0xFE2
  4085                           fsr1l	equ	0xFE1
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _move_and_rotate *****************
  4089 ;; Defined at:
  4090 ;;		line 137 in file "main.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;Total ram usage:        0 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:   11
  4111 ;; This function calls:
  4112 ;;		_delay_ms
  4113 ;;		_irobot_move_straight
  4114 ;;		_irobot_rotate
  4115 ;;		_irobot_stop_motion
  4116 ;;		_update_distance
  4117 ;; This function is called by:
  4118 ;;		_mode3
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           	psect	text4
  4123  014FC6                     __ptext4:
  4124                           	opt stack 0
  4125  014FC6                     _move_and_rotate:
  4126                           	opt stack 18
  4127                           
  4128                           ;main.c: 138: dist = 0;
  4129                           
  4130                           ;incstack = 0
  4131  014FC6  0E00               	movlw	0
  4132  014FC8  0100               	movlb	0	; () banked
  4133  014FCA  6F6A               	movwf	(_dist+1)& (0+255),b
  4134  014FCC  0E00               	movlw	0
  4135  014FCE  6F69               	movwf	_dist& (0+255),b
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;main.c: 139: irobot_move_straight(100);
  4139  014FD0  0E00               	movlw	0
  4140  014FD2  0100               	movlb	0	; () banked
  4141  014FD4  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4142  014FD6  0E64               	movlw	100
  4143  014FD8  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4144  014FDA  EC98  F0B2         	call	_irobot_move_straight	;wreg free
  4145                           
  4146                           ;main.c: 140: while (dist < 1000) {
  4147  014FDE  D00A               	goto	l2318
  4148  014FE0                     
  4149                           ;main.c: 141: update_distance();
  4150  014FE0  EC17  F0B3         	call	_update_distance	;wreg free
  4151                           
  4152                           ;main.c: 142: dist += iRDistance;
  4153  014FE4  0100               	movlb	0	; () banked
  4154  014FE6  5179               	movf	_iRDistance& (0+255),w,b
  4155  014FE8  0100               	movlb	0	; () banked
  4156  014FEA  2769               	addwf	_dist& (0+255),f,b
  4157  014FEC  0100               	movlb	0	; () banked
  4158  014FEE  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4159  014FF0  0100               	movlb	0	; () banked
  4160  014FF2  236A               	addwfc	(_dist+1)& (0+255),f,b
  4161  014FF4                     l2318:
  4162                           
  4163                           ; BSR set to: 0
  4164  014FF4  0100               	movlb	0	; () banked
  4165  014FF6  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  4166  014FF8  D7F3               	goto	l2319
  4167  014FFA  0EE8               	movlw	232
  4168  014FFC  0100               	movlb	0	; () banked
  4169  014FFE  5D69               	subwf	_dist& (0+255),w,b
  4170  015000  0E03               	movlw	3
  4171  015002  0100               	movlb	0	; () banked
  4172  015004  596A               	subwfb	(_dist+1)& (0+255),w,b
  4173  015006  A0D8               	btfss	status,0,c
  4174  015008  D7EB               	goto	l2319
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;main.c: 143: }
  4178                           ;main.c: 144: irobot_stop_motion(0);
  4179                           
  4180                           ; BSR set to: 0
  4181  01500A  0E00               	movlw	0
  4182  01500C  ECB6  F0AE         	call	_irobot_stop_motion
  4183                           
  4184                           ;main.c: 145: delay_ms(100);
  4185  015010  0E00               	movlw	0
  4186  015012  0100               	movlb	0	; () banked
  4187  015014  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4188  015016  0E64               	movlw	100
  4189  015018  6FBA               	movwf	delay_ms@ms& (0+255),b
  4190  01501A  EC18  F0AB         	call	_delay_ms	;wreg free
  4191                           
  4192                           ;main.c: 146: irobot_rotate(0, 67, 200);
  4193  01501E  0E00               	movlw	0
  4194  015020  0100               	movlb	0	; () banked
  4195  015022  6FD4               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4196  015024  0E43               	movlw	67
  4197  015026  6FD3               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4198  015028  0E00               	movlw	0
  4199  01502A  0100               	movlb	0	; () banked
  4200  01502C  6FD6               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4201  01502E  0EC8               	movlw	200
  4202  015030  6FD5               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4203  015032  0E00               	movlw	0
  4204  015034  ECE8  F0AB         	call	_irobot_rotate
  4205                           
  4206                           ;main.c: 147: delay_ms(100);
  4207  015038  0E00               	movlw	0
  4208  01503A  0100               	movlb	0	; () banked
  4209  01503C  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4210  01503E  0E64               	movlw	100
  4211  015040  6FBA               	movwf	delay_ms@ms& (0+255),b
  4212  015042  EC18  F0AB         	call	_delay_ms	;wreg free
  4213  015046  0012               	return		;funcret
  4214  015048                     __end_of_move_and_rotate:
  4215                           	opt stack 0
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           postinc0	equ	0xFEE
  4221                           wreg	equ	0xFE8
  4222                           postdec1	equ	0xFE5
  4223                           fsr1h	equ	0xFE2
  4224                           fsr1l	equ	0xFE1
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _irobot_rotate *****************
  4228 ;; Defined at:
  4229 ;;		line 280 in file "Library/iRobotSerial.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  isScript        1    wreg     unsigned char 
  4232 ;;  rotateAngle     2   25[BANK0 ] short 
  4233 ;;  rotateSpeed     2   27[BANK0 ] short 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  isScript        1   29[BANK0 ] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4245 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;Total ram usage:        5 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    9
  4252 ;; This function calls:
  4253 ;;		_irobot_move
  4254 ;; This function is called by:
  4255 ;;		_move_and_rotate
  4256 ;;		_findClosestWall
  4257 ;;		_irobot_rotate_to
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text5
  4262  0157D0                     __ptext5:
  4263                           	opt stack 0
  4264  0157D0                     _irobot_rotate:
  4265                           	opt stack 19
  4266                           
  4267                           ;incstack = 0
  4268                           ;irobot_rotate@isScript stored from wreg
  4269  0157D0  0100               	movlb	0	; () banked
  4270  0157D2  6FD7               	movwf	irobot_rotate@isScript& (0+255),b
  4271                           
  4272                           ;iRobotSerial.c: 281: (rotateAngle > 0) ? (rotateAngle = iR_CONST_CCW) : (rotateAngle = 
      +                          iR_CONST_CW);
  4273  0157D4  0100               	movlb	0	; () banked
  4274  0157D6  BFD4               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  4275  0157D8  D00D               	goto	l2152
  4276  0157DA  0100               	movlb	0	; () banked
  4277  0157DC  51D4               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4278  0157DE  E104               	bnz	u11020
  4279  0157E0  0100               	movlb	0	; () banked
  4280  0157E2  05D3               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  4281  0157E4  A0D8               	btfss	status,0,c
  4282  0157E6  D006               	goto	l2152
  4283  0157E8                     u11020:
  4284                           
  4285                           ; BSR set to: 0
  4286  0157E8  0E00               	movlw	0
  4287  0157EA  0100               	movlb	0	; () banked
  4288  0157EC  6FD4               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4289  0157EE  0E01               	movlw	1
  4290  0157F0  6FD3               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4291  0157F2  D003               	goto	l2154
  4292  0157F4                     l2152:
  4293                           
  4294                           ; BSR set to: 0
  4295  0157F4  0100               	movlb	0	; () banked
  4296  0157F6  69D3               	setf	irobot_rotate@rotateAngle& (0+255),b
  4297  0157F8  69D4               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4298  0157FA                     l2154:
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;iRobotSerial.c: 282: (isScript) ?
  4302                           ;iRobotSerial.c: 283: irobot_move(1, rotateSpeed, rotateAngle):
  4303                           ;iRobotSerial.c: 284: irobot_move(0, rotateSpeed, rotateAngle);
  4304                           
  4305                           ; BSR set to: 0
  4306  0157FA  0100               	movlb	0	; () banked
  4307  0157FC  51D7               	movf	irobot_rotate@isScript& (0+255),w,b
  4308  0157FE  0100               	movlb	0	; () banked
  4309  015800  B4D8               	btfsc	status,2,c
  4310  015802  D00C               	goto	l2156
  4311                           
  4312                           ; BSR set to: 0
  4313  015804  C0D5  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4314  015808  C0D6  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4315  01580C  C0D3  F0CC         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  4316  015810  C0D4  F0CD         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  4317  015814  0E01               	movlw	1
  4318  015816  EC60  F0A2         	call	_irobot_move
  4319  01581A  0012               	return	
  4320  01581C                     l2156:
  4321  01581C  C0D5  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4322  015820  C0D6  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4323  015824  C0D3  F0CC         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  4324  015828  C0D4  F0CD         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  4325  01582C  0E00               	movlw	0
  4326  01582E  EC60  F0A2         	call	_irobot_move
  4327  015832  0012               	return	
  4328  015834                     __end_of_irobot_rotate:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           postdec1	equ	0xFE5
  4337                           fsr1h	equ	0xFE2
  4338                           fsr1l	equ	0xFE1
  4339                           status	equ	0xFD8
  4340                           
  4341 ;; *************** function _mode2 *****************
  4342 ;; Defined at:
  4343 ;;		line 284 in file "main.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;		None
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  dist            2   44[BANK0 ] int 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;Total ram usage:        2 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:   17
  4364 ;; This function calls:
  4365 ;;		_Console_Render
  4366 ;;		_MXK_Dequeue
  4367 ;;		_MXK_Release
  4368 ;;		_MXK_SwitchTo
  4369 ;;		_irobot_move_straight
  4370 ;;		_irobot_stop_motion
  4371 ;;		_printf
  4372 ;;		_safeToGo
  4373 ;;		_update_distance
  4374 ;; This function is called by:
  4375 ;;		_main
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text6
  4380  0139A0                     __ptext6:
  4381                           	opt stack 0
  4382  0139A0                     _mode2:
  4383                           	opt stack 13
  4384                           
  4385                           ;main.c: 285: safeToGo();
  4386                           
  4387                           ;incstack = 0
  4388  0139A0  EC00  F0AE         	call	_safeToGo	;wreg free
  4389                           
  4390                           ;main.c: 286: if (MXK_SwitchTo(eMXK_HMI)) {
  4391  0139A4  0E01               	movlw	1
  4392  0139A6  EC41  F0AF         	call	_MXK_SwitchTo
  4393  0139AA  0900               	iorlw	0
  4394  0139AC  B4D8               	btfsc	status,2,c
  4395  0139AE  0012               	return	
  4396                           
  4397                           ;main.c: 287: printf("%c", (char)35);
  4398  0139B0  0EFB               	movlw	low STR_1
  4399  0139B2  0100               	movlb	0	; () banked
  4400  0139B4  6FCF               	movwf	printf@f& (0+255),b
  4401  0139B6  0EFF               	movlw	high STR_1
  4402  0139B8  0100               	movlb	0	; () banked
  4403  0139BA  6FD0               	movwf	(printf@f+1)& (0+255),b
  4404  0139BC  0E00               	movlw	0
  4405  0139BE  0100               	movlb	0	; () banked
  4406  0139C0  6FD2               	movwf	(?_printf+3)& (0+255),b
  4407  0139C2  0E23               	movlw	35
  4408  0139C4  6FD1               	movwf	(?_printf+2)& (0+255),b
  4409  0139C6  EC7A  F092         	call	_printf	;wreg free
  4410                           
  4411                           ;main.c: 288: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4412  0139CA  0E95               	movlw	low STR_4
  4413  0139CC  0100               	movlb	0	; () banked
  4414  0139CE  6FCF               	movwf	printf@f& (0+255),b
  4415  0139D0  0EFF               	movlw	high STR_4
  4416  0139D2  0100               	movlb	0	; () banked
  4417  0139D4  6FD0               	movwf	(printf@f+1)& (0+255),b
  4418  0139D6  C077  F0D1         	movff	_distanceTotal,?_printf+2
  4419  0139DA  C078  F0D2         	movff	_distanceTotal+1,?_printf+3
  4420  0139DE  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  4421  0139E2  0100               	movlb	0	; () banked
  4422  0139E4  6BD4               	clrf	(?_printf+5)& (0+255),b
  4423  0139E6  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  4424  0139EA  0100               	movlb	0	; () banked
  4425  0139EC  6BD6               	clrf	(?_printf+7)& (0+255),b
  4426  0139EE  EC7A  F092         	call	_printf	;wreg free
  4427                           
  4428                           ;main.c: 289: Console_Render();
  4429  0139F2  EC8E  F08F         	call	_Console_Render	;wreg free
  4430                           
  4431                           ;main.c: 291: int dist = 0;
  4432  0139F6  0E00               	movlw	0
  4433  0139F8  0100               	movlb	0	; () banked
  4434  0139FA  6FE7               	movwf	(mode2@dist+1)& (0+255),b
  4435  0139FC  0E00               	movlw	0
  4436  0139FE  6FE6               	movwf	mode2@dist& (0+255),b
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;main.c: 292: irobot_move_straight(200);
  4440  013A00  0E00               	movlw	0
  4441  013A02  0100               	movlb	0	; () banked
  4442  013A04  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4443  013A06  0EC8               	movlw	200
  4444  013A08  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4445  013A0A  EC98  F0B2         	call	_irobot_move_straight	;wreg free
  4446                           
  4447                           ;main.c: 293: while (dist < 5000) {
  4448  013A0E  D025               	goto	l2374
  4449  013A10                     
  4450                           ;main.c: 294: update_distance();
  4451  013A10  EC17  F0B3         	call	_update_distance	;wreg free
  4452                           
  4453                           ;main.c: 295: dist += iRDistance;
  4454  013A14  0100               	movlb	0	; () banked
  4455  013A16  5179               	movf	_iRDistance& (0+255),w,b
  4456  013A18  0100               	movlb	0	; () banked
  4457  013A1A  27E6               	addwf	mode2@dist& (0+255),f,b
  4458  013A1C  0100               	movlb	0	; () banked
  4459  013A1E  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4460  013A20  0100               	movlb	0	; () banked
  4461  013A22  23E7               	addwfc	(mode2@dist+1)& (0+255),f,b
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;main.c: 296: printf("%c", (char)35);
  4465  013A24  0EFB               	movlw	low STR_1
  4466  013A26  0100               	movlb	0	; () banked
  4467  013A28  6FCF               	movwf	printf@f& (0+255),b
  4468  013A2A  0EFF               	movlw	high STR_1
  4469  013A2C  0100               	movlb	0	; () banked
  4470  013A2E  6FD0               	movwf	(printf@f+1)& (0+255),b
  4471  013A30  0E00               	movlw	0
  4472  013A32  0100               	movlb	0	; () banked
  4473  013A34  6FD2               	movwf	(?_printf+3)& (0+255),b
  4474  013A36  0E23               	movlw	35
  4475  013A38  6FD1               	movwf	(?_printf+2)& (0+255),b
  4476  013A3A  EC7A  F092         	call	_printf	;wreg free
  4477                           
  4478                           ;main.c: 297: printf("Distance: %d\n", dist);
  4479  013A3E  0EED               	movlw	low STR_8
  4480  013A40  0100               	movlb	0	; () banked
  4481  013A42  6FCF               	movwf	printf@f& (0+255),b
  4482  013A44  0EFF               	movlw	high STR_8
  4483  013A46  0100               	movlb	0	; () banked
  4484  013A48  6FD0               	movwf	(printf@f+1)& (0+255),b
  4485  013A4A  C0E6  F0D1         	movff	mode2@dist,?_printf+2
  4486  013A4E  C0E7  F0D2         	movff	mode2@dist+1,?_printf+3
  4487  013A52  EC7A  F092         	call	_printf	;wreg free
  4488                           
  4489                           ;main.c: 298: Console_Render();
  4490  013A56  EC8E  F08F         	call	_Console_Render	;wreg free
  4491  013A5A                     l2374:
  4492  013A5A  0100               	movlb	0	; () banked
  4493  013A5C  BFE7               	btfsc	(mode2@dist+1)& (0+255),7,b
  4494  013A5E  D7D8               	goto	l2375
  4495  013A60  0E88               	movlw	136
  4496  013A62  0100               	movlb	0	; () banked
  4497  013A64  5DE6               	subwf	mode2@dist& (0+255),w,b
  4498  013A66  0E13               	movlw	19
  4499  013A68  0100               	movlb	0	; () banked
  4500  013A6A  59E7               	subwfb	(mode2@dist+1)& (0+255),w,b
  4501  013A6C  A0D8               	btfss	status,0,c
  4502  013A6E  D7D0               	goto	l2375
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;main.c: 299: }
  4506                           ;main.c: 300: irobot_stop_motion(0);
  4507                           
  4508                           ; BSR set to: 0
  4509  013A70  0E00               	movlw	0
  4510  013A72  ECB6  F0AE         	call	_irobot_stop_motion
  4511                           
  4512                           ;main.c: 302: if (MXK_Release())
  4513  013A76  EC6F  F0B2         	call	_MXK_Release	;wreg free
  4514  013A7A  0900               	iorlw	0
  4515  013A7C  B4D8               	btfsc	status,2,c
  4516  013A7E  0012               	return	
  4517                           
  4518                           ;main.c: 303: MXK_Dequeue();
  4519  013A80  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  4520  013A84  0012               	return	
  4521  013A86                     __end_of_mode2:
  4522                           	opt stack 0
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           postinc0	equ	0xFEE
  4528                           wreg	equ	0xFE8
  4529                           postdec1	equ	0xFE5
  4530                           fsr1h	equ	0xFE2
  4531                           fsr1l	equ	0xFE1
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function _irobot_move_straight *****************
  4535 ;; Defined at:
  4536 ;;		line 303 in file "Library/iRobotSerial.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  straightSpee    2   25[BANK0 ] short 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;		None
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4550 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;Total ram usage:        2 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    9
  4557 ;; This function calls:
  4558 ;;		_irobot_move
  4559 ;; This function is called by:
  4560 ;;		_move_and_rotate
  4561 ;;		_mode2
  4562 ;;		_mode4
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text7
  4567  016530                     __ptext7:
  4568                           	opt stack 0
  4569  016530                     _irobot_move_straight:
  4570                           	opt stack 20
  4571                           
  4572                           ;iRobotSerial.c: 304: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4573                           
  4574                           ;incstack = 0
  4575  016530  C0D3  F0CA         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4576  016534  C0D4  F0CB         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4577  016538  0E7F               	movlw	127
  4578  01653A  0100               	movlb	0	; () banked
  4579  01653C  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4580  01653E  69CC               	setf	irobot_move@moveTurnRadius& (0+255),b
  4581  016540  0E00               	movlw	0
  4582  016542  EC60  F0A2         	call	_irobot_move
  4583  016546  0012               	return		;funcret
  4584  016548                     __end_of_irobot_move_straight:
  4585                           	opt stack 0
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           postinc0	equ	0xFEE
  4591                           wreg	equ	0xFE8
  4592                           postdec1	equ	0xFE5
  4593                           fsr1h	equ	0xFE2
  4594                           fsr1l	equ	0xFE1
  4595                           status	equ	0xFD8
  4596                           
  4597 ;; *************** function _mode1 *****************
  4598 ;; Defined at:
  4599 ;;		line 214 in file "main.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;		None
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;  moveto          2    2[BANK3 ] int 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  1    wreg      void 
  4606 ;; Registers used:
  4607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4614 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;Total ram usage:        8 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; Hardware stack levels required when called:   17
  4620 ;; This function calls:
  4621 ;;		_ADC_Start
  4622 ;;		_ADC_Voltage
  4623 ;;		_Console_Render
  4624 ;;		_HMI_Render
  4625 ;;		_HMI_SetNumber
  4626 ;;		_MXK_Dequeue
  4627 ;;		_MXK_Release
  4628 ;;		_MXK_SwitchTo
  4629 ;;		_Motor_Move
  4630 ;;		_Motor_Speed
  4631 ;;		___fldiv
  4632 ;;		___fltol
  4633 ;;		_printf
  4634 ;;		_safeToGo
  4635 ;; This function is called by:
  4636 ;;		_main
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text8
  4641  010CCA                     __ptext8:
  4642                           	opt stack 0
  4643  010CCA                     _mode1:
  4644                           	opt stack 13
  4645                           
  4646                           ;main.c: 215: safeToGo();
  4647                           
  4648                           ;incstack = 0
  4649  010CCA  EC00  F0AE         	call	_safeToGo	;wreg free
  4650                           
  4651                           ;main.c: 216: if (MXK_SwitchTo(eMXK_HMI)) {
  4652  010CCE  0E01               	movlw	1
  4653  010CD0  EC41  F0AF         	call	_MXK_SwitchTo
  4654  010CD4  0900               	iorlw	0
  4655  010CD6  B4D8               	btfsc	status,2,c
  4656  010CD8  D029               	goto	l2348
  4657                           
  4658                           ;main.c: 217: printf("%c", (char)35);
  4659  010CDA  0EFB               	movlw	low STR_1
  4660  010CDC  0100               	movlb	0	; () banked
  4661  010CDE  6FCF               	movwf	printf@f& (0+255),b
  4662  010CE0  0EFF               	movlw	high STR_1
  4663  010CE2  0100               	movlb	0	; () banked
  4664  010CE4  6FD0               	movwf	(printf@f+1)& (0+255),b
  4665  010CE6  0E00               	movlw	0
  4666  010CE8  0100               	movlb	0	; () banked
  4667  010CEA  6FD2               	movwf	(?_printf+3)& (0+255),b
  4668  010CEC  0E23               	movlw	35
  4669  010CEE  6FD1               	movwf	(?_printf+2)& (0+255),b
  4670  010CF0  EC7A  F092         	call	_printf	;wreg free
  4671                           
  4672                           ;main.c: 218: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4673  010CF4  0E95               	movlw	low STR_4
  4674  010CF6  0100               	movlb	0	; () banked
  4675  010CF8  6FCF               	movwf	printf@f& (0+255),b
  4676  010CFA  0EFF               	movlw	high STR_4
  4677  010CFC  0100               	movlb	0	; () banked
  4678  010CFE  6FD0               	movwf	(printf@f+1)& (0+255),b
  4679  010D00  C077  F0D1         	movff	_distanceTotal,?_printf+2
  4680  010D04  C078  F0D2         	movff	_distanceTotal+1,?_printf+3
  4681  010D08  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  4682  010D0C  0100               	movlb	0	; () banked
  4683  010D0E  6BD4               	clrf	(?_printf+5)& (0+255),b
  4684  010D10  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  4685  010D14  0100               	movlb	0	; () banked
  4686  010D16  6BD6               	clrf	(?_printf+7)& (0+255),b
  4687  010D18  EC7A  F092         	call	_printf	;wreg free
  4688                           
  4689                           ;main.c: 219: Console_Render();
  4690  010D1C  EC8E  F08F         	call	_Console_Render	;wreg free
  4691                           
  4692                           ;main.c: 220: if (MXK_Release())
  4693  010D20  EC6F  F0B2         	call	_MXK_Release	;wreg free
  4694  010D24  0900               	iorlw	0
  4695  010D26  A4D8               	btfss	status,2,c
  4696                           
  4697                           ;main.c: 221: MXK_Dequeue();
  4698  010D28  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  4699  010D2C                     l2348:
  4700                           
  4701                           ;main.c: 222: }
  4702                           ;main.c: 223: StepRotate = 0;
  4703  010D2C  0E00               	movlw	0
  4704  010D2E  0100               	movlb	0	; () banked
  4705  010D30  6F72               	movwf	(_StepRotate+1)& (0+255),b
  4706  010D32  0E00               	movlw	0
  4707  010D34  6F71               	movwf	_StepRotate& (0+255),b
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;main.c: 224: MinDist = 1000;
  4711  010D36  0E03               	movlw	3
  4712  010D38  0100               	movlb	0	; () banked
  4713  010D3A  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4714  010D3C  0EE8               	movlw	232
  4715  010D3E  6FFB               	movwf	_MinDist& (0+255),b
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;main.c: 225: Stepstomin = 0;
  4719  010D40  0E00               	movlw	0
  4720  010D42  0100               	movlb	0	; () banked
  4721  010D44  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  4722  010D46  0E00               	movlw	0
  4723  010D48  6F6F               	movwf	_Stepstomin& (0+255),b
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;main.c: 226: IRValue = 0;
  4727  010D4A  0E00               	movlw	0
  4728  010D4C  0100               	movlb	0	; () banked
  4729  010D4E  6F6E               	movwf	(_IRValue+1)& (0+255),b
  4730  010D50  0E00               	movlw	0
  4731  010D52  6F6D               	movwf	_IRValue& (0+255),b
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;main.c: 227: TimerX = 8;
  4735  010D54  0E00               	movlw	0
  4736  010D56  0100               	movlb	0	; () banked
  4737  010D58  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4738  010D5A  0E08               	movlw	8
  4739  010D5C  6FF9               	movwf	_TimerX& (0+255),b
  4740                           
  4741                           ;main.c: 228: while (StepRotate < 400) {
  4742  010D5E  D0F9               	goto	u14030
  4743  010D60                     
  4744                           ; BSR set to: 0
  4745                           ;main.c: 229: StepRotate++;
  4746                           
  4747                           ; BSR set to: 0
  4748  010D60  0100               	movlb	0	; () banked
  4749  010D62  4B71               	infsnz	_StepRotate& (0+255),f,b
  4750  010D64  2B72               	incf	(_StepRotate+1)& (0+255),f,b
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;main.c: 230: ADC_Start(&ADC_AN0);
  4754  010D66  0EB5               	movlw	low _ADC_AN0
  4755  010D68  0100               	movlb	0	; () banked
  4756  010D6A  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4757  010D6C  0E00               	movlw	high _ADC_AN0
  4758  010D6E  0100               	movlb	0	; () banked
  4759  010D70  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4760  010D72  ECA1  F0A7         	call	_ADC_Start	;wreg free
  4761                           
  4762                           ;main.c: 231: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4763  010D76  0EB5               	movlw	low _ADC_AN0
  4764  010D78  0100               	movlb	0	; () banked
  4765  010D7A  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4766  010D7C  0E00               	movlw	high _ADC_AN0
  4767  010D7E  0100               	movlb	0	; () banked
  4768  010D80  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4769  010D82  ECB3  F09D         	call	_ADC_Voltage	;wreg free
  4770  010D86  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15594
  4771  010D8A  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15594+1
  4772  010D8E  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15594+2
  4773  010D92  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15594+3
  4774                           
  4775                           ;main.c: 231: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4776  010D96  C3F8  F0BE         	movff	_mode1$15594,___fldiv@a
  4777  010D9A  C3F9  F0BF         	movff	_mode1$15594+1,___fldiv@a+1
  4778  010D9E  C3FA  F0C0         	movff	_mode1$15594+2,___fldiv@a+2
  4779  010DA2  C3FB  F0C1         	movff	_mode1$15594+3,___fldiv@a+3
  4780  010DA6  0E00               	movlw	0
  4781  010DA8  0100               	movlb	0	; () banked
  4782  010DAA  6FBA               	movwf	___fldiv@b& (0+255),b
  4783  010DAC  0E00               	movlw	0
  4784  010DAE  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4785  010DB0  0E6C               	movlw	108
  4786  010DB2  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4787  010DB4  0E42               	movlw	66
  4788  010DB6  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4789  010DB8  EC4F  F088         	call	___fldiv	;wreg free
  4790  010DBC  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4791  010DC0  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4792  010DC4  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4793  010DC8  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4794  010DCC  EC52  F09B         	call	___fltol	;wreg free
  4795  010DD0  C0F3  F06D         	movff	?___fltol,_IRValue
  4796  010DD4  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4797                           
  4798                           ;main.c: 232: if (MXK_SwitchTo(eMXK_HMI)) {
  4799  010DD8  0E01               	movlw	1
  4800  010DDA  EC41  F0AF         	call	_MXK_SwitchTo
  4801  010DDE  0900               	iorlw	0
  4802  010DE0  B4D8               	btfsc	status,2,c
  4803  010DE2  D00E               	goto	l2352
  4804                           
  4805                           ;main.c: 233: HMI_SetNumber(IRValue);
  4806  010DE4  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4807  010DE8  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4808  010DEC  EC6A  F0B1         	call	_HMI_SetNumber	;wreg free
  4809                           
  4810                           ;main.c: 234: HMI_Render();
  4811  010DF0  ECA2  F0AF         	call	_HMI_Render	;wreg free
  4812                           
  4813                           ;main.c: 235: if (MXK_Release())
  4814  010DF4  EC6F  F0B2         	call	_MXK_Release	;wreg free
  4815  010DF8  0900               	iorlw	0
  4816  010DFA  A4D8               	btfss	status,2,c
  4817                           
  4818                           ;main.c: 236: MXK_Dequeue();
  4819  010DFC  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  4820  010E00                     l2352:
  4821                           
  4822                           ;main.c: 237: }
  4823                           ;main.c: 238: if (IRValue < MinDist) {
  4824  010E00  0100               	movlb	0	; () banked
  4825  010E02  51FB               	movf	_MinDist& (0+255),w,b
  4826  010E04  0100               	movlb	0	; () banked
  4827  010E06  5D6D               	subwf	_IRValue& (0+255),w,b
  4828  010E08  0100               	movlb	0	; () banked
  4829  010E0A  516E               	movf	(_IRValue+1)& (0+255),w,b
  4830  010E0C  0A80               	xorlw	128
  4831  010E0E  0103               	movlb	3	; () banked
  4832  010E10  6FF4               	movwf	??_mode1& (0+255),b
  4833  010E12  0100               	movlb	0	; () banked
  4834  010E14  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4835  010E16  0A80               	xorlw	128
  4836  010E18  0103               	movlb	3	; () banked
  4837  010E1A  59F4               	subwfb	??_mode1& (0+255),w,b
  4838  010E1C  B0D8               	btfsc	status,0,c
  4839  010E1E  D008               	goto	l2353
  4840                           
  4841                           ; BSR set to: 3
  4842                           ;main.c: 239: MinDist = IRValue;
  4843  010E20  C06D  F0FB         	movff	_IRValue,_MinDist
  4844  010E24  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  4845                           
  4846                           ;main.c: 240: Stepstomin = StepRotate;
  4847  010E28  C071  F06F         	movff	_StepRotate,_Stepstomin
  4848  010E2C  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  4849  010E30                     l2353:
  4850                           
  4851                           ; BSR set to: 3
  4852                           ;main.c: 241: }
  4853                           ;main.c: 242: if (MXK_SwitchTo(eMXK_Motor)) {
  4854                           
  4855                           ; BSR set to: 3
  4856  010E30  0E08               	movlw	8
  4857  010E32  EC41  F0AF         	call	_MXK_SwitchTo
  4858  010E36  0900               	iorlw	0
  4859  010E38  B4D8               	btfsc	status,2,c
  4860  010E3A  D020               	goto	l2355
  4861                           
  4862                           ;main.c: 243: Motor_Speed(&Stepper, (50));
  4863  010E3C  0EAF               	movlw	low _Stepper
  4864  010E3E  0100               	movlb	0	; () banked
  4865  010E40  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  4866  010E42  0E00               	movlw	high _Stepper
  4867  010E44  0100               	movlb	0	; () banked
  4868  010E46  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4869  010E48  0E00               	movlw	0
  4870  010E4A  0100               	movlb	0	; () banked
  4871  010E4C  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4872  010E4E  0E32               	movlw	50
  4873  010E50  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  4874  010E52  EC55  F0B1         	call	_Motor_Speed	;wreg free
  4875                           
  4876                           ;main.c: 244: Motor_Move(&Stepper, 1);
  4877  010E56  0EAF               	movlw	low _Stepper
  4878  010E58  0100               	movlb	0	; () banked
  4879  010E5A  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  4880  010E5C  0E00               	movlw	high _Stepper
  4881  010E5E  0100               	movlb	0	; () banked
  4882  010E60  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4883  010E62  0E00               	movlw	0
  4884  010E64  0100               	movlb	0	; () banked
  4885  010E66  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4886  010E68  0E01               	movlw	1
  4887  010E6A  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  4888  010E6C  EC59  F0B0         	call	_Motor_Move	;wreg free
  4889                           
  4890                           ;main.c: 245: if (MXK_Release())
  4891  010E70  EC6F  F0B2         	call	_MXK_Release	;wreg free
  4892  010E74  0900               	iorlw	0
  4893  010E76  A4D8               	btfss	status,2,c
  4894                           
  4895                           ;main.c: 246: MXK_Dequeue();
  4896  010E78  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  4897  010E7C                     l2355:
  4898                           
  4899                           ;main.c: 247: }
  4900                           ;main.c: 248: TimerX = 10;
  4901  010E7C  0E00               	movlw	0
  4902  010E7E  0100               	movlb	0	; () banked
  4903  010E80  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4904  010E82  0E0A               	movlw	10
  4905  010E84  6FF9               	movwf	_TimerX& (0+255),b
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;main.c: 249: if (TimerX > 0) {
  4909  010E86  0100               	movlb	0	; () banked
  4910  010E88  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4911  010E8A  D063               	goto	u14030
  4912  010E8C  0100               	movlb	0	; () banked
  4913  010E8E  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4914  010E90  E156               	bnz	l16461
  4915  010E92  0100               	movlb	0	; () banked
  4916  010E94  05F9               	decf	_TimerX& (0+255),w,b
  4917  010E96  B0D8               	btfsc	status,0,c
  4918  010E98  D052               	goto	l2357
  4919  010E9A  D05B               	goto	u14030
  4920  010E9C                     l16443:
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;main.c: 251: ADC_Start(&ADC_AN0);
  4924  010E9C  0EB5               	movlw	low _ADC_AN0
  4925  010E9E  0100               	movlb	0	; () banked
  4926  010EA0  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4927  010EA2  0E00               	movlw	high _ADC_AN0
  4928  010EA4  0100               	movlb	0	; () banked
  4929  010EA6  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4930  010EA8  ECA1  F0A7         	call	_ADC_Start	;wreg free
  4931                           
  4932                           ;main.c: 252: if (MXK_SwitchTo(eMXK_HMI)) {
  4933  010EAC  0E01               	movlw	1
  4934  010EAE  EC41  F0AF         	call	_MXK_SwitchTo
  4935  010EB2  0900               	iorlw	0
  4936  010EB4  B4D8               	btfsc	status,2,c
  4937  010EB6  D00E               	goto	l2360
  4938                           
  4939                           ;main.c: 253: HMI_SetNumber(IRValue);
  4940  010EB8  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4941  010EBC  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4942  010EC0  EC6A  F0B1         	call	_HMI_SetNumber	;wreg free
  4943                           
  4944                           ;main.c: 254: HMI_Render();
  4945  010EC4  ECA2  F0AF         	call	_HMI_Render	;wreg free
  4946                           
  4947                           ;main.c: 255: if (MXK_Release())
  4948  010EC8  EC6F  F0B2         	call	_MXK_Release	;wreg free
  4949  010ECC  0900               	iorlw	0
  4950  010ECE  A4D8               	btfss	status,2,c
  4951                           
  4952                           ;main.c: 256: MXK_Dequeue();
  4953  010ED0  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  4954  010ED4                     l2360:
  4955                           
  4956                           ;main.c: 257: }
  4957                           ;main.c: 258: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4958  010ED4  0EB5               	movlw	low _ADC_AN0
  4959  010ED6  0100               	movlb	0	; () banked
  4960  010ED8  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4961  010EDA  0E00               	movlw	high _ADC_AN0
  4962  010EDC  0100               	movlb	0	; () banked
  4963  010EDE  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4964  010EE0  ECB3  F09D         	call	_ADC_Voltage	;wreg free
  4965  010EE4  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15594
  4966  010EE8  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15594+1
  4967  010EEC  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15594+2
  4968  010EF0  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15594+3
  4969                           
  4970                           ;main.c: 257: }
  4971                           ;main.c: 258: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4972  010EF4  C3F8  F0BE         	movff	_mode1$15594,___fldiv@a
  4973  010EF8  C3F9  F0BF         	movff	_mode1$15594+1,___fldiv@a+1
  4974  010EFC  C3FA  F0C0         	movff	_mode1$15594+2,___fldiv@a+2
  4975  010F00  C3FB  F0C1         	movff	_mode1$15594+3,___fldiv@a+3
  4976  010F04  0E00               	movlw	0
  4977  010F06  0100               	movlb	0	; () banked
  4978  010F08  6FBA               	movwf	___fldiv@b& (0+255),b
  4979  010F0A  0E00               	movlw	0
  4980  010F0C  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4981  010F0E  0E6C               	movlw	108
  4982  010F10  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4983  010F12  0E42               	movlw	66
  4984  010F14  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4985  010F16  EC4F  F088         	call	___fldiv	;wreg free
  4986  010F1A  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4987  010F1E  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4988  010F22  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4989  010F26  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4990  010F2A  EC52  F09B         	call	___fltol	;wreg free
  4991  010F2E  C0F3  F06D         	movff	?___fltol,_IRValue
  4992  010F32  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4993                           
  4994                           ;main.c: 259: TimerX--;
  4995  010F36  0100               	movlb	0	; () banked
  4996  010F38  07F9               	decf	_TimerX& (0+255),f,b
  4997  010F3A  A0D8               	btfss	status,0,c
  4998  010F3C  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4999  010F3E                     l2357:
  5000  010F3E                     l16461:
  5001                           
  5002                           ; BSR set to: 0
  5003  010F3E  0100               	movlb	0	; () banked
  5004  010F40  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5005  010F42  D007               	goto	u14030
  5006  010F44  0100               	movlb	0	; () banked
  5007  010F46  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5008  010F48  E1A9               	bnz	l16443
  5009  010F4A  0100               	movlb	0	; () banked
  5010  010F4C  05F9               	decf	_TimerX& (0+255),w,b
  5011  010F4E  B0D8               	btfsc	status,0,c
  5012  010F50  D7A5               	goto	l2358
  5013  010F52                     u14030:
  5014                           
  5015                           ; BSR set to: 0
  5016                           
  5017                           ; BSR set to: 0
  5018                           
  5019                           ; BSR set to: 0
  5020                           
  5021                           ; BSR set to: 0
  5022  010F52  0100               	movlb	0	; () banked
  5023  010F54  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  5024  010F56  D704               	goto	l2350
  5025  010F58  0E90               	movlw	144
  5026  010F5A  0100               	movlb	0	; () banked
  5027  010F5C  5D71               	subwf	_StepRotate& (0+255),w,b
  5028  010F5E  0E01               	movlw	1
  5029  010F60  0100               	movlb	0	; () banked
  5030  010F62  5972               	subwfb	(_StepRotate+1)& (0+255),w,b
  5031  010F64  A0D8               	btfss	status,0,c
  5032  010F66  D6FC               	goto	l2350
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;main.c: 260: }
  5036                           ;main.c: 261: }
  5037                           ;main.c: 262: }
  5038                           ;main.c: 263: if (MXK_SwitchTo(eMXK_Motor)) {
  5039                           
  5040                           ; BSR set to: 0
  5041  010F68  0E08               	movlw	8
  5042  010F6A  EC41  F0AF         	call	_MXK_SwitchTo
  5043  010F6E  0900               	iorlw	0
  5044  010F70  B4D8               	btfsc	status,2,c
  5045  010F72  D08A               	goto	l2365
  5046                           
  5047                           ;main.c: 264: Motor_Speed(&Stepper, (50));
  5048  010F74  0EAF               	movlw	low _Stepper
  5049  010F76  0100               	movlb	0	; () banked
  5050  010F78  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  5051  010F7A  0E00               	movlw	high _Stepper
  5052  010F7C  0100               	movlb	0	; () banked
  5053  010F7E  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5054  010F80  0E00               	movlw	0
  5055  010F82  0100               	movlb	0	; () banked
  5056  010F84  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5057  010F86  0E32               	movlw	50
  5058  010F88  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  5059  010F8A  EC55  F0B1         	call	_Motor_Speed	;wreg free
  5060                           
  5061                           ;main.c: 265: int moveto = 400 - Stepstomin;
  5062  010F8E  C06F  F3F4         	movff	_Stepstomin,??_mode1
  5063  010F92  C070  F3F5         	movff	_Stepstomin+1,??_mode1+1
  5064  010F96  0103               	movlb	3	; () banked
  5065  010F98  1FF4               	comf	??_mode1& (0+255),f,b
  5066  010F9A  1FF5               	comf	(??_mode1+1)& (0+255),f,b
  5067  010F9C  4BF4               	infsnz	??_mode1& (0+255),f,b
  5068  010F9E  2BF5               	incf	(??_mode1+1)& (0+255),f,b
  5069  010FA0  0E90               	movlw	144
  5070  010FA2  0103               	movlb	3	; () banked
  5071  010FA4  25F4               	addwf	??_mode1& (0+255),w,b
  5072  010FA6  0103               	movlb	3	; () banked
  5073  010FA8  6FF6               	movwf	mode1@moveto& (0+255),b
  5074  010FAA  0E01               	movlw	1
  5075  010FAC  0103               	movlb	3	; () banked
  5076  010FAE  21F5               	addwfc	(??_mode1+1)& (0+255),w,b
  5077  010FB0  0103               	movlb	3	; () banked
  5078  010FB2  6FF7               	movwf	(mode1@moveto+1)& (0+255),b
  5079                           
  5080                           ; BSR set to: 3
  5081                           ;main.c: 267: Motor_Move(&Stepper, (-moveto));
  5082  010FB4  0EAF               	movlw	low _Stepper
  5083  010FB6  0100               	movlb	0	; () banked
  5084  010FB8  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  5085  010FBA  0E00               	movlw	high _Stepper
  5086  010FBC  0100               	movlb	0	; () banked
  5087  010FBE  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5088  010FC0  C3F6  F3F4         	movff	mode1@moveto,??_mode1
  5089  010FC4  C3F7  F3F5         	movff	mode1@moveto+1,??_mode1+1
  5090  010FC8  0103               	movlb	3	; () banked
  5091  010FCA  1FF4               	comf	??_mode1& (0+255),f,b
  5092  010FCC  1FF5               	comf	(??_mode1+1)& (0+255),f,b
  5093  010FCE  4BF4               	infsnz	??_mode1& (0+255),f,b
  5094  010FD0  2BF5               	incf	(??_mode1+1)& (0+255),f,b
  5095  010FD2  C3F4  F0BF         	movff	??_mode1,Motor_Move@pDelta
  5096  010FD6  C3F5  F0C0         	movff	??_mode1+1,Motor_Move@pDelta+1
  5097  010FDA  EC59  F0B0         	call	_Motor_Move	;wreg free
  5098                           
  5099                           ;main.c: 268: if (MXK_Release())
  5100  010FDE  EC6F  F0B2         	call	_MXK_Release	;wreg free
  5101  010FE2  0900               	iorlw	0
  5102  010FE4  B4D8               	btfsc	status,2,c
  5103  010FE6  D050               	goto	l2365
  5104                           
  5105                           ;main.c: 269: MXK_Dequeue();
  5106  010FE8  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  5107                           
  5108                           ;main.c: 270: }
  5109                           ;main.c: 271: while (Stepper.mDelta > 0) {
  5110  010FEC  D04D               	goto	l2365
  5111  010FEE                     l16477:
  5112                           
  5113                           ;main.c: 272: ADC_Start(&ADC_AN0);
  5114  010FEE  0EB5               	movlw	low _ADC_AN0
  5115  010FF0  0100               	movlb	0	; () banked
  5116  010FF2  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5117  010FF4  0E00               	movlw	high _ADC_AN0
  5118  010FF6  0100               	movlb	0	; () banked
  5119  010FF8  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5120  010FFA  ECA1  F0A7         	call	_ADC_Start	;wreg free
  5121                           
  5122                           ;main.c: 273: if (MXK_SwitchTo(eMXK_HMI)) {
  5123  010FFE  0E01               	movlw	1
  5124  011000  EC41  F0AF         	call	_MXK_SwitchTo
  5125  011004  0900               	iorlw	0
  5126  011006  B4D8               	btfsc	status,2,c
  5127  011008  D00E               	goto	l2368
  5128                           
  5129                           ;main.c: 274: HMI_SetNumber(IRValue);
  5130  01100A  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5131  01100E  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5132  011012  EC6A  F0B1         	call	_HMI_SetNumber	;wreg free
  5133                           
  5134                           ;main.c: 275: HMI_Render();
  5135  011016  ECA2  F0AF         	call	_HMI_Render	;wreg free
  5136                           
  5137                           ;main.c: 276: if (MXK_Release())
  5138  01101A  EC6F  F0B2         	call	_MXK_Release	;wreg free
  5139  01101E  0900               	iorlw	0
  5140  011020  A4D8               	btfss	status,2,c
  5141                           
  5142                           ;main.c: 277: MXK_Dequeue();
  5143  011022  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
  5144  011026                     l2368:
  5145                           
  5146                           ;main.c: 278: }
  5147                           ;main.c: 279: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5148  011026  0EB5               	movlw	low _ADC_AN0
  5149  011028  0100               	movlb	0	; () banked
  5150  01102A  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5151  01102C  0E00               	movlw	high _ADC_AN0
  5152  01102E  0100               	movlb	0	; () banked
  5153  011030  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5154  011032  ECB3  F09D         	call	_ADC_Voltage	;wreg free
  5155  011036  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15594
  5156  01103A  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15594+1
  5157  01103E  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15594+2
  5158  011042  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15594+3
  5159                           
  5160                           ;main.c: 278: }
  5161                           ;main.c: 279: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5162  011046  C3F8  F0BE         	movff	_mode1$15594,___fldiv@a
  5163  01104A  C3F9  F0BF         	movff	_mode1$15594+1,___fldiv@a+1
  5164  01104E  C3FA  F0C0         	movff	_mode1$15594+2,___fldiv@a+2
  5165  011052  C3FB  F0C1         	movff	_mode1$15594+3,___fldiv@a+3
  5166  011056  0E00               	movlw	0
  5167  011058  0100               	movlb	0	; () banked
  5168  01105A  6FBA               	movwf	___fldiv@b& (0+255),b
  5169  01105C  0E00               	movlw	0
  5170  01105E  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5171  011060  0E6C               	movlw	108
  5172  011062  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5173  011064  0E42               	movlw	66
  5174  011066  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5175  011068  EC4F  F088         	call	___fldiv	;wreg free
  5176  01106C  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5177  011070  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5178  011074  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5179  011078  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5180  01107C  EC52  F09B         	call	___fltol	;wreg free
  5181  011080  C0F3  F06D         	movff	?___fltol,_IRValue
  5182  011084  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5183  011088                     l2365:
  5184  011088  0100               	movlb	0	; () banked
  5185  01108A  BFB0               	btfsc	(_Stepper+1)& (0+255),7,b
  5186  01108C  0012               	return	
  5187  01108E  0100               	movlb	0	; () banked
  5188  011090  51B0               	movf	(_Stepper+1)& (0+255),w,b
  5189  011092  E1AD               	bnz	l16477
  5190  011094  0100               	movlb	0	; () banked
  5191  011096  05AF               	decf	_Stepper& (0+255),w,b
  5192  011098  A0D8               	btfss	status,0,c
  5193  01109A  0012               	return	
  5194  01109C  D7A8               	goto	l2366
  5195  01109E                     __end_of_mode1:
  5196                           	opt stack 0
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           postinc0	equ	0xFEE
  5202                           wreg	equ	0xFE8
  5203                           postdec1	equ	0xFE5
  5204                           fsr1h	equ	0xFE2
  5205                           fsr1l	equ	0xFE1
  5206                           status	equ	0xFD8
  5207                           
  5208 ;; *************** function _safeToGo *****************
  5209 ;; Defined at:
  5210 ;;		line 122 in file "main.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;		None
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  1    wreg      void 
  5217 ;; Registers used:
  5218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;Total ram usage:        0 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:   16
  5231 ;; This function calls:
  5232 ;;		_HMI_Poll
  5233 ;;		_irobot_song_play
  5234 ;;		_irobot_stop_motion
  5235 ;;		_update_angle
  5236 ;;		_update_bump_and_cliff
  5237 ;;		_update_distance
  5238 ;; This function is called by:
  5239 ;;		_mode1
  5240 ;;		_mode2
  5241 ;;		_mode3
  5242 ;;		_mode4
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text9
  5247  015C00                     __ptext9:
  5248                           	opt stack 0
  5249  015C00                     _safeToGo:
  5250                           	opt stack 13
  5251                           
  5252                           ;main.c: 123: update_bump_and_cliff();
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;incstack = 0
  5256  015C00  EC3C  F0B0         	call	_update_bump_and_cliff	;wreg free
  5257                           
  5258                           ;main.c: 124: update_distance();
  5259  015C04  EC17  F0B3         	call	_update_distance	;wreg free
  5260                           
  5261                           ;main.c: 125: update_angle();
  5262  015C08  EC20  F0B3         	call	_update_angle	;wreg free
  5263                           
  5264                           ;main.c: 126: if (iRBumpLeft || iRBumpRight) {
  5265  015C0C  0100               	movlb	0	; () banked
  5266  015C0E  5187               	movf	_iRBumpLeft& (0+255),w,b
  5267  015C10  A4D8               	btfss	status,2,c
  5268  015C12  D004               	goto	u11370
  5269                           
  5270                           ; BSR set to: 0
  5271  015C14  0100               	movlb	0	; () banked
  5272  015C16  5188               	movf	_iRBumpRight& (0+255),w,b
  5273  015C18  B4D8               	btfsc	status,2,c
  5274  015C1A  D006               	goto	l2311
  5275  015C1C                     u11370:
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;main.c: 127: irobot_song_play(0);
  5279                           
  5280                           ; BSR set to: 0
  5281  015C1C  0E00               	movlw	0
  5282  015C1E  EC03  F0B3         	call	_irobot_song_play
  5283                           
  5284                           ;main.c: 128: irobot_stop_motion(0);
  5285  015C22  0E00               	movlw	0
  5286  015C24  ECB6  F0AE         	call	_irobot_stop_motion
  5287  015C28                     l2311:
  5288                           
  5289                           ;main.c: 129: }
  5290                           ;main.c: 130: if (angleTotal > 83) {
  5291  015C28  0100               	movlb	0	; () banked
  5292  015C2A  BF76               	btfsc	(_angleTotal+1)& (0+255),7,b
  5293  015C2C  D00B               	goto	l2314
  5294  015C2E  0100               	movlb	0	; () banked
  5295  015C30  5176               	movf	(_angleTotal+1)& (0+255),w,b
  5296  015C32  E105               	bnz	u11380
  5297  015C34  0E54               	movlw	84
  5298  015C36  0100               	movlb	0	; () banked
  5299  015C38  5D75               	subwf	_angleTotal& (0+255),w,b
  5300  015C3A  A0D8               	btfss	status,0,c
  5301  015C3C  D003               	goto	l2314
  5302  015C3E                     u11380:
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;main.c: 131: irobot_stop_motion(0);
  5306  015C3E  0E00               	movlw	0
  5307  015C40  ECB6  F0AE         	call	_irobot_stop_motion
  5308  015C44                     l2314:
  5309                           
  5310                           ;main.c: 132: }
  5311                           ;main.c: 133: HMI_Poll();
  5312  015C44  EC05  F0AA         	call	_HMI_Poll	;wreg free
  5313  015C48  0012               	return		;funcret
  5314  015C4A                     __end_of_safeToGo:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           postinc0	equ	0xFEE
  5321                           wreg	equ	0xFE8
  5322                           postdec1	equ	0xFE5
  5323                           fsr1h	equ	0xFE2
  5324                           fsr1l	equ	0xFE1
  5325                           status	equ	0xFD8
  5326                           
  5327 ;; *************** function _update_distance *****************
  5328 ;; Defined at:
  5329 ;;		line 315 in file "Library/iRobotSerial.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;Total ram usage:        0 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:   10
  5350 ;; This function calls:
  5351 ;;		_irobot_query_and_update
  5352 ;; This function is called by:
  5353 ;;		_safeToGo
  5354 ;;		_move_and_rotate
  5355 ;;		_mode2
  5356 ;;		_mode4
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text10
  5361  01662E                     __ptext10:
  5362                           	opt stack 0
  5363  01662E                     _update_distance:
  5364                           	opt stack 19
  5365                           
  5366                           ;iRobotSerial.c: 316: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5367                           
  5368                           ;incstack = 0
  5369  01662E  0E00               	movlw	0
  5370  016630  0100               	movlb	0	; () banked
  5371  016632  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5372  016634  0E13               	movlw	19
  5373  016636  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5374  016638  0E01               	movlw	1
  5375  01663A  ECD3  F095         	call	_irobot_query_and_update
  5376  01663E  0012               	return		;funcret
  5377  016640                     __end_of_update_distance:
  5378                           	opt stack 0
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           postinc0	equ	0xFEE
  5384                           wreg	equ	0xFE8
  5385                           postdec1	equ	0xFE5
  5386                           fsr1h	equ	0xFE2
  5387                           fsr1l	equ	0xFE1
  5388                           status	equ	0xFD8
  5389                           
  5390 ;; *************** function _update_bump_and_cliff *****************
  5391 ;; Defined at:
  5392 ;;		line 308 in file "Library/iRobotSerial.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;		None
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;		None
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  1    wreg      void 
  5399 ;; Registers used:
  5400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;Total ram usage:        0 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:   10
  5413 ;; This function calls:
  5414 ;;		_irobot_query_and_update
  5415 ;; This function is called by:
  5416 ;;		_safeToGo
  5417 ;;		_mode4
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text11
  5422  016078                     __ptext11:
  5423                           	opt stack 0
  5424  016078                     _update_bump_and_cliff:
  5425                           	opt stack 19
  5426                           
  5427                           ;iRobotSerial.c: 309: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5428                           ;iRobotSerial.c: 310: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5429                           ;iRobotSerial.c: 311: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5430                           
  5431                           ;incstack = 0
  5432  016078  0E00               	movlw	0
  5433  01607A  0100               	movlb	0	; () banked
  5434  01607C  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5435  01607E  0E07               	movlw	7
  5436  016080  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5437  016082  0E00               	movlw	0
  5438  016084  0100               	movlb	0	; () banked
  5439  016086  6FC3               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5440  016088  0E09               	movlw	9
  5441  01608A  6FC2               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5442  01608C  0E00               	movlw	0
  5443  01608E  0100               	movlb	0	; () banked
  5444  016090  6FC5               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5445  016092  0E0A               	movlw	10
  5446  016094  6FC4               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5447  016096  0E00               	movlw	0
  5448  016098  0100               	movlb	0	; () banked
  5449  01609A  6FC7               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5450  01609C  0E0B               	movlw	11
  5451  01609E  6FC6               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5452  0160A0  0E00               	movlw	0
  5453  0160A2  0100               	movlb	0	; () banked
  5454  0160A4  6FC9               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5455  0160A6  0E0C               	movlw	12
  5456  0160A8  6FC8               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5457  0160AA  0E05               	movlw	5
  5458  0160AC  ECD3  F095         	call	_irobot_query_and_update
  5459  0160B0  0012               	return		;funcret
  5460  0160B2                     __end_of_update_bump_and_cliff:
  5461                           	opt stack 0
  5462                           tblptru	equ	0xFF8
  5463                           tblptrh	equ	0xFF7
  5464                           tblptrl	equ	0xFF6
  5465                           tablat	equ	0xFF5
  5466                           postinc0	equ	0xFEE
  5467                           wreg	equ	0xFE8
  5468                           postdec1	equ	0xFE5
  5469                           fsr1h	equ	0xFE2
  5470                           fsr1l	equ	0xFE1
  5471                           status	equ	0xFD8
  5472                           
  5473 ;; *************** function _update_angle *****************
  5474 ;; Defined at:
  5475 ;;		line 320 in file "Library/iRobotSerial.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  1    wreg      void 
  5482 ;; Registers used:
  5483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;Total ram usage:        0 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:   10
  5496 ;; This function calls:
  5497 ;;		_irobot_query_and_update
  5498 ;; This function is called by:
  5499 ;;		_safeToGo
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text12
  5504  016640                     __ptext12:
  5505                           	opt stack 0
  5506  016640                     _update_angle:
  5507                           	opt stack 18
  5508                           
  5509                           ;iRobotSerial.c: 321: irobot_query_and_update(1, iR_PKT_ANGLE);
  5510                           
  5511                           ;incstack = 0
  5512  016640  0E00               	movlw	0
  5513  016642  0100               	movlb	0	; () banked
  5514  016644  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5515  016646  0E14               	movlw	20
  5516  016648  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5517  01664A  0E01               	movlw	1
  5518  01664C  ECD3  F095         	call	_irobot_query_and_update
  5519  016650  0012               	return		;funcret
  5520  016652                     __end_of_update_angle:
  5521                           	opt stack 0
  5522                           tblptru	equ	0xFF8
  5523                           tblptrh	equ	0xFF7
  5524                           tblptrl	equ	0xFF6
  5525                           tablat	equ	0xFF5
  5526                           postinc0	equ	0xFEE
  5527                           wreg	equ	0xFE8
  5528                           postdec1	equ	0xFE5
  5529                           fsr1h	equ	0xFE2
  5530                           fsr1l	equ	0xFE1
  5531                           status	equ	0xFD8
  5532                           
  5533 ;; *************** function _irobot_query_and_update *****************
  5534 ;; Defined at:
  5535 ;;		line 130 in file "Library/iRobotSerial.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  numberOfPack    1    wreg     unsigned char 
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5540 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5541 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5542 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5543 ;;		 -> ?_irobot_query_and_update(1), 
  5544 ;;  i               1   28[BANK0 ] unsigned char 
  5545 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5546 ;;  j               1   26[BANK0 ] unsigned char 
  5547 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5548 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  1    wreg      void 
  5551 ;; Registers used:
  5552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5558 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;Total ram usage:      535 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    9
  5565 ;; This function calls:
  5566 ;;		_eusart_getch
  5567 ;;		_eusart_putch
  5568 ;;		_get_packet_size
  5569 ;;		_rx_assign
  5570 ;; This function is called by:
  5571 ;;		_update_bump_and_cliff
  5572 ;;		_update_distance
  5573 ;;		_update_angle
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text13
  5578  012BA6                     __ptext13:
  5579                           	opt stack 0
  5580  012BA6                     _irobot_query_and_update:
  5581                           	opt stack 19
  5582                           
  5583                           ;incstack = 0
  5584                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5585  012BA6  0100               	movlb	0	; () banked
  5586  012BA8  6FD2               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5587                           
  5588                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5589  012BAA  0E00               	movlw	0
  5590  012BAC  0100               	movlb	0	; () banked
  5591  012BAE  6FD1               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5592  012BB0  0E00               	movlw	0
  5593  012BB2  0100               	movlb	0	; () banked
  5594  012BB4  6FD5               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5595                           
  5596                           ;iRobotSerial.c: 133: va_list packetIDs;
  5597                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  5598  012BB6  0EC0               	movlw	low ?_irobot_query_and_update
  5599  012BB8  0100               	movlb	0	; () banked
  5600  012BBA  6FCF               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5601  012BBC  0E00               	movlw	high ?_irobot_query_and_update
  5602  012BBE  0100               	movlb	0	; () banked
  5603  012BC0  6FD0               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  5607  012BC2  0E95               	movlw	149
  5608  012BC4  EC40  F0B3         	call	_eusart_putch
  5609                           
  5610                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  5611  012BC8  0100               	movlb	0	; () banked
  5612  012BCA  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5613  012BCC  EC40  F0B3         	call	_eusart_putch
  5614                           
  5615                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++){
  5616  012BD0  0E00               	movlw	0
  5617  012BD2  0100               	movlb	0	; () banked
  5618  012BD4  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5619  012BD6  D023               	goto	l2091
  5620  012BD8                     
  5621                           ; BSR set to: 0
  5622                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5623                           
  5624                           ; BSR set to: 0
  5625  012BD8  C0CF  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5626  012BDC  C0D0  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5627  012BE0  50DF               	movf	indf2,w,c
  5628  012BE2  0100               	movlb	0	; () banked
  5629  012BE4  6FD3               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5630                           
  5631                           ; BSR set to: 0
  5632  012BE6  0E02               	movlw	2
  5633  012BE8  0100               	movlb	0	; () banked
  5634  012BEA  27CF               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5635  012BEC  0E00               	movlw	0
  5636  012BEE  23D0               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  5640  012BF0  0100               	movlb	0	; () banked
  5641  012BF2  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5642  012BF4  EC82  F0AB         	call	_get_packet_size
  5643  012BF8  0100               	movlb	0	; () banked
  5644  012BFA  27D1               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  5648  012BFC  0100               	movlb	0	; () banked
  5649  012BFE  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5650  012C00  0D01               	mullw	1
  5651  012C02  0E00               	movlw	low irobot_query_and_update@TXArray
  5652  012C04  24F3               	addwf	prodl,w,c
  5653  012C06  6ED9               	movwf	fsr2l,c
  5654  012C08  0E02               	movlw	high irobot_query_and_update@TXArray
  5655  012C0A  20F4               	addwfc	prodh,w,c
  5656  012C0C  6EDA               	movwf	fsr2h,c
  5657  012C0E  C0D3  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  5661  012C12  0100               	movlb	0	; () banked
  5662  012C14  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5663  012C16  EC40  F0B3         	call	_eusart_putch
  5664  012C1A  0100               	movlb	0	; () banked
  5665  012C1C  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5666  012C1E                     l2091:
  5667                           
  5668                           ; BSR set to: 0
  5669                           
  5670                           ; BSR set to: 0
  5671  012C1E  0100               	movlb	0	; () banked
  5672  012C20  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5673  012C22  0100               	movlb	0	; () banked
  5674  012C24  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5675  012C26  A0D8               	btfss	status,0,c
  5676  012C28  D7D7               	goto	l2092
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;iRobotSerial.c: 142: }
  5680                           ;iRobotSerial.c: 143: ;
  5681                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++){RXArray[i] = eusart_getch();}
  5682                           
  5683                           ; BSR set to: 0
  5684  012C2A  0E00               	movlw	0
  5685  012C2C  0100               	movlb	0	; () banked
  5686  012C2E  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5687  012C30  D00E               	goto	l2094
  5688  012C32                     
  5689                           ; BSR set to: 0
  5690                           
  5691                           ; BSR set to: 0
  5692  012C32  0100               	movlb	0	; () banked
  5693  012C34  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5694  012C36  0D01               	mullw	1
  5695  012C38  0E00               	movlw	low irobot_query_and_update@RXArray
  5696  012C3A  24F3               	addwf	prodl,w,c
  5697  012C3C  6ED9               	movwf	fsr2l,c
  5698  012C3E  0E01               	movlw	high irobot_query_and_update@RXArray
  5699  012C40  20F4               	addwfc	prodh,w,c
  5700  012C42  6EDA               	movwf	fsr2h,c
  5701  012C44  EC83  F0B3         	call	_eusart_getch	;wreg free
  5702  012C48  6EDF               	movwf	indf2,c
  5703  012C4A  0100               	movlb	0	; () banked
  5704  012C4C  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5705  012C4E                     l2094:
  5706                           
  5707                           ; BSR set to: 0
  5708                           
  5709                           ; BSR set to: 0
  5710  012C4E  0100               	movlb	0	; () banked
  5711  012C50  51D1               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5712  012C52  0100               	movlb	0	; () banked
  5713  012C54  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5714  012C56  A0D8               	btfss	status,0,c
  5715  012C58  D7EC               	goto	l2095
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++){
  5719                           
  5720                           ; BSR set to: 0
  5721  012C5A  0E00               	movlw	0
  5722  012C5C  0100               	movlb	0	; () banked
  5723  012C5E  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5724  012C60  D05E               	goto	l2097
  5725  012C62                     l2098:
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++){
  5729  012C62  C0D5  F0D4         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5730  012C66  D021               	goto	l2099
  5731  012C68                     
  5732                           ; BSR set to: 0
  5733                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5734                           
  5735                           ; BSR set to: 0
  5736  012C68  0100               	movlb	0	; () banked
  5737  012C6A  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5738  012C6C  0D01               	mullw	1
  5739  012C6E  0E00               	movlw	low irobot_query_and_update@RXArray
  5740  012C70  24F3               	addwf	prodl,w,c
  5741  012C72  6ED9               	movwf	fsr2l,c
  5742  012C74  0E01               	movlw	high irobot_query_and_update@RXArray
  5743  012C76  20F4               	addwfc	prodh,w,c
  5744  012C78  6EDA               	movwf	fsr2h,c
  5745  012C7A  50DF               	movf	indf2,w,c
  5746  012C7C  0100               	movlb	0	; () banked
  5747  012C7E  6FBB               	movwf	rx_assign@packetIDValue& (0+255),b
  5748  012C80  0100               	movlb	0	; () banked
  5749  012C82  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5750  012C84  0800               	sublw	0
  5751  012C86  0100               	movlb	0	; () banked
  5752  012C88  25D4               	addwf	irobot_query_and_update@j& (0+255),w,b
  5753  012C8A  0100               	movlb	0	; () banked
  5754  012C8C  6FBC               	movwf	rx_assign@byteNumber& (0+255),b
  5755  012C8E  0100               	movlb	0	; () banked
  5756  012C90  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5757  012C92  0D01               	mullw	1
  5758  012C94  0E00               	movlw	low irobot_query_and_update@TXArray
  5759  012C96  24F3               	addwf	prodl,w,c
  5760  012C98  6ED9               	movwf	fsr2l,c
  5761  012C9A  0E02               	movlw	high irobot_query_and_update@TXArray
  5762  012C9C  20F4               	addwfc	prodh,w,c
  5763  012C9E  6EDA               	movwf	fsr2h,c
  5764  012CA0  50DF               	movf	indf2,w,c
  5765  012CA2  EC58  F09C         	call	_rx_assign
  5766  012CA6  0100               	movlb	0	; () banked
  5767  012CA8  2BD4               	incf	irobot_query_and_update@j& (0+255),f,b
  5768  012CAA                     l2099:
  5769                           
  5770                           ; BSR set to: 0
  5771                           
  5772                           ; BSR set to: 0
  5773  012CAA  0100               	movlb	0	; () banked
  5774  012CAC  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5775  012CAE  0D01               	mullw	1
  5776  012CB0  0E00               	movlw	low irobot_query_and_update@TXArray
  5777  012CB2  24F3               	addwf	prodl,w,c
  5778  012CB4  6ED9               	movwf	fsr2l,c
  5779  012CB6  0E02               	movlw	high irobot_query_and_update@TXArray
  5780  012CB8  20F4               	addwfc	prodh,w,c
  5781  012CBA  6EDA               	movwf	fsr2h,c
  5782  012CBC  50DF               	movf	indf2,w,c
  5783  012CBE  EC82  F0AB         	call	_get_packet_size
  5784  012CC2  0100               	movlb	0	; () banked
  5785  012CC4  6FCA               	movwf	??_irobot_query_and_update& (0+255),b
  5786  012CC6  6BCB               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5787  012CC8  0100               	movlb	0	; () banked
  5788  012CCA  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5789  012CCC  0100               	movlb	0	; () banked
  5790  012CCE  27CA               	addwf	??_irobot_query_and_update& (0+255),f,b
  5791  012CD0  0E00               	movlw	0
  5792  012CD2  23CB               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5793  012CD4  0100               	movlb	0	; () banked
  5794  012CD6  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5795  012CD8  0100               	movlb	0	; () banked
  5796  012CDA  6FCC               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5797  012CDC  6BCD               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5798  012CDE  0100               	movlb	0	; () banked
  5799  012CE0  51CA               	movf	??_irobot_query_and_update& (0+255),w,b
  5800  012CE2  0100               	movlb	0	; () banked
  5801  012CE4  5DCC               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5802  012CE6  0100               	movlb	0	; () banked
  5803  012CE8  51CD               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5804  012CEA  0A80               	xorlw	128
  5805  012CEC  0100               	movlb	0	; () banked
  5806  012CEE  6FCE               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5807  012CF0  0100               	movlb	0	; () banked
  5808  012CF2  51CB               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5809  012CF4  0A80               	xorlw	128
  5810  012CF6  0100               	movlb	0	; () banked
  5811  012CF8  59CE               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5812  012CFA  A0D8               	btfss	status,0,c
  5813  012CFC  D7B5               	goto	l2100
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;iRobotSerial.c: 150: }
  5817                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  5818                           
  5819                           ; BSR set to: 0
  5820  012CFE  0100               	movlb	0	; () banked
  5821  012D00  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5822  012D02  0D01               	mullw	1
  5823  012D04  0E00               	movlw	low irobot_query_and_update@TXArray
  5824  012D06  24F3               	addwf	prodl,w,c
  5825  012D08  6ED9               	movwf	fsr2l,c
  5826  012D0A  0E02               	movlw	high irobot_query_and_update@TXArray
  5827  012D0C  20F4               	addwfc	prodh,w,c
  5828  012D0E  6EDA               	movwf	fsr2h,c
  5829  012D10  50DF               	movf	indf2,w,c
  5830  012D12  EC82  F0AB         	call	_get_packet_size
  5831  012D16  0100               	movlb	0	; () banked
  5832  012D18  27D5               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5833                           
  5834                           ; BSR set to: 0
  5835  012D1A  0100               	movlb	0	; () banked
  5836  012D1C  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5837  012D1E                     l2097:
  5838                           
  5839                           ; BSR set to: 0
  5840                           
  5841                           ; BSR set to: 0
  5842  012D1E  0100               	movlb	0	; () banked
  5843  012D20  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5844  012D22  0100               	movlb	0	; () banked
  5845  012D24  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5846  012D26  B0D8               	btfsc	status,0,c
  5847  012D28  0012               	return	
  5848  012D2A  D79B               	goto	l2098
  5849  012D2C                     __end_of_irobot_query_and_update:
  5850                           	opt stack 0
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           postinc0	equ	0xFEE
  5858                           wreg	equ	0xFE8
  5859                           postdec1	equ	0xFE5
  5860                           fsr1h	equ	0xFE2
  5861                           fsr1l	equ	0xFE1
  5862                           indf2	equ	0xFDF
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function _rx_assign *****************
  5868 ;; Defined at:
  5869 ;;		line 74 in file "Library/iRobotSerial.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  packetID        1    wreg     unsigned char 
  5872 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5873 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;  packetID        1    5[BANK0 ] unsigned char 
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  1    wreg      void 
  5878 ;; Registers used:
  5879 ;;		wreg, status,2, status,0, cstack
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5885 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;Total ram usage:        5 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    8
  5892 ;; This function calls:
  5893 ;;		_sort_iRBumpDrop
  5894 ;; This function is called by:
  5895 ;;		_irobot_query_and_update
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text14
  5900  0138B0                     __ptext14:
  5901                           	opt stack 0
  5902  0138B0                     _rx_assign:
  5903                           	opt stack 19
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;incstack = 0
  5907                           ;rx_assign@packetID stored from wreg
  5908  0138B0  0100               	movlb	0	; () banked
  5909  0138B2  6FBF               	movwf	rx_assign@packetID& (0+255),b
  5910                           
  5911                           ;iRobotSerial.c: 75: switch (packetID){
  5912  0138B4  D057               	goto	l2031
  5913  0138B6                     l2032:
  5914                           
  5915                           ; BSR set to: 0
  5916  0138B6  C0BB  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5917                           
  5918                           ; BSR set to: 0
  5919  0138BA  ECD1  F0A6         	call	_sort_iRBumpDrop	;wreg free
  5920  0138BE  0012               	return	
  5921  0138C0                     l2034:
  5922                           
  5923                           ; BSR set to: 0
  5924  0138C0  C0BB  F035         	movff	rx_assign@packetIDValue,_iRWall
  5925  0138C4  0012               	return	
  5926  0138C6                     l2035:
  5927                           
  5928                           ; BSR set to: 0
  5929  0138C6  C0BB  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5930  0138CA  0012               	return	
  5931  0138CC                     l2036:
  5932                           
  5933                           ; BSR set to: 0
  5934  0138CC  C0BB  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5935  0138D0  0012               	return	
  5936  0138D2                     l2037:
  5937                           
  5938                           ; BSR set to: 0
  5939  0138D2  C0BB  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5940  0138D6  0012               	return	
  5941  0138D8                     l2038:
  5942                           
  5943                           ; BSR set to: 0
  5944  0138D8  C0BB  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5945  0138DC  0012               	return	
  5946  0138DE                     l2039:
  5947                           
  5948                           ; BSR set to: 0
  5949  0138DE  C0BB  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5950  0138E2  0012               	return	
  5951  0138E4                     
  5952                           ; BSR set to: 0
  5953                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5954                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5955                           
  5956                           ; BSR set to: 0
  5957  0138E4  0100               	movlb	0	; () banked
  5958  0138E6  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  5959  0138E8  0100               	movlb	0	; () banked
  5960  0138EA  A4D8               	btfss	status,2,c
  5961  0138EC  D005               	goto	l2042
  5962                           
  5963                           ; BSR set to: 0
  5964  0138EE  C0BB  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5965  0138F2  0103               	movlb	3	; () banked
  5966  0138F4  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  5967  0138F6  0012               	return	
  5968  0138F8                     l2042:
  5969                           
  5970                           ; BSR set to: 0
  5971  0138F8  C0BB  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5972  0138FC  0103               	movlb	3	; () banked
  5973  0138FE  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  5974                           
  5975                           ; BSR set to: 3
  5976  013900  0103               	movlb	3	; () banked
  5977  013902  5122               	movf	_iRDistanceSS& (0+255),w,b
  5978  013904  0100               	movlb	0	; () banked
  5979  013906  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  5980  013908  6BBD               	clrf	??_rx_assign& (0+255),b
  5981  01390A  0103               	movlb	3	; () banked
  5982  01390C  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5983  01390E  0100               	movlb	0	; () banked
  5984  013910  25BD               	addwf	??_rx_assign& (0+255),w,b
  5985  013912  0100               	movlb	0	; () banked
  5986  013914  6F79               	movwf	_iRDistance& (0+255),b
  5987  013916  0103               	movlb	3	; () banked
  5988  013918  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5989  01391A  0100               	movlb	0	; () banked
  5990  01391C  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5991  01391E  0100               	movlb	0	; () banked
  5992  013920  6F7A               	movwf	(_iRDistance+1)& (0+255),b
  5993                           
  5994                           ; BSR set to: 0
  5995  013922  0012               	return	
  5996  013924                     
  5997                           ; BSR set to: 0
  5998                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5999                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  6000                           
  6001                           ; BSR set to: 0
  6002  013924  0100               	movlb	0	; () banked
  6003  013926  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  6004  013928  0100               	movlb	0	; () banked
  6005  01392A  A4D8               	btfss	status,2,c
  6006  01392C  D005               	goto	l2047
  6007                           
  6008                           ; BSR set to: 0
  6009  01392E  C0BB  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  6010  013932  0103               	movlb	3	; () banked
  6011  013934  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  6012  013936  0012               	return	
  6013  013938                     l2047:
  6014                           
  6015                           ; BSR set to: 0
  6016  013938  C0BB  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  6017  01393C  0103               	movlb	3	; () banked
  6018  01393E  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  6019                           
  6020                           ; BSR set to: 3
  6021  013940  0103               	movlb	3	; () banked
  6022  013942  511E               	movf	_iRAngleSS& (0+255),w,b
  6023  013944  0100               	movlb	0	; () banked
  6024  013946  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  6025  013948  6BBD               	clrf	??_rx_assign& (0+255),b
  6026  01394A  0103               	movlb	3	; () banked
  6027  01394C  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  6028  01394E  0100               	movlb	0	; () banked
  6029  013950  25BD               	addwf	??_rx_assign& (0+255),w,b
  6030  013952  0103               	movlb	3	; () banked
  6031  013954  6F3C               	movwf	_iRAngle& (0+255),b
  6032  013956  0103               	movlb	3	; () banked
  6033  013958  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  6034  01395A  0100               	movlb	0	; () banked
  6035  01395C  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6036  01395E  0103               	movlb	3	; () banked
  6037  013960  6F3D               	movwf	(_iRAngle+1)& (0+255),b
  6038                           
  6039                           ; BSR set to: 3
  6040                           ;iRobotSerial.c: 89: }
  6041                           
  6042                           ; BSR set to: 3
  6043  013962  0012               	return	
  6044  013964                     l2031:
  6045                           
  6046                           ; BSR set to: 3
  6047  013964  0100               	movlb	0	; () banked
  6048  013966  51BF               	movf	rx_assign@packetID& (0+255),w,b
  6049                           
  6050                           ; Switch size 1, requested type "space"
  6051                           ; Number of cases is 9, Range of values is 7 to 20
  6052                           ; switch strategies available:
  6053                           ; Name         Instructions Cycles
  6054                           ; simple_byte           28    15 (average)
  6055                           ;	Chosen strategy is simple_byte
  6056  013968  0A07               	xorlw	7	; case 7
  6057  01396A  B4D8               	btfsc	status,2,c
  6058  01396C  D7A4               	goto	l2032
  6059  01396E  0A0F               	xorlw	15	; case 8
  6060  013970  B4D8               	btfsc	status,2,c
  6061  013972  D7A6               	goto	l2034
  6062  013974  0A01               	xorlw	1	; case 9
  6063  013976  B4D8               	btfsc	status,2,c
  6064  013978  D7A6               	goto	l2035
  6065  01397A  0A03               	xorlw	3	; case 10
  6066  01397C  B4D8               	btfsc	status,2,c
  6067  01397E  D7A6               	goto	l2036
  6068  013980  0A01               	xorlw	1	; case 11
  6069  013982  B4D8               	btfsc	status,2,c
  6070  013984  D7A6               	goto	l2037
  6071  013986  0A07               	xorlw	7	; case 12
  6072  013988  B4D8               	btfsc	status,2,c
  6073  01398A  D7A6               	goto	l2038
  6074  01398C  0A01               	xorlw	1	; case 13
  6075  01398E  B4D8               	btfsc	status,2,c
  6076  013990  D7A6               	goto	l2039
  6077  013992  0A1E               	xorlw	30	; case 19
  6078  013994  B4D8               	btfsc	status,2,c
  6079  013996  D7A6               	goto	l2040
  6080  013998  0A07               	xorlw	7	; case 20
  6081  01399A  A4D8               	btfss	status,2,c
  6082  01399C  0012               	return	
  6083  01399E  D7C2               	goto	l2045
  6084  0139A0                     __end_of_rx_assign:
  6085                           	opt stack 0
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           prodh	equ	0xFF4
  6091                           prodl	equ	0xFF3
  6092                           postinc0	equ	0xFEE
  6093                           wreg	equ	0xFE8
  6094                           postdec1	equ	0xFE5
  6095                           fsr1h	equ	0xFE2
  6096                           fsr1l	equ	0xFE1
  6097                           indf2	equ	0xFDF
  6098                           fsr2h	equ	0xFDA
  6099                           fsr2l	equ	0xFD9
  6100                           status	equ	0xFD8
  6101                           
  6102 ;; *************** function _sort_iRBumpDrop *****************
  6103 ;; Defined at:
  6104 ;;		line 92 in file "Library/iRobotSerial.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;		None
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;		None
  6109 ;; Return value:  Size  Location     Type
  6110 ;;                  1    wreg      void 
  6111 ;; Registers used:
  6112 ;;		wreg, status,2, status,0
  6113 ;; Tracked objects:
  6114 ;;		On entry : 0/0
  6115 ;;		On exit  : 0/0
  6116 ;;		Unchanged: 0/0
  6117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;Total ram usage:        1 bytes
  6123 ;; Hardware stack levels used:    1
  6124 ;; Hardware stack levels required when called:    7
  6125 ;; This function calls:
  6126 ;;		Nothing
  6127 ;; This function is called by:
  6128 ;;		_rx_assign
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           	psect	text15
  6133  014DA2                     __ptext15:
  6134                           	opt stack 0
  6135  014DA2                     _sort_iRBumpDrop:
  6136                           	opt stack 19
  6137                           
  6138                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  6139                           
  6140                           ;incstack = 0
  6141  014DA2  A036               	btfss	_iRBumpDrop,0,c
  6142  014DA4  D002               	goto	l2054
  6143  014DA6  0E01               	movlw	1
  6144  014DA8  D001               	goto	L1
  6145  014DAA                     l2054:
  6146                           
  6147                           ; BSR set to: 0
  6148  014DAA  0E00               	movlw	0
  6149  014DAC                     L1:
  6150  014DAC  0100               	movlb	0	; () banked
  6151  014DAE  6F88               	movwf	_iRBumpRight& (0+255),b
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  6155                           
  6156                           ; BSR set to: 0
  6157  014DB0  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6158  014DB4  0100               	movlb	0	; () banked
  6159  014DB6  90D8               	bcf	status,0,c
  6160  014DB8  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6161  014DBA  0100               	movlb	0	; () banked
  6162  014DBC  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6163  014DBE  D002               	goto	l2058
  6164                           
  6165                           ; BSR set to: 0
  6166  014DC0  0E01               	movlw	1
  6167  014DC2  D001               	goto	L2
  6168  014DC4                     l2058:
  6169                           
  6170                           ; BSR set to: 0
  6171                           
  6172                           ; BSR set to: 0
  6173  014DC4  0E00               	movlw	0
  6174  014DC6                     L2:
  6175  014DC6  0100               	movlb	0	; () banked
  6176  014DC8  6F87               	movwf	_iRBumpLeft& (0+255),b
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  6180                           
  6181                           ; BSR set to: 0
  6182  014DCA  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6183  014DCE  0100               	movlb	0	; () banked
  6184  014DD0  90D8               	bcf	status,0,c
  6185  014DD2  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6186  014DD4  0100               	movlb	0	; () banked
  6187  014DD6  90D8               	bcf	status,0,c
  6188  014DD8  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6189  014DDA  0100               	movlb	0	; () banked
  6190  014DDC  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6191  014DDE  D002               	goto	l2062
  6192                           
  6193                           ; BSR set to: 0
  6194  014DE0  0E01               	movlw	1
  6195  014DE2  D001               	goto	L3
  6196  014DE4                     l2062:
  6197                           
  6198                           ; BSR set to: 0
  6199                           
  6200                           ; BSR set to: 0
  6201  014DE4  0E00               	movlw	0
  6202  014DE6                     L3:
  6203  014DE6  0100               	movlb	0	; () banked
  6204  014DE8  6F86               	movwf	_iRDropRight& (0+255),b
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  6208                           
  6209                           ; BSR set to: 0
  6210  014DEA  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6211  014DEE  0100               	movlb	0	; () banked
  6212  014DF0  90D8               	bcf	status,0,c
  6213  014DF2  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6214  014DF4  0100               	movlb	0	; () banked
  6215  014DF6  90D8               	bcf	status,0,c
  6216  014DF8  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6217  014DFA  0100               	movlb	0	; () banked
  6218  014DFC  90D8               	bcf	status,0,c
  6219  014DFE  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6220  014E00  0100               	movlb	0	; () banked
  6221  014E02  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6222  014E04  D002               	goto	l2066
  6223                           
  6224                           ; BSR set to: 0
  6225  014E06  0E01               	movlw	1
  6226  014E08  D001               	goto	L4
  6227  014E0A                     l2066:
  6228                           
  6229                           ; BSR set to: 0
  6230                           
  6231                           ; BSR set to: 0
  6232  014E0A  0E00               	movlw	0
  6233  014E0C                     L4:
  6234  014E0C  0100               	movlb	0	; () banked
  6235  014E0E  6F85               	movwf	_iRDropLeft& (0+255),b
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  6239                           
  6240                           ; BSR set to: 0
  6241  014E10  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6242  014E14  0100               	movlb	0	; () banked
  6243  014E16  3BBA               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  6244  014E18  0E0F               	movlw	15
  6245  014E1A  17BA               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  6246  014E1C  0100               	movlb	0	; () banked
  6247  014E1E  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6248  014E20  D003               	goto	l2070
  6249                           
  6250                           ; BSR set to: 0
  6251  014E22  0E01               	movlw	1
  6252  014E24  6E2F               	movwf	_iRDropCaster,c
  6253  014E26  0012               	return	
  6254  014E28                     l2070:
  6255                           
  6256                           ; BSR set to: 0
  6257                           
  6258                           ; BSR set to: 0
  6259  014E28  0E00               	movlw	0
  6260  014E2A  6E2F               	movwf	_iRDropCaster,c
  6261  014E2C  0012               	return	
  6262  014E2E                     __end_of_sort_iRBumpDrop:
  6263                           	opt stack 0
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           postinc0	equ	0xFEE
  6271                           wreg	equ	0xFE8
  6272                           postdec1	equ	0xFE5
  6273                           fsr1h	equ	0xFE2
  6274                           fsr1l	equ	0xFE1
  6275                           indf2	equ	0xFDF
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function _get_packet_size *****************
  6281 ;; Defined at:
  6282 ;;		line 60 in file "Library/iRobotSerial.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  packetID        1    wreg     unsigned char 
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  packetID        1    0[BANK0 ] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      unsigned char 
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, status,0
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;Total ram usage:        1 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    7
  6303 ;; This function calls:
  6304 ;;		Nothing
  6305 ;; This function is called by:
  6306 ;;		_irobot_query_and_update
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           	psect	text16
  6311  015704                     __ptext16:
  6312                           	opt stack 0
  6313  015704                     _get_packet_size:
  6314                           	opt stack 20
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;incstack = 0
  6318                           ;get_packet_size@packetID stored from wreg
  6319  015704  0100               	movlb	0	; () banked
  6320  015706  6FBA               	movwf	get_packet_size@packetID& (0+255),b
  6321                           
  6322                           ;iRobotSerial.c: 61: switch (packetID){
  6323  015708  D012               	goto	l2017
  6324  01570A  0E01               	movlw	1
  6325  01570C  0012               	return	
  6326  01570E  0E01               	movlw	1
  6327  015710  0012               	return	
  6328  015712  0E01               	movlw	1
  6329  015714  0012               	return	
  6330  015716  0E01               	movlw	1
  6331  015718  0012               	return	
  6332  01571A  0E01               	movlw	1
  6333  01571C  0012               	return	
  6334  01571E  0E01               	movlw	1
  6335  015720  0012               	return	
  6336  015722  0E01               	movlw	1
  6337  015724  0012               	return	
  6338  015726  0E02               	movlw	2
  6339  015728  0012               	return	
  6340  01572A  0E02               	movlw	2
  6341                           
  6342                           ;iRobotSerial.c: 71: }
  6343  01572C  0012               	return	
  6344  01572E                     l2017:
  6345  01572E  0100               	movlb	0	; () banked
  6346  015730  51BA               	movf	get_packet_size@packetID& (0+255),w,b
  6347                           
  6348                           ; Switch size 1, requested type "space"
  6349                           ; Number of cases is 9, Range of values is 7 to 20
  6350                           ; switch strategies available:
  6351                           ; Name         Instructions Cycles
  6352                           ; simple_byte           28    15 (average)
  6353                           ;	Chosen strategy is simple_byte
  6354  015732  0A07               	xorlw	7	; case 7
  6355  015734  B4D8               	btfsc	status,2,c
  6356  015736  D7E9               	goto	l2018
  6357  015738  0A0F               	xorlw	15	; case 8
  6358  01573A  B4D8               	btfsc	status,2,c
  6359  01573C  D7E8               	goto	l2020
  6360  01573E  0A01               	xorlw	1	; case 9
  6361  015740  B4D8               	btfsc	status,2,c
  6362  015742  D7E7               	goto	l2021
  6363  015744  0A03               	xorlw	3	; case 10
  6364  015746  B4D8               	btfsc	status,2,c
  6365  015748  D7E6               	goto	l2022
  6366  01574A  0A01               	xorlw	1	; case 11
  6367  01574C  B4D8               	btfsc	status,2,c
  6368  01574E  D7E5               	goto	l2023
  6369  015750  0A07               	xorlw	7	; case 12
  6370  015752  B4D8               	btfsc	status,2,c
  6371  015754  D7E4               	goto	l2024
  6372  015756  0A01               	xorlw	1	; case 13
  6373  015758  B4D8               	btfsc	status,2,c
  6374  01575A  D7E3               	goto	l2025
  6375  01575C  0A1E               	xorlw	30	; case 19
  6376  01575E  B4D8               	btfsc	status,2,c
  6377  015760  D7E2               	goto	l2026
  6378  015762  0A07               	xorlw	7	; case 20
  6379  015764  A4D8               	btfss	status,2,c
  6380  015766  0012               	return	
  6381  015768  D7E0               	goto	l2027
  6382  01576A                     __end_of_get_packet_size:
  6383                           	opt stack 0
  6384                           tblptru	equ	0xFF8
  6385                           tblptrh	equ	0xFF7
  6386                           tblptrl	equ	0xFF6
  6387                           tablat	equ	0xFF5
  6388                           prodh	equ	0xFF4
  6389                           prodl	equ	0xFF3
  6390                           postinc0	equ	0xFEE
  6391                           wreg	equ	0xFE8
  6392                           postdec1	equ	0xFE5
  6393                           fsr1h	equ	0xFE2
  6394                           fsr1l	equ	0xFE1
  6395                           indf2	equ	0xFDF
  6396                           fsr2h	equ	0xFDA
  6397                           fsr2l	equ	0xFD9
  6398                           status	equ	0xFD8
  6399                           
  6400 ;; *************** function _eusart_getch *****************
  6401 ;; Defined at:
  6402 ;;		line 125 in file "Library/iRobotSerial.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;		None
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;		None
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  1    wreg      unsigned char 
  6409 ;; Registers used:
  6410 ;;		wreg, status,2
  6411 ;; Tracked objects:
  6412 ;;		On entry : 0/0
  6413 ;;		On exit  : 0/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;Total ram usage:        0 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:    7
  6423 ;; This function calls:
  6424 ;;		Nothing
  6425 ;; This function is called by:
  6426 ;;		_irobot_query_and_update
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           	psect	text17
  6431  016706                     __ptext17:
  6432                           	opt stack 0
  6433  016706                     _eusart_getch:
  6434                           	opt stack 20
  6435                           
  6436                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  6437                           
  6438                           ;incstack = 0
  6439  016706  AA9E               	btfss	3998,5,c	;volatile
  6440  016708  D7FE               	goto	_eusart_getch
  6441                           
  6442                           ;iRobotSerial.c: 127: return RCREG1;
  6443  01670A  50AF               	movf	4015,w,c	;volatile
  6444  01670C  0012               	return	
  6445  01670E                     __end_of_eusart_getch:
  6446                           	opt stack 0
  6447                           tblptru	equ	0xFF8
  6448                           tblptrh	equ	0xFF7
  6449                           tblptrl	equ	0xFF6
  6450                           tablat	equ	0xFF5
  6451                           prodh	equ	0xFF4
  6452                           prodl	equ	0xFF3
  6453                           postinc0	equ	0xFEE
  6454                           wreg	equ	0xFE8
  6455                           postdec1	equ	0xFE5
  6456                           fsr1h	equ	0xFE2
  6457                           fsr1l	equ	0xFE1
  6458                           indf2	equ	0xFDF
  6459                           fsr2h	equ	0xFDA
  6460                           fsr2l	equ	0xFD9
  6461                           status	equ	0xFD8
  6462                           
  6463 ;; *************** function _irobot_stop_motion *****************
  6464 ;; Defined at:
  6465 ;;		line 288 in file "Library/iRobotSerial.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  isScript        1    wreg     unsigned char 
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;  isScript        1   25[BANK0 ] unsigned char 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      void 
  6472 ;; Registers used:
  6473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;Total ram usage:        1 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    9
  6486 ;; This function calls:
  6487 ;;		_irobot_move
  6488 ;; This function is called by:
  6489 ;;		_safeToGo
  6490 ;;		_move_and_rotate
  6491 ;;		_mode2
  6492 ;;		_mode4
  6493 ;;		_irobot_move_to_simple
  6494 ;;		_irobot_rotate_to
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           	psect	text18
  6499  015D6C                     __ptext18:
  6500                           	opt stack 0
  6501  015D6C                     _irobot_stop_motion:
  6502                           	opt stack 19
  6503                           
  6504                           ;incstack = 0
  6505                           ;irobot_stop_motion@isScript stored from wreg
  6506  015D6C  0100               	movlb	0	; () banked
  6507  015D6E  6FD3               	movwf	irobot_stop_motion@isScript& (0+255),b
  6508                           
  6509                           ;iRobotSerial.c: 289: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6510  015D70  0100               	movlb	0	; () banked
  6511  015D72  51D3               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6512  015D74  0100               	movlb	0	; () banked
  6513  015D76  B4D8               	btfsc	status,2,c
  6514  015D78  D00E               	goto	l2163
  6515                           
  6516                           ; BSR set to: 0
  6517  015D7A  0E00               	movlw	0
  6518  015D7C  0100               	movlb	0	; () banked
  6519  015D7E  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6520  015D80  0E00               	movlw	0
  6521  015D82  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6522  015D84  0E00               	movlw	0
  6523  015D86  0100               	movlb	0	; () banked
  6524  015D88  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6525  015D8A  0E00               	movlw	0
  6526  015D8C  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6527  015D8E  0E01               	movlw	1
  6528  015D90  EC60  F0A2         	call	_irobot_move
  6529  015D94  0012               	return	
  6530  015D96                     l2163:
  6531  015D96  0E00               	movlw	0
  6532  015D98  0100               	movlb	0	; () banked
  6533  015D9A  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6534  015D9C  0E00               	movlw	0
  6535  015D9E  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6536  015DA0  0E00               	movlw	0
  6537  015DA2  0100               	movlb	0	; () banked
  6538  015DA4  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6539  015DA6  0E00               	movlw	0
  6540  015DA8  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6541  015DAA  0E00               	movlw	0
  6542  015DAC  EC60  F0A2         	call	_irobot_move
  6543  015DB0  0012               	return	
  6544  015DB2                     __end_of_irobot_stop_motion:
  6545                           	opt stack 0
  6546                           tblptru	equ	0xFF8
  6547                           tblptrh	equ	0xFF7
  6548                           tblptrl	equ	0xFF6
  6549                           tablat	equ	0xFF5
  6550                           prodh	equ	0xFF4
  6551                           prodl	equ	0xFF3
  6552                           postinc0	equ	0xFEE
  6553                           wreg	equ	0xFE8
  6554                           postdec1	equ	0xFE5
  6555                           fsr1h	equ	0xFE2
  6556                           fsr1l	equ	0xFE1
  6557                           indf2	equ	0xFDF
  6558                           fsr2h	equ	0xFDA
  6559                           fsr2l	equ	0xFD9
  6560                           status	equ	0xFD8
  6561                           
  6562 ;; *************** function _irobot_move *****************
  6563 ;; Defined at:
  6564 ;;		line 220 in file "Library/iRobotSerial.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  isScript        1    wreg     unsigned char 
  6567 ;;  moveSpeed       2   16[BANK0 ] short 
  6568 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;  isScript        1   24[BANK0 ] unsigned char 
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  1    wreg      void 
  6573 ;; Registers used:
  6574 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6580 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;Total ram usage:        9 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    8
  6587 ;; This function calls:
  6588 ;;		_eusart_putch
  6589 ;;		_load_iRScriptStack
  6590 ;;		_twos_complement_of
  6591 ;; This function is called by:
  6592 ;;		_irobot_rotate
  6593 ;;		_irobot_stop_motion
  6594 ;;		_irobot_move_straight
  6595 ;;		_irobot_move_to_simple
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text19
  6600  0144C0                     __ptext19:
  6601                           	opt stack 0
  6602  0144C0                     _irobot_move:
  6603                           	opt stack 19
  6604                           
  6605                           ;incstack = 0
  6606                           ;irobot_move@isScript stored from wreg
  6607  0144C0  0100               	movlb	0	; () banked
  6608  0144C2  6FD2               	movwf	irobot_move@isScript& (0+255),b
  6609                           
  6610                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  6611  0144C4  C0CA  F0BA         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6612  0144C8  C0CB  F0BB         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6613  0144CC  EC1F  F0AF         	call	_twos_complement_of	;wreg free
  6614  0144D0  C0BA  F0CA         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6615  0144D4  C0BB  F0CB         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6616                           
  6617                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6618  0144D8  C0CC  F0BA         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6619  0144DC  C0CD  F0BB         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6620  0144E0  EC1F  F0AF         	call	_twos_complement_of	;wreg free
  6621  0144E4  C0BA  F0CC         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6622  0144E8  C0BB  F0CD         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6623                           
  6624                           ;iRobotSerial.c: 224: if (isScript){
  6625  0144EC  0100               	movlb	0	; () banked
  6626  0144EE  51D2               	movf	irobot_move@isScript& (0+255),w,b
  6627  0144F0  0100               	movlb	0	; () banked
  6628  0144F2  B4D8               	btfsc	status,2,c
  6629  0144F4  D029               	goto	l2135
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  6633                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  6634                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  6635  0144F6  0E00               	movlw	0
  6636  0144F8  0100               	movlb	0	; () banked
  6637  0144FA  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6638  0144FC  0E89               	movlw	137
  6639  0144FE  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
  6640  014500  C0CB  F0CE         	movff	irobot_move@moveSpeed+1,??_irobot_move
  6641  014504  0100               	movlb	0	; () banked
  6642  014506  6BCF               	clrf	(??_irobot_move+1)& (0+255),b
  6643  014508  BFCE               	btfsc	??_irobot_move& (0+255),7,b
  6644  01450A  69CF               	setf	(??_irobot_move+1)& (0+255),b
  6645  01450C  0100               	movlb	0	; () banked
  6646  01450E  51CE               	movf	??_irobot_move& (0+255),w,b
  6647  014510  0100               	movlb	0	; () banked
  6648  014512  6FBC               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  6649  014514  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6650  014516  0100               	movlb	0	; () banked
  6651  014518  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6652  01451A  0100               	movlb	0	; () banked
  6653  01451C  6FBE               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  6654  01451E  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6655  014520  C0CD  F0D0         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  6656  014524  0100               	movlb	0	; () banked
  6657  014526  6BD1               	clrf	(??_irobot_move+3)& (0+255),b
  6658  014528  BFD0               	btfsc	(??_irobot_move+2)& (0+255),7,b
  6659  01452A  69D1               	setf	(??_irobot_move+3)& (0+255),b
  6660  01452C  0100               	movlb	0	; () banked
  6661  01452E  51D0               	movf	(??_irobot_move+2)& (0+255),w,b
  6662  014530  0100               	movlb	0	; () banked
  6663  014532  6FC0               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  6664  014534  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6665  014536  0100               	movlb	0	; () banked
  6666  014538  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6667  01453A  0100               	movlb	0	; () banked
  6668  01453C  6FC2               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  6669  01453E  6BC3               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  6670  014540  0E05               	movlw	5
  6671  014542  ECE3  F0AA         	call	_load_iRScriptStack
  6672                           
  6673                           ;iRobotSerial.c: 228: }
  6674  014546  0012               	return	
  6675  014548                     l2135:
  6676                           
  6677                           ;iRobotSerial.c: 229: else{
  6678                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  6679  014548  0E89               	movlw	137
  6680  01454A  EC40  F0B3         	call	_eusart_putch
  6681                           
  6682                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  6683  01454E  0100               	movlb	0	; () banked
  6684  014550  51CB               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  6685  014552  EC40  F0B3         	call	_eusart_putch
  6686                           
  6687                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  6688  014556  0100               	movlb	0	; () banked
  6689  014558  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6690  01455A  EC40  F0B3         	call	_eusart_putch
  6691                           
  6692                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  6693  01455E  0100               	movlb	0	; () banked
  6694  014560  51CD               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  6695  014562  EC40  F0B3         	call	_eusart_putch
  6696                           
  6697                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  6698  014566  0100               	movlb	0	; () banked
  6699  014568  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6700  01456A  EC40  F0B3         	call	_eusart_putch
  6701  01456E  0012               	return	
  6702  014570                     __end_of_irobot_move:
  6703                           	opt stack 0
  6704                           tblptru	equ	0xFF8
  6705                           tblptrh	equ	0xFF7
  6706                           tblptrl	equ	0xFF6
  6707                           tablat	equ	0xFF5
  6708                           prodh	equ	0xFF4
  6709                           prodl	equ	0xFF3
  6710                           postinc0	equ	0xFEE
  6711                           wreg	equ	0xFE8
  6712                           postdec1	equ	0xFE5
  6713                           fsr1h	equ	0xFE2
  6714                           fsr1l	equ	0xFE1
  6715                           indf2	equ	0xFDF
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function _twos_complement_of *****************
  6721 ;; Defined at:
  6722 ;;		line 167 in file "Library/iRobotSerial.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  complementVa    2    0[BANK0 ] short 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  2    0[BANK0 ] unsigned short 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6736 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;Total ram usage:        2 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    7
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		_irobot_move
  6747 ;;		_irobot_angle_wait
  6748 ;;		_irobot_distance_wait
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           	psect	text20
  6753  015E3E                     __ptext20:
  6754                           	opt stack 0
  6755  015E3E                     _twos_complement_of:
  6756                           	opt stack 19
  6757                           
  6758                           ;iRobotSerial.c: 168: if (complementValue < 0){
  6759                           
  6760                           ;incstack = 0
  6761  015E3E  0100               	movlb	0	; () banked
  6762  015E40  AFBB               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  6763  015E42  D01A               	goto	l2106
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  6767  015E44  0100               	movlb	0	; () banked
  6768  015E46  BFBB               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  6769  015E48  D007               	goto	u9660
  6770  015E4A  0100               	movlb	0	; () banked
  6771  015E4C  51BB               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  6772  015E4E  E10A               	bnz	l2108
  6773  015E50  0100               	movlb	0	; () banked
  6774  015E52  05BA               	decf	twos_complement_of@complementValue& (0+255),w,b
  6775  015E54  B0D8               	btfsc	status,0,c
  6776  015E56  D006               	goto	l2108
  6777  015E58                     u9660:
  6778                           
  6779                           ; BSR set to: 0
  6780  015E58  0100               	movlb	0	; () banked
  6781  015E5A  6DBA               	negf	twos_complement_of@complementValue& (0+255),b
  6782  015E5C  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6783  015E5E  B0D8               	btfsc	status,0,c
  6784  015E60  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6785  015E62  D004               	goto	l2110
  6786  015E64                     l2108:
  6787                           
  6788                           ; BSR set to: 0
  6789  015E64  C0BA  F0BA         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  6790  015E68  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  6791  015E6C                     l2110:
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  6795                           
  6796                           ; BSR set to: 0
  6797  015E6C  0100               	movlb	0	; () banked
  6798  015E6E  1FBA               	comf	twos_complement_of@complementValue& (0+255),f,b
  6799  015E70  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6800                           
  6801                           ;iRobotSerial.c: 171: complementValue += 1;
  6802  015E72  0100               	movlb	0	; () banked
  6803  015E74  4BBA               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  6804  015E76  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6805  015E78                     l2106:
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;iRobotSerial.c: 172: }
  6809                           ;iRobotSerial.c: 173: return complementValue;
  6810                           
  6811                           ; BSR set to: 0
  6812  015E78  C0BA  F0BA         	movff	twos_complement_of@complementValue,?_twos_complement_of
  6813  015E7C  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  6814  015E80  0012               	return	
  6815  015E82                     __end_of_twos_complement_of:
  6816                           	opt stack 0
  6817                           tblptru	equ	0xFF8
  6818                           tblptrh	equ	0xFF7
  6819                           tblptrl	equ	0xFF6
  6820                           tablat	equ	0xFF5
  6821                           prodh	equ	0xFF4
  6822                           prodl	equ	0xFF3
  6823                           postinc0	equ	0xFEE
  6824                           wreg	equ	0xFE8
  6825                           postdec1	equ	0xFE5
  6826                           fsr1h	equ	0xFE2
  6827                           fsr1l	equ	0xFE1
  6828                           indf2	equ	0xFDF
  6829                           fsr2h	equ	0xFDA
  6830                           fsr2l	equ	0xFD9
  6831                           status	equ	0xFD8
  6832                           
  6833 ;; *************** function _irobot_song_play *****************
  6834 ;; Defined at:
  6835 ;;		line 274 in file "Library/iRobotSerial.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;  songNumber      1    wreg     unsigned char 
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		wreg, status,2, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;Total ram usage:        1 bytes
  6854 ;; Hardware stack levels used:    1
  6855 ;; Hardware stack levels required when called:    8
  6856 ;; This function calls:
  6857 ;;		_eusart_putch
  6858 ;; This function is called by:
  6859 ;;		_safeToGo
  6860 ;;		_mode4
  6861 ;; This function uses a non-reentrant model
  6862 ;;
  6863                           
  6864                           	psect	text21
  6865  016606                     __ptext21:
  6866                           	opt stack 0
  6867  016606                     _irobot_song_play:
  6868                           	opt stack 20
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;incstack = 0
  6872                           ;irobot_song_play@songNumber stored from wreg
  6873  016606  0100               	movlb	0	; () banked
  6874  016608  6FBB               	movwf	irobot_song_play@songNumber& (0+255),b
  6875                           
  6876                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  6877  01660A  0E8D               	movlw	141
  6878  01660C  EC40  F0B3         	call	_eusart_putch
  6879                           
  6880                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  6881  016610  0100               	movlb	0	; () banked
  6882  016612  51BB               	movf	irobot_song_play@songNumber& (0+255),w,b
  6883  016614  EC40  F0B3         	call	_eusart_putch
  6884  016618  0012               	return		;funcret
  6885  01661A                     __end_of_irobot_song_play:
  6886                           	opt stack 0
  6887                           tblptru	equ	0xFF8
  6888                           tblptrh	equ	0xFF7
  6889                           tblptrl	equ	0xFF6
  6890                           tablat	equ	0xFF5
  6891                           prodh	equ	0xFF4
  6892                           prodl	equ	0xFF3
  6893                           postinc0	equ	0xFEE
  6894                           wreg	equ	0xFE8
  6895                           postdec1	equ	0xFE5
  6896                           fsr1h	equ	0xFE2
  6897                           fsr1l	equ	0xFE1
  6898                           indf2	equ	0xFDF
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8
  6902                           
  6903 ;; *************** function _printf *****************
  6904 ;; Defined at:
  6905 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  6908 ;;		 -> STR_16(21), STR_15(21), STR_14(21), STR_13(21), 
  6909 ;;		 -> STR_12(21), STR_11(3), STR_10(76), STR_9(3), 
  6910 ;;		 -> STR_8(14), STR_7(3), STR_6(46), STR_5(3), 
  6911 ;;		 -> STR_4(46), STR_3(3), STR_2(60), STR_1(3), 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  tmpval          4    0        struct .
  6914 ;;  cp              3    0        PTR const unsigned char 
  6915 ;;  val             2   38[BANK0 ] unsigned int 
  6916 ;;  ap              2   36[BANK0 ] PTR void [1]
  6917 ;;		 -> ?_printf(2), 
  6918 ;;  len             2    0        unsigned int 
  6919 ;;  c               1   40[BANK0 ] char 
  6920 ;;  flag            1   35[BANK0 ] unsigned char 
  6921 ;;  prec            1   34[BANK0 ] char 
  6922 ;; Return value:  Size  Location     Type
  6923 ;;                  2   21[BANK0 ] int 
  6924 ;; Registers used:
  6925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6926 ;; Tracked objects:
  6927 ;;		On entry : 0/0
  6928 ;;		On exit  : 0/0
  6929 ;;		Unchanged: 0/0
  6930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6931 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6935 ;;Total ram usage:       20 bytes
  6936 ;; Hardware stack levels used:    1
  6937 ;; Hardware stack levels required when called:   12
  6938 ;; This function calls:
  6939 ;;		___lwdiv
  6940 ;;		___lwmod
  6941 ;;		_putch
  6942 ;; This function is called by:
  6943 ;;		_findClosestWall
  6944 ;;		_mode1
  6945 ;;		_mode2
  6946 ;;		_mode4
  6947 ;;		_main
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text22
  6952  0124F4                     __ptext22:
  6953                           	opt stack 0
  6954  0124F4                     _printf:
  6955                           	opt stack 18
  6956                           
  6957                           ;doprnt.c: 466: va_list ap;
  6958                           ;doprnt.c: 499: signed char c;
  6959                           ;doprnt.c: 506: signed char prec;
  6960                           ;doprnt.c: 508: unsigned char flag;
  6961                           ;doprnt.c: 523: union {
  6962                           ;doprnt.c: 524: unsigned long vd;
  6963                           ;doprnt.c: 525: double integ;
  6964                           ;doprnt.c: 526: } tmpval;
  6965                           ;doprnt.c: 528: unsigned int val;
  6966                           ;doprnt.c: 529: unsigned len;
  6967                           ;doprnt.c: 530: const char * cp;
  6968                           ;doprnt.c: 533: *ap = __va_start();
  6969                           
  6970                           ;incstack = 0
  6971  0124F4  0ED1               	movlw	low (?_printf+2)
  6972  0124F6  0100               	movlb	0	; () banked
  6973  0124F8  6FDE               	movwf	printf@ap& (0+255),b
  6974  0124FA  0E00               	movlw	high (?_printf+2)
  6975  0124FC  0100               	movlb	0	; () banked
  6976  0124FE  6FDF               	movwf	(printf@ap+1)& (0+255),b
  6977                           
  6978                           ;doprnt.c: 536: while(c = *f++) {
  6979  012500  D0C9               	goto	u11120
  6980  012502                     
  6981                           ; BSR set to: 0
  6982                           ;doprnt.c: 538: if(c != '%')
  6983                           
  6984                           ; BSR set to: 0
  6985  012502  0E25               	movlw	37
  6986  012504  0100               	movlb	0	; () banked
  6987  012506  19E2               	xorwf	printf@c& (0+255),w,b
  6988  012508  B4D8               	btfsc	status,2,c
  6989  01250A  D005               	goto	l2428
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;doprnt.c: 540: {
  6993                           ;doprnt.c: 541: (putch(c) );
  6994  01250C  0100               	movlb	0	; () banked
  6995  01250E  51E2               	movf	printf@c& (0+255),w,b
  6996  012510  EC32  F0B3         	call	_putch
  6997                           
  6998                           ;doprnt.c: 542: continue;
  6999  012514  D0BF               	goto	u11120
  7000  012516                     l2428:
  7001                           
  7002                           ;doprnt.c: 543: }
  7003                           ;doprnt.c: 548: flag = 0;
  7004  012516  0E00               	movlw	0
  7005  012518  0100               	movlb	0	; () banked
  7006  01251A  6FDD               	movwf	printf@flag& (0+255),b
  7007                           
  7008                           ;doprnt.c: 635: switch(c = *f++) {
  7009  01251C  D014               	goto	l2429
  7010  01251E                     
  7011                           ; BSR set to: 0
  7012                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7013                           
  7014                           ; BSR set to: 0
  7015  01251E  C0DE  FFD9         	movff	printf@ap,fsr2l
  7016  012522  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7017  012526  50DF               	movf	indf2,w,c
  7018  012528  0100               	movlb	0	; () banked
  7019  01252A  6FE2               	movwf	printf@c& (0+255),b
  7020                           
  7021                           ; BSR set to: 0
  7022  01252C  0E02               	movlw	2
  7023  01252E  0100               	movlb	0	; () banked
  7024  012530  27DE               	addwf	printf@ap& (0+255),f,b
  7025  012532  0E00               	movlw	0
  7026  012534  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7027  012536                     
  7028                           ; BSR set to: 0
  7029                           ;doprnt.c: 809: (putch(c) );
  7030                           
  7031                           ; BSR set to: 0
  7032  012536  0100               	movlb	0	; () banked
  7033  012538  51E2               	movf	printf@c& (0+255),w,b
  7034  01253A  EC32  F0B3         	call	_putch
  7035                           
  7036                           ;doprnt.c: 810: continue;
  7037  01253E  D0AA               	goto	u11120
  7038  012540                     
  7039                           ;doprnt.c: 818: flag |= 0x40;
  7040  012540  0100               	movlb	0	; () banked
  7041  012542  8DDD               	bsf	printf@flag& (0+255),6,b
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;doprnt.c: 822: }
  7045                           
  7046                           ;doprnt.c: 819: break;
  7047  012544  D01E               	goto	l2434
  7048  012546                     l2429:
  7049                           
  7050                           ; BSR set to: 0
  7051                           
  7052                           ; BSR set to: 0
  7053  012546  C0CF  FFF6         	movff	printf@f,tblptrl
  7054  01254A  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7055  01254E  0100               	movlb	0	; () banked
  7056  012550  4BCF               	infsnz	printf@f& (0+255),f,b
  7057  012552  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7058  012554                     	if	0	;tblptru may be non-zero
  7059  012554                     	endif
  7060  012554                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7061  012554  0E00               	movlw	low (__mediumconst shr (0+16))
  7062  012556  6EF8               	movwf	tblptru,c
  7063  012558                     	endif
  7064  012558  0008               	tblrd		*
  7065  01255A  CFF5 F0E2          	movff	tablat,printf@c
  7066  01255E  0100               	movlb	0	; () banked
  7067  012560  51E2               	movf	printf@c& (0+255),w,b
  7068                           
  7069                           ; Switch size 1, requested type "space"
  7070                           ; Number of cases is 5, Range of values is 0 to 117
  7071                           ; switch strategies available:
  7072                           ; Name         Instructions Cycles
  7073                           ; simple_byte           16     9 (average)
  7074                           ;	Chosen strategy is simple_byte
  7075  012562  0A00               	xorlw	0	; case 0
  7076  012564  B4D8               	btfsc	status,2,c
  7077  012566  0012               	return	
  7078  012568  0A63               	xorlw	99	; case 99
  7079  01256A  B4D8               	btfsc	status,2,c
  7080  01256C  D7D8               	goto	l2435
  7081  01256E  0A07               	xorlw	7	; case 100
  7082  012570  B4D8               	btfsc	status,2,c
  7083  012572  D007               	goto	l2434
  7084  012574  0A0D               	xorlw	13	; case 105
  7085  012576  B4D8               	btfsc	status,2,c
  7086  012578  D004               	goto	l2434
  7087  01257A  0A1C               	xorlw	28	; case 117
  7088  01257C  B4D8               	btfsc	status,2,c
  7089  01257E  D7E0               	goto	l2437
  7090  012580  D7DA               	goto	l2436
  7091  012582                     l2434:
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7095  012582  0100               	movlb	0	; () banked
  7096  012584  BDDD               	btfsc	printf@flag& (0+255),6,b
  7097  012586  D019               	goto	l2438
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;doprnt.c: 1253: {
  7101                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7102  012588  C0DE  FFD9         	movff	printf@ap,fsr2l
  7103  01258C  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7104  012590  CFDE F0E0          	movff	postinc2,printf@val
  7105  012594  CFDD F0E1          	movff	postdec2,printf@val+1
  7106                           
  7107                           ; BSR set to: 0
  7108  012598  0E02               	movlw	2
  7109  01259A  0100               	movlb	0	; () banked
  7110  01259C  27DE               	addwf	printf@ap& (0+255),f,b
  7111  01259E  0E00               	movlw	0
  7112  0125A0  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;doprnt.c: 1261: if((int)val < 0) {
  7116  0125A2  0100               	movlb	0	; () banked
  7117  0125A4  AFE1               	btfss	(printf@val+1)& (0+255),7,b
  7118  0125A6  D016               	goto	l2440
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;doprnt.c: 1262: flag |= 0x03;
  7122  0125A8  0E03               	movlw	3
  7123  0125AA  0100               	movlb	0	; () banked
  7124  0125AC  13DD               	iorwf	printf@flag& (0+255),f,b
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;doprnt.c: 1263: val = -val;
  7128  0125AE  0100               	movlb	0	; () banked
  7129  0125B0  6DE0               	negf	printf@val& (0+255),b
  7130  0125B2  1FE1               	comf	(printf@val+1)& (0+255),f,b
  7131  0125B4  B0D8               	btfsc	status,0,c
  7132  0125B6  2BE1               	incf	(printf@val+1)& (0+255),f,b
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;doprnt.c: 1264: }
  7136                           ;doprnt.c: 1266: }
  7137  0125B8  D00D               	goto	l2440
  7138  0125BA                     l2438:
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;doprnt.c: 1268: else
  7142                           ;doprnt.c: 1273: {
  7143                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7144                           
  7145                           ; BSR set to: 0
  7146  0125BA  C0DE  FFD9         	movff	printf@ap,fsr2l
  7147  0125BE  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7148  0125C2  CFDE F0E0          	movff	postinc2,printf@val
  7149  0125C6  CFDD F0E1          	movff	postdec2,printf@val+1
  7150                           
  7151                           ; BSR set to: 0
  7152  0125CA  0E02               	movlw	2
  7153  0125CC  0100               	movlb	0	; () banked
  7154  0125CE  27DE               	addwf	printf@ap& (0+255),f,b
  7155  0125D0  0E00               	movlw	0
  7156  0125D2  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7157  0125D4                     l2440:
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;doprnt.c: 1287: }
  7161                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7162                           
  7163                           ; BSR set to: 0
  7164  0125D4  0E01               	movlw	1
  7165  0125D6  0100               	movlb	0	; () banked
  7166  0125D8  6FE2               	movwf	printf@c& (0+255),b
  7167  0125DA                     l14253:
  7168                           
  7169                           ; BSR set to: 0
  7170  0125DA  0E05               	movlw	5
  7171  0125DC  0100               	movlb	0	; () banked
  7172  0125DE  19E2               	xorwf	printf@c& (0+255),w,b
  7173  0125E0  B4D8               	btfsc	status,2,c
  7174  0125E2  D019               	goto	u11100
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;doprnt.c: 1306: if(val < dpowers[c])
  7178                           
  7179                           ; BSR set to: 0
  7180                           
  7181                           ; BSR set to: 0
  7182  0125E4  0100               	movlb	0	; () banked
  7183  0125E6  51E2               	movf	printf@c& (0+255),w,b
  7184  0125E8  0D02               	mullw	2
  7185  0125EA  0E05               	movlw	low _dpowers
  7186  0125EC  24F3               	addwf	prodl,w,c
  7187  0125EE  6EF6               	movwf	tblptrl,c
  7188  0125F0  0EFD               	movlw	high _dpowers
  7189  0125F2  20F4               	addwfc	prodh,w,c
  7190  0125F4  6EF7               	movwf	tblptrh,c
  7191  0125F6                     	if	1	;There are 3 active tblptr bytes
  7192  0125F6  6AF8               	clrf	tblptru,c
  7193  0125F8  0E00               	movlw	low (__mediumconst shr (0+16))
  7194  0125FA  22F8               	addwfc	tblptru,f,c
  7195  0125FC                     	endif
  7196  0125FC  0009               	tblrd		*+
  7197  0125FE  50F5               	movf	tablat,w,c
  7198  012600  0100               	movlb	0	; () banked
  7199  012602  5DE0               	subwf	printf@val& (0+255),w,b
  7200  012604  0009               	tblrd		*+
  7201  012606  50F5               	movf	tablat,w,c
  7202  012608  0100               	movlb	0	; () banked
  7203  01260A  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7204  01260C  A0D8               	btfss	status,0,c
  7205  01260E  D003               	goto	u11100
  7206                           
  7207                           ; BSR set to: 0
  7208                           
  7209                           ; BSR set to: 0
  7210                           
  7211                           ; BSR set to: 0
  7212                           ;doprnt.c: 1307: break;
  7213  012610  0100               	movlb	0	; () banked
  7214  012612  2BE2               	incf	printf@c& (0+255),f,b
  7215  012614  D7E2               	goto	l14253
  7216  012616                     u11100:
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;doprnt.c: 1422: {
  7220                           ;doprnt.c: 1438: if(flag & 0x03)
  7221                           
  7222                           ; BSR set to: 0
  7223  012616  C0DD  F0DB         	movff	printf@flag,??_printf
  7224  01261A  0E03               	movlw	3
  7225  01261C  0100               	movlb	0	; () banked
  7226  01261E  17DB               	andwf	??_printf& (0+255),f,b
  7227  012620  B4D8               	btfsc	status,2,c
  7228  012622  D003               	goto	l2444
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;doprnt.c: 1439: (putch('-') );
  7232  012624  0E2D               	movlw	45
  7233  012626  EC32  F0B3         	call	_putch
  7234  01262A                     l2444:
  7235                           
  7236                           ;doprnt.c: 1469: }
  7237                           ;doprnt.c: 1472: prec = c;
  7238  01262A  C0E2  F0DC         	movff	printf@c,printf@prec
  7239                           
  7240                           ;doprnt.c: 1474: while(prec--) {
  7241  01262E  D02C               	goto	l2445
  7242  012630                     
  7243                           ;doprnt.c: 1478: {
  7244                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7245  012630  0100               	movlb	0	; () banked
  7246  012632  51DC               	movf	printf@prec& (0+255),w,b
  7247  012634  0D02               	mullw	2
  7248  012636  0E05               	movlw	low _dpowers
  7249  012638  24F3               	addwf	prodl,w,c
  7250  01263A  6EF6               	movwf	tblptrl,c
  7251  01263C  0EFD               	movlw	high _dpowers
  7252  01263E  20F4               	addwfc	prodh,w,c
  7253  012640  6EF7               	movwf	tblptrh,c
  7254  012642                     	if	1	;There are 3 active tblptr bytes
  7255  012642  6AF8               	clrf	tblptru,c
  7256  012644  0E00               	movlw	low (__mediumconst shr (0+16))
  7257  012646  22F8               	addwfc	tblptru,f,c
  7258  012648                     	endif
  7259  012648  0009               	tblrd		*+
  7260  01264A  CFF5 F0BC          	movff	tablat,___lwdiv@divisor
  7261  01264E  000A               	tblrd		*-
  7262  012650  CFF5 F0BD          	movff	tablat,___lwdiv@divisor+1
  7263  012654  C0E0  F0BA         	movff	printf@val,___lwdiv@dividend
  7264  012658  C0E1  F0BB         	movff	printf@val+1,___lwdiv@dividend+1
  7265  01265C  ECE0  F0A8         	call	___lwdiv	;wreg free
  7266  012660  C0BA  F0C1         	movff	?___lwdiv,___lwmod@dividend
  7267  012664  C0BB  F0C2         	movff	?___lwdiv+1,___lwmod@dividend+1
  7268  012668  0E00               	movlw	0
  7269  01266A  0100               	movlb	0	; () banked
  7270  01266C  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  7271  01266E  0E0A               	movlw	10
  7272  012670  6FC3               	movwf	___lwmod@divisor& (0+255),b
  7273  012672  EC7D  F0AC         	call	___lwmod	;wreg free
  7274  012676  0100               	movlb	0	; () banked
  7275  012678  51C1               	movf	?___lwmod& (0+255),w,b
  7276  01267A  0F30               	addlw	48
  7277  01267C  0100               	movlb	0	; () banked
  7278  01267E  6FE2               	movwf	printf@c& (0+255),b
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;doprnt.c: 1523: }
  7282                           ;doprnt.c: 1524: (putch(c) );
  7283  012680  0100               	movlb	0	; () banked
  7284  012682  51E2               	movf	printf@c& (0+255),w,b
  7285  012684  EC32  F0B3         	call	_putch
  7286  012688                     l2445:
  7287  012688  0100               	movlb	0	; () banked
  7288  01268A  07DC               	decf	printf@prec& (0+255),f,b
  7289  01268C  0100               	movlb	0	; () banked
  7290  01268E  29DC               	incf	printf@prec& (0+255),w,b
  7291  012690  A4D8               	btfss	status,2,c
  7292  012692  D7CE               	goto	l2446
  7293  012694                     u11120:
  7294                           
  7295                           ; BSR set to: 0
  7296                           
  7297                           ; BSR set to: 0
  7298  012694  C0CF  FFF6         	movff	printf@f,tblptrl
  7299  012698  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7300  01269C  0100               	movlb	0	; () banked
  7301  01269E  4BCF               	infsnz	printf@f& (0+255),f,b
  7302  0126A0  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7303  0126A2                     	if	0	;tblptru may be non-zero
  7304  0126A2                     	endif
  7305  0126A2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7306  0126A2  0E00               	movlw	low (__mediumconst shr (0+16))
  7307  0126A4  6EF8               	movwf	tblptru,c
  7308  0126A6                     	endif
  7309  0126A6  0008               	tblrd		*
  7310  0126A8  CFF5 F0E2          	movff	tablat,printf@c
  7311  0126AC  0100               	movlb	0	; () banked
  7312  0126AE  51E2               	movf	printf@c& (0+255),w,b
  7313  0126B0  B4D8               	btfsc	status,2,c
  7314  0126B2  0012               	return	
  7315  0126B4  D726               	goto	l2427
  7316  0126B6                     __end_of_printf:
  7317                           	opt stack 0
  7318                           tblptru	equ	0xFF8
  7319                           tblptrh	equ	0xFF7
  7320                           tblptrl	equ	0xFF6
  7321                           tablat	equ	0xFF5
  7322                           prodh	equ	0xFF4
  7323                           prodl	equ	0xFF3
  7324                           postinc0	equ	0xFEE
  7325                           wreg	equ	0xFE8
  7326                           postdec1	equ	0xFE5
  7327                           fsr1h	equ	0xFE2
  7328                           fsr1l	equ	0xFE1
  7329                           indf2	equ	0xFDF
  7330                           postinc2	equ	0xFDE
  7331                           postdec2	equ	0xFDD
  7332                           fsr2h	equ	0xFDA
  7333                           fsr2l	equ	0xFD9
  7334                           status	equ	0xFD8
  7335                           
  7336 ;; *************** function _putch *****************
  7337 ;; Defined at:
  7338 ;;		line 454 in file "Library/Console.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;  c               1    wreg     unsigned char 
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;  c               1   20[BANK0 ] unsigned char 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      void 
  7345 ;; Registers used:
  7346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;Total ram usage:        1 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:   11
  7359 ;; This function calls:
  7360 ;;		_Console_PrintChar
  7361 ;; This function is called by:
  7362 ;;		_printf
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text23
  7367  016664                     __ptext23:
  7368                           	opt stack 0
  7369  016664                     _putch:
  7370                           	opt stack 18
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;incstack = 0
  7374                           ;putch@c stored from wreg
  7375  016664  0100               	movlb	0	; () banked
  7376  016666  6FCE               	movwf	putch@c& (0+255),b
  7377                           
  7378                           ;Console.c: 456: Console_PrintChar(c);
  7379  016668  0100               	movlb	0	; () banked
  7380  01666A  51CE               	movf	putch@c& (0+255),w,b
  7381  01666C  EC3B  F094         	call	_Console_PrintChar
  7382  016670  0012               	return		;funcret
  7383  016672                     __end_of_putch:
  7384                           	opt stack 0
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           postinc0	equ	0xFEE
  7392                           wreg	equ	0xFE8
  7393                           postdec1	equ	0xFE5
  7394                           fsr1h	equ	0xFE2
  7395                           fsr1l	equ	0xFE1
  7396                           indf2	equ	0xFDF
  7397                           postinc2	equ	0xFDE
  7398                           postdec2	equ	0xFDD
  7399                           fsr2h	equ	0xFDA
  7400                           fsr2l	equ	0xFD9
  7401                           status	equ	0xFD8
  7402                           
  7403 ;; *************** function _Console_PrintChar *****************
  7404 ;; Defined at:
  7405 ;;		line 322 in file "Library/Console.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;  pInput          1    wreg     unsigned char 
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;  pInput          1   19[BANK0 ] unsigned char 
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  1    wreg      void 
  7412 ;; Registers used:
  7413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;Total ram usage:        4 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:   10
  7426 ;; This function calls:
  7427 ;;		_Console_Backspace
  7428 ;;		_Console_FormFeed
  7429 ;;		_Console_IncrementCursor
  7430 ;;		_Console_NewLine
  7431 ;;		_Console_ResetCursor
  7432 ;;		_Console_Tab
  7433 ;; This function is called by:
  7434 ;;		_putch
  7435 ;;		_Console_PrintString
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           	psect	text24
  7440  012876                     __ptext24:
  7441                           	opt stack 0
  7442  012876                     _Console_PrintChar:
  7443                           	opt stack 18
  7444                           
  7445                           ;incstack = 0
  7446                           ;Console_PrintChar@pInput stored from wreg
  7447  012876  0100               	movlb	0	; () banked
  7448  012878  6FCD               	movwf	Console_PrintChar@pInput& (0+255),b
  7449                           
  7450                           ;Console.c: 324: switch(pInput)
  7451  01287A  D0B1               	goto	l1036
  7452  01287C                     
  7453                           ;Console.c: 327: case '\n':
  7454                           ;Console.c: 328: Console_NewLine();
  7455  01287C  EC57  F0A5         	call	_Console_NewLine	;wreg free
  7456                           
  7457                           ;Console.c: 329: return;
  7458  012880  0012               	return	
  7459  012882                     
  7460                           ;Console.c: 331: Console_Backspace();
  7461  012882  ECAE  F0AC         	call	_Console_Backspace	;wreg free
  7462                           
  7463                           ;Console.c: 332: return;
  7464  012886  0012               	return	
  7465  012888                     
  7466                           ;Console.c: 334: Console_FormFeed();
  7467  012888  EC8A  F0A6         	call	_Console_FormFeed	;wreg free
  7468                           
  7469                           ;Console.c: 335: return;
  7470  01288C  0012               	return	
  7471  01288E                     
  7472                           ;Console.c: 337: Console_Tab();
  7473  01288E  EC2A  F0A0         	call	_Console_Tab	;wreg free
  7474                           
  7475                           ;Console.c: 338: return;
  7476  012892  0012               	return	
  7477  012894                     
  7478                           ;Console.c: 340: Console_IncrementCursor();
  7479  012894  ECB5  F0AB         	call	_Console_IncrementCursor	;wreg free
  7480                           
  7481                           ;Console.c: 341: return;
  7482  012898  0012               	return	
  7483  01289A                     
  7484                           ;Console.c: 343: Console_ResetCursor();
  7485  01289A  ECE9  F0B1         	call	_Console_ResetCursor	;wreg free
  7486                           
  7487                           ;Console.c: 344: return;
  7488  01289E  0012               	return	
  7489  0128A0                     
  7490                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7491                           
  7492                           ;Console.c: 349: default:
  7493  0128A0  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7494  0128A4  0E7F               	movlw	127
  7495  0128A6  0100               	movlb	0	; () banked
  7496  0128A8  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7497  0128AA  0100               	movlb	0	; () banked
  7498  0128AC  518E               	movf	_lBufferY& (0+255),w,b
  7499  0128AE  0D14               	mullw	20
  7500  0128B0  0EAA               	movlw	low _lBuffer
  7501  0128B2  0100               	movlb	0	; () banked
  7502  0128B4  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7503  0128B6  0E04               	movlw	high _lBuffer
  7504  0128B8  0100               	movlb	0	; () banked
  7505  0128BA  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7506  0128BC  50F3               	movf	prodl,w,c
  7507  0128BE  0100               	movlb	0	; () banked
  7508  0128C0  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7509  0128C2  50F4               	movf	prodh,w,c
  7510  0128C4  0100               	movlb	0	; () banked
  7511  0128C6  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7512  0128C8  0100               	movlb	0	; () banked
  7513  0128CA  518F               	movf	_lBufferX& (0+255),w,b
  7514  0128CC  0D01               	mullw	1
  7515  0128CE  50F3               	movf	prodl,w,c
  7516  0128D0  0100               	movlb	0	; () banked
  7517  0128D2  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7518  0128D4  6ED9               	movwf	fsr2l,c
  7519  0128D6  50F4               	movf	prodh,w,c
  7520  0128D8  0100               	movlb	0	; () banked
  7521  0128DA  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7522  0128DC  6EDA               	movwf	fsr2h,c
  7523  0128DE  50DF               	movf	indf2,w,c
  7524  0128E0  0B7F               	andlw	127
  7525  0128E2  0100               	movlb	0	; () banked
  7526  0128E4  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7527  0128E6  B4D8               	btfsc	status,2,c
  7528  0128E8  D02E               	goto	l1047
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;Console.c: 351: {
  7532                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7533  0128EA  0E01               	movlw	1
  7534  0128EC  0100               	movlb	0	; () banked
  7535  0128EE  6FFF               	movwf	_change& (0+255),b
  7536                           
  7537                           ; BSR set to: 0
  7538  0128F0  0100               	movlb	0	; () banked
  7539  0128F2  518E               	movf	_lBufferY& (0+255),w,b
  7540  0128F4  0D14               	mullw	20
  7541  0128F6  0EAA               	movlw	low _lBuffer
  7542  0128F8  0100               	movlb	0	; () banked
  7543  0128FA  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7544  0128FC  0E04               	movlw	high _lBuffer
  7545  0128FE  0100               	movlb	0	; () banked
  7546  012900  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7547  012902  50F3               	movf	prodl,w,c
  7548  012904  0100               	movlb	0	; () banked
  7549  012906  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7550  012908  50F4               	movf	prodh,w,c
  7551  01290A  0100               	movlb	0	; () banked
  7552  01290C  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7553  01290E  0100               	movlb	0	; () banked
  7554  012910  518F               	movf	_lBufferX& (0+255),w,b
  7555  012912  0D01               	mullw	1
  7556  012914  50F3               	movf	prodl,w,c
  7557  012916  0100               	movlb	0	; () banked
  7558  012918  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7559  01291A  6ED9               	movwf	fsr2l,c
  7560  01291C  50F4               	movf	prodh,w,c
  7561  01291E  0100               	movlb	0	; () banked
  7562  012920  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7563  012922  6EDA               	movwf	fsr2h,c
  7564  012924  0100               	movlb	0	; () banked
  7565  012926  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7566  012928  0980               	iorlw	128
  7567  01292A  6EDF               	movwf	indf2,c
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  7571  01292C  0100               	movlb	0	; () banked
  7572  01292E  518E               	movf	_lBufferY& (0+255),w,b
  7573  012930  0D02               	mullw	2
  7574  012932  0E00               	movlw	low _lCBuffer
  7575  012934  24F3               	addwf	prodl,w,c
  7576  012936  6ED9               	movwf	fsr2l,c
  7577  012938  0E03               	movlw	high _lCBuffer
  7578  01293A  20F4               	addwfc	prodh,w,c
  7579  01293C  6EDA               	movwf	fsr2h,c
  7580  01293E  C0FD  FFDE         	movff	_gForecolour,postinc2
  7581  012942  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  7582  012946                     l1047:
  7583                           
  7584                           ; BSR set to: 0
  7585                           ;Console.c: 354: }
  7586                           ;Console.c: 368: if(Console_IncrementCursor())
  7587                           
  7588                           ; BSR set to: 0
  7589  012946  ECB5  F0AB         	call	_Console_IncrementCursor	;wreg free
  7590  01294A  0900               	iorlw	0
  7591  01294C  B4D8               	btfsc	status,2,c
  7592  01294E  0012               	return	
  7593                           
  7594                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7595  012950  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7596  012954  0E7F               	movlw	127
  7597  012956  0100               	movlb	0	; () banked
  7598  012958  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7599  01295A  0100               	movlb	0	; () banked
  7600  01295C  518E               	movf	_lBufferY& (0+255),w,b
  7601  01295E  0D14               	mullw	20
  7602  012960  0EAA               	movlw	low _lBuffer
  7603  012962  0100               	movlb	0	; () banked
  7604  012964  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7605  012966  0E04               	movlw	high _lBuffer
  7606  012968  0100               	movlb	0	; () banked
  7607  01296A  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7608  01296C  50F3               	movf	prodl,w,c
  7609  01296E  0100               	movlb	0	; () banked
  7610  012970  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7611  012972  50F4               	movf	prodh,w,c
  7612  012974  0100               	movlb	0	; () banked
  7613  012976  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7614  012978  0100               	movlb	0	; () banked
  7615  01297A  518F               	movf	_lBufferX& (0+255),w,b
  7616  01297C  0D01               	mullw	1
  7617  01297E  50F3               	movf	prodl,w,c
  7618  012980  0100               	movlb	0	; () banked
  7619  012982  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7620  012984  6ED9               	movwf	fsr2l,c
  7621  012986  50F4               	movf	prodh,w,c
  7622  012988  0100               	movlb	0	; () banked
  7623  01298A  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7624  01298C  6EDA               	movwf	fsr2h,c
  7625  01298E  50DF               	movf	indf2,w,c
  7626  012990  0B7F               	andlw	127
  7627  012992  0100               	movlb	0	; () banked
  7628  012994  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7629  012996  B4D8               	btfsc	status,2,c
  7630  012998  0012               	return	
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7634  01299A  0E01               	movlw	1
  7635  01299C  0100               	movlb	0	; () banked
  7636  01299E  6FFF               	movwf	_change& (0+255),b
  7637                           
  7638                           ; BSR set to: 0
  7639  0129A0  0100               	movlb	0	; () banked
  7640  0129A2  518E               	movf	_lBufferY& (0+255),w,b
  7641  0129A4  0D14               	mullw	20
  7642  0129A6  0EAA               	movlw	low _lBuffer
  7643  0129A8  0100               	movlb	0	; () banked
  7644  0129AA  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7645  0129AC  0E04               	movlw	high _lBuffer
  7646  0129AE  0100               	movlb	0	; () banked
  7647  0129B0  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7648  0129B2  50F3               	movf	prodl,w,c
  7649  0129B4  0100               	movlb	0	; () banked
  7650  0129B6  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7651  0129B8  50F4               	movf	prodh,w,c
  7652  0129BA  0100               	movlb	0	; () banked
  7653  0129BC  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7654  0129BE  0100               	movlb	0	; () banked
  7655  0129C0  518F               	movf	_lBufferX& (0+255),w,b
  7656  0129C2  0D01               	mullw	1
  7657  0129C4  50F3               	movf	prodl,w,c
  7658  0129C6  0100               	movlb	0	; () banked
  7659  0129C8  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7660  0129CA  6ED9               	movwf	fsr2l,c
  7661  0129CC  50F4               	movf	prodh,w,c
  7662  0129CE  0100               	movlb	0	; () banked
  7663  0129D0  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7664  0129D2  6EDA               	movwf	fsr2h,c
  7665  0129D4  0100               	movlb	0	; () banked
  7666  0129D6  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7667  0129D8  0980               	iorlw	128
  7668  0129DA  6EDF               	movwf	indf2,c
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;Console.c: 372: };
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;Console.c: 371: return;
  7675                           
  7676                           ; BSR set to: 0
  7677                           
  7678                           ; BSR set to: 0
  7679  0129DC  0012               	return	
  7680  0129DE                     l1036:
  7681                           
  7682                           ; BSR set to: 0
  7683  0129DE  0100               	movlb	0	; () banked
  7684  0129E0  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7685                           
  7686                           ; Switch size 1, requested type "space"
  7687                           ; Number of cases is 8, Range of values is 7 to 35
  7688                           ; switch strategies available:
  7689                           ; Name         Instructions Cycles
  7690                           ; simple_byte           25    13 (average)
  7691                           ;	Chosen strategy is simple_byte
  7692  0129E2  0A07               	xorlw	7	; case 7
  7693  0129E4  B4D8               	btfsc	status,2,c
  7694  0129E6  D756               	goto	l1043
  7695  0129E8  0A0F               	xorlw	15	; case 8
  7696  0129EA  B4D8               	btfsc	status,2,c
  7697  0129EC  D74A               	goto	l1040
  7698  0129EE  0A01               	xorlw	1	; case 9
  7699  0129F0  B4D8               	btfsc	status,2,c
  7700  0129F2  D74D               	goto	l1042
  7701  0129F4  0A03               	xorlw	3	; case 10
  7702  0129F6  B4D8               	btfsc	status,2,c
  7703  0129F8  D741               	goto	l1037
  7704  0129FA  0A06               	xorlw	6	; case 12
  7705  0129FC  B4D8               	btfsc	status,2,c
  7706  0129FE  D744               	goto	l1041
  7707  012A00  0A01               	xorlw	1	; case 13
  7708  012A02  B4D8               	btfsc	status,2,c
  7709  012A04  D73B               	goto	l1037
  7710  012A06  0A2D               	xorlw	45	; case 32
  7711  012A08  B4D8               	btfsc	status,2,c
  7712  012A0A  D74A               	goto	l1045
  7713  012A0C  0A03               	xorlw	3	; case 35
  7714  012A0E  B4D8               	btfsc	status,2,c
  7715  012A10  D744               	goto	l1044
  7716  012A12  D746               	goto	l1045
  7717  012A14                     __end_of_Console_PrintChar:
  7718                           	opt stack 0
  7719                           tblptru	equ	0xFF8
  7720                           tblptrh	equ	0xFF7
  7721                           tblptrl	equ	0xFF6
  7722                           tablat	equ	0xFF5
  7723                           prodh	equ	0xFF4
  7724                           prodl	equ	0xFF3
  7725                           postinc0	equ	0xFEE
  7726                           wreg	equ	0xFE8
  7727                           postdec1	equ	0xFE5
  7728                           fsr1h	equ	0xFE2
  7729                           fsr1l	equ	0xFE1
  7730                           indf2	equ	0xFDF
  7731                           postinc2	equ	0xFDE
  7732                           postdec2	equ	0xFDD
  7733                           fsr2h	equ	0xFDA
  7734                           fsr2l	equ	0xFD9
  7735                           status	equ	0xFD8
  7736                           
  7737 ;; *************** function _Console_Tab *****************
  7738 ;; Defined at:
  7739 ;;		line 260 in file "Library/Console.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;		None
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;  c               1   15[BANK0 ] unsigned char 
  7744 ;;  i               1   14[BANK0 ] unsigned char 
  7745 ;;  t               1   13[BANK0 ] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      void 
  7748 ;; Registers used:
  7749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;Total ram usage:        8 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    9
  7762 ;; This function calls:
  7763 ;;		_Console_ClearCursor
  7764 ;;		_Console_IncrementCursor
  7765 ;;		___awdiv
  7766 ;; This function is called by:
  7767 ;;		_Console_PrintChar
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           	psect	text25
  7772  014054                     __ptext25:
  7773                           	opt stack 0
  7774  014054                     _Console_Tab:
  7775                           	opt stack 18
  7776                           
  7777                           ;Console.c: 262: UINT8 i = 0;
  7778                           
  7779                           ;incstack = 0
  7780  014054  0E00               	movlw	0
  7781  014056  0100               	movlb	0	; () banked
  7782  014058  6FC8               	movwf	Console_Tab@i& (0+255),b
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  7786  01405A  0EFA               	movlw	250
  7787  01405C  2447               	addwf	_gCursor,w,c
  7788  01405E  0100               	movlb	0	; () banked
  7789  014060  6FBA               	movwf	___awdiv@dividend& (0+255),b
  7790  014062  0EFF               	movlw	255
  7791  014064  2048               	addwfc	_gCursor+1,w,c
  7792  014066  0100               	movlb	0	; () banked
  7793  014068  6FBB               	movwf	(___awdiv@dividend+1)& (0+255),b
  7794  01406A  0E00               	movlw	0
  7795  01406C  0100               	movlb	0	; () banked
  7796  01406E  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7797  014070  0E06               	movlw	6
  7798  014072  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7799  014074  ECEB  F0A0         	call	___awdiv	;wreg free
  7800  014078  0100               	movlb	0	; () banked
  7801  01407A  51BA               	movf	?___awdiv& (0+255),w,b
  7802  01407C  0100               	movlb	0	; () banked
  7803  01407E  6FC9               	movwf	Console_Tab@c& (0+255),b
  7804                           
  7805                           ; BSR set to: 0
  7806                           ;Console.c: 264: UINT8 t = c/4;
  7807  014080  C0C9  F0BA         	movff	Console_Tab@c,___awdiv@dividend
  7808  014084  0100               	movlb	0	; () banked
  7809  014086  6BBB               	clrf	(___awdiv@dividend+1)& (0+255),b
  7810  014088  0E00               	movlw	0
  7811  01408A  0100               	movlb	0	; () banked
  7812  01408C  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7813  01408E  0E04               	movlw	4
  7814  014090  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7815  014092  ECEB  F0A0         	call	___awdiv	;wreg free
  7816  014096  0100               	movlb	0	; () banked
  7817  014098  51BA               	movf	?___awdiv& (0+255),w,b
  7818  01409A  0100               	movlb	0	; () banked
  7819  01409C  6FC7               	movwf	Console_Tab@t& (0+255),b
  7820                           
  7821                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  7822  01409E  0E00               	movlw	0
  7823  0140A0  0100               	movlb	0	; () banked
  7824  0140A2  6FC8               	movwf	Console_Tab@i& (0+255),b
  7825  0140A4  D006               	goto	l1009
  7826  0140A6                     
  7827                           ; BSR set to: 0
  7828                           ;Console.c: 266: {
  7829                           ;Console.c: 267: Console_ClearCursor();
  7830                           
  7831                           ; BSR set to: 0
  7832  0140A6  EC62  F0AF         	call	_Console_ClearCursor	;wreg free
  7833                           
  7834                           ;Console.c: 268: Console_IncrementCursor();
  7835  0140AA  ECB5  F0AB         	call	_Console_IncrementCursor	;wreg free
  7836  0140AE  0100               	movlb	0	; () banked
  7837  0140B0  2BC8               	incf	Console_Tab@i& (0+255),f,b
  7838  0140B2                     l1009:
  7839                           
  7840                           ; BSR set to: 0
  7841                           
  7842                           ; BSR set to: 0
  7843  0140B2  0100               	movlb	0	; () banked
  7844  0140B4  51C7               	movf	Console_Tab@t& (0+255),w,b
  7845  0140B6  0D04               	mullw	4
  7846  0140B8  1EF3               	comf	prodl,f,c
  7847  0140BA  1EF4               	comf	prodh,f,c
  7848  0140BC  4AF3               	infsnz	prodl,f,c
  7849  0140BE  2AF4               	incf	prodh,f,c
  7850  0140C0  0100               	movlb	0	; () banked
  7851  0140C2  51C9               	movf	Console_Tab@c& (0+255),w,b
  7852  0140C4  0100               	movlb	0	; () banked
  7853  0140C6  6FC2               	movwf	??_Console_Tab& (0+255),b
  7854  0140C8  6BC3               	clrf	(??_Console_Tab+1)& (0+255),b
  7855  0140CA  50F3               	movf	prodl,w,c
  7856  0140CC  0100               	movlb	0	; () banked
  7857  0140CE  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7858  0140D0  50F4               	movf	prodh,w,c
  7859  0140D2  0100               	movlb	0	; () banked
  7860  0140D4  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7861  0140D6  0100               	movlb	0	; () banked
  7862  0140D8  1FC2               	comf	??_Console_Tab& (0+255),f,b
  7863  0140DA  1FC3               	comf	(??_Console_Tab+1)& (0+255),f,b
  7864  0140DC  4BC2               	infsnz	??_Console_Tab& (0+255),f,b
  7865  0140DE  2BC3               	incf	(??_Console_Tab+1)& (0+255),f,b
  7866  0140E0  0E04               	movlw	4
  7867  0140E2  0100               	movlb	0	; () banked
  7868  0140E4  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7869  0140E6  0E00               	movlw	0
  7870  0140E8  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7871  0140EA  0100               	movlb	0	; () banked
  7872  0140EC  51C8               	movf	Console_Tab@i& (0+255),w,b
  7873  0140EE  0100               	movlb	0	; () banked
  7874  0140F0  6FC4               	movwf	(??_Console_Tab+2)& (0+255),b
  7875  0140F2  6BC5               	clrf	(??_Console_Tab+3)& (0+255),b
  7876  0140F4  0100               	movlb	0	; () banked
  7877  0140F6  51C2               	movf	??_Console_Tab& (0+255),w,b
  7878  0140F8  0100               	movlb	0	; () banked
  7879  0140FA  5DC4               	subwf	(??_Console_Tab+2)& (0+255),w,b
  7880  0140FC  0100               	movlb	0	; () banked
  7881  0140FE  51C5               	movf	(??_Console_Tab+3)& (0+255),w,b
  7882  014100  0A80               	xorlw	128
  7883  014102  0100               	movlb	0	; () banked
  7884  014104  6FC6               	movwf	(??_Console_Tab+4)& (0+255),b
  7885  014106  0100               	movlb	0	; () banked
  7886  014108  51C3               	movf	(??_Console_Tab+1)& (0+255),w,b
  7887  01410A  0A80               	xorlw	128
  7888  01410C  0100               	movlb	0	; () banked
  7889  01410E  59C6               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  7890  014110  B0D8               	btfsc	status,0,c
  7891  014112  0012               	return	
  7892  014114  D7C8               	goto	l1010
  7893  014116                     __end_of_Console_Tab:
  7894                           	opt stack 0
  7895                           tblptru	equ	0xFF8
  7896                           tblptrh	equ	0xFF7
  7897                           tblptrl	equ	0xFF6
  7898                           tablat	equ	0xFF5
  7899                           prodh	equ	0xFF4
  7900                           prodl	equ	0xFF3
  7901                           postinc0	equ	0xFEE
  7902                           wreg	equ	0xFE8
  7903                           postdec1	equ	0xFE5
  7904                           fsr1h	equ	0xFE2
  7905                           fsr1l	equ	0xFE1
  7906                           indf2	equ	0xFDF
  7907                           postinc2	equ	0xFDE
  7908                           postdec2	equ	0xFDD
  7909                           fsr2h	equ	0xFDA
  7910                           fsr2l	equ	0xFD9
  7911                           status	equ	0xFD8
  7912                           
  7913 ;; *************** function ___awdiv *****************
  7914 ;; Defined at:
  7915 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  dividend        2    0[BANK0 ] int 
  7918 ;;  divisor         2    2[BANK0 ] int 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;  quotient        2    6[BANK0 ] int 
  7921 ;;  sign            1    5[BANK0 ] unsigned char 
  7922 ;;  counter         1    4[BANK0 ] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  2    0[BANK0 ] int 
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7932 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7935 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;Total ram usage:        8 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    7
  7939 ;; This function calls:
  7940 ;;		Nothing
  7941 ;; This function is called by:
  7942 ;;		_Console_Tab
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           	psect	text26
  7947  0141D6                     __ptext26:
  7948                           	opt stack 0
  7949  0141D6                     ___awdiv:
  7950                           	opt stack 19
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;incstack = 0
  7954  0141D6  0E00               	movlw	0
  7955  0141D8  0100               	movlb	0	; () banked
  7956  0141DA  6FBF               	movwf	___awdiv@sign& (0+255),b
  7957                           
  7958                           ; BSR set to: 0
  7959  0141DC  0100               	movlb	0	; () banked
  7960  0141DE  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7961  0141E0  D008               	goto	l2617
  7962                           
  7963                           ; BSR set to: 0
  7964  0141E2  0100               	movlb	0	; () banked
  7965  0141E4  6DBC               	negf	___awdiv@divisor& (0+255),b
  7966  0141E6  1FBD               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7967  0141E8  B0D8               	btfsc	status,0,c
  7968  0141EA  2BBD               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7969                           
  7970                           ; BSR set to: 0
  7971  0141EC  0E01               	movlw	1
  7972  0141EE  0100               	movlb	0	; () banked
  7973  0141F0  6FBF               	movwf	___awdiv@sign& (0+255),b
  7974  0141F2                     l2617:
  7975                           
  7976                           ; BSR set to: 0
  7977                           
  7978                           ; BSR set to: 0
  7979  0141F2  0100               	movlb	0	; () banked
  7980  0141F4  AFBB               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7981  0141F6  D008               	goto	l2618
  7982                           
  7983                           ; BSR set to: 0
  7984  0141F8  0100               	movlb	0	; () banked
  7985  0141FA  6DBA               	negf	___awdiv@dividend& (0+255),b
  7986  0141FC  1FBB               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7987  0141FE  B0D8               	btfsc	status,0,c
  7988  014200  2BBB               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7989                           
  7990                           ; BSR set to: 0
  7991  014202  0E01               	movlw	1
  7992  014204  0100               	movlb	0	; () banked
  7993  014206  1BBF               	xorwf	___awdiv@sign& (0+255),f,b
  7994  014208                     l2618:
  7995                           
  7996                           ; BSR set to: 0
  7997                           
  7998                           ; BSR set to: 0
  7999  014208  0E00               	movlw	0
  8000  01420A  0100               	movlb	0	; () banked
  8001  01420C  6FC1               	movwf	(___awdiv@quotient+1)& (0+255),b
  8002  01420E  0E00               	movlw	0
  8003  014210  6FC0               	movwf	___awdiv@quotient& (0+255),b
  8004                           
  8005                           ; BSR set to: 0
  8006  014212  0100               	movlb	0	; () banked
  8007  014214  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8008  014216  0100               	movlb	0	; () banked
  8009  014218  11BD               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8010  01421A  B4D8               	btfsc	status,2,c
  8011  01421C  D02C               	goto	l2625
  8012                           
  8013                           ; BSR set to: 0
  8014  01421E  0E01               	movlw	1
  8015  014220  0100               	movlb	0	; () banked
  8016  014222  6FBE               	movwf	___awdiv@counter& (0+255),b
  8017  014224  D006               	goto	l2620
  8018  014226                     
  8019                           ; BSR set to: 0
  8020                           
  8021                           ; BSR set to: 0
  8022  014226  0100               	movlb	0	; () banked
  8023  014228  90D8               	bcf	status,0,c
  8024  01422A  37BC               	rlcf	___awdiv@divisor& (0+255),f,b
  8025  01422C  37BD               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8026  01422E  0100               	movlb	0	; () banked
  8027  014230  2BBE               	incf	___awdiv@counter& (0+255),f,b
  8028  014232                     l2620:
  8029                           
  8030                           ; BSR set to: 0
  8031                           
  8032                           ; BSR set to: 0
  8033  014232  0100               	movlb	0	; () banked
  8034  014234  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8035  014236  D7F7               	goto	l2621
  8036  014238                     u9180:
  8037                           
  8038                           ; BSR set to: 0
  8039                           
  8040                           ; BSR set to: 0
  8041                           
  8042                           ; BSR set to: 0
  8043  014238  0100               	movlb	0	; () banked
  8044  01423A  90D8               	bcf	status,0,c
  8045  01423C  37C0               	rlcf	___awdiv@quotient& (0+255),f,b
  8046  01423E  37C1               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8047                           
  8048                           ; BSR set to: 0
  8049  014240  0100               	movlb	0	; () banked
  8050  014242  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8051  014244  0100               	movlb	0	; () banked
  8052  014246  5DBA               	subwf	___awdiv@dividend& (0+255),w,b
  8053  014248  0100               	movlb	0	; () banked
  8054  01424A  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8055  01424C  0100               	movlb	0	; () banked
  8056  01424E  59BB               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8057  014250  A0D8               	btfss	status,0,c
  8058  014252  D00A               	goto	l2624
  8059                           
  8060                           ; BSR set to: 0
  8061  014254  0100               	movlb	0	; () banked
  8062  014256  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8063  014258  0100               	movlb	0	; () banked
  8064  01425A  5FBA               	subwf	___awdiv@dividend& (0+255),f,b
  8065  01425C  0100               	movlb	0	; () banked
  8066  01425E  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8067  014260  0100               	movlb	0	; () banked
  8068  014262  5BBB               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8069                           
  8070                           ; BSR set to: 0
  8071  014264  0100               	movlb	0	; () banked
  8072  014266  81C0               	bsf	___awdiv@quotient& (0+255),0,b
  8073  014268                     l2624:
  8074                           
  8075                           ; BSR set to: 0
  8076                           
  8077                           ; BSR set to: 0
  8078  014268  0100               	movlb	0	; () banked
  8079  01426A  90D8               	bcf	status,0,c
  8080  01426C  33BD               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8081  01426E  33BC               	rrcf	___awdiv@divisor& (0+255),f,b
  8082                           
  8083                           ; BSR set to: 0
  8084  014270  0100               	movlb	0	; () banked
  8085  014272  2FBE               	decfsz	___awdiv@counter& (0+255),f,b
  8086  014274  D7E1               	goto	u9180
  8087  014276                     l2625:
  8088                           
  8089                           ; BSR set to: 0
  8090                           
  8091                           ; BSR set to: 0
  8092                           
  8093                           ; BSR set to: 0
  8094  014276  0100               	movlb	0	; () banked
  8095  014278  51BF               	movf	___awdiv@sign& (0+255),w,b
  8096  01427A  0100               	movlb	0	; () banked
  8097  01427C  B4D8               	btfsc	status,2,c
  8098  01427E  D005               	goto	l2626
  8099                           
  8100                           ; BSR set to: 0
  8101  014280  0100               	movlb	0	; () banked
  8102  014282  6DC0               	negf	___awdiv@quotient& (0+255),b
  8103  014284  1FC1               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8104  014286  B0D8               	btfsc	status,0,c
  8105  014288  2BC1               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8106  01428A                     l2626:
  8107                           
  8108                           ; BSR set to: 0
  8109                           
  8110                           ; BSR set to: 0
  8111  01428A  C0C0  F0BA         	movff	___awdiv@quotient,?___awdiv
  8112  01428E  C0C1  F0BB         	movff	___awdiv@quotient+1,?___awdiv+1
  8113  014292  0012               	return	
  8114  014294                     __end_of___awdiv:
  8115                           	opt stack 0
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           postinc0	equ	0xFEE
  8123                           wreg	equ	0xFE8
  8124                           postdec1	equ	0xFE5
  8125                           fsr1h	equ	0xFE2
  8126                           fsr1l	equ	0xFE1
  8127                           indf2	equ	0xFDF
  8128                           postinc2	equ	0xFDE
  8129                           postdec2	equ	0xFDD
  8130                           fsr2h	equ	0xFDA
  8131                           fsr2l	equ	0xFD9
  8132                           status	equ	0xFD8
  8133                           
  8134 ;; *************** function _Console_IncrementCursor *****************
  8135 ;; Defined at:
  8136 ;;		line 243 in file "Library/Console.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;		None
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;		None
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      unsigned char 
  8143 ;; Registers used:
  8144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;Total ram usage:        2 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    8
  8157 ;; This function calls:
  8158 ;;		_Console_FormFeed
  8159 ;;		_Console_NewLine
  8160 ;; This function is called by:
  8161 ;;		_Console_Tab
  8162 ;;		_Console_PrintChar
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           	psect	text27
  8167  01576A                     __ptext27:
  8168                           	opt stack 0
  8169  01576A                     _Console_IncrementCursor:
  8170                           	opt stack 18
  8171                           
  8172                           ;Console.c: 246: lBufferX += 1;
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;incstack = 0
  8176  01576A  0100               	movlb	0	; () banked
  8177  01576C  2B8F               	incf	_lBufferX& (0+255),f,b
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;Console.c: 248: gCursor.x += 6;
  8181  01576E  0E06               	movlw	6
  8182  015770  2647               	addwf	_gCursor,f,c
  8183  015772  0E00               	movlw	0
  8184  015774  2248               	addwfc	_gCursor+1,f,c
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  8188  015776  0E06               	movlw	6
  8189  015778  2447               	addwf	_gCursor,w,c
  8190  01577A  0100               	movlb	0	; () banked
  8191  01577C  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8192  01577E  0E00               	movlw	0
  8193  015780  2048               	addwfc	_gCursor+1,w,c
  8194  015782  0100               	movlb	0	; () banked
  8195  015784  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8196  015786  0100               	movlb	0	; () banked
  8197  015788  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8198  01578A  D009               	goto	l1004
  8199  01578C  0100               	movlb	0	; () banked
  8200  01578E  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8201  015790  E104               	bnz	u9090
  8202  015792  0E80               	movlw	128
  8203  015794  0100               	movlb	0	; () banked
  8204  015796  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8205  015798  B0D8               	btfsc	status,0,c
  8206  01579A                     u9090:
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;Console.c: 250: Console_NewLine();
  8210  01579A  EC57  F0A5         	call	_Console_NewLine	;wreg free
  8211  01579E                     l1004:
  8212                           
  8213                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  8214  01579E  0E08               	movlw	8
  8215  0157A0  2449               	addwf	_gCursor+2,w,c
  8216  0157A2  0100               	movlb	0	; () banked
  8217  0157A4  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8218  0157A6  0E00               	movlw	0
  8219  0157A8  204A               	addwfc	_gCursor+3,w,c
  8220  0157AA  0100               	movlb	0	; () banked
  8221  0157AC  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8222  0157AE  0100               	movlb	0	; () banked
  8223  0157B0  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8224  0157B2  D00C               	goto	l1005
  8225  0157B4  0100               	movlb	0	; () banked
  8226  0157B6  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8227  0157B8  E105               	bnz	u9100
  8228  0157BA  0E80               	movlw	128
  8229  0157BC  0100               	movlb	0	; () banked
  8230  0157BE  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8231  0157C0  A0D8               	btfss	status,0,c
  8232  0157C2  D004               	goto	l1005
  8233  0157C4                     u9100:
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;Console.c: 252: {
  8237                           ;Console.c: 253: Console_FormFeed();
  8238  0157C4  EC8A  F0A6         	call	_Console_FormFeed	;wreg free
  8239                           
  8240                           ;Console.c: 254: return 1;
  8241  0157C8  0E01               	movlw	1
  8242  0157CA  0012               	return	
  8243  0157CC                     l1005:
  8244                           
  8245                           ;Console.c: 255: }
  8246                           ;Console.c: 257: return 0;
  8247  0157CC  0E00               	movlw	0
  8248  0157CE  0012               	return	
  8249  0157D0                     __end_of_Console_IncrementCursor:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           postinc0	equ	0xFEE
  8258                           wreg	equ	0xFE8
  8259                           postdec1	equ	0xFE5
  8260                           fsr1h	equ	0xFE2
  8261                           fsr1l	equ	0xFE1
  8262                           indf2	equ	0xFDF
  8263                           postinc2	equ	0xFDE
  8264                           postdec2	equ	0xFDD
  8265                           fsr2h	equ	0xFDA
  8266                           fsr2l	equ	0xFD9
  8267                           status	equ	0xFD8
  8268                           
  8269 ;; *************** function _Console_NewLine *****************
  8270 ;; Defined at:
  8271 ;;		line 175 in file "Library/Console.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;		None
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;		None
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8287 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;Total ram usage:        2 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    7
  8292 ;; This function calls:
  8293 ;;		Nothing
  8294 ;; This function is called by:
  8295 ;;		_Console_IncrementCursor
  8296 ;;		_Console_PrintChar
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           	psect	text28
  8301  014AAE                     __ptext28:
  8302                           	opt stack 0
  8303  014AAE                     _Console_NewLine:
  8304                           	opt stack 18
  8305                           
  8306                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  8307                           
  8308                           ;incstack = 0
  8309  014AAE  D03E               	goto	l983
  8310  014AB0                     
  8311                           ;Console.c: 179: {
  8312                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  8313  014AB0  0100               	movlb	0	; () banked
  8314  014AB2  518E               	movf	_lBufferY& (0+255),w,b
  8315  014AB4  0D14               	mullw	20
  8316  014AB6  0EAA               	movlw	low _lBuffer
  8317  014AB8  0100               	movlb	0	; () banked
  8318  014ABA  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8319  014ABC  0E04               	movlw	high _lBuffer
  8320  014ABE  0100               	movlb	0	; () banked
  8321  014AC0  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8322  014AC2  50F3               	movf	prodl,w,c
  8323  014AC4  0100               	movlb	0	; () banked
  8324  014AC6  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8325  014AC8  50F4               	movf	prodh,w,c
  8326  014ACA  0100               	movlb	0	; () banked
  8327  014ACC  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8328  014ACE  0100               	movlb	0	; () banked
  8329  014AD0  518F               	movf	_lBufferX& (0+255),w,b
  8330  014AD2  0D01               	mullw	1
  8331  014AD4  50F3               	movf	prodl,w,c
  8332  014AD6  0100               	movlb	0	; () banked
  8333  014AD8  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8334  014ADA  6ED9               	movwf	fsr2l,c
  8335  014ADC  50F4               	movf	prodh,w,c
  8336  014ADE  0100               	movlb	0	; () banked
  8337  014AE0  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8338  014AE2  6EDA               	movwf	fsr2h,c
  8339  014AE4  50DF               	movf	indf2,w,c
  8340  014AE6  B4D8               	btfsc	status,2,c
  8341  014AE8  D01F               	goto	l985
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  8345  014AEA  0E01               	movlw	1
  8346  014AEC  0100               	movlb	0	; () banked
  8347  014AEE  6FFF               	movwf	_change& (0+255),b
  8348                           
  8349                           ; BSR set to: 0
  8350  014AF0  0100               	movlb	0	; () banked
  8351  014AF2  518E               	movf	_lBufferY& (0+255),w,b
  8352  014AF4  0D14               	mullw	20
  8353  014AF6  0EAA               	movlw	low _lBuffer
  8354  014AF8  0100               	movlb	0	; () banked
  8355  014AFA  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8356  014AFC  0E04               	movlw	high _lBuffer
  8357  014AFE  0100               	movlb	0	; () banked
  8358  014B00  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8359  014B02  50F3               	movf	prodl,w,c
  8360  014B04  0100               	movlb	0	; () banked
  8361  014B06  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8362  014B08  50F4               	movf	prodh,w,c
  8363  014B0A  0100               	movlb	0	; () banked
  8364  014B0C  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8365  014B0E  0100               	movlb	0	; () banked
  8366  014B10  518F               	movf	_lBufferX& (0+255),w,b
  8367  014B12  0D01               	mullw	1
  8368  014B14  50F3               	movf	prodl,w,c
  8369  014B16  0100               	movlb	0	; () banked
  8370  014B18  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8371  014B1A  6ED9               	movwf	fsr2l,c
  8372  014B1C  50F4               	movf	prodh,w,c
  8373  014B1E  0100               	movlb	0	; () banked
  8374  014B20  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8375  014B22  6EDA               	movwf	fsr2h,c
  8376  014B24  0E80               	movlw	128
  8377  014B26  6EDF               	movwf	indf2,c
  8378  014B28                     l985:
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;Console.c: 182: lBufferX ++;
  8382                           
  8383                           ; BSR set to: 0
  8384  014B28  0100               	movlb	0	; () banked
  8385  014B2A  2B8F               	incf	_lBufferX& (0+255),f,b
  8386  014B2C                     l983:
  8387                           
  8388                           ; BSR set to: 0
  8389  014B2C  0E13               	movlw	19
  8390  014B2E  0100               	movlb	0	; () banked
  8391  014B30  658F               	cpfsgt	_lBufferX& (0+255),b
  8392  014B32  D7BE               	goto	l984
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;Console.c: 183: }
  8396                           ;Console.c: 185: lBufferX = 0;
  8397                           
  8398                           ; BSR set to: 0
  8399  014B34  0E00               	movlw	0
  8400  014B36  0100               	movlb	0	; () banked
  8401  014B38  6F8F               	movwf	_lBufferX& (0+255),b
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;Console.c: 186: lBufferY ++;
  8405  014B3A  0100               	movlb	0	; () banked
  8406  014B3C  2B8E               	incf	_lBufferY& (0+255),f,b
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;Console.c: 188: gCursor.y += 8;
  8410  014B3E  0E08               	movlw	8
  8411  014B40  2649               	addwf	_gCursor+2,f,c
  8412  014B42  0E00               	movlw	0
  8413  014B44  224A               	addwfc	_gCursor+3,f,c
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;Console.c: 189: gCursor.x = 6;
  8417  014B46  0E00               	movlw	0
  8418  014B48  6E48               	movwf	_gCursor+1,c
  8419  014B4A  0E06               	movlw	6
  8420  014B4C  6E47               	movwf	_gCursor,c
  8421                           
  8422                           ; BSR set to: 0
  8423  014B4E  0012               	return		;funcret
  8424  014B50                     __end_of_Console_NewLine:
  8425                           	opt stack 0
  8426                           tblptru	equ	0xFF8
  8427                           tblptrh	equ	0xFF7
  8428                           tblptrl	equ	0xFF6
  8429                           tablat	equ	0xFF5
  8430                           prodh	equ	0xFF4
  8431                           prodl	equ	0xFF3
  8432                           postinc0	equ	0xFEE
  8433                           wreg	equ	0xFE8
  8434                           postdec1	equ	0xFE5
  8435                           fsr1h	equ	0xFE2
  8436                           fsr1l	equ	0xFE1
  8437                           indf2	equ	0xFDF
  8438                           postinc2	equ	0xFDE
  8439                           postdec2	equ	0xFDD
  8440                           fsr2h	equ	0xFDA
  8441                           fsr2l	equ	0xFD9
  8442                           status	equ	0xFD8
  8443                           
  8444 ;; *************** function _Console_FormFeed *****************
  8445 ;; Defined at:
  8446 ;;		line 192 in file "Library/Console.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;		None
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;  y               1    3[BANK0 ] unsigned char 
  8451 ;;  x               1    2[BANK0 ] unsigned char 
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  1    wreg      void 
  8454 ;; Registers used:
  8455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8462 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8463 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;Total ram usage:        4 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; Hardware stack levels required when called:    7
  8468 ;; This function calls:
  8469 ;;		Nothing
  8470 ;; This function is called by:
  8471 ;;		_Console_IncrementCursor
  8472 ;;		_Console_PrintChar
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           	psect	text29
  8477  014D14                     __ptext29:
  8478                           	opt stack 0
  8479  014D14                     _Console_FormFeed:
  8480                           	opt stack 18
  8481                           
  8482                           ;Console.c: 195: lBufferX = 0;
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;incstack = 0
  8486  014D14  0E00               	movlw	0
  8487  014D16  0100               	movlb	0	; () banked
  8488  014D18  6F8F               	movwf	_lBufferX& (0+255),b
  8489                           
  8490                           ;Console.c: 196: lBufferY = 0;
  8491  014D1A  0E00               	movlw	0
  8492  014D1C  0100               	movlb	0	; () banked
  8493  014D1E  6F8E               	movwf	_lBufferY& (0+255),b
  8494                           
  8495                           ;Console.c: 197: UINT8 x, y;
  8496                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  8497  014D20  0E00               	movlw	0
  8498  014D22  0100               	movlb	0	; () banked
  8499  014D24  6FBD               	movwf	Console_FormFeed@y& (0+255),b
  8500  014D26                     l12209:
  8501                           
  8502                           ; BSR set to: 0
  8503  014D26  0E0E               	movlw	14
  8504  014D28  0100               	movlb	0	; () banked
  8505  014D2A  65BD               	cpfsgt	Console_FormFeed@y& (0+255),b
  8506  014D2C  D001               	goto	l990
  8507  014D2E  D02D               	goto	u8950
  8508  014D30                     l990:
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  8512                           
  8513                           ; BSR set to: 0
  8514  014D30  0E00               	movlw	0
  8515  014D32  0100               	movlb	0	; () banked
  8516  014D34  6FBC               	movwf	Console_FormFeed@x& (0+255),b
  8517  014D36                     l12215:
  8518                           
  8519                           ; BSR set to: 0
  8520  014D36  0E13               	movlw	19
  8521  014D38  0100               	movlb	0	; () banked
  8522  014D3A  65BC               	cpfsgt	Console_FormFeed@x& (0+255),b
  8523  014D3C  D001               	goto	l992
  8524  014D3E  D022               	goto	u8940
  8525  014D40                     l992:
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  8529                           
  8530                           ; BSR set to: 0
  8531  014D40  0E01               	movlw	1
  8532  014D42  0100               	movlb	0	; () banked
  8533  014D44  6FFF               	movwf	_change& (0+255),b
  8534                           
  8535                           ; BSR set to: 0
  8536  014D46  0100               	movlb	0	; () banked
  8537  014D48  51BD               	movf	Console_FormFeed@y& (0+255),w,b
  8538  014D4A  0D14               	mullw	20
  8539  014D4C  0EAA               	movlw	low _lBuffer
  8540  014D4E  0100               	movlb	0	; () banked
  8541  014D50  6FBA               	movwf	??_Console_FormFeed& (0+255),b
  8542  014D52  0E04               	movlw	high _lBuffer
  8543  014D54  0100               	movlb	0	; () banked
  8544  014D56  6FBB               	movwf	(??_Console_FormFeed+1)& (0+255),b
  8545  014D58  50F3               	movf	prodl,w,c
  8546  014D5A  0100               	movlb	0	; () banked
  8547  014D5C  27BA               	addwf	??_Console_FormFeed& (0+255),f,b
  8548  014D5E  50F4               	movf	prodh,w,c
  8549  014D60  0100               	movlb	0	; () banked
  8550  014D62  23BB               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  8551  014D64  0100               	movlb	0	; () banked
  8552  014D66  51BC               	movf	Console_FormFeed@x& (0+255),w,b
  8553  014D68  0D01               	mullw	1
  8554  014D6A  50F3               	movf	prodl,w,c
  8555  014D6C  0100               	movlb	0	; () banked
  8556  014D6E  25BA               	addwf	??_Console_FormFeed& (0+255),w,b
  8557  014D70  6ED9               	movwf	fsr2l,c
  8558  014D72  50F4               	movf	prodh,w,c
  8559  014D74  0100               	movlb	0	; () banked
  8560  014D76  21BB               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  8561  014D78  6EDA               	movwf	fsr2h,c
  8562  014D7A  0E80               	movlw	128
  8563  014D7C  6EDF               	movwf	indf2,c
  8564                           
  8565                           ; BSR set to: 0
  8566  014D7E  0100               	movlb	0	; () banked
  8567  014D80  2BBC               	incf	Console_FormFeed@x& (0+255),f,b
  8568  014D82  D7D9               	goto	l12215
  8569  014D84                     u8940:
  8570                           
  8571                           ; BSR set to: 0
  8572                           
  8573                           ; BSR set to: 0
  8574  014D84  0100               	movlb	0	; () banked
  8575  014D86  2BBD               	incf	Console_FormFeed@y& (0+255),f,b
  8576  014D88  D7CE               	goto	l12209
  8577  014D8A                     u8950:
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;Console.c: 204: clearall = 1;
  8581                           
  8582                           ; BSR set to: 0
  8583  014D8A  0E01               	movlw	1
  8584  014D8C  0100               	movlb	0	; () banked
  8585  014D8E  6F90               	movwf	_clearall& (0+255),b
  8586                           
  8587                           ;Console.c: 205: gCursor.x = 6;
  8588  014D90  0E00               	movlw	0
  8589  014D92  6E48               	movwf	_gCursor+1,c
  8590  014D94  0E06               	movlw	6
  8591  014D96  6E47               	movwf	_gCursor,c
  8592                           
  8593                           ;Console.c: 206: gCursor.y = 6;
  8594  014D98  0E00               	movlw	0
  8595  014D9A  6E4A               	movwf	_gCursor+3,c
  8596  014D9C  0E06               	movlw	6
  8597  014D9E  6E49               	movwf	_gCursor+2,c
  8598                           
  8599                           ; BSR set to: 0
  8600  014DA0  0012               	return		;funcret
  8601  014DA2                     __end_of_Console_FormFeed:
  8602                           	opt stack 0
  8603                           tblptru	equ	0xFF8
  8604                           tblptrh	equ	0xFF7
  8605                           tblptrl	equ	0xFF6
  8606                           tablat	equ	0xFF5
  8607                           prodh	equ	0xFF4
  8608                           prodl	equ	0xFF3
  8609                           postinc0	equ	0xFEE
  8610                           wreg	equ	0xFE8
  8611                           postdec1	equ	0xFE5
  8612                           fsr1h	equ	0xFE2
  8613                           fsr1l	equ	0xFE1
  8614                           indf2	equ	0xFDF
  8615                           postinc2	equ	0xFDE
  8616                           postdec2	equ	0xFDD
  8617                           fsr2h	equ	0xFDA
  8618                           fsr2l	equ	0xFD9
  8619                           status	equ	0xFD8
  8620                           
  8621 ;; *************** function _Console_ResetCursor *****************
  8622 ;; Defined at:
  8623 ;;		line 297 in file "Library/Console.c"
  8624 ;; Parameters:    Size  Location     Type
  8625 ;;		None
  8626 ;; Auto vars:     Size  Location     Type
  8627 ;;		None
  8628 ;; Return value:  Size  Location     Type
  8629 ;;                  1    wreg      void 
  8630 ;; Registers used:
  8631 ;;		wreg, status,2
  8632 ;; Tracked objects:
  8633 ;;		On entry : 0/0
  8634 ;;		On exit  : 0/0
  8635 ;;		Unchanged: 0/0
  8636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;Total ram usage:        0 bytes
  8642 ;; Hardware stack levels used:    1
  8643 ;; Hardware stack levels required when called:    7
  8644 ;; This function calls:
  8645 ;;		Nothing
  8646 ;; This function is called by:
  8647 ;;		_Console_PrintChar
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651                           	psect	text30
  8652  0163D2                     __ptext30:
  8653                           	opt stack 0
  8654  0163D2                     _Console_ResetCursor:
  8655                           	opt stack 20
  8656                           
  8657                           ;Console.c: 299: gCursor.x = 6;
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;incstack = 0
  8661  0163D2  0E00               	movlw	0
  8662  0163D4  6E48               	movwf	_gCursor+1,c
  8663  0163D6  0E06               	movlw	6
  8664  0163D8  6E47               	movwf	_gCursor,c
  8665                           
  8666                           ;Console.c: 300: gCursor.y = 6;
  8667  0163DA  0E00               	movlw	0
  8668  0163DC  6E4A               	movwf	_gCursor+3,c
  8669  0163DE  0E06               	movlw	6
  8670  0163E0  6E49               	movwf	_gCursor+2,c
  8671                           
  8672                           ;Console.c: 303: lBufferX = 0;
  8673  0163E2  0E00               	movlw	0
  8674  0163E4  0100               	movlb	0	; () banked
  8675  0163E6  6F8F               	movwf	_lBufferX& (0+255),b
  8676                           
  8677                           ;Console.c: 304: lBufferY = 0;
  8678  0163E8  0E00               	movlw	0
  8679  0163EA  0100               	movlb	0	; () banked
  8680  0163EC  6F8E               	movwf	_lBufferY& (0+255),b
  8681                           
  8682                           ; BSR set to: 0
  8683  0163EE  0012               	return		;funcret
  8684  0163F0                     __end_of_Console_ResetCursor:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           postinc0	equ	0xFEE
  8693                           wreg	equ	0xFE8
  8694                           postdec1	equ	0xFE5
  8695                           fsr1h	equ	0xFE2
  8696                           fsr1l	equ	0xFE1
  8697                           indf2	equ	0xFDF
  8698                           postinc2	equ	0xFDE
  8699                           postdec2	equ	0xFDD
  8700                           fsr2h	equ	0xFDA
  8701                           fsr2l	equ	0xFD9
  8702                           status	equ	0xFD8
  8703                           
  8704 ;; *************** function _Console_Backspace *****************
  8705 ;; Defined at:
  8706 ;;		line 209 in file "Library/Console.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;		None
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;		None
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  1    wreg      void 
  8713 ;; Registers used:
  8714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;Total ram usage:        0 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; Hardware stack levels required when called:    8
  8727 ;; This function calls:
  8728 ;;		_Console_ClearCursor
  8729 ;; This function is called by:
  8730 ;;		_Console_PrintChar
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           	psect	text31
  8735  01595C                     __ptext31:
  8736                           	opt stack 0
  8737  01595C                     _Console_Backspace:
  8738                           	opt stack 19
  8739                           
  8740                           ;Console.c: 211: if (lBufferX > 0)
  8741                           
  8742                           ; BSR set to: 0
  8743                           ;incstack = 0
  8744  01595C  0100               	movlb	0	; () banked
  8745  01595E  518F               	movf	_lBufferX& (0+255),w,b
  8746  015960  B4D8               	btfsc	status,2,c
  8747  015962  D007               	goto	l997
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;Console.c: 212: {
  8751                           ;Console.c: 213: gCursor.x -= 6;
  8752  015964  0EFA               	movlw	250
  8753  015966  2647               	addwf	_gCursor,f,c
  8754  015968  0EFF               	movlw	255
  8755  01596A  2248               	addwfc	_gCursor+1,f,c
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;Console.c: 216: lBufferX --;
  8759  01596C  0100               	movlb	0	; () banked
  8760  01596E  078F               	decf	_lBufferX& (0+255),f,b
  8761                           
  8762                           ;Console.c: 218: }
  8763  015970  D020               	goto	l1000
  8764  015972                     l997:
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;Console.c: 219: else if (lBufferY > 0)
  8768                           
  8769                           ; BSR set to: 0
  8770  015972  0100               	movlb	0	; () banked
  8771  015974  518E               	movf	_lBufferY& (0+255),w,b
  8772  015976  B4D8               	btfsc	status,2,c
  8773  015978  D00E               	goto	l999
  8774                           
  8775                           ; BSR set to: 0
  8776                           ;Console.c: 220: {
  8777                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  8778  01597A  0E00               	movlw	0
  8779  01597C  6E48               	movwf	_gCursor+1,c
  8780  01597E  0E72               	movlw	114
  8781  015980  6E47               	movwf	_gCursor,c
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;Console.c: 222: gCursor.y -= 8;
  8785  015982  0EF8               	movlw	248
  8786  015984  2649               	addwf	_gCursor+2,f,c
  8787  015986  0EFF               	movlw	255
  8788  015988  224A               	addwfc	_gCursor+3,f,c
  8789                           
  8790                           ; BSR set to: 0
  8791                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  8792  01598A  0E13               	movlw	19
  8793  01598C  0100               	movlb	0	; () banked
  8794  01598E  6F8F               	movwf	_lBufferX& (0+255),b
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;Console.c: 226: lBufferY --;
  8798  015990  0100               	movlb	0	; () banked
  8799  015992  078E               	decf	_lBufferY& (0+255),f,b
  8800                           
  8801                           ;Console.c: 228: }
  8802  015994  D00E               	goto	l1000
  8803  015996                     l999:
  8804                           
  8805                           ; BSR set to: 0
  8806                           ;Console.c: 229: else
  8807                           ;Console.c: 230: {
  8808                           ;Console.c: 231: gCursor.x = 6;
  8809                           
  8810                           ; BSR set to: 0
  8811  015996  0E00               	movlw	0
  8812  015998  6E48               	movwf	_gCursor+1,c
  8813  01599A  0E06               	movlw	6
  8814  01599C  6E47               	movwf	_gCursor,c
  8815                           
  8816                           ;Console.c: 232: gCursor.y = 6;
  8817  01599E  0E00               	movlw	0
  8818  0159A0  6E4A               	movwf	_gCursor+3,c
  8819  0159A2  0E06               	movlw	6
  8820  0159A4  6E49               	movwf	_gCursor+2,c
  8821                           
  8822                           ;Console.c: 235: lBufferX = 0;
  8823  0159A6  0E00               	movlw	0
  8824  0159A8  0100               	movlb	0	; () banked
  8825  0159AA  6F8F               	movwf	_lBufferX& (0+255),b
  8826                           
  8827                           ;Console.c: 236: lBufferY = 0;
  8828  0159AC  0E00               	movlw	0
  8829  0159AE  0100               	movlb	0	; () banked
  8830  0159B0  6F8E               	movwf	_lBufferY& (0+255),b
  8831  0159B2                     l1000:
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;Console.c: 238: }
  8835                           ;Console.c: 240: Console_ClearCursor();
  8836                           
  8837                           ; BSR set to: 0
  8838                           
  8839                           ; BSR set to: 0
  8840  0159B2  EC62  F0AF         	call	_Console_ClearCursor	;wreg free
  8841  0159B6  0012               	return		;funcret
  8842  0159B8                     __end_of_Console_Backspace:
  8843                           	opt stack 0
  8844                           tblptru	equ	0xFF8
  8845                           tblptrh	equ	0xFF7
  8846                           tblptrl	equ	0xFF6
  8847                           tablat	equ	0xFF5
  8848                           prodh	equ	0xFF4
  8849                           prodl	equ	0xFF3
  8850                           postinc0	equ	0xFEE
  8851                           wreg	equ	0xFE8
  8852                           postdec1	equ	0xFE5
  8853                           fsr1h	equ	0xFE2
  8854                           fsr1l	equ	0xFE1
  8855                           indf2	equ	0xFDF
  8856                           postinc2	equ	0xFDE
  8857                           postdec2	equ	0xFDD
  8858                           fsr2h	equ	0xFDA
  8859                           fsr2l	equ	0xFD9
  8860                           status	equ	0xFD8
  8861                           
  8862 ;; *************** function _Console_ClearCursor *****************
  8863 ;; Defined at:
  8864 ;;		line 308 in file "Library/Console.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;		None
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;		None
  8869 ;; Return value:  Size  Location     Type
  8870 ;;                  1    wreg      void 
  8871 ;; Registers used:
  8872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8873 ;; Tracked objects:
  8874 ;;		On entry : 0/0
  8875 ;;		On exit  : 0/0
  8876 ;;		Unchanged: 0/0
  8877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8880 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8881 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8882 ;;Total ram usage:        2 bytes
  8883 ;; Hardware stack levels used:    1
  8884 ;; Hardware stack levels required when called:    7
  8885 ;; This function calls:
  8886 ;;		Nothing
  8887 ;; This function is called by:
  8888 ;;		_Console_Backspace
  8889 ;;		_Console_Tab
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           	psect	text32
  8894  015EC4                     __ptext32:
  8895                           	opt stack 0
  8896  015EC4                     _Console_ClearCursor:
  8897                           	opt stack 19
  8898                           
  8899                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  8900                           
  8901                           ;incstack = 0
  8902  015EC4  0E01               	movlw	1
  8903  015EC6  0100               	movlb	0	; () banked
  8904  015EC8  6FFF               	movwf	_change& (0+255),b
  8905                           
  8906                           ; BSR set to: 0
  8907  015ECA  0100               	movlb	0	; () banked
  8908  015ECC  518E               	movf	_lBufferY& (0+255),w,b
  8909  015ECE  0D14               	mullw	20
  8910  015ED0  0EAA               	movlw	low _lBuffer
  8911  015ED2  0100               	movlb	0	; () banked
  8912  015ED4  6FBA               	movwf	??_Console_ClearCursor& (0+255),b
  8913  015ED6  0E04               	movlw	high _lBuffer
  8914  015ED8  0100               	movlb	0	; () banked
  8915  015EDA  6FBB               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  8916  015EDC  50F3               	movf	prodl,w,c
  8917  015EDE  0100               	movlb	0	; () banked
  8918  015EE0  27BA               	addwf	??_Console_ClearCursor& (0+255),f,b
  8919  015EE2  50F4               	movf	prodh,w,c
  8920  015EE4  0100               	movlb	0	; () banked
  8921  015EE6  23BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  8922  015EE8  0100               	movlb	0	; () banked
  8923  015EEA  518F               	movf	_lBufferX& (0+255),w,b
  8924  015EEC  0D01               	mullw	1
  8925  015EEE  50F3               	movf	prodl,w,c
  8926  015EF0  0100               	movlb	0	; () banked
  8927  015EF2  25BA               	addwf	??_Console_ClearCursor& (0+255),w,b
  8928  015EF4  6ED9               	movwf	fsr2l,c
  8929  015EF6  50F4               	movf	prodh,w,c
  8930  015EF8  0100               	movlb	0	; () banked
  8931  015EFA  21BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  8932  015EFC  6EDA               	movwf	fsr2h,c
  8933  015EFE  0E80               	movlw	128
  8934  015F00  6EDF               	movwf	indf2,c
  8935                           
  8936                           ; BSR set to: 0
  8937  015F02  0012               	return		;funcret
  8938  015F04                     __end_of_Console_ClearCursor:
  8939                           	opt stack 0
  8940                           tblptru	equ	0xFF8
  8941                           tblptrh	equ	0xFF7
  8942                           tblptrl	equ	0xFF6
  8943                           tablat	equ	0xFF5
  8944                           prodh	equ	0xFF4
  8945                           prodl	equ	0xFF3
  8946                           postinc0	equ	0xFEE
  8947                           wreg	equ	0xFE8
  8948                           postdec1	equ	0xFE5
  8949                           fsr1h	equ	0xFE2
  8950                           fsr1l	equ	0xFE1
  8951                           indf2	equ	0xFDF
  8952                           postinc2	equ	0xFDE
  8953                           postdec2	equ	0xFDD
  8954                           fsr2h	equ	0xFDA
  8955                           fsr2l	equ	0xFD9
  8956                           status	equ	0xFD8
  8957                           
  8958 ;; *************** function ___fltol *****************
  8959 ;; Defined at:
  8960 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;  f1              4   57[BANK0 ] void 
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;  exp1            1   62[BANK0 ] unsigned char 
  8965 ;;  sign1           1   61[BANK0 ] unsigned char 
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  4   57[BANK0 ] long 
  8968 ;; Registers used:
  8969 ;;		wreg, status,2, status,0
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8975 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8977 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8978 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8979 ;;Total ram usage:       10 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; Hardware stack levels required when called:    7
  8982 ;; This function calls:
  8983 ;;		Nothing
  8984 ;; This function is called by:
  8985 ;;		_findClosestWall
  8986 ;;		_mode1
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text33
  8991  0136A4                     __ptext33:
  8992                           	opt stack 0
  8993  0136A4                     ___fltol:
  8994                           	opt stack 21
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;incstack = 0
  8998  0136A4  0100               	movlb	0	; () banked
  8999  0136A6  35F5               	rlcf	(___fltol@f1+2)& (0+255),w,b
  9000  0136A8  35F6               	rlcf	(___fltol@f1+3)& (0+255),w,b
  9001  0136AA  0100               	movlb	0	; () banked
  9002  0136AC  6FF8               	movwf	___fltol@exp1& (0+255),b
  9003  0136AE  0100               	movlb	0	; () banked
  9004  0136B0  51F8               	movf	___fltol@exp1& (0+255),w,b
  9005  0136B2  A4D8               	btfss	status,2,c
  9006  0136B4  D00A               	goto	l2679
  9007                           
  9008                           ; BSR set to: 0
  9009  0136B6  0E00               	movlw	0
  9010  0136B8  0100               	movlb	0	; () banked
  9011  0136BA  6FF3               	movwf	?___fltol& (0+255),b
  9012  0136BC  0E00               	movlw	0
  9013  0136BE  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9014  0136C0  0E00               	movlw	0
  9015  0136C2  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9016  0136C4  0E00               	movlw	0
  9017  0136C6  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9018                           
  9019                           ; BSR set to: 0
  9020  0136C8  0012               	return	
  9021  0136CA                     l2679:
  9022                           
  9023                           ; BSR set to: 0
  9024                           
  9025                           ; BSR set to: 0
  9026  0136CA  C0F3  F100         	movff	___fltol@f1,??___fltol
  9027  0136CE  C0F4  F101         	movff	___fltol@f1+1,??___fltol+1
  9028  0136D2  C0F5  F102         	movff	___fltol@f1+2,??___fltol+2
  9029  0136D6  C0F6  F103         	movff	___fltol@f1+3,??___fltol+3
  9030  0136DA  0E20               	movlw	32
  9031  0136DC  D006               	goto	u11150
  9032  0136DE                     u11155:
  9033  0136DE  0101               	movlb	1	; () banked
  9034  0136E0  90D8               	bcf	status,0,c
  9035  0136E2  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  9036  0136E4  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  9037  0136E6  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  9038  0136E8  3300               	rrcf	??___fltol& (0+255),f,b
  9039  0136EA                     u11150:
  9040  0136EA  2EE8               	decfsz	wreg,f,c
  9041  0136EC  D7F8               	goto	u11155
  9042  0136EE  0101               	movlb	1	; () banked
  9043  0136F0  5100               	movf	??___fltol& (0+255),w,b
  9044  0136F2  0100               	movlb	0	; () banked
  9045  0136F4  6FF7               	movwf	___fltol@sign1& (0+255),b
  9046                           
  9047                           ; BSR set to: 0
  9048  0136F6  0100               	movlb	0	; () banked
  9049  0136F8  8FF5               	bsf	(___fltol@f1+2)& (0+255),7,b
  9050                           
  9051                           ; BSR set to: 0
  9052  0136FA  0EFF               	movlw	255
  9053  0136FC  0100               	movlb	0	; () banked
  9054  0136FE  17F3               	andwf	___fltol@f1& (0+255),f,b
  9055  013700  0EFF               	movlw	255
  9056  013702  17F4               	andwf	(___fltol@f1+1)& (0+255),f,b
  9057  013704  0EFF               	movlw	255
  9058  013706  17F5               	andwf	(___fltol@f1+2)& (0+255),f,b
  9059  013708  0E00               	movlw	0
  9060  01370A  17F6               	andwf	(___fltol@f1+3)& (0+255),f,b
  9061                           
  9062                           ; BSR set to: 0
  9063  01370C  0E96               	movlw	150
  9064  01370E  0100               	movlb	0	; () banked
  9065  013710  5FF8               	subwf	___fltol@exp1& (0+255),f,b
  9066                           
  9067                           ; BSR set to: 0
  9068  013712  0100               	movlb	0	; () banked
  9069  013714  AFF8               	btfss	___fltol@exp1& (0+255),7,b
  9070  013716  D01A               	goto	l2681
  9071                           
  9072                           ; BSR set to: 0
  9073  013718  0100               	movlb	0	; () banked
  9074  01371A  51F8               	movf	___fltol@exp1& (0+255),w,b
  9075  01371C  0A80               	xorlw	128
  9076  01371E  0F97               	addlw	151
  9077  013720  B0D8               	btfsc	status,0,c
  9078  013722  D00A               	goto	l2682
  9079                           
  9080                           ; BSR set to: 0
  9081  013724  0E00               	movlw	0
  9082  013726  0100               	movlb	0	; () banked
  9083  013728  6FF3               	movwf	?___fltol& (0+255),b
  9084  01372A  0E00               	movlw	0
  9085  01372C  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9086  01372E  0E00               	movlw	0
  9087  013730  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9088  013732  0E00               	movlw	0
  9089  013734  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9090                           
  9091                           ; BSR set to: 0
  9092  013736  0012               	return	
  9093  013738                     l2682:
  9094                           
  9095                           ; BSR set to: 0
  9096                           
  9097                           ; BSR set to: 0
  9098                           
  9099                           ; BSR set to: 0
  9100  013738  0100               	movlb	0	; () banked
  9101  01373A  90D8               	bcf	status,0,c
  9102  01373C  33F6               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9103  01373E  33F5               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9104  013740  33F4               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9105  013742  33F3               	rrcf	___fltol@f1& (0+255),f,b
  9106                           
  9107                           ; BSR set to: 0
  9108  013744  0100               	movlb	0	; () banked
  9109  013746  3FF8               	incfsz	___fltol@exp1& (0+255),f,b
  9110  013748  D7F7               	goto	l2682
  9111                           
  9112                           ; BSR set to: 0
  9113  01374A  D01B               	goto	u11190
  9114  01374C                     l2681:
  9115                           
  9116                           ; BSR set to: 0
  9117                           
  9118                           ; BSR set to: 0
  9119  01374C  0E1F               	movlw	31
  9120  01374E  0100               	movlb	0	; () banked
  9121  013750  65F8               	cpfsgt	___fltol@exp1& (0+255),b
  9122  013752  D012               	goto	l2687
  9123                           
  9124                           ; BSR set to: 0
  9125  013754  0E00               	movlw	0
  9126  013756  0100               	movlb	0	; () banked
  9127  013758  6FF3               	movwf	?___fltol& (0+255),b
  9128  01375A  0E00               	movlw	0
  9129  01375C  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9130  01375E  0E00               	movlw	0
  9131  013760  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9132  013762  0E00               	movlw	0
  9133  013764  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9134                           
  9135                           ; BSR set to: 0
  9136  013766  0012               	return	
  9137  013768                     
  9138                           ; BSR set to: 0
  9139                           
  9140                           ; BSR set to: 0
  9141  013768  0100               	movlb	0	; () banked
  9142  01376A  90D8               	bcf	status,0,c
  9143  01376C  37F3               	rlcf	___fltol@f1& (0+255),f,b
  9144  01376E  37F4               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9145  013770  37F5               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9146  013772  37F6               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9147  013774  0100               	movlb	0	; () banked
  9148  013776  07F8               	decf	___fltol@exp1& (0+255),f,b
  9149  013778                     l2687:
  9150                           
  9151                           ; BSR set to: 0
  9152                           
  9153                           ; BSR set to: 0
  9154  013778  0100               	movlb	0	; () banked
  9155  01377A  51F8               	movf	___fltol@exp1& (0+255),w,b
  9156  01377C  0100               	movlb	0	; () banked
  9157  01377E  A4D8               	btfss	status,2,c
  9158  013780  D7F3               	goto	l2688
  9159  013782                     u11190:
  9160                           
  9161                           ; BSR set to: 0
  9162                           
  9163                           ; BSR set to: 0
  9164                           
  9165                           ; BSR set to: 0
  9166  013782  0100               	movlb	0	; () banked
  9167  013784  51F7               	movf	___fltol@sign1& (0+255),w,b
  9168  013786  0100               	movlb	0	; () banked
  9169  013788  B4D8               	btfsc	status,2,c
  9170  01378A  D009               	goto	l2690
  9171                           
  9172                           ; BSR set to: 0
  9173  01378C  0100               	movlb	0	; () banked
  9174  01378E  1FF6               	comf	(___fltol@f1+3)& (0+255),f,b
  9175  013790  1FF5               	comf	(___fltol@f1+2)& (0+255),f,b
  9176  013792  1FF4               	comf	(___fltol@f1+1)& (0+255),f,b
  9177  013794  6DF3               	negf	___fltol@f1& (0+255),b
  9178  013796  0E00               	movlw	0
  9179  013798  23F4               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9180  01379A  23F5               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9181  01379C  23F6               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9182  01379E                     l2690:
  9183                           
  9184                           ; BSR set to: 0
  9185                           
  9186                           ; BSR set to: 0
  9187  01379E  C0F3  F0F3         	movff	___fltol@f1,?___fltol
  9188  0137A2  C0F4  F0F4         	movff	___fltol@f1+1,?___fltol+1
  9189  0137A6  C0F5  F0F5         	movff	___fltol@f1+2,?___fltol+2
  9190  0137AA  C0F6  F0F6         	movff	___fltol@f1+3,?___fltol+3
  9191  0137AE  0012               	return	
  9192  0137B0                     __end_of___fltol:
  9193                           	opt stack 0
  9194                           tblptru	equ	0xFF8
  9195                           tblptrh	equ	0xFF7
  9196                           tblptrl	equ	0xFF6
  9197                           tablat	equ	0xFF5
  9198                           prodh	equ	0xFF4
  9199                           prodl	equ	0xFF3
  9200                           postinc0	equ	0xFEE
  9201                           wreg	equ	0xFE8
  9202                           postdec1	equ	0xFE5
  9203                           fsr1h	equ	0xFE2
  9204                           fsr1l	equ	0xFE1
  9205                           indf2	equ	0xFDF
  9206                           postinc2	equ	0xFDE
  9207                           postdec2	equ	0xFDD
  9208                           fsr2h	equ	0xFDA
  9209                           fsr2l	equ	0xFD9
  9210                           status	equ	0xFD8
  9211                           
  9212 ;; *************** function _Motor_Speed *****************
  9213 ;; Defined at:
  9214 ;;		line 117 in file "Library/Motor.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  9217 ;;		 -> Stepper(6), 
  9218 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;		None
  9221 ;; Return value:  Size  Location     Type
  9222 ;;                  1    wreg      unsigned char 
  9223 ;; Registers used:
  9224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9225 ;; Tracked objects:
  9226 ;;		On entry : 0/0
  9227 ;;		On exit  : 0/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9230 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;Total ram usage:        4 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; Hardware stack levels required when called:    9
  9237 ;; This function calls:
  9238 ;;		_Timer0_Init
  9239 ;; This function is called by:
  9240 ;;		_findClosestWall
  9241 ;;		_mode1
  9242 ;; This function uses a non-reentrant model
  9243 ;;
  9244                           
  9245                           	psect	text34
  9246  0162AA                     __ptext34:
  9247                           	opt stack 0
  9248  0162AA                     _Motor_Speed:
  9249                           	opt stack 19
  9250                           
  9251                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;incstack = 0
  9255  0162AA  0100               	movlb	0	; () banked
  9256  0162AC  EE20 F002          	lfsr	2,2
  9257  0162B0  51D5               	movf	Motor_Speed@pMotor& (0+255),w,b
  9258  0162B2  26D9               	addwf	fsr2l,f,c
  9259  0162B4  51D6               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  9260  0162B6  22DA               	addwfc	fsr2h,f,c
  9261  0162B8  C0D7  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  9262  0162BC  C0D8  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;Motor.c: 120: Timer0_Init(pFrequency);
  9266  0162C0  C0D7  F0C7         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  9267  0162C4  C0D8  F0C8         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  9268  0162C8  0100               	movlb	0	; () banked
  9269  0162CA  6BC9               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9270  0162CC  6BCA               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9271  0162CE  ECC2  F098         	call	_Timer0_Init	;wreg free
  9272  0162D2  0012               	return	
  9273  0162D4                     __end_of_Motor_Speed:
  9274                           	opt stack 0
  9275                           tblptru	equ	0xFF8
  9276                           tblptrh	equ	0xFF7
  9277                           tblptrl	equ	0xFF6
  9278                           tablat	equ	0xFF5
  9279                           prodh	equ	0xFF4
  9280                           prodl	equ	0xFF3
  9281                           postinc0	equ	0xFEE
  9282                           wreg	equ	0xFE8
  9283                           postdec1	equ	0xFE5
  9284                           fsr1h	equ	0xFE2
  9285                           fsr1l	equ	0xFE1
  9286                           indf2	equ	0xFDF
  9287                           postinc2	equ	0xFDE
  9288                           postdec2	equ	0xFDD
  9289                           fsr2h	equ	0xFDA
  9290                           fsr2l	equ	0xFD9
  9291                           status	equ	0xFD8
  9292                           
  9293 ;; *************** function _Motor_Move *****************
  9294 ;; Defined at:
  9295 ;;		line 51 in file "Library/Motor.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9298 ;;		 -> Stepper(6), 
  9299 ;;  pDelta          2    5[BANK0 ] short 
  9300 ;; Auto vars:     Size  Location     Type
  9301 ;;		None
  9302 ;; Return value:  Size  Location     Type
  9303 ;;                  1    wreg      unsigned char 
  9304 ;; Registers used:
  9305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9306 ;; Tracked objects:
  9307 ;;		On entry : 0/0
  9308 ;;		On exit  : 0/0
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9311 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9313 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;Total ram usage:        6 bytes
  9316 ;; Hardware stack levels used:    1
  9317 ;; Hardware stack levels required when called:    8
  9318 ;; This function calls:
  9319 ;;		_Timer0_Start
  9320 ;; This function is called by:
  9321 ;;		_findClosestWall
  9322 ;;		_mode1
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           	psect	text35
  9327  0160B2                     __ptext35:
  9328                           	opt stack 0
  9329  0160B2                     _Motor_Move:
  9330                           	opt stack 20
  9331                           
  9332                           ;Motor.c: 54: lMotor = pMotor;
  9333                           
  9334                           ;incstack = 0
  9335  0160B2  C0BD  F07F         	movff	Motor_Move@pMotor,_lMotor
  9336  0160B6  C0BE  F080         	movff	Motor_Move@pMotor+1,_lMotor+1
  9337                           
  9338                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9339  0160BA  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9340  0160BE  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9341  0160C2  50DE               	movf	postinc2,w,c
  9342  0160C4  10DE               	iorwf	postinc2,w,c
  9343  0160C6  A4D8               	btfss	status,2,c
  9344  0160C8  0012               	return	
  9345                           
  9346                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9347                           
  9348                           ;Motor.c: 59: return 0;
  9349                           ;	Return value of _Motor_Move is never used
  9350  0160CA  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9351  0160CE  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9352  0160D2  C0BF  FFDE         	movff	Motor_Move@pDelta,postinc2
  9353  0160D6  C0C0  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9354                           
  9355                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9356  0160DA  C066  F0BA         	movff	_lStepFunction,Timer0_Start@pFunction
  9357  0160DE  C067  F0BB         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9358  0160E2  C068  F0BC         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9359  0160E6  EC93  F0B1         	call	_Timer0_Start	;wreg free
  9360  0160EA  0012               	return	
  9361  0160EC                     __end_of_Motor_Move:
  9362                           	opt stack 0
  9363                           tblptru	equ	0xFF8
  9364                           tblptrh	equ	0xFF7
  9365                           tblptrl	equ	0xFF6
  9366                           tablat	equ	0xFF5
  9367                           prodh	equ	0xFF4
  9368                           prodl	equ	0xFF3
  9369                           postinc0	equ	0xFEE
  9370                           wreg	equ	0xFE8
  9371                           postdec1	equ	0xFE5
  9372                           fsr1h	equ	0xFE2
  9373                           fsr1l	equ	0xFE1
  9374                           indf2	equ	0xFDF
  9375                           postinc2	equ	0xFDE
  9376                           postdec2	equ	0xFDD
  9377                           fsr2h	equ	0xFDA
  9378                           fsr2l	equ	0xFD9
  9379                           status	equ	0xFD8
  9380                           
  9381 ;; *************** function _Timer0_Start *****************
  9382 ;; Defined at:
  9383 ;;		line 75 in file "Library/Timer0.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9386 ;;		 -> Absolute function(1), Motor_Step(1), 
  9387 ;; Auto vars:     Size  Location     Type
  9388 ;;		None
  9389 ;; Return value:  Size  Location     Type
  9390 ;;                  1    wreg      void 
  9391 ;; Registers used:
  9392 ;;		wreg, status,2, status,0
  9393 ;; Tracked objects:
  9394 ;;		On entry : 0/0
  9395 ;;		On exit  : 0/0
  9396 ;;		Unchanged: 0/0
  9397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9398 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;Total ram usage:        3 bytes
  9403 ;; Hardware stack levels used:    1
  9404 ;; Hardware stack levels required when called:    7
  9405 ;; This function calls:
  9406 ;;		Nothing
  9407 ;; This function is called by:
  9408 ;;		_Motor_Move
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           	psect	text36
  9413  016326                     __ptext36:
  9414                           	opt stack 0
  9415  016326                     _Timer0_Start:
  9416                           	opt stack 20
  9417                           
  9418                           ;Timer0.c: 77: gISR = pFunction;
  9419                           
  9420                           ;incstack = 0
  9421  016326  C0BA  F060         	movff	Timer0_Start@pFunction,_gISR
  9422  01632A  C0BB  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
  9423  01632E  C0BC  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
  9424                           
  9425                           ;Timer0.c: 78: TMR0 = COUNTER;
  9426  016332  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9427  016336  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9428                           
  9429                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9430  01633A  50D5               	movf	4053,w,c	;volatile
  9431  01633C  0100               	movlb	0	; () banked
  9432  01633E  198D               	xorwf	_INDEX& (0+255),w,b
  9433  016340  0BF8               	andlw	-8
  9434  016342  198D               	xorwf	_INDEX& (0+255),w,b
  9435  016344  6ED5               	movwf	4053,c	;volatile
  9436                           
  9437                           ; BSR set to: 0
  9438                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9439  016346  94F2               	bcf	intcon,2,c	;volatile
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9443  016348  8AF2               	bsf	intcon,5,c	;volatile
  9444                           
  9445                           ; BSR set to: 0
  9446  01634A  0012               	return		;funcret
  9447  01634C                     __end_of_Timer0_Start:
  9448                           	opt stack 0
  9449                           tblptru	equ	0xFF8
  9450                           tblptrh	equ	0xFF7
  9451                           tblptrl	equ	0xFF6
  9452                           tablat	equ	0xFF5
  9453                           prodh	equ	0xFF4
  9454                           prodl	equ	0xFF3
  9455                           intcon	equ	0xFF2
  9456                           postinc0	equ	0xFEE
  9457                           wreg	equ	0xFE8
  9458                           postdec1	equ	0xFE5
  9459                           fsr1h	equ	0xFE2
  9460                           fsr1l	equ	0xFE1
  9461                           indf2	equ	0xFDF
  9462                           postinc2	equ	0xFDE
  9463                           postdec2	equ	0xFDD
  9464                           fsr2h	equ	0xFDA
  9465                           fsr2l	equ	0xFD9
  9466                           status	equ	0xFD8
  9467                           
  9468 ;; *************** function _HMI_Render *****************
  9469 ;; Defined at:
  9470 ;;		line 138 in file "HMI.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;  a               2    8[BANK0 ] unsigned short 
  9475 ;; Return value:  Size  Location     Type
  9476 ;;                  1    wreg      void 
  9477 ;; Registers used:
  9478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9487 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9488 ;;Total ram usage:        2 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    9
  9491 ;; This function calls:
  9492 ;;		_OutSeg
  9493 ;; This function is called by:
  9494 ;;		_findClosestWall
  9495 ;;		_mode1
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           	psect	text37
  9500  015F44                     __ptext37:
  9501                           	opt stack 0
  9502  015F44                     _HMI_Render:
  9503                           	opt stack 19
  9504                           
  9505                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9506                           
  9507                           ; BSR set to: 0
  9508                           ;incstack = 0
  9509  015F44  0E00               	movlw	0
  9510  015F46  0100               	movlb	0	; () banked
  9511  015F48  6FC3               	movwf	(HMI_Render@a+1)& (0+255),b
  9512  015F4A  0E00               	movlw	0
  9513  015F4C  6FC2               	movwf	HMI_Render@a& (0+255),b
  9514  015F4E                     l14051:
  9515                           
  9516                           ; BSR set to: 0
  9517  015F4E  0100               	movlb	0	; () banked
  9518  015F50  51C3               	movf	(HMI_Render@a+1)& (0+255),w,b
  9519  015F52  E116               	bnz	l1158
  9520  015F54  0E08               	movlw	8
  9521  015F56  0100               	movlb	0	; () banked
  9522  015F58  5DC2               	subwf	HMI_Render@a& (0+255),w,b
  9523  015F5A  B0D8               	btfsc	status,0,c
  9524  015F5C  0012               	return	
  9525                           
  9526                           ; BSR set to: 0
  9527                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9528                           
  9529                           ; BSR set to: 0
  9530                           
  9531                           ; BSR set to: 0
  9532  015F5E  C0C2  F0BD         	movff	HMI_Render@a,OutSeg@pSegment
  9533  015F62  0E3E               	movlw	low _HMIBoard
  9534  015F64  0100               	movlb	0	; () banked
  9535  015F66  25C2               	addwf	HMI_Render@a& (0+255),w,b
  9536  015F68  6ED9               	movwf	fsr2l,c
  9537  015F6A  0E03               	movlw	high _HMIBoard
  9538  015F6C  0100               	movlb	0	; () banked
  9539  015F6E  21C3               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9540  015F70  6EDA               	movwf	fsr2h,c
  9541  015F72  50DF               	movf	indf2,w,c
  9542  015F74  EC24  F0A8         	call	_OutSeg
  9543  015F78  0100               	movlb	0	; () banked
  9544  015F7A  4BC2               	infsnz	HMI_Render@a& (0+255),f,b
  9545  015F7C  2BC3               	incf	(HMI_Render@a+1)& (0+255),f,b
  9546  015F7E  D7E7               	goto	l14051
  9547  015F80                     l1158:
  9548                           
  9549                           ; BSR set to: 0
  9550  015F80  0012               	return		;funcret
  9551  015F82                     __end_of_HMI_Render:
  9552                           	opt stack 0
  9553                           tblptru	equ	0xFF8
  9554                           tblptrh	equ	0xFF7
  9555                           tblptrl	equ	0xFF6
  9556                           tablat	equ	0xFF5
  9557                           prodh	equ	0xFF4
  9558                           prodl	equ	0xFF3
  9559                           intcon	equ	0xFF2
  9560                           postinc0	equ	0xFEE
  9561                           wreg	equ	0xFE8
  9562                           postdec1	equ	0xFE5
  9563                           fsr1h	equ	0xFE2
  9564                           fsr1l	equ	0xFE1
  9565                           indf2	equ	0xFDF
  9566                           postinc2	equ	0xFDE
  9567                           postdec2	equ	0xFDD
  9568                           fsr2h	equ	0xFDA
  9569                           fsr2l	equ	0xFD9
  9570                           status	equ	0xFD8
  9571                           
  9572 ;; *************** function _OutSeg *****************
  9573 ;; Defined at:
  9574 ;;		line 54 in file "HMI.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;  pInput          1    wreg     unsigned char 
  9577 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9578 ;; Auto vars:     Size  Location     Type
  9579 ;;  pInput          1    6[BANK0 ] unsigned char 
  9580 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9581 ;; Return value:  Size  Location     Type
  9582 ;;                  1    wreg      void 
  9583 ;; Registers used:
  9584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9585 ;; Tracked objects:
  9586 ;;		On entry : 0/0
  9587 ;;		On exit  : 0/0
  9588 ;;		Unchanged: 0/0
  9589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9590 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9592 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9593 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;Total ram usage:        5 bytes
  9595 ;; Hardware stack levels used:    1
  9596 ;; Hardware stack levels required when called:    8
  9597 ;; This function calls:
  9598 ;;		_SPI_Send
  9599 ;; This function is called by:
  9600 ;;		_HMI_Render
  9601 ;;		_HMI_GRender
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           	psect	text38
  9606  015048                     __ptext38:
  9607                           	opt stack 0
  9608  015048                     _OutSeg:
  9609                           	opt stack 19
  9610                           
  9611                           ; BSR set to: 0
  9612                           ;incstack = 0
  9613                           ;OutSeg@pInput stored from wreg
  9614  015048  0100               	movlb	0	; () banked
  9615  01504A  6FC0               	movwf	OutSeg@pInput& (0+255),b
  9616                           
  9617                           ;HMI.c: 58: static UINT8 cur;
  9618                           ;HMI.c: 59: volatile UINT8 out;
  9619                           ;HMI.c: 60: static UINT8 segset;
  9620                           ;HMI.c: 61: static UINT8 a;
  9621                           ;HMI.c: 83: if (pSegment <= 8)
  9622  01504C  0E09               	movlw	9
  9623  01504E  0100               	movlb	0	; () banked
  9624  015050  61BD               	cpfslt	OutSeg@pSegment& (0+255),b
  9625  015052  0012               	return	
  9626                           
  9627                           ; BSR set to: 0
  9628                           ;HMI.c: 84: {
  9629                           ;HMI.c: 85: cur = pInput;
  9630  015054  C0C0  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9634  015058  0E00               	movlw	0
  9635  01505A  6E3D               	movwf	OutSeg@a,c
  9636  01505C                     l13391:
  9637                           
  9638                           ; BSR set to: 0
  9639  01505C  0E07               	movlw	7
  9640  01505E  643D               	cpfsgt	OutSeg@a,c
  9641  015060  D001               	goto	l1146
  9642  015062  D027               	goto	u9990
  9643  015064                     l1146:
  9644                           
  9645                           ;HMI.c: 87: {
  9646                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9647                           
  9648                           ; BSR set to: 0
  9649  015064  C03F  F0BE         	movff	OutSeg@cur,??_OutSeg
  9650  015068  0E01               	movlw	1
  9651  01506A  0100               	movlb	0	; () banked
  9652  01506C  17BE               	andwf	??_OutSeg& (0+255),f,b
  9653  01506E  0E06               	movlw	6
  9654  015070  0100               	movlb	0	; () banked
  9655  015072  6FBF               	movwf	(??_OutSeg+1)& (0+255),b
  9656  015074                     u9985:
  9657  015074  0100               	movlb	0	; () banked
  9658  015076  90D8               	bcf	status,0,c
  9659  015078  37BE               	rlcf	??_OutSeg& (0+255),f,b
  9660  01507A  0100               	movlb	0	; () banked
  9661  01507C  2FBF               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9662  01507E  D7FA               	goto	u9985
  9663  015080  0100               	movlb	0	; () banked
  9664  015082  51BE               	movf	??_OutSeg& (0+255),w,b
  9665  015084  6E3E               	movwf	OutSeg@segset,c
  9666                           
  9667                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9668  015086  0100               	movlb	0	; () banked
  9669  015088  39BD               	swapf	OutSeg@pSegment& (0+255),w,b
  9670  01508A  42E8               	rrncf	wreg,f,c
  9671  01508C  0BF8               	andlw	248
  9672  01508E  103D               	iorwf	OutSeg@a,w,c
  9673  015090  103E               	iorwf	OutSeg@segset,w,c
  9674  015092  0100               	movlb	0	; () banked
  9675  015094  6FC1               	movwf	OutSeg@out& (0+255),b	;volatile
  9676                           
  9677                           ;HMI.c: 90: cur >>= 1;
  9678  015096  90D8               	bcf	status,0,c
  9679  015098  323F               	rrcf	OutSeg@cur,f,c
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9683  01509A  0E78               	movlw	low _SPI1
  9684  01509C  0100               	movlb	0	; () banked
  9685  01509E  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9686  0150A0  0E03               	movlw	high _SPI1
  9687  0150A2  0100               	movlb	0	; () banked
  9688  0150A4  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9689  0150A6  C0C1  F0BC         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9690  0150AA  EC77  F0AA         	call	_SPI_Send	;wreg free
  9691  0150AE  2A3D               	incf	OutSeg@a,f,c
  9692  0150B0  D7D5               	goto	l13391
  9693  0150B2                     u9990:
  9694                           
  9695                           ;HMI.c: 96: }
  9696                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9697  0150B2  0E78               	movlw	low _SPI1
  9698  0150B4  0100               	movlb	0	; () banked
  9699  0150B6  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9700  0150B8  0E03               	movlw	high _SPI1
  9701  0150BA  0100               	movlb	0	; () banked
  9702  0150BC  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9703  0150BE  0E00               	movlw	0
  9704  0150C0  0100               	movlb	0	; () banked
  9705  0150C2  6FBC               	movwf	SPI_Send@pData& (0+255),b
  9706  0150C4  EC77  F0AA         	call	_SPI_Send	;wreg free
  9707  0150C8  0012               	return	
  9708  0150CA                     __end_of_OutSeg:
  9709                           	opt stack 0
  9710                           tblptru	equ	0xFF8
  9711                           tblptrh	equ	0xFF7
  9712                           tblptrl	equ	0xFF6
  9713                           tablat	equ	0xFF5
  9714                           prodh	equ	0xFF4
  9715                           prodl	equ	0xFF3
  9716                           intcon	equ	0xFF2
  9717                           postinc0	equ	0xFEE
  9718                           wreg	equ	0xFE8
  9719                           postdec1	equ	0xFE5
  9720                           fsr1h	equ	0xFE2
  9721                           fsr1l	equ	0xFE1
  9722                           indf2	equ	0xFDF
  9723                           postinc2	equ	0xFDE
  9724                           postdec2	equ	0xFDD
  9725                           fsr2h	equ	0xFDA
  9726                           fsr2l	equ	0xFD9
  9727                           status	equ	0xFD8
  9728                           
  9729 ;; *************** function _Console_Render *****************
  9730 ;; Defined at:
  9731 ;;		line 377 in file "Library/Console.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;		None
  9734 ;; Auto vars:     Size  Location     Type
  9735 ;;  lCursor         4   38[BANK0 ] struct Point
  9736 ;;  y               1   43[BANK0 ] unsigned char 
  9737 ;;  x               1   42[BANK0 ] unsigned char 
  9738 ;;  temp            1   37[BANK0 ] unsigned char 
  9739 ;;  Temp            2    0        unsigned short 
  9740 ;; Return value:  Size  Location     Type
  9741 ;;                  1    wreg      void 
  9742 ;; Registers used:
  9743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9750 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9751 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9752 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9753 ;;Total ram usage:        9 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:   11
  9756 ;; This function calls:
  9757 ;;		_Console_MakeField
  9758 ;;		_LCD_DrawField
  9759 ;;		_LCD_FillRectangle
  9760 ;; This function is called by:
  9761 ;;		_findClosestWall
  9762 ;;		_mode1
  9763 ;;		_mode2
  9764 ;;		_mode4
  9765 ;;		_main
  9766 ;; This function uses a non-reentrant model
  9767 ;;
  9768                           
  9769                           	psect	text39
  9770  011F1C                     __ptext39:
  9771                           	opt stack 0
  9772  011F1C                     _Console_Render:
  9773                           	opt stack 17
  9774                           
  9775                           ;Console.c: 379: Colour Temp;
  9776                           ;Console.c: 380: if (change)
  9777                           
  9778                           ;incstack = 0
  9779  011F1C  0100               	movlb	0	; () banked
  9780  011F1E  51FF               	movf	_change& (0+255),w,b
  9781  011F20  B4D8               	btfsc	status,2,c
  9782  011F22  0012               	return	
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;Console.c: 381: {
  9786                           ;Console.c: 382: UINT8 x, y, temp;
  9787                           ;Console.c: 383: Point lCursor = {6,6};
  9788  011F24  C3E8  F0E0         	movff	Console_Render@F6956,Console_Render@lCursor
  9789  011F28  C3E9  F0E1         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9790  011F2C  C3EA  F0E2         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9791  011F30  C3EB  F0E3         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9792                           
  9793                           ; BSR set to: 0
  9794                           ;Console.c: 385: if (clearall)
  9795  011F34  0100               	movlb	0	; () banked
  9796  011F36  5190               	movf	_clearall& (0+255),w,b
  9797  011F38  B4D8               	btfsc	status,2,c
  9798  011F3A  D005               	goto	l1056
  9799                           
  9800                           ; BSR set to: 0
  9801                           ;Console.c: 386: {
  9802                           ;Console.c: 389: temp = lBufferY;
  9803  011F3C  C08E  F0DF         	movff	_lBufferY,Console_Render@temp
  9804                           
  9805                           ; BSR set to: 0
  9806                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9807  011F40  0E0F               	movlw	15
  9808  011F42  0100               	movlb	0	; () banked
  9809  011F44  6F8E               	movwf	_lBufferY& (0+255),b
  9810  011F46                     l1056:
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;Console.c: 391: }
  9814                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9815  011F46  0E00               	movlw	0
  9816  011F48  0100               	movlb	0	; () banked
  9817  011F4A  6FE5               	movwf	Console_Render@y& (0+255),b
  9818  011F4C  D0DF               	goto	l1057
  9819  011F4E                     
  9820                           ; BSR set to: 0
  9821                           ;Console.c: 394: {
  9822                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9823                           
  9824                           ; BSR set to: 0
  9825  011F4E  0100               	movlb	0	; () banked
  9826  011F50  51E5               	movf	Console_Render@y& (0+255),w,b
  9827  011F52  0D02               	mullw	2
  9828  011F54  0E00               	movlw	low _lCBuffer
  9829  011F56  24F3               	addwf	prodl,w,c
  9830  011F58  6ED9               	movwf	fsr2l,c
  9831  011F5A  0E03               	movlw	high _lCBuffer
  9832  011F5C  20F4               	addwfc	prodh,w,c
  9833  011F5E  6EDA               	movwf	fsr2h,c
  9834  011F60  CFDE F0FD          	movff	postinc2,_gForecolour
  9835  011F64  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9836                           
  9837                           ; BSR set to: 0
  9838                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9839  011F68  0E00               	movlw	0
  9840  011F6A  0100               	movlb	0	; () banked
  9841  011F6C  6FE4               	movwf	Console_Render@x& (0+255),b
  9842  011F6E                     l14015:
  9843                           
  9844                           ; BSR set to: 0
  9845  011F6E  0E13               	movlw	19
  9846  011F70  0100               	movlb	0	; () banked
  9847  011F72  65E4               	cpfsgt	Console_Render@x& (0+255),b
  9848  011F74  D001               	goto	l1059
  9849  011F76  D0BE               	goto	u10830
  9850  011F78                     l1059:
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;Console.c: 397: {
  9854                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9855                           
  9856                           ; BSR set to: 0
  9857  011F78  0100               	movlb	0	; () banked
  9858  011F7A  51E5               	movf	Console_Render@y& (0+255),w,b
  9859  011F7C  0D14               	mullw	20
  9860  011F7E  0EAA               	movlw	low _lBuffer
  9861  011F80  0100               	movlb	0	; () banked
  9862  011F82  6FDD               	movwf	??_Console_Render& (0+255),b
  9863  011F84  0E04               	movlw	high _lBuffer
  9864  011F86  0100               	movlb	0	; () banked
  9865  011F88  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9866  011F8A  50F3               	movf	prodl,w,c
  9867  011F8C  0100               	movlb	0	; () banked
  9868  011F8E  27DD               	addwf	??_Console_Render& (0+255),f,b
  9869  011F90  50F4               	movf	prodh,w,c
  9870  011F92  0100               	movlb	0	; () banked
  9871  011F94  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9872  011F96  0100               	movlb	0	; () banked
  9873  011F98  51E4               	movf	Console_Render@x& (0+255),w,b
  9874  011F9A  0D01               	mullw	1
  9875  011F9C  50F3               	movf	prodl,w,c
  9876  011F9E  0100               	movlb	0	; () banked
  9877  011FA0  25DD               	addwf	??_Console_Render& (0+255),w,b
  9878  011FA2  6ED9               	movwf	fsr2l,c
  9879  011FA4  50F4               	movf	prodh,w,c
  9880  011FA6  0100               	movlb	0	; () banked
  9881  011FA8  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9882  011FAA  6EDA               	movwf	fsr2h,c
  9883  011FAC  AEDF               	btfss	indf2,7,c
  9884  011FAE  D09A               	goto	l1063
  9885                           
  9886                           ; BSR set to: 0
  9887                           ;Console.c: 399: {
  9888                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9889  011FB0  0100               	movlb	0	; () banked
  9890  011FB2  51E5               	movf	Console_Render@y& (0+255),w,b
  9891  011FB4  0D14               	mullw	20
  9892  011FB6  0EAA               	movlw	low _lBuffer
  9893  011FB8  0100               	movlb	0	; () banked
  9894  011FBA  6FDD               	movwf	??_Console_Render& (0+255),b
  9895  011FBC  0E04               	movlw	high _lBuffer
  9896  011FBE  0100               	movlb	0	; () banked
  9897  011FC0  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9898  011FC2  50F3               	movf	prodl,w,c
  9899  011FC4  0100               	movlb	0	; () banked
  9900  011FC6  27DD               	addwf	??_Console_Render& (0+255),f,b
  9901  011FC8  50F4               	movf	prodh,w,c
  9902  011FCA  0100               	movlb	0	; () banked
  9903  011FCC  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9904  011FCE  0100               	movlb	0	; () banked
  9905  011FD0  51E4               	movf	Console_Render@x& (0+255),w,b
  9906  011FD2  0D01               	mullw	1
  9907  011FD4  50F3               	movf	prodl,w,c
  9908  011FD6  0100               	movlb	0	; () banked
  9909  011FD8  25DD               	addwf	??_Console_Render& (0+255),w,b
  9910  011FDA  6ED9               	movwf	fsr2l,c
  9911  011FDC  50F4               	movf	prodh,w,c
  9912  011FDE  0100               	movlb	0	; () banked
  9913  011FE0  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9914  011FE2  6EDA               	movwf	fsr2h,c
  9915  011FE4  0E7F               	movlw	127
  9916  011FE6  16DF               	andwf	indf2,f,c
  9917                           
  9918                           ;Console.c: 401: if (lBuffer[y][x])
  9919  011FE8  0100               	movlb	0	; () banked
  9920  011FEA  51E5               	movf	Console_Render@y& (0+255),w,b
  9921  011FEC  0D14               	mullw	20
  9922  011FEE  0EAA               	movlw	low _lBuffer
  9923  011FF0  0100               	movlb	0	; () banked
  9924  011FF2  6FDD               	movwf	??_Console_Render& (0+255),b
  9925  011FF4  0E04               	movlw	high _lBuffer
  9926  011FF6  0100               	movlb	0	; () banked
  9927  011FF8  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9928  011FFA  50F3               	movf	prodl,w,c
  9929  011FFC  0100               	movlb	0	; () banked
  9930  011FFE  27DD               	addwf	??_Console_Render& (0+255),f,b
  9931  012000  50F4               	movf	prodh,w,c
  9932  012002  0100               	movlb	0	; () banked
  9933  012004  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9934  012006  0100               	movlb	0	; () banked
  9935  012008  51E4               	movf	Console_Render@x& (0+255),w,b
  9936  01200A  0D01               	mullw	1
  9937  01200C  50F3               	movf	prodl,w,c
  9938  01200E  0100               	movlb	0	; () banked
  9939  012010  25DD               	addwf	??_Console_Render& (0+255),w,b
  9940  012012  6ED9               	movwf	fsr2l,c
  9941  012014  50F4               	movf	prodh,w,c
  9942  012016  0100               	movlb	0	; () banked
  9943  012018  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9944  01201A  6EDA               	movwf	fsr2h,c
  9945  01201C  50DF               	movf	indf2,w,c
  9946  01201E  B4D8               	btfsc	status,2,c
  9947  012020  D04A               	goto	l1062
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;Console.c: 402: {
  9951                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9952  012022  C083  F0C3         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9953  012026  C084  F0C4         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9954  01202A  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9955  01202E  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9956  012032  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9957  012036  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9958  01203A  C3F0  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
  9959  01203E  C3F1  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9960  012042  C3F2  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9961  012046  C3F3  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9962  01204A  EC57  F0A9         	call	_LCD_FillRectangle	;wreg free
  9963                           
  9964                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9965  01204E  0100               	movlb	0	; () banked
  9966  012050  51E5               	movf	Console_Render@y& (0+255),w,b
  9967  012052  0D14               	mullw	20
  9968  012054  0EAA               	movlw	low _lBuffer
  9969  012056  0100               	movlb	0	; () banked
  9970  012058  6FDD               	movwf	??_Console_Render& (0+255),b
  9971  01205A  0E04               	movlw	high _lBuffer
  9972  01205C  0100               	movlb	0	; () banked
  9973  01205E  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9974  012060  50F3               	movf	prodl,w,c
  9975  012062  0100               	movlb	0	; () banked
  9976  012064  27DD               	addwf	??_Console_Render& (0+255),f,b
  9977  012066  50F4               	movf	prodh,w,c
  9978  012068  0100               	movlb	0	; () banked
  9979  01206A  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9980  01206C  0100               	movlb	0	; () banked
  9981  01206E  51E4               	movf	Console_Render@x& (0+255),w,b
  9982  012070  0D01               	mullw	1
  9983  012072  50F3               	movf	prodl,w,c
  9984  012074  0100               	movlb	0	; () banked
  9985  012076  25DD               	addwf	??_Console_Render& (0+255),w,b
  9986  012078  6ED9               	movwf	fsr2l,c
  9987  01207A  50F4               	movf	prodh,w,c
  9988  01207C  0100               	movlb	0	; () banked
  9989  01207E  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9990  012080  6EDA               	movwf	fsr2h,c
  9991  012082  50DF               	movf	indf2,w,c
  9992  012084  EC60  F09F         	call	_Console_MakeField
  9993  012088  C0BF  F0CC         	movff	?_Console_MakeField,LCD_DrawField@pField
  9994  01208C  C0C0  F0CD         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9995  012090  C0E0  F0CE         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9996  012094  C0E1  F0CF         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9997  012098  C0E2  F0D0         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9998  01209C  C0E3  F0D1         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9999  0120A0  C3F0  F0D2         	movff	_gCharSize,LCD_DrawField@pSize
 10000  0120A4  C3F1  F0D3         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 10001  0120A8  C3F2  F0D4         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 10002  0120AC  C3F3  F0D5         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 10003  0120B0  EC05  F0A5         	call	_LCD_DrawField	;wreg free
 10004                           
 10005                           ;Console.c: 405: }
 10006  0120B4  D017               	goto	l1063
 10007  0120B6                     l1062:
 10008                           
 10009                           ;Console.c: 406: else
 10010                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10011  0120B6  0E00               	movlw	0
 10012  0120B8  0100               	movlb	0	; () banked
 10013  0120BA  6FC4               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10014  0120BC  0E00               	movlw	0
 10015  0120BE  6FC3               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10016  0120C0  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10017  0120C4  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10018  0120C8  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10019  0120CC  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10020  0120D0  C3F0  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 10021  0120D4  C3F1  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10022  0120D8  C3F2  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10023  0120DC  C3F3  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10024  0120E0  EC57  F0A9         	call	_LCD_FillRectangle	;wreg free
 10025  0120E4                     l1063:
 10026                           
 10027                           ;Console.c: 408: }
 10028                           ;Console.c: 409: lCursor.x += (5 + 1);
 10029  0120E4  0E06               	movlw	6
 10030  0120E6  0100               	movlb	0	; () banked
 10031  0120E8  27E0               	addwf	Console_Render@lCursor& (0+255),f,b
 10032  0120EA  0E00               	movlw	0
 10033  0120EC  23E1               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10034                           
 10035                           ; BSR set to: 0
 10036  0120EE  0100               	movlb	0	; () banked
 10037  0120F0  2BE4               	incf	Console_Render@x& (0+255),f,b
 10038  0120F2  D73D               	goto	l14015
 10039  0120F4                     u10830:
 10040                           
 10041                           ; BSR set to: 0
 10042                           ;Console.c: 410: }
 10043                           ;Console.c: 411: lCursor.y += (7 + 1);
 10044                           
 10045                           ; BSR set to: 0
 10046  0120F4  0E08               	movlw	8
 10047  0120F6  0100               	movlb	0	; () banked
 10048  0120F8  27E2               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10049  0120FA  0E00               	movlw	0
 10050  0120FC  23E3               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10051                           
 10052                           ; BSR set to: 0
 10053                           ;Console.c: 412: lCursor.x = 6;
 10054  0120FE  0E00               	movlw	0
 10055  012100  0100               	movlb	0	; () banked
 10056  012102  6FE1               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10057  012104  0E06               	movlw	6
 10058  012106  6FE0               	movwf	Console_Render@lCursor& (0+255),b
 10059                           
 10060                           ; BSR set to: 0
 10061  012108  0100               	movlb	0	; () banked
 10062  01210A  2BE5               	incf	Console_Render@y& (0+255),f,b
 10063  01210C                     l1057:
 10064                           
 10065                           ; BSR set to: 0
 10066                           
 10067                           ; BSR set to: 0
 10068  01210C  0100               	movlb	0	; () banked
 10069  01210E  51E5               	movf	Console_Render@y& (0+255),w,b
 10070  012110  0100               	movlb	0	; () banked
 10071  012112  5D8E               	subwf	_lBufferY& (0+255),w,b
 10072  012114  B0D8               	btfsc	status,0,c
 10073  012116  D71B               	goto	l1058
 10074                           
 10075                           ; BSR set to: 0
 10076                           ;Console.c: 413: }
 10077                           ;Console.c: 415: if (clearall)
 10078                           
 10079                           ; BSR set to: 0
 10080  012118  0100               	movlb	0	; () banked
 10081  01211A  5190               	movf	_clearall& (0+255),w,b
 10082  01211C  B4D8               	btfsc	status,2,c
 10083  01211E  0012               	return	
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;Console.c: 416: {
 10087                           ;Console.c: 417: clearall = 0;
 10088  012120  0E00               	movlw	0
 10089  012122  0100               	movlb	0	; () banked
 10090  012124  6F90               	movwf	_clearall& (0+255),b
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;Console.c: 418: lBufferY = temp;
 10094  012126  C0DF  F08E         	movff	Console_Render@temp,_lBufferY
 10095                           
 10096                           ; BSR set to: 0
 10097  01212A  0012               	return	
 10098  01212C                     __end_of_Console_Render:
 10099                           	opt stack 0
 10100                           tblptru	equ	0xFF8
 10101                           tblptrh	equ	0xFF7
 10102                           tblptrl	equ	0xFF6
 10103                           tablat	equ	0xFF5
 10104                           prodh	equ	0xFF4
 10105                           prodl	equ	0xFF3
 10106                           intcon	equ	0xFF2
 10107                           postinc0	equ	0xFEE
 10108                           wreg	equ	0xFE8
 10109                           postdec1	equ	0xFE5
 10110                           fsr1h	equ	0xFE2
 10111                           fsr1l	equ	0xFE1
 10112                           indf2	equ	0xFDF
 10113                           postinc2	equ	0xFDE
 10114                           postdec2	equ	0xFDD
 10115                           fsr2h	equ	0xFDA
 10116                           fsr2l	equ	0xFD9
 10117                           status	equ	0xFD8
 10118                           
 10119 ;; *************** function _LCD_FillRectangle *****************
 10120 ;; Defined at:
 10121 ;;		line 318 in file "Library/LCD.c"
 10122 ;; Parameters:    Size  Location     Type
 10123 ;;  pColour         2    9[BANK0 ] unsigned short 
 10124 ;;  pPoint          4   11[BANK0 ] struct Point
 10125 ;;  pSize           4   15[BANK0 ] struct Point
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;  j               1   22[BANK0 ] unsigned char 
 10128 ;;  i               1   21[BANK0 ] unsigned char 
 10129 ;; Return value:  Size  Location     Type
 10130 ;;                  1    wreg      void 
 10131 ;; Registers used:
 10132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10138 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10139 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10140 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10141 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10142 ;;Total ram usage:       14 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; Hardware stack levels required when called:   10
 10145 ;; This function calls:
 10146 ;;		_LCD_Word_Write
 10147 ;;		_Set_Addr_Window
 10148 ;; This function is called by:
 10149 ;;		_Console_Render
 10150 ;;		_Console_ClearLine
 10151 ;; This function uses a non-reentrant model
 10152 ;;
 10153                           
 10154                           	psect	text40
 10155  0152AE                     __ptext40:
 10156                           	opt stack 0
 10157  0152AE                     _LCD_FillRectangle:
 10158                           	opt stack 17
 10159                           
 10160                           ;LCD.c: 320: UINT8 i = 0x00;
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;incstack = 0
 10164  0152AE  0E00               	movlw	0
 10165  0152B0  0100               	movlb	0	; () banked
 10166  0152B2  6FCF               	movwf	LCD_FillRectangle@i& (0+255),b
 10167                           
 10168                           ;LCD.c: 321: UINT8 j = 0x00;
 10169  0152B4  0E00               	movlw	0
 10170  0152B6  0100               	movlb	0	; () banked
 10171  0152B8  6FD0               	movwf	LCD_FillRectangle@j& (0+255),b
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10175  0152BA  C0C7  F0BF         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10176  0152BE  0100               	movlb	0	; () banked
 10177  0152C0  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10178  0152C2  0100               	movlb	0	; () banked
 10179  0152C4  25C9               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10180  0152C6  0100               	movlb	0	; () banked
 10181  0152C8  6FCD               	movwf	??_LCD_FillRectangle& (0+255),b
 10182  0152CA  0100               	movlb	0	; () banked
 10183  0152CC  05CD               	decf	??_LCD_FillRectangle& (0+255),w,b
 10184  0152CE  0100               	movlb	0	; () banked
 10185  0152D0  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10186  0152D2  0100               	movlb	0	; () banked
 10187  0152D4  51C7               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10188  0152D6  0100               	movlb	0	; () banked
 10189  0152D8  25CB               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10190  0152DA  0100               	movlb	0	; () banked
 10191  0152DC  6FCE               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10192  0152DE  0100               	movlb	0	; () banked
 10193  0152E0  05CE               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10194  0152E2  0100               	movlb	0	; () banked
 10195  0152E4  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10196  0152E6  0100               	movlb	0	; () banked
 10197  0152E8  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10198  0152EA  EC0F  F0A3         	call	_Set_Addr_Window
 10199                           
 10200                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10201  0152EE  C0CB  F0D0         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10202  0152F2                     l13127:
 10203  0152F2  0100               	movlb	0	; () banked
 10204  0152F4  51D0               	movf	LCD_FillRectangle@j& (0+255),w,b
 10205  0152F6  0100               	movlb	0	; () banked
 10206  0152F8  B4D8               	btfsc	status,2,c
 10207  0152FA  0012               	return	
 10208                           
 10209                           ; BSR set to: 0
 10210                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10211                           
 10212                           ; BSR set to: 0
 10213  0152FC  C0C9  F0CF         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10214  015300                     l13131:
 10215                           
 10216                           ; BSR set to: 0
 10217  015300  0100               	movlb	0	; () banked
 10218  015302  51CF               	movf	LCD_FillRectangle@i& (0+255),w,b
 10219  015304  0100               	movlb	0	; () banked
 10220  015306  B4D8               	btfsc	status,2,c
 10221  015308  D009               	goto	u9760
 10222                           
 10223                           ; BSR set to: 0
 10224                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10225                           
 10226                           ; BSR set to: 0
 10227                           
 10228                           ; BSR set to: 0
 10229  01530A  C0C3  F0BF         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10230  01530E  C0C4  F0C0         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10231  015312  EC07  F0B2         	call	_LCD_Word_Write	;wreg free
 10232  015316  0100               	movlb	0	; () banked
 10233  015318  07CF               	decf	LCD_FillRectangle@i& (0+255),f,b
 10234  01531A  D7F2               	goto	l13131
 10235  01531C                     u9760:
 10236                           
 10237                           ; BSR set to: 0
 10238                           
 10239                           ; BSR set to: 0
 10240  01531C  0100               	movlb	0	; () banked
 10241  01531E  07D0               	decf	LCD_FillRectangle@j& (0+255),f,b
 10242  015320  D7E8               	goto	l13127
 10243  015322                     __end_of_LCD_FillRectangle:
 10244                           	opt stack 0
 10245                           tblptru	equ	0xFF8
 10246                           tblptrh	equ	0xFF7
 10247                           tblptrl	equ	0xFF6
 10248                           tablat	equ	0xFF5
 10249                           prodh	equ	0xFF4
 10250                           prodl	equ	0xFF3
 10251                           intcon	equ	0xFF2
 10252                           postinc0	equ	0xFEE
 10253                           wreg	equ	0xFE8
 10254                           postdec1	equ	0xFE5
 10255                           fsr1h	equ	0xFE2
 10256                           fsr1l	equ	0xFE1
 10257                           indf2	equ	0xFDF
 10258                           postinc2	equ	0xFDE
 10259                           postdec2	equ	0xFDD
 10260                           fsr2h	equ	0xFDA
 10261                           fsr2l	equ	0xFD9
 10262                           status	equ	0xFD8
 10263                           
 10264 ;; *************** function _LCD_DrawField *****************
 10265 ;; Defined at:
 10266 ;;		line 393 in file "Library/LCD.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10269 ;;		 -> Console_MakeField@Fill(70), 
 10270 ;;  pPoint          4   20[BANK0 ] struct Point
 10271 ;;  pSize           4   24[BANK0 ] struct Point
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;  count           2   30[BANK0 ] unsigned short 
 10274 ;;  i               1   34[BANK0 ] unsigned char 
 10275 ;;  ymax            1   33[BANK0 ] unsigned char 
 10276 ;;  xmax            1   32[BANK0 ] unsigned char 
 10277 ;; Return value:  Size  Location     Type
 10278 ;;                  1    wreg      void 
 10279 ;; Registers used:
 10280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10281 ;; Tracked objects:
 10282 ;;		On entry : 0/0
 10283 ;;		On exit  : 0/0
 10284 ;;		Unchanged: 0/0
 10285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10286 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10287 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10289 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10290 ;;Total ram usage:       17 bytes
 10291 ;; Hardware stack levels used:    1
 10292 ;; Hardware stack levels required when called:   10
 10293 ;; This function calls:
 10294 ;;		_LCD_Word_Write
 10295 ;;		_Set_Addr_Window
 10296 ;;		___wmul
 10297 ;; This function is called by:
 10298 ;;		_Console_Render
 10299 ;; This function uses a non-reentrant model
 10300 ;;
 10301                           
 10302                           	psect	text41
 10303  014A0A                     __ptext41:
 10304                           	opt stack 0
 10305  014A0A                     _LCD_DrawField:
 10306                           	opt stack 17
 10307                           
 10308                           ;LCD.c: 396: UINT8 i = 0x00;
 10309                           
 10310                           ; BSR set to: 0
 10311                           ;incstack = 0
 10312  014A0A  0E00               	movlw	0
 10313  014A0C  0100               	movlb	0	; () banked
 10314  014A0E  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10315                           
 10316                           ; BSR set to: 0
 10317                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10318  014A10  0100               	movlb	0	; () banked
 10319  014A12  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10320  014A14  0100               	movlb	0	; () banked
 10321  014A16  25D2               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10322  014A18  0100               	movlb	0	; () banked
 10323  014A1A  6FDA               	movwf	LCD_DrawField@xmax& (0+255),b
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10327  014A1C  0100               	movlb	0	; () banked
 10328  014A1E  51D0               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10329  014A20  0100               	movlb	0	; () banked
 10330  014A22  25D4               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10331  014A24  0100               	movlb	0	; () banked
 10332  014A26  6FDB               	movwf	LCD_DrawField@ymax& (0+255),b
 10333                           
 10334                           ; BSR set to: 0
 10335                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10336  014A28  C0D4  F0BA         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10337  014A2C  C0D5  F0BB         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10338  014A30  C0D2  F0BC         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10339  014A34  C0D3  F0BD         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10340  014A38  EC76  F0B0         	call	___wmul	;wreg free
 10341  014A3C  C0BA  F0D8         	movff	?___wmul,LCD_DrawField@count
 10342  014A40  C0BB  F0D9         	movff	?___wmul+1,LCD_DrawField@count+1
 10343                           
 10344                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10345  014A44  C0D0  F0BF         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10346  014A48  0100               	movlb	0	; () banked
 10347  014A4A  05DA               	decf	LCD_DrawField@xmax& (0+255),w,b
 10348  014A4C  0100               	movlb	0	; () banked
 10349  014A4E  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10350  014A50  0100               	movlb	0	; () banked
 10351  014A52  05DB               	decf	LCD_DrawField@ymax& (0+255),w,b
 10352  014A54  0100               	movlb	0	; () banked
 10353  014A56  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10354  014A58  0100               	movlb	0	; () banked
 10355  014A5A  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10356  014A5C  EC0F  F0A3         	call	_Set_Addr_Window
 10357                           
 10358                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10359  014A60  0E00               	movlw	0
 10360  014A62  0100               	movlb	0	; () banked
 10361  014A64  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10362  014A66  D013               	goto	l183
 10363  014A68                     
 10364                           ; BSR set to: 0
 10365                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10366                           
 10367                           ; BSR set to: 0
 10368  014A68  0100               	movlb	0	; () banked
 10369  014A6A  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10370  014A6C  0D02               	mullw	2
 10371  014A6E  50F3               	movf	prodl,w,c
 10372  014A70  0100               	movlb	0	; () banked
 10373  014A72  25CC               	addwf	LCD_DrawField@pField& (0+255),w,b
 10374  014A74  6ED9               	movwf	fsr2l,c
 10375  014A76  50F4               	movf	prodh,w,c
 10376  014A78  0100               	movlb	0	; () banked
 10377  014A7A  21CD               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10378  014A7C  6EDA               	movwf	fsr2h,c
 10379  014A7E  CFDE F0BF          	movff	postinc2,LCD_Word_Write@value
 10380  014A82  CFDD F0C0          	movff	postdec2,LCD_Word_Write@value+1
 10381  014A86  EC07  F0B2         	call	_LCD_Word_Write	;wreg free
 10382  014A8A  0100               	movlb	0	; () banked
 10383  014A8C  2BDC               	incf	LCD_DrawField@i& (0+255),f,b
 10384  014A8E                     l183:
 10385                           
 10386                           ; BSR set to: 0
 10387                           
 10388                           ; BSR set to: 0
 10389  014A8E  0100               	movlb	0	; () banked
 10390  014A90  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10391  014A92  0100               	movlb	0	; () banked
 10392  014A94  6FD6               	movwf	??_LCD_DrawField& (0+255),b
 10393  014A96  6BD7               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10394  014A98  0100               	movlb	0	; () banked
 10395  014A9A  51D8               	movf	LCD_DrawField@count& (0+255),w,b
 10396  014A9C  0100               	movlb	0	; () banked
 10397  014A9E  5DD6               	subwf	??_LCD_DrawField& (0+255),w,b
 10398  014AA0  0100               	movlb	0	; () banked
 10399  014AA2  51D9               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10400  014AA4  0100               	movlb	0	; () banked
 10401  014AA6  59D7               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10402  014AA8  B0D8               	btfsc	status,0,c
 10403  014AAA  0012               	return	
 10404  014AAC  D7DD               	goto	l184
 10405  014AAE                     __end_of_LCD_DrawField:
 10406                           	opt stack 0
 10407                           tblptru	equ	0xFF8
 10408                           tblptrh	equ	0xFF7
 10409                           tblptrl	equ	0xFF6
 10410                           tablat	equ	0xFF5
 10411                           prodh	equ	0xFF4
 10412                           prodl	equ	0xFF3
 10413                           intcon	equ	0xFF2
 10414                           postinc0	equ	0xFEE
 10415                           wreg	equ	0xFE8
 10416                           postdec1	equ	0xFE5
 10417                           fsr1h	equ	0xFE2
 10418                           fsr1l	equ	0xFE1
 10419                           indf2	equ	0xFDF
 10420                           postinc2	equ	0xFDE
 10421                           postdec2	equ	0xFDD
 10422                           fsr2h	equ	0xFDA
 10423                           fsr2l	equ	0xFD9
 10424                           status	equ	0xFD8
 10425                           
 10426 ;; *************** function ___wmul *****************
 10427 ;; Defined at:
 10428 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10431 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10432 ;; Auto vars:     Size  Location     Type
 10433 ;;  product         2    4[BANK0 ] unsigned int 
 10434 ;; Return value:  Size  Location     Type
 10435 ;;                  2    0[BANK0 ] unsigned int 
 10436 ;; Registers used:
 10437 ;;		wreg, status,2, status,0, prodl, prodh
 10438 ;; Tracked objects:
 10439 ;;		On entry : 0/0
 10440 ;;		On exit  : 0/0
 10441 ;;		Unchanged: 0/0
 10442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10444 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;Total ram usage:        6 bytes
 10448 ;; Hardware stack levels used:    1
 10449 ;; Hardware stack levels required when called:    7
 10450 ;; This function calls:
 10451 ;;		Nothing
 10452 ;; This function is called by:
 10453 ;;		_LCD_DrawField
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text42
 10458  0160EC                     __ptext42:
 10459                           	opt stack 0
 10460  0160EC                     ___wmul:
 10461                           	opt stack 19
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;incstack = 0
 10465  0160EC  0100               	movlb	0	; () banked
 10466  0160EE  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10467  0160F0  0100               	movlb	0	; () banked
 10468  0160F2  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10469  0160F4  CFF3 F0BE          	movff	prodl,___wmul@product
 10470  0160F8  CFF4 F0BF          	movff	prodh,___wmul@product+1
 10471  0160FC  0100               	movlb	0	; () banked
 10472  0160FE  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10473  016100  0100               	movlb	0	; () banked
 10474  016102  03BD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10475  016104  50F3               	movf	prodl,w,c
 10476  016106  0100               	movlb	0	; () banked
 10477  016108  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10478  01610A  0100               	movlb	0	; () banked
 10479  01610C  51BB               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10480  01610E  0100               	movlb	0	; () banked
 10481  016110  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10482  016112  50F3               	movf	prodl,w,c
 10483  016114  0100               	movlb	0	; () banked
 10484  016116  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10485                           
 10486                           ; BSR set to: 0
 10487  016118  C0BE  F0BA         	movff	___wmul@product,?___wmul
 10488  01611C  C0BF  F0BB         	movff	___wmul@product+1,?___wmul+1
 10489  016120  0012               	return	
 10490  016122                     __end_of___wmul:
 10491                           	opt stack 0
 10492                           tblptru	equ	0xFF8
 10493                           tblptrh	equ	0xFF7
 10494                           tblptrl	equ	0xFF6
 10495                           tablat	equ	0xFF5
 10496                           prodh	equ	0xFF4
 10497                           prodl	equ	0xFF3
 10498                           intcon	equ	0xFF2
 10499                           postinc0	equ	0xFEE
 10500                           wreg	equ	0xFE8
 10501                           postdec1	equ	0xFE5
 10502                           fsr1h	equ	0xFE2
 10503                           fsr1l	equ	0xFE1
 10504                           indf2	equ	0xFDF
 10505                           postinc2	equ	0xFDE
 10506                           postdec2	equ	0xFDD
 10507                           fsr2h	equ	0xFDA
 10508                           fsr2l	equ	0xFD9
 10509                           status	equ	0xFD8
 10510                           
 10511 ;; *************** function _Console_MakeField *****************
 10512 ;; Defined at:
 10513 ;;		line 435 in file "Library/Console.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;  pInput          1    wreg     unsigned char 
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;  pInput          1   11[BANK0 ] unsigned char 
 10518 ;;  y               1   17[BANK0 ] unsigned char 
 10519 ;;  x               1   16[BANK0 ] unsigned char 
 10520 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10521 ;;		 -> Font5x7(480), 
 10522 ;;  Index           2    9[BANK0 ] unsigned short 
 10523 ;; Return value:  Size  Location     Type
 10524 ;;                  2    5[BANK0 ] PTR unsigned short 
 10525 ;; Registers used:
 10526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10532 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10533 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10535 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;Total ram usage:       13 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    8
 10539 ;; This function calls:
 10540 ;;		_Byte_GetBit
 10541 ;; This function is called by:
 10542 ;;		_Console_Render
 10543 ;; This function uses a non-reentrant model
 10544 ;;
 10545                           
 10546                           	psect	text43
 10547  013EC0                     __ptext43:
 10548                           	opt stack 0
 10549  013EC0                     _Console_MakeField:
 10550                           	opt stack 19
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;incstack = 0
 10554                           ;Console_MakeField@pInput stored from wreg
 10555  013EC0  0100               	movlb	0	; () banked
 10556  013EC2  6FC5               	movwf	Console_MakeField@pInput& (0+255),b
 10557                           
 10558                           ;Console.c: 437: static Colour Fill[7][5];
 10559                           ;Console.c: 438: pInput -= 32;
 10560  013EC4  0E20               	movlw	32
 10561  013EC6  0100               	movlb	0	; () banked
 10562  013EC8  5FC5               	subwf	Console_MakeField@pInput& (0+255),f,b
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10566  013ECA  0100               	movlb	0	; () banked
 10567  013ECC  51C5               	movf	Console_MakeField@pInput& (0+255),w,b
 10568  013ECE  0D05               	mullw	5
 10569  013ED0  CFF3 F0C3          	movff	prodl,Console_MakeField@Index
 10570  013ED4  CFF4 F0C4          	movff	prodh,Console_MakeField@Index+1
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10574  013ED8  0E1F               	movlw	low _Font5x7
 10575  013EDA  0100               	movlb	0	; () banked
 10576  013EDC  25C3               	addwf	Console_MakeField@Index& (0+255),w,b
 10577  013EDE  0100               	movlb	0	; () banked
 10578  013EE0  6FC6               	movwf	Console_MakeField@Column& (0+255),b
 10579  013EE2  0EFD               	movlw	high _Font5x7
 10580  013EE4  0100               	movlb	0	; () banked
 10581  013EE6  21C4               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10582  013EE8  0100               	movlb	0	; () banked
 10583  013EEA  6FC7               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10584                           
 10585                           ; BSR set to: 0
 10586                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10587  013EEC  0E00               	movlw	0
 10588  013EEE  0100               	movlb	0	; () banked
 10589  013EF0  6FCA               	movwf	Console_MakeField@x& (0+255),b
 10590  013EF2                     l13353:
 10591                           
 10592                           ; BSR set to: 0
 10593  013EF2  0E04               	movlw	4
 10594  013EF4  0100               	movlb	0	; () banked
 10595  013EF6  65CA               	cpfsgt	Console_MakeField@x& (0+255),b
 10596  013EF8  D001               	goto	l1077
 10597  013EFA  D043               	goto	u9950
 10598  013EFC                     l1077:
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;Console.c: 444: {
 10602                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10603                           
 10604                           ; BSR set to: 0
 10605  013EFC  0E00               	movlw	0
 10606  013EFE  0100               	movlb	0	; () banked
 10607  013F00  6FCB               	movwf	Console_MakeField@y& (0+255),b
 10608  013F02                     l13359:
 10609                           
 10610                           ; BSR set to: 0
 10611  013F02  0E06               	movlw	6
 10612  013F04  0100               	movlb	0	; () banked
 10613  013F06  65CB               	cpfsgt	Console_MakeField@y& (0+255),b
 10614  013F08  D001               	goto	l1079
 10615  013F0A  D035               	goto	u9940
 10616  013F0C                     l1079:
 10617                           
 10618                           ; BSR set to: 0
 10619                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10620                           
 10621                           ; BSR set to: 0
 10622  013F0C  C0C6  F0BA         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10623  013F10  C0C7  F0BB         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10624  013F14  C0CB  F0BC         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10625  013F18  ECAC  F0B0         	call	_Byte_GetBit	;wreg free
 10626  013F1C  0900               	iorlw	0
 10627  013F1E  A4D8               	btfss	status,2,c
 10628  013F20  D005               	goto	l1082
 10629  013F22  C083  F0C8         	movff	_gBackcolour,_Console_MakeField$10974
 10630  013F26  C084  F0C9         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10631  013F2A  D004               	goto	l1084
 10632  013F2C                     l1082:
 10633  013F2C  C0FD  F0C8         	movff	_gForecolour,_Console_MakeField$10974
 10634  013F30  C0FE  F0C9         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10635  013F34                     l1084:
 10636  013F34  0100               	movlb	0	; () banked
 10637  013F36  51CB               	movf	Console_MakeField@y& (0+255),w,b
 10638  013F38  0D0A               	mullw	10
 10639  013F3A  0E64               	movlw	low Console_MakeField@Fill
 10640  013F3C  0100               	movlb	0	; () banked
 10641  013F3E  6FC1               	movwf	??_Console_MakeField& (0+255),b
 10642  013F40  0E04               	movlw	high Console_MakeField@Fill
 10643  013F42  0100               	movlb	0	; () banked
 10644  013F44  6FC2               	movwf	(??_Console_MakeField+1)& (0+255),b
 10645  013F46  50F3               	movf	prodl,w,c
 10646  013F48  0100               	movlb	0	; () banked
 10647  013F4A  27C1               	addwf	??_Console_MakeField& (0+255),f,b
 10648  013F4C  50F4               	movf	prodh,w,c
 10649  013F4E  0100               	movlb	0	; () banked
 10650  013F50  23C2               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10651  013F52  0100               	movlb	0	; () banked
 10652  013F54  51CA               	movf	Console_MakeField@x& (0+255),w,b
 10653  013F56  0D02               	mullw	2
 10654  013F58  50F3               	movf	prodl,w,c
 10655  013F5A  0100               	movlb	0	; () banked
 10656  013F5C  25C1               	addwf	??_Console_MakeField& (0+255),w,b
 10657  013F5E  6ED9               	movwf	fsr2l,c
 10658  013F60  50F4               	movf	prodh,w,c
 10659  013F62  0100               	movlb	0	; () banked
 10660  013F64  21C2               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10661  013F66  6EDA               	movwf	fsr2h,c
 10662  013F68  C0C8  FFDE         	movff	_Console_MakeField$10974,postinc2
 10663  013F6C  C0C9  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10664                           
 10665                           ; BSR set to: 0
 10666  013F70  0100               	movlb	0	; () banked
 10667  013F72  2BCB               	incf	Console_MakeField@y& (0+255),f,b
 10668  013F74  D7C6               	goto	l13359
 10669  013F76                     u9940:
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;Console.c: 447: Column += 1;
 10673                           
 10674                           ; BSR set to: 0
 10675  013F76  0100               	movlb	0	; () banked
 10676  013F78  4BC6               	infsnz	Console_MakeField@Column& (0+255),f,b
 10677  013F7A  2BC7               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10678  013F7C  0100               	movlb	0	; () banked
 10679  013F7E  2BCA               	incf	Console_MakeField@x& (0+255),f,b
 10680  013F80  D7B8               	goto	l13353
 10681  013F82                     u9950:
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;Console.c: 448: }
 10685                           ;Console.c: 449: return (ColourPtr)Fill;
 10686                           
 10687                           ; BSR set to: 0
 10688  013F82  0E64               	movlw	low Console_MakeField@Fill
 10689  013F84  0100               	movlb	0	; () banked
 10690  013F86  6FBF               	movwf	?_Console_MakeField& (0+255),b
 10691  013F88  0E04               	movlw	high Console_MakeField@Fill
 10692  013F8A  0100               	movlb	0	; () banked
 10693  013F8C  6FC0               	movwf	(?_Console_MakeField+1)& (0+255),b
 10694  013F8E  0012               	return	
 10695  013F90                     __end_of_Console_MakeField:
 10696                           	opt stack 0
 10697                           tblptru	equ	0xFF8
 10698                           tblptrh	equ	0xFF7
 10699                           tblptrl	equ	0xFF6
 10700                           tablat	equ	0xFF5
 10701                           prodh	equ	0xFF4
 10702                           prodl	equ	0xFF3
 10703                           intcon	equ	0xFF2
 10704                           postinc0	equ	0xFEE
 10705                           wreg	equ	0xFE8
 10706                           postdec1	equ	0xFE5
 10707                           fsr1h	equ	0xFE2
 10708                           fsr1l	equ	0xFE1
 10709                           indf2	equ	0xFDF
 10710                           postinc2	equ	0xFDE
 10711                           postdec2	equ	0xFDD
 10712                           fsr2h	equ	0xFDA
 10713                           fsr2l	equ	0xFD9
 10714                           status	equ	0xFD8
 10715                           
 10716 ;; *************** function _Byte_GetBit *****************
 10717 ;; Defined at:
 10718 ;;		line 38 in file "Library/Types.c"
 10719 ;; Parameters:    Size  Location     Type
 10720 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10721 ;;		 -> Font5x7(480), 
 10722 ;;  pBit            1    2[BANK0 ] unsigned char 
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;  Output          1    4[BANK0 ] unsigned char 
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  1    wreg      unsigned char 
 10727 ;; Registers used:
 10728 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10734 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10737 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10738 ;;Total ram usage:        5 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    7
 10741 ;; This function calls:
 10742 ;;		Nothing
 10743 ;; This function is called by:
 10744 ;;		_Console_MakeField
 10745 ;;		_Word_GetBit
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           	psect	text44
 10750  016158                     __ptext44:
 10751                           	opt stack 0
 10752  016158                     _Byte_GetBit:
 10753                           	opt stack 19
 10754                           
 10755                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;incstack = 0
 10759  016158  C0BA  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10760  01615C  C0BB  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10761  016160                     	if	0	;tblptru may be non-zero
 10762  016160                     	endif
 10763  016160                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10764  016160  0E00               	movlw	low (__mediumconst shr (0+16))
 10765  016162  6EF8               	movwf	tblptru,c
 10766  016164                     	endif
 10767  016164  0008               	tblrd		*
 10768  016166  CFF5 F0BE          	movff	tablat,Byte_GetBit@Output
 10769                           
 10770                           ;Types.c: 42: Output >>= pBit;
 10771  01616A  0100               	movlb	0	; () banked
 10772  01616C  29BC               	incf	Byte_GetBit@pBit& (0+255),w,b
 10773  01616E  0100               	movlb	0	; () banked
 10774  016170  6FBD               	movwf	??_Byte_GetBit& (0+255),b
 10775  016172  D003               	goto	u9530
 10776  016174                     u9535:
 10777  016174  0100               	movlb	0	; () banked
 10778  016176  90D8               	bcf	status,0,c
 10779  016178  33BE               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10780  01617A                     u9530:
 10781  01617A  0100               	movlb	0	; () banked
 10782  01617C  2FBD               	decfsz	??_Byte_GetBit& (0+255),f,b
 10783  01617E  D7FA               	goto	u9535
 10784                           
 10785                           ;Types.c: 43: Output &= 1;
 10786  016180  0E01               	movlw	1
 10787  016182  0100               	movlb	0	; () banked
 10788  016184  17BE               	andwf	Byte_GetBit@Output& (0+255),f,b
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;Types.c: 44: return Output;
 10792  016186  0100               	movlb	0	; () banked
 10793  016188  51BE               	movf	Byte_GetBit@Output& (0+255),w,b
 10794  01618A  0012               	return	
 10795  01618C                     __end_of_Byte_GetBit:
 10796                           	opt stack 0
 10797                           tblptru	equ	0xFF8
 10798                           tblptrh	equ	0xFF7
 10799                           tblptrl	equ	0xFF6
 10800                           tablat	equ	0xFF5
 10801                           prodh	equ	0xFF4
 10802                           prodl	equ	0xFF3
 10803                           intcon	equ	0xFF2
 10804                           postinc0	equ	0xFEE
 10805                           wreg	equ	0xFE8
 10806                           postdec1	equ	0xFE5
 10807                           fsr1h	equ	0xFE2
 10808                           fsr1l	equ	0xFE1
 10809                           indf2	equ	0xFDF
 10810                           postinc2	equ	0xFDE
 10811                           postdec2	equ	0xFDD
 10812                           fsr2h	equ	0xFDA
 10813                           fsr2l	equ	0xFD9
 10814                           status	equ	0xFD8
 10815                           
 10816 ;; *************** function _ADC_Voltage *****************
 10817 ;; Defined at:
 10818 ;;		line 259 in file "Library/ADC.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 10821 ;;		 -> ADC_AN0(5), 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  output          4   53[BANK0 ] float 
 10824 ;;  ref             4   49[BANK0 ] const float 
 10825 ;;  max             4   45[BANK0 ] const float 
 10826 ;; Return value:  Size  Location     Type
 10827 ;;                  4   39[BANK0 ] float 
 10828 ;; Registers used:
 10829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10830 ;; Tracked objects:
 10831 ;;		On entry : 0/0
 10832 ;;		On exit  : 0/0
 10833 ;;		Unchanged: 0/0
 10834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10835 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10836 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10839 ;;Total ram usage:       18 bytes
 10840 ;; Hardware stack levels used:    1
 10841 ;; Hardware stack levels required when called:    8
 10842 ;; This function calls:
 10843 ;;		___fldiv
 10844 ;;		___flmul
 10845 ;;		___xxtofl
 10846 ;; This function is called by:
 10847 ;;		_findClosestWall
 10848 ;;		_mode1
 10849 ;; This function uses a non-reentrant model
 10850 ;;
 10851                           
 10852                           	psect	text45
 10853  013B66                     __ptext45:
 10854                           	opt stack 0
 10855  013B66                     _ADC_Voltage:
 10856                           	opt stack 20
 10857                           
 10858                           ;ADC.c: 261: const float max = 1024;
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;incstack = 0
 10862  013B66  0E00               	movlw	0
 10863  013B68  0100               	movlb	0	; () banked
 10864  013B6A  6FE7               	movwf	ADC_Voltage@max& (0+255),b
 10865  013B6C  0E00               	movlw	0
 10866  013B6E  6FE8               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10867  013B70  0E80               	movlw	128
 10868  013B72  6FE9               	movwf	(ADC_Voltage@max+2)& (0+255),b
 10869  013B74  0E44               	movlw	68
 10870  013B76  6FEA               	movwf	(ADC_Voltage@max+3)& (0+255),b
 10871                           
 10872                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 10873  013B78  0E33               	movlw	51
 10874  013B7A  0100               	movlb	0	; () banked
 10875  013B7C  6FEB               	movwf	ADC_Voltage@ref& (0+255),b
 10876  013B7E  0E33               	movlw	51
 10877  013B80  6FEC               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 10878  013B82  0E53               	movlw	83
 10879  013B84  6FED               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 10880  013B86  0E40               	movlw	64
 10881  013B88  6FEE               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;ADC.c: 263: float output = pInput->mValue;
 10885  013B8A  0100               	movlb	0	; () banked
 10886  013B8C  EE20 F001          	lfsr	2,1
 10887  013B90  51E1               	movf	ADC_Voltage@pInput& (0+255),w,b
 10888  013B92  26D9               	addwf	fsr2l,f,c
 10889  013B94  51E2               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 10890  013B96  22DA               	addwfc	fsr2h,f,c
 10891  013B98  CFDE F0E5          	movff	postinc2,??_ADC_Voltage
 10892  013B9C  CFDD F0E6          	movff	postdec2,??_ADC_Voltage+1
 10893  013BA0  C0E5  F0BA         	movff	??_ADC_Voltage,___xxtofl@val
 10894  013BA4  C0E6  F0BB         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 10895  013BA8  0100               	movlb	0	; () banked
 10896  013BAA  6BBC               	clrf	(___xxtofl@val+2)& (0+255),b
 10897  013BAC  6BBD               	clrf	(___xxtofl@val+3)& (0+255),b
 10898  013BAE  0E00               	movlw	0
 10899  013BB0  EC93  F091         	call	___xxtofl
 10900  013BB4  C0BA  F0EF         	movff	?___xxtofl,ADC_Voltage@output
 10901  013BB8  C0BB  F0F0         	movff	?___xxtofl+1,ADC_Voltage@output+1
 10902  013BBC  C0BC  F0F1         	movff	?___xxtofl+2,ADC_Voltage@output+2
 10903  013BC0  C0BD  F0F2         	movff	?___xxtofl+3,ADC_Voltage@output+3
 10904                           
 10905                           ;ADC.c: 265: output /= max;
 10906  013BC4  C0EF  F0BA         	movff	ADC_Voltage@output,___fldiv@b
 10907  013BC8  C0F0  F0BB         	movff	ADC_Voltage@output+1,___fldiv@b+1
 10908  013BCC  C0F1  F0BC         	movff	ADC_Voltage@output+2,___fldiv@b+2
 10909  013BD0  C0F2  F0BD         	movff	ADC_Voltage@output+3,___fldiv@b+3
 10910  013BD4  C0E7  F0BE         	movff	ADC_Voltage@max,___fldiv@a
 10911  013BD8  C0E8  F0BF         	movff	ADC_Voltage@max+1,___fldiv@a+1
 10912  013BDC  C0E9  F0C0         	movff	ADC_Voltage@max+2,___fldiv@a+2
 10913  013BE0  C0EA  F0C1         	movff	ADC_Voltage@max+3,___fldiv@a+3
 10914  013BE4  EC4F  F088         	call	___fldiv	;wreg free
 10915  013BE8  C0BA  F0EF         	movff	?___fldiv,ADC_Voltage@output
 10916  013BEC  C0BB  F0F0         	movff	?___fldiv+1,ADC_Voltage@output+1
 10917  013BF0  C0BC  F0F1         	movff	?___fldiv+2,ADC_Voltage@output+2
 10918  013BF4  C0BD  F0F2         	movff	?___fldiv+3,ADC_Voltage@output+3
 10919                           
 10920                           ;ADC.c: 266: output *= ref;
 10921  013BF8  C0EF  F0C8         	movff	ADC_Voltage@output,___flmul@b
 10922  013BFC  C0F0  F0C9         	movff	ADC_Voltage@output+1,___flmul@b+1
 10923  013C00  C0F1  F0CA         	movff	ADC_Voltage@output+2,___flmul@b+2
 10924  013C04  C0F2  F0CB         	movff	ADC_Voltage@output+3,___flmul@b+3
 10925  013C08  C0EB  F0CC         	movff	ADC_Voltage@ref,___flmul@a
 10926  013C0C  C0EC  F0CD         	movff	ADC_Voltage@ref+1,___flmul@a+1
 10927  013C10  C0ED  F0CE         	movff	ADC_Voltage@ref+2,___flmul@a+2
 10928  013C14  C0EE  F0CF         	movff	ADC_Voltage@ref+3,___flmul@a+3
 10929  013C18  EC00  F080         	call	___flmul	;wreg free
 10930  013C1C  C0C8  F0EF         	movff	?___flmul,ADC_Voltage@output
 10931  013C20  C0C9  F0F0         	movff	?___flmul+1,ADC_Voltage@output+1
 10932  013C24  C0CA  F0F1         	movff	?___flmul+2,ADC_Voltage@output+2
 10933  013C28  C0CB  F0F2         	movff	?___flmul+3,ADC_Voltage@output+3
 10934                           
 10935                           ;ADC.c: 268: return output + (float)0.000;
 10936  013C2C  C0EF  F0E1         	movff	ADC_Voltage@output,?_ADC_Voltage
 10937  013C30  C0F0  F0E2         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 10938  013C34  C0F1  F0E3         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 10939  013C38  C0F2  F0E4         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 10940  013C3C  0012               	return	
 10941  013C3E                     __end_of_ADC_Voltage:
 10942                           	opt stack 0
 10943                           tblptru	equ	0xFF8
 10944                           tblptrh	equ	0xFF7
 10945                           tblptrl	equ	0xFF6
 10946                           tablat	equ	0xFF5
 10947                           prodh	equ	0xFF4
 10948                           prodl	equ	0xFF3
 10949                           intcon	equ	0xFF2
 10950                           postinc0	equ	0xFEE
 10951                           wreg	equ	0xFE8
 10952                           postdec1	equ	0xFE5
 10953                           fsr1h	equ	0xFE2
 10954                           fsr1l	equ	0xFE1
 10955                           indf2	equ	0xFDF
 10956                           postinc2	equ	0xFDE
 10957                           postdec2	equ	0xFDD
 10958                           fsr2h	equ	0xFDA
 10959                           fsr2l	equ	0xFD9
 10960                           status	equ	0xFD8
 10961                           
 10962 ;; *************** function ___xxtofl *****************
 10963 ;; Defined at:
 10964 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;  sign            1    wreg     unsigned char 
 10967 ;;  val             4    0[BANK0 ] long 
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;  sign            1    8[BANK0 ] unsigned char 
 10970 ;;  arg             4   10[BANK0 ] unsigned long 
 10971 ;;  exp             1    9[BANK0 ] unsigned char 
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  4    0[BANK0 ] unsigned char 
 10974 ;; Registers used:
 10975 ;;		wreg, status,2, status,0
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10981 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;Total ram usage:       14 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    7
 10988 ;; This function calls:
 10989 ;;		Nothing
 10990 ;; This function is called by:
 10991 ;;		_ADC_Voltage
 10992 ;;		_findClosestWall
 10993 ;; This function uses a non-reentrant model
 10994 ;;
 10995                           
 10996                           	psect	text46
 10997  012326                     __ptext46:
 10998                           	opt stack 0
 10999  012326                     ___xxtofl:
 11000                           	opt stack 21
 11001                           
 11002                           ;incstack = 0
 11003                           ;___xxtofl@sign stored from wreg
 11004  012326  0100               	movlb	0	; () banked
 11005  012328  6FC2               	movwf	___xxtofl@sign& (0+255),b
 11006  01232A  0100               	movlb	0	; () banked
 11007  01232C  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11008  01232E  0100               	movlb	0	; () banked
 11009  012330  B4D8               	btfsc	status,2,c
 11010  012332  D01E               	goto	l3003
 11011                           
 11012                           ; BSR set to: 0
 11013  012334  0100               	movlb	0	; () banked
 11014  012336  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11015  012338  D01B               	goto	l3003
 11016                           
 11017                           ; BSR set to: 0
 11018  01233A  C0BA  F0BE         	movff	___xxtofl@val,??___xxtofl
 11019  01233E  C0BB  F0BF         	movff	___xxtofl@val+1,??___xxtofl+1
 11020  012342  C0BC  F0C0         	movff	___xxtofl@val+2,??___xxtofl+2
 11021  012346  C0BD  F0C1         	movff	___xxtofl@val+3,??___xxtofl+3
 11022  01234A  0100               	movlb	0	; () banked
 11023  01234C  1FBE               	comf	??___xxtofl& (0+255),f,b
 11024  01234E  1FBF               	comf	(??___xxtofl+1)& (0+255),f,b
 11025  012350  1FC0               	comf	(??___xxtofl+2)& (0+255),f,b
 11026  012352  1FC1               	comf	(??___xxtofl+3)& (0+255),f,b
 11027  012354  2BBE               	incf	??___xxtofl& (0+255),f,b
 11028  012356  0E00               	movlw	0
 11029  012358  23BF               	addwfc	(??___xxtofl+1)& (0+255),f,b
 11030  01235A  23C0               	addwfc	(??___xxtofl+2)& (0+255),f,b
 11031  01235C  23C1               	addwfc	(??___xxtofl+3)& (0+255),f,b
 11032  01235E  C0BE  F0C4         	movff	??___xxtofl,___xxtofl@arg
 11033  012362  C0BF  F0C5         	movff	??___xxtofl+1,___xxtofl@arg+1
 11034  012366  C0C0  F0C6         	movff	??___xxtofl+2,___xxtofl@arg+2
 11035  01236A  C0C1  F0C7         	movff	??___xxtofl+3,___xxtofl@arg+3
 11036  01236E  D008               	goto	l3004
 11037  012370                     l3003:
 11038                           
 11039                           ; BSR set to: 0
 11040  012370  C0BA  F0C4         	movff	___xxtofl@val,___xxtofl@arg
 11041  012374  C0BB  F0C5         	movff	___xxtofl@val+1,___xxtofl@arg+1
 11042  012378  C0BC  F0C6         	movff	___xxtofl@val+2,___xxtofl@arg+2
 11043  01237C  C0BD  F0C7         	movff	___xxtofl@val+3,___xxtofl@arg+3
 11044  012380                     l3004:
 11045                           
 11046                           ; BSR set to: 0
 11047                           
 11048                           ; BSR set to: 0
 11049  012380  0100               	movlb	0	; () banked
 11050  012382  51BA               	movf	___xxtofl@val& (0+255),w,b
 11051  012384  0100               	movlb	0	; () banked
 11052  012386  11BB               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 11053  012388  0100               	movlb	0	; () banked
 11054  01238A  11BC               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 11055  01238C  0100               	movlb	0	; () banked
 11056  01238E  11BD               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 11057  012390  A4D8               	btfss	status,2,c
 11058  012392  D00A               	goto	l3005
 11059                           
 11060                           ; BSR set to: 0
 11061  012394  0E00               	movlw	0
 11062  012396  0100               	movlb	0	; () banked
 11063  012398  6FBA               	movwf	?___xxtofl& (0+255),b
 11064  01239A  0E00               	movlw	0
 11065  01239C  6FBB               	movwf	(?___xxtofl+1)& (0+255),b
 11066  01239E  0E00               	movlw	0
 11067  0123A0  6FBC               	movwf	(?___xxtofl+2)& (0+255),b
 11068  0123A2  0E00               	movlw	0
 11069  0123A4  6FBD               	movwf	(?___xxtofl+3)& (0+255),b
 11070                           
 11071                           ; BSR set to: 0
 11072  0123A6  0012               	return	
 11073  0123A8                     l3005:
 11074                           
 11075                           ; BSR set to: 0
 11076                           
 11077                           ; BSR set to: 0
 11078  0123A8  0E96               	movlw	150
 11079  0123AA  0100               	movlb	0	; () banked
 11080  0123AC  6FC3               	movwf	___xxtofl@exp& (0+255),b
 11081  0123AE  D008               	goto	l3007
 11082  0123B0                     
 11083                           ; BSR set to: 0
 11084                           
 11085                           ; BSR set to: 0
 11086  0123B0  0100               	movlb	0	; () banked
 11087  0123B2  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11088  0123B4  0100               	movlb	0	; () banked
 11089  0123B6  90D8               	bcf	status,0,c
 11090  0123B8  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11091  0123BA  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11092  0123BC  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11093  0123BE  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11094  0123C0                     l3007:
 11095                           
 11096                           ; BSR set to: 0
 11097                           
 11098                           ; BSR set to: 0
 11099  0123C0  0E00               	movlw	0
 11100  0123C2  0100               	movlb	0	; () banked
 11101  0123C4  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11102  0123C6  0100               	movlb	0	; () banked
 11103  0123C8  6FBE               	movwf	??___xxtofl& (0+255),b
 11104  0123CA  0E00               	movlw	0
 11105  0123CC  0100               	movlb	0	; () banked
 11106  0123CE  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11107  0123D0  0100               	movlb	0	; () banked
 11108  0123D2  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11109  0123D4  0E00               	movlw	0
 11110  0123D6  0100               	movlb	0	; () banked
 11111  0123D8  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11112  0123DA  0100               	movlb	0	; () banked
 11113  0123DC  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11114  0123DE  0EFE               	movlw	254
 11115  0123E0  0100               	movlb	0	; () banked
 11116  0123E2  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11117  0123E4  0100               	movlb	0	; () banked
 11118  0123E6  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11119  0123E8  0100               	movlb	0	; () banked
 11120  0123EA  51BE               	movf	??___xxtofl& (0+255),w,b
 11121  0123EC  0100               	movlb	0	; () banked
 11122  0123EE  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11123  0123F0  0100               	movlb	0	; () banked
 11124  0123F2  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11125  0123F4  0100               	movlb	0	; () banked
 11126  0123F6  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11127  0123F8  B4D8               	btfsc	status,2,c
 11128  0123FA  D010               	goto	l3010
 11129  0123FC  D7D9               	goto	l3008
 11130  0123FE                     
 11131                           ; BSR set to: 0
 11132                           
 11133                           ; BSR set to: 0
 11134  0123FE  0100               	movlb	0	; () banked
 11135  012400  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11136                           
 11137                           ; BSR set to: 0
 11138  012402  0E01               	movlw	1
 11139  012404  0100               	movlb	0	; () banked
 11140  012406  27C4               	addwf	___xxtofl@arg& (0+255),f,b
 11141  012408  0E00               	movlw	0
 11142  01240A  23C5               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 11143  01240C  23C6               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 11144  01240E  23C7               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 11145                           
 11146                           ; BSR set to: 0
 11147  012410  0100               	movlb	0	; () banked
 11148  012412  90D8               	bcf	status,0,c
 11149  012414  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11150  012416  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11151  012418  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11152  01241A  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11153  01241C                     l3010:
 11154                           
 11155                           ; BSR set to: 0
 11156  01241C  0E00               	movlw	0
 11157  01241E  0100               	movlb	0	; () banked
 11158  012420  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11159  012422  0100               	movlb	0	; () banked
 11160  012424  6FBE               	movwf	??___xxtofl& (0+255),b
 11161  012426  0E00               	movlw	0
 11162  012428  0100               	movlb	0	; () banked
 11163  01242A  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11164  01242C  0100               	movlb	0	; () banked
 11165  01242E  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11166  012430  0E00               	movlw	0
 11167  012432  0100               	movlb	0	; () banked
 11168  012434  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11169  012436  0100               	movlb	0	; () banked
 11170  012438  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11171  01243A  0EFF               	movlw	255
 11172  01243C  0100               	movlb	0	; () banked
 11173  01243E  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11174  012440  0100               	movlb	0	; () banked
 11175  012442  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11176  012444  0100               	movlb	0	; () banked
 11177  012446  51BE               	movf	??___xxtofl& (0+255),w,b
 11178  012448  0100               	movlb	0	; () banked
 11179  01244A  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11180  01244C  0100               	movlb	0	; () banked
 11181  01244E  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11182  012450  0100               	movlb	0	; () banked
 11183  012452  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11184  012454  B4D8               	btfsc	status,2,c
 11185  012456  D009               	goto	l3013
 11186  012458  D7D2               	goto	l3011
 11187  01245A                     
 11188                           ; BSR set to: 0
 11189                           
 11190                           ; BSR set to: 0
 11191  01245A  0100               	movlb	0	; () banked
 11192  01245C  07C3               	decf	___xxtofl@exp& (0+255),f,b
 11193  01245E  0100               	movlb	0	; () banked
 11194  012460  90D8               	bcf	status,0,c
 11195  012462  37C4               	rlcf	___xxtofl@arg& (0+255),f,b
 11196  012464  37C5               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 11197  012466  37C6               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 11198  012468  37C7               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 11199  01246A                     l3013:
 11200                           
 11201                           ; BSR set to: 0
 11202                           
 11203                           ; BSR set to: 0
 11204  01246A  0100               	movlb	0	; () banked
 11205  01246C  BFC6               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 11206  01246E  D004               	goto	u10620
 11207                           
 11208                           ; BSR set to: 0
 11209  012470  0E02               	movlw	2
 11210  012472  0100               	movlb	0	; () banked
 11211  012474  61C3               	cpfslt	___xxtofl@exp& (0+255),b
 11212  012476  D7F1               	goto	l3014
 11213  012478                     u10620:
 11214                           
 11215                           ; BSR set to: 0
 11216                           
 11217                           ; BSR set to: 0
 11218  012478  0100               	movlb	0	; () banked
 11219  01247A  B1C3               	btfsc	___xxtofl@exp& (0+255),0,b
 11220  01247C  D009               	goto	l3018
 11221                           
 11222                           ; BSR set to: 0
 11223  01247E  0EFF               	movlw	255
 11224  012480  0100               	movlb	0	; () banked
 11225  012482  17C4               	andwf	___xxtofl@arg& (0+255),f,b
 11226  012484  0EFF               	movlw	255
 11227  012486  17C5               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 11228  012488  0E7F               	movlw	127
 11229  01248A  17C6               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 11230  01248C  0EFF               	movlw	255
 11231  01248E  17C7               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 11232  012490                     l3018:
 11233                           
 11234                           ; BSR set to: 0
 11235  012490  0100               	movlb	0	; () banked
 11236  012492  90D8               	bcf	status,0,c
 11237  012494  33C3               	rrcf	___xxtofl@exp& (0+255),f,b
 11238  012496  C0C3  F0BE         	movff	___xxtofl@exp,??___xxtofl
 11239  01249A  0100               	movlb	0	; () banked
 11240  01249C  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11241  01249E  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11242  0124A0  6BC1               	clrf	(??___xxtofl+3)& (0+255),b
 11243  0124A2  C0BE  F0C1         	movff	??___xxtofl,??___xxtofl+3
 11244  0124A6  0100               	movlb	0	; () banked
 11245  0124A8  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11246  0124AA  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11247  0124AC  6BBE               	clrf	??___xxtofl& (0+255),b
 11248  0124AE  0100               	movlb	0	; () banked
 11249  0124B0  51BE               	movf	??___xxtofl& (0+255),w,b
 11250  0124B2  0100               	movlb	0	; () banked
 11251  0124B4  13C4               	iorwf	___xxtofl@arg& (0+255),f,b
 11252  0124B6  0100               	movlb	0	; () banked
 11253  0124B8  51BF               	movf	(??___xxtofl+1)& (0+255),w,b
 11254  0124BA  0100               	movlb	0	; () banked
 11255  0124BC  13C5               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 11256  0124BE  0100               	movlb	0	; () banked
 11257  0124C0  51C0               	movf	(??___xxtofl+2)& (0+255),w,b
 11258  0124C2  0100               	movlb	0	; () banked
 11259  0124C4  13C6               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 11260  0124C6  0100               	movlb	0	; () banked
 11261  0124C8  51C1               	movf	(??___xxtofl+3)& (0+255),w,b
 11262  0124CA  0100               	movlb	0	; () banked
 11263  0124CC  13C7               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 11264                           
 11265                           ; BSR set to: 0
 11266  0124CE  0100               	movlb	0	; () banked
 11267  0124D0  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11268  0124D2  0100               	movlb	0	; () banked
 11269  0124D4  B4D8               	btfsc	status,2,c
 11270  0124D6  D005               	goto	l3019
 11271                           
 11272                           ; BSR set to: 0
 11273  0124D8  0100               	movlb	0	; () banked
 11274  0124DA  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11275  0124DC  D002               	goto	l3019
 11276                           
 11277                           ; BSR set to: 0
 11278  0124DE  0100               	movlb	0	; () banked
 11279  0124E0  8FC7               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 11280  0124E2                     l3019:
 11281                           
 11282                           ; BSR set to: 0
 11283                           
 11284                           ; BSR set to: 0
 11285  0124E2  C0C4  F0BA         	movff	___xxtofl@arg,?___xxtofl
 11286  0124E6  C0C5  F0BB         	movff	___xxtofl@arg+1,?___xxtofl+1
 11287  0124EA  C0C6  F0BC         	movff	___xxtofl@arg+2,?___xxtofl+2
 11288  0124EE  C0C7  F0BD         	movff	___xxtofl@arg+3,?___xxtofl+3
 11289  0124F2  0012               	return	
 11290  0124F4                     __end_of___xxtofl:
 11291                           	opt stack 0
 11292                           tblptru	equ	0xFF8
 11293                           tblptrh	equ	0xFF7
 11294                           tblptrl	equ	0xFF6
 11295                           tablat	equ	0xFF5
 11296                           prodh	equ	0xFF4
 11297                           prodl	equ	0xFF3
 11298                           intcon	equ	0xFF2
 11299                           postinc0	equ	0xFEE
 11300                           wreg	equ	0xFE8
 11301                           postdec1	equ	0xFE5
 11302                           fsr1h	equ	0xFE2
 11303                           fsr1l	equ	0xFE1
 11304                           indf2	equ	0xFDF
 11305                           postinc2	equ	0xFDE
 11306                           postdec2	equ	0xFDD
 11307                           fsr2h	equ	0xFDA
 11308                           fsr2l	equ	0xFD9
 11309                           status	equ	0xFD8
 11310                           
 11311 ;; *************** function ___flmul *****************
 11312 ;; Defined at:
 11313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;  b               4   14[BANK0 ] unsigned char 
 11316 ;;  a               4   18[BANK0 ] unsigned char 
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;  prod            4   33[BANK0 ] struct .
 11319 ;;  grs             4   28[BANK0 ] unsigned long 
 11320 ;;  temp            2   37[BANK0 ] struct .
 11321 ;;  bexp            1   32[BANK0 ] unsigned char 
 11322 ;;  aexp            1   27[BANK0 ] unsigned char 
 11323 ;;  sign            1   26[BANK0 ] unsigned char 
 11324 ;; Return value:  Size  Location     Type
 11325 ;;                  4   14[BANK0 ] unsigned char 
 11326 ;; Registers used:
 11327 ;;		wreg, status,2, status,0, prodl, prodh
 11328 ;; Tracked objects:
 11329 ;;		On entry : 0/0
 11330 ;;		On exit  : 0/0
 11331 ;;		Unchanged: 0/0
 11332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11333 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11334 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11335 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11336 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;Total ram usage:       25 bytes
 11338 ;; Hardware stack levels used:    1
 11339 ;; Hardware stack levels required when called:    7
 11340 ;; This function calls:
 11341 ;;		Nothing
 11342 ;; This function is called by:
 11343 ;;		_ADC_Voltage
 11344 ;;		_findClosestWall
 11345 ;; This function uses a non-reentrant model
 11346 ;;
 11347                           
 11348                           	psect	text47
 11349  010000                     __ptext47:
 11350                           	opt stack 0
 11351  010000                     ___flmul:
 11352                           	opt stack 21
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;incstack = 0
 11356  010000  0100               	movlb	0	; () banked
 11357  010002  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11358  010004  0B80               	andlw	128
 11359  010006  0100               	movlb	0	; () banked
 11360  010008  6FD4               	movwf	___flmul@sign& (0+255),b
 11361  01000A  0100               	movlb	0	; () banked
 11362  01000C  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11363  01000E  25CB               	addwf	(___flmul@b+3)& (0+255),w,b
 11364  010010  0100               	movlb	0	; () banked
 11365  010012  6FDA               	movwf	___flmul@bexp& (0+255),b
 11366                           
 11367                           ; BSR set to: 0
 11368  010014  0100               	movlb	0	; () banked
 11369  010016  AFCA               	btfss	(___flmul@b+2)& (0+255),7,b
 11370  010018  D002               	goto	l2974
 11371                           
 11372                           ; BSR set to: 0
 11373  01001A  0100               	movlb	0	; () banked
 11374  01001C  81DA               	bsf	___flmul@bexp& (0+255),0,b
 11375  01001E                     l2974:
 11376                           
 11377                           ; BSR set to: 0
 11378                           
 11379                           ; BSR set to: 0
 11380  01001E  0100               	movlb	0	; () banked
 11381  010020  51DA               	movf	___flmul@bexp& (0+255),w,b
 11382  010022  0100               	movlb	0	; () banked
 11383  010024  B4D8               	btfsc	status,2,c
 11384  010026  D010               	goto	l2975
 11385                           
 11386                           ; BSR set to: 0
 11387  010028  0100               	movlb	0	; () banked
 11388  01002A  29DA               	incf	___flmul@bexp& (0+255),w,b
 11389  01002C  A4D8               	btfss	status,2,c
 11390  01002E  D009               	goto	l2976
 11391                           
 11392                           ; BSR set to: 0
 11393  010030  0E00               	movlw	0
 11394  010032  0100               	movlb	0	; () banked
 11395  010034  6FC8               	movwf	___flmul@b& (0+255),b
 11396  010036  0E00               	movlw	0
 11397  010038  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11398  01003A  0E00               	movlw	0
 11399  01003C  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11400  01003E  0E00               	movlw	0
 11401  010040  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11402  010042                     l2976:
 11403                           
 11404                           ; BSR set to: 0
 11405                           
 11406                           ; BSR set to: 0
 11407  010042  0100               	movlb	0	; () banked
 11408  010044  8FCA               	bsf	(___flmul@b+2)& (0+255),7,b
 11409  010046  D009               	goto	l2977
 11410  010048                     l2975:
 11411                           
 11412                           ; BSR set to: 0
 11413                           
 11414                           ; BSR set to: 0
 11415  010048  0E00               	movlw	0
 11416  01004A  0100               	movlb	0	; () banked
 11417  01004C  6FC8               	movwf	___flmul@b& (0+255),b
 11418  01004E  0E00               	movlw	0
 11419  010050  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11420  010052  0E00               	movlw	0
 11421  010054  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11422  010056  0E00               	movlw	0
 11423  010058  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11424  01005A                     l2977:
 11425                           
 11426                           ; BSR set to: 0
 11427                           
 11428                           ; BSR set to: 0
 11429  01005A  0100               	movlb	0	; () banked
 11430  01005C  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11431  01005E  0B80               	andlw	128
 11432  010060  0100               	movlb	0	; () banked
 11433  010062  1BD4               	xorwf	___flmul@sign& (0+255),f,b
 11434                           
 11435                           ; BSR set to: 0
 11436  010064  0100               	movlb	0	; () banked
 11437  010066  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11438  010068  25CF               	addwf	(___flmul@a+3)& (0+255),w,b
 11439  01006A  0100               	movlb	0	; () banked
 11440  01006C  6FD5               	movwf	___flmul@aexp& (0+255),b
 11441                           
 11442                           ; BSR set to: 0
 11443  01006E  0100               	movlb	0	; () banked
 11444  010070  AFCE               	btfss	(___flmul@a+2)& (0+255),7,b
 11445  010072  D002               	goto	l2978
 11446                           
 11447                           ; BSR set to: 0
 11448  010074  0100               	movlb	0	; () banked
 11449  010076  81D5               	bsf	___flmul@aexp& (0+255),0,b
 11450  010078                     l2978:
 11451                           
 11452                           ; BSR set to: 0
 11453                           
 11454                           ; BSR set to: 0
 11455  010078  0100               	movlb	0	; () banked
 11456  01007A  51D5               	movf	___flmul@aexp& (0+255),w,b
 11457  01007C  0100               	movlb	0	; () banked
 11458  01007E  B4D8               	btfsc	status,2,c
 11459  010080  D010               	goto	l2979
 11460                           
 11461                           ; BSR set to: 0
 11462  010082  0100               	movlb	0	; () banked
 11463  010084  29D5               	incf	___flmul@aexp& (0+255),w,b
 11464  010086  A4D8               	btfss	status,2,c
 11465  010088  D009               	goto	l2980
 11466                           
 11467                           ; BSR set to: 0
 11468  01008A  0E00               	movlw	0
 11469  01008C  0100               	movlb	0	; () banked
 11470  01008E  6FCC               	movwf	___flmul@a& (0+255),b
 11471  010090  0E00               	movlw	0
 11472  010092  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11473  010094  0E00               	movlw	0
 11474  010096  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11475  010098  0E00               	movlw	0
 11476  01009A  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11477  01009C                     l2980:
 11478                           
 11479                           ; BSR set to: 0
 11480                           
 11481                           ; BSR set to: 0
 11482  01009C  0100               	movlb	0	; () banked
 11483  01009E  8FCE               	bsf	(___flmul@a+2)& (0+255),7,b
 11484  0100A0  D009               	goto	l2981
 11485  0100A2                     l2979:
 11486                           
 11487                           ; BSR set to: 0
 11488                           
 11489                           ; BSR set to: 0
 11490  0100A2  0E00               	movlw	0
 11491  0100A4  0100               	movlb	0	; () banked
 11492  0100A6  6FCC               	movwf	___flmul@a& (0+255),b
 11493  0100A8  0E00               	movlw	0
 11494  0100AA  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11495  0100AC  0E00               	movlw	0
 11496  0100AE  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11497  0100B0  0E00               	movlw	0
 11498  0100B2  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11499  0100B4                     l2981:
 11500                           
 11501                           ; BSR set to: 0
 11502  0100B4  0100               	movlb	0	; () banked
 11503  0100B6  51D5               	movf	___flmul@aexp& (0+255),w,b
 11504  0100B8  0100               	movlb	0	; () banked
 11505  0100BA  B4D8               	btfsc	status,2,c
 11506  0100BC  D005               	goto	u10440
 11507                           
 11508                           ; BSR set to: 0
 11509  0100BE  0100               	movlb	0	; () banked
 11510  0100C0  51DA               	movf	___flmul@bexp& (0+255),w,b
 11511  0100C2  0100               	movlb	0	; () banked
 11512  0100C4  A4D8               	btfss	status,2,c
 11513  0100C6  D00A               	goto	l2982
 11514  0100C8                     u10440:
 11515                           
 11516                           ; BSR set to: 0
 11517                           
 11518                           ; BSR set to: 0
 11519  0100C8  0E00               	movlw	0
 11520  0100CA  0100               	movlb	0	; () banked
 11521  0100CC  6FC8               	movwf	?___flmul& (0+255),b
 11522  0100CE  0E00               	movlw	0
 11523  0100D0  6FC9               	movwf	(?___flmul+1)& (0+255),b
 11524  0100D2  0E00               	movlw	0
 11525  0100D4  6FCA               	movwf	(?___flmul+2)& (0+255),b
 11526  0100D6  0E00               	movlw	0
 11527  0100D8  6FCB               	movwf	(?___flmul+3)& (0+255),b
 11528                           
 11529                           ; BSR set to: 0
 11530  0100DA  0012               	return	
 11531  0100DC                     l2982:
 11532                           
 11533                           ; BSR set to: 0
 11534                           
 11535                           ; BSR set to: 0
 11536  0100DC  0100               	movlb	0	; () banked
 11537  0100DE  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11538  0100E0  0100               	movlb	0	; () banked
 11539  0100E2  03C8               	mulwf	___flmul@b& (0+255),b
 11540  0100E4  CFF3 F0DF          	movff	prodl,___flmul@temp
 11541  0100E8  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11542                           
 11543                           ; BSR set to: 0
 11544  0100EC  0100               	movlb	0	; () banked
 11545  0100EE  51DF               	movf	___flmul@temp& (0+255),w,b
 11546  0100F0  0100               	movlb	0	; () banked
 11547  0100F2  6FD6               	movwf	___flmul@grs& (0+255),b
 11548  0100F4  6BD7               	clrf	(___flmul@grs+1)& (0+255),b
 11549  0100F6  6BD8               	clrf	(___flmul@grs+2)& (0+255),b
 11550  0100F8  6BD9               	clrf	(___flmul@grs+3)& (0+255),b
 11551                           
 11552                           ; BSR set to: 0
 11553  0100FA  0100               	movlb	0	; () banked
 11554  0100FC  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11555  0100FE  0100               	movlb	0	; () banked
 11556  010100  6FDB               	movwf	___flmul@prod& (0+255),b
 11557  010102  6BDC               	clrf	(___flmul@prod+1)& (0+255),b
 11558  010104  6BDD               	clrf	(___flmul@prod+2)& (0+255),b
 11559  010106  6BDE               	clrf	(___flmul@prod+3)& (0+255),b
 11560  010108  0100               	movlb	0	; () banked
 11561  01010A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11562  01010C  0100               	movlb	0	; () banked
 11563  01010E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11564  010110  CFF3 F0DF          	movff	prodl,___flmul@temp
 11565  010114  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11566                           
 11567                           ; BSR set to: 0
 11568  010118  0100               	movlb	0	; () banked
 11569  01011A  51DF               	movf	___flmul@temp& (0+255),w,b
 11570  01011C  0100               	movlb	0	; () banked
 11571  01011E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11572  010120  0E00               	movlw	0
 11573  010122  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11574  010124  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11575  010126  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11576                           
 11577                           ; BSR set to: 0
 11578  010128  0100               	movlb	0	; () banked
 11579  01012A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11580  01012C  0100               	movlb	0	; () banked
 11581  01012E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11582  010130  0E00               	movlw	0
 11583  010132  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11584  010134  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11585  010136  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11586  010138  0100               	movlb	0	; () banked
 11587  01013A  51CC               	movf	___flmul@a& (0+255),w,b
 11588  01013C  0100               	movlb	0	; () banked
 11589  01013E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11590  010140  CFF3 F0DF          	movff	prodl,___flmul@temp
 11591  010144  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11592                           
 11593                           ; BSR set to: 0
 11594  010148  0100               	movlb	0	; () banked
 11595  01014A  51DF               	movf	___flmul@temp& (0+255),w,b
 11596  01014C  0100               	movlb	0	; () banked
 11597  01014E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11598  010150  0E00               	movlw	0
 11599  010152  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11600  010154  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11601  010156  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11602                           
 11603                           ; BSR set to: 0
 11604  010158  0100               	movlb	0	; () banked
 11605  01015A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11606  01015C  0100               	movlb	0	; () banked
 11607  01015E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11608  010160  0E00               	movlw	0
 11609  010162  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11610  010164  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11611  010166  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11612                           
 11613                           ; BSR set to: 0
 11614  010168  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11615  01016C  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11616  010170  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11617  010174  0100               	movlb	0	; () banked
 11618  010176  6BD6               	clrf	___flmul@grs& (0+255),b
 11619                           
 11620                           ; BSR set to: 0
 11621  010178  0100               	movlb	0	; () banked
 11622  01017A  51CC               	movf	___flmul@a& (0+255),w,b
 11623  01017C  0100               	movlb	0	; () banked
 11624  01017E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11625  010180  CFF3 F0DF          	movff	prodl,___flmul@temp
 11626  010184  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11627                           
 11628                           ; BSR set to: 0
 11629  010188  0100               	movlb	0	; () banked
 11630  01018A  51DF               	movf	___flmul@temp& (0+255),w,b
 11631  01018C  0100               	movlb	0	; () banked
 11632  01018E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11633  010190  0100               	movlb	0	; () banked
 11634  010192  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11635  010194  0100               	movlb	0	; () banked
 11636  010196  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11637  010198  0E00               	movlw	0
 11638  01019A  0100               	movlb	0	; () banked
 11639  01019C  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11640  01019E  0E00               	movlw	0
 11641  0101A0  0100               	movlb	0	; () banked
 11642  0101A2  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11643                           
 11644                           ; BSR set to: 0
 11645  0101A4  0100               	movlb	0	; () banked
 11646  0101A6  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11647  0101A8  0100               	movlb	0	; () banked
 11648  0101AA  03C8               	mulwf	___flmul@b& (0+255),b
 11649  0101AC  CFF3 F0DF          	movff	prodl,___flmul@temp
 11650  0101B0  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11651                           
 11652                           ; BSR set to: 0
 11653  0101B4  0100               	movlb	0	; () banked
 11654  0101B6  51DF               	movf	___flmul@temp& (0+255),w,b
 11655  0101B8  0100               	movlb	0	; () banked
 11656  0101BA  27D6               	addwf	___flmul@grs& (0+255),f,b
 11657  0101BC  0100               	movlb	0	; () banked
 11658  0101BE  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11659  0101C0  0100               	movlb	0	; () banked
 11660  0101C2  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11661  0101C4  0E00               	movlw	0
 11662  0101C6  0100               	movlb	0	; () banked
 11663  0101C8  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11664  0101CA  0E00               	movlw	0
 11665  0101CC  0100               	movlb	0	; () banked
 11666  0101CE  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11667                           
 11668                           ; BSR set to: 0
 11669  0101D0  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11670  0101D4  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11671  0101D8  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11672  0101DC  0100               	movlb	0	; () banked
 11673  0101DE  6BD6               	clrf	___flmul@grs& (0+255),b
 11674  0101E0  0100               	movlb	0	; () banked
 11675  0101E2  51CC               	movf	___flmul@a& (0+255),w,b
 11676  0101E4  0100               	movlb	0	; () banked
 11677  0101E6  03C8               	mulwf	___flmul@b& (0+255),b
 11678  0101E8  CFF3 F0DF          	movff	prodl,___flmul@temp
 11679  0101EC  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11680                           
 11681                           ; BSR set to: 0
 11682  0101F0  0100               	movlb	0	; () banked
 11683  0101F2  51DF               	movf	___flmul@temp& (0+255),w,b
 11684  0101F4  0100               	movlb	0	; () banked
 11685  0101F6  27D6               	addwf	___flmul@grs& (0+255),f,b
 11686  0101F8  0100               	movlb	0	; () banked
 11687  0101FA  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11688  0101FC  0100               	movlb	0	; () banked
 11689  0101FE  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11690  010200  0E00               	movlw	0
 11691  010202  0100               	movlb	0	; () banked
 11692  010204  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11693  010206  0E00               	movlw	0
 11694  010208  0100               	movlb	0	; () banked
 11695  01020A  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11696                           
 11697                           ; BSR set to: 0
 11698  01020C  0100               	movlb	0	; () banked
 11699  01020E  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11700  010210  0100               	movlb	0	; () banked
 11701  010212  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11702  010214  CFF3 F0DF          	movff	prodl,___flmul@temp
 11703  010218  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11704  01021C  0100               	movlb	0	; () banked
 11705  01021E  51DF               	movf	___flmul@temp& (0+255),w,b
 11706  010220  0100               	movlb	0	; () banked
 11707  010222  27DB               	addwf	___flmul@prod& (0+255),f,b
 11708  010224  0100               	movlb	0	; () banked
 11709  010226  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11710  010228  0100               	movlb	0	; () banked
 11711  01022A  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11712  01022C  0E00               	movlw	0
 11713  01022E  0100               	movlb	0	; () banked
 11714  010230  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11715  010232  0E00               	movlw	0
 11716  010234  0100               	movlb	0	; () banked
 11717  010236  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11718                           
 11719                           ; BSR set to: 0
 11720  010238  0100               	movlb	0	; () banked
 11721  01023A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11722  01023C  0100               	movlb	0	; () banked
 11723  01023E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11724  010240  CFF3 F0DF          	movff	prodl,___flmul@temp
 11725  010244  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11726                           
 11727                           ; BSR set to: 0
 11728  010248  0100               	movlb	0	; () banked
 11729  01024A  51DF               	movf	___flmul@temp& (0+255),w,b
 11730  01024C  0100               	movlb	0	; () banked
 11731  01024E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11732  010250  0100               	movlb	0	; () banked
 11733  010252  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11734  010254  0100               	movlb	0	; () banked
 11735  010256  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11736  010258  0E00               	movlw	0
 11737  01025A  0100               	movlb	0	; () banked
 11738  01025C  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11739  01025E  0E00               	movlw	0
 11740  010260  0100               	movlb	0	; () banked
 11741  010262  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11742  010264  0100               	movlb	0	; () banked
 11743  010266  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11744  010268  0100               	movlb	0	; () banked
 11745  01026A  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11746  01026C  CFF3 F0DF          	movff	prodl,___flmul@temp
 11747  010270  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11748                           
 11749                           ; BSR set to: 0
 11750  010274  0100               	movlb	0	; () banked
 11751  010276  51DF               	movf	___flmul@temp& (0+255),w,b
 11752  010278  0100               	movlb	0	; () banked
 11753  01027A  6FD0               	movwf	??___flmul& (0+255),b
 11754  01027C  0100               	movlb	0	; () banked
 11755  01027E  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11756  010280  0100               	movlb	0	; () banked
 11757  010282  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11758  010284  0100               	movlb	0	; () banked
 11759  010286  6BD2               	clrf	(??___flmul+2)& (0+255),b
 11760  010288  0100               	movlb	0	; () banked
 11761  01028A  6BD3               	clrf	(??___flmul+3)& (0+255),b
 11762  01028C  C0D2  F0D3         	movff	??___flmul+2,??___flmul+3
 11763  010290  C0D1  F0D2         	movff	??___flmul+1,??___flmul+2
 11764  010294  C0D0  F0D1         	movff	??___flmul,??___flmul+1
 11765  010298  0100               	movlb	0	; () banked
 11766  01029A  6BD0               	clrf	??___flmul& (0+255),b
 11767  01029C  0100               	movlb	0	; () banked
 11768  01029E  51D0               	movf	??___flmul& (0+255),w,b
 11769  0102A0  0100               	movlb	0	; () banked
 11770  0102A2  27DB               	addwf	___flmul@prod& (0+255),f,b
 11771  0102A4  0100               	movlb	0	; () banked
 11772  0102A6  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11773  0102A8  0100               	movlb	0	; () banked
 11774  0102AA  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11775  0102AC  0100               	movlb	0	; () banked
 11776  0102AE  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11777  0102B0  0100               	movlb	0	; () banked
 11778  0102B2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11779  0102B4  0100               	movlb	0	; () banked
 11780  0102B6  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11781  0102B8  0100               	movlb	0	; () banked
 11782  0102BA  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11783                           
 11784                           ; BSR set to: 0
 11785  0102BC  C0D6  F0D0         	movff	___flmul@grs,??___flmul
 11786  0102C0  C0D7  F0D1         	movff	___flmul@grs+1,??___flmul+1
 11787  0102C4  C0D8  F0D2         	movff	___flmul@grs+2,??___flmul+2
 11788  0102C8  C0D9  F0D3         	movff	___flmul@grs+3,??___flmul+3
 11789  0102CC  0E19               	movlw	25
 11790  0102CE  D006               	goto	u10450
 11791  0102D0                     u10455:
 11792  0102D0  0100               	movlb	0	; () banked
 11793  0102D2  90D8               	bcf	status,0,c
 11794  0102D4  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11795  0102D6  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11796  0102D8  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11797  0102DA  33D0               	rrcf	??___flmul& (0+255),f,b
 11798  0102DC                     u10450:
 11799  0102DC  2EE8               	decfsz	wreg,f,c
 11800  0102DE  D7F8               	goto	u10455
 11801  0102E0  0100               	movlb	0	; () banked
 11802  0102E2  51D0               	movf	??___flmul& (0+255),w,b
 11803  0102E4  0100               	movlb	0	; () banked
 11804  0102E6  27DB               	addwf	___flmul@prod& (0+255),f,b
 11805  0102E8  0100               	movlb	0	; () banked
 11806  0102EA  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11807  0102EC  0100               	movlb	0	; () banked
 11808  0102EE  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11809  0102F0  0100               	movlb	0	; () banked
 11810  0102F2  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11811  0102F4  0100               	movlb	0	; () banked
 11812  0102F6  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11813  0102F8  0100               	movlb	0	; () banked
 11814  0102FA  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11815  0102FC  0100               	movlb	0	; () banked
 11816  0102FE  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11817                           
 11818                           ; BSR set to: 0
 11819  010300  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11820  010304  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11821  010308  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11822  01030C  0100               	movlb	0	; () banked
 11823  01030E  6BD6               	clrf	___flmul@grs& (0+255),b
 11824                           
 11825                           ; BSR set to: 0
 11826  010310  0100               	movlb	0	; () banked
 11827  010312  51D5               	movf	___flmul@aexp& (0+255),w,b
 11828  010314  C0DA  F0D0         	movff	___flmul@bexp,??___flmul
 11829  010318  0100               	movlb	0	; () banked
 11830  01031A  6BD1               	clrf	(??___flmul+1)& (0+255),b
 11831  01031C  0100               	movlb	0	; () banked
 11832  01031E  27D0               	addwf	??___flmul& (0+255),f,b
 11833  010320  0E00               	movlw	0
 11834  010322  23D1               	addwfc	(??___flmul+1)& (0+255),f,b
 11835  010324  0E82               	movlw	130
 11836  010326  0100               	movlb	0	; () banked
 11837  010328  25D0               	addwf	??___flmul& (0+255),w,b
 11838  01032A  0100               	movlb	0	; () banked
 11839  01032C  6FDF               	movwf	___flmul@temp& (0+255),b
 11840  01032E  0EFF               	movlw	255
 11841  010330  0100               	movlb	0	; () banked
 11842  010332  21D1               	addwfc	(??___flmul+1)& (0+255),w,b
 11843  010334  0100               	movlb	0	; () banked
 11844  010336  6FE0               	movwf	(___flmul@temp+1)& (0+255),b
 11845  010338  D015               	goto	l2986
 11846  01033A                     
 11847                           ; BSR set to: 0
 11848                           
 11849                           ; BSR set to: 0
 11850  01033A  0100               	movlb	0	; () banked
 11851  01033C  90D8               	bcf	status,0,c
 11852  01033E  37DB               	rlcf	___flmul@prod& (0+255),f,b
 11853  010340  37DC               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11854  010342  37DD               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11855  010344  37DE               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11856                           
 11857                           ; BSR set to: 0
 11858  010346  0100               	movlb	0	; () banked
 11859  010348  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11860  01034A  D002               	goto	l2988
 11861                           
 11862                           ; BSR set to: 0
 11863  01034C  0100               	movlb	0	; () banked
 11864  01034E  81DB               	bsf	___flmul@prod& (0+255),0,b
 11865  010350                     l2988:
 11866                           
 11867                           ; BSR set to: 0
 11868  010350  0100               	movlb	0	; () banked
 11869  010352  90D8               	bcf	status,0,c
 11870  010354  37D6               	rlcf	___flmul@grs& (0+255),f,b
 11871  010356  37D7               	rlcf	(___flmul@grs+1)& (0+255),f,b
 11872  010358  37D8               	rlcf	(___flmul@grs+2)& (0+255),f,b
 11873  01035A  37D9               	rlcf	(___flmul@grs+3)& (0+255),f,b
 11874  01035C  0100               	movlb	0	; () banked
 11875  01035E  07DF               	decf	___flmul@temp& (0+255),f,b
 11876  010360  A0D8               	btfss	status,0,c
 11877  010362  07E0               	decf	(___flmul@temp+1)& (0+255),f,b
 11878  010364                     l2986:
 11879                           
 11880                           ; BSR set to: 0
 11881                           
 11882                           ; BSR set to: 0
 11883  010364  0100               	movlb	0	; () banked
 11884  010366  AFDD               	btfss	(___flmul@prod+2)& (0+255),7,b
 11885  010368  D7E8               	goto	l2987
 11886                           
 11887                           ; BSR set to: 0
 11888                           
 11889                           ; BSR set to: 0
 11890  01036A  0E00               	movlw	0
 11891  01036C  0100               	movlb	0	; () banked
 11892  01036E  6FD5               	movwf	___flmul@aexp& (0+255),b
 11893                           
 11894                           ; BSR set to: 0
 11895  010370  0100               	movlb	0	; () banked
 11896  010372  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11897  010374  D024               	goto	l2993
 11898                           
 11899                           ; BSR set to: 0
 11900  010376  0EFF               	movlw	255
 11901  010378  0100               	movlb	0	; () banked
 11902  01037A  15D6               	andwf	___flmul@grs& (0+255),w,b
 11903  01037C  0100               	movlb	0	; () banked
 11904  01037E  6FD0               	movwf	??___flmul& (0+255),b
 11905  010380  0EFF               	movlw	255
 11906  010382  0100               	movlb	0	; () banked
 11907  010384  15D7               	andwf	(___flmul@grs+1)& (0+255),w,b
 11908  010386  0100               	movlb	0	; () banked
 11909  010388  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11910  01038A  0EFF               	movlw	255
 11911  01038C  0100               	movlb	0	; () banked
 11912  01038E  15D8               	andwf	(___flmul@grs+2)& (0+255),w,b
 11913  010390  0100               	movlb	0	; () banked
 11914  010392  6FD2               	movwf	(??___flmul+2)& (0+255),b
 11915  010394  0E7F               	movlw	127
 11916  010396  0100               	movlb	0	; () banked
 11917  010398  15D9               	andwf	(___flmul@grs+3)& (0+255),w,b
 11918  01039A  0100               	movlb	0	; () banked
 11919  01039C  6FD3               	movwf	(??___flmul+3)& (0+255),b
 11920  01039E  0100               	movlb	0	; () banked
 11921  0103A0  51D0               	movf	??___flmul& (0+255),w,b
 11922  0103A2  0100               	movlb	0	; () banked
 11923  0103A4  11D1               	iorwf	(??___flmul+1)& (0+255),w,b
 11924  0103A6  0100               	movlb	0	; () banked
 11925  0103A8  11D2               	iorwf	(??___flmul+2)& (0+255),w,b
 11926  0103AA  0100               	movlb	0	; () banked
 11927  0103AC  11D3               	iorwf	(??___flmul+3)& (0+255),w,b
 11928  0103AE  A4D8               	btfss	status,2,c
 11929  0103B0  D003               	goto	u10500
 11930                           
 11931                           ; BSR set to: 0
 11932                           
 11933                           ; BSR set to: 0
 11934  0103B2  0100               	movlb	0	; () banked
 11935  0103B4  A1DB               	btfss	___flmul@prod& (0+255),0,b
 11936  0103B6  D003               	goto	l2993
 11937  0103B8                     u10500:
 11938                           
 11939                           ; BSR set to: 0
 11940  0103B8  0E01               	movlw	1
 11941  0103BA  0100               	movlb	0	; () banked
 11942  0103BC  6FD5               	movwf	___flmul@aexp& (0+255),b
 11943  0103BE                     l2993:
 11944                           
 11945                           ; BSR set to: 0
 11946                           
 11947                           ; BSR set to: 0
 11948                           
 11949                           ; BSR set to: 0
 11950  0103BE  0100               	movlb	0	; () banked
 11951  0103C0  51D5               	movf	___flmul@aexp& (0+255),w,b
 11952  0103C2  0100               	movlb	0	; () banked
 11953  0103C4  B4D8               	btfsc	status,2,c
 11954  0103C6  D023               	goto	l2995
 11955                           
 11956                           ; BSR set to: 0
 11957  0103C8  0E01               	movlw	1
 11958  0103CA  0100               	movlb	0	; () banked
 11959  0103CC  27DB               	addwf	___flmul@prod& (0+255),f,b
 11960  0103CE  0E00               	movlw	0
 11961  0103D0  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11962  0103D2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11963  0103D4  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11964                           
 11965                           ; BSR set to: 0
 11966  0103D6  0100               	movlb	0	; () banked
 11967  0103D8  A1DE               	btfss	(___flmul@prod+3)& (0+255),0,b
 11968  0103DA  D019               	goto	l2995
 11969                           
 11970                           ; BSR set to: 0
 11971  0103DC  C0DB  F0D0         	movff	___flmul@prod,??___flmul
 11972  0103E0  C0DC  F0D1         	movff	___flmul@prod+1,??___flmul+1
 11973  0103E4  C0DD  F0D2         	movff	___flmul@prod+2,??___flmul+2
 11974  0103E8  C0DE  F0D3         	movff	___flmul@prod+3,??___flmul+3
 11975  0103EC  0100               	movlb	0	; () banked
 11976  0103EE  35D3               	rlcf	(??___flmul+3)& (0+255),w,b
 11977  0103F0  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11978  0103F2  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11979  0103F4  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11980  0103F6  33D0               	rrcf	??___flmul& (0+255),f,b
 11981  0103F8  C0D0  F0DB         	movff	??___flmul,___flmul@prod
 11982  0103FC  C0D1  F0DC         	movff	??___flmul+1,___flmul@prod+1
 11983  010400  C0D2  F0DD         	movff	??___flmul+2,___flmul@prod+2
 11984  010404  C0D3  F0DE         	movff	??___flmul+3,___flmul@prod+3
 11985                           
 11986                           ; BSR set to: 0
 11987  010408  0100               	movlb	0	; () banked
 11988  01040A  4BDF               	infsnz	___flmul@temp& (0+255),f,b
 11989  01040C  2BE0               	incf	(___flmul@temp+1)& (0+255),f,b
 11990  01040E                     l2995:
 11991                           
 11992                           ; BSR set to: 0
 11993                           
 11994                           ; BSR set to: 0
 11995                           
 11996                           ; BSR set to: 0
 11997  01040E  0100               	movlb	0	; () banked
 11998  010410  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11999  010412  D010               	goto	l2996
 12000  010414  0100               	movlb	0	; () banked
 12001  010416  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12002  010418  E104               	bnz	u10530
 12003  01041A  0100               	movlb	0	; () banked
 12004  01041C  29DF               	incf	___flmul@temp& (0+255),w,b
 12005  01041E  A0D8               	btfss	status,0,c
 12006  010420  D009               	goto	l2996
 12007  010422                     u10530:
 12008                           
 12009                           ; BSR set to: 0
 12010  010422  0E00               	movlw	0
 12011  010424  0100               	movlb	0	; () banked
 12012  010426  6FDB               	movwf	___flmul@prod& (0+255),b
 12013  010428  0E00               	movlw	0
 12014  01042A  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12015  01042C  0E80               	movlw	128
 12016  01042E  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12017  010430  0E7F               	movlw	127
 12018  010432  D02B               	goto	L5
 12019  010434                     l2996:
 12020                           
 12021                           ; BSR set to: 0
 12022                           
 12023                           ; BSR set to: 0
 12024  010434  0100               	movlb	0	; () banked
 12025  010436  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 12026  010438  D007               	goto	u10540
 12027  01043A  0100               	movlb	0	; () banked
 12028  01043C  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12029  01043E  E111               	bnz	l2998
 12030  010440  0100               	movlb	0	; () banked
 12031  010442  05DF               	decf	___flmul@temp& (0+255),w,b
 12032  010444  B0D8               	btfsc	status,0,c
 12033  010446  D00D               	goto	l2998
 12034  010448                     u10540:
 12035                           
 12036                           ; BSR set to: 0
 12037  010448  0E00               	movlw	0
 12038  01044A  0100               	movlb	0	; () banked
 12039  01044C  6FDB               	movwf	___flmul@prod& (0+255),b
 12040  01044E  0E00               	movlw	0
 12041  010450  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12042  010452  0E00               	movlw	0
 12043  010454  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12044  010456  0E00               	movlw	0
 12045  010458  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12046  01045A  0E00               	movlw	0
 12047  01045C  0100               	movlb	0	; () banked
 12048  01045E  6FD4               	movwf	___flmul@sign& (0+255),b
 12049  010460  D015               	goto	l2999
 12050  010462                     l2998:
 12051                           
 12052                           ; BSR set to: 0
 12053  010462  C0DF  F0DA         	movff	___flmul@temp,___flmul@bexp
 12054                           
 12055                           ; BSR set to: 0
 12056  010466  0EFF               	movlw	255
 12057  010468  0100               	movlb	0	; () banked
 12058  01046A  17DB               	andwf	___flmul@prod& (0+255),f,b
 12059  01046C  0EFF               	movlw	255
 12060  01046E  17DC               	andwf	(___flmul@prod+1)& (0+255),f,b
 12061  010470  0E7F               	movlw	127
 12062  010472  17DD               	andwf	(___flmul@prod+2)& (0+255),f,b
 12063  010474  0E00               	movlw	0
 12064  010476  17DE               	andwf	(___flmul@prod+3)& (0+255),f,b
 12065                           
 12066                           ; BSR set to: 0
 12067  010478  0100               	movlb	0	; () banked
 12068  01047A  A1DA               	btfss	___flmul@bexp& (0+255),0,b
 12069  01047C  D002               	goto	l3000
 12070                           
 12071                           ; BSR set to: 0
 12072  01047E  0100               	movlb	0	; () banked
 12073  010480  8FDD               	bsf	(___flmul@prod+2)& (0+255),7,b
 12074  010482                     l3000:
 12075                           
 12076                           ; BSR set to: 0
 12077                           
 12078                           ; BSR set to: 0
 12079  010482  0100               	movlb	0	; () banked
 12080  010484  90D8               	bcf	status,0,c
 12081  010486  31DA               	rrcf	___flmul@bexp& (0+255),w,b
 12082  010488  0100               	movlb	0	; () banked
 12083  01048A                     L5:
 12084  01048A  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12085  01048C                     l2999:
 12086                           
 12087                           ; BSR set to: 0
 12088                           
 12089                           ; BSR set to: 0
 12090                           
 12091                           ; BSR set to: 0
 12092  01048C  0100               	movlb	0	; () banked
 12093  01048E  51D4               	movf	___flmul@sign& (0+255),w,b
 12094  010490  0100               	movlb	0	; () banked
 12095  010492  13DE               	iorwf	(___flmul@prod+3)& (0+255),f,b
 12096                           
 12097                           ; BSR set to: 0
 12098  010494  C0DB  F0C8         	movff	___flmul@prod,?___flmul
 12099  010498  C0DC  F0C9         	movff	___flmul@prod+1,?___flmul+1
 12100  01049C  C0DD  F0CA         	movff	___flmul@prod+2,?___flmul+2
 12101  0104A0  C0DE  F0CB         	movff	___flmul@prod+3,?___flmul+3
 12102  0104A4  0012               	return	
 12103  0104A6                     __end_of___flmul:
 12104                           	opt stack 0
 12105                           tblptru	equ	0xFF8
 12106                           tblptrh	equ	0xFF7
 12107                           tblptrl	equ	0xFF6
 12108                           tablat	equ	0xFF5
 12109                           prodh	equ	0xFF4
 12110                           prodl	equ	0xFF3
 12111                           intcon	equ	0xFF2
 12112                           postinc0	equ	0xFEE
 12113                           wreg	equ	0xFE8
 12114                           postdec1	equ	0xFE5
 12115                           fsr1h	equ	0xFE2
 12116                           fsr1l	equ	0xFE1
 12117                           indf2	equ	0xFDF
 12118                           postinc2	equ	0xFDE
 12119                           postdec2	equ	0xFDD
 12120                           fsr2h	equ	0xFDA
 12121                           fsr2l	equ	0xFD9
 12122                           status	equ	0xFD8
 12123                           
 12124 ;; *************** function ___fldiv *****************
 12125 ;; Defined at:
 12126 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;  b               4    0[BANK0 ] unsigned char 
 12129 ;;  a               4    4[BANK0 ] unsigned char 
 12130 ;; Auto vars:     Size  Location     Type
 12131 ;;  grs             4   19[BANK0 ] unsigned long 
 12132 ;;  rem             4   13[BANK0 ] unsigned long 
 12133 ;;  new_exp         2   17[BANK0 ] int 
 12134 ;;  aexp            1   24[BANK0 ] unsigned char 
 12135 ;;  bexp            1   23[BANK0 ] unsigned char 
 12136 ;;  sign            1   12[BANK0 ] unsigned char 
 12137 ;; Return value:  Size  Location     Type
 12138 ;;                  4    0[BANK0 ] unsigned char 
 12139 ;; Registers used:
 12140 ;;		wreg, status,2, status,0
 12141 ;; Tracked objects:
 12142 ;;		On entry : 0/0
 12143 ;;		On exit  : 0/0
 12144 ;;		Unchanged: 0/0
 12145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12146 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12147 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12148 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12149 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12150 ;;Total ram usage:       25 bytes
 12151 ;; Hardware stack levels used:    1
 12152 ;; Hardware stack levels required when called:    7
 12153 ;; This function calls:
 12154 ;;		Nothing
 12155 ;; This function is called by:
 12156 ;;		_ADC_Voltage
 12157 ;;		_findClosestWall
 12158 ;;		_mode1
 12159 ;; This function uses a non-reentrant model
 12160 ;;
 12161                           
 12162                           	psect	text48
 12163  01109E                     __ptext48:
 12164                           	opt stack 0
 12165  01109E                     ___fldiv:
 12166                           	opt stack 21
 12167                           
 12168                           ; BSR set to: 0
 12169                           ;incstack = 0
 12170  01109E  0100               	movlb	0	; () banked
 12171  0110A0  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12172  0110A2  0B80               	andlw	128
 12173  0110A4  0100               	movlb	0	; () banked
 12174  0110A6  6FC6               	movwf	___fldiv@sign& (0+255),b
 12175  0110A8  0100               	movlb	0	; () banked
 12176  0110AA  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12177  0110AC  25BD               	addwf	(___fldiv@b+3)& (0+255),w,b
 12178  0110AE  0100               	movlb	0	; () banked
 12179  0110B0  6FD1               	movwf	___fldiv@bexp& (0+255),b
 12180                           
 12181                           ; BSR set to: 0
 12182  0110B2  0100               	movlb	0	; () banked
 12183  0110B4  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12184  0110B6  D002               	goto	l2940
 12185                           
 12186                           ; BSR set to: 0
 12187  0110B8  0100               	movlb	0	; () banked
 12188  0110BA  81D1               	bsf	___fldiv@bexp& (0+255),0,b
 12189  0110BC                     l2940:
 12190                           
 12191                           ; BSR set to: 0
 12192                           
 12193                           ; BSR set to: 0
 12194  0110BC  0100               	movlb	0	; () banked
 12195  0110BE  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12196  0110C0  0100               	movlb	0	; () banked
 12197  0110C2  B4D8               	btfsc	status,2,c
 12198  0110C4  D012               	goto	l2941
 12199                           
 12200                           ; BSR set to: 0
 12201  0110C6  0100               	movlb	0	; () banked
 12202  0110C8  29D1               	incf	___fldiv@bexp& (0+255),w,b
 12203  0110CA  A4D8               	btfss	status,2,c
 12204  0110CC  D009               	goto	l2942
 12205                           
 12206                           ; BSR set to: 0
 12207  0110CE  0E00               	movlw	0
 12208  0110D0  0100               	movlb	0	; () banked
 12209  0110D2  6FBA               	movwf	___fldiv@b& (0+255),b
 12210  0110D4  0E00               	movlw	0
 12211  0110D6  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12212  0110D8  0E00               	movlw	0
 12213  0110DA  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12214  0110DC  0E00               	movlw	0
 12215  0110DE  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12216  0110E0                     l2942:
 12217                           
 12218                           ; BSR set to: 0
 12219                           
 12220                           ; BSR set to: 0
 12221  0110E0  0100               	movlb	0	; () banked
 12222  0110E2  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12223                           
 12224                           ; BSR set to: 0
 12225  0110E4  0E00               	movlw	0
 12226  0110E6  0100               	movlb	0	; () banked
 12227  0110E8  D008               	goto	L6
 12228  0110EA                     l2941:
 12229                           
 12230                           ; BSR set to: 0
 12231                           
 12232                           ; BSR set to: 0
 12233  0110EA  0E00               	movlw	0
 12234  0110EC  0100               	movlb	0	; () banked
 12235  0110EE  6FBA               	movwf	___fldiv@b& (0+255),b
 12236  0110F0  0E00               	movlw	0
 12237  0110F2  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12238  0110F4  0E00               	movlw	0
 12239  0110F6  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12240  0110F8  0E00               	movlw	0
 12241  0110FA                     L6:
 12242  0110FA  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12243                           
 12244                           ; BSR set to: 0
 12245                           
 12246                           ; BSR set to: 0
 12247  0110FC  0100               	movlb	0	; () banked
 12248  0110FE  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12249  011100  0B80               	andlw	128
 12250  011102  0100               	movlb	0	; () banked
 12251  011104  1BC6               	xorwf	___fldiv@sign& (0+255),f,b
 12252                           
 12253                           ; BSR set to: 0
 12254  011106  0100               	movlb	0	; () banked
 12255  011108  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12256  01110A  25C1               	addwf	(___fldiv@a+3)& (0+255),w,b
 12257  01110C  0100               	movlb	0	; () banked
 12258  01110E  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12259                           
 12260                           ; BSR set to: 0
 12261  011110  0100               	movlb	0	; () banked
 12262  011112  AFC0               	btfss	(___fldiv@a+2)& (0+255),7,b
 12263  011114  D002               	goto	l2944
 12264                           
 12265                           ; BSR set to: 0
 12266  011116  0100               	movlb	0	; () banked
 12267  011118  81D2               	bsf	___fldiv@aexp& (0+255),0,b
 12268  01111A                     l2944:
 12269                           
 12270                           ; BSR set to: 0
 12271                           
 12272                           ; BSR set to: 0
 12273  01111A  0100               	movlb	0	; () banked
 12274  01111C  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12275  01111E  0100               	movlb	0	; () banked
 12276  011120  B4D8               	btfsc	status,2,c
 12277  011122  D012               	goto	l2945
 12278                           
 12279                           ; BSR set to: 0
 12280  011124  0100               	movlb	0	; () banked
 12281  011126  29D2               	incf	___fldiv@aexp& (0+255),w,b
 12282  011128  A4D8               	btfss	status,2,c
 12283  01112A  D009               	goto	l2946
 12284                           
 12285                           ; BSR set to: 0
 12286  01112C  0E00               	movlw	0
 12287  01112E  0100               	movlb	0	; () banked
 12288  011130  6FBE               	movwf	___fldiv@a& (0+255),b
 12289  011132  0E00               	movlw	0
 12290  011134  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12291  011136  0E00               	movlw	0
 12292  011138  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12293  01113A  0E00               	movlw	0
 12294  01113C  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12295  01113E                     l2946:
 12296                           
 12297                           ; BSR set to: 0
 12298                           
 12299                           ; BSR set to: 0
 12300  01113E  0100               	movlb	0	; () banked
 12301  011140  8FC0               	bsf	(___fldiv@a+2)& (0+255),7,b
 12302                           
 12303                           ; BSR set to: 0
 12304  011142  0E00               	movlw	0
 12305  011144  0100               	movlb	0	; () banked
 12306  011146  D008               	goto	L7
 12307  011148                     l2945:
 12308                           
 12309                           ; BSR set to: 0
 12310                           
 12311                           ; BSR set to: 0
 12312  011148  0E00               	movlw	0
 12313  01114A  0100               	movlb	0	; () banked
 12314  01114C  6FBE               	movwf	___fldiv@a& (0+255),b
 12315  01114E  0E00               	movlw	0
 12316  011150  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12317  011152  0E00               	movlw	0
 12318  011154  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12319  011156  0E00               	movlw	0
 12320  011158                     L7:
 12321  011158  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12322                           
 12323                           ; BSR set to: 0
 12324                           
 12325                           ; BSR set to: 0
 12326  01115A  0100               	movlb	0	; () banked
 12327  01115C  51BE               	movf	___fldiv@a& (0+255),w,b
 12328  01115E  0100               	movlb	0	; () banked
 12329  011160  11BF               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12330  011162  0100               	movlb	0	; () banked
 12331  011164  11C0               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12332  011166  0100               	movlb	0	; () banked
 12333  011168  11C1               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12334  01116A  A4D8               	btfss	status,2,c
 12335  01116C  D017               	goto	l2948
 12336                           
 12337                           ; BSR set to: 0
 12338  01116E  0E00               	movlw	0
 12339  011170  0100               	movlb	0	; () banked
 12340  011172  6FBA               	movwf	___fldiv@b& (0+255),b
 12341  011174  0E00               	movlw	0
 12342  011176  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12343  011178  0E00               	movlw	0
 12344  01117A  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12345  01117C  0E00               	movlw	0
 12346  01117E  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12347                           
 12348                           ; BSR set to: 0
 12349  011180  0100               	movlb	0	; () banked
 12350  011182  0E80               	movlw	128
 12351  011184  13BC               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12352  011186  0E7F               	movlw	127
 12353  011188  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12354                           
 12355                           ; BSR set to: 0
 12356  01118A  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12357  01118E  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12358  011192  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12359  011196  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12360                           
 12361                           ; BSR set to: 0
 12362  01119A  0012               	return	
 12363  01119C                     l2948:
 12364                           
 12365                           ; BSR set to: 0
 12366                           
 12367                           ; BSR set to: 0
 12368  01119C  0100               	movlb	0	; () banked
 12369  01119E  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12370  0111A0  0100               	movlb	0	; () banked
 12371  0111A2  A4D8               	btfss	status,2,c
 12372  0111A4  D012               	goto	l2950
 12373                           
 12374                           ; BSR set to: 0
 12375  0111A6  0E00               	movlw	0
 12376  0111A8  0100               	movlb	0	; () banked
 12377  0111AA  6FBA               	movwf	___fldiv@b& (0+255),b
 12378  0111AC  0E00               	movlw	0
 12379  0111AE  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12380  0111B0  0E00               	movlw	0
 12381  0111B2  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12382  0111B4  0E00               	movlw	0
 12383  0111B6  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12384                           
 12385                           ; BSR set to: 0
 12386  0111B8  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12387  0111BC  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12388  0111C0  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12389  0111C4  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12390                           
 12391                           ; BSR set to: 0
 12392  0111C8  0012               	return	
 12393  0111CA                     l2950:
 12394                           
 12395                           ; BSR set to: 0
 12396                           
 12397                           ; BSR set to: 0
 12398  0111CA  0100               	movlb	0	; () banked
 12399  0111CC  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12400  0111CE  0100               	movlb	0	; () banked
 12401  0111D0  6FC2               	movwf	??___fldiv& (0+255),b
 12402  0111D2  6BC3               	clrf	(??___fldiv+1)& (0+255),b
 12403  0111D4  0100               	movlb	0	; () banked
 12404  0111D6  1FC2               	comf	??___fldiv& (0+255),f,b
 12405  0111D8  1FC3               	comf	(??___fldiv+1)& (0+255),f,b
 12406  0111DA  4BC2               	infsnz	??___fldiv& (0+255),f,b
 12407  0111DC  2BC3               	incf	(??___fldiv+1)& (0+255),f,b
 12408  0111DE  0100               	movlb	0	; () banked
 12409  0111E0  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12410  0111E2  0100               	movlb	0	; () banked
 12411  0111E4  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12412  0111E6  6BC5               	clrf	(??___fldiv+3)& (0+255),b
 12413  0111E8  0100               	movlb	0	; () banked
 12414  0111EA  51C2               	movf	??___fldiv& (0+255),w,b
 12415  0111EC  0100               	movlb	0	; () banked
 12416  0111EE  27C4               	addwf	(??___fldiv+2)& (0+255),f,b
 12417  0111F0  0100               	movlb	0	; () banked
 12418  0111F2  51C3               	movf	(??___fldiv+1)& (0+255),w,b
 12419  0111F4  0100               	movlb	0	; () banked
 12420  0111F6  23C5               	addwfc	(??___fldiv+3)& (0+255),f,b
 12421  0111F8  0E7F               	movlw	127
 12422  0111FA  0100               	movlb	0	; () banked
 12423  0111FC  25C4               	addwf	(??___fldiv+2)& (0+255),w,b
 12424  0111FE  0100               	movlb	0	; () banked
 12425  011200  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12426  011202  0E00               	movlw	0
 12427  011204  0100               	movlb	0	; () banked
 12428  011206  21C5               	addwfc	(??___fldiv+3)& (0+255),w,b
 12429  011208  0100               	movlb	0	; () banked
 12430  01120A  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12431                           
 12432                           ; BSR set to: 0
 12433  01120C  C0BA  F0C7         	movff	___fldiv@b,___fldiv@rem
 12434  011210  C0BB  F0C8         	movff	___fldiv@b+1,___fldiv@rem+1
 12435  011214  C0BC  F0C9         	movff	___fldiv@b+2,___fldiv@rem+2
 12436  011218  C0BD  F0CA         	movff	___fldiv@b+3,___fldiv@rem+3
 12437                           
 12438                           ; BSR set to: 0
 12439  01121C  0E00               	movlw	0
 12440  01121E  0100               	movlb	0	; () banked
 12441  011220  6FBA               	movwf	___fldiv@b& (0+255),b
 12442  011222  0E00               	movlw	0
 12443  011224  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12444  011226  0E00               	movlw	0
 12445  011228  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12446  01122A  0E00               	movlw	0
 12447  01122C  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12448                           
 12449                           ; BSR set to: 0
 12450  01122E  0E00               	movlw	0
 12451  011230  0100               	movlb	0	; () banked
 12452  011232  6FCD               	movwf	___fldiv@grs& (0+255),b
 12453  011234  0E00               	movlw	0
 12454  011236  6FCE               	movwf	(___fldiv@grs+1)& (0+255),b
 12455  011238  0E00               	movlw	0
 12456  01123A  6FCF               	movwf	(___fldiv@grs+2)& (0+255),b
 12457  01123C  0E00               	movlw	0
 12458  01123E  6FD0               	movwf	(___fldiv@grs+3)& (0+255),b
 12459                           
 12460                           ; BSR set to: 0
 12461  011240  0E00               	movlw	0
 12462  011242  0100               	movlb	0	; () banked
 12463  011244  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12464  011246  D042               	goto	l2951
 12465  011248                     
 12466                           ; BSR set to: 0
 12467                           
 12468                           ; BSR set to: 0
 12469  011248  0100               	movlb	0	; () banked
 12470  01124A  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12471  01124C  0100               	movlb	0	; () banked
 12472  01124E  B4D8               	btfsc	status,2,c
 12473  011250  D017               	goto	l2953
 12474                           
 12475                           ; BSR set to: 0
 12476  011252  0100               	movlb	0	; () banked
 12477  011254  90D8               	bcf	status,0,c
 12478  011256  37C7               	rlcf	___fldiv@rem& (0+255),f,b
 12479  011258  37C8               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12480  01125A  37C9               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12481  01125C  37CA               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12482  01125E  0100               	movlb	0	; () banked
 12483  011260  90D8               	bcf	status,0,c
 12484  011262  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12485  011264  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12486  011266  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12487  011268  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12488                           
 12489                           ; BSR set to: 0
 12490  01126A  0100               	movlb	0	; () banked
 12491  01126C  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12492  01126E  D002               	goto	l2954
 12493                           
 12494                           ; BSR set to: 0
 12495  011270  0100               	movlb	0	; () banked
 12496  011272  81BA               	bsf	___fldiv@b& (0+255),0,b
 12497  011274                     l2954:
 12498                           
 12499                           ; BSR set to: 0
 12500  011274  0100               	movlb	0	; () banked
 12501  011276  90D8               	bcf	status,0,c
 12502  011278  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12503  01127A  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12504  01127C  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12505  01127E  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12506  011280                     l2953:
 12507                           
 12508                           ; BSR set to: 0
 12509                           
 12510                           ; BSR set to: 0
 12511  011280  0100               	movlb	0	; () banked
 12512  011282  51BE               	movf	___fldiv@a& (0+255),w,b
 12513  011284  0100               	movlb	0	; () banked
 12514  011286  5DC7               	subwf	___fldiv@rem& (0+255),w,b
 12515  011288  0100               	movlb	0	; () banked
 12516  01128A  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12517  01128C  0100               	movlb	0	; () banked
 12518  01128E  59C8               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12519  011290  0100               	movlb	0	; () banked
 12520  011292  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12521  011294  0100               	movlb	0	; () banked
 12522  011296  59C9               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12523  011298  0100               	movlb	0	; () banked
 12524  01129A  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12525  01129C  0100               	movlb	0	; () banked
 12526  01129E  59CA               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12527  0112A0  A0D8               	btfss	status,0,c
 12528  0112A2  D012               	goto	l2955
 12529                           
 12530                           ; BSR set to: 0
 12531  0112A4  0100               	movlb	0	; () banked
 12532  0112A6  8DD0               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12533                           
 12534                           ; BSR set to: 0
 12535  0112A8  0100               	movlb	0	; () banked
 12536  0112AA  51BE               	movf	___fldiv@a& (0+255),w,b
 12537  0112AC  0100               	movlb	0	; () banked
 12538  0112AE  5FC7               	subwf	___fldiv@rem& (0+255),f,b
 12539  0112B0  0100               	movlb	0	; () banked
 12540  0112B2  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12541  0112B4  0100               	movlb	0	; () banked
 12542  0112B6  5BC8               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12543  0112B8  0100               	movlb	0	; () banked
 12544  0112BA  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12545  0112BC  0100               	movlb	0	; () banked
 12546  0112BE  5BC9               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12547  0112C0  0100               	movlb	0	; () banked
 12548  0112C2  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12549  0112C4  0100               	movlb	0	; () banked
 12550  0112C6  5BCA               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12551  0112C8                     l2955:
 12552                           
 12553                           ; BSR set to: 0
 12554                           
 12555                           ; BSR set to: 0
 12556  0112C8  0100               	movlb	0	; () banked
 12557  0112CA  2BD2               	incf	___fldiv@aexp& (0+255),f,b
 12558  0112CC                     l2951:
 12559                           
 12560                           ; BSR set to: 0
 12561  0112CC  0E19               	movlw	25
 12562  0112CE  0100               	movlb	0	; () banked
 12563  0112D0  65D2               	cpfsgt	___fldiv@aexp& (0+255),b
 12564  0112D2  D7BA               	goto	l2952
 12565                           
 12566                           ; BSR set to: 0
 12567                           
 12568                           ; BSR set to: 0
 12569  0112D4  0100               	movlb	0	; () banked
 12570  0112D6  51C7               	movf	___fldiv@rem& (0+255),w,b
 12571  0112D8  0100               	movlb	0	; () banked
 12572  0112DA  11C8               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12573  0112DC  0100               	movlb	0	; () banked
 12574  0112DE  11C9               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12575  0112E0  0100               	movlb	0	; () banked
 12576  0112E2  11CA               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12577  0112E4  B4D8               	btfsc	status,2,c
 12578  0112E6  D018               	goto	l2958
 12579                           
 12580                           ; BSR set to: 0
 12581  0112E8  0100               	movlb	0	; () banked
 12582  0112EA  81CD               	bsf	___fldiv@grs& (0+255),0,b
 12583                           
 12584                           ; BSR set to: 0
 12585  0112EC  D015               	goto	l2958
 12586  0112EE                     
 12587                           ; BSR set to: 0
 12588                           
 12589                           ; BSR set to: 0
 12590  0112EE  0100               	movlb	0	; () banked
 12591  0112F0  90D8               	bcf	status,0,c
 12592  0112F2  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12593  0112F4  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12594  0112F6  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12595  0112F8  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12596                           
 12597                           ; BSR set to: 0
 12598  0112FA  0100               	movlb	0	; () banked
 12599  0112FC  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12600  0112FE  D002               	goto	l2960
 12601                           
 12602                           ; BSR set to: 0
 12603  011300  0100               	movlb	0	; () banked
 12604  011302  81BA               	bsf	___fldiv@b& (0+255),0,b
 12605  011304                     l2960:
 12606                           
 12607                           ; BSR set to: 0
 12608  011304  0100               	movlb	0	; () banked
 12609  011306  90D8               	bcf	status,0,c
 12610  011308  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12611  01130A  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12612  01130C  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12613  01130E  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12614  011310  0100               	movlb	0	; () banked
 12615  011312  07CB               	decf	___fldiv@new_exp& (0+255),f,b
 12616  011314  A0D8               	btfss	status,0,c
 12617  011316  07CC               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12618  011318                     l2958:
 12619                           
 12620                           ; BSR set to: 0
 12621                           
 12622                           ; BSR set to: 0
 12623  011318  0100               	movlb	0	; () banked
 12624  01131A  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12625  01131C  D7E8               	goto	l2959
 12626                           
 12627                           ; BSR set to: 0
 12628                           
 12629                           ; BSR set to: 0
 12630  01131E  0E00               	movlw	0
 12631  011320  0100               	movlb	0	; () banked
 12632  011322  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12633                           
 12634                           ; BSR set to: 0
 12635  011324  0100               	movlb	0	; () banked
 12636  011326  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12637  011328  D024               	goto	l2965
 12638                           
 12639                           ; BSR set to: 0
 12640  01132A  0EFF               	movlw	255
 12641  01132C  0100               	movlb	0	; () banked
 12642  01132E  15CD               	andwf	___fldiv@grs& (0+255),w,b
 12643  011330  0100               	movlb	0	; () banked
 12644  011332  6FC2               	movwf	??___fldiv& (0+255),b
 12645  011334  0EFF               	movlw	255
 12646  011336  0100               	movlb	0	; () banked
 12647  011338  15CE               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12648  01133A  0100               	movlb	0	; () banked
 12649  01133C  6FC3               	movwf	(??___fldiv+1)& (0+255),b
 12650  01133E  0EFF               	movlw	255
 12651  011340  0100               	movlb	0	; () banked
 12652  011342  15CF               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12653  011344  0100               	movlb	0	; () banked
 12654  011346  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12655  011348  0E7F               	movlw	127
 12656  01134A  0100               	movlb	0	; () banked
 12657  01134C  15D0               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12658  01134E  0100               	movlb	0	; () banked
 12659  011350  6FC5               	movwf	(??___fldiv+3)& (0+255),b
 12660  011352  0100               	movlb	0	; () banked
 12661  011354  51C2               	movf	??___fldiv& (0+255),w,b
 12662  011356  0100               	movlb	0	; () banked
 12663  011358  11C3               	iorwf	(??___fldiv+1)& (0+255),w,b
 12664  01135A  0100               	movlb	0	; () banked
 12665  01135C  11C4               	iorwf	(??___fldiv+2)& (0+255),w,b
 12666  01135E  0100               	movlb	0	; () banked
 12667  011360  11C5               	iorwf	(??___fldiv+3)& (0+255),w,b
 12668  011362  A4D8               	btfss	status,2,c
 12669  011364  D003               	goto	u10310
 12670                           
 12671                           ; BSR set to: 0
 12672                           
 12673                           ; BSR set to: 0
 12674  011366  0100               	movlb	0	; () banked
 12675  011368  A1BA               	btfss	___fldiv@b& (0+255),0,b
 12676  01136A  D003               	goto	l2965
 12677  01136C                     u10310:
 12678                           
 12679                           ; BSR set to: 0
 12680  01136C  0E01               	movlw	1
 12681  01136E  0100               	movlb	0	; () banked
 12682  011370  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12683  011372                     l2965:
 12684                           
 12685                           ; BSR set to: 0
 12686                           
 12687                           ; BSR set to: 0
 12688                           
 12689                           ; BSR set to: 0
 12690  011372  0100               	movlb	0	; () banked
 12691  011374  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12692  011376  0100               	movlb	0	; () banked
 12693  011378  B4D8               	btfsc	status,2,c
 12694  01137A  D023               	goto	l2967
 12695                           
 12696                           ; BSR set to: 0
 12697  01137C  0E01               	movlw	1
 12698  01137E  0100               	movlb	0	; () banked
 12699  011380  27BA               	addwf	___fldiv@b& (0+255),f,b
 12700  011382  0E00               	movlw	0
 12701  011384  23BB               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12702  011386  23BC               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12703  011388  23BD               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12704                           
 12705                           ; BSR set to: 0
 12706  01138A  0100               	movlb	0	; () banked
 12707  01138C  A1BD               	btfss	(___fldiv@b+3)& (0+255),0,b
 12708  01138E  D019               	goto	l2967
 12709                           
 12710                           ; BSR set to: 0
 12711  011390  C0BA  F0C2         	movff	___fldiv@b,??___fldiv
 12712  011394  C0BB  F0C3         	movff	___fldiv@b+1,??___fldiv+1
 12713  011398  C0BC  F0C4         	movff	___fldiv@b+2,??___fldiv+2
 12714  01139C  C0BD  F0C5         	movff	___fldiv@b+3,??___fldiv+3
 12715  0113A0  0100               	movlb	0	; () banked
 12716  0113A2  35C5               	rlcf	(??___fldiv+3)& (0+255),w,b
 12717  0113A4  33C5               	rrcf	(??___fldiv+3)& (0+255),f,b
 12718  0113A6  33C4               	rrcf	(??___fldiv+2)& (0+255),f,b
 12719  0113A8  33C3               	rrcf	(??___fldiv+1)& (0+255),f,b
 12720  0113AA  33C2               	rrcf	??___fldiv& (0+255),f,b
 12721  0113AC  C0C2  F0BA         	movff	??___fldiv,___fldiv@b
 12722  0113B0  C0C3  F0BB         	movff	??___fldiv+1,___fldiv@b+1
 12723  0113B4  C0C4  F0BC         	movff	??___fldiv+2,___fldiv@b+2
 12724  0113B8  C0C5  F0BD         	movff	??___fldiv+3,___fldiv@b+3
 12725                           
 12726                           ; BSR set to: 0
 12727  0113BC  0100               	movlb	0	; () banked
 12728  0113BE  4BCB               	infsnz	___fldiv@new_exp& (0+255),f,b
 12729  0113C0  2BCC               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12730  0113C2                     l2967:
 12731                           
 12732                           ; BSR set to: 0
 12733                           
 12734                           ; BSR set to: 0
 12735                           
 12736                           ; BSR set to: 0
 12737  0113C2  0100               	movlb	0	; () banked
 12738  0113C4  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12739  0113C6  D014               	goto	l2968
 12740  0113C8  0100               	movlb	0	; () banked
 12741  0113CA  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12742  0113CC  E104               	bnz	u10340
 12743  0113CE  0100               	movlb	0	; () banked
 12744  0113D0  29CB               	incf	___fldiv@new_exp& (0+255),w,b
 12745  0113D2  A0D8               	btfss	status,0,c
 12746  0113D4  D00D               	goto	l2968
 12747  0113D6                     u10340:
 12748                           
 12749                           ; BSR set to: 0
 12750  0113D6  0E00               	movlw	0
 12751  0113D8  0100               	movlb	0	; () banked
 12752  0113DA  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12753  0113DC  69CB               	setf	___fldiv@new_exp& (0+255),b
 12754  0113DE  0E00               	movlw	0
 12755  0113E0  0100               	movlb	0	; () banked
 12756  0113E2  6FBA               	movwf	___fldiv@b& (0+255),b
 12757  0113E4  0E00               	movlw	0
 12758  0113E6  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12759  0113E8  0E00               	movlw	0
 12760  0113EA  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12761  0113EC  0E00               	movlw	0
 12762  0113EE  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12763  0113F0                     l2968:
 12764                           
 12765                           ; BSR set to: 0
 12766                           
 12767                           ; BSR set to: 0
 12768  0113F0  0100               	movlb	0	; () banked
 12769  0113F2  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12770  0113F4  D007               	goto	u10350
 12771  0113F6  0100               	movlb	0	; () banked
 12772  0113F8  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12773  0113FA  E115               	bnz	l13669
 12774  0113FC  0100               	movlb	0	; () banked
 12775  0113FE  05CB               	decf	___fldiv@new_exp& (0+255),w,b
 12776  011400  B0D8               	btfsc	status,0,c
 12777  011402  D011               	goto	l2969
 12778  011404                     u10350:
 12779                           
 12780                           ; BSR set to: 0
 12781  011404  0E00               	movlw	0
 12782  011406  0100               	movlb	0	; () banked
 12783  011408  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12784  01140A  0E00               	movlw	0
 12785  01140C  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12786  01140E  0E00               	movlw	0
 12787  011410  0100               	movlb	0	; () banked
 12788  011412  6FBA               	movwf	___fldiv@b& (0+255),b
 12789  011414  0E00               	movlw	0
 12790  011416  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12791  011418  0E00               	movlw	0
 12792  01141A  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12793  01141C  0E00               	movlw	0
 12794  01141E  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12795  011420  0E00               	movlw	0
 12796  011422  0100               	movlb	0	; () banked
 12797  011424  6FC6               	movwf	___fldiv@sign& (0+255),b
 12798  011426                     l2969:
 12799  011426                     l13669:
 12800                           
 12801                           ; BSR set to: 0
 12802  011426  C0CB  F0D1         	movff	___fldiv@new_exp,___fldiv@bexp
 12803                           
 12804                           ; BSR set to: 0
 12805  01142A  0100               	movlb	0	; () banked
 12806  01142C  A1D1               	btfss	___fldiv@bexp& (0+255),0,b
 12807  01142E  D003               	goto	l2970
 12808                           
 12809                           ; BSR set to: 0
 12810  011430  0100               	movlb	0	; () banked
 12811  011432  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12812  011434  D002               	goto	l2971
 12813  011436                     l2970:
 12814                           
 12815                           ; BSR set to: 0
 12816                           
 12817                           ; BSR set to: 0
 12818  011436  0100               	movlb	0	; () banked
 12819  011438  9FBC               	bcf	(___fldiv@b+2)& (0+255),7,b
 12820  01143A                     l2971:
 12821                           
 12822                           ; BSR set to: 0
 12823                           
 12824                           ; BSR set to: 0
 12825  01143A  0100               	movlb	0	; () banked
 12826  01143C  90D8               	bcf	status,0,c
 12827  01143E  31D1               	rrcf	___fldiv@bexp& (0+255),w,b
 12828  011440  0100               	movlb	0	; () banked
 12829  011442  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12830                           
 12831                           ; BSR set to: 0
 12832  011444  0100               	movlb	0	; () banked
 12833  011446  51C6               	movf	___fldiv@sign& (0+255),w,b
 12834  011448  0100               	movlb	0	; () banked
 12835  01144A  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12836                           
 12837                           ; BSR set to: 0
 12838  01144C  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12839  011450  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12840  011454  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12841  011458  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12842  01145C  0012               	return	
 12843  01145E                     __end_of___fldiv:
 12844                           	opt stack 0
 12845                           tblptru	equ	0xFF8
 12846                           tblptrh	equ	0xFF7
 12847                           tblptrl	equ	0xFF6
 12848                           tablat	equ	0xFF5
 12849                           prodh	equ	0xFF4
 12850                           prodl	equ	0xFF3
 12851                           intcon	equ	0xFF2
 12852                           postinc0	equ	0xFEE
 12853                           wreg	equ	0xFE8
 12854                           postdec1	equ	0xFE5
 12855                           fsr1h	equ	0xFE2
 12856                           fsr1l	equ	0xFE1
 12857                           indf2	equ	0xFDF
 12858                           postinc2	equ	0xFDE
 12859                           postdec2	equ	0xFDD
 12860                           fsr2h	equ	0xFDA
 12861                           fsr2l	equ	0xFD9
 12862                           status	equ	0xFD8
 12863                           
 12864 ;; *************** function _init *****************
 12865 ;; Defined at:
 12866 ;;		line 65 in file "main.c"
 12867 ;; Parameters:    Size  Location     Type
 12868 ;;		None
 12869 ;; Auto vars:     Size  Location     Type
 12870 ;;		None
 12871 ;; Return value:  Size  Location     Type
 12872 ;;                  1    wreg      void 
 12873 ;; Registers used:
 12874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12875 ;; Tracked objects:
 12876 ;;		On entry : 0/0
 12877 ;;		On exit  : 0/0
 12878 ;;		Unchanged: 0/0
 12879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12884 ;;Total ram usage:        0 bytes
 12885 ;; Hardware stack levels used:    1
 12886 ;; Hardware stack levels required when called:   17
 12887 ;; This function calls:
 12888 ;;		_ADC_Init
 12889 ;;		_ADC_Start
 12890 ;;		_Console_Init
 12891 ;;		_HMI_Init
 12892 ;;		_ISR_Enable
 12893 ;;		_LCD_Init
 12894 ;;		_MXK_BlockSwitchTo
 12895 ;;		_MXK_Dequeue
 12896 ;;		_MXK_Init
 12897 ;;		_MXK_Release
 12898 ;;		_Motor_Init
 12899 ;;		_delay_ms
 12900 ;;		_eusart_init
 12901 ;;		_irobot_init
 12902 ;;		_irobot_init_song_0
 12903 ;;		_irobot_led_power_on
 12904 ;; This function is called by:
 12905 ;;		_main
 12906 ;; This function uses a non-reentrant model
 12907 ;;
 12908                           
 12909                           	psect	text49
 12910  014772                     __ptext49:
 12911                           	opt stack 0
 12912  014772                     _init:
 12913                           	opt stack 13
 12914                           
 12915                           ;main.c: 67: MXK_Init();
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;incstack = 0
 12919  014772  EC96  F096         	call	_MXK_Init	;wreg free
 12920                           
 12921                           ;main.c: 70: ISR_Enable();
 12922  014776  EC79  F0B3         	call	_ISR_Enable	;wreg free
 12923                           
 12924                           ;main.c: 73: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 12925  01477A  0E01               	movlw	1
 12926  01477C  ECE0  F0AF         	call	_MXK_BlockSwitchTo
 12927  014780  0900               	iorlw	0
 12928  014782  B4D8               	btfsc	status,2,c
 12929  014784  D00C               	goto	l2296
 12930                           
 12931                           ;main.c: 74: Console_Init();
 12932  014786  EC17  F0A7         	call	_Console_Init	;wreg free
 12933                           
 12934                           ;main.c: 75: HMI_Init();
 12935  01478A  EC96  F090         	call	_HMI_Init	;wreg free
 12936                           
 12937                           ;main.c: 76: LCD_Init();
 12938  01478E  EC56  F097         	call	_LCD_Init	;wreg free
 12939                           
 12940                           ;main.c: 77: if (MXK_Release())
 12941  014792  EC6F  F0B2         	call	_MXK_Release	;wreg free
 12942  014796  0900               	iorlw	0
 12943  014798  A4D8               	btfss	status,2,c
 12944                           
 12945                           ;main.c: 78: MXK_Dequeue();
 12946  01479A  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
 12947  01479E                     l2296:
 12948                           
 12949                           ;main.c: 79: }
 12950                           ;main.c: 82: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 12951  01479E  0E08               	movlw	8
 12952  0147A0  ECE0  F0AF         	call	_MXK_BlockSwitchTo
 12953  0147A4  0900               	iorlw	0
 12954  0147A6  B4D8               	btfsc	status,2,c
 12955  0147A8  D013               	goto	l2298
 12956                           
 12957                           ;main.c: 83: Motor_Init(&Stepper, 0b1000);
 12958  0147AA  0EAF               	movlw	low _Stepper
 12959  0147AC  0100               	movlb	0	; () banked
 12960  0147AE  6FE7               	movwf	Motor_Init@pMotor& (0+255),b
 12961  0147B0  0E00               	movlw	high _Stepper
 12962  0147B2  0100               	movlb	0	; () banked
 12963  0147B4  6FE8               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 12964  0147B6  0E00               	movlw	0
 12965  0147B8  0100               	movlb	0	; () banked
 12966  0147BA  6FEA               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 12967  0147BC  0E08               	movlw	8
 12968  0147BE  6FE9               	movwf	Motor_Init@pAddress& (0+255),b
 12969  0147C0  EC8B  F09E         	call	_Motor_Init	;wreg free
 12970                           
 12971                           ;main.c: 84: if (MXK_Release())
 12972  0147C4  EC6F  F0B2         	call	_MXK_Release	;wreg free
 12973  0147C8  0900               	iorlw	0
 12974  0147CA  A4D8               	btfss	status,2,c
 12975                           
 12976                           ;main.c: 85: MXK_Dequeue();
 12977  0147CC  ECC1  F0AF         	call	_MXK_Dequeue	;wreg free
 12978  0147D0                     l2298:
 12979                           
 12980                           ;main.c: 86: }
 12981                           ;main.c: 89: ADC_Init(&ADC_AN0, eADC_Ch0);
 12982  0147D0  0EB5               	movlw	low _ADC_AN0
 12983  0147D2  0100               	movlb	0	; () banked
 12984  0147D4  6FBE               	movwf	ADC_Init@pInput& (0+255),b
 12985  0147D6  0E00               	movlw	high _ADC_AN0
 12986  0147D8  0100               	movlb	0	; () banked
 12987  0147DA  6FBF               	movwf	(ADC_Init@pInput+1)& (0+255),b
 12988  0147DC  0E00               	movlw	0
 12989  0147DE  0100               	movlb	0	; () banked
 12990  0147E0  6FC0               	movwf	ADC_Init@pChannel& (0+255),b
 12991  0147E2  ECA3  F0A8         	call	_ADC_Init	;wreg free
 12992                           
 12993                           ;main.c: 90: float ADC_Voltage(ADCPtr plnput);
 12994                           ;main.c: 91: ADC_Start(&ADC_AN0);
 12995  0147E6  0EB5               	movlw	low _ADC_AN0
 12996  0147E8  0100               	movlb	0	; () banked
 12997  0147EA  6FBC               	movwf	ADC_Start@pInput& (0+255),b
 12998  0147EC  0E00               	movlw	high _ADC_AN0
 12999  0147EE  0100               	movlb	0	; () banked
 13000  0147F0  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
 13001  0147F2  ECA1  F0A7         	call	_ADC_Start	;wreg free
 13002                           
 13003                           ;main.c: 93: eusart_init();
 13004  0147F6  ECF8  F0B1         	call	_eusart_init	;wreg free
 13005                           
 13006                           ;main.c: 94: irobot_init();
 13007  0147FA  EC39  F0B3         	call	_irobot_init	;wreg free
 13008                           
 13009                           ;main.c: 96: irobot_led_power_on(0xA);
 13010  0147FE  0E0A               	movlw	10
 13011  014800  EC61  F0B2         	call	_irobot_led_power_on
 13012                           
 13013                           ;main.c: 97: irobot_init_song_0();
 13014  014804  ECD9  F0B1         	call	_irobot_init_song_0	;wreg free
 13015                           
 13016                           ;main.c: 98: delay_ms(20);
 13017  014808  0E00               	movlw	0
 13018  01480A  0100               	movlb	0	; () banked
 13019  01480C  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 13020  01480E  0E14               	movlw	20
 13021  014810  6FBA               	movwf	delay_ms@ms& (0+255),b
 13022  014812  EC18  F0AB         	call	_delay_ms	;wreg free
 13023  014816  0012               	return		;funcret
 13024  014818                     __end_of_init:
 13025                           	opt stack 0
 13026                           tblptru	equ	0xFF8
 13027                           tblptrh	equ	0xFF7
 13028                           tblptrl	equ	0xFF6
 13029                           tablat	equ	0xFF5
 13030                           prodh	equ	0xFF4
 13031                           prodl	equ	0xFF3
 13032                           intcon	equ	0xFF2
 13033                           postinc0	equ	0xFEE
 13034                           wreg	equ	0xFE8
 13035                           postdec1	equ	0xFE5
 13036                           fsr1h	equ	0xFE2
 13037                           fsr1l	equ	0xFE1
 13038                           indf2	equ	0xFDF
 13039                           postinc2	equ	0xFDE
 13040                           postdec2	equ	0xFDD
 13041                           fsr2h	equ	0xFDA
 13042                           fsr2l	equ	0xFD9
 13043                           status	equ	0xFD8
 13044                           
 13045 ;; *************** function _irobot_led_power_on *****************
 13046 ;; Defined at:
 13047 ;;		line 293 in file "Library/iRobotSerial.c"
 13048 ;; Parameters:    Size  Location     Type
 13049 ;;  powerOnColou    1    wreg     unsigned char 
 13050 ;; Auto vars:     Size  Location     Type
 13051 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 13052 ;; Return value:  Size  Location     Type
 13053 ;;                  1    wreg      void 
 13054 ;; Registers used:
 13055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13056 ;; Tracked objects:
 13057 ;;		On entry : 0/0
 13058 ;;		On exit  : 0/0
 13059 ;;		Unchanged: 0/0
 13060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13064 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;Total ram usage:        1 bytes
 13066 ;; Hardware stack levels used:    1
 13067 ;; Hardware stack levels required when called:    9
 13068 ;; This function calls:
 13069 ;;		_irobot_leds
 13070 ;; This function is called by:
 13071 ;;		_init
 13072 ;; This function uses a non-reentrant model
 13073 ;;
 13074                           
 13075                           	psect	text50
 13076  0164C2                     __ptext50:
 13077                           	opt stack 0
 13078  0164C2                     _irobot_led_power_on:
 13079                           	opt stack 20
 13080                           
 13081                           ;incstack = 0
 13082                           ;irobot_led_power_on@powerOnColour stored from wreg
 13083  0164C2  0100               	movlb	0	; () banked
 13084  0164C4  6FCE               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 13085                           
 13086                           ;iRobotSerial.c: 294: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 13087  0164C6  0E00               	movlw	0
 13088  0164C8  0100               	movlb	0	; () banked
 13089  0164CA  6FCA               	movwf	irobot_leds@LEDBit& (0+255),b
 13090  0164CC  C0CE  F0CB         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 13091  0164D0  0EFF               	movlw	255
 13092  0164D2  0100               	movlb	0	; () banked
 13093  0164D4  6FCC               	movwf	irobot_leds@powerLuminosity& (0+255),b
 13094  0164D6  0E00               	movlw	0
 13095  0164D8  EC09  F0AD         	call	_irobot_leds
 13096  0164DC  0012               	return		;funcret
 13097  0164DE                     __end_of_irobot_led_power_on:
 13098                           	opt stack 0
 13099                           tblptru	equ	0xFF8
 13100                           tblptrh	equ	0xFF7
 13101                           tblptrl	equ	0xFF6
 13102                           tablat	equ	0xFF5
 13103                           prodh	equ	0xFF4
 13104                           prodl	equ	0xFF3
 13105                           intcon	equ	0xFF2
 13106                           postinc0	equ	0xFEE
 13107                           wreg	equ	0xFE8
 13108                           postdec1	equ	0xFE5
 13109                           fsr1h	equ	0xFE2
 13110                           fsr1l	equ	0xFE1
 13111                           indf2	equ	0xFDF
 13112                           postinc2	equ	0xFDE
 13113                           postdec2	equ	0xFDD
 13114                           fsr2h	equ	0xFDA
 13115                           fsr2l	equ	0xFD9
 13116                           status	equ	0xFD8
 13117                           
 13118 ;; *************** function _irobot_leds *****************
 13119 ;; Defined at:
 13120 ;;		line 239 in file "Library/iRobotSerial.c"
 13121 ;; Parameters:    Size  Location     Type
 13122 ;;  isScript        1    wreg     unsigned char 
 13123 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 13124 ;;  powerColour     1   17[BANK0 ] unsigned char 
 13125 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 13126 ;; Auto vars:     Size  Location     Type
 13127 ;;  isScript        1   19[BANK0 ] unsigned char 
 13128 ;; Return value:  Size  Location     Type
 13129 ;;                  1    wreg      void 
 13130 ;; Registers used:
 13131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13132 ;; Tracked objects:
 13133 ;;		On entry : 0/0
 13134 ;;		On exit  : 0/0
 13135 ;;		Unchanged: 0/0
 13136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13137 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13140 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13141 ;;Total ram usage:        4 bytes
 13142 ;; Hardware stack levels used:    1
 13143 ;; Hardware stack levels required when called:    8
 13144 ;; This function calls:
 13145 ;;		_eusart_putch
 13146 ;;		_load_iRScriptStack
 13147 ;; This function is called by:
 13148 ;;		_irobot_led_power_on
 13149 ;;		_irobot_led_power_off
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153                           	psect	text51
 13154  015A12                     __ptext51:
 13155                           	opt stack 0
 13156  015A12                     _irobot_leds:
 13157                           	opt stack 20
 13158                           
 13159                           ;incstack = 0
 13160                           ;irobot_leds@isScript stored from wreg
 13161  015A12  0100               	movlb	0	; () banked
 13162  015A14  6FCD               	movwf	irobot_leds@isScript& (0+255),b
 13163                           
 13164                           ;iRobotSerial.c: 240: if (isScript){
 13165  015A16  0100               	movlb	0	; () banked
 13166  015A18  51CD               	movf	irobot_leds@isScript& (0+255),w,b
 13167  015A1A  0100               	movlb	0	; () banked
 13168  015A1C  B4D8               	btfsc	status,2,c
 13169  015A1E  D015               	goto	l2140
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 13173                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 13174  015A20  0E00               	movlw	0
 13175  015A22  0100               	movlb	0	; () banked
 13176  015A24  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 13177  015A26  0E8B               	movlw	139
 13178  015A28  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
 13179  015A2A  C0CA  F0BC         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 13180  015A2E  0100               	movlb	0	; () banked
 13181  015A30  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 13182  015A32  C0CB  F0BE         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 13183  015A36  0100               	movlb	0	; () banked
 13184  015A38  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 13185  015A3A  C0CC  F0C0         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 13186  015A3E  0100               	movlb	0	; () banked
 13187  015A40  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 13188  015A42  0E04               	movlw	4
 13189  015A44  ECE3  F0AA         	call	_load_iRScriptStack
 13190                           
 13191                           ;iRobotSerial.c: 243: }
 13192  015A48  0012               	return	
 13193  015A4A                     l2140:
 13194                           
 13195                           ;iRobotSerial.c: 244: else{
 13196                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 13197  015A4A  0E8B               	movlw	139
 13198  015A4C  EC40  F0B3         	call	_eusart_putch
 13199                           
 13200                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 13201  015A50  0100               	movlb	0	; () banked
 13202  015A52  51CA               	movf	irobot_leds@LEDBit& (0+255),w,b
 13203  015A54  EC40  F0B3         	call	_eusart_putch
 13204                           
 13205                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 13206  015A58  0100               	movlb	0	; () banked
 13207  015A5A  51CB               	movf	irobot_leds@powerColour& (0+255),w,b
 13208  015A5C  EC40  F0B3         	call	_eusart_putch
 13209                           
 13210                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 13211  015A60  0100               	movlb	0	; () banked
 13212  015A62  51CC               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 13213  015A64  EC40  F0B3         	call	_eusart_putch
 13214  015A68  0012               	return	
 13215  015A6A                     __end_of_irobot_leds:
 13216                           	opt stack 0
 13217                           tblptru	equ	0xFF8
 13218                           tblptrh	equ	0xFF7
 13219                           tblptrl	equ	0xFF6
 13220                           tablat	equ	0xFF5
 13221                           prodh	equ	0xFF4
 13222                           prodl	equ	0xFF3
 13223                           intcon	equ	0xFF2
 13224                           postinc0	equ	0xFEE
 13225                           wreg	equ	0xFE8
 13226                           postdec1	equ	0xFE5
 13227                           fsr1h	equ	0xFE2
 13228                           fsr1l	equ	0xFE1
 13229                           indf2	equ	0xFDF
 13230                           postinc2	equ	0xFDE
 13231                           postdec2	equ	0xFDD
 13232                           fsr2h	equ	0xFDA
 13233                           fsr2l	equ	0xFD9
 13234                           status	equ	0xFD8
 13235                           
 13236 ;; *************** function _load_iRScriptStack *****************
 13237 ;; Defined at:
 13238 ;;		line 176 in file "Library/iRobotSerial.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;  bytesToLoad     1    wreg     unsigned char 
 13241 ;; Auto vars:     Size  Location     Type
 13242 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 13243 ;;  i               1   15[BANK0 ] unsigned char 
 13244 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 13245 ;;		 -> ?_load_iRScriptStack(1), 
 13246 ;; Return value:  Size  Location     Type
 13247 ;;                  1    wreg      void 
 13248 ;; Registers used:
 13249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13255 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13256 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13257 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13258 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13259 ;;Total ram usage:       16 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    7
 13262 ;; This function calls:
 13263 ;;		Nothing
 13264 ;; This function is called by:
 13265 ;;		_irobot_move
 13266 ;;		_irobot_leds
 13267 ;;		_irobot_angle_wait
 13268 ;;		_irobot_distance_wait
 13269 ;; This function uses a non-reentrant model
 13270 ;;
 13271                           
 13272                           	psect	text52
 13273  0155C6                     __ptext52:
 13274                           	opt stack 0
 13275  0155C6                     _load_iRScriptStack:
 13276                           	opt stack 19
 13277                           
 13278                           ;incstack = 0
 13279                           ;load_iRScriptStack@bytesToLoad stored from wreg
 13280  0155C6  0100               	movlb	0	; () banked
 13281  0155C8  6FC8               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 13282                           
 13283                           ;iRobotSerial.c: 177: va_list loadByte;
 13284                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 13285  0155CA  0EBA               	movlw	low ?_load_iRScriptStack
 13286  0155CC  0100               	movlb	0	; () banked
 13287  0155CE  6FC6               	movwf	load_iRScriptStack@loadByte& (0+255),b
 13288  0155D0  0E00               	movlw	high ?_load_iRScriptStack
 13289  0155D2  0100               	movlb	0	; () banked
 13290  0155D4  6FC7               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 13291                           
 13292                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++){
 13293  0155D6  0E00               	movlw	0
 13294  0155D8  0100               	movlb	0	; () banked
 13295  0155DA  6FC9               	movwf	load_iRScriptStack@i& (0+255),b
 13296  0155DC  D01F               	goto	l2114
 13297  0155DE                     
 13298                           ; BSR set to: 0
 13299                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 13300                           
 13301                           ; BSR set to: 0
 13302  0155DE  C0C6  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 13303  0155E2  C0C7  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 13304  0155E6  0100               	movlb	0	; () banked
 13305  0155E8  51C9               	movf	load_iRScriptStack@i& (0+255),w,b
 13306  0155EA  C037  F0C4         	movff	_iRScriptIndex,??_load_iRScriptStack
 13307  0155EE  0100               	movlb	0	; () banked
 13308  0155F0  6BC5               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 13309  0155F2  0100               	movlb	0	; () banked
 13310  0155F4  27C4               	addwf	??_load_iRScriptStack& (0+255),f,b
 13311  0155F6  0E00               	movlw	0
 13312  0155F8  23C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 13313  0155FA  0E00               	movlw	low _iRScriptStack
 13314  0155FC  0100               	movlb	0	; () banked
 13315  0155FE  25C4               	addwf	??_load_iRScriptStack& (0+255),w,b
 13316  015600  6EE1               	movwf	fsr1l,c
 13317  015602  0E04               	movlw	high _iRScriptStack
 13318  015604  0100               	movlb	0	; () banked
 13319  015606  21C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 13320  015608  6EE2               	movwf	fsr1h,c
 13321  01560A  CFDF FFE7          	movff	indf2,indf1
 13322                           
 13323                           ; BSR set to: 0
 13324  01560E  0E02               	movlw	2
 13325  015610  0100               	movlb	0	; () banked
 13326  015612  27C6               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 13327  015614  0E00               	movlw	0
 13328  015616  23C7               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 13329                           
 13330                           ; BSR set to: 0
 13331  015618  0100               	movlb	0	; () banked
 13332  01561A  2BC9               	incf	load_iRScriptStack@i& (0+255),f,b
 13333  01561C                     l2114:
 13334                           
 13335                           ; BSR set to: 0
 13336                           
 13337                           ; BSR set to: 0
 13338  01561C  0100               	movlb	0	; () banked
 13339  01561E  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13340  015620  0100               	movlb	0	; () banked
 13341  015622  5DC9               	subwf	load_iRScriptStack@i& (0+255),w,b
 13342  015624  A0D8               	btfss	status,0,c
 13343  015626  D7DB               	goto	l2115
 13344                           
 13345                           ; BSR set to: 0
 13346                           ;iRobotSerial.c: 181: }
 13347                           ;iRobotSerial.c: 182: ;
 13348                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 13349                           
 13350                           ; BSR set to: 0
 13351  015628  0100               	movlb	0	; () banked
 13352  01562A  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13353  01562C  2637               	addwf	_iRScriptIndex,f,c
 13354                           
 13355                           ; BSR set to: 0
 13356  01562E  0012               	return		;funcret
 13357  015630                     __end_of_load_iRScriptStack:
 13358                           	opt stack 0
 13359                           tblptru	equ	0xFF8
 13360                           tblptrh	equ	0xFF7
 13361                           tblptrl	equ	0xFF6
 13362                           tablat	equ	0xFF5
 13363                           prodh	equ	0xFF4
 13364                           prodl	equ	0xFF3
 13365                           intcon	equ	0xFF2
 13366                           postinc0	equ	0xFEE
 13367                           wreg	equ	0xFE8
 13368                           indf1	equ	0xFE7
 13369                           postdec1	equ	0xFE5
 13370                           fsr1h	equ	0xFE2
 13371                           fsr1l	equ	0xFE1
 13372                           indf2	equ	0xFDF
 13373                           postinc2	equ	0xFDE
 13374                           postdec2	equ	0xFDD
 13375                           fsr2h	equ	0xFDA
 13376                           fsr2l	equ	0xFD9
 13377                           status	equ	0xFD8
 13378                           
 13379 ;; *************** function _irobot_init_song_0 *****************
 13380 ;; Defined at:
 13381 ;;		line 252 in file "Library/iRobotSerial.c"
 13382 ;; Parameters:    Size  Location     Type
 13383 ;;		None
 13384 ;; Auto vars:     Size  Location     Type
 13385 ;;		None
 13386 ;; Return value:  Size  Location     Type
 13387 ;;                  1    wreg      void 
 13388 ;; Registers used:
 13389 ;;		wreg, cstack
 13390 ;; Tracked objects:
 13391 ;;		On entry : 0/0
 13392 ;;		On exit  : 0/0
 13393 ;;		Unchanged: 0/0
 13394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13399 ;;Total ram usage:        0 bytes
 13400 ;; Hardware stack levels used:    1
 13401 ;; Hardware stack levels required when called:    8
 13402 ;; This function calls:
 13403 ;;		_eusart_putch
 13404 ;; This function is called by:
 13405 ;;		_init
 13406 ;; This function uses a non-reentrant model
 13407 ;;
 13408                           
 13409                           	psect	text53
 13410  0163B2                     __ptext53:
 13411                           	opt stack 0
 13412  0163B2                     _irobot_init_song_0:
 13413                           	opt stack 21
 13414                           
 13415                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 13416                           
 13417                           ; BSR set to: 0
 13418                           ;incstack = 0
 13419  0163B2  0E8C               	movlw	140
 13420  0163B4  EC40  F0B3         	call	_eusart_putch
 13421                           
 13422                           ;iRobotSerial.c: 254: eusart_putch(0);
 13423  0163B8  0E00               	movlw	0
 13424  0163BA  EC40  F0B3         	call	_eusart_putch
 13425                           
 13426                           ;iRobotSerial.c: 255: eusart_putch(1);
 13427  0163BE  0E01               	movlw	1
 13428  0163C0  EC40  F0B3         	call	_eusart_putch
 13429                           
 13430                           ;iRobotSerial.c: 256: eusart_putch(60);
 13431  0163C4  0E3C               	movlw	60
 13432  0163C6  EC40  F0B3         	call	_eusart_putch
 13433                           
 13434                           ;iRobotSerial.c: 257: eusart_putch(4);
 13435  0163CA  0E04               	movlw	4
 13436  0163CC  EC40  F0B3         	call	_eusart_putch
 13437  0163D0  0012               	return		;funcret
 13438  0163D2                     __end_of_irobot_init_song_0:
 13439                           	opt stack 0
 13440                           tblptru	equ	0xFF8
 13441                           tblptrh	equ	0xFF7
 13442                           tblptrl	equ	0xFF6
 13443                           tablat	equ	0xFF5
 13444                           prodh	equ	0xFF4
 13445                           prodl	equ	0xFF3
 13446                           intcon	equ	0xFF2
 13447                           postinc0	equ	0xFEE
 13448                           wreg	equ	0xFE8
 13449                           indf1	equ	0xFE7
 13450                           postdec1	equ	0xFE5
 13451                           fsr1h	equ	0xFE2
 13452                           fsr1l	equ	0xFE1
 13453                           indf2	equ	0xFDF
 13454                           postinc2	equ	0xFDE
 13455                           postdec2	equ	0xFDD
 13456                           fsr2h	equ	0xFDA
 13457                           fsr2l	equ	0xFD9
 13458                           status	equ	0xFD8
 13459                           
 13460 ;; *************** function _irobot_init *****************
 13461 ;; Defined at:
 13462 ;;		line 198 in file "Library/iRobotSerial.c"
 13463 ;; Parameters:    Size  Location     Type
 13464 ;;		None
 13465 ;; Auto vars:     Size  Location     Type
 13466 ;;		None
 13467 ;; Return value:  Size  Location     Type
 13468 ;;                  1    wreg      void 
 13469 ;; Registers used:
 13470 ;;		wreg, cstack
 13471 ;; Tracked objects:
 13472 ;;		On entry : 0/0
 13473 ;;		On exit  : 0/0
 13474 ;;		Unchanged: 0/0
 13475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13480 ;;Total ram usage:        0 bytes
 13481 ;; Hardware stack levels used:    1
 13482 ;; Hardware stack levels required when called:    8
 13483 ;; This function calls:
 13484 ;;		_eusart_putch
 13485 ;; This function is called by:
 13486 ;;		_init
 13487 ;; This function uses a non-reentrant model
 13488 ;;
 13489                           
 13490                           	psect	text54
 13491  016672                     __ptext54:
 13492                           	opt stack 0
 13493  016672                     _irobot_init:
 13494                           	opt stack 21
 13495                           
 13496                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 13497                           
 13498                           ;incstack = 0
 13499  016672  0E80               	movlw	128
 13500  016674  EC40  F0B3         	call	_eusart_putch
 13501                           
 13502                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 13503  016678  0E84               	movlw	132
 13504  01667A  EC40  F0B3         	call	_eusart_putch
 13505  01667E  0012               	return		;funcret
 13506  016680                     __end_of_irobot_init:
 13507                           	opt stack 0
 13508                           tblptru	equ	0xFF8
 13509                           tblptrh	equ	0xFF7
 13510                           tblptrl	equ	0xFF6
 13511                           tablat	equ	0xFF5
 13512                           prodh	equ	0xFF4
 13513                           prodl	equ	0xFF3
 13514                           intcon	equ	0xFF2
 13515                           postinc0	equ	0xFEE
 13516                           wreg	equ	0xFE8
 13517                           indf1	equ	0xFE7
 13518                           postdec1	equ	0xFE5
 13519                           fsr1h	equ	0xFE2
 13520                           fsr1l	equ	0xFE1
 13521                           indf2	equ	0xFDF
 13522                           postinc2	equ	0xFDE
 13523                           postdec2	equ	0xFDD
 13524                           fsr2h	equ	0xFDA
 13525                           fsr2l	equ	0xFD9
 13526                           status	equ	0xFD8
 13527                           
 13528 ;; *************** function _eusart_putch *****************
 13529 ;; Defined at:
 13530 ;;		line 120 in file "Library/iRobotSerial.c"
 13531 ;; Parameters:    Size  Location     Type
 13532 ;;  eusartSendCh    1    wreg     unsigned char 
 13533 ;; Auto vars:     Size  Location     Type
 13534 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13535 ;; Return value:  Size  Location     Type
 13536 ;;                  1    wreg      void 
 13537 ;; Registers used:
 13538 ;;		wreg
 13539 ;; Tracked objects:
 13540 ;;		On entry : 0/0
 13541 ;;		On exit  : 0/0
 13542 ;;		Unchanged: 0/0
 13543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13548 ;;Total ram usage:        1 bytes
 13549 ;; Hardware stack levels used:    1
 13550 ;; Hardware stack levels required when called:    7
 13551 ;; This function calls:
 13552 ;;		Nothing
 13553 ;; This function is called by:
 13554 ;;		_irobot_query_and_update
 13555 ;;		_irobot_init
 13556 ;;		_irobot_move
 13557 ;;		_irobot_leds
 13558 ;;		_irobot_init_song_0
 13559 ;;		_irobot_song_play
 13560 ;;		_irobot_script_play
 13561 ;; This function uses a non-reentrant model
 13562 ;;
 13563                           
 13564                           	psect	text55
 13565  016680                     __ptext55:
 13566                           	opt stack 0
 13567  016680                     _eusart_putch:
 13568                           	opt stack 20
 13569                           
 13570                           ;incstack = 0
 13571                           ;eusart_putch@eusartSendChar stored from wreg
 13572  016680  0100               	movlb	0	; () banked
 13573  016682  6FBA               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13574  016684                     
 13575                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 13576  016684  A2AD               	btfss	4013,1,c	;volatile
 13577  016686  D7FE               	goto	l12973
 13578                           
 13579                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 13580  016688  C0BA  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13581  01668C  0012               	return		;funcret
 13582  01668E                     __end_of_eusart_putch:
 13583                           	opt stack 0
 13584                           tblptru	equ	0xFF8
 13585                           tblptrh	equ	0xFF7
 13586                           tblptrl	equ	0xFF6
 13587                           tablat	equ	0xFF5
 13588                           prodh	equ	0xFF4
 13589                           prodl	equ	0xFF3
 13590                           intcon	equ	0xFF2
 13591                           postinc0	equ	0xFEE
 13592                           wreg	equ	0xFE8
 13593                           indf1	equ	0xFE7
 13594                           postdec1	equ	0xFE5
 13595                           fsr1h	equ	0xFE2
 13596                           fsr1l	equ	0xFE1
 13597                           indf2	equ	0xFDF
 13598                           postinc2	equ	0xFDE
 13599                           postdec2	equ	0xFDD
 13600                           fsr2h	equ	0xFDA
 13601                           fsr2l	equ	0xFD9
 13602                           status	equ	0xFD8
 13603                           
 13604 ;; *************** function _eusart_init *****************
 13605 ;; Defined at:
 13606 ;;		line 103 in file "Library/iRobotSerial.c"
 13607 ;; Parameters:    Size  Location     Type
 13608 ;;		None
 13609 ;; Auto vars:     Size  Location     Type
 13610 ;;		None
 13611 ;; Return value:  Size  Location     Type
 13612 ;;                  1    wreg      void 
 13613 ;; Registers used:
 13614 ;;		wreg, status,2
 13615 ;; Tracked objects:
 13616 ;;		On entry : 0/0
 13617 ;;		On exit  : 0/0
 13618 ;;		Unchanged: 0/0
 13619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13624 ;;Total ram usage:        0 bytes
 13625 ;; Hardware stack levels used:    1
 13626 ;; Hardware stack levels required when called:    7
 13627 ;; This function calls:
 13628 ;;		Nothing
 13629 ;; This function is called by:
 13630 ;;		_init
 13631 ;; This function uses a non-reentrant model
 13632 ;;
 13633                           
 13634                           	psect	text56
 13635  0163F0                     __ptext56:
 13636                           	opt stack 0
 13637  0163F0                     _eusart_init:
 13638                           	opt stack 22
 13639                           
 13640                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 13641                           
 13642                           ;incstack = 0
 13643  0163F0  9C94               	bcf	3988,6,c	;volatile
 13644                           
 13645                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 13646  0163F2  8E94               	bsf	3988,7,c	;volatile
 13647                           
 13648                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 13649  0163F4  0E24               	movlw	36
 13650  0163F6  6EAD               	movwf	4013,c	;volatile
 13651                           
 13652                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 13653  0163F8  0E98               	movlw	152
 13654  0163FA  6EAC               	movwf	4012,c	;volatile
 13655                           
 13656                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 13657  0163FC  9A7E               	bcf	3966,5,c	;volatile
 13658                           
 13659                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 13660  0163FE  987E               	bcf	3966,4,c	;volatile
 13661                           
 13662                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 13663  016400  927E               	bcf	3966,1,c	;volatile
 13664                           
 13665                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 13666  016402  907E               	bcf	3966,0,c	;volatile
 13667                           
 13668                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 13669  016404  84AD               	bsf	4013,2,c	;volatile
 13670                           
 13671                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 13672  016406  967E               	bcf	3966,3,c	;volatile
 13673                           
 13674                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 13675  016408  0E33               	movlw	51
 13676  01640A  6EB0               	movwf	4016,c	;volatile
 13677  01640C  0012               	return		;funcret
 13678  01640E                     __end_of_eusart_init:
 13679                           	opt stack 0
 13680                           tblptru	equ	0xFF8
 13681                           tblptrh	equ	0xFF7
 13682                           tblptrl	equ	0xFF6
 13683                           tablat	equ	0xFF5
 13684                           prodh	equ	0xFF4
 13685                           prodl	equ	0xFF3
 13686                           intcon	equ	0xFF2
 13687                           postinc0	equ	0xFEE
 13688                           wreg	equ	0xFE8
 13689                           indf1	equ	0xFE7
 13690                           postdec1	equ	0xFE5
 13691                           fsr1h	equ	0xFE2
 13692                           fsr1l	equ	0xFE1
 13693                           indf2	equ	0xFDF
 13694                           postinc2	equ	0xFDE
 13695                           postdec2	equ	0xFDD
 13696                           fsr2h	equ	0xFDA
 13697                           fsr2l	equ	0xFD9
 13698                           status	equ	0xFD8
 13699                           
 13700 ;; *************** function _Motor_Init *****************
 13701 ;; Defined at:
 13702 ;;		line 26 in file "Library/Motor.c"
 13703 ;; Parameters:    Size  Location     Type
 13704 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 13705 ;;		 -> Stepper(6), 
 13706 ;;  pAddress        2   47[BANK0 ] unsigned short 
 13707 ;; Auto vars:     Size  Location     Type
 13708 ;;		None
 13709 ;; Return value:  Size  Location     Type
 13710 ;;                  1    wreg      void 
 13711 ;; Registers used:
 13712 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13713 ;; Tracked objects:
 13714 ;;		On entry : 0/0
 13715 ;;		On exit  : 0/0
 13716 ;;		Unchanged: 0/0
 13717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13718 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13721 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13722 ;;Total ram usage:        4 bytes
 13723 ;; Hardware stack levels used:    1
 13724 ;; Hardware stack levels required when called:   12
 13725 ;; This function calls:
 13726 ;;		_Port_SetPin
 13727 ;;		_Port_SetPinType
 13728 ;;		_Timer0_Init
 13729 ;; This function is called by:
 13730 ;;		_init
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           	psect	text57
 13735  013D16                     __ptext57:
 13736                           	opt stack 0
 13737  013D16                     _Motor_Init:
 13738                           	opt stack 17
 13739                           
 13740                           ;Motor.c: 28: pMotor->mDelta = 0;
 13741                           
 13742                           ;incstack = 0
 13743  013D16  C0E7  FFD9         	movff	Motor_Init@pMotor,fsr2l
 13744  013D1A  C0E8  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 13745  013D1E  0E00               	movlw	0
 13746  013D20  6EDE               	movwf	postinc2,c
 13747  013D22  0E00               	movlw	0
 13748  013D24  6EDD               	movwf	postdec2,c
 13749                           
 13750                           ;Motor.c: 29: pMotor->mFrequency = 0;
 13751  013D26  0100               	movlb	0	; () banked
 13752  013D28  EE20 F002          	lfsr	2,2
 13753  013D2C  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13754  013D2E  26D9               	addwf	fsr2l,f,c
 13755  013D30  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13756  013D32  22DA               	addwfc	fsr2h,f,c
 13757  013D34  0E00               	movlw	0
 13758  013D36  6EDE               	movwf	postinc2,c
 13759  013D38  0E00               	movlw	0
 13760  013D3A  6EDD               	movwf	postdec2,c
 13761                           
 13762                           ; BSR set to: 0
 13763                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 13764  013D3C  0100               	movlb	0	; () banked
 13765  013D3E  EE20 F004          	lfsr	2,4
 13766  013D42  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13767  013D44  26D9               	addwf	fsr2l,f,c
 13768  013D46  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13769  013D48  22DA               	addwfc	fsr2h,f,c
 13770  013D4A  C0E9  FFDE         	movff	Motor_Init@pAddress,postinc2
 13771  013D4E  C0EA  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 13772                           
 13773                           ; BSR set to: 0
 13774                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 13775  013D52  0E91               	movlw	low _PortE
 13776  013D54  0100               	movlb	0	; () banked
 13777  013D56  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13778  013D58  0E00               	movlw	high _PortE
 13779  013D5A  0100               	movlb	0	; () banked
 13780  013D5C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13781  013D5E  0E00               	movlw	0
 13782  013D60  0100               	movlb	0	; () banked
 13783  013D62  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13784  013D64  0E03               	movlw	3
 13785  013D66  0100               	movlb	0	; () banked
 13786  013D68  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13787  013D6A  EC5B  F093         	call	_Port_SetPinType	;wreg free
 13788                           
 13789                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 13790  013D6E  0E91               	movlw	low _PortE
 13791  013D70  0100               	movlb	0	; () banked
 13792  013D72  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13793  013D74  0E00               	movlw	high _PortE
 13794  013D76  0100               	movlb	0	; () banked
 13795  013D78  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13796  013D7A  0E01               	movlw	1
 13797  013D7C  0100               	movlb	0	; () banked
 13798  013D7E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13799  013D80  0E03               	movlw	3
 13800  013D82  0100               	movlb	0	; () banked
 13801  013D84  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13802  013D86  EC5B  F093         	call	_Port_SetPinType	;wreg free
 13803                           
 13804                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 13805  013D8A  0E91               	movlw	low _PortE
 13806  013D8C  0100               	movlb	0	; () banked
 13807  013D8E  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13808  013D90  0E00               	movlw	high _PortE
 13809  013D92  0100               	movlb	0	; () banked
 13810  013D94  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13811  013D96  0E00               	movlw	0
 13812  013D98  0100               	movlb	0	; () banked
 13813  013D9A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13814  013D9C  0E00               	movlw	0
 13815  013D9E  0100               	movlb	0	; () banked
 13816  013DA0  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13817  013DA2  ECC8  F09F         	call	_Port_SetPin	;wreg free
 13818                           
 13819                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 13820  013DA6  0E91               	movlw	low _PortE
 13821  013DA8  0100               	movlb	0	; () banked
 13822  013DAA  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13823  013DAC  0E00               	movlw	high _PortE
 13824  013DAE  0100               	movlb	0	; () banked
 13825  013DB0  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13826  013DB2  0E01               	movlw	1
 13827  013DB4  0100               	movlb	0	; () banked
 13828  013DB6  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13829  013DB8  0E00               	movlw	0
 13830  013DBA  0100               	movlb	0	; () banked
 13831  013DBC  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13832  013DBE  ECC8  F09F         	call	_Port_SetPin	;wreg free
 13833                           
 13834                           ;Motor.c: 38: lStepFunction = Motor_Step;
 13835  013DC2  0E7E               	movlw	low _Motor_Step
 13836  013DC4  0100               	movlb	0	; () banked
 13837  013DC6  6F66               	movwf	_lStepFunction& (0+255),b
 13838  013DC8  0E35               	movlw	high _Motor_Step
 13839  013DCA  0100               	movlb	0	; () banked
 13840  013DCC  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 13841  013DCE  0E01               	movlw	low (_Motor_Step shr (0+16))
 13842  013DD0  0100               	movlb	0	; () banked
 13843  013DD2  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 13844                           
 13845                           ; BSR set to: 0
 13846                           ;Motor.c: 39: Timer0_Init(1000);
 13847  013DD4  0EE8               	movlw	232
 13848  013DD6  0100               	movlb	0	; () banked
 13849  013DD8  6FC7               	movwf	Timer0_Init@pFrequency& (0+255),b
 13850  013DDA  0E03               	movlw	3
 13851  013DDC  6FC8               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 13852  013DDE  0E00               	movlw	0
 13853  013DE0  6FC9               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 13854  013DE2  0E00               	movlw	0
 13855  013DE4  6FCA               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 13856  013DE6  ECC2  F098         	call	_Timer0_Init	;wreg free
 13857  013DEA  0012               	return		;funcret
 13858  013DEC                     __end_of_Motor_Init:
 13859                           	opt stack 0
 13860                           tblptru	equ	0xFF8
 13861                           tblptrh	equ	0xFF7
 13862                           tblptrl	equ	0xFF6
 13863                           tablat	equ	0xFF5
 13864                           prodh	equ	0xFF4
 13865                           prodl	equ	0xFF3
 13866                           intcon	equ	0xFF2
 13867                           postinc0	equ	0xFEE
 13868                           wreg	equ	0xFE8
 13869                           indf1	equ	0xFE7
 13870                           postdec1	equ	0xFE5
 13871                           fsr1h	equ	0xFE2
 13872                           fsr1l	equ	0xFE1
 13873                           indf2	equ	0xFDF
 13874                           postinc2	equ	0xFDE
 13875                           postdec2	equ	0xFDD
 13876                           fsr2h	equ	0xFDA
 13877                           fsr2l	equ	0xFD9
 13878                           status	equ	0xFD8
 13879                           
 13880 ;; *************** function _Timer0_Init *****************
 13881 ;; Defined at:
 13882 ;;		line 25 in file "Library/Timer0.c"
 13883 ;; Parameters:    Size  Location     Type
 13884 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13885 ;; Auto vars:     Size  Location     Type
 13886 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 13887 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 13888 ;; Return value:  Size  Location     Type
 13889 ;;                  1    wreg      void 
 13890 ;; Registers used:
 13891 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13892 ;; Tracked objects:
 13893 ;;		On entry : 0/0
 13894 ;;		On exit  : 0/0
 13895 ;;		Unchanged: 0/0
 13896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13897 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13898 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13900 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13901 ;;Total ram usage:       14 bytes
 13902 ;; Hardware stack levels used:    1
 13903 ;; Hardware stack levels required when called:    8
 13904 ;; This function calls:
 13905 ;;		_Timer0_Clear
 13906 ;;		___lldiv
 13907 ;; This function is called by:
 13908 ;;		_Motor_Init
 13909 ;;		_Motor_Speed
 13910 ;; This function uses a non-reentrant model
 13911 ;;
 13912                           
 13913                           	psect	text58
 13914  013184                     __ptext58:
 13915                           	opt stack 0
 13916  013184                     _Timer0_Init:
 13917                           	opt stack 19
 13918                           
 13919                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 13920                           
 13921                           ;incstack = 0
 13922  013184  0E80               	movlw	128
 13923  013186  0100               	movlb	0	; () banked
 13924  013188  6FCD               	movwf	Timer0_Init@pCPUClock& (0+255),b
 13925  01318A  0E8D               	movlw	141
 13926  01318C  6FCE               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 13927  01318E  0E5B               	movlw	91
 13928  013190  6FCF               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 13929  013192  0E00               	movlw	0
 13930  013194  6FD0               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 13931                           
 13932                           ; BSR set to: 0
 13933                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 13934                           ;Timer0.c: 31: static UINT8 PRE = 0;
 13935                           ;Timer0.c: 32: static UINT32 DIV = 0;
 13936                           ;Timer0.c: 34: UINT32 DIVIDE;
 13937                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 13938  013196  9ED5               	bcf	4053,7,c	;volatile
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;Timer0.c: 38: if (pFrequency == 0)
 13942  013198  0100               	movlb	0	; () banked
 13943  01319A  51C7               	movf	Timer0_Init@pFrequency& (0+255),w,b
 13944  01319C  0100               	movlb	0	; () banked
 13945  01319E  11C8               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 13946  0131A0  0100               	movlb	0	; () banked
 13947  0131A2  11C9               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 13948  0131A4  0100               	movlb	0	; () banked
 13949  0131A6  11CA               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 13950  0131A8  B4D8               	btfsc	status,2,c
 13951  0131AA  0012               	return	
 13952                           
 13953                           ; BSR set to: 0
 13954                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 13955                           
 13956                           ; BSR set to: 0
 13957                           ;Timer0.c: 39: return;
 13958  0131AC  96D5               	bcf	4053,3,c	;volatile
 13959                           
 13960                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 13961  0131AE  9CD5               	bcf	4053,6,c	;volatile
 13962                           
 13963                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 13964  0131B0  9AD5               	bcf	4053,5,c	;volatile
 13965                           
 13966                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 13967  0131B2  98D5               	bcf	4053,4,c	;volatile
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 13971  0131B4  C0CD  F0BA         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 13972  0131B8  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 13973  0131BC  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 13974  0131C0  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 13975  0131C4  C0C7  F0BE         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 13976  0131C8  C0C8  F0BF         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 13977  0131CC  C0C9  F0C0         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 13978  0131D0  C0CA  F0C1         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 13979  0131D4  EC4A  F0A1         	call	___lldiv	;wreg free
 13980  0131D8  C0BA  F0D1         	movff	?___lldiv,Timer0_Init@DIVIDE
 13981  0131DC  C0BB  F0D2         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 13982  0131E0  C0BC  F0D3         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 13983  0131E4  C0BD  F0D4         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 13984                           
 13985                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 13986  0131E8  D00C               	goto	l1787
 13987  0131EA                     l13421:
 13988                           
 13989                           ;Timer0.c: 50: {
 13990                           ;Timer0.c: 51: INDEX ++;
 13991  0131EA  0100               	movlb	0	; () banked
 13992  0131EC  2B8D               	incf	_INDEX& (0+255),f,b
 13993                           
 13994                           ; BSR set to: 0
 13995                           ;Timer0.c: 52: if (INDEX >= 3)
 13996  0131EE  0E02               	movlw	2
 13997  0131F0  0100               	movlb	0	; () banked
 13998  0131F2  658D               	cpfsgt	_INDEX& (0+255),b
 13999  0131F4  D001               	goto	l1785
 14000  0131F6  D02F               	goto	u10030
 14001  0131F8                     l1785:
 14002                           
 14003                           ; BSR set to: 0
 14004                           ;Timer0.c: 56: if (INDEX >= 8)
 14005                           
 14006                           ; BSR set to: 0
 14007  0131F8  0E07               	movlw	7
 14008  0131FA  0100               	movlb	0	; () banked
 14009  0131FC  658D               	cpfsgt	_INDEX& (0+255),b
 14010  0131FE  D001               	goto	l1787
 14011  013200  0012               	return	
 14012  013202                     l1787:
 14013                           
 14014                           ; BSR set to: 0
 14015                           
 14016                           ; BSR set to: 0
 14017  013202  C0D1  F0BA         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 14018  013206  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 14019  01320A  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 14020  01320E  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 14021  013212  0100               	movlb	0	; () banked
 14022  013214  518D               	movf	_INDEX& (0+255),w,b
 14023  013216  0D02               	mullw	2
 14024  013218  0EE5               	movlw	low Timer0_Init@PRESCALE
 14025  01321A  24F3               	addwf	prodl,w,c
 14026  01321C  6EF6               	movwf	tblptrl,c
 14027  01321E  0EFC               	movlw	high Timer0_Init@PRESCALE
 14028  013220  20F4               	addwfc	prodh,w,c
 14029  013222  6EF7               	movwf	tblptrh,c
 14030  013224                     	if	1	;There are 3 active tblptr bytes
 14031  013224  6AF8               	clrf	tblptru,c
 14032  013226  0E00               	movlw	low (__mediumconst shr (0+16))
 14033  013228  22F8               	addwfc	tblptru,f,c
 14034  01322A                     	endif
 14035  01322A  0009               	tblrd		*+
 14036  01322C  CFF5 F0CB          	movff	tablat,??_Timer0_Init
 14037  013230  0009               	tblrd		*+
 14038  013232  CFF5 F0CC          	movff	tablat,??_Timer0_Init+1
 14039  013236  C0CB  F0BE         	movff	??_Timer0_Init,___lldiv@divisor
 14040  01323A  C0CC  F0BF         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 14041  01323E  0100               	movlb	0	; () banked
 14042  013240  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14043  013242  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14044  013244  EC4A  F0A1         	call	___lldiv	;wreg free
 14045  013248  0100               	movlb	0	; () banked
 14046  01324A  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 14047  01324C  E1CE               	bnz	l13421
 14048  01324E  0100               	movlb	0	; () banked
 14049  013250  05BC               	decf	(?___lldiv+2)& (0+255),w,b
 14050  013252  B0D8               	btfsc	status,0,c
 14051  013254  D7CA               	goto	l1784
 14052  013256                     u10030:
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;Timer0.c: 58: }
 14056                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 14057                           
 14058                           ; BSR set to: 0
 14059  013256  0100               	movlb	0	; () banked
 14060  013258  518D               	movf	_INDEX& (0+255),w,b
 14061  01325A  0D02               	mullw	2
 14062  01325C  0EE5               	movlw	low Timer0_Init@PRESCALE
 14063  01325E  24F3               	addwf	prodl,w,c
 14064  013260  6EF6               	movwf	tblptrl,c
 14065  013262  0EFC               	movlw	high Timer0_Init@PRESCALE
 14066  013264  20F4               	addwfc	prodh,w,c
 14067  013266  6EF7               	movwf	tblptrh,c
 14068  013268                     	if	1	;There are 3 active tblptr bytes
 14069  013268  6AF8               	clrf	tblptru,c
 14070  01326A  0E00               	movlw	low (__mediumconst shr (0+16))
 14071  01326C  22F8               	addwfc	tblptru,f,c
 14072  01326E                     	endif
 14073  01326E  0008               	tblrd		*
 14074  013270  CFF5 F08C          	movff	tablat,Timer0_Init@PRE
 14075                           
 14076                           ; BSR set to: 0
 14077                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 14078  013274  0EFF               	movlw	255
 14079  013276  0100               	movlb	0	; () banked
 14080  013278  25D1               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 14081  01327A  0103               	movlb	3	; () banked
 14082  01327C  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 14083  01327E  0EFF               	movlw	255
 14084  013280  0100               	movlb	0	; () banked
 14085  013282  21D2               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 14086  013284  0103               	movlb	3	; () banked
 14087  013286  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 14088  013288  0EFF               	movlw	255
 14089  01328A  0100               	movlb	0	; () banked
 14090  01328C  21D3               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 14091  01328E  0103               	movlb	3	; () banked
 14092  013290  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 14093  013292  0EFF               	movlw	255
 14094  013294  0100               	movlb	0	; () banked
 14095  013296  21D4               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 14096  013298  0103               	movlb	3	; () banked
 14097  01329A  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 14098                           
 14099                           ; BSR set to: 3
 14100                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 14101  01329C  C32A  F0BA         	movff	Timer0_Init@DIV,___lldiv@dividend
 14102  0132A0  C32B  F0BB         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 14103  0132A4  C32C  F0BC         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 14104  0132A8  C32D  F0BD         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 14105  0132AC  0100               	movlb	0	; () banked
 14106  0132AE  518C               	movf	Timer0_Init@PRE& (0+255),w,b
 14107  0132B0  0100               	movlb	0	; () banked
 14108  0132B2  6FBE               	movwf	___lldiv@divisor& (0+255),b
 14109  0132B4  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 14110  0132B6  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14111  0132B8  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14112  0132BA  EC4A  F0A1         	call	___lldiv	;wreg free
 14113  0132BE  0100               	movlb	0	; () banked
 14114  0132C0  1FBA               	comf	?___lldiv& (0+255),f,b
 14115  0132C2  0100               	movlb	0	; () banked
 14116  0132C4  1FBB               	comf	(?___lldiv+1)& (0+255),f,b
 14117  0132C6  0100               	movlb	0	; () banked
 14118  0132C8  4BBA               	infsnz	?___lldiv& (0+255),f,b
 14119  0132CA  2BBB               	incf	(?___lldiv+1)& (0+255),f,b
 14120  0132CC  0EFF               	movlw	255
 14121  0132CE  0100               	movlb	0	; () banked
 14122  0132D0  25BA               	addwf	?___lldiv& (0+255),w,b
 14123  0132D2  6E29               	movwf	_COUNTER,c
 14124  0132D4  0EFF               	movlw	255
 14125  0132D6  0100               	movlb	0	; () banked
 14126  0132D8  21BB               	addwfc	(?___lldiv+1)& (0+255),w,b
 14127  0132DA  6E2A               	movwf	_COUNTER+1,c
 14128                           
 14129                           ; BSR set to: 0
 14130                           ;Timer0.c: 68: Timer0_Clear();
 14131  0132DC  EC62  F0B3         	call	_Timer0_Clear	;wreg free
 14132                           
 14133                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 14134  0132E0  8ED5               	bsf	4053,7,c	;volatile
 14135  0132E2  0012               	return		;funcret
 14136  0132E4                     __end_of_Timer0_Init:
 14137                           	opt stack 0
 14138                           tblptru	equ	0xFF8
 14139                           tblptrh	equ	0xFF7
 14140                           tblptrl	equ	0xFF6
 14141                           tablat	equ	0xFF5
 14142                           prodh	equ	0xFF4
 14143                           prodl	equ	0xFF3
 14144                           intcon	equ	0xFF2
 14145                           postinc0	equ	0xFEE
 14146                           wreg	equ	0xFE8
 14147                           indf1	equ	0xFE7
 14148                           postdec1	equ	0xFE5
 14149                           fsr1h	equ	0xFE2
 14150                           fsr1l	equ	0xFE1
 14151                           indf2	equ	0xFDF
 14152                           postinc2	equ	0xFDE
 14153                           postdec2	equ	0xFDD
 14154                           fsr2h	equ	0xFDA
 14155                           fsr2l	equ	0xFD9
 14156                           status	equ	0xFD8
 14157                           
 14158 ;; *************** function _Timer0_Clear *****************
 14159 ;; Defined at:
 14160 ;;		line 20 in file "Library/Timer0.c"
 14161 ;; Parameters:    Size  Location     Type
 14162 ;;		None
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;		None
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  1    wreg      void 
 14167 ;; Registers used:
 14168 ;;		None
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14178 ;;Total ram usage:        0 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    7
 14181 ;; This function calls:
 14182 ;;		Nothing
 14183 ;; This function is called by:
 14184 ;;		_Timer0_Init
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188                           	psect	text59
 14189  0166C4                     __ptext59:
 14190                           	opt stack 0
 14191  0166C4                     _Timer0_Clear:
 14192                           	opt stack 19
 14193                           
 14194                           ;Timer0.c: 22: TMR0 = COUNTER;
 14195                           
 14196                           ;incstack = 0
 14197  0166C4  C029  FFD6         	movff	_COUNTER,4054	;volatile
 14198  0166C8  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 14199                           
 14200                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 14201  0166CC  94F2               	bcf	intcon,2,c	;volatile
 14202  0166CE  0012               	return		;funcret
 14203  0166D0                     __end_of_Timer0_Clear:
 14204                           	opt stack 0
 14205                           tblptru	equ	0xFF8
 14206                           tblptrh	equ	0xFF7
 14207                           tblptrl	equ	0xFF6
 14208                           tablat	equ	0xFF5
 14209                           prodh	equ	0xFF4
 14210                           prodl	equ	0xFF3
 14211                           intcon	equ	0xFF2
 14212                           postinc0	equ	0xFEE
 14213                           wreg	equ	0xFE8
 14214                           indf1	equ	0xFE7
 14215                           postdec1	equ	0xFE5
 14216                           fsr1h	equ	0xFE2
 14217                           fsr1l	equ	0xFE1
 14218                           indf2	equ	0xFDF
 14219                           postinc2	equ	0xFDE
 14220                           postdec2	equ	0xFDD
 14221                           fsr2h	equ	0xFDA
 14222                           fsr2l	equ	0xFD9
 14223                           status	equ	0xFD8
 14224                           
 14225 ;; *************** function _MXK_Init *****************
 14226 ;; Defined at:
 14227 ;;		line 33 in file "Library/MXK.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;		None
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;		None
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  1    wreg      void 
 14234 ;; Registers used:
 14235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14236 ;; Tracked objects:
 14237 ;;		On entry : 0/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14245 ;;Total ram usage:        0 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:   16
 14248 ;; This function calls:
 14249 ;;		_LED_Init
 14250 ;;		_Port_Init
 14251 ;;		_Port_SetPin
 14252 ;;		_Port_SetPinType
 14253 ;;		_Port_SetQuadType
 14254 ;;		_Port_SetType
 14255 ;;		_delay_ms
 14256 ;; This function is called by:
 14257 ;;		_init
 14258 ;; This function uses a non-reentrant model
 14259 ;;
 14260                           
 14261                           	psect	text60
 14262  012D2C                     __ptext60:
 14263                           	opt stack 0
 14264  012D2C                     _MXK_Init:
 14265                           	opt stack 13
 14266                           
 14267                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 14268                           
 14269                           ;incstack = 0
 14270  012D2C  0E01               	movlw	1
 14271  012D2E  6E4B               	movwf	_Bus_State,c
 14272                           
 14273                           ;MXK.c: 36: lQueue = (Function)0;
 14274  012D30  0E00               	movlw	0
 14275  012D32  0100               	movlb	0	; () banked
 14276  012D34  6F63               	movwf	_lQueue& (0+255),b	;volatile
 14277  012D36  0E00               	movlw	0
 14278  012D38  0100               	movlb	0	; () banked
 14279  012D3A  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14280  012D3C  0E00               	movlw	0
 14281  012D3E  0100               	movlb	0	; () banked
 14282  012D40  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14283                           
 14284                           ; BSR set to: 0
 14285                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 14286  012D42  0EB6               	movlw	low _PortA
 14287  012D44  0101               	movlb	1	; () banked
 14288  012D46  6F01               	movwf	Port_Init@pInput& (0+255),b
 14289  012D48  0E03               	movlw	high _PortA
 14290  012D4A  0101               	movlb	1	; () banked
 14291  012D4C  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14292  012D4E  0E00               	movlw	0
 14293  012D50  0101               	movlb	1	; () banked
 14294  012D52  6F03               	movwf	Port_Init@pPort& (0+255),b
 14295  012D54  EC0A  F095         	call	_Port_Init	;wreg free
 14296                           
 14297                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 14298  012D58  0EAC               	movlw	low _PortB
 14299  012D5A  0101               	movlb	1	; () banked
 14300  012D5C  6F01               	movwf	Port_Init@pInput& (0+255),b
 14301  012D5E  0E03               	movlw	high _PortB
 14302  012D60  0101               	movlb	1	; () banked
 14303  012D62  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14304  012D64  0E01               	movlw	1
 14305  012D66  0101               	movlb	1	; () banked
 14306  012D68  6F03               	movwf	Port_Init@pPort& (0+255),b
 14307  012D6A  EC0A  F095         	call	_Port_Init	;wreg free
 14308                           
 14309                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 14310  012D6E  0EA5               	movlw	low _PortC
 14311  012D70  0101               	movlb	1	; () banked
 14312  012D72  6F01               	movwf	Port_Init@pInput& (0+255),b
 14313  012D74  0E00               	movlw	high _PortC
 14314  012D76  0101               	movlb	1	; () banked
 14315  012D78  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14316  012D7A  0E02               	movlw	2
 14317  012D7C  0101               	movlb	1	; () banked
 14318  012D7E  6F03               	movwf	Port_Init@pPort& (0+255),b
 14319  012D80  EC0A  F095         	call	_Port_Init	;wreg free
 14320                           
 14321                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 14322  012D84  0E9B               	movlw	low _PortD
 14323  012D86  0101               	movlb	1	; () banked
 14324  012D88  6F01               	movwf	Port_Init@pInput& (0+255),b
 14325  012D8A  0E00               	movlw	high _PortD
 14326  012D8C  0101               	movlb	1	; () banked
 14327  012D8E  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14328  012D90  0E03               	movlw	3
 14329  012D92  0101               	movlb	1	; () banked
 14330  012D94  6F03               	movwf	Port_Init@pPort& (0+255),b
 14331  012D96  EC0A  F095         	call	_Port_Init	;wreg free
 14332                           
 14333                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 14334  012D9A  0E91               	movlw	low _PortE
 14335  012D9C  0101               	movlb	1	; () banked
 14336  012D9E  6F01               	movwf	Port_Init@pInput& (0+255),b
 14337  012DA0  0E00               	movlw	high _PortE
 14338  012DA2  0101               	movlb	1	; () banked
 14339  012DA4  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14340  012DA6  0E04               	movlw	4
 14341  012DA8  0101               	movlb	1	; () banked
 14342  012DAA  6F03               	movwf	Port_Init@pPort& (0+255),b
 14343  012DAC  EC0A  F095         	call	_Port_Init	;wreg free
 14344                           
 14345                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 14346  012DB0  0EC0               	movlw	low _PortF
 14347  012DB2  0101               	movlb	1	; () banked
 14348  012DB4  6F01               	movwf	Port_Init@pInput& (0+255),b
 14349  012DB6  0E03               	movlw	high _PortF
 14350  012DB8  0101               	movlb	1	; () banked
 14351  012DBA  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14352  012DBC  0E05               	movlw	5
 14353  012DBE  0101               	movlb	1	; () banked
 14354  012DC0  6F03               	movwf	Port_Init@pPort& (0+255),b
 14355  012DC2  EC0A  F095         	call	_Port_Init	;wreg free
 14356                           
 14357                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 14358  012DC6  0EA2               	movlw	low _PortG
 14359  012DC8  0101               	movlb	1	; () banked
 14360  012DCA  6F01               	movwf	Port_Init@pInput& (0+255),b
 14361  012DCC  0E03               	movlw	high _PortG
 14362  012DCE  0101               	movlb	1	; () banked
 14363  012DD0  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14364  012DD2  0E06               	movlw	6
 14365  012DD4  0101               	movlb	1	; () banked
 14366  012DD6  6F03               	movwf	Port_Init@pPort& (0+255),b
 14367  012DD8  EC0A  F095         	call	_Port_Init	;wreg free
 14368                           
 14369                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 14370  012DDC  0EC0               	movlw	low _PortF
 14371  012DDE  0100               	movlb	0	; () banked
 14372  012DE0  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14373  012DE2  0E03               	movlw	high _PortF
 14374  012DE4  0100               	movlb	0	; () banked
 14375  012DE6  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14376  012DE8  0E05               	movlw	5
 14377  012DEA  0100               	movlb	0	; () banked
 14378  012DEC  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14379  012DEE  0E00               	movlw	0
 14380  012DF0  0100               	movlb	0	; () banked
 14381  012DF2  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14382  012DF4  EC5B  F093         	call	_Port_SetPinType	;wreg free
 14383                           
 14384                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 14385  012DF8  0EAC               	movlw	low _PortB
 14386  012DFA  0100               	movlb	0	; () banked
 14387  012DFC  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 14388  012DFE  0E03               	movlw	high _PortB
 14389  012E00  0100               	movlb	0	; () banked
 14390  012E02  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14391  012E04  0E00               	movlw	0
 14392  012E06  0100               	movlb	0	; () banked
 14393  012E08  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14394  012E0A  0E00               	movlw	0
 14395  012E0C  0100               	movlb	0	; () banked
 14396  012E0E  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 14397  012E10  EC4E  F08D         	call	_Port_SetQuadType	;wreg free
 14398                           
 14399                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 14400  012E14  0EC0               	movlw	low _PortF
 14401  012E16  0100               	movlb	0	; () banked
 14402  012E18  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14403  012E1A  0E03               	movlw	high _PortF
 14404  012E1C  0100               	movlb	0	; () banked
 14405  012E1E  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14406  012E20  0E06               	movlw	6
 14407  012E22  0100               	movlb	0	; () banked
 14408  012E24  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14409  012E26  0E03               	movlw	3
 14410  012E28  0100               	movlb	0	; () banked
 14411  012E2A  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14412  012E2C  EC5B  F093         	call	_Port_SetPinType	;wreg free
 14413                           
 14414                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 14415  012E30  0EA2               	movlw	low _PortG
 14416  012E32  0100               	movlb	0	; () banked
 14417  012E34  6FF4               	movwf	Port_SetType@pInput& (0+255),b
 14418  012E36  0E03               	movlw	high _PortG
 14419  012E38  0100               	movlb	0	; () banked
 14420  012E3A  6FF5               	movwf	(Port_SetType@pInput+1)& (0+255),b
 14421  012E3C  0E03               	movlw	3
 14422  012E3E  0100               	movlb	0	; () banked
 14423  012E40  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14424  012E42  EC79  F08E         	call	_Port_SetType	;wreg free
 14425                           
 14426                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 14427  012E46  0EA2               	movlw	low _PortG
 14428  012E48  0100               	movlb	0	; () banked
 14429  012E4A  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14430  012E4C  0E03               	movlw	high _PortG
 14431  012E4E  0100               	movlb	0	; () banked
 14432  012E50  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14433  012E52  0E04               	movlw	4
 14434  012E54  0100               	movlb	0	; () banked
 14435  012E56  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14436  012E58  0E00               	movlw	0
 14437  012E5A  0100               	movlb	0	; () banked
 14438  012E5C  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14439  012E5E  ECC8  F09F         	call	_Port_SetPin	;wreg free
 14440                           
 14441                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14442  012E62  0EC0               	movlw	low _PortF
 14443  012E64  0100               	movlb	0	; () banked
 14444  012E66  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14445  012E68  0E03               	movlw	high _PortF
 14446  012E6A  0100               	movlb	0	; () banked
 14447  012E6C  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14448  012E6E  0E06               	movlw	6
 14449  012E70  0100               	movlb	0	; () banked
 14450  012E72  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14451  012E74  0E01               	movlw	1
 14452  012E76  0100               	movlb	0	; () banked
 14453  012E78  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14454  012E7A  ECC8  F09F         	call	_Port_SetPin	;wreg free
 14455                           
 14456                           ;MXK.c: 55: LED_Init(eLED1);
 14457  012E7E  0E00               	movlw	0
 14458  012E80  EC4C  F0AC         	call	_LED_Init
 14459                           
 14460                           ;MXK.c: 56: LED_Init(eLED2);
 14461  012E84  0E01               	movlw	1
 14462  012E86  EC4C  F0AC         	call	_LED_Init
 14463                           
 14464                           ;MXK.c: 58: PIR1 = 0;
 14465  012E8A  0E00               	movlw	0
 14466  012E8C  6E9E               	movwf	3998,c	;volatile
 14467                           
 14468                           ;MXK.c: 59: PIR2 = 0;
 14469  012E8E  0E00               	movlw	0
 14470  012E90  6EA1               	movwf	4001,c	;volatile
 14471                           
 14472                           ;MXK.c: 60: PIR3 = 0;
 14473  012E92  0E00               	movlw	0
 14474  012E94  6EA4               	movwf	4004,c	;volatile
 14475                           
 14476                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14477  012E96  8E9B               	bsf	3995,7,c	;volatile
 14478                           
 14479                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14480  012E98  8C9B               	bsf	3995,6,c	;volatile
 14481                           
 14482                           ;MXK.c: 66: delay_ms(100);
 14483  012E9A  0E00               	movlw	0
 14484  012E9C  0100               	movlb	0	; () banked
 14485  012E9E  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 14486  012EA0  0E64               	movlw	100
 14487  012EA2  6FBA               	movwf	delay_ms@ms& (0+255),b
 14488  012EA4  EC18  F0AB         	call	_delay_ms	;wreg free
 14489                           
 14490                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14491  012EA8  8ED0               	bsf	4048,7,c	;volatile
 14492  012EAA  0012               	return		;funcret
 14493  012EAC                     __end_of_MXK_Init:
 14494                           	opt stack 0
 14495                           tblptru	equ	0xFF8
 14496                           tblptrh	equ	0xFF7
 14497                           tblptrl	equ	0xFF6
 14498                           tablat	equ	0xFF5
 14499                           prodh	equ	0xFF4
 14500                           prodl	equ	0xFF3
 14501                           intcon	equ	0xFF2
 14502                           postinc0	equ	0xFEE
 14503                           wreg	equ	0xFE8
 14504                           indf1	equ	0xFE7
 14505                           postdec1	equ	0xFE5
 14506                           fsr1h	equ	0xFE2
 14507                           fsr1l	equ	0xFE1
 14508                           indf2	equ	0xFDF
 14509                           postinc2	equ	0xFDE
 14510                           postdec2	equ	0xFDD
 14511                           fsr2h	equ	0xFDA
 14512                           fsr2l	equ	0xFD9
 14513                           status	equ	0xFD8
 14514                           
 14515 ;; *************** function _Port_Init *****************
 14516 ;; Defined at:
 14517 ;;		line 150 in file "Library/Port.c"
 14518 ;; Parameters:    Size  Location     Type
 14519 ;;  pInput          2    1[BANK1 ] const PTR struct Port
 14520 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14521 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14522 ;;  pPort           1    3[BANK1 ] enum E6786
 14523 ;; Auto vars:     Size  Location     Type
 14524 ;;  i               1    6[BANK1 ] unsigned char 
 14525 ;; Return value:  Size  Location     Type
 14526 ;;                  1    wreg      void 
 14527 ;; Registers used:
 14528 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14529 ;; Tracked objects:
 14530 ;;		On entry : 0/0
 14531 ;;		On exit  : 0/0
 14532 ;;		Unchanged: 0/0
 14533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14534 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14535 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14536 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14537 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14538 ;;Total ram usage:        6 bytes
 14539 ;; Hardware stack levels used:    1
 14540 ;; Hardware stack levels required when called:   15
 14541 ;; This function calls:
 14542 ;;		_GetPortPORT
 14543 ;;		_GetPortProperties
 14544 ;;		_GetPortTRIS
 14545 ;;		_Port_Set
 14546 ;;		_Port_SetPinType
 14547 ;;		_Port_SetType
 14548 ;;		_Word_GetPair
 14549 ;; This function is called by:
 14550 ;;		_MXK_Init
 14551 ;; This function uses a non-reentrant model
 14552 ;;
 14553                           
 14554                           	psect	text61
 14555  012A14                     __ptext61:
 14556                           	opt stack 0
 14557  012A14                     _Port_Init:
 14558                           	opt stack 13
 14559                           
 14560                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14561                           
 14562                           ;incstack = 0
 14563  012A14  0101               	movlb	1	; () banked
 14564  012A16  5103               	movf	Port_Init@pPort& (0+255),w,b
 14565  012A18  EC5F  F0A4         	call	_GetPortProperties
 14566  012A1C  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14567  012A20  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14568  012A24  0100               	movlb	0	; () banked
 14569  012A26  C0BA  FFDE         	movff	?_GetPortProperties,postinc2
 14570  012A2A  0100               	movlb	0	; () banked
 14571  012A2C  C0BB  FFDD         	movff	?_GetPortProperties+1,postdec2
 14572                           
 14573                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14574  012A30  0101               	movlb	1	; () banked
 14575  012A32  5103               	movf	Port_Init@pPort& (0+255),w,b
 14576  012A34  ECB2  F0A4         	call	_GetPortPORT
 14577  012A38  0101               	movlb	1	; () banked
 14578  012A3A  EE20 F006          	lfsr	2,6
 14579  012A3E  5101               	movf	Port_Init@pInput& (0+255),w,b
 14580  012A40  26D9               	addwf	fsr2l,f,c
 14581  012A42  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14582  012A44  22DA               	addwfc	fsr2h,f,c
 14583  012A46  0100               	movlb	0	; () banked
 14584  012A48  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14585  012A4C  0100               	movlb	0	; () banked
 14586  012A4E  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14587                           
 14588                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14589  012A52  0101               	movlb	1	; () banked
 14590  012A54  5103               	movf	Port_Init@pPort& (0+255),w,b
 14591  012A56  ECB2  F0A4         	call	_GetPortPORT
 14592  012A5A  0101               	movlb	1	; () banked
 14593  012A5C  EE20 F004          	lfsr	2,4
 14594  012A60  5101               	movf	Port_Init@pInput& (0+255),w,b
 14595  012A62  26D9               	addwf	fsr2l,f,c
 14596  012A64  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14597  012A66  22DA               	addwfc	fsr2h,f,c
 14598  012A68  0100               	movlb	0	; () banked
 14599  012A6A  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14600  012A6E  0100               	movlb	0	; () banked
 14601  012A70  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14602                           
 14603                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14604  012A74  0101               	movlb	1	; () banked
 14605  012A76  5103               	movf	Port_Init@pPort& (0+255),w,b
 14606  012A78  EC0C  F0A4         	call	_GetPortTRIS
 14607  012A7C  0101               	movlb	1	; () banked
 14608  012A7E  EE20 F002          	lfsr	2,2
 14609  012A82  5101               	movf	Port_Init@pInput& (0+255),w,b
 14610  012A84  26D9               	addwf	fsr2l,f,c
 14611  012A86  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14612  012A88  22DA               	addwfc	fsr2h,f,c
 14613  012A8A  0100               	movlb	0	; () banked
 14614  012A8C  C0BA  FFDE         	movff	?_GetPortTRIS,postinc2
 14615  012A90  0100               	movlb	0	; () banked
 14616  012A92  C0BB  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14620  012A96  0101               	movlb	1	; () banked
 14621  012A98  EE20 F004          	lfsr	2,4
 14622  012A9C  5101               	movf	Port_Init@pInput& (0+255),w,b
 14623  012A9E  26D9               	addwf	fsr2l,f,c
 14624  012AA0  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14625  012AA2  22DA               	addwfc	fsr2h,f,c
 14626  012AA4  CFDE F104          	movff	postinc2,??_Port_Init
 14627  012AA8  CFDD F105          	movff	postdec2,??_Port_Init+1
 14628  012AAC  C104  FFD9         	movff	??_Port_Init,fsr2l
 14629  012AB0  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14630  012AB4  0E00               	movlw	0
 14631  012AB6  6EDF               	movwf	indf2,c
 14632                           
 14633                           ; BSR set to: 1
 14634                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 14635  012AB8  0101               	movlb	1	; () banked
 14636  012ABA  EE20 F002          	lfsr	2,2
 14637  012ABE  5101               	movf	Port_Init@pInput& (0+255),w,b
 14638  012AC0  26D9               	addwf	fsr2l,f,c
 14639  012AC2  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14640  012AC4  22DA               	addwfc	fsr2h,f,c
 14641  012AC6  CFDE F104          	movff	postinc2,??_Port_Init
 14642  012ACA  CFDD F105          	movff	postdec2,??_Port_Init+1
 14643  012ACE  C104  FFD9         	movff	??_Port_Init,fsr2l
 14644  012AD2  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14645  012AD6  0EFF               	movlw	255
 14646  012AD8  6EDF               	movwf	indf2,c
 14647                           
 14648                           ; BSR set to: 1
 14649                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 14650  012ADA  C101  F0F4         	movff	Port_Init@pInput,Port_SetType@pInput
 14651  012ADE  C102  F0F5         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 14652  012AE2  0E00               	movlw	0
 14653  012AE4  0100               	movlb	0	; () banked
 14654  012AE6  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14655  012AE8  EC79  F08E         	call	_Port_SetType	;wreg free
 14656                           
 14657                           ;Port.c: 166: UINT8 i;
 14658                           ;Port.c: 167: for (i=0; i<8; i++)
 14659  012AEC  0E00               	movlw	0
 14660  012AEE  0101               	movlb	1	; () banked
 14661  012AF0  6F06               	movwf	Port_Init@i& (0+255),b
 14662  012AF2                     l13973:
 14663                           
 14664                           ; BSR set to: 1
 14665  012AF2  0E07               	movlw	7
 14666  012AF4  0101               	movlb	1	; () banked
 14667  012AF6  6506               	cpfsgt	Port_Init@i& (0+255),b
 14668  012AF8  D031               	goto	l403
 14669  012AFA  D04B               	goto	u10770
 14670  012AFC                     
 14671                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14672                           
 14673                           ; BSR set to: 1
 14674  012AFC  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14675  012B00  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14676  012B04  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14677  012B08  0E03               	movlw	3
 14678  012B0A  0100               	movlb	0	; () banked
 14679  012B0C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14680  012B0E  EC5B  F093         	call	_Port_SetPinType	;wreg free
 14681                           
 14682                           ;Port.c: 173: break;
 14683  012B12  D03C               	goto	l405
 14684  012B14                     
 14685                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14686  012B14  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14687  012B18  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14688  012B1C  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14689  012B20  0E02               	movlw	2
 14690  012B22  0100               	movlb	0	; () banked
 14691  012B24  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14692  012B26  EC5B  F093         	call	_Port_SetPinType	;wreg free
 14693                           
 14694                           ;Port.c: 176: break;
 14695  012B2A  D030               	goto	l405
 14696  012B2C                     
 14697                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14698  012B2C  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14699  012B30  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14700  012B34  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14701  012B38  0E01               	movlw	1
 14702  012B3A  0100               	movlb	0	; () banked
 14703  012B3C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14704  012B3E  EC5B  F093         	call	_Port_SetPinType	;wreg free
 14705                           
 14706                           ;Port.c: 179: break;
 14707  012B42  D024               	goto	l405
 14708  012B44                     
 14709                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14710  012B44  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14711  012B48  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14712  012B4C  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14713  012B50  0E00               	movlw	0
 14714  012B52  0100               	movlb	0	; () banked
 14715  012B54  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14716  012B56  EC5B  F093         	call	_Port_SetPinType	;wreg free
 14717                           
 14718                           ;Port.c: 183: }
 14719                           
 14720                           ;Port.c: 182: break;
 14721  012B5A  D018               	goto	l405
 14722  012B5C                     l403:
 14723  012B5C  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14724  012B60  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14725  012B64  CFDE F0C6          	movff	postinc2,Word_GetPair@pInput
 14726  012B68  CFDD F0C7          	movff	postdec2,Word_GetPair@pInput+1
 14727  012B6C  C106  F0C8         	movff	Port_Init@i,Word_GetPair@pPair
 14728  012B70  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 14729                           
 14730                           ; Switch size 1, requested type "space"
 14731                           ; Number of cases is 4, Range of values is 0 to 3
 14732                           ; switch strategies available:
 14733                           ; Name         Instructions Cycles
 14734                           ; simple_byte           13     7 (average)
 14735                           ;	Chosen strategy is simple_byte
 14736  012B74  0A00               	xorlw	0	; case 0
 14737  012B76  B4D8               	btfsc	status,2,c
 14738  012B78  D7C1               	goto	l404
 14739  012B7A  0A01               	xorlw	1	; case 1
 14740  012B7C  B4D8               	btfsc	status,2,c
 14741  012B7E  D7D6               	goto	l407
 14742  012B80  0A03               	xorlw	3	; case 2
 14743  012B82  B4D8               	btfsc	status,2,c
 14744  012B84  D7C7               	goto	l406
 14745  012B86  0A01               	xorlw	1	; case 3
 14746  012B88  B4D8               	btfsc	status,2,c
 14747  012B8A  D7DC               	goto	l408
 14748  012B8C                     l405:
 14749  012B8C  0101               	movlb	1	; () banked
 14750  012B8E  2B06               	incf	Port_Init@i& (0+255),f,b
 14751  012B90  D7B0               	goto	l13973
 14752  012B92                     u10770:
 14753                           
 14754                           ; BSR set to: 1
 14755                           ;Port.c: 184: }
 14756                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14757                           
 14758                           ; BSR set to: 1
 14759  012B92  C101  F0C9         	movff	Port_Init@pInput,Port_Set@pInput
 14760  012B96  C102  F0CA         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14761  012B9A  0E00               	movlw	0
 14762  012B9C  0100               	movlb	0	; () banked
 14763  012B9E  6FCB               	movwf	Port_Set@pValue& (0+255),b
 14764  012BA0  EC2F  F08A         	call	_Port_Set	;wreg free
 14765  012BA4  0012               	return		;funcret
 14766  012BA6                     __end_of_Port_Init:
 14767                           	opt stack 0
 14768                           tblptru	equ	0xFF8
 14769                           tblptrh	equ	0xFF7
 14770                           tblptrl	equ	0xFF6
 14771                           tablat	equ	0xFF5
 14772                           prodh	equ	0xFF4
 14773                           prodl	equ	0xFF3
 14774                           intcon	equ	0xFF2
 14775                           postinc0	equ	0xFEE
 14776                           wreg	equ	0xFE8
 14777                           indf1	equ	0xFE7
 14778                           postdec1	equ	0xFE5
 14779                           fsr1h	equ	0xFE2
 14780                           fsr1l	equ	0xFE1
 14781                           indf2	equ	0xFDF
 14782                           postinc2	equ	0xFDE
 14783                           postdec2	equ	0xFDD
 14784                           fsr2h	equ	0xFDA
 14785                           fsr2l	equ	0xFD9
 14786                           status	equ	0xFD8
 14787                           
 14788 ;; *************** function _Port_SetType *****************
 14789 ;; Defined at:
 14790 ;;		line 513 in file "Library/Port.c"
 14791 ;; Parameters:    Size  Location     Type
 14792 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14793 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14794 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14795 ;;  pType           1   60[BANK0 ] enum E6795
 14796 ;; Auto vars:     Size  Location     Type
 14797 ;;  Output          1    0[BANK1 ] enum E6475
 14798 ;; Return value:  Size  Location     Type
 14799 ;;                  1    wreg      enum E6475
 14800 ;; Registers used:
 14801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14802 ;; Tracked objects:
 14803 ;;		On entry : 0/0
 14804 ;;		On exit  : 0/0
 14805 ;;		Unchanged: 0/0
 14806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14807 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14808 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14810 ;;      Totals:         0       5       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14811 ;;Total ram usage:        6 bytes
 14812 ;; Hardware stack levels used:    1
 14813 ;; Hardware stack levels required when called:   14
 14814 ;; This function calls:
 14815 ;;		_Port_CheckPortType
 14816 ;;		_Word_SetPair
 14817 ;; This function is called by:
 14818 ;;		_Port_Init
 14819 ;;		_MXK_Init
 14820 ;; This function uses a non-reentrant model
 14821 ;;
 14822                           
 14823                           	psect	text62
 14824  011CF2                     __ptext62:
 14825                           	opt stack 0
 14826  011CF2                     _Port_SetType:
 14827                           	opt stack 14
 14828                           
 14829                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14830                           
 14831                           ;incstack = 0
 14832  011CF2  0E05               	movlw	5
 14833  011CF4  0101               	movlb	1	; () banked
 14834  011CF6  6F00               	movwf	Port_SetType@Output& (0+255),b
 14835                           
 14836                           ;Port.c: 517: switch (pType)
 14837  011CF8  D07A               	goto	l509
 14838  011CFA                     
 14839                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14840                           
 14841                           ; BSR set to: 1
 14842  011CFA  0100               	movlb	0	; () banked
 14843  011CFC  EE20 F002          	lfsr	2,2
 14844  011D00  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14845  011D02  26D9               	addwf	fsr2l,f,c
 14846  011D04  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14847  011D06  22DA               	addwfc	fsr2h,f,c
 14848  011D08  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14849  011D0C  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14850  011D10  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14851  011D14  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14852  011D18  0EFF               	movlw	255
 14853  011D1A  D067               	goto	L10
 14854  011D1C                     
 14855                           ; BSR set to: 0
 14856                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14857                           
 14858                           ; BSR set to: 0
 14859  011D1C  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14860  011D20  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14861  011D24  0E01               	movlw	1
 14862  011D26  0100               	movlb	0	; () banked
 14863  011D28  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14864  011D2A  EC4A  F0AE         	call	_Port_CheckPortType	;wreg free
 14865  011D2E  0101               	movlb	1	; () banked
 14866  011D30  6F00               	movwf	Port_SetType@Output& (0+255),b
 14867  011D32  0101               	movlb	1	; () banked
 14868  011D34  5100               	movf	Port_SetType@Output& (0+255),w,b
 14869  011D36  A4D8               	btfss	status,2,c
 14870  011D38  0012               	return	
 14871                           
 14872                           ; BSR set to: 1
 14873                           ;Port.c: 527: {
 14874                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 14875  011D3A  0100               	movlb	0	; () banked
 14876  011D3C  EE20 F002          	lfsr	2,2
 14877  011D40  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14878  011D42  26D9               	addwf	fsr2l,f,c
 14879  011D44  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14880  011D46  22DA               	addwfc	fsr2h,f,c
 14881  011D48  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14882  011D4C  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14883  011D50  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14884  011D54  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14885  011D58  0E00               	movlw	0
 14886  011D5A  6EDF               	movwf	indf2,c
 14887                           
 14888                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 14889  011D5C  0100               	movlb	0	; () banked
 14890  011D5E  EE20 F004          	lfsr	2,4
 14891  011D62  D036               	goto	L21
 14892  011D64                     
 14893                           ; BSR set to: 0
 14894                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 14895                           
 14896                           ; BSR set to: 0
 14897  011D64  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14898  011D68  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14899  011D6C  0E02               	movlw	2
 14900  011D6E  0100               	movlb	0	; () banked
 14901  011D70  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14902  011D72  EC4A  F0AE         	call	_Port_CheckPortType	;wreg free
 14903  011D76  0101               	movlb	1	; () banked
 14904  011D78  6F00               	movwf	Port_SetType@Output& (0+255),b
 14905  011D7A  0101               	movlb	1	; () banked
 14906  011D7C  5100               	movf	Port_SetType@Output& (0+255),w,b
 14907  011D7E  A4D8               	btfss	status,2,c
 14908  011D80  0012               	return	
 14909                           
 14910                           ; BSR set to: 1
 14911                           ;Port.c: 538: {
 14912                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 14913  011D82  0100               	movlb	0	; () banked
 14914  011D84  EE20 F002          	lfsr	2,2
 14915  011D88  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14916  011D8A  26D9               	addwf	fsr2l,f,c
 14917  011D8C  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14918  011D8E  22DA               	addwfc	fsr2h,f,c
 14919  011D90  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14920  011D94  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14921  011D98  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14922  011D9C  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14923  011DA0  0EFF               	movlw	255
 14924  011DA2  6EDF               	movwf	indf2,c
 14925                           
 14926                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 14927  011DA4  0100               	movlb	0	; () banked
 14928  011DA6  EE20 F004          	lfsr	2,4
 14929  011DAA  D7AA               	goto	L11
 14930  011DAC                     
 14931                           ; BSR set to: 0
 14932                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 14933                           
 14934                           ; BSR set to: 0
 14935  011DAC  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14936  011DB0  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14937  011DB4  0E00               	movlw	0
 14938  011DB6  0100               	movlb	0	; () banked
 14939  011DB8  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14940  011DBA  EC4A  F0AE         	call	_Port_CheckPortType	;wreg free
 14941  011DBE  0101               	movlb	1	; () banked
 14942  011DC0  6F00               	movwf	Port_SetType@Output& (0+255),b
 14943  011DC2  0101               	movlb	1	; () banked
 14944  011DC4  5100               	movf	Port_SetType@Output& (0+255),w,b
 14945  011DC6  A4D8               	btfss	status,2,c
 14946  011DC8  0012               	return	
 14947                           
 14948                           ; BSR set to: 1
 14949                           ;Port.c: 549: {
 14950                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 14951  011DCA  0100               	movlb	0	; () banked
 14952  011DCC  EE20 F002          	lfsr	2,2
 14953  011DD0                     L21:
 14954  011DD0  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14955  011DD2  26D9               	addwf	fsr2l,f,c
 14956  011DD4  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14957  011DD6  22DA               	addwfc	fsr2h,f,c
 14958  011DD8  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14959  011DDC  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14960  011DE0  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14961  011DE4  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14962  011DE8  0E00               	movlw	0
 14963  011DEA                     L10:
 14964  011DEA  6EDF               	movwf	indf2,c
 14965                           
 14966                           ;Port.c: 552: }
 14967  011DEC  D00E               	goto	l511
 14968  011DEE                     l509:
 14969                           
 14970                           ; BSR set to: 0
 14971  011DEE  0100               	movlb	0	; () banked
 14972  011DF0  51F6               	movf	Port_SetType@pType& (0+255),w,b
 14973                           
 14974                           ; Switch size 1, requested type "space"
 14975                           ; Number of cases is 4, Range of values is 0 to 3
 14976                           ; switch strategies available:
 14977                           ; Name         Instructions Cycles
 14978                           ; simple_byte           13     7 (average)
 14979                           ;	Chosen strategy is simple_byte
 14980  011DF2  0A00               	xorlw	0	; case 0
 14981  011DF4  B4D8               	btfsc	status,2,c
 14982  011DF6  D781               	goto	l510
 14983  011DF8  0A01               	xorlw	1	; case 1
 14984  011DFA  B4D8               	btfsc	status,2,c
 14985  011DFC  D78F               	goto	l512
 14986  011DFE  0A03               	xorlw	3	; case 2
 14987  011E00  B4D8               	btfsc	status,2,c
 14988  011E02  D7B0               	goto	l516
 14989  011E04  0A01               	xorlw	1	; case 3
 14990  011E06  B4D8               	btfsc	status,2,c
 14991  011E08  D7D1               	goto	l519
 14992  011E0A                     l511:
 14993                           
 14994                           ; BSR set to: 0
 14995                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 14996                           
 14997                           ; BSR set to: 0
 14998  011E0A  0E08               	movlw	8
 14999  011E0C  0100               	movlb	0	; () banked
 15000  011E0E  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15001  011E10  0100               	movlb	0	; () banked
 15002  011E12  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15003  011E14  0E00               	movlw	0
 15004  011E16  0100               	movlb	0	; () banked
 15005  011E18  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15006  011E1A  0100               	movlb	0	; () banked
 15007  011E1C  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15008  011E1E  0E00               	movlw	0
 15009  011E20  0100               	movlb	0	; () banked
 15010  011E22  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15011  011E24  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15012  011E28  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 15013                           
 15014                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 15015  011E2C  0E08               	movlw	8
 15016  011E2E  0100               	movlb	0	; () banked
 15017  011E30  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15018  011E32  0100               	movlb	0	; () banked
 15019  011E34  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15020  011E36  0E00               	movlw	0
 15021  011E38  0100               	movlb	0	; () banked
 15022  011E3A  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15023  011E3C  0100               	movlb	0	; () banked
 15024  011E3E  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15025  011E40  0E01               	movlw	1
 15026  011E42  0100               	movlb	0	; () banked
 15027  011E44  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15028  011E46  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15029  011E4A  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 15030                           
 15031                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 15032  011E4E  0E08               	movlw	8
 15033  011E50  0100               	movlb	0	; () banked
 15034  011E52  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15035  011E54  0100               	movlb	0	; () banked
 15036  011E56  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15037  011E58  0E00               	movlw	0
 15038  011E5A  0100               	movlb	0	; () banked
 15039  011E5C  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15040  011E5E  0100               	movlb	0	; () banked
 15041  011E60  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15042  011E62  0E02               	movlw	2
 15043  011E64  0100               	movlb	0	; () banked
 15044  011E66  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15045  011E68  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15046  011E6C  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 15047                           
 15048                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 15049  011E70  0E08               	movlw	8
 15050  011E72  0100               	movlb	0	; () banked
 15051  011E74  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15052  011E76  0100               	movlb	0	; () banked
 15053  011E78  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15054  011E7A  0E00               	movlw	0
 15055  011E7C  0100               	movlb	0	; () banked
 15056  011E7E  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15057  011E80  0100               	movlb	0	; () banked
 15058  011E82  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15059  011E84  0E03               	movlw	3
 15060  011E86  0100               	movlb	0	; () banked
 15061  011E88  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15062  011E8A  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15063  011E8E  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 15064                           
 15065                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 15066  011E92  0E08               	movlw	8
 15067  011E94  0100               	movlb	0	; () banked
 15068  011E96  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15069  011E98  0100               	movlb	0	; () banked
 15070  011E9A  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15071  011E9C  0E00               	movlw	0
 15072  011E9E  0100               	movlb	0	; () banked
 15073  011EA0  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15074  011EA2  0100               	movlb	0	; () banked
 15075  011EA4  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15076  011EA6  0E04               	movlw	4
 15077  011EA8  0100               	movlb	0	; () banked
 15078  011EAA  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15079  011EAC  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15080  011EB0  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 15081                           
 15082                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 15083  011EB4  0E08               	movlw	8
 15084  011EB6  0100               	movlb	0	; () banked
 15085  011EB8  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15086  011EBA  0100               	movlb	0	; () banked
 15087  011EBC  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15088  011EBE  0E00               	movlw	0
 15089  011EC0  0100               	movlb	0	; () banked
 15090  011EC2  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15091  011EC4  0100               	movlb	0	; () banked
 15092  011EC6  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15093  011EC8  0E05               	movlw	5
 15094  011ECA  0100               	movlb	0	; () banked
 15095  011ECC  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15096  011ECE  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15097  011ED2  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 15098                           
 15099                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 15100  011ED6  0E08               	movlw	8
 15101  011ED8  0100               	movlb	0	; () banked
 15102  011EDA  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15103  011EDC  0100               	movlb	0	; () banked
 15104  011EDE  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15105  011EE0  0E00               	movlw	0
 15106  011EE2  0100               	movlb	0	; () banked
 15107  011EE4  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15108  011EE6  0100               	movlb	0	; () banked
 15109  011EE8  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15110  011EEA  0E06               	movlw	6
 15111  011EEC  0100               	movlb	0	; () banked
 15112  011EEE  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15113  011EF0  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15114  011EF4  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 15115                           
 15116                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 15117  011EF8  0E08               	movlw	8
 15118  011EFA  0100               	movlb	0	; () banked
 15119  011EFC  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15120  011EFE  0100               	movlb	0	; () banked
 15121  011F00  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15122  011F02  0E00               	movlw	0
 15123  011F04  0100               	movlb	0	; () banked
 15124  011F06  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15125  011F08  0100               	movlb	0	; () banked
 15126  011F0A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15127  011F0C  0E07               	movlw	7
 15128  011F0E  0100               	movlb	0	; () banked
 15129  011F10  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15130  011F12  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15131  011F16  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 15132  011F1A  0012               	return	
 15133  011F1C                     __end_of_Port_SetType:
 15134                           	opt stack 0
 15135                           tblptru	equ	0xFF8
 15136                           tblptrh	equ	0xFF7
 15137                           tblptrl	equ	0xFF6
 15138                           tablat	equ	0xFF5
 15139                           prodh	equ	0xFF4
 15140                           prodl	equ	0xFF3
 15141                           intcon	equ	0xFF2
 15142                           postinc0	equ	0xFEE
 15143                           wreg	equ	0xFE8
 15144                           indf1	equ	0xFE7
 15145                           postdec1	equ	0xFE5
 15146                           fsr1h	equ	0xFE2
 15147                           fsr1l	equ	0xFE1
 15148                           indf2	equ	0xFDF
 15149                           postinc2	equ	0xFDE
 15150                           postdec2	equ	0xFDD
 15151                           fsr2h	equ	0xFDA
 15152                           fsr2l	equ	0xFD9
 15153                           status	equ	0xFD8
 15154                           
 15155 ;; *************** function _Port_CheckPortType *****************
 15156 ;; Defined at:
 15157 ;;		line 138 in file "Library/Port.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15160 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15161 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15162 ;;  pDrive          1   56[BANK0 ] enum E6469
 15163 ;; Auto vars:     Size  Location     Type
 15164 ;;  Output          1   57[BANK0 ] enum E6475
 15165 ;; Return value:  Size  Location     Type
 15166 ;;                  1    wreg      enum E6475
 15167 ;; Registers used:
 15168 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15169 ;; Tracked objects:
 15170 ;;		On entry : 0/0
 15171 ;;		On exit  : 0/0
 15172 ;;		Unchanged: 0/0
 15173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15174 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15177 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15178 ;;Total ram usage:        4 bytes
 15179 ;; Hardware stack levels used:    1
 15180 ;; Hardware stack levels required when called:   13
 15181 ;; This function calls:
 15182 ;;		_Port_CheckQuadType
 15183 ;; This function is called by:
 15184 ;;		_Port_SetType
 15185 ;; This function uses a non-reentrant model
 15186 ;;
 15187                           
 15188                           	psect	text63
 15189  015C94                     __ptext63:
 15190                           	opt stack 0
 15191  015C94                     _Port_CheckPortType:
 15192                           	opt stack 14
 15193                           
 15194                           ;Port.c: 140: ePinError Output = ePinErrorState;
 15195                           
 15196                           ;incstack = 0
 15197  015C94  0E05               	movlw	5
 15198  015C96  0100               	movlb	0	; () banked
 15199  015C98  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15200                           
 15201                           ; BSR set to: 0
 15202                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 15203  015C9A  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15204  015C9E  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15205  015CA2  0E00               	movlw	0
 15206  015CA4  0100               	movlb	0	; () banked
 15207  015CA6  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15208  015CA8  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15209  015CAC  ECDC  F0AC         	call	_Port_CheckQuadType	;wreg free
 15210  015CB0  0100               	movlb	0	; () banked
 15211  015CB2  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15212  015CB4  0100               	movlb	0	; () banked
 15213  015CB6  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15214  015CB8  A4D8               	btfss	status,2,c
 15215  015CBA  D00D               	goto	l397
 15216                           
 15217                           ; BSR set to: 0
 15218                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 15219  015CBC  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15220  015CC0  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15221  015CC4  0E01               	movlw	1
 15222  015CC6  0100               	movlb	0	; () banked
 15223  015CC8  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15224  015CCA  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15225  015CCE  ECDC  F0AC         	call	_Port_CheckQuadType	;wreg free
 15226  015CD2  0100               	movlb	0	; () banked
 15227  015CD4  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15228  015CD6                     l397:
 15229                           
 15230                           ; BSR set to: 0
 15231                           ;Port.c: 146: return Output;
 15232                           
 15233                           ; BSR set to: 0
 15234  015CD6  0100               	movlb	0	; () banked
 15235  015CD8  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15236  015CDA  0012               	return	
 15237  015CDC                     __end_of_Port_CheckPortType:
 15238                           	opt stack 0
 15239                           tblptru	equ	0xFF8
 15240                           tblptrh	equ	0xFF7
 15241                           tblptrl	equ	0xFF6
 15242                           tablat	equ	0xFF5
 15243                           prodh	equ	0xFF4
 15244                           prodl	equ	0xFF3
 15245                           intcon	equ	0xFF2
 15246                           postinc0	equ	0xFEE
 15247                           wreg	equ	0xFE8
 15248                           indf1	equ	0xFE7
 15249                           postdec1	equ	0xFE5
 15250                           fsr1h	equ	0xFE2
 15251                           fsr1l	equ	0xFE1
 15252                           indf2	equ	0xFDF
 15253                           postinc2	equ	0xFDE
 15254                           postdec2	equ	0xFDD
 15255                           fsr2h	equ	0xFDA
 15256                           fsr2l	equ	0xFD9
 15257                           status	equ	0xFD8
 15258                           
 15259 ;; *************** function _Port_Set *****************
 15260 ;; Defined at:
 15261 ;;		line 570 in file "Library/Port.c"
 15262 ;; Parameters:    Size  Location     Type
 15263 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15264 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15265 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15266 ;;  pValue          1   17[BANK0 ] unsigned char 
 15267 ;; Auto vars:     Size  Location     Type
 15268 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 15269 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 15270 ;;  Type            1   38[BANK0 ] enum E6795
 15271 ;; Return value:  Size  Location     Type
 15272 ;;                  1    wreg      void 
 15273 ;; Registers used:
 15274 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15275 ;; Tracked objects:
 15276 ;;		On entry : 0/0
 15277 ;;		On exit  : 0/0
 15278 ;;		Unchanged: 0/0
 15279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15280 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15281 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15282 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15283 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15284 ;;Total ram usage:       24 bytes
 15285 ;; Hardware stack levels used:    1
 15286 ;; Hardware stack levels required when called:   10
 15287 ;; This function calls:
 15288 ;;		_Byte_SetByte
 15289 ;;		_Word_GetPair
 15290 ;; This function is called by:
 15291 ;;		_Port_Init
 15292 ;;		_Port_Toggle
 15293 ;; This function uses a non-reentrant model
 15294 ;;
 15295                           
 15296                           	psect	text64
 15297  01145E                     __ptext64:
 15298                           	opt stack 0
 15299  01145E                     _Port_Set:
 15300                           	opt stack 17
 15301                           
 15302                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;incstack = 0
 15306  01145E  0E08               	movlw	8
 15307  011460  0100               	movlb	0	; () banked
 15308  011462  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15309  011464  0100               	movlb	0	; () banked
 15310  011466  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15311  011468  0E00               	movlw	0
 15312  01146A  0100               	movlb	0	; () banked
 15313  01146C  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15314  01146E  0100               	movlb	0	; () banked
 15315  011470  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15316  011472  0E00               	movlw	0
 15317  011474  0100               	movlb	0	; () banked
 15318  011476  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15319  011478  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 15320  01147C  0100               	movlb	0	; () banked
 15321  01147E  6FE0               	movwf	Port_Set@Type& (0+255),b
 15322                           
 15323                           ; BSR set to: 0
 15324                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 15325  011480  0100               	movlb	0	; () banked
 15326  011482  51E0               	movf	Port_Set@Type& (0+255),w,b
 15327  011484  0100               	movlb	0	; () banked
 15328  011486  6FCC               	movwf	??_Port_Set& (0+255),b
 15329  011488  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15330  01148A  0E0E               	movlw	14
 15331  01148C                     u9825:
 15332  01148C  90D8               	bcf	status,0,c
 15333  01148E  0100               	movlb	0	; () banked
 15334  011490  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15335  011492  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15336  011494  2EE8               	decfsz	wreg,f,c
 15337  011496  D7FA               	goto	u9825
 15338  011498  0100               	movlb	0	; () banked
 15339  01149A  51E0               	movf	Port_Set@Type& (0+255),w,b
 15340  01149C  0100               	movlb	0	; () banked
 15341  01149E  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15342  0114A0  6BCF               	clrf	(??_Port_Set+3)& (0+255),b
 15343  0114A2  0E0C               	movlw	12
 15344  0114A4                     u9835:
 15345  0114A4  90D8               	bcf	status,0,c
 15346  0114A6  0100               	movlb	0	; () banked
 15347  0114A8  37CE               	rlcf	(??_Port_Set+2)& (0+255),f,b
 15348  0114AA  37CF               	rlcf	(??_Port_Set+3)& (0+255),f,b
 15349  0114AC  2EE8               	decfsz	wreg,f,c
 15350  0114AE  D7FA               	goto	u9835
 15351  0114B0  0100               	movlb	0	; () banked
 15352  0114B2  51E0               	movf	Port_Set@Type& (0+255),w,b
 15353  0114B4  0100               	movlb	0	; () banked
 15354  0114B6  6FD0               	movwf	(??_Port_Set+4)& (0+255),b
 15355  0114B8  6BD1               	clrf	(??_Port_Set+5)& (0+255),b
 15356  0114BA  0E0A               	movlw	10
 15357  0114BC                     u9845:
 15358  0114BC  90D8               	bcf	status,0,c
 15359  0114BE  0100               	movlb	0	; () banked
 15360  0114C0  37D0               	rlcf	(??_Port_Set+4)& (0+255),f,b
 15361  0114C2  37D1               	rlcf	(??_Port_Set+5)& (0+255),f,b
 15362  0114C4  2EE8               	decfsz	wreg,f,c
 15363  0114C6  D7FA               	goto	u9845
 15364  0114C8  0100               	movlb	0	; () banked
 15365  0114CA  51E0               	movf	Port_Set@Type& (0+255),w,b
 15366  0114CC  0100               	movlb	0	; () banked
 15367  0114CE  6FD3               	movwf	(??_Port_Set+7)& (0+255),b
 15368  0114D0  6BD2               	clrf	(??_Port_Set+6)& (0+255),b
 15369  0114D2  0100               	movlb	0	; () banked
 15370  0114D4  51E0               	movf	Port_Set@Type& (0+255),w,b
 15371  0114D6  0100               	movlb	0	; () banked
 15372  0114D8  6FD4               	movwf	(??_Port_Set+8)& (0+255),b
 15373  0114DA  6BD5               	clrf	(??_Port_Set+9)& (0+255),b
 15374  0114DC  0E06               	movlw	6
 15375  0114DE                     u9855:
 15376  0114DE  90D8               	bcf	status,0,c
 15377  0114E0  0100               	movlb	0	; () banked
 15378  0114E2  37D4               	rlcf	(??_Port_Set+8)& (0+255),f,b
 15379  0114E4  37D5               	rlcf	(??_Port_Set+9)& (0+255),f,b
 15380  0114E6  2EE8               	decfsz	wreg,f,c
 15381  0114E8  D7FA               	goto	u9855
 15382  0114EA  0100               	movlb	0	; () banked
 15383  0114EC  51E0               	movf	Port_Set@Type& (0+255),w,b
 15384  0114EE  0100               	movlb	0	; () banked
 15385  0114F0  6FD6               	movwf	(??_Port_Set+10)& (0+255),b
 15386  0114F2  6BD7               	clrf	(??_Port_Set+11)& (0+255),b
 15387  0114F4  0100               	movlb	0	; () banked
 15388  0114F6  3BD6               	swapf	(??_Port_Set+10)& (0+255),f,b
 15389  0114F8  3BD7               	swapf	(??_Port_Set+11)& (0+255),f,b
 15390  0114FA  0EF0               	movlw	240
 15391  0114FC  17D7               	andwf	(??_Port_Set+11)& (0+255),f,b
 15392  0114FE  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15393  011500  0B0F               	andlw	15
 15394  011502  13D7               	iorwf	(??_Port_Set+11)& (0+255),f,b
 15395  011504  0EF0               	movlw	240
 15396  011506  17D6               	andwf	(??_Port_Set+10)& (0+255),f,b
 15397  011508  0100               	movlb	0	; () banked
 15398  01150A  51E0               	movf	Port_Set@Type& (0+255),w,b
 15399  01150C  0100               	movlb	0	; () banked
 15400  01150E  6FD8               	movwf	(??_Port_Set+12)& (0+255),b
 15401  011510  6BD9               	clrf	(??_Port_Set+13)& (0+255),b
 15402  011512  0100               	movlb	0	; () banked
 15403  011514  90D8               	bcf	status,0,c
 15404  011516  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15405  011518  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15406  01151A  0100               	movlb	0	; () banked
 15407  01151C  90D8               	bcf	status,0,c
 15408  01151E  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15409  011520  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15410  011522  0100               	movlb	0	; () banked
 15411  011524  51E0               	movf	Port_Set@Type& (0+255),w,b
 15412  011526  0100               	movlb	0	; () banked
 15413  011528  6FDA               	movwf	(??_Port_Set+14)& (0+255),b
 15414  01152A  6BDB               	clrf	(??_Port_Set+15)& (0+255),b
 15415  01152C  0100               	movlb	0	; () banked
 15416  01152E  51D8               	movf	(??_Port_Set+12)& (0+255),w,b
 15417  011530  0100               	movlb	0	; () banked
 15418  011532  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15419  011534  0100               	movlb	0	; () banked
 15420  011536  51D9               	movf	(??_Port_Set+13)& (0+255),w,b
 15421  011538  0100               	movlb	0	; () banked
 15422  01153A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15423  01153C  0100               	movlb	0	; () banked
 15424  01153E  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15425  011540  0100               	movlb	0	; () banked
 15426  011542  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15427  011544  0100               	movlb	0	; () banked
 15428  011546  51D7               	movf	(??_Port_Set+11)& (0+255),w,b
 15429  011548  0100               	movlb	0	; () banked
 15430  01154A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15431  01154C  0100               	movlb	0	; () banked
 15432  01154E  51D4               	movf	(??_Port_Set+8)& (0+255),w,b
 15433  011550  0100               	movlb	0	; () banked
 15434  011552  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15435  011554  0100               	movlb	0	; () banked
 15436  011556  51D5               	movf	(??_Port_Set+9)& (0+255),w,b
 15437  011558  0100               	movlb	0	; () banked
 15438  01155A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15439  01155C  0100               	movlb	0	; () banked
 15440  01155E  51D2               	movf	(??_Port_Set+6)& (0+255),w,b
 15441  011560  0100               	movlb	0	; () banked
 15442  011562  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15443  011564  0100               	movlb	0	; () banked
 15444  011566  51D3               	movf	(??_Port_Set+7)& (0+255),w,b
 15445  011568  0100               	movlb	0	; () banked
 15446  01156A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15447  01156C  0100               	movlb	0	; () banked
 15448  01156E  51D0               	movf	(??_Port_Set+4)& (0+255),w,b
 15449  011570  0100               	movlb	0	; () banked
 15450  011572  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15451  011574  0100               	movlb	0	; () banked
 15452  011576  51D1               	movf	(??_Port_Set+5)& (0+255),w,b
 15453  011578  0100               	movlb	0	; () banked
 15454  01157A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15455  01157C  0100               	movlb	0	; () banked
 15456  01157E  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15457  011580  0100               	movlb	0	; () banked
 15458  011582  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15459  011584  0100               	movlb	0	; () banked
 15460  011586  51CF               	movf	(??_Port_Set+3)& (0+255),w,b
 15461  011588  0100               	movlb	0	; () banked
 15462  01158A  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15463  01158C  0100               	movlb	0	; () banked
 15464  01158E  51CC               	movf	??_Port_Set& (0+255),w,b
 15465  011590  0100               	movlb	0	; () banked
 15466  011592  11DA               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15467  011594  0100               	movlb	0	; () banked
 15468  011596  6FDC               	movwf	Port_Set@TypeRequired& (0+255),b
 15469  011598  0100               	movlb	0	; () banked
 15470  01159A  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15471  01159C  0100               	movlb	0	; () banked
 15472  01159E  11DB               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15473  0115A0  0100               	movlb	0	; () banked
 15474  0115A2  6FDD               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15475                           
 15476                           ; BSR set to: 0
 15477                           ;Port.c: 574: UINT16 TypeActual = Type;
 15478  0115A4  C0E0  F0DE         	movff	Port_Set@Type,Port_Set@TypeActual
 15479  0115A8  0100               	movlb	0	; () banked
 15480  0115AA  6BDF               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15481                           
 15482                           ; BSR set to: 0
 15483                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15484  0115AC  0E08               	movlw	8
 15485  0115AE  0100               	movlb	0	; () banked
 15486  0115B0  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15487  0115B2  0100               	movlb	0	; () banked
 15488  0115B4  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15489  0115B6  0E00               	movlw	0
 15490  0115B8  0100               	movlb	0	; () banked
 15491  0115BA  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15492  0115BC  0100               	movlb	0	; () banked
 15493  0115BE  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15494  0115C0  0E01               	movlw	1
 15495  0115C2  0100               	movlb	0	; () banked
 15496  0115C4  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15497  0115C6  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 15498  0115CA  0100               	movlb	0	; () banked
 15499  0115CC  6FCC               	movwf	??_Port_Set& (0+255),b
 15500  0115CE  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15501  0115D0  0100               	movlb	0	; () banked
 15502  0115D2  90D8               	bcf	status,0,c
 15503  0115D4  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15504  0115D6  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15505  0115D8  0100               	movlb	0	; () banked
 15506  0115DA  90D8               	bcf	status,0,c
 15507  0115DC  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15508  0115DE  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15509  0115E0  0100               	movlb	0	; () banked
 15510  0115E2  51CC               	movf	??_Port_Set& (0+255),w,b
 15511  0115E4  0100               	movlb	0	; () banked
 15512  0115E6  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15513  0115E8  0100               	movlb	0	; () banked
 15514  0115EA  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15515  0115EC  0100               	movlb	0	; () banked
 15516  0115EE  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15517                           
 15518                           ; BSR set to: 0
 15519                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15520  0115F0  0E08               	movlw	8
 15521  0115F2  0100               	movlb	0	; () banked
 15522  0115F4  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15523  0115F6  0100               	movlb	0	; () banked
 15524  0115F8  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15525  0115FA  0E00               	movlw	0
 15526  0115FC  0100               	movlb	0	; () banked
 15527  0115FE  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15528  011600  0100               	movlb	0	; () banked
 15529  011602  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15530  011604  0E02               	movlw	2
 15531  011606  0100               	movlb	0	; () banked
 15532  011608  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15533  01160A  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 15534  01160E  0100               	movlb	0	; () banked
 15535  011610  6FCC               	movwf	??_Port_Set& (0+255),b
 15536  011612  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15537  011614  0100               	movlb	0	; () banked
 15538  011616  3BCC               	swapf	??_Port_Set& (0+255),f,b
 15539  011618  3BCD               	swapf	(??_Port_Set+1)& (0+255),f,b
 15540  01161A  0EF0               	movlw	240
 15541  01161C  17CD               	andwf	(??_Port_Set+1)& (0+255),f,b
 15542  01161E  51CC               	movf	??_Port_Set& (0+255),w,b
 15543  011620  0B0F               	andlw	15
 15544  011622  13CD               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15545  011624  0EF0               	movlw	240
 15546  011626  17CC               	andwf	??_Port_Set& (0+255),f,b
 15547  011628  0100               	movlb	0	; () banked
 15548  01162A  51CC               	movf	??_Port_Set& (0+255),w,b
 15549  01162C  0100               	movlb	0	; () banked
 15550  01162E  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15551  011630  0100               	movlb	0	; () banked
 15552  011632  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15553  011634  0100               	movlb	0	; () banked
 15554  011636  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15558  011638  0E08               	movlw	8
 15559  01163A  0100               	movlb	0	; () banked
 15560  01163C  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15561  01163E  0100               	movlb	0	; () banked
 15562  011640  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15563  011642  0E00               	movlw	0
 15564  011644  0100               	movlb	0	; () banked
 15565  011646  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15566  011648  0100               	movlb	0	; () banked
 15567  01164A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15568  01164C  0E03               	movlw	3
 15569  01164E  0100               	movlb	0	; () banked
 15570  011650  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15571  011652  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 15572  011656  0100               	movlb	0	; () banked
 15573  011658  6FCC               	movwf	??_Port_Set& (0+255),b
 15574  01165A  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15575  01165C  0E06               	movlw	6
 15576  01165E                     u9865:
 15577  01165E  90D8               	bcf	status,0,c
 15578  011660  0100               	movlb	0	; () banked
 15579  011662  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15580  011664  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15581  011666  2EE8               	decfsz	wreg,f,c
 15582  011668  D7FA               	goto	u9865
 15583  01166A  0100               	movlb	0	; () banked
 15584  01166C  51CC               	movf	??_Port_Set& (0+255),w,b
 15585  01166E  0100               	movlb	0	; () banked
 15586  011670  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15587  011672  0100               	movlb	0	; () banked
 15588  011674  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15589  011676  0100               	movlb	0	; () banked
 15590  011678  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15594  01167A  0E08               	movlw	8
 15595  01167C  0100               	movlb	0	; () banked
 15596  01167E  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15597  011680  0100               	movlb	0	; () banked
 15598  011682  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15599  011684  0E00               	movlw	0
 15600  011686  0100               	movlb	0	; () banked
 15601  011688  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15602  01168A  0100               	movlb	0	; () banked
 15603  01168C  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15604  01168E  0E04               	movlw	4
 15605  011690  0100               	movlb	0	; () banked
 15606  011692  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15607  011694  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 15608  011698  0100               	movlb	0	; () banked
 15609  01169A  6FCC               	movwf	??_Port_Set& (0+255),b
 15610  01169C  0100               	movlb	0	; () banked
 15611  01169E  51CC               	movf	??_Port_Set& (0+255),w,b
 15612  0116A0  0100               	movlb	0	; () banked
 15613  0116A2  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15614  0116A4  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15615  0116A6  0100               	movlb	0	; () banked
 15616  0116A8  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15617  0116AA  0100               	movlb	0	; () banked
 15618  0116AC  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15619  0116AE  0100               	movlb	0	; () banked
 15620  0116B0  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15621  0116B2  0100               	movlb	0	; () banked
 15622  0116B4  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15623                           
 15624                           ; BSR set to: 0
 15625                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 15626  0116B6  0E08               	movlw	8
 15627  0116B8  0100               	movlb	0	; () banked
 15628  0116BA  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15629  0116BC  0100               	movlb	0	; () banked
 15630  0116BE  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15631  0116C0  0E00               	movlw	0
 15632  0116C2  0100               	movlb	0	; () banked
 15633  0116C4  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15634  0116C6  0100               	movlb	0	; () banked
 15635  0116C8  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15636  0116CA  0E05               	movlw	5
 15637  0116CC  0100               	movlb	0	; () banked
 15638  0116CE  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15639  0116D0  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 15640  0116D4  0100               	movlb	0	; () banked
 15641  0116D6  6FCC               	movwf	??_Port_Set& (0+255),b
 15642  0116D8  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15643  0116DA  0E0A               	movlw	10
 15644  0116DC                     u9875:
 15645  0116DC  90D8               	bcf	status,0,c
 15646  0116DE  0100               	movlb	0	; () banked
 15647  0116E0  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15648  0116E2  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15649  0116E4  2EE8               	decfsz	wreg,f,c
 15650  0116E6  D7FA               	goto	u9875
 15651  0116E8  0100               	movlb	0	; () banked
 15652  0116EA  51CC               	movf	??_Port_Set& (0+255),w,b
 15653  0116EC  0100               	movlb	0	; () banked
 15654  0116EE  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15655  0116F0  0100               	movlb	0	; () banked
 15656  0116F2  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15657  0116F4  0100               	movlb	0	; () banked
 15658  0116F6  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15659                           
 15660                           ; BSR set to: 0
 15661                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 15662  0116F8  0E08               	movlw	8
 15663  0116FA  0100               	movlb	0	; () banked
 15664  0116FC  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15665  0116FE  0100               	movlb	0	; () banked
 15666  011700  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15667  011702  0E00               	movlw	0
 15668  011704  0100               	movlb	0	; () banked
 15669  011706  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15670  011708  0100               	movlb	0	; () banked
 15671  01170A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15672  01170C  0E06               	movlw	6
 15673  01170E  0100               	movlb	0	; () banked
 15674  011710  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15675  011712  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 15676  011716  0100               	movlb	0	; () banked
 15677  011718  6FCC               	movwf	??_Port_Set& (0+255),b
 15678  01171A  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15679  01171C  0E0C               	movlw	12
 15680  01171E                     u9885:
 15681  01171E  90D8               	bcf	status,0,c
 15682  011720  0100               	movlb	0	; () banked
 15683  011722  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15684  011724  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15685  011726  2EE8               	decfsz	wreg,f,c
 15686  011728  D7FA               	goto	u9885
 15687  01172A  0100               	movlb	0	; () banked
 15688  01172C  51CC               	movf	??_Port_Set& (0+255),w,b
 15689  01172E  0100               	movlb	0	; () banked
 15690  011730  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15691  011732  0100               	movlb	0	; () banked
 15692  011734  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15693  011736  0100               	movlb	0	; () banked
 15694  011738  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15695                           
 15696                           ; BSR set to: 0
 15697                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 15698  01173A  0E08               	movlw	8
 15699  01173C  0100               	movlb	0	; () banked
 15700  01173E  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15701  011740  0100               	movlb	0	; () banked
 15702  011742  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15703  011744  0E00               	movlw	0
 15704  011746  0100               	movlb	0	; () banked
 15705  011748  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15706  01174A  0100               	movlb	0	; () banked
 15707  01174C  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15708  01174E  0E07               	movlw	7
 15709  011750  0100               	movlb	0	; () banked
 15710  011752  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15711  011754  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 15712  011758  0100               	movlb	0	; () banked
 15713  01175A  6FCC               	movwf	??_Port_Set& (0+255),b
 15714  01175C  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15715  01175E  0E0E               	movlw	14
 15716  011760                     u9895:
 15717  011760  90D8               	bcf	status,0,c
 15718  011762  0100               	movlb	0	; () banked
 15719  011764  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15720  011766  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15721  011768  2EE8               	decfsz	wreg,f,c
 15722  01176A  D7FA               	goto	u9895
 15723  01176C  0100               	movlb	0	; () banked
 15724  01176E  51CC               	movf	??_Port_Set& (0+255),w,b
 15725  011770  0100               	movlb	0	; () banked
 15726  011772  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15727  011774  0100               	movlb	0	; () banked
 15728  011776  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15729  011778  0100               	movlb	0	; () banked
 15730  01177A  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15731                           
 15732                           ;Port.c: 584: if (TypeRequired == TypeActual)
 15733  01177C  0100               	movlb	0	; () banked
 15734  01177E  51DE               	movf	Port_Set@TypeActual& (0+255),w,b
 15735  011780  0100               	movlb	0	; () banked
 15736  011782  19DC               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 15737  011784  E148               	bnz	l528
 15738  011786  0100               	movlb	0	; () banked
 15739  011788  51DF               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 15740  01178A  0100               	movlb	0	; () banked
 15741  01178C  19DD               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 15742  01178E  A4D8               	btfss	status,2,c
 15743  011790  0012               	return	
 15744  011792  D032               	goto	l526
 15745  011794                     
 15746                           ; BSR set to: 0
 15747                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 15748                           
 15749                           ; BSR set to: 0
 15750  011794  0100               	movlb	0	; () banked
 15751  011796  EE20 F002          	lfsr	2,2
 15752  01179A  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15753  01179C  26D9               	addwf	fsr2l,f,c
 15754  01179E  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15755  0117A0  22DA               	addwfc	fsr2h,f,c
 15756  0117A2  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15757  0117A6  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15758  0117AA  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15759  0117AE  EC47  F0B3         	call	_Byte_SetByte	;wreg free
 15760                           
 15761                           ;Port.c: 594: break;
 15762  0117B2  0012               	return	
 15763  0117B4                     
 15764                           ;Port.c: 597: pValue = ~pValue;
 15765  0117B4  0100               	movlb	0	; () banked
 15766  0117B6  1FCB               	comf	Port_Set@pValue& (0+255),f,b
 15767                           
 15768                           ; BSR set to: 0
 15769                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 15770  0117B8  0100               	movlb	0	; () banked
 15771  0117BA  EE20 F002          	lfsr	2,2
 15772  0117BE  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15773  0117C0  26D9               	addwf	fsr2l,f,c
 15774  0117C2  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15775  0117C4  22DA               	addwfc	fsr2h,f,c
 15776  0117C6  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15777  0117CA  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15778  0117CE  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15779  0117D2  EC47  F0B3         	call	_Byte_SetByte	;wreg free
 15780                           
 15781                           ;Port.c: 599: break;
 15782  0117D6  0012               	return	
 15783  0117D8                     
 15784                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 15785  0117D8  0100               	movlb	0	; () banked
 15786  0117DA  EE20 F004          	lfsr	2,4
 15787  0117DE  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15788  0117E0  26D9               	addwf	fsr2l,f,c
 15789  0117E2  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15790  0117E4  22DA               	addwfc	fsr2h,f,c
 15791  0117E6  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15792  0117EA  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15793  0117EE  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15794  0117F2  EC47  F0B3         	call	_Byte_SetByte	;wreg free
 15795                           
 15796                           ;Port.c: 606: }
 15797                           
 15798                           ;Port.c: 605: break;
 15799                           
 15800                           ;Port.c: 604: default:
 15801                           
 15802                           ;Port.c: 603: break;
 15803  0117F6  0012               	return	
 15804  0117F8                     l526:
 15805  0117F8  0100               	movlb	0	; () banked
 15806  0117FA  51E0               	movf	Port_Set@Type& (0+255),w,b
 15807                           
 15808                           ; Switch size 1, requested type "space"
 15809                           ; Number of cases is 4, Range of values is 0 to 3
 15810                           ; switch strategies available:
 15811                           ; Name         Instructions Cycles
 15812                           ; simple_byte           13     7 (average)
 15813                           ;	Chosen strategy is simple_byte
 15814  0117FC  0A00               	xorlw	0	; case 0
 15815  0117FE  B4D8               	btfsc	status,2,c
 15816  011800  0012               	return	
 15817  011802  0A01               	xorlw	1	; case 1
 15818  011804  B4D8               	btfsc	status,2,c
 15819  011806  D7C6               	goto	l529
 15820  011808  0A03               	xorlw	3	; case 2
 15821  01180A  B4D8               	btfsc	status,2,c
 15822  01180C  D7D3               	goto	l531
 15823  01180E  0A01               	xorlw	1	; case 3
 15824  011810  A4D8               	btfss	status,2,c
 15825                           
 15826                           ; BSR set to: 0
 15827                           
 15828                           ; BSR set to: 0
 15829                           ;Port.c: 607: }
 15830  011812  0012               	return	
 15831  011814  D7E1               	goto	l532
 15832  011816                     l528:
 15833  011816  0012               	return		;funcret
 15834  011818                     __end_of_Port_Set:
 15835                           	opt stack 0
 15836                           tblptru	equ	0xFF8
 15837                           tblptrh	equ	0xFF7
 15838                           tblptrl	equ	0xFF6
 15839                           tablat	equ	0xFF5
 15840                           prodh	equ	0xFF4
 15841                           prodl	equ	0xFF3
 15842                           intcon	equ	0xFF2
 15843                           postinc0	equ	0xFEE
 15844                           wreg	equ	0xFE8
 15845                           indf1	equ	0xFE7
 15846                           postdec1	equ	0xFE5
 15847                           fsr1h	equ	0xFE2
 15848                           fsr1l	equ	0xFE1
 15849                           indf2	equ	0xFDF
 15850                           postinc2	equ	0xFDE
 15851                           postdec2	equ	0xFDD
 15852                           fsr2h	equ	0xFDA
 15853                           fsr2l	equ	0xFD9
 15854                           status	equ	0xFD8
 15855                           
 15856 ;; *************** function _Byte_SetByte *****************
 15857 ;; Defined at:
 15858 ;;		line 110 in file "Library/Types.c"
 15859 ;; Parameters:    Size  Location     Type
 15860 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15861 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15862 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15863 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15864 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15865 ;;		 -> NULL(0), 
 15866 ;;  pValue          1    2[BANK0 ] unsigned char 
 15867 ;; Auto vars:     Size  Location     Type
 15868 ;;		None
 15869 ;; Return value:  Size  Location     Type
 15870 ;;                  1    wreg      void 
 15871 ;; Registers used:
 15872 ;;		fsr2l, fsr2h
 15873 ;; Tracked objects:
 15874 ;;		On entry : 0/0
 15875 ;;		On exit  : 0/0
 15876 ;;		Unchanged: 0/0
 15877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15878 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15882 ;;Total ram usage:        3 bytes
 15883 ;; Hardware stack levels used:    1
 15884 ;; Hardware stack levels required when called:    7
 15885 ;; This function calls:
 15886 ;;		Nothing
 15887 ;; This function is called by:
 15888 ;;		_Port_Set
 15889 ;;		_I2C_Init
 15890 ;; This function uses a non-reentrant model
 15891 ;;
 15892                           
 15893                           	psect	text65
 15894  01668E                     __ptext65:
 15895                           	opt stack 0
 15896  01668E                     _Byte_SetByte:
 15897                           	opt stack 19
 15898                           
 15899                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 15900                           
 15901                           ;incstack = 0
 15902  01668E  C0BA  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 15903  016692  C0BB  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 15904  016696  C0BC  FFDF         	movff	Byte_SetByte@pValue,indf2
 15905  01669A  0012               	return		;funcret
 15906  01669C                     __end_of_Byte_SetByte:
 15907                           	opt stack 0
 15908                           tblptru	equ	0xFF8
 15909                           tblptrh	equ	0xFF7
 15910                           tblptrl	equ	0xFF6
 15911                           tablat	equ	0xFF5
 15912                           prodh	equ	0xFF4
 15913                           prodl	equ	0xFF3
 15914                           intcon	equ	0xFF2
 15915                           postinc0	equ	0xFEE
 15916                           wreg	equ	0xFE8
 15917                           indf1	equ	0xFE7
 15918                           postdec1	equ	0xFE5
 15919                           fsr1h	equ	0xFE2
 15920                           fsr1l	equ	0xFE1
 15921                           indf2	equ	0xFDF
 15922                           postinc2	equ	0xFDE
 15923                           postdec2	equ	0xFDD
 15924                           fsr2h	equ	0xFDA
 15925                           fsr2l	equ	0xFD9
 15926                           status	equ	0xFD8
 15927                           
 15928 ;; *************** function _GetPortTRIS *****************
 15929 ;; Defined at:
 15930 ;;		line 67 in file "Library/Port.c"
 15931 ;; Parameters:    Size  Location     Type
 15932 ;;  pInput          1    wreg     enum E6786
 15933 ;; Auto vars:     Size  Location     Type
 15934 ;;  pInput          1    2[BANK0 ] enum E6786
 15935 ;; Return value:  Size  Location     Type
 15936 ;;                  2    0[BANK0 ] PTR struct Byte
 15937 ;; Registers used:
 15938 ;;		wreg, status,2, status,0
 15939 ;; Tracked objects:
 15940 ;;		On entry : 0/0
 15941 ;;		On exit  : 0/0
 15942 ;;		Unchanged: 0/0
 15943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15944 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15947 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15948 ;;Total ram usage:        3 bytes
 15949 ;; Hardware stack levels used:    1
 15950 ;; Hardware stack levels required when called:    7
 15951 ;; This function calls:
 15952 ;;		Nothing
 15953 ;; This function is called by:
 15954 ;;		_Port_Init
 15955 ;; This function uses a non-reentrant model
 15956 ;;
 15957                           
 15958                           	psect	text66
 15959  014818                     __ptext66:
 15960                           	opt stack 0
 15961  014818                     _GetPortTRIS:
 15962                           	opt stack 20
 15963                           
 15964                           ;incstack = 0
 15965                           ;GetPortTRIS@pInput stored from wreg
 15966  014818  0100               	movlb	0	; () banked
 15967  01481A  6FBC               	movwf	GetPortTRIS@pInput& (0+255),b
 15968                           
 15969                           ;Port.c: 69: switch (pInput)
 15970  01481C  D038               	goto	l363
 15971  01481E                     
 15972                           ;Port.c: 72: return (BytePtr)&TRISA;
 15973  01481E  0E92               	movlw	146
 15974  014820  0100               	movlb	0	; () banked
 15975  014822  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15976  014824  0E0F               	movlw	15
 15977  014826  0100               	movlb	0	; () banked
 15978  014828  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15979                           
 15980                           ; BSR set to: 0
 15981  01482A  0012               	return	
 15982  01482C                     
 15983                           ; BSR set to: 0
 15984                           ;Port.c: 74: return (BytePtr)&TRISB;
 15985                           
 15986                           ; BSR set to: 0
 15987  01482C  0E93               	movlw	147
 15988  01482E  0100               	movlb	0	; () banked
 15989  014830  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15990  014832  0E0F               	movlw	15
 15991  014834  0100               	movlb	0	; () banked
 15992  014836  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15993                           
 15994                           ; BSR set to: 0
 15995  014838  0012               	return	
 15996  01483A                     
 15997                           ; BSR set to: 0
 15998                           ;Port.c: 76: return (BytePtr)&TRISC;
 15999                           
 16000                           ; BSR set to: 0
 16001  01483A  0E94               	movlw	148
 16002  01483C  0100               	movlb	0	; () banked
 16003  01483E  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16004  014840  0E0F               	movlw	15
 16005  014842  0100               	movlb	0	; () banked
 16006  014844  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16007                           
 16008                           ; BSR set to: 0
 16009  014846  0012               	return	
 16010  014848                     
 16011                           ; BSR set to: 0
 16012                           ;Port.c: 78: return (BytePtr)&TRISD;
 16013                           
 16014                           ; BSR set to: 0
 16015  014848  0E95               	movlw	149
 16016  01484A  0100               	movlb	0	; () banked
 16017  01484C  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16018  01484E  0E0F               	movlw	15
 16019  014850  0100               	movlb	0	; () banked
 16020  014852  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16021                           
 16022                           ; BSR set to: 0
 16023  014854  0012               	return	
 16024  014856                     
 16025                           ; BSR set to: 0
 16026                           ;Port.c: 80: return (BytePtr)&TRISE;
 16027                           
 16028                           ; BSR set to: 0
 16029  014856  0E96               	movlw	150
 16030  014858  0100               	movlb	0	; () banked
 16031  01485A  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16032  01485C  0E0F               	movlw	15
 16033  01485E  0100               	movlb	0	; () banked
 16034  014860  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16035                           
 16036                           ; BSR set to: 0
 16037  014862  0012               	return	
 16038  014864                     
 16039                           ; BSR set to: 0
 16040                           ;Port.c: 82: return (BytePtr)&TRISF;
 16041                           
 16042                           ; BSR set to: 0
 16043  014864  0E97               	movlw	151
 16044  014866  0100               	movlb	0	; () banked
 16045  014868  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16046  01486A  0E0F               	movlw	15
 16047  01486C  0100               	movlb	0	; () banked
 16048  01486E  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16049                           
 16050                           ; BSR set to: 0
 16051  014870  0012               	return	
 16052  014872                     
 16053                           ; BSR set to: 0
 16054                           ;Port.c: 84: return (BytePtr)&TRISG;
 16055                           
 16056                           ; BSR set to: 0
 16057  014872  0E98               	movlw	152
 16058  014874  0100               	movlb	0	; () banked
 16059  014876  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16060  014878  0E0F               	movlw	15
 16061  01487A  0100               	movlb	0	; () banked
 16062  01487C  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16063                           
 16064                           ; BSR set to: 0
 16065  01487E  0012               	return	
 16066  014880                     
 16067                           ; BSR set to: 0
 16068                           ;Port.c: 86: return (void*)0;
 16069                           
 16070                           ; BSR set to: 0
 16071  014880  0E00               	movlw	0
 16072  014882  0100               	movlb	0	; () banked
 16073  014884  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16074  014886  0E00               	movlw	0
 16075  014888  0100               	movlb	0	; () banked
 16076  01488A  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16077                           
 16078                           ; BSR set to: 0
 16079                           ;Port.c: 87: }
 16080                           
 16081                           ; BSR set to: 0
 16082  01488C  0012               	return	
 16083  01488E                     l363:
 16084                           
 16085                           ; BSR set to: 0
 16086  01488E  0100               	movlb	0	; () banked
 16087  014890  51BC               	movf	GetPortTRIS@pInput& (0+255),w,b
 16088                           
 16089                           ; Switch size 1, requested type "space"
 16090                           ; Number of cases is 7, Range of values is 0 to 6
 16091                           ; switch strategies available:
 16092                           ; Name         Instructions Cycles
 16093                           ; simple_byte           22    12 (average)
 16094                           ;	Chosen strategy is simple_byte
 16095  014892  0A00               	xorlw	0	; case 0
 16096  014894  B4D8               	btfsc	status,2,c
 16097  014896  D7C3               	goto	l364
 16098  014898  0A01               	xorlw	1	; case 1
 16099  01489A  B4D8               	btfsc	status,2,c
 16100  01489C  D7C7               	goto	l366
 16101  01489E  0A03               	xorlw	3	; case 2
 16102  0148A0  B4D8               	btfsc	status,2,c
 16103  0148A2  D7CB               	goto	l367
 16104  0148A4  0A01               	xorlw	1	; case 3
 16105  0148A6  B4D8               	btfsc	status,2,c
 16106  0148A8  D7CF               	goto	l368
 16107  0148AA  0A07               	xorlw	7	; case 4
 16108  0148AC  B4D8               	btfsc	status,2,c
 16109  0148AE  D7D3               	goto	l369
 16110  0148B0  0A01               	xorlw	1	; case 5
 16111  0148B2  B4D8               	btfsc	status,2,c
 16112  0148B4  D7D7               	goto	l370
 16113  0148B6  0A03               	xorlw	3	; case 6
 16114  0148B8  B4D8               	btfsc	status,2,c
 16115  0148BA  D7DB               	goto	l371
 16116  0148BC  D7E1               	goto	l372
 16117  0148BE                     __end_of_GetPortTRIS:
 16118                           	opt stack 0
 16119                           tblptru	equ	0xFF8
 16120                           tblptrh	equ	0xFF7
 16121                           tblptrl	equ	0xFF6
 16122                           tablat	equ	0xFF5
 16123                           prodh	equ	0xFF4
 16124                           prodl	equ	0xFF3
 16125                           intcon	equ	0xFF2
 16126                           postinc0	equ	0xFEE
 16127                           wreg	equ	0xFE8
 16128                           indf1	equ	0xFE7
 16129                           postdec1	equ	0xFE5
 16130                           fsr1h	equ	0xFE2
 16131                           fsr1l	equ	0xFE1
 16132                           indf2	equ	0xFDF
 16133                           postinc2	equ	0xFDE
 16134                           postdec2	equ	0xFDD
 16135                           fsr2h	equ	0xFDA
 16136                           fsr2l	equ	0xFD9
 16137                           status	equ	0xFD8
 16138                           
 16139 ;; *************** function _GetPortProperties *****************
 16140 ;; Defined at:
 16141 ;;		line 21 in file "Library/Port.c"
 16142 ;; Parameters:    Size  Location     Type
 16143 ;;  pInput          1    wreg     enum E6786
 16144 ;; Auto vars:     Size  Location     Type
 16145 ;;  pInput          1    2[BANK0 ] enum E6786
 16146 ;; Return value:  Size  Location     Type
 16147 ;;                  2    0[BANK0 ] PTR struct PortProperty
 16148 ;; Registers used:
 16149 ;;		wreg, status,2, status,0
 16150 ;; Tracked objects:
 16151 ;;		On entry : 0/0
 16152 ;;		On exit  : 0/0
 16153 ;;		Unchanged: 0/0
 16154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16155 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16158 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16159 ;;Total ram usage:        3 bytes
 16160 ;; Hardware stack levels used:    1
 16161 ;; Hardware stack levels required when called:    7
 16162 ;; This function calls:
 16163 ;;		Nothing
 16164 ;; This function is called by:
 16165 ;;		_Port_Init
 16166 ;; This function uses a non-reentrant model
 16167 ;;
 16168                           
 16169                           	psect	text67
 16170  0148BE                     __ptext67:
 16171                           	opt stack 0
 16172  0148BE                     _GetPortProperties:
 16173                           	opt stack 20
 16174                           
 16175                           ; BSR set to: 0
 16176                           ;incstack = 0
 16177                           ;GetPortProperties@pInput stored from wreg
 16178  0148BE  0100               	movlb	0	; () banked
 16179  0148C0  6FBC               	movwf	GetPortProperties@pInput& (0+255),b
 16180                           
 16181                           ;Port.c: 23: switch (pInput)
 16182  0148C2  D038               	goto	l337
 16183  0148C4                     
 16184                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 16185  0148C4  0E0B               	movlw	low _PortA_Property
 16186  0148C6  0100               	movlb	0	; () banked
 16187  0148C8  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16188  0148CA  0EFF               	movlw	high _PortA_Property
 16189  0148CC  0100               	movlb	0	; () banked
 16190  0148CE  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16191                           
 16192                           ; BSR set to: 0
 16193  0148D0  0012               	return	
 16194  0148D2                     
 16195                           ; BSR set to: 0
 16196                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 16197                           
 16198                           ; BSR set to: 0
 16199  0148D2  0E09               	movlw	low _PortB_Property
 16200  0148D4  0100               	movlb	0	; () banked
 16201  0148D6  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16202  0148D8  0EFF               	movlw	high _PortB_Property
 16203  0148DA  0100               	movlb	0	; () banked
 16204  0148DC  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16205                           
 16206                           ; BSR set to: 0
 16207  0148DE  0012               	return	
 16208  0148E0                     
 16209                           ; BSR set to: 0
 16210                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 16211                           
 16212                           ; BSR set to: 0
 16213  0148E0  0E07               	movlw	low _PortC_Property
 16214  0148E2  0100               	movlb	0	; () banked
 16215  0148E4  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16216  0148E6  0EFF               	movlw	high _PortC_Property
 16217  0148E8  0100               	movlb	0	; () banked
 16218  0148EA  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16219                           
 16220                           ; BSR set to: 0
 16221  0148EC  0012               	return	
 16222  0148EE                     
 16223                           ; BSR set to: 0
 16224                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 16225                           
 16226                           ; BSR set to: 0
 16227  0148EE  0E05               	movlw	low _PortD_Property
 16228  0148F0  0100               	movlb	0	; () banked
 16229  0148F2  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16230  0148F4  0EFF               	movlw	high _PortD_Property
 16231  0148F6  0100               	movlb	0	; () banked
 16232  0148F8  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16233                           
 16234                           ; BSR set to: 0
 16235  0148FA  0012               	return	
 16236  0148FC                     
 16237                           ; BSR set to: 0
 16238                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 16239                           
 16240                           ; BSR set to: 0
 16241  0148FC  0E03               	movlw	low _PortE_Property
 16242  0148FE  0100               	movlb	0	; () banked
 16243  014900  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16244  014902  0EFF               	movlw	high _PortE_Property
 16245  014904  0100               	movlb	0	; () banked
 16246  014906  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16247                           
 16248                           ; BSR set to: 0
 16249  014908  0012               	return	
 16250  01490A                     
 16251                           ; BSR set to: 0
 16252                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 16253                           
 16254                           ; BSR set to: 0
 16255  01490A  0E01               	movlw	low _PortF_Property
 16256  01490C  0100               	movlb	0	; () banked
 16257  01490E  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16258  014910  0EFF               	movlw	high _PortF_Property
 16259  014912  0100               	movlb	0	; () banked
 16260  014914  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16261                           
 16262                           ; BSR set to: 0
 16263  014916  0012               	return	
 16264  014918                     
 16265                           ; BSR set to: 0
 16266                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 16267                           
 16268                           ; BSR set to: 0
 16269  014918  0EFF               	movlw	low _PortG_Property
 16270  01491A  0100               	movlb	0	; () banked
 16271  01491C  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16272  01491E  0EFE               	movlw	high _PortG_Property
 16273  014920  0100               	movlb	0	; () banked
 16274  014922  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16275                           
 16276                           ; BSR set to: 0
 16277  014924  0012               	return	
 16278  014926                     
 16279                           ; BSR set to: 0
 16280                           ;Port.c: 40: return (void*)0;
 16281                           
 16282                           ; BSR set to: 0
 16283  014926  0E00               	movlw	0
 16284  014928  0100               	movlb	0	; () banked
 16285  01492A  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16286  01492C  0E00               	movlw	0
 16287  01492E  0100               	movlb	0	; () banked
 16288  014930  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16289                           
 16290                           ; BSR set to: 0
 16291                           ;Port.c: 41: }
 16292                           
 16293                           ; BSR set to: 0
 16294  014932  0012               	return	
 16295  014934                     l337:
 16296                           
 16297                           ; BSR set to: 0
 16298  014934  0100               	movlb	0	; () banked
 16299  014936  51BC               	movf	GetPortProperties@pInput& (0+255),w,b
 16300                           
 16301                           ; Switch size 1, requested type "space"
 16302                           ; Number of cases is 7, Range of values is 0 to 6
 16303                           ; switch strategies available:
 16304                           ; Name         Instructions Cycles
 16305                           ; simple_byte           22    12 (average)
 16306                           ;	Chosen strategy is simple_byte
 16307  014938  0A00               	xorlw	0	; case 0
 16308  01493A  B4D8               	btfsc	status,2,c
 16309  01493C  D7C3               	goto	l338
 16310  01493E  0A01               	xorlw	1	; case 1
 16311  014940  B4D8               	btfsc	status,2,c
 16312  014942  D7C7               	goto	l340
 16313  014944  0A03               	xorlw	3	; case 2
 16314  014946  B4D8               	btfsc	status,2,c
 16315  014948  D7CB               	goto	l341
 16316  01494A  0A01               	xorlw	1	; case 3
 16317  01494C  B4D8               	btfsc	status,2,c
 16318  01494E  D7CF               	goto	l342
 16319  014950  0A07               	xorlw	7	; case 4
 16320  014952  B4D8               	btfsc	status,2,c
 16321  014954  D7D3               	goto	l343
 16322  014956  0A01               	xorlw	1	; case 5
 16323  014958  B4D8               	btfsc	status,2,c
 16324  01495A  D7D7               	goto	l344
 16325  01495C  0A03               	xorlw	3	; case 6
 16326  01495E  B4D8               	btfsc	status,2,c
 16327  014960  D7DB               	goto	l345
 16328  014962  D7E1               	goto	l346
 16329  014964                     __end_of_GetPortProperties:
 16330                           	opt stack 0
 16331                           tblptru	equ	0xFF8
 16332                           tblptrh	equ	0xFF7
 16333                           tblptrl	equ	0xFF6
 16334                           tablat	equ	0xFF5
 16335                           prodh	equ	0xFF4
 16336                           prodl	equ	0xFF3
 16337                           intcon	equ	0xFF2
 16338                           postinc0	equ	0xFEE
 16339                           wreg	equ	0xFE8
 16340                           indf1	equ	0xFE7
 16341                           postdec1	equ	0xFE5
 16342                           fsr1h	equ	0xFE2
 16343                           fsr1l	equ	0xFE1
 16344                           indf2	equ	0xFDF
 16345                           postinc2	equ	0xFDE
 16346                           postdec2	equ	0xFDD
 16347                           fsr2h	equ	0xFDA
 16348                           fsr2l	equ	0xFD9
 16349                           status	equ	0xFD8
 16350                           
 16351 ;; *************** function _GetPortPORT *****************
 16352 ;; Defined at:
 16353 ;;		line 44 in file "Library/Port.c"
 16354 ;; Parameters:    Size  Location     Type
 16355 ;;  pInput          1    wreg     enum E6786
 16356 ;; Auto vars:     Size  Location     Type
 16357 ;;  pInput          1    2[BANK0 ] enum E6786
 16358 ;; Return value:  Size  Location     Type
 16359 ;;                  2    0[BANK0 ] PTR struct Byte
 16360 ;; Registers used:
 16361 ;;		wreg, status,2, status,0
 16362 ;; Tracked objects:
 16363 ;;		On entry : 0/0
 16364 ;;		On exit  : 0/0
 16365 ;;		Unchanged: 0/0
 16366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16367 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16370 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16371 ;;Total ram usage:        3 bytes
 16372 ;; Hardware stack levels used:    1
 16373 ;; Hardware stack levels required when called:    7
 16374 ;; This function calls:
 16375 ;;		Nothing
 16376 ;; This function is called by:
 16377 ;;		_Port_Init
 16378 ;; This function uses a non-reentrant model
 16379 ;;
 16380                           
 16381                           	psect	text68
 16382  014964                     __ptext68:
 16383                           	opt stack 0
 16384  014964                     _GetPortPORT:
 16385                           	opt stack 20
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;incstack = 0
 16389                           ;GetPortPORT@pInput stored from wreg
 16390  014964  0100               	movlb	0	; () banked
 16391  014966  6FBC               	movwf	GetPortPORT@pInput& (0+255),b
 16392                           
 16393                           ;Port.c: 46: switch (pInput)
 16394  014968  D038               	goto	l350
 16395  01496A                     
 16396                           ;Port.c: 49: return (BytePtr)&PORTA;
 16397  01496A  0E80               	movlw	128
 16398  01496C  0100               	movlb	0	; () banked
 16399  01496E  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16400  014970  0E0F               	movlw	15
 16401  014972  0100               	movlb	0	; () banked
 16402  014974  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16403                           
 16404                           ; BSR set to: 0
 16405  014976  0012               	return	
 16406  014978                     
 16407                           ; BSR set to: 0
 16408                           ;Port.c: 51: return (BytePtr)&PORTB;
 16409                           
 16410                           ; BSR set to: 0
 16411  014978  0E81               	movlw	129
 16412  01497A  0100               	movlb	0	; () banked
 16413  01497C  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16414  01497E  0E0F               	movlw	15
 16415  014980  0100               	movlb	0	; () banked
 16416  014982  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16417                           
 16418                           ; BSR set to: 0
 16419  014984  0012               	return	
 16420  014986                     
 16421                           ; BSR set to: 0
 16422                           ;Port.c: 53: return (BytePtr)&PORTC;
 16423                           
 16424                           ; BSR set to: 0
 16425  014986  0E82               	movlw	130
 16426  014988  0100               	movlb	0	; () banked
 16427  01498A  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16428  01498C  0E0F               	movlw	15
 16429  01498E  0100               	movlb	0	; () banked
 16430  014990  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16431                           
 16432                           ; BSR set to: 0
 16433  014992  0012               	return	
 16434  014994                     
 16435                           ; BSR set to: 0
 16436                           ;Port.c: 55: return (BytePtr)&PORTD;
 16437                           
 16438                           ; BSR set to: 0
 16439  014994  0E83               	movlw	131
 16440  014996  0100               	movlb	0	; () banked
 16441  014998  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16442  01499A  0E0F               	movlw	15
 16443  01499C  0100               	movlb	0	; () banked
 16444  01499E  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16445                           
 16446                           ; BSR set to: 0
 16447  0149A0  0012               	return	
 16448  0149A2                     
 16449                           ; BSR set to: 0
 16450                           ;Port.c: 57: return (BytePtr)&PORTE;
 16451                           
 16452                           ; BSR set to: 0
 16453  0149A2  0E84               	movlw	132
 16454  0149A4  0100               	movlb	0	; () banked
 16455  0149A6  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16456  0149A8  0E0F               	movlw	15
 16457  0149AA  0100               	movlb	0	; () banked
 16458  0149AC  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16459                           
 16460                           ; BSR set to: 0
 16461  0149AE  0012               	return	
 16462  0149B0                     
 16463                           ; BSR set to: 0
 16464                           ;Port.c: 59: return (BytePtr)&PORTF;
 16465                           
 16466                           ; BSR set to: 0
 16467  0149B0  0E85               	movlw	133
 16468  0149B2  0100               	movlb	0	; () banked
 16469  0149B4  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16470  0149B6  0E0F               	movlw	15
 16471  0149B8  0100               	movlb	0	; () banked
 16472  0149BA  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16473                           
 16474                           ; BSR set to: 0
 16475  0149BC  0012               	return	
 16476  0149BE                     
 16477                           ; BSR set to: 0
 16478                           ;Port.c: 61: return (BytePtr)&PORTG;
 16479                           
 16480                           ; BSR set to: 0
 16481  0149BE  0E86               	movlw	134
 16482  0149C0  0100               	movlb	0	; () banked
 16483  0149C2  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16484  0149C4  0E0F               	movlw	15
 16485  0149C6  0100               	movlb	0	; () banked
 16486  0149C8  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16487                           
 16488                           ; BSR set to: 0
 16489  0149CA  0012               	return	
 16490  0149CC                     
 16491                           ; BSR set to: 0
 16492                           ;Port.c: 63: return (void*)0;
 16493                           
 16494                           ; BSR set to: 0
 16495  0149CC  0E00               	movlw	0
 16496  0149CE  0100               	movlb	0	; () banked
 16497  0149D0  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16498  0149D2  0E00               	movlw	0
 16499  0149D4  0100               	movlb	0	; () banked
 16500  0149D6  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16501                           
 16502                           ; BSR set to: 0
 16503                           ;Port.c: 64: }
 16504                           
 16505                           ; BSR set to: 0
 16506  0149D8  0012               	return	
 16507  0149DA                     l350:
 16508                           
 16509                           ; BSR set to: 0
 16510  0149DA  0100               	movlb	0	; () banked
 16511  0149DC  51BC               	movf	GetPortPORT@pInput& (0+255),w,b
 16512                           
 16513                           ; Switch size 1, requested type "space"
 16514                           ; Number of cases is 7, Range of values is 0 to 6
 16515                           ; switch strategies available:
 16516                           ; Name         Instructions Cycles
 16517                           ; simple_byte           22    12 (average)
 16518                           ;	Chosen strategy is simple_byte
 16519  0149DE  0A00               	xorlw	0	; case 0
 16520  0149E0  B4D8               	btfsc	status,2,c
 16521  0149E2  D7C3               	goto	l351
 16522  0149E4  0A01               	xorlw	1	; case 1
 16523  0149E6  B4D8               	btfsc	status,2,c
 16524  0149E8  D7C7               	goto	l353
 16525  0149EA  0A03               	xorlw	3	; case 2
 16526  0149EC  B4D8               	btfsc	status,2,c
 16527  0149EE  D7CB               	goto	l354
 16528  0149F0  0A01               	xorlw	1	; case 3
 16529  0149F2  B4D8               	btfsc	status,2,c
 16530  0149F4  D7CF               	goto	l355
 16531  0149F6  0A07               	xorlw	7	; case 4
 16532  0149F8  B4D8               	btfsc	status,2,c
 16533  0149FA  D7D3               	goto	l356
 16534  0149FC  0A01               	xorlw	1	; case 5
 16535  0149FE  B4D8               	btfsc	status,2,c
 16536  014A00  D7D7               	goto	l357
 16537  014A02  0A03               	xorlw	3	; case 6
 16538  014A04  B4D8               	btfsc	status,2,c
 16539  014A06  D7DB               	goto	l358
 16540  014A08  D7E1               	goto	l359
 16541  014A0A                     __end_of_GetPortPORT:
 16542                           	opt stack 0
 16543                           tblptru	equ	0xFF8
 16544                           tblptrh	equ	0xFF7
 16545                           tblptrl	equ	0xFF6
 16546                           tablat	equ	0xFF5
 16547                           prodh	equ	0xFF4
 16548                           prodl	equ	0xFF3
 16549                           intcon	equ	0xFF2
 16550                           postinc0	equ	0xFEE
 16551                           wreg	equ	0xFE8
 16552                           indf1	equ	0xFE7
 16553                           postdec1	equ	0xFE5
 16554                           fsr1h	equ	0xFE2
 16555                           fsr1l	equ	0xFE1
 16556                           indf2	equ	0xFDF
 16557                           postinc2	equ	0xFDE
 16558                           postdec2	equ	0xFDD
 16559                           fsr2h	equ	0xFDA
 16560                           fsr2l	equ	0xFD9
 16561                           status	equ	0xFD8
 16562                           
 16563 ;; *************** function _LED_Init *****************
 16564 ;; Defined at:
 16565 ;;		line 15 in file "Library/LED.c"
 16566 ;; Parameters:    Size  Location     Type
 16567 ;;  pLED            1    wreg     enum E6739
 16568 ;; Auto vars:     Size  Location     Type
 16569 ;;  pLED            1   45[BANK0 ] enum E6739
 16570 ;; Return value:  Size  Location     Type
 16571 ;;                  1    wreg      void 
 16572 ;; Registers used:
 16573 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16574 ;; Tracked objects:
 16575 ;;		On entry : 0/0
 16576 ;;		On exit  : 0/0
 16577 ;;		Unchanged: 0/0
 16578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16582 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16583 ;;Total ram usage:        1 bytes
 16584 ;; Hardware stack levels used:    1
 16585 ;; Hardware stack levels required when called:   12
 16586 ;; This function calls:
 16587 ;;		_LED_Set
 16588 ;;		_Port_SetPinType
 16589 ;; This function is called by:
 16590 ;;		_MXK_Init
 16591 ;; This function uses a non-reentrant model
 16592 ;;
 16593                           
 16594                           	psect	text69
 16595  015898                     __ptext69:
 16596                           	opt stack 0
 16597  015898                     _LED_Init:
 16598                           	opt stack 16
 16599                           
 16600                           ; BSR set to: 0
 16601                           ;incstack = 0
 16602                           ;LED_Init@pLED stored from wreg
 16603  015898  0100               	movlb	0	; () banked
 16604  01589A  6FE7               	movwf	LED_Init@pLED& (0+255),b
 16605                           
 16606                           ;LED.c: 17: switch (pLED)
 16607  01589C  D01E               	goto	l220
 16608  01589E                     
 16609                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16610  01589E  0EA5               	movlw	low _PortC
 16611  0158A0  0100               	movlb	0	; () banked
 16612  0158A2  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16613  0158A4  0E00               	movlw	high _PortC
 16614  0158A6  0100               	movlb	0	; () banked
 16615  0158A8  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16616  0158AA  0E00               	movlw	0
 16617  0158AC  0100               	movlb	0	; () banked
 16618  0158AE  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16619  0158B0  0E03               	movlw	3
 16620  0158B2  0100               	movlb	0	; () banked
 16621  0158B4  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16622  0158B6  EC5B  F093         	call	_Port_SetPinType	;wreg free
 16623                           
 16624                           ;LED.c: 21: break;
 16625  0158BA  D017               	goto	l222
 16626  0158BC                     
 16627                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 16628  0158BC  0EA5               	movlw	low _PortC
 16629  0158BE  0100               	movlb	0	; () banked
 16630  0158C0  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16631  0158C2  0E00               	movlw	high _PortC
 16632  0158C4  0100               	movlb	0	; () banked
 16633  0158C6  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16634  0158C8  0E01               	movlw	1
 16635  0158CA  0100               	movlb	0	; () banked
 16636  0158CC  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16637  0158CE  0E03               	movlw	3
 16638  0158D0  0100               	movlb	0	; () banked
 16639  0158D2  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16640  0158D4  EC5B  F093         	call	_Port_SetPinType	;wreg free
 16641                           
 16642                           ;LED.c: 25: }
 16643                           
 16644                           ;LED.c: 24: break;
 16645  0158D8  D008               	goto	l222
 16646  0158DA                     l220:
 16647  0158DA  0100               	movlb	0	; () banked
 16648  0158DC  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16649                           
 16650                           ; Switch size 1, requested type "space"
 16651                           ; Number of cases is 2, Range of values is 0 to 1
 16652                           ; switch strategies available:
 16653                           ; Name         Instructions Cycles
 16654                           ; simple_byte            7     4 (average)
 16655                           ;	Chosen strategy is simple_byte
 16656  0158DE  0A00               	xorlw	0	; case 0
 16657  0158E0  B4D8               	btfsc	status,2,c
 16658  0158E2  D7DD               	goto	l221
 16659  0158E4  0A01               	xorlw	1	; case 1
 16660  0158E6  B4D8               	btfsc	status,2,c
 16661  0158E8  D7E9               	goto	l223
 16662  0158EA                     l222:
 16663                           
 16664                           ;LED.c: 26: LED_Set(pLED, 0);
 16665                           
 16666                           ; BSR set to: 0
 16667  0158EA  0E00               	movlw	0
 16668  0158EC  0100               	movlb	0	; () banked
 16669  0158EE  6FCE               	movwf	LED_Set@pValue& (0+255),b
 16670  0158F0  0100               	movlb	0	; () banked
 16671  0158F2  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16672  0158F4  EC8A  F0AD         	call	_LED_Set
 16673  0158F8  0012               	return		;funcret
 16674  0158FA                     __end_of_LED_Init:
 16675                           	opt stack 0
 16676                           tblptru	equ	0xFF8
 16677                           tblptrh	equ	0xFF7
 16678                           tblptrl	equ	0xFF6
 16679                           tablat	equ	0xFF5
 16680                           prodh	equ	0xFF4
 16681                           prodl	equ	0xFF3
 16682                           intcon	equ	0xFF2
 16683                           postinc0	equ	0xFEE
 16684                           wreg	equ	0xFE8
 16685                           indf1	equ	0xFE7
 16686                           postdec1	equ	0xFE5
 16687                           fsr1h	equ	0xFE2
 16688                           fsr1l	equ	0xFE1
 16689                           indf2	equ	0xFDF
 16690                           postinc2	equ	0xFDE
 16691                           postdec2	equ	0xFDD
 16692                           fsr2h	equ	0xFDA
 16693                           fsr2l	equ	0xFD9
 16694                           status	equ	0xFD8
 16695                           
 16696 ;; *************** function _LED_Set *****************
 16697 ;; Defined at:
 16698 ;;		line 33 in file "Library/LED.c"
 16699 ;; Parameters:    Size  Location     Type
 16700 ;;  pLED            1    wreg     enum E6739
 16701 ;;  pValue          1   20[BANK0 ] unsigned char 
 16702 ;; Auto vars:     Size  Location     Type
 16703 ;;  pLED            1   21[BANK0 ] enum E6739
 16704 ;; Return value:  Size  Location     Type
 16705 ;;                  1    wreg      void 
 16706 ;; Registers used:
 16707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16708 ;; Tracked objects:
 16709 ;;		On entry : 0/0
 16710 ;;		On exit  : 0/0
 16711 ;;		Unchanged: 0/0
 16712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16713 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16717 ;;Total ram usage:        2 bytes
 16718 ;; Hardware stack levels used:    1
 16719 ;; Hardware stack levels required when called:   11
 16720 ;; This function calls:
 16721 ;;		_Port_SetPin
 16722 ;; This function is called by:
 16723 ;;		_LED_Init
 16724 ;;		_SYSTEM_Initialize
 16725 ;; This function uses a non-reentrant model
 16726 ;;
 16727                           
 16728                           	psect	text70
 16729  015B14                     __ptext70:
 16730                           	opt stack 0
 16731  015B14                     _LED_Set:
 16732                           	opt stack 16
 16733                           
 16734                           ;incstack = 0
 16735                           ;LED_Set@pLED stored from wreg
 16736  015B14  0100               	movlb	0	; () banked
 16737  015B16  6FCF               	movwf	LED_Set@pLED& (0+255),b
 16738                           
 16739                           ;LED.c: 35: switch (pLED)
 16740  015B18  D01C               	goto	l227
 16741  015B1A                     
 16742                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 16743  015B1A  0EA5               	movlw	low _PortC
 16744  015B1C  0100               	movlb	0	; () banked
 16745  015B1E  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16746  015B20  0E00               	movlw	high _PortC
 16747  015B22  0100               	movlb	0	; () banked
 16748  015B24  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16749  015B26  0E00               	movlw	0
 16750  015B28  0100               	movlb	0	; () banked
 16751  015B2A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16752  015B2C  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16753  015B30  ECC8  F09F         	call	_Port_SetPin	;wreg free
 16754                           
 16755                           ;LED.c: 39: break;
 16756  015B34  0012               	return	
 16757  015B36                     
 16758                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 16759  015B36  0EA5               	movlw	low _PortC
 16760  015B38  0100               	movlb	0	; () banked
 16761  015B3A  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16762  015B3C  0E00               	movlw	high _PortC
 16763  015B3E  0100               	movlb	0	; () banked
 16764  015B40  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16765  015B42  0E01               	movlw	1
 16766  015B44  0100               	movlb	0	; () banked
 16767  015B46  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16768  015B48  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16769  015B4C  ECC8  F09F         	call	_Port_SetPin	;wreg free
 16770                           
 16771                           ;LED.c: 43: }
 16772                           
 16773                           ;LED.c: 42: break;
 16774  015B50  0012               	return	
 16775  015B52                     l227:
 16776  015B52  0100               	movlb	0	; () banked
 16777  015B54  51CF               	movf	LED_Set@pLED& (0+255),w,b
 16778                           
 16779                           ; Switch size 1, requested type "space"
 16780                           ; Number of cases is 2, Range of values is 0 to 1
 16781                           ; switch strategies available:
 16782                           ; Name         Instructions Cycles
 16783                           ; simple_byte            7     4 (average)
 16784                           ;	Chosen strategy is simple_byte
 16785  015B56  0A00               	xorlw	0	; case 0
 16786  015B58  B4D8               	btfsc	status,2,c
 16787  015B5A  D7DF               	goto	l228
 16788  015B5C  0A01               	xorlw	1	; case 1
 16789  015B5E  A4D8               	btfss	status,2,c
 16790  015B60  0012               	return	
 16791  015B62  D7E9               	goto	l230
 16792  015B64                     __end_of_LED_Set:
 16793                           	opt stack 0
 16794                           tblptru	equ	0xFF8
 16795                           tblptrh	equ	0xFF7
 16796                           tblptrl	equ	0xFF6
 16797                           tablat	equ	0xFF5
 16798                           prodh	equ	0xFF4
 16799                           prodl	equ	0xFF3
 16800                           intcon	equ	0xFF2
 16801                           postinc0	equ	0xFEE
 16802                           wreg	equ	0xFE8
 16803                           indf1	equ	0xFE7
 16804                           postdec1	equ	0xFE5
 16805                           fsr1h	equ	0xFE2
 16806                           fsr1l	equ	0xFE1
 16807                           indf2	equ	0xFDF
 16808                           postinc2	equ	0xFDE
 16809                           postdec2	equ	0xFDD
 16810                           fsr2h	equ	0xFDA
 16811                           fsr2l	equ	0xFD9
 16812                           status	equ	0xFD8
 16813                           
 16814 ;; *************** function _MXK_Dequeue *****************
 16815 ;; Defined at:
 16816 ;;		line 153 in file "Library/MXK.c"
 16817 ;; Parameters:    Size  Location     Type
 16818 ;;		None
 16819 ;; Auto vars:     Size  Location     Type
 16820 ;;		None
 16821 ;; Return value:  Size  Location     Type
 16822 ;;                  1    wreg      void 
 16823 ;; Registers used:
 16824 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16825 ;; Tracked objects:
 16826 ;;		On entry : 0/0
 16827 ;;		On exit  : 0/0
 16828 ;;		Unchanged: 0/0
 16829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16834 ;;Total ram usage:        0 bytes
 16835 ;; Hardware stack levels used:    1
 16836 ;; Hardware stack levels required when called:   12
 16837 ;; This function calls:
 16838 ;;		Absolute function
 16839 ;;		_Motor_Step
 16840 ;; This function is called by:
 16841 ;;		_init
 16842 ;;		_findClosestWall
 16843 ;;		_mode1
 16844 ;;		_mode2
 16845 ;;		_mode4
 16846 ;;		_main
 16847 ;; This function uses a non-reentrant model
 16848 ;;
 16849                           
 16850                           	psect	text71
 16851  015F82                     __ptext71:
 16852                           	opt stack 0
 16853  015F82                     _MXK_Dequeue:
 16854                           	opt stack 16
 16855                           
 16856                           ;MXK.c: 155: if (lQueue)
 16857                           
 16858                           ;incstack = 0
 16859  015F82  0100               	movlb	0	; () banked
 16860  015F84  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16861  015F86  0100               	movlb	0	; () banked
 16862  015F88  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 16863  015F8A  0100               	movlb	0	; () banked
 16864  015F8C  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 16865  015F8E  B4D8               	btfsc	status,2,c
 16866  015F90  D00D               	goto	u13719
 16867                           
 16868                           ; BSR set to: 0
 16869                           ;MXK.c: 156: lQueue();
 16870  015F92  D801               	call	u13718
 16871  015F94  D00B               	goto	u13719
 16872  015F96                     u13718:
 16873  015F96  0005               	push	
 16874  015F98  6EFA               	movwf	pclath,c
 16875  015F9A  0100               	movlb	0	; () banked
 16876  015F9C  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16877  015F9E  6EFD               	movwf	tosl,c
 16878  015FA0  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 16879  015FA2  6EFE               	movwf	tosh,c
 16880  015FA4  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 16881  015FA6  6EFF               	movwf	tosu,c
 16882  015FA8  50FA               	movf	pclath,w,c
 16883  015FAA  0012               	return		;indir
 16884  015FAC                     u13719:
 16885                           
 16886                           ;MXK.c: 157: lQueue = 0;
 16887  015FAC  0E00               	movlw	0
 16888  015FAE  0100               	movlb	0	; () banked
 16889  015FB0  6F63               	movwf	_lQueue& (0+255),b	;volatile
 16890  015FB2  0E00               	movlw	0
 16891  015FB4  0100               	movlb	0	; () banked
 16892  015FB6  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16893  015FB8  0E00               	movlw	0
 16894  015FBA  0100               	movlb	0	; () banked
 16895  015FBC  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16896                           
 16897                           ; BSR set to: 0
 16898  015FBE  0012               	return		;funcret
 16899  015FC0                     __end_of_MXK_Dequeue:
 16900                           	opt stack 0
 16901                           tosu	equ	0xFFF
 16902                           tosh	equ	0xFFE
 16903                           tosl	equ	0xFFD
 16904                           pclath	equ	0xFFA
 16905                           tblptru	equ	0xFF8
 16906                           tblptrh	equ	0xFF7
 16907                           tblptrl	equ	0xFF6
 16908                           tablat	equ	0xFF5
 16909                           prodh	equ	0xFF4
 16910                           prodl	equ	0xFF3
 16911                           intcon	equ	0xFF2
 16912                           postinc0	equ	0xFEE
 16913                           wreg	equ	0xFE8
 16914                           indf1	equ	0xFE7
 16915                           postdec1	equ	0xFE5
 16916                           fsr1h	equ	0xFE2
 16917                           fsr1l	equ	0xFE1
 16918                           indf2	equ	0xFDF
 16919                           postinc2	equ	0xFDE
 16920                           postdec2	equ	0xFDD
 16921                           fsr2h	equ	0xFDA
 16922                           fsr2l	equ	0xFD9
 16923                           status	equ	0xFD8
 16924                           
 16925 ;; *************** function _Motor_Step *****************
 16926 ;; Defined at:
 16927 ;;		line 75 in file "Library/Motor.c"
 16928 ;; Parameters:    Size  Location     Type
 16929 ;;		None
 16930 ;; Auto vars:     Size  Location     Type
 16931 ;;		None
 16932 ;; Return value:  Size  Location     Type
 16933 ;;                  1    wreg      void 
 16934 ;; Registers used:
 16935 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16936 ;; Tracked objects:
 16937 ;;		On entry : 0/0
 16938 ;;		On exit  : 0/0
 16939 ;;		Unchanged: 0/0
 16940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16945 ;;Total ram usage:        2 bytes
 16946 ;; Hardware stack levels used:    1
 16947 ;; Hardware stack levels required when called:   11
 16948 ;; This function calls:
 16949 ;;		_MXK_Queue
 16950 ;;		_MXK_Release
 16951 ;;		_MXK_SwitchTo
 16952 ;;		_Port_SetPin
 16953 ;;		_Timer0_Restart
 16954 ;;		_Timer0_Stop
 16955 ;; This function is called by:
 16956 ;;		_Motor_Init
 16957 ;;		_MXK_Dequeue
 16958 ;;		_Timer0_ISR
 16959 ;; This function uses a non-reentrant model
 16960 ;;
 16961                           
 16962                           	psect	text72
 16963  01357E                     __ptext72:
 16964                           	opt stack 0
 16965  01357E                     _Motor_Step:
 16966                           	opt stack 0
 16967                           
 16968                           ; BSR set to: 0
 16969                           ;Skip over the trampoline to the duplicate function for level 2
 16970  01357E  B251               	btfsc	btemp,1,c
 16971  013580  EFD8  F09B         	goto	i2_Motor_Step
 16972  013584                     _Motor_Step$intlevel0:
 16973                           	opt stack 16
 16974                           
 16975                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 16976                           
 16977                           ;incstack = 0
 16978  013584  0100               	movlb	0	; () banked
 16979  013586  EE20 F004          	lfsr	2,4
 16980  01358A  517F               	movf	_lMotor& (0+255),w,b
 16981  01358C  26D9               	addwf	fsr2l,f,c
 16982  01358E  5180               	movf	(_lMotor+1)& (0+255),w,b
 16983  013590  22DA               	addwfc	fsr2h,f,c
 16984  013592  50DF               	movf	indf2,w,c
 16985  013594  EC41  F0AF         	call	_MXK_SwitchTo
 16986  013598  0900               	iorlw	0
 16987  01359A  B4D8               	btfsc	status,2,c
 16988  01359C  D07A               	goto	l1627
 16989                           
 16990                           ;Motor.c: 78: {
 16991                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 16992  01359E  C07F  FFD9         	movff	_lMotor,fsr2l
 16993  0135A2  C080  FFDA         	movff	_lMotor+1,fsr2h
 16994  0135A6  50DE               	movf	postinc2,w,c
 16995  0135A8  10DE               	iorwf	postinc2,w,c
 16996  0135AA  B4D8               	btfsc	status,2,c
 16997  0135AC  D06D               	goto	l1628
 16998                           
 16999                           ;Motor.c: 80: {
 17000                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 17001  0135AE  C07F  FFD9         	movff	_lMotor,fsr2l
 17002  0135B2  C080  FFDA         	movff	_lMotor+1,fsr2h
 17003  0135B6  0E01               	movlw	1
 17004  0135B8  BEDB               	btfsc	plusw2,7,c
 17005  0135BA  D026               	goto	l1629
 17006  0135BC  0E01               	movlw	1
 17007  0135BE  50DB               	movf	plusw2,w,c
 17008  0135C0  E103               	bnz	u10060
 17009  0135C2  04DE               	decf	postinc2,w,c
 17010  0135C4  A0D8               	btfss	status,0,c
 17011  0135C6  D020               	goto	l1629
 17012  0135C8                     u10060:
 17013                           
 17014                           ;Motor.c: 83: {
 17015                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 17016  0135C8  C07F  FFD9         	movff	_lMotor,fsr2l
 17017  0135CC  C080  FFDA         	movff	_lMotor+1,fsr2h
 17018  0135D0  28DE               	incf	postinc2,w,c
 17019  0135D2  E104               	bnz	u10070
 17020  0135D4  0E7F               	movlw	127
 17021  0135D6  18DE               	xorwf	postinc2,w,c
 17022  0135D8  B4D8               	btfsc	status,2,c
 17023  0135DA  D007               	goto	l1630
 17024  0135DC                     u10070:
 17025                           
 17026                           ;Motor.c: 85: lMotor->mDelta --;
 17027  0135DC  C07F  FFD9         	movff	_lMotor,fsr2l
 17028  0135E0  C080  FFDA         	movff	_lMotor+1,fsr2h
 17029  0135E4  06DE               	decf	postinc2,f,c
 17030  0135E6  0E00               	movlw	0
 17031  0135E8  5ADD               	subwfb	postdec2,f,c
 17032  0135EA                     l1630:
 17033                           
 17034                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 17035  0135EA  0E91               	movlw	low _PortE
 17036  0135EC  0100               	movlb	0	; () banked
 17037  0135EE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17038  0135F0  0E00               	movlw	high _PortE
 17039  0135F2  0100               	movlb	0	; () banked
 17040  0135F4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17041  0135F6  0E00               	movlw	0
 17042  0135F8  0100               	movlb	0	; () banked
 17043  0135FA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17044  0135FC  0E01               	movlw	1
 17045  0135FE  0100               	movlb	0	; () banked
 17046  013600  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17047  013602  ECC8  F09F         	call	_Port_SetPin	;wreg free
 17048                           
 17049                           ;Motor.c: 88: }
 17050  013606  D01F               	goto	l1631
 17051  013608                     l1629:
 17052                           
 17053                           ;Motor.c: 89: else
 17054                           ;Motor.c: 90: {
 17055                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 17056  013608  C07F  FFD9         	movff	_lMotor,fsr2l
 17057  01360C  C080  FFDA         	movff	_lMotor+1,fsr2h
 17058  013610  04DE               	decf	postinc2,w,c
 17059  013612  E104               	bnz	u10080
 17060  013614  0E80               	movlw	128
 17061  013616  18DE               	xorwf	postinc2,w,c
 17062  013618  B4D8               	btfsc	status,2,c
 17063  01361A  D007               	goto	l1632
 17064  01361C                     u10080:
 17065                           
 17066                           ;Motor.c: 92: lMotor->mDelta ++;
 17067  01361C  C07F  FFD9         	movff	_lMotor,fsr2l
 17068  013620  C080  FFDA         	movff	_lMotor+1,fsr2h
 17069  013624  2ADE               	incf	postinc2,f,c
 17070  013626  0E00               	movlw	0
 17071  013628  22DD               	addwfc	postdec2,f,c
 17072  01362A                     l1632:
 17073                           
 17074                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 17075  01362A  0E91               	movlw	low _PortE
 17076  01362C  0100               	movlb	0	; () banked
 17077  01362E  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17078  013630  0E00               	movlw	high _PortE
 17079  013632  0100               	movlb	0	; () banked
 17080  013634  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17081  013636  0E00               	movlw	0
 17082  013638  0100               	movlb	0	; () banked
 17083  01363A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17084  01363C  0E00               	movlw	0
 17085  01363E  0100               	movlb	0	; () banked
 17086  013640  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17087  013642  ECC8  F09F         	call	_Port_SetPin	;wreg free
 17088  013646                     l1631:
 17089                           
 17090                           ;Motor.c: 95: }
 17091                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 17092  013646  0E91               	movlw	low _PortE
 17093  013648  0100               	movlb	0	; () banked
 17094  01364A  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17095  01364C  0E00               	movlw	high _PortE
 17096  01364E  0100               	movlb	0	; () banked
 17097  013650  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17098  013652  0E01               	movlw	1
 17099  013654  0100               	movlb	0	; () banked
 17100  013656  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17101  013658  0E01               	movlw	1
 17102  01365A  0100               	movlb	0	; () banked
 17103  01365C  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17104  01365E  ECC8  F09F         	call	_Port_SetPin	;wreg free
 17105                           
 17106                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 17107  013662  0E91               	movlw	low _PortE
 17108  013664  0100               	movlb	0	; () banked
 17109  013666  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17110  013668  0E00               	movlw	high _PortE
 17111  01366A  0100               	movlb	0	; () banked
 17112  01366C  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17113  01366E  0E01               	movlw	1
 17114  013670  0100               	movlb	0	; () banked
 17115  013672  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17116  013674  0E00               	movlw	0
 17117  013676  0100               	movlb	0	; () banked
 17118  013678  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17119  01367A  ECC8  F09F         	call	_Port_SetPin	;wreg free
 17120                           
 17121                           ;Motor.c: 101: MXK_Release();
 17122  01367E  EC6F  F0B2         	call	_MXK_Release	;wreg free
 17123                           
 17124                           ;Motor.c: 102: Timer0_Restart();
 17125  013682  EC68  F0B3         	call	_Timer0_Restart	;wreg free
 17126                           
 17127                           ;Motor.c: 103: return;
 17128  013686  0012               	return	
 17129  013688                     l1628:
 17130                           
 17131                           ;Motor.c: 104: }
 17132                           ;Motor.c: 105: MXK_Release();
 17133  013688  EC6F  F0B2         	call	_MXK_Release	;wreg free
 17134                           
 17135                           ;Motor.c: 106: Timer0_Stop();
 17136  01368C  EC93  F0B3         	call	_Timer0_Stop	;wreg free
 17137                           
 17138                           ;Motor.c: 107: return;
 17139  013690  0012               	return	
 17140  013692                     l1627:
 17141                           
 17142                           ;Motor.c: 108: }
 17143                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 17144  013692  C066  F0BA         	movff	_lStepFunction,MXK_Queue@pCallback
 17145  013696  C067  F0BB         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 17146  01369A  C068  F0BC         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 17147  01369E  EC4E  F0B3         	call	_MXK_Queue	;wreg free
 17148  0136A2  0012               	return		;funcret
 17149  0136A4                     __end_of_Motor_Step:
 17150                           	opt stack 0
 17151                           tosu	equ	0xFFF
 17152                           tosh	equ	0xFFE
 17153                           tosl	equ	0xFFD
 17154                           pclath	equ	0xFFA
 17155                           tblptru	equ	0xFF8
 17156                           tblptrh	equ	0xFF7
 17157                           tblptrl	equ	0xFF6
 17158                           tablat	equ	0xFF5
 17159                           prodh	equ	0xFF4
 17160                           prodl	equ	0xFF3
 17161                           intcon	equ	0xFF2
 17162                           postinc0	equ	0xFEE
 17163                           wreg	equ	0xFE8
 17164                           indf1	equ	0xFE7
 17165                           postdec1	equ	0xFE5
 17166                           fsr1h	equ	0xFE2
 17167                           fsr1l	equ	0xFE1
 17168                           indf2	equ	0xFDF
 17169                           postinc2	equ	0xFDE
 17170                           postdec2	equ	0xFDD
 17171                           plusw2	equ	0xFDB
 17172                           fsr2h	equ	0xFDA
 17173                           fsr2l	equ	0xFD9
 17174                           status	equ	0xFD8
 17175                           
 17176 ;; *************** function _Timer0_Stop *****************
 17177 ;; Defined at:
 17178 ;;		line 89 in file "Library/Timer0.c"
 17179 ;; Parameters:    Size  Location     Type
 17180 ;;		None
 17181 ;; Auto vars:     Size  Location     Type
 17182 ;;		None
 17183 ;; Return value:  Size  Location     Type
 17184 ;;                  1    wreg      void 
 17185 ;; Registers used:
 17186 ;;		None
 17187 ;; Tracked objects:
 17188 ;;		On entry : 0/0
 17189 ;;		On exit  : 0/0
 17190 ;;		Unchanged: 0/0
 17191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17196 ;;Total ram usage:        0 bytes
 17197 ;; Hardware stack levels used:    1
 17198 ;; Hardware stack levels required when called:    7
 17199 ;; This function calls:
 17200 ;;		Nothing
 17201 ;; This function is called by:
 17202 ;;		_Motor_Step
 17203 ;; This function uses a non-reentrant model
 17204 ;;
 17205                           
 17206                           	psect	text73
 17207  016726                     __ptext73:
 17208                           	opt stack 0
 17209  016726                     _Timer0_Stop:
 17210                           	opt stack 19
 17211                           
 17212                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 17213                           
 17214                           ;incstack = 0
 17215  016726  9AF2               	bcf	intcon,5,c	;volatile
 17216                           
 17217                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 17218  016728  94F2               	bcf	intcon,2,c	;volatile
 17219  01672A  0012               	return		;funcret
 17220  01672C                     __end_of_Timer0_Stop:
 17221                           	opt stack 0
 17222                           tosu	equ	0xFFF
 17223                           tosh	equ	0xFFE
 17224                           tosl	equ	0xFFD
 17225                           pclath	equ	0xFFA
 17226                           tblptru	equ	0xFF8
 17227                           tblptrh	equ	0xFF7
 17228                           tblptrl	equ	0xFF6
 17229                           tablat	equ	0xFF5
 17230                           prodh	equ	0xFF4
 17231                           prodl	equ	0xFF3
 17232                           intcon	equ	0xFF2
 17233                           postinc0	equ	0xFEE
 17234                           wreg	equ	0xFE8
 17235                           indf1	equ	0xFE7
 17236                           postdec1	equ	0xFE5
 17237                           fsr1h	equ	0xFE2
 17238                           fsr1l	equ	0xFE1
 17239                           indf2	equ	0xFDF
 17240                           postinc2	equ	0xFDE
 17241                           postdec2	equ	0xFDD
 17242                           plusw2	equ	0xFDB
 17243                           fsr2h	equ	0xFDA
 17244                           fsr2l	equ	0xFD9
 17245                           status	equ	0xFD8
 17246                           
 17247 ;; *************** function _Timer0_Restart *****************
 17248 ;; Defined at:
 17249 ;;		line 83 in file "Library/Timer0.c"
 17250 ;; Parameters:    Size  Location     Type
 17251 ;;		None
 17252 ;; Auto vars:     Size  Location     Type
 17253 ;;		None
 17254 ;; Return value:  Size  Location     Type
 17255 ;;                  1    wreg      void 
 17256 ;; Registers used:
 17257 ;;		None
 17258 ;; Tracked objects:
 17259 ;;		On entry : 0/0
 17260 ;;		On exit  : 0/0
 17261 ;;		Unchanged: 0/0
 17262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17267 ;;Total ram usage:        0 bytes
 17268 ;; Hardware stack levels used:    1
 17269 ;; Hardware stack levels required when called:    7
 17270 ;; This function calls:
 17271 ;;		Nothing
 17272 ;; This function is called by:
 17273 ;;		_Motor_Step
 17274 ;; This function uses a non-reentrant model
 17275 ;;
 17276                           
 17277                           	psect	text74
 17278  0166D0                     __ptext74:
 17279                           	opt stack 0
 17280  0166D0                     _Timer0_Restart:
 17281                           	opt stack 19
 17282                           
 17283                           ;Timer0.c: 85: TMR0 = COUNTER;
 17284                           
 17285                           ;incstack = 0
 17286  0166D0  C029  FFD6         	movff	_COUNTER,4054	;volatile
 17287  0166D4  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 17288                           
 17289                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 17290  0166D8  8AF2               	bsf	intcon,5,c	;volatile
 17291  0166DA  0012               	return		;funcret
 17292  0166DC                     __end_of_Timer0_Restart:
 17293                           	opt stack 0
 17294                           tosu	equ	0xFFF
 17295                           tosh	equ	0xFFE
 17296                           tosl	equ	0xFFD
 17297                           pclath	equ	0xFFA
 17298                           tblptru	equ	0xFF8
 17299                           tblptrh	equ	0xFF7
 17300                           tblptrl	equ	0xFF6
 17301                           tablat	equ	0xFF5
 17302                           prodh	equ	0xFF4
 17303                           prodl	equ	0xFF3
 17304                           intcon	equ	0xFF2
 17305                           postinc0	equ	0xFEE
 17306                           wreg	equ	0xFE8
 17307                           indf1	equ	0xFE7
 17308                           postdec1	equ	0xFE5
 17309                           fsr1h	equ	0xFE2
 17310                           fsr1l	equ	0xFE1
 17311                           indf2	equ	0xFDF
 17312                           postinc2	equ	0xFDE
 17313                           postdec2	equ	0xFDD
 17314                           plusw2	equ	0xFDB
 17315                           fsr2h	equ	0xFDA
 17316                           fsr2l	equ	0xFD9
 17317                           status	equ	0xFD8
 17318                           
 17319 ;; *************** function _MXK_SwitchTo *****************
 17320 ;; Defined at:
 17321 ;;		line 105 in file "Library/MXK.c"
 17322 ;; Parameters:    Size  Location     Type
 17323 ;;  pModule         1    wreg     enum E6927
 17324 ;; Auto vars:     Size  Location     Type
 17325 ;;  pModule         1    7[BANK0 ] enum E6927
 17326 ;;  CUR             1    6[BANK0 ] unsigned char 
 17327 ;; Return value:  Size  Location     Type
 17328 ;;                  1    wreg      unsigned char 
 17329 ;; Registers used:
 17330 ;;		wreg, status,2, status,0, cstack
 17331 ;; Tracked objects:
 17332 ;;		On entry : 0/0
 17333 ;;		On exit  : 0/0
 17334 ;;		Unchanged: 0/0
 17335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17337 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17340 ;;Total ram usage:        2 bytes
 17341 ;; Hardware stack levels used:    1
 17342 ;; Hardware stack levels required when called:    8
 17343 ;; This function calls:
 17344 ;;		_delay_us
 17345 ;; This function is called by:
 17346 ;;		_Motor_Step
 17347 ;;		_findClosestWall
 17348 ;;		_mode1
 17349 ;;		_mode2
 17350 ;;		_mode4
 17351 ;;		_main
 17352 ;; This function uses a non-reentrant model
 17353 ;;
 17354                           
 17355                           	psect	text75
 17356  015E82                     __ptext75:
 17357                           	opt stack 0
 17358  015E82                     _MXK_SwitchTo:
 17359                           	opt stack 20
 17360                           
 17361                           ;incstack = 0
 17362                           ;MXK_SwitchTo@pModule stored from wreg
 17363  015E82  0100               	movlb	0	; () banked
 17364  015E84  6FC1               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17365                           
 17366                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17367  015E86  5086               	movf	3974,w,c	;volatile
 17368  015E88  0B0F               	andlw	15
 17369  015E8A  0100               	movlb	0	; () banked
 17370  015E8C  6FC0               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17374  015E8E  504B               	movf	_Bus_State,w,c
 17375  015E90  A4D8               	btfss	status,2,c
 17376  015E92  D002               	goto	l1730
 17377                           
 17378                           ; BSR set to: 0
 17379                           ;MXK.c: 110: return 0;
 17380  015E94  0E00               	movlw	0
 17381                           
 17382                           ; BSR set to: 0
 17383  015E96  0012               	return	
 17384  015E98                     l1730:
 17385                           
 17386                           ; BSR set to: 0
 17387                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17388                           
 17389                           ; BSR set to: 0
 17390  015E98  0E00               	movlw	0
 17391  015E9A  6E4B               	movwf	_Bus_State,c
 17392                           
 17393                           ; BSR set to: 0
 17394                           ;MXK.c: 114: if (CUR != pModule)
 17395  015E9C  0100               	movlb	0	; () banked
 17396  015E9E  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17397  015EA0  0100               	movlb	0	; () banked
 17398  015EA2  19C0               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17399  015EA4  B4D8               	btfsc	status,2,c
 17400  015EA6  D00C               	goto	l1732
 17401                           
 17402                           ; BSR set to: 0
 17403                           ;MXK.c: 115: {
 17404                           ;MXK.c: 116: PORTG &= ~(0xF);
 17405  015EA8  0EF0               	movlw	240
 17406  015EAA  1686               	andwf	3974,f,c	;volatile
 17407                           
 17408                           ;MXK.c: 117: PORTG |= pModule;
 17409  015EAC  0100               	movlb	0	; () banked
 17410  015EAE  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17411  015EB0  1286               	iorwf	3974,f,c	;volatile
 17412                           
 17413                           ; BSR set to: 0
 17414                           ;MXK.c: 120: delay_us(10);
 17415  015EB2  0E00               	movlw	0
 17416  015EB4  0100               	movlb	0	; () banked
 17417  015EB6  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17418  015EB8  0E0A               	movlw	10
 17419  015EBA  6FBA               	movwf	delay_us@us& (0+255),b
 17420  015EBC  EC61  F0AD         	call	_delay_us	;wreg free
 17421  015EC0                     l1732:
 17422                           
 17423                           ;MXK.c: 121: }
 17424                           ;MXK.c: 122: return 1;
 17425  015EC0  0E01               	movlw	1
 17426  015EC2  0012               	return	
 17427  015EC4                     __end_of_MXK_SwitchTo:
 17428                           	opt stack 0
 17429                           tosu	equ	0xFFF
 17430                           tosh	equ	0xFFE
 17431                           tosl	equ	0xFFD
 17432                           pclath	equ	0xFFA
 17433                           tblptru	equ	0xFF8
 17434                           tblptrh	equ	0xFF7
 17435                           tblptrl	equ	0xFF6
 17436                           tablat	equ	0xFF5
 17437                           prodh	equ	0xFF4
 17438                           prodl	equ	0xFF3
 17439                           intcon	equ	0xFF2
 17440                           postinc0	equ	0xFEE
 17441                           wreg	equ	0xFE8
 17442                           indf1	equ	0xFE7
 17443                           postdec1	equ	0xFE5
 17444                           fsr1h	equ	0xFE2
 17445                           fsr1l	equ	0xFE1
 17446                           indf2	equ	0xFDF
 17447                           postinc2	equ	0xFDE
 17448                           postdec2	equ	0xFDD
 17449                           plusw2	equ	0xFDB
 17450                           fsr2h	equ	0xFDA
 17451                           fsr2l	equ	0xFD9
 17452                           status	equ	0xFD8
 17453                           
 17454 ;; *************** function _MXK_Release *****************
 17455 ;; Defined at:
 17456 ;;		line 130 in file "Library/MXK.c"
 17457 ;; Parameters:    Size  Location     Type
 17458 ;;		None
 17459 ;; Auto vars:     Size  Location     Type
 17460 ;;		None
 17461 ;; Return value:  Size  Location     Type
 17462 ;;                  1    wreg      unsigned char 
 17463 ;; Registers used:
 17464 ;;		wreg, status,2, status,0
 17465 ;; Tracked objects:
 17466 ;;		On entry : 0/0
 17467 ;;		On exit  : 0/0
 17468 ;;		Unchanged: 0/0
 17469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17474 ;;Total ram usage:        0 bytes
 17475 ;; Hardware stack levels used:    1
 17476 ;; Hardware stack levels required when called:    7
 17477 ;; This function calls:
 17478 ;;		Nothing
 17479 ;; This function is called by:
 17480 ;;		_Motor_Step
 17481 ;;		_init
 17482 ;;		_findClosestWall
 17483 ;;		_mode1
 17484 ;;		_mode2
 17485 ;;		_mode4
 17486 ;;		_main
 17487 ;; This function uses a non-reentrant model
 17488 ;;
 17489                           
 17490                           	psect	text76
 17491  0164DE                     __ptext76:
 17492                           	opt stack 0
 17493  0164DE                     _MXK_Release:
 17494                           	opt stack 21
 17495                           
 17496                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17497                           
 17498                           ;incstack = 0
 17499  0164DE  0E01               	movlw	1
 17500  0164E0  6E4B               	movwf	_Bus_State,c
 17501                           
 17502                           ;MXK.c: 134: if (lQueue != 0)
 17503  0164E2  0100               	movlb	0	; () banked
 17504  0164E4  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17505  0164E6  0100               	movlb	0	; () banked
 17506  0164E8  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17507  0164EA  0100               	movlb	0	; () banked
 17508  0164EC  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17509  0164EE  B4D8               	btfsc	status,2,c
 17510  0164F0  D002               	goto	l1735
 17511                           
 17512                           ; BSR set to: 0
 17513                           ;MXK.c: 135: return 1;
 17514  0164F2  0E01               	movlw	1
 17515                           
 17516                           ; BSR set to: 0
 17517  0164F4  0012               	return	
 17518  0164F6                     l1735:
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;MXK.c: 137: return 0;
 17522                           
 17523                           ; BSR set to: 0
 17524  0164F6  0E00               	movlw	0
 17525  0164F8  0012               	return	
 17526  0164FA                     __end_of_MXK_Release:
 17527                           	opt stack 0
 17528                           tosu	equ	0xFFF
 17529                           tosh	equ	0xFFE
 17530                           tosl	equ	0xFFD
 17531                           pclath	equ	0xFFA
 17532                           tblptru	equ	0xFF8
 17533                           tblptrh	equ	0xFF7
 17534                           tblptrl	equ	0xFF6
 17535                           tablat	equ	0xFF5
 17536                           prodh	equ	0xFF4
 17537                           prodl	equ	0xFF3
 17538                           intcon	equ	0xFF2
 17539                           postinc0	equ	0xFEE
 17540                           wreg	equ	0xFE8
 17541                           indf1	equ	0xFE7
 17542                           postdec1	equ	0xFE5
 17543                           fsr1h	equ	0xFE2
 17544                           fsr1l	equ	0xFE1
 17545                           indf2	equ	0xFDF
 17546                           postinc2	equ	0xFDE
 17547                           postdec2	equ	0xFDD
 17548                           plusw2	equ	0xFDB
 17549                           fsr2h	equ	0xFDA
 17550                           fsr2l	equ	0xFD9
 17551                           status	equ	0xFD8
 17552                           
 17553 ;; *************** function _MXK_Queue *****************
 17554 ;; Defined at:
 17555 ;;		line 144 in file "Library/MXK.c"
 17556 ;; Parameters:    Size  Location     Type
 17557 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17558 ;;		 -> Absolute function(1), Motor_Step(1), 
 17559 ;; Auto vars:     Size  Location     Type
 17560 ;;		None
 17561 ;; Return value:  Size  Location     Type
 17562 ;;                  1    wreg      void 
 17563 ;; Registers used:
 17564 ;;		wreg, status,2, status,0
 17565 ;; Tracked objects:
 17566 ;;		On entry : 0/0
 17567 ;;		On exit  : 0/0
 17568 ;;		Unchanged: 0/0
 17569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17570 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17573 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17574 ;;Total ram usage:        3 bytes
 17575 ;; Hardware stack levels used:    1
 17576 ;; Hardware stack levels required when called:    7
 17577 ;; This function calls:
 17578 ;;		Nothing
 17579 ;; This function is called by:
 17580 ;;		_Motor_Step
 17581 ;; This function uses a non-reentrant model
 17582 ;;
 17583                           
 17584                           	psect	text77
 17585  01669C                     __ptext77:
 17586                           	opt stack 0
 17587  01669C                     _MXK_Queue:
 17588                           	opt stack 19
 17589                           
 17590                           ;MXK.c: 146: lQueue = pCallback;
 17591                           
 17592                           ; BSR set to: 0
 17593                           ;incstack = 0
 17594  01669C  C0BA  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17595  0166A0  C0BB  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17596  0166A4  C0BC  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17597  0166A8  0012               	return		;funcret
 17598  0166AA                     __end_of_MXK_Queue:
 17599                           	opt stack 0
 17600                           tosu	equ	0xFFF
 17601                           tosh	equ	0xFFE
 17602                           tosl	equ	0xFFD
 17603                           pclath	equ	0xFFA
 17604                           tblptru	equ	0xFF8
 17605                           tblptrh	equ	0xFF7
 17606                           tblptrl	equ	0xFF6
 17607                           tablat	equ	0xFF5
 17608                           prodh	equ	0xFF4
 17609                           prodl	equ	0xFF3
 17610                           intcon	equ	0xFF2
 17611                           postinc0	equ	0xFEE
 17612                           wreg	equ	0xFE8
 17613                           indf1	equ	0xFE7
 17614                           postdec1	equ	0xFE5
 17615                           fsr1h	equ	0xFE2
 17616                           fsr1l	equ	0xFE1
 17617                           indf2	equ	0xFDF
 17618                           postinc2	equ	0xFDE
 17619                           postdec2	equ	0xFDD
 17620                           plusw2	equ	0xFDB
 17621                           fsr2h	equ	0xFDA
 17622                           fsr2l	equ	0xFD9
 17623                           status	equ	0xFD8
 17624                           
 17625 ;; *************** function _MXK_BlockSwitchTo *****************
 17626 ;; Defined at:
 17627 ;;		line 82 in file "Library/MXK.c"
 17628 ;; Parameters:    Size  Location     Type
 17629 ;;  pModule         1    wreg     enum E6927
 17630 ;; Auto vars:     Size  Location     Type
 17631 ;;  pModule         1    7[BANK0 ] enum E6927
 17632 ;;  CUR             1    6[BANK0 ] unsigned char 
 17633 ;; Return value:  Size  Location     Type
 17634 ;;                  1    wreg      unsigned char 
 17635 ;; Registers used:
 17636 ;;		wreg, status,2, status,0, cstack
 17637 ;; Tracked objects:
 17638 ;;		On entry : 0/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17646 ;;Total ram usage:        2 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:    8
 17649 ;; This function calls:
 17650 ;;		_delay_us
 17651 ;; This function is called by:
 17652 ;;		_init
 17653 ;; This function uses a non-reentrant model
 17654 ;;
 17655                           
 17656                           	psect	text78
 17657  015FC0                     __ptext78:
 17658                           	opt stack 0
 17659  015FC0                     _MXK_BlockSwitchTo:
 17660                           	opt stack 21
 17661                           
 17662                           ;incstack = 0
 17663                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17664  015FC0  0100               	movlb	0	; () banked
 17665  015FC2  6FC1               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17666                           
 17667                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17668  015FC4  5086               	movf	3974,w,c	;volatile
 17669  015FC6  0B0F               	andlw	15
 17670  015FC8  0100               	movlb	0	; () banked
 17671  015FCA  6FC0               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17672  015FCC                     
 17673                           ; BSR set to: 0
 17674                           
 17675                           ; BSR set to: 0
 17676  015FCC  504B               	movf	_Bus_State,w,c
 17677  015FCE  B4D8               	btfsc	status,2,c
 17678  015FD0  D7FD               	goto	l1724
 17679                           
 17680                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17681  015FD2  0E00               	movlw	0
 17682  015FD4  6E4B               	movwf	_Bus_State,c
 17683                           
 17684                           ;MXK.c: 90: if (CUR != pModule)
 17685  015FD6  0100               	movlb	0	; () banked
 17686  015FD8  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17687  015FDA  0100               	movlb	0	; () banked
 17688  015FDC  19C0               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17689  015FDE  B4D8               	btfsc	status,2,c
 17690  015FE0  D00C               	goto	l1726
 17691                           
 17692                           ; BSR set to: 0
 17693                           ;MXK.c: 91: {
 17694                           ;MXK.c: 92: PORTG &= ~(0xF);
 17695  015FE2  0EF0               	movlw	240
 17696  015FE4  1686               	andwf	3974,f,c	;volatile
 17697                           
 17698                           ;MXK.c: 93: PORTG |= pModule;
 17699  015FE6  0100               	movlb	0	; () banked
 17700  015FE8  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17701  015FEA  1286               	iorwf	3974,f,c	;volatile
 17702                           
 17703                           ; BSR set to: 0
 17704                           ;MXK.c: 96: delay_us(10);
 17705  015FEC  0E00               	movlw	0
 17706  015FEE  0100               	movlb	0	; () banked
 17707  015FF0  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17708  015FF2  0E0A               	movlw	10
 17709  015FF4  6FBA               	movwf	delay_us@us& (0+255),b
 17710  015FF6  EC61  F0AD         	call	_delay_us	;wreg free
 17711  015FFA                     l1726:
 17712                           
 17713                           ;MXK.c: 97: }
 17714                           ;MXK.c: 98: return 1;
 17715  015FFA  0E01               	movlw	1
 17716  015FFC  0012               	return	
 17717  015FFE                     __end_of_MXK_BlockSwitchTo:
 17718                           	opt stack 0
 17719                           tosu	equ	0xFFF
 17720                           tosh	equ	0xFFE
 17721                           tosl	equ	0xFFD
 17722                           pclath	equ	0xFFA
 17723                           tblptru	equ	0xFF8
 17724                           tblptrh	equ	0xFF7
 17725                           tblptrl	equ	0xFF6
 17726                           tablat	equ	0xFF5
 17727                           prodh	equ	0xFF4
 17728                           prodl	equ	0xFF3
 17729                           intcon	equ	0xFF2
 17730                           postinc0	equ	0xFEE
 17731                           wreg	equ	0xFE8
 17732                           indf1	equ	0xFE7
 17733                           postdec1	equ	0xFE5
 17734                           fsr1h	equ	0xFE2
 17735                           fsr1l	equ	0xFE1
 17736                           indf2	equ	0xFDF
 17737                           postinc2	equ	0xFDE
 17738                           postdec2	equ	0xFDD
 17739                           plusw2	equ	0xFDB
 17740                           fsr2h	equ	0xFDA
 17741                           fsr2l	equ	0xFD9
 17742                           status	equ	0xFD8
 17743                           
 17744 ;; *************** function _delay_us *****************
 17745 ;; Defined at:
 17746 ;;		line 255 in file "Library/Types.c"
 17747 ;; Parameters:    Size  Location     Type
 17748 ;;  us              2    0[BANK0 ] unsigned short 
 17749 ;; Auto vars:     Size  Location     Type
 17750 ;;  u               4    2[BANK0 ] unsigned long 
 17751 ;; Return value:  Size  Location     Type
 17752 ;;                  1    wreg      void 
 17753 ;; Registers used:
 17754 ;;		wreg, status,2, status,0
 17755 ;; Tracked objects:
 17756 ;;		On entry : 0/0
 17757 ;;		On exit  : 0/0
 17758 ;;		Unchanged: 0/0
 17759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17760 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17761 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17763 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17764 ;;Total ram usage:        6 bytes
 17765 ;; Hardware stack levels used:    1
 17766 ;; Hardware stack levels required when called:    7
 17767 ;; This function calls:
 17768 ;;		Nothing
 17769 ;; This function is called by:
 17770 ;;		_MXK_BlockSwitchTo
 17771 ;;		_MXK_SwitchTo
 17772 ;; This function uses a non-reentrant model
 17773 ;;
 17774                           
 17775                           	psect	text79
 17776  015AC2                     __ptext79:
 17777                           	opt stack 0
 17778  015AC2                     _delay_us:
 17779                           	opt stack 20
 17780                           
 17781                           ;Types.c: 256: unsigned long u;
 17782                           ;Types.c: 257: while (us--) {
 17783                           
 17784                           ;incstack = 0
 17785  015AC2  D01C               	goto	u9250
 17786  015AC4                     l12489:
 17787                           
 17788                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17789  015AC4  0E00               	movlw	0
 17790  015AC6  0100               	movlb	0	; () banked
 17791  015AC8  6FBC               	movwf	delay_us@u& (0+255),b
 17792  015ACA  0E00               	movlw	0
 17793  015ACC  6FBD               	movwf	(delay_us@u+1)& (0+255),b
 17794  015ACE  0E00               	movlw	0
 17795  015AD0  6FBE               	movwf	(delay_us@u+2)& (0+255),b
 17796  015AD2  0E00               	movlw	0
 17797  015AD4  6FBF               	movwf	(delay_us@u+3)& (0+255),b
 17798  015AD6                     l12491:
 17799                           
 17800                           ; BSR set to: 0
 17801  015AD6  0100               	movlb	0	; () banked
 17802  015AD8  51BC               	movf	delay_us@u& (0+255),w,b
 17803  015ADA  0100               	movlb	0	; () banked
 17804  015ADC  11BD               	iorwf	(delay_us@u+1)& (0+255),w,b
 17805  015ADE  0100               	movlb	0	; () banked
 17806  015AE0  11BE               	iorwf	(delay_us@u+2)& (0+255),w,b
 17807  015AE2  0100               	movlb	0	; () banked
 17808  015AE4  11BF               	iorwf	(delay_us@u+3)& (0+255),w,b
 17809  015AE6  A4D8               	btfss	status,2,c
 17810  015AE8  D009               	goto	u9250
 17811                           
 17812                           ; BSR set to: 0
 17813                           
 17814                           ; BSR set to: 0
 17815  015AEA  F000               	nop		; ;# 
 17816  015AEC  0E01               	movlw	1
 17817  015AEE  0100               	movlb	0	; () banked
 17818  015AF0  27BC               	addwf	delay_us@u& (0+255),f,b
 17819  015AF2  0E00               	movlw	0
 17820  015AF4  23BD               	addwfc	(delay_us@u+1)& (0+255),f,b
 17821  015AF6  23BE               	addwfc	(delay_us@u+2)& (0+255),f,b
 17822  015AF8  23BF               	addwfc	(delay_us@u+3)& (0+255),f,b
 17823  015AFA  D7ED               	goto	l12491
 17824  015AFC                     u9250:
 17825                           
 17826                           ; BSR set to: 0
 17827                           
 17828                           ; BSR set to: 0
 17829  015AFC  0100               	movlb	0	; () banked
 17830  015AFE  07BA               	decf	delay_us@us& (0+255),f,b
 17831  015B00  A0D8               	btfss	status,0,c
 17832  015B02  07BB               	decf	(delay_us@us+1)& (0+255),f,b
 17833  015B04  0100               	movlb	0	; () banked
 17834  015B06  29BA               	incf	delay_us@us& (0+255),w,b
 17835  015B08  E1DD               	bnz	l12489
 17836  015B0A  0100               	movlb	0	; () banked
 17837  015B0C  29BB               	incf	(delay_us@us+1)& (0+255),w,b
 17838  015B0E  B4D8               	btfsc	status,2,c
 17839  015B10  0012               	return	
 17840  015B12  D7D8               	goto	l832
 17841  015B14                     __end_of_delay_us:
 17842                           	opt stack 0
 17843                           tosu	equ	0xFFF
 17844                           tosh	equ	0xFFE
 17845                           tosl	equ	0xFFD
 17846                           pclath	equ	0xFFA
 17847                           tblptru	equ	0xFF8
 17848                           tblptrh	equ	0xFF7
 17849                           tblptrl	equ	0xFF6
 17850                           tablat	equ	0xFF5
 17851                           prodh	equ	0xFF4
 17852                           prodl	equ	0xFF3
 17853                           intcon	equ	0xFF2
 17854                           postinc0	equ	0xFEE
 17855                           wreg	equ	0xFE8
 17856                           indf1	equ	0xFE7
 17857                           postdec1	equ	0xFE5
 17858                           fsr1h	equ	0xFE2
 17859                           fsr1l	equ	0xFE1
 17860                           indf2	equ	0xFDF
 17861                           postinc2	equ	0xFDE
 17862                           postdec2	equ	0xFDD
 17863                           plusw2	equ	0xFDB
 17864                           fsr2h	equ	0xFDA
 17865                           fsr2l	equ	0xFD9
 17866                           status	equ	0xFD8
 17867                           
 17868 ;; *************** function _LCD_Init *****************
 17869 ;; Defined at:
 17870 ;;		line 172 in file "Library/LCD.c"
 17871 ;; Parameters:    Size  Location     Type
 17872 ;;		None
 17873 ;; Auto vars:     Size  Location     Type
 17874 ;;  i               2   55[BANK0 ] unsigned short 
 17875 ;; Return value:  Size  Location     Type
 17876 ;;                  1    wreg      void 
 17877 ;; Registers used:
 17878 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17879 ;; Tracked objects:
 17880 ;;		On entry : 0/0
 17881 ;;		On exit  : 0/0
 17882 ;;		Unchanged: 0/0
 17883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17885 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17886 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17887 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17888 ;;Total ram usage:        4 bytes
 17889 ;; Hardware stack levels used:    1
 17890 ;; Hardware stack levels required when called:   15
 17891 ;; This function calls:
 17892 ;;		_Configure_GPIOs
 17893 ;;		_LCD_Fill
 17894 ;;		_LCD_Write
 17895 ;;		_Set_Rotation
 17896 ;;		_delay_ms
 17897 ;; This function is called by:
 17898 ;;		_init
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           	psect	text80
 17903  012EAC                     __ptext80:
 17904                           	opt stack 0
 17905  012EAC                     _LCD_Init:
 17906                           	opt stack 14
 17907                           
 17908                           ;LCD.c: 174: UINT16 i;
 17909                           ;LCD.c: 175: Configure_GPIOs();
 17910                           
 17911                           ; BSR set to: 0
 17912                           ;incstack = 0
 17913  012EAC  EC3F  F0AA         	call	_Configure_GPIOs	;wreg free
 17914                           
 17915                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 17916  012EB0  0E00               	movlw	0
 17917  012EB2  0100               	movlb	0	; () banked
 17918  012EB4  6FF2               	movwf	(LCD_Init@i+1)& (0+255),b
 17919  012EB6  0E00               	movlw	0
 17920  012EB8  6FF1               	movwf	LCD_Init@i& (0+255),b
 17921                           
 17922                           ; BSR set to: 0
 17923  012EBA  0100               	movlb	0	; () banked
 17924  012EBC  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 17925  012EBE  E106               	bnz	u11210
 17926  012EC0  0E59               	movlw	89
 17927  012EC2  0100               	movlb	0	; () banked
 17928  012EC4  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 17929  012EC6  B0D8               	btfsc	status,0,c
 17930  012EC8  D08B               	goto	u11250
 17931  012ECA  D001               	goto	l85
 17932  012ECC                     u11210:
 17933                           
 17934                           ; BSR set to: 0
 17935  012ECC  D089               	goto	u11250
 17936  012ECE                     l85:
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;LCD.c: 178: {
 17940                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 17941                           
 17942                           ; BSR set to: 0
 17943  012ECE  90D8               	bcf	status,0,c
 17944  012ED0  0100               	movlb	0	; () banked
 17945  012ED2  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17946  012ED4  6EF6               	movwf	tblptrl,c
 17947  012ED6  0100               	movlb	0	; () banked
 17948  012ED8  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17949  012EDA  6EF7               	movwf	tblptrh,c
 17950  012EDC  0E33               	movlw	low _InitList
 17951  012EDE  26F6               	addwf	tblptrl,f,c
 17952  012EE0  0EFC               	movlw	high _InitList
 17953  012EE2  22F7               	addwfc	tblptrh,f,c
 17954  012EE4                     	if	1	;There are 3 active tblptr bytes
 17955  012EE4  6AF8               	clrf	tblptru,c
 17956  012EE6  0E00               	movlw	low (__mediumconst shr (0+16))
 17957  012EE8  22F8               	addwfc	tblptru,f,c
 17958  012EEA                     	endif
 17959  012EEA  0009               	tblrd		*+
 17960  012EEC  0E80               	movlw	128
 17961  012EEE  18F5               	xorwf	tablat,w,c
 17962  012EF0  0009               	tblrd		*+
 17963  012EF2  10F5               	iorwf	tablat,w,c
 17964  012EF4  A4D8               	btfss	status,2,c
 17965  012EF6  D022               	goto	l87
 17966                           
 17967                           ; BSR set to: 0
 17968  012EF8  0100               	movlb	0	; () banked
 17969  012EFA  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 17970  012EFC  E11F               	bnz	l14337
 17971  012EFE  0E58               	movlw	88
 17972  012F00  0100               	movlb	0	; () banked
 17973  012F02  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 17974  012F04  B0D8               	btfsc	status,0,c
 17975  012F06  D01A               	goto	l87
 17976                           
 17977                           ; BSR set to: 0
 17978                           ;LCD.c: 180: delay_ms(InitList[++i]);
 17979  012F08  0100               	movlb	0	; () banked
 17980  012F0A  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 17981  012F0C  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 17982  012F0E  90D8               	bcf	status,0,c
 17983  012F10  0100               	movlb	0	; () banked
 17984  012F12  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17985  012F14  6EF6               	movwf	tblptrl,c
 17986  012F16  0100               	movlb	0	; () banked
 17987  012F18  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17988  012F1A  6EF7               	movwf	tblptrh,c
 17989  012F1C  0E33               	movlw	low _InitList
 17990  012F1E  26F6               	addwf	tblptrl,f,c
 17991  012F20  0EFC               	movlw	high _InitList
 17992  012F22  22F7               	addwfc	tblptrh,f,c
 17993  012F24                     	if	1	;There are 3 active tblptr bytes
 17994  012F24  6AF8               	clrf	tblptru,c
 17995  012F26  0E00               	movlw	low (__mediumconst shr (0+16))
 17996  012F28  22F8               	addwfc	tblptru,f,c
 17997  012F2A                     	endif
 17998  012F2A  0009               	tblrd		*+
 17999  012F2C  CFF5 F0BA          	movff	tablat,delay_ms@ms
 18000  012F30  000A               	tblrd		*-
 18001  012F32  CFF5 F0BB          	movff	tablat,delay_ms@ms+1
 18002  012F36  EC18  F0AB         	call	_delay_ms	;wreg free
 18003  012F3A  D04B               	goto	l90
 18004  012F3C                     l87:
 18005  012F3C                     l14337:
 18006                           
 18007                           ;LCD.c: 181: else
 18008                           ;LCD.c: 182: {
 18009                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 18010  012F3C  90D8               	bcf	status,0,c
 18011  012F3E  0100               	movlb	0	; () banked
 18012  012F40  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18013  012F42  6EF6               	movwf	tblptrl,c
 18014  012F44  0100               	movlb	0	; () banked
 18015  012F46  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18016  012F48  6EF7               	movwf	tblptrh,c
 18017  012F4A  0E33               	movlw	low _InitList
 18018  012F4C  26F6               	addwf	tblptrl,f,c
 18019  012F4E  0EFC               	movlw	high _InitList
 18020  012F50  22F7               	addwfc	tblptrh,f,c
 18021  012F52                     	if	1	;There are 3 active tblptr bytes
 18022  012F52  6AF8               	clrf	tblptru,c
 18023  012F54  0E00               	movlw	low (__mediumconst shr (0+16))
 18024  012F56  22F8               	addwfc	tblptru,f,c
 18025  012F58                     	endif
 18026  012F58  0009               	tblrd		*+
 18027  012F5A  0E00               	movlw	0
 18028  012F5C  5EF5               	subwf	tablat,f,c
 18029  012F5E  0009               	tblrd		*+
 18030  012F60  0E01               	movlw	1
 18031  012F62  5AF5               	subwfb	tablat,f,c
 18032  012F64  A0D8               	btfss	status,0,c
 18033  012F66  D020               	goto	l89
 18034                           
 18035                           ; BSR set to: 0
 18036  012F68  0E00               	movlw	0
 18037  012F6A  0100               	movlb	0	; () banked
 18038  012F6C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18039  012F6E  90D8               	bcf	status,0,c
 18040  012F70  0100               	movlb	0	; () banked
 18041  012F72  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18042  012F74  6EF6               	movwf	tblptrl,c
 18043  012F76  0100               	movlb	0	; () banked
 18044  012F78  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18045  012F7A  6EF7               	movwf	tblptrh,c
 18046  012F7C  0E33               	movlw	low _InitList
 18047  012F7E  26F6               	addwf	tblptrl,f,c
 18048  012F80  0EFC               	movlw	high _InitList
 18049  012F82  22F7               	addwfc	tblptrh,f,c
 18050  012F84                     	if	1	;There are 3 active tblptr bytes
 18051  012F84  6AF8               	clrf	tblptru,c
 18052  012F86  0E00               	movlw	low (__mediumconst shr (0+16))
 18053  012F88  22F8               	addwfc	tblptru,f,c
 18054  012F8A                     	endif
 18055  012F8A  0009               	tblrd		*+
 18056  012F8C  CFF5 F0EF          	movff	tablat,??_LCD_Init
 18057  012F90  0009               	tblrd		*+
 18058  012F92  CFF5 F0F0          	movff	tablat,??_LCD_Init+1
 18059  012F96  C0F0  F0EF         	movff	??_LCD_Init+1,??_LCD_Init
 18060  012F9A  0100               	movlb	0	; () banked
 18061  012F9C  6BF0               	clrf	(??_LCD_Init+1)& (0+255),b
 18062  012F9E  0100               	movlb	0	; () banked
 18063  012FA0  51EF               	movf	??_LCD_Init& (0+255),w,b
 18064  012FA2  ECA6  F0B1         	call	_LCD_Write
 18065  012FA6  D015               	goto	l90
 18066  012FA8                     l89:
 18067                           
 18068                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 18069  012FA8  0E01               	movlw	1
 18070  012FAA  0100               	movlb	0	; () banked
 18071  012FAC  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18072  012FAE  90D8               	bcf	status,0,c
 18073  012FB0  0100               	movlb	0	; () banked
 18074  012FB2  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18075  012FB4  6EF6               	movwf	tblptrl,c
 18076  012FB6  0100               	movlb	0	; () banked
 18077  012FB8  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18078  012FBA  6EF7               	movwf	tblptrh,c
 18079  012FBC  0E33               	movlw	low _InitList
 18080  012FBE  26F6               	addwf	tblptrl,f,c
 18081  012FC0  0EFC               	movlw	high _InitList
 18082  012FC2  22F7               	addwfc	tblptrh,f,c
 18083  012FC4                     	if	1	;There are 3 active tblptr bytes
 18084  012FC4  6AF8               	clrf	tblptru,c
 18085  012FC6  0E00               	movlw	low (__mediumconst shr (0+16))
 18086  012FC8  22F8               	addwfc	tblptru,f,c
 18087  012FCA                     	endif
 18088  012FCA  0008               	tblrd		*
 18089  012FCC  50F5               	movf	tablat,w,c
 18090  012FCE  ECA6  F0B1         	call	_LCD_Write
 18091  012FD2                     l90:
 18092  012FD2  0100               	movlb	0	; () banked
 18093  012FD4  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 18094  012FD6  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 18095                           
 18096                           ; BSR set to: 0
 18097  012FD8  0100               	movlb	0	; () banked
 18098  012FDA  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18099  012FDC  E101               	bnz	l14347
 18100  012FDE  D770               	goto	L12
 18101  012FE0                     u11250:
 18102  012FE0                     l14347:
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;LCD.c: 185: }
 18106                           ;LCD.c: 186: }
 18107                           ;LCD.c: 187: delay_ms(100);
 18108  012FE0  0E00               	movlw	0
 18109  012FE2  0100               	movlb	0	; () banked
 18110  012FE4  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18111  012FE6  0E64               	movlw	100
 18112  012FE8  6FBA               	movwf	delay_ms@ms& (0+255),b
 18113  012FEA  EC18  F0AB         	call	_delay_ms	;wreg free
 18114                           
 18115                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 18116  012FEE  0E00               	movlw	0
 18117  012FF0  0100               	movlb	0	; () banked
 18118  012FF2  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18119  012FF4  0E29               	movlw	41
 18120  012FF6  ECA6  F0B1         	call	_LCD_Write
 18121                           
 18122                           ;LCD.c: 189: Set_Rotation(1);
 18123  012FFA  0E01               	movlw	1
 18124  012FFC  ECF6  F0A5         	call	_Set_Rotation
 18125                           
 18126                           ;LCD.c: 191: delay_ms(100);
 18127  013000  0E00               	movlw	0
 18128  013002  0100               	movlb	0	; () banked
 18129  013004  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18130  013006  0E64               	movlw	100
 18131  013008  6FBA               	movwf	delay_ms@ms& (0+255),b
 18132  01300A  EC18  F0AB         	call	_delay_ms	;wreg free
 18133                           
 18134                           ;LCD.c: 192: LCD_Fill(0x0000);
 18135  01300E  0E00               	movlw	0
 18136  013010  0100               	movlb	0	; () banked
 18137  013012  6FC4               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 18138  013014  0E00               	movlw	0
 18139  013016  6FC3               	movwf	LCD_Fill@pColour& (0+255),b
 18140  013018  EC35  F0AD         	call	_LCD_Fill	;wreg free
 18141  01301C  0012               	return		;funcret
 18142  01301E                     __end_of_LCD_Init:
 18143                           	opt stack 0
 18144                           tosu	equ	0xFFF
 18145                           tosh	equ	0xFFE
 18146                           tosl	equ	0xFFD
 18147                           pclath	equ	0xFFA
 18148                           tblptru	equ	0xFF8
 18149                           tblptrh	equ	0xFF7
 18150                           tblptrl	equ	0xFF6
 18151                           tablat	equ	0xFF5
 18152                           prodh	equ	0xFF4
 18153                           prodl	equ	0xFF3
 18154                           intcon	equ	0xFF2
 18155                           postinc0	equ	0xFEE
 18156                           wreg	equ	0xFE8
 18157                           indf1	equ	0xFE7
 18158                           postdec1	equ	0xFE5
 18159                           fsr1h	equ	0xFE2
 18160                           fsr1l	equ	0xFE1
 18161                           indf2	equ	0xFDF
 18162                           postinc2	equ	0xFDE
 18163                           postdec2	equ	0xFDD
 18164                           plusw2	equ	0xFDB
 18165                           fsr2h	equ	0xFDA
 18166                           fsr2l	equ	0xFD9
 18167                           status	equ	0xFD8
 18168                           
 18169 ;; *************** function _Set_Rotation *****************
 18170 ;; Defined at:
 18171 ;;		line 248 in file "Library/LCD.c"
 18172 ;; Parameters:    Size  Location     Type
 18173 ;;  m               1    wreg     unsigned char 
 18174 ;; Auto vars:     Size  Location     Type
 18175 ;;  m               1    5[BANK0 ] unsigned char 
 18176 ;;  rotation        1    6[BANK0 ] unsigned char 
 18177 ;; Return value:  Size  Location     Type
 18178 ;;                  1    wreg      void 
 18179 ;; Registers used:
 18180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18181 ;; Tracked objects:
 18182 ;;		On entry : 0/0
 18183 ;;		On exit  : 0/0
 18184 ;;		Unchanged: 0/0
 18185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18187 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18189 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18190 ;;Total ram usage:        2 bytes
 18191 ;; Hardware stack levels used:    1
 18192 ;; Hardware stack levels required when called:    9
 18193 ;; This function calls:
 18194 ;;		_LCD_Write
 18195 ;; This function is called by:
 18196 ;;		_LCD_Init
 18197 ;; This function uses a non-reentrant model
 18198 ;;
 18199                           
 18200                           	psect	text81
 18201  014BEC                     __ptext81:
 18202                           	opt stack 0
 18203  014BEC                     _Set_Rotation:
 18204                           	opt stack 19
 18205                           
 18206                           ;incstack = 0
 18207                           ;Set_Rotation@m stored from wreg
 18208  014BEC  0100               	movlb	0	; () banked
 18209  014BEE  6FBF               	movwf	Set_Rotation@m& (0+255),b
 18210                           
 18211                           ;LCD.c: 250: UINT8 rotation = 0x00;
 18212  014BF0  0E00               	movlw	0
 18213  014BF2  0100               	movlb	0	; () banked
 18214  014BF4  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18215                           
 18216                           ; BSR set to: 0
 18217                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 18218  014BF6  0E00               	movlw	0
 18219  014BF8  0100               	movlb	0	; () banked
 18220  014BFA  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18221  014BFC  0E36               	movlw	54
 18222  014BFE  ECA6  F0B1         	call	_LCD_Write
 18223                           
 18224                           ;LCD.c: 253: rotation = (m % 4);
 18225  014C02  0100               	movlb	0	; () banked
 18226  014C04  51BF               	movf	Set_Rotation@m& (0+255),w,b
 18227  014C06  0B03               	andlw	3
 18228  014C08  0100               	movlb	0	; () banked
 18229  014C0A  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18230                           
 18231                           ;LCD.c: 255: switch(rotation)
 18232  014C0C  D02C               	goto	l117
 18233  014C0E                     
 18234                           ; BSR set to: 0
 18235                           ;LCD.c: 258: {
 18236                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 18237                           
 18238                           ; BSR set to: 0
 18239  014C0E  0E01               	movlw	1
 18240  014C10  0100               	movlb	0	; () banked
 18241  014C12  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18242  014C14  0EC8               	movlw	200
 18243  014C16  ECA6  F0B1         	call	_LCD_Write
 18244                           
 18245                           ;LCD.c: 260: w = 128;
 18246  014C1A  0E80               	movlw	128
 18247  014C1C  6E50               	movwf	_w,c
 18248                           
 18249                           ;LCD.c: 261: l = 128;
 18250  014C1E  0E80               	movlw	128
 18251  014C20  6E4F               	movwf	_l,c
 18252                           
 18253                           ;LCD.c: 262: break;
 18254  014C22  0012               	return	
 18255  014C24                     
 18256                           ;LCD.c: 265: {
 18257                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 18258  014C24  0E01               	movlw	1
 18259  014C26  0100               	movlb	0	; () banked
 18260  014C28  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18261  014C2A  0EA8               	movlw	168
 18262  014C2C  ECA6  F0B1         	call	_LCD_Write
 18263                           
 18264                           ;LCD.c: 267: w = 128;
 18265  014C30  0E80               	movlw	128
 18266  014C32  6E50               	movwf	_w,c
 18267                           
 18268                           ;LCD.c: 268: l = 128;
 18269  014C34  0E80               	movlw	128
 18270  014C36  6E4F               	movwf	_l,c
 18271                           
 18272                           ;LCD.c: 269: break;
 18273  014C38  0012               	return	
 18274  014C3A                     
 18275                           ;LCD.c: 272: {
 18276                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 18277  014C3A  0E01               	movlw	1
 18278  014C3C  0100               	movlb	0	; () banked
 18279  014C3E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18280  014C40  0E08               	movlw	8
 18281  014C42  ECA6  F0B1         	call	_LCD_Write
 18282                           
 18283                           ;LCD.c: 274: w = 128;
 18284  014C46  0E80               	movlw	128
 18285  014C48  6E50               	movwf	_w,c
 18286                           
 18287                           ;LCD.c: 275: l = 128;
 18288  014C4A  0E80               	movlw	128
 18289  014C4C  6E4F               	movwf	_l,c
 18290                           
 18291                           ;LCD.c: 276: break;
 18292  014C4E  0012               	return	
 18293  014C50                     
 18294                           ;LCD.c: 279: {
 18295                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 18296  014C50  0E01               	movlw	1
 18297  014C52  0100               	movlb	0	; () banked
 18298  014C54  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18299  014C56  0E68               	movlw	104
 18300  014C58  ECA6  F0B1         	call	_LCD_Write
 18301                           
 18302                           ;LCD.c: 281: w = 128;
 18303  014C5C  0E80               	movlw	128
 18304  014C5E  6E50               	movwf	_w,c
 18305                           
 18306                           ;LCD.c: 282: l = 128;
 18307  014C60  0E80               	movlw	128
 18308  014C62  6E4F               	movwf	_l,c
 18309                           
 18310                           ;LCD.c: 284: }
 18311                           ;LCD.c: 285: }
 18312                           
 18313                           ;LCD.c: 283: break;
 18314  014C64  0012               	return	
 18315  014C66                     l117:
 18316  014C66  0100               	movlb	0	; () banked
 18317  014C68  51C0               	movf	Set_Rotation@rotation& (0+255),w,b
 18318                           
 18319                           ; Switch size 1, requested type "space"
 18320                           ; Number of cases is 4, Range of values is 0 to 3
 18321                           ; switch strategies available:
 18322                           ; Name         Instructions Cycles
 18323                           ; simple_byte           13     7 (average)
 18324                           ;	Chosen strategy is simple_byte
 18325  014C6A  0A00               	xorlw	0	; case 0
 18326  014C6C  B4D8               	btfsc	status,2,c
 18327  014C6E  D7CF               	goto	l118
 18328  014C70  0A01               	xorlw	1	; case 1
 18329  014C72  B4D8               	btfsc	status,2,c
 18330  014C74  D7D7               	goto	l120
 18331  014C76  0A03               	xorlw	3	; case 2
 18332  014C78  B4D8               	btfsc	status,2,c
 18333  014C7A  D7DF               	goto	l121
 18334  014C7C  0A01               	xorlw	1	; case 3
 18335  014C7E  A4D8               	btfss	status,2,c
 18336  014C80  0012               	return	
 18337  014C82  D7E6               	goto	l122
 18338  014C84                     __end_of_Set_Rotation:
 18339                           	opt stack 0
 18340                           tosu	equ	0xFFF
 18341                           tosh	equ	0xFFE
 18342                           tosl	equ	0xFFD
 18343                           pclath	equ	0xFFA
 18344                           tblptru	equ	0xFF8
 18345                           tblptrh	equ	0xFF7
 18346                           tblptrl	equ	0xFF6
 18347                           tablat	equ	0xFF5
 18348                           prodh	equ	0xFF4
 18349                           prodl	equ	0xFF3
 18350                           intcon	equ	0xFF2
 18351                           postinc0	equ	0xFEE
 18352                           wreg	equ	0xFE8
 18353                           indf1	equ	0xFE7
 18354                           postdec1	equ	0xFE5
 18355                           fsr1h	equ	0xFE2
 18356                           fsr1l	equ	0xFE1
 18357                           indf2	equ	0xFDF
 18358                           postinc2	equ	0xFDE
 18359                           postdec2	equ	0xFDD
 18360                           plusw2	equ	0xFDB
 18361                           fsr2h	equ	0xFDA
 18362                           fsr2l	equ	0xFD9
 18363                           status	equ	0xFD8
 18364                           
 18365 ;; *************** function _LCD_Fill *****************
 18366 ;; Defined at:
 18367 ;;		line 287 in file "Library/LCD.c"
 18368 ;; Parameters:    Size  Location     Type
 18369 ;;  pColour         2    9[BANK0 ] unsigned short 
 18370 ;; Auto vars:     Size  Location     Type
 18371 ;;  j               1   12[BANK0 ] unsigned char 
 18372 ;;  i               1   11[BANK0 ] unsigned char 
 18373 ;; Return value:  Size  Location     Type
 18374 ;;                  1    wreg      void 
 18375 ;; Registers used:
 18376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18377 ;; Tracked objects:
 18378 ;;		On entry : 0/0
 18379 ;;		On exit  : 0/0
 18380 ;;		Unchanged: 0/0
 18381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18382 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18383 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18385 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18386 ;;Total ram usage:        4 bytes
 18387 ;; Hardware stack levels used:    1
 18388 ;; Hardware stack levels required when called:   10
 18389 ;; This function calls:
 18390 ;;		_LCD_Word_Write
 18391 ;;		_Set_Addr_Window
 18392 ;; This function is called by:
 18393 ;;		_LCD_Init
 18394 ;; This function uses a non-reentrant model
 18395 ;;
 18396                           
 18397                           	psect	text82
 18398  015A6A                     __ptext82:
 18399                           	opt stack 0
 18400  015A6A                     _LCD_Fill:
 18401                           	opt stack 18
 18402                           
 18403                           ;LCD.c: 296: UINT8 i = 0x00;
 18404                           
 18405                           ;incstack = 0
 18406  015A6A  0E00               	movlw	0
 18407  015A6C  0100               	movlb	0	; () banked
 18408  015A6E  6FC5               	movwf	LCD_Fill@i& (0+255),b
 18409                           
 18410                           ;LCD.c: 297: UINT8 j = 0x00;
 18411  015A70  0E00               	movlw	0
 18412  015A72  0100               	movlb	0	; () banked
 18413  015A74  6FC6               	movwf	LCD_Fill@j& (0+255),b
 18414                           
 18415                           ; BSR set to: 0
 18416                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 18417  015A76  0E00               	movlw	0
 18418  015A78  0100               	movlb	0	; () banked
 18419  015A7A  6FBF               	movwf	Set_Addr_Window@ys& (0+255),b
 18420  015A7C  0450               	decf	_w,w,c
 18421  015A7E  0100               	movlb	0	; () banked
 18422  015A80  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 18423  015A82  044F               	decf	_l,w,c
 18424  015A84  0100               	movlb	0	; () banked
 18425  015A86  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 18426  015A88  0E00               	movlw	0
 18427  015A8A  EC0F  F0A3         	call	_Set_Addr_Window
 18428                           
 18429                           ;LCD.c: 299: for (j = l; j > 0; j--)
 18430  015A8E  C04F  F0C6         	movff	_l,LCD_Fill@j
 18431  015A92                     l13933:
 18432  015A92  0100               	movlb	0	; () banked
 18433  015A94  51C6               	movf	LCD_Fill@j& (0+255),w,b
 18434  015A96  0100               	movlb	0	; () banked
 18435  015A98  B4D8               	btfsc	status,2,c
 18436  015A9A  0012               	return	
 18437                           
 18438                           ; BSR set to: 0
 18439                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18440                           
 18441                           ; BSR set to: 0
 18442  015A9C  C050  F0C5         	movff	_w,LCD_Fill@i
 18443  015AA0                     l13937:
 18444                           
 18445                           ; BSR set to: 0
 18446  015AA0  0100               	movlb	0	; () banked
 18447  015AA2  51C5               	movf	LCD_Fill@i& (0+255),w,b
 18448  015AA4  0100               	movlb	0	; () banked
 18449  015AA6  B4D8               	btfsc	status,2,c
 18450  015AA8  D009               	goto	u10740
 18451                           
 18452                           ; BSR set to: 0
 18453                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18454                           
 18455                           ; BSR set to: 0
 18456                           
 18457                           ; BSR set to: 0
 18458  015AAA  C0C3  F0BF         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18459  015AAE  C0C4  F0C0         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18460  015AB2  EC07  F0B2         	call	_LCD_Word_Write	;wreg free
 18461  015AB6  0100               	movlb	0	; () banked
 18462  015AB8  07C5               	decf	LCD_Fill@i& (0+255),f,b
 18463  015ABA  D7F2               	goto	l13937
 18464  015ABC                     u10740:
 18465                           
 18466                           ; BSR set to: 0
 18467                           
 18468                           ; BSR set to: 0
 18469  015ABC  0100               	movlb	0	; () banked
 18470  015ABE  07C6               	decf	LCD_Fill@j& (0+255),f,b
 18471  015AC0  D7E8               	goto	l13933
 18472  015AC2                     __end_of_LCD_Fill:
 18473                           	opt stack 0
 18474                           tosu	equ	0xFFF
 18475                           tosh	equ	0xFFE
 18476                           tosl	equ	0xFFD
 18477                           pclath	equ	0xFFA
 18478                           tblptru	equ	0xFF8
 18479                           tblptrh	equ	0xFF7
 18480                           tblptrl	equ	0xFF6
 18481                           tablat	equ	0xFF5
 18482                           prodh	equ	0xFF4
 18483                           prodl	equ	0xFF3
 18484                           intcon	equ	0xFF2
 18485                           postinc0	equ	0xFEE
 18486                           wreg	equ	0xFE8
 18487                           indf1	equ	0xFE7
 18488                           postdec1	equ	0xFE5
 18489                           fsr1h	equ	0xFE2
 18490                           fsr1l	equ	0xFE1
 18491                           indf2	equ	0xFDF
 18492                           postinc2	equ	0xFDE
 18493                           postdec2	equ	0xFDD
 18494                           plusw2	equ	0xFDB
 18495                           fsr2h	equ	0xFDA
 18496                           fsr2l	equ	0xFD9
 18497                           status	equ	0xFD8
 18498                           
 18499 ;; *************** function _Set_Addr_Window *****************
 18500 ;; Defined at:
 18501 ;;		line 214 in file "Library/LCD.c"
 18502 ;; Parameters:    Size  Location     Type
 18503 ;;  xs              1    wreg     unsigned char 
 18504 ;;  ys              1    5[BANK0 ] unsigned char 
 18505 ;;  xe              1    6[BANK0 ] unsigned char 
 18506 ;;  ye              1    7[BANK0 ] unsigned char 
 18507 ;; Auto vars:     Size  Location     Type
 18508 ;;  xs              1    8[BANK0 ] unsigned char 
 18509 ;; Return value:  Size  Location     Type
 18510 ;;                  1    wreg      void 
 18511 ;; Registers used:
 18512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18513 ;; Tracked objects:
 18514 ;;		On entry : 0/0
 18515 ;;		On exit  : 0/0
 18516 ;;		Unchanged: 0/0
 18517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18518 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18521 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18522 ;;Total ram usage:        4 bytes
 18523 ;; Hardware stack levels used:    1
 18524 ;; Hardware stack levels required when called:    9
 18525 ;; This function calls:
 18526 ;;		_LCD_Write
 18527 ;; This function is called by:
 18528 ;;		_LCD_Fill
 18529 ;;		_LCD_FillRectangle
 18530 ;;		_LCD_DrawField
 18531 ;;		_RAM_Address_Set
 18532 ;;		_LCD_DrawPixel
 18533 ;; This function uses a non-reentrant model
 18534 ;;
 18535                           
 18536                           	psect	text83
 18537  01461E                     __ptext83:
 18538                           	opt stack 0
 18539  01461E                     _Set_Addr_Window:
 18540                           	opt stack 17
 18541                           
 18542                           ; BSR set to: 0
 18543                           ;incstack = 0
 18544                           ;Set_Addr_Window@xs stored from wreg
 18545  01461E  0100               	movlb	0	; () banked
 18546  014620  6FC2               	movwf	Set_Addr_Window@xs& (0+255),b
 18547                           
 18548                           ;LCD.c: 216: ys+=2;
 18549  014622  0E02               	movlw	2
 18550  014624  0100               	movlb	0	; () banked
 18551  014626  27BF               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18552                           
 18553                           ;LCD.c: 217: ye+=2;
 18554  014628  0E02               	movlw	2
 18555  01462A  0100               	movlb	0	; () banked
 18556  01462C  27C1               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18557                           
 18558                           ;LCD.c: 218: xs+=3;
 18559  01462E  0E03               	movlw	3
 18560  014630  0100               	movlb	0	; () banked
 18561  014632  27C2               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18562                           
 18563                           ;LCD.c: 219: xe+=3;
 18564  014634  0E03               	movlw	3
 18565  014636  0100               	movlb	0	; () banked
 18566  014638  27C0               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18567                           
 18568                           ; BSR set to: 0
 18569                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18570  01463A  0E00               	movlw	0
 18571  01463C  0100               	movlb	0	; () banked
 18572  01463E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18573  014640  0E2A               	movlw	42
 18574  014642  ECA6  F0B1         	call	_LCD_Write
 18575                           
 18576                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18577  014646  0E01               	movlw	1
 18578  014648  0100               	movlb	0	; () banked
 18579  01464A  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18580  01464C  0E00               	movlw	0
 18581  01464E  ECA6  F0B1         	call	_LCD_Write
 18582                           
 18583                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18584  014652  0E01               	movlw	1
 18585  014654  0100               	movlb	0	; () banked
 18586  014656  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18587  014658  0100               	movlb	0	; () banked
 18588  01465A  51C2               	movf	Set_Addr_Window@xs& (0+255),w,b
 18589  01465C  ECA6  F0B1         	call	_LCD_Write
 18590                           
 18591                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18592  014660  0E01               	movlw	1
 18593  014662  0100               	movlb	0	; () banked
 18594  014664  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18595  014666  0E00               	movlw	0
 18596  014668  ECA6  F0B1         	call	_LCD_Write
 18597                           
 18598                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18599  01466C  0E01               	movlw	1
 18600  01466E  0100               	movlb	0	; () banked
 18601  014670  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18602  014672  0100               	movlb	0	; () banked
 18603  014674  51C0               	movf	Set_Addr_Window@xe& (0+255),w,b
 18604  014676  ECA6  F0B1         	call	_LCD_Write
 18605                           
 18606                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18607  01467A  0E00               	movlw	0
 18608  01467C  0100               	movlb	0	; () banked
 18609  01467E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18610  014680  0E2B               	movlw	43
 18611  014682  ECA6  F0B1         	call	_LCD_Write
 18612                           
 18613                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18614  014686  0E01               	movlw	1
 18615  014688  0100               	movlb	0	; () banked
 18616  01468A  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18617  01468C  0E00               	movlw	0
 18618  01468E  ECA6  F0B1         	call	_LCD_Write
 18619                           
 18620                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18621  014692  0E01               	movlw	1
 18622  014694  0100               	movlb	0	; () banked
 18623  014696  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18624  014698  0100               	movlb	0	; () banked
 18625  01469A  51BF               	movf	Set_Addr_Window@ys& (0+255),w,b
 18626  01469C  ECA6  F0B1         	call	_LCD_Write
 18627                           
 18628                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18629  0146A0  0E01               	movlw	1
 18630  0146A2  0100               	movlb	0	; () banked
 18631  0146A4  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18632  0146A6  0E00               	movlw	0
 18633  0146A8  ECA6  F0B1         	call	_LCD_Write
 18634                           
 18635                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18636  0146AC  0E01               	movlw	1
 18637  0146AE  0100               	movlb	0	; () banked
 18638  0146B0  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18639  0146B2  0100               	movlb	0	; () banked
 18640  0146B4  51C1               	movf	Set_Addr_Window@ye& (0+255),w,b
 18641  0146B6  ECA6  F0B1         	call	_LCD_Write
 18642                           
 18643                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18644  0146BA  0E00               	movlw	0
 18645  0146BC  0100               	movlb	0	; () banked
 18646  0146BE  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18647  0146C0  0E2C               	movlw	44
 18648  0146C2  ECA6  F0B1         	call	_LCD_Write
 18649  0146C6  0012               	return		;funcret
 18650  0146C8                     __end_of_Set_Addr_Window:
 18651                           	opt stack 0
 18652                           tosu	equ	0xFFF
 18653                           tosh	equ	0xFFE
 18654                           tosl	equ	0xFFD
 18655                           pclath	equ	0xFFA
 18656                           tblptru	equ	0xFF8
 18657                           tblptrh	equ	0xFF7
 18658                           tblptrl	equ	0xFF6
 18659                           tablat	equ	0xFF5
 18660                           prodh	equ	0xFF4
 18661                           prodl	equ	0xFF3
 18662                           intcon	equ	0xFF2
 18663                           postinc0	equ	0xFEE
 18664                           wreg	equ	0xFE8
 18665                           indf1	equ	0xFE7
 18666                           postdec1	equ	0xFE5
 18667                           fsr1h	equ	0xFE2
 18668                           fsr1l	equ	0xFE1
 18669                           indf2	equ	0xFDF
 18670                           postinc2	equ	0xFDE
 18671                           postdec2	equ	0xFDD
 18672                           plusw2	equ	0xFDB
 18673                           fsr2h	equ	0xFDA
 18674                           fsr2l	equ	0xFD9
 18675                           status	equ	0xFD8
 18676                           
 18677 ;; *************** function _LCD_Word_Write *****************
 18678 ;; Defined at:
 18679 ;;		line 198 in file "Library/LCD.c"
 18680 ;; Parameters:    Size  Location     Type
 18681 ;;  value           2    5[BANK0 ] unsigned short 
 18682 ;; Auto vars:     Size  Location     Type
 18683 ;;		None
 18684 ;; Return value:  Size  Location     Type
 18685 ;;                  1    wreg      void 
 18686 ;; Registers used:
 18687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18688 ;; Tracked objects:
 18689 ;;		On entry : 0/0
 18690 ;;		On exit  : 0/0
 18691 ;;		Unchanged: 0/0
 18692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18693 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18697 ;;Total ram usage:        2 bytes
 18698 ;; Hardware stack levels used:    1
 18699 ;; Hardware stack levels required when called:    9
 18700 ;; This function calls:
 18701 ;;		_LCD_Write
 18702 ;; This function is called by:
 18703 ;;		_LCD_Fill
 18704 ;;		_LCD_FillRectangle
 18705 ;;		_LCD_DrawField
 18706 ;;		_LCD_DrawPixel
 18707 ;; This function uses a non-reentrant model
 18708 ;;
 18709                           
 18710                           	psect	text84
 18711  01640E                     __ptext84:
 18712                           	opt stack 0
 18713  01640E                     _LCD_Word_Write:
 18714                           	opt stack 17
 18715                           
 18716                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18717                           
 18718                           ;incstack = 0
 18719  01640E  0E01               	movlw	1
 18720  016410  0100               	movlb	0	; () banked
 18721  016412  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18722  016414  0100               	movlb	0	; () banked
 18723  016416  51C0               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18724  016418  ECA6  F0B1         	call	_LCD_Write
 18725                           
 18726                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18727  01641C  0E01               	movlw	1
 18728  01641E  0100               	movlb	0	; () banked
 18729  016420  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18730  016422  0100               	movlb	0	; () banked
 18731  016424  51BF               	movf	LCD_Word_Write@value& (0+255),w,b
 18732  016426  ECA6  F0B1         	call	_LCD_Write
 18733  01642A  0012               	return		;funcret
 18734  01642C                     __end_of_LCD_Word_Write:
 18735                           	opt stack 0
 18736                           tosu	equ	0xFFF
 18737                           tosh	equ	0xFFE
 18738                           tosl	equ	0xFFD
 18739                           pclath	equ	0xFFA
 18740                           tblptru	equ	0xFF8
 18741                           tblptrh	equ	0xFF7
 18742                           tblptrl	equ	0xFF6
 18743                           tablat	equ	0xFF5
 18744                           prodh	equ	0xFF4
 18745                           prodl	equ	0xFF3
 18746                           intcon	equ	0xFF2
 18747                           postinc0	equ	0xFEE
 18748                           wreg	equ	0xFE8
 18749                           indf1	equ	0xFE7
 18750                           postdec1	equ	0xFE5
 18751                           fsr1h	equ	0xFE2
 18752                           fsr1l	equ	0xFE1
 18753                           indf2	equ	0xFDF
 18754                           postinc2	equ	0xFDE
 18755                           postdec2	equ	0xFDD
 18756                           plusw2	equ	0xFDB
 18757                           fsr2h	equ	0xFDA
 18758                           fsr2l	equ	0xFD9
 18759                           status	equ	0xFD8
 18760                           
 18761 ;; *************** function _LCD_Write *****************
 18762 ;; Defined at:
 18763 ;;		line 67 in file "Library/LCD.c"
 18764 ;; Parameters:    Size  Location     Type
 18765 ;;  value           1    wreg     unsigned char 
 18766 ;;  mode            1    3[BANK0 ] enum E6761
 18767 ;; Auto vars:     Size  Location     Type
 18768 ;;  value           1    4[BANK0 ] unsigned char 
 18769 ;; Return value:  Size  Location     Type
 18770 ;;                  1    wreg      void 
 18771 ;; Registers used:
 18772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18773 ;; Tracked objects:
 18774 ;;		On entry : 0/0
 18775 ;;		On exit  : 0/0
 18776 ;;		Unchanged: 0/0
 18777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18778 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18782 ;;Total ram usage:        2 bytes
 18783 ;; Hardware stack levels used:    1
 18784 ;; Hardware stack levels required when called:    8
 18785 ;; This function calls:
 18786 ;;		_Mode_Set
 18787 ;;		_SPI_Send
 18788 ;; This function is called by:
 18789 ;;		_LCD_Init
 18790 ;;		_LCD_Word_Write
 18791 ;;		_Set_Addr_Window
 18792 ;;		_Set_Rotation
 18793 ;;		_LCD_WriteCMD
 18794 ;;		_LCD_WriteData
 18795 ;;		_LCD_Data_Write
 18796 ;;		_LCD_Data_Write_4k
 18797 ;;		_Invert_Display
 18798 ;; This function uses a non-reentrant model
 18799 ;;
 18800                           
 18801                           	psect	text85
 18802  01634C                     __ptext85:
 18803                           	opt stack 0
 18804  01634C                     _LCD_Write:
 18805                           	opt stack 17
 18806                           
 18807                           ;incstack = 0
 18808                           ;LCD_Write@value stored from wreg
 18809  01634C  0100               	movlb	0	; () banked
 18810  01634E  6FBE               	movwf	LCD_Write@value& (0+255),b
 18811                           
 18812                           ;LCD.c: 89: Mode_Set(mode);
 18813  016350  0100               	movlb	0	; () banked
 18814  016352  51BD               	movf	LCD_Write@mode& (0+255),w,b
 18815  016354  EC29  F0B3         	call	_Mode_Set
 18816                           
 18817                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18818  016358  0E83               	movlw	low _SPI2
 18819  01635A  0100               	movlb	0	; () banked
 18820  01635C  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 18821  01635E  0E03               	movlw	high _SPI2
 18822  016360  0100               	movlb	0	; () banked
 18823  016362  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18824  016364  C0BE  F0BC         	movff	LCD_Write@value,SPI_Send@pData
 18825  016368  EC77  F0AA         	call	_SPI_Send	;wreg free
 18826  01636C  0012               	return		;funcret
 18827  01636E                     __end_of_LCD_Write:
 18828                           	opt stack 0
 18829                           tosu	equ	0xFFF
 18830                           tosh	equ	0xFFE
 18831                           tosl	equ	0xFFD
 18832                           pclath	equ	0xFFA
 18833                           tblptru	equ	0xFF8
 18834                           tblptrh	equ	0xFF7
 18835                           tblptrl	equ	0xFF6
 18836                           tablat	equ	0xFF5
 18837                           prodh	equ	0xFF4
 18838                           prodl	equ	0xFF3
 18839                           intcon	equ	0xFF2
 18840                           postinc0	equ	0xFEE
 18841                           wreg	equ	0xFE8
 18842                           indf1	equ	0xFE7
 18843                           postdec1	equ	0xFE5
 18844                           fsr1h	equ	0xFE2
 18845                           fsr1l	equ	0xFE1
 18846                           indf2	equ	0xFDF
 18847                           postinc2	equ	0xFDE
 18848                           postdec2	equ	0xFDD
 18849                           plusw2	equ	0xFDB
 18850                           fsr2h	equ	0xFDA
 18851                           fsr2l	equ	0xFD9
 18852                           status	equ	0xFD8
 18853                           
 18854 ;; *************** function _SPI_Send *****************
 18855 ;; Defined at:
 18856 ;;		line 226 in file "Library/SPI.c"
 18857 ;; Parameters:    Size  Location     Type
 18858 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18859 ;;		 -> SPI1(11), SPI2(11), 
 18860 ;;  pData           1    2[BANK0 ] unsigned char 
 18861 ;; Auto vars:     Size  Location     Type
 18862 ;;		None
 18863 ;; Return value:  Size  Location     Type
 18864 ;;                  1    wreg      unsigned char 
 18865 ;; Registers used:
 18866 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18867 ;; Tracked objects:
 18868 ;;		On entry : 0/0
 18869 ;;		On exit  : 0/0
 18870 ;;		Unchanged: 0/0
 18871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18872 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18875 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18876 ;;Total ram usage:        3 bytes
 18877 ;; Hardware stack levels used:    1
 18878 ;; Hardware stack levels required when called:    7
 18879 ;; This function calls:
 18880 ;;		Nothing
 18881 ;; This function is called by:
 18882 ;;		_LCD_Write
 18883 ;;		_OutSeg
 18884 ;; This function uses a non-reentrant model
 18885 ;;
 18886                           
 18887                           	psect	text86
 18888  0154EE                     __ptext86:
 18889                           	opt stack 0
 18890  0154EE                     _SPI_Send:
 18891                           	opt stack 19
 18892                           
 18893                           ;SPI.c: 253: switch (pInput->mChannel)
 18894                           
 18895                           ;incstack = 0
 18896  0154EE  D026               	goto	l678
 18897  0154F0                     
 18898                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 18899  0154F0  C0A9  FFD9         	movff	_PortC+4,fsr2l
 18900  0154F4  C0AA  FFDA         	movff	_PortC+5,fsr2h
 18901  0154F8  0100               	movlb	0	; () banked
 18902  0154FA  94DF               	bcf	indf2,2,c
 18903                           
 18904                           ; BSR set to: 0
 18905                           ;SPI.c: 257: SSP1BUF = pData;
 18906  0154FC  C0BC  FFC9         	movff	SPI_Send@pData,4041	;volatile
 18907  015500                     
 18908                           ; BSR set to: 0
 18909  015500  A0C7               	btfss	4039,0,c	;volatile
 18910  015502  D7FE               	goto	l681
 18911                           
 18912                           ;SPI.c: 259: pData = SSP1BUF;
 18913  015504  CFC9 F0BC          	movff	4041,SPI_Send@pData	;volatile
 18914                           
 18915                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 18916  015508  C0A9  FFD9         	movff	_PortC+4,fsr2l
 18917  01550C  C0AA  FFDA         	movff	_PortC+5,fsr2h
 18918  015510  0100               	movlb	0	; () banked
 18919  015512  84DF               	bsf	indf2,2,c
 18920                           
 18921                           ; BSR set to: 0
 18922                           ;SPI.c: 261: return pData;
 18923                           ;	Return value of _SPI_Send is never used
 18924  015514  0012               	return	
 18925  015516                     
 18926                           ; BSR set to: 0
 18927                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 18928                           
 18929                           ; BSR set to: 0
 18930  015516  C09F  FFD9         	movff	_PortD+4,fsr2l
 18931  01551A  C0A0  FFDA         	movff	_PortD+5,fsr2h
 18932  01551E  0100               	movlb	0	; () banked
 18933  015520  9EDF               	bcf	indf2,7,c
 18934                           
 18935                           ; BSR set to: 0
 18936                           ;SPI.c: 264: SSP2BUF = pData;
 18937  015522  C0BC  FF6F         	movff	SPI_Send@pData,3951	;volatile
 18938  015526                     
 18939                           ; BSR set to: 0
 18940  015526  A06D               	btfss	3949,0,c	;volatile
 18941  015528  D7FE               	goto	l686
 18942                           
 18943                           ;SPI.c: 266: pData = SSP2BUF;
 18944  01552A  CF6F F0BC          	movff	3951,SPI_Send@pData	;volatile
 18945                           
 18946                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 18947  01552E  C09F  FFD9         	movff	_PortD+4,fsr2l
 18948  015532  C0A0  FFDA         	movff	_PortD+5,fsr2h
 18949  015536  0100               	movlb	0	; () banked
 18950  015538  8EDF               	bsf	indf2,7,c
 18951                           
 18952                           ; BSR set to: 0
 18953                           ;SPI.c: 269: };
 18954                           
 18955                           ; BSR set to: 0
 18956                           ;SPI.c: 268: return pData;
 18957                           ;	Return value of _SPI_Send is never used
 18958  01553A  0012               	return	
 18959  01553C                     l678:
 18960                           
 18961                           ; BSR set to: 0
 18962  01553C  0100               	movlb	0	; () banked
 18963  01553E  EE20 F002          	lfsr	2,2
 18964  015542  51BA               	movf	SPI_Send@pInput& (0+255),w,b
 18965  015544  26D9               	addwf	fsr2l,f,c
 18966  015546  51BB               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 18967  015548  22DA               	addwfc	fsr2h,f,c
 18968  01554A  50DF               	movf	indf2,w,c
 18969                           
 18970                           ; Switch size 1, requested type "space"
 18971                           ; Number of cases is 2, Range of values is 0 to 1
 18972                           ; switch strategies available:
 18973                           ; Name         Instructions Cycles
 18974                           ; simple_byte            7     4 (average)
 18975                           ;	Chosen strategy is simple_byte
 18976  01554C  0A00               	xorlw	0	; case 0
 18977  01554E  B4D8               	btfsc	status,2,c
 18978  015550  D7CF               	goto	l679
 18979  015552  0A01               	xorlw	1	; case 1
 18980  015554  A4D8               	btfss	status,2,c
 18981  015556  0012               	return	
 18982  015558  D7DE               	goto	l684
 18983  01555A                     __end_of_SPI_Send:
 18984                           	opt stack 0
 18985                           tosu	equ	0xFFF
 18986                           tosh	equ	0xFFE
 18987                           tosl	equ	0xFFD
 18988                           pclath	equ	0xFFA
 18989                           tblptru	equ	0xFF8
 18990                           tblptrh	equ	0xFF7
 18991                           tblptrl	equ	0xFF6
 18992                           tablat	equ	0xFF5
 18993                           prodh	equ	0xFF4
 18994                           prodl	equ	0xFF3
 18995                           intcon	equ	0xFF2
 18996                           postinc0	equ	0xFEE
 18997                           wreg	equ	0xFE8
 18998                           indf1	equ	0xFE7
 18999                           postdec1	equ	0xFE5
 19000                           fsr1h	equ	0xFE2
 19001                           fsr1l	equ	0xFE1
 19002                           indf2	equ	0xFDF
 19003                           postinc2	equ	0xFDE
 19004                           postdec2	equ	0xFDD
 19005                           plusw2	equ	0xFDB
 19006                           fsr2h	equ	0xFDA
 19007                           fsr2l	equ	0xFD9
 19008                           status	equ	0xFD8
 19009                           
 19010 ;; *************** function _Mode_Set *****************
 19011 ;; Defined at:
 19012 ;;		line 40 in file "Library/LCD.c"
 19013 ;; Parameters:    Size  Location     Type
 19014 ;;  pMode           1    wreg     enum E6761
 19015 ;; Auto vars:     Size  Location     Type
 19016 ;;  pMode           1    0[BANK0 ] enum E6761
 19017 ;; Return value:  Size  Location     Type
 19018 ;;                  1    wreg      void 
 19019 ;; Registers used:
 19020 ;;		wreg
 19021 ;; Tracked objects:
 19022 ;;		On entry : 0/0
 19023 ;;		On exit  : 0/0
 19024 ;;		Unchanged: 0/0
 19025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19029 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19030 ;;Total ram usage:        1 bytes
 19031 ;; Hardware stack levels used:    1
 19032 ;; Hardware stack levels required when called:    7
 19033 ;; This function calls:
 19034 ;;		Nothing
 19035 ;; This function is called by:
 19036 ;;		_LCD_Write
 19037 ;; This function uses a non-reentrant model
 19038 ;;
 19039                           
 19040                           	psect	text87
 19041  016652                     __ptext87:
 19042                           	opt stack 0
 19043  016652                     _Mode_Set:
 19044                           	opt stack 17
 19045                           
 19046                           ; BSR set to: 0
 19047                           ;incstack = 0
 19048                           ;Mode_Set@pMode stored from wreg
 19049  016652  0100               	movlb	0	; () banked
 19050  016654  6FBA               	movwf	Mode_Set@pMode& (0+255),b
 19051                           
 19052                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 19053  016656  0100               	movlb	0	; () banked
 19054  016658  B1BA               	btfsc	Mode_Set@pMode& (0+255),0,b
 19055  01665A  D002               	bra	u9025
 19056  01665C  9E85               	bcf	3973,7,c	;volatile
 19057  01665E  D001               	bra	u9026
 19058  016660                     u9025:
 19059  016660  8E85               	bsf	3973,7,c	;volatile
 19060  016662                     u9026:
 19061  016662  0012               	return		;funcret
 19062  016664                     __end_of_Mode_Set:
 19063                           	opt stack 0
 19064                           tosu	equ	0xFFF
 19065                           tosh	equ	0xFFE
 19066                           tosl	equ	0xFFD
 19067                           pclath	equ	0xFFA
 19068                           tblptru	equ	0xFF8
 19069                           tblptrh	equ	0xFF7
 19070                           tblptrl	equ	0xFF6
 19071                           tablat	equ	0xFF5
 19072                           prodh	equ	0xFF4
 19073                           prodl	equ	0xFF3
 19074                           intcon	equ	0xFF2
 19075                           postinc0	equ	0xFEE
 19076                           wreg	equ	0xFE8
 19077                           indf1	equ	0xFE7
 19078                           postdec1	equ	0xFE5
 19079                           fsr1h	equ	0xFE2
 19080                           fsr1l	equ	0xFE1
 19081                           indf2	equ	0xFDF
 19082                           postinc2	equ	0xFDE
 19083                           postdec2	equ	0xFDD
 19084                           plusw2	equ	0xFDB
 19085                           fsr2h	equ	0xFDA
 19086                           fsr2l	equ	0xFD9
 19087                           status	equ	0xFD8
 19088                           
 19089 ;; *************** function _Configure_GPIOs *****************
 19090 ;; Defined at:
 19091 ;;		line 46 in file "Library/LCD.c"
 19092 ;; Parameters:    Size  Location     Type
 19093 ;;		None
 19094 ;; Auto vars:     Size  Location     Type
 19095 ;;		None
 19096 ;; Return value:  Size  Location     Type
 19097 ;;                  1    wreg      void 
 19098 ;; Registers used:
 19099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19100 ;; Tracked objects:
 19101 ;;		On entry : 0/0
 19102 ;;		On exit  : 0/0
 19103 ;;		Unchanged: 0/0
 19104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19109 ;;Total ram usage:        0 bytes
 19110 ;; Hardware stack levels used:    1
 19111 ;; Hardware stack levels required when called:   14
 19112 ;; This function calls:
 19113 ;;		_LCD_Reset
 19114 ;;		_Port_SetPinType
 19115 ;;		_SPI_Init
 19116 ;;		_SPI_MaxSpeed
 19117 ;; This function is called by:
 19118 ;;		_LCD_Init
 19119 ;; This function uses a non-reentrant model
 19120 ;;
 19121                           
 19122                           	psect	text88
 19123  01547E                     __ptext88:
 19124                           	opt stack 0
 19125  01547E                     _Configure_GPIOs:
 19126                           	opt stack 14
 19127                           
 19128                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 19129                           
 19130                           ;incstack = 0
 19131  01547E  0EC0               	movlw	low _PortF
 19132  015480  0100               	movlb	0	; () banked
 19133  015482  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19134  015484  0E03               	movlw	high _PortF
 19135  015486  0100               	movlb	0	; () banked
 19136  015488  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19137  01548A  0E07               	movlw	7
 19138  01548C  0100               	movlb	0	; () banked
 19139  01548E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19140  015490  0E03               	movlw	3
 19141  015492  0100               	movlb	0	; () banked
 19142  015494  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19143  015496  EC5B  F093         	call	_Port_SetPinType	;wreg free
 19144                           
 19145                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 19146  01549A  0EC0               	movlw	low _PortF
 19147  01549C  0100               	movlb	0	; () banked
 19148  01549E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19149  0154A0  0E03               	movlw	high _PortF
 19150  0154A2  0100               	movlb	0	; () banked
 19151  0154A4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19152  0154A6  0E06               	movlw	6
 19153  0154A8  0100               	movlb	0	; () banked
 19154  0154AA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19155  0154AC  0E03               	movlw	3
 19156  0154AE  0100               	movlb	0	; () banked
 19157  0154B0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19158  0154B2  EC5B  F093         	call	_Port_SetPinType	;wreg free
 19159                           
 19160                           ;LCD.c: 55: LCD_Reset();
 19161  0154B6  ECB2  F0AD         	call	_LCD_Reset	;wreg free
 19162                           
 19163                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 19164  0154BA  0EC0               	movlw	192
 19165  0154BC  0100               	movlb	0	; () banked
 19166  0154BE  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 19167  0154C0  0EC6               	movlw	198
 19168  0154C2  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19169  0154C4  0E2D               	movlw	45
 19170  0154C6  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19171  0154C8  0E00               	movlw	0
 19172  0154CA  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19173  0154CC  0E01               	movlw	1
 19174  0154CE  0100               	movlb	0	; () banked
 19175  0154D0  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 19176  0154D2  0E01               	movlw	1
 19177  0154D4  0100               	movlb	0	; () banked
 19178  0154D6  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 19179  0154D8  EC53  F082         	call	_SPI_Init	;wreg free
 19180                           
 19181                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 19182  0154DC  0E83               	movlw	low _SPI2
 19183  0154DE  0100               	movlb	0	; () banked
 19184  0154E0  6FC9               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 19185  0154E2  0E03               	movlw	high _SPI2
 19186  0154E4  0100               	movlb	0	; () banked
 19187  0154E6  6FCA               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 19188  0154E8  EC91  F0A9         	call	_SPI_MaxSpeed	;wreg free
 19189  0154EC  0012               	return		;funcret
 19190  0154EE                     __end_of_Configure_GPIOs:
 19191                           	opt stack 0
 19192                           tosu	equ	0xFFF
 19193                           tosh	equ	0xFFE
 19194                           tosl	equ	0xFFD
 19195                           pclath	equ	0xFFA
 19196                           tblptru	equ	0xFF8
 19197                           tblptrh	equ	0xFF7
 19198                           tblptrl	equ	0xFF6
 19199                           tablat	equ	0xFF5
 19200                           prodh	equ	0xFF4
 19201                           prodl	equ	0xFF3
 19202                           intcon	equ	0xFF2
 19203                           postinc0	equ	0xFEE
 19204                           wreg	equ	0xFE8
 19205                           indf1	equ	0xFE7
 19206                           postdec1	equ	0xFE5
 19207                           fsr1h	equ	0xFE2
 19208                           fsr1l	equ	0xFE1
 19209                           indf2	equ	0xFDF
 19210                           postinc2	equ	0xFDE
 19211                           postdec2	equ	0xFDD
 19212                           plusw2	equ	0xFDB
 19213                           fsr2h	equ	0xFDA
 19214                           fsr2l	equ	0xFD9
 19215                           status	equ	0xFD8
 19216                           
 19217 ;; *************** function _SPI_MaxSpeed *****************
 19218 ;; Defined at:
 19219 ;;		line 201 in file "Library/SPI.c"
 19220 ;; Parameters:    Size  Location     Type
 19221 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19222 ;;		 -> SPI2(11), 
 19223 ;; Auto vars:     Size  Location     Type
 19224 ;;		None
 19225 ;; Return value:  Size  Location     Type
 19226 ;;                  1    wreg      void 
 19227 ;; Registers used:
 19228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19229 ;; Tracked objects:
 19230 ;;		On entry : 0/0
 19231 ;;		On exit  : 0/0
 19232 ;;		Unchanged: 0/0
 19233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19237 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19238 ;;Total ram usage:        2 bytes
 19239 ;; Hardware stack levels used:    1
 19240 ;; Hardware stack levels required when called:    9
 19241 ;; This function calls:
 19242 ;;		_Byte_SetBit
 19243 ;;		_Byte_SetQuad
 19244 ;; This function is called by:
 19245 ;;		_Configure_GPIOs
 19246 ;; This function uses a non-reentrant model
 19247 ;;
 19248                           
 19249                           	psect	text89
 19250  015322                     __ptext89:
 19251                           	opt stack 0
 19252  015322                     _SPI_MaxSpeed:
 19253                           	opt stack 18
 19254                           
 19255                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19256                           
 19257                           ;incstack = 0
 19258  015322  0100               	movlb	0	; () banked
 19259  015324  EE20 F006          	lfsr	2,6
 19260  015328  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19261  01532A  26D9               	addwf	fsr2l,f,c
 19262  01532C  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19263  01532E  22DA               	addwfc	fsr2h,f,c
 19264  015330  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19265  015334  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19266  015338  0E05               	movlw	5
 19267  01533A  0100               	movlb	0	; () banked
 19268  01533C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19269  01533E  0E00               	movlw	0
 19270  015340  0100               	movlb	0	; () banked
 19271  015342  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19272  015344  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 19273                           
 19274                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 19275  015348  0100               	movlb	0	; () banked
 19276  01534A  EE20 F006          	lfsr	2,6
 19277  01534E  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19278  015350  26D9               	addwf	fsr2l,f,c
 19279  015352  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19280  015354  22DA               	addwfc	fsr2h,f,c
 19281  015356  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 19282  01535A  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 19283  01535E  0E00               	movlw	0
 19284  015360  0100               	movlb	0	; () banked
 19285  015362  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19286  015364  0E00               	movlw	0
 19287  015366  0100               	movlb	0	; () banked
 19288  015368  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 19289  01536A  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 19290                           
 19291                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19292  01536E  0100               	movlb	0	; () banked
 19293  015370  EE20 F006          	lfsr	2,6
 19294  015374  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19295  015376  26D9               	addwf	fsr2l,f,c
 19296  015378  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19297  01537A  22DA               	addwfc	fsr2h,f,c
 19298  01537C  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19299  015380  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19300  015384  0E05               	movlw	5
 19301  015386  0100               	movlb	0	; () banked
 19302  015388  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19303  01538A  0E01               	movlw	1
 19304  01538C  0100               	movlb	0	; () banked
 19305  01538E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19306  015390  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 19307  015394  0012               	return		;funcret
 19308  015396                     __end_of_SPI_MaxSpeed:
 19309                           	opt stack 0
 19310                           tosu	equ	0xFFF
 19311                           tosh	equ	0xFFE
 19312                           tosl	equ	0xFFD
 19313                           pclath	equ	0xFFA
 19314                           tblptru	equ	0xFF8
 19315                           tblptrh	equ	0xFF7
 19316                           tblptrl	equ	0xFF6
 19317                           tablat	equ	0xFF5
 19318                           prodh	equ	0xFF4
 19319                           prodl	equ	0xFF3
 19320                           intcon	equ	0xFF2
 19321                           postinc0	equ	0xFEE
 19322                           wreg	equ	0xFE8
 19323                           indf1	equ	0xFE7
 19324                           postdec1	equ	0xFE5
 19325                           fsr1h	equ	0xFE2
 19326                           fsr1l	equ	0xFE1
 19327                           indf2	equ	0xFDF
 19328                           postinc2	equ	0xFDE
 19329                           postdec2	equ	0xFDD
 19330                           plusw2	equ	0xFDB
 19331                           fsr2h	equ	0xFDA
 19332                           fsr2l	equ	0xFD9
 19333                           status	equ	0xFD8
 19334                           
 19335 ;; *************** function _LCD_Reset *****************
 19336 ;; Defined at:
 19337 ;;		line 95 in file "Library/LCD.c"
 19338 ;; Parameters:    Size  Location     Type
 19339 ;;		None
 19340 ;; Auto vars:     Size  Location     Type
 19341 ;;		None
 19342 ;; Return value:  Size  Location     Type
 19343 ;;                  1    wreg      void 
 19344 ;; Registers used:
 19345 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19346 ;; Tracked objects:
 19347 ;;		On entry : 0/0
 19348 ;;		On exit  : 0/0
 19349 ;;		Unchanged: 0/0
 19350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19355 ;;Total ram usage:        0 bytes
 19356 ;; Hardware stack levels used:    1
 19357 ;; Hardware stack levels required when called:   13
 19358 ;; This function calls:
 19359 ;;		_LED_Toggle
 19360 ;;		_Reset_High
 19361 ;;		_Reset_Low
 19362 ;;		_delay_ms
 19363 ;; This function is called by:
 19364 ;;		_Configure_GPIOs
 19365 ;; This function uses a non-reentrant model
 19366 ;;
 19367                           
 19368                           	psect	text90
 19369  015B64                     __ptext90:
 19370                           	opt stack 0
 19371  015B64                     _LCD_Reset:
 19372                           	opt stack 14
 19373                           
 19374                           ;LCD.c: 97: Reset_High();
 19375                           
 19376                           ;incstack = 0
 19377  015B64  EC25  F0B2         	call	_Reset_High	;wreg free
 19378                           
 19379                           ;LCD.c: 98: LED_Toggle(eLED2);
 19380  015B68  0E01               	movlw	1
 19381  015B6A  EC92  F0AE         	call	_LED_Toggle
 19382                           
 19383                           ;LCD.c: 99: delay_ms(0x80);
 19384  015B6E  0E00               	movlw	0
 19385  015B70  0100               	movlb	0	; () banked
 19386  015B72  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19387  015B74  0E80               	movlw	128
 19388  015B76  6FBA               	movwf	delay_ms@ms& (0+255),b
 19389  015B78  EC18  F0AB         	call	_delay_ms	;wreg free
 19390                           
 19391                           ;LCD.c: 100: LED_Toggle(eLED2);
 19392  015B7C  0E01               	movlw	1
 19393  015B7E  EC92  F0AE         	call	_LED_Toggle
 19394                           
 19395                           ;LCD.c: 101: Reset_Low();
 19396  015B82  EC16  F0B2         	call	_Reset_Low	;wreg free
 19397                           
 19398                           ;LCD.c: 102: delay_ms(0x80);
 19399  015B86  0E00               	movlw	0
 19400  015B88  0100               	movlb	0	; () banked
 19401  015B8A  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19402  015B8C  0E80               	movlw	128
 19403  015B8E  6FBA               	movwf	delay_ms@ms& (0+255),b
 19404  015B90  EC18  F0AB         	call	_delay_ms	;wreg free
 19405                           
 19406                           ;LCD.c: 103: LED_Toggle(eLED2);
 19407  015B94  0E01               	movlw	1
 19408  015B96  EC92  F0AE         	call	_LED_Toggle
 19409                           
 19410                           ;LCD.c: 104: Reset_High();
 19411  015B9A  EC25  F0B2         	call	_Reset_High	;wreg free
 19412                           
 19413                           ;LCD.c: 105: delay_ms(0x80);
 19414  015B9E  0E00               	movlw	0
 19415  015BA0  0100               	movlb	0	; () banked
 19416  015BA2  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19417  015BA4  0E80               	movlw	128
 19418  015BA6  6FBA               	movwf	delay_ms@ms& (0+255),b
 19419  015BA8  EC18  F0AB         	call	_delay_ms	;wreg free
 19420                           
 19421                           ;LCD.c: 106: LED_Toggle(eLED2);
 19422  015BAC  0E01               	movlw	1
 19423  015BAE  EC92  F0AE         	call	_LED_Toggle
 19424  015BB2  0012               	return		;funcret
 19425  015BB4                     __end_of_LCD_Reset:
 19426                           	opt stack 0
 19427                           tosu	equ	0xFFF
 19428                           tosh	equ	0xFFE
 19429                           tosl	equ	0xFFD
 19430                           pclath	equ	0xFFA
 19431                           tblptru	equ	0xFF8
 19432                           tblptrh	equ	0xFF7
 19433                           tblptrl	equ	0xFF6
 19434                           tablat	equ	0xFF5
 19435                           prodh	equ	0xFF4
 19436                           prodl	equ	0xFF3
 19437                           intcon	equ	0xFF2
 19438                           postinc0	equ	0xFEE
 19439                           wreg	equ	0xFE8
 19440                           indf1	equ	0xFE7
 19441                           postdec1	equ	0xFE5
 19442                           fsr1h	equ	0xFE2
 19443                           fsr1l	equ	0xFE1
 19444                           indf2	equ	0xFDF
 19445                           postinc2	equ	0xFDE
 19446                           postdec2	equ	0xFDD
 19447                           plusw2	equ	0xFDB
 19448                           fsr2h	equ	0xFDA
 19449                           fsr2l	equ	0xFD9
 19450                           status	equ	0xFD8
 19451                           
 19452 ;; *************** function _delay_ms *****************
 19453 ;; Defined at:
 19454 ;;		line 240 in file "Library/Types.c"
 19455 ;; Parameters:    Size  Location     Type
 19456 ;;  ms              2    0[BANK0 ] unsigned short 
 19457 ;; Auto vars:     Size  Location     Type
 19458 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19459 ;; Return value:  Size  Location     Type
 19460 ;;                  1    wreg      void 
 19461 ;; Registers used:
 19462 ;;		wreg, status,2, status,0
 19463 ;; Tracked objects:
 19464 ;;		On entry : 0/0
 19465 ;;		On exit  : 0/0
 19466 ;;		Unchanged: 0/0
 19467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19468 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19469 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19471 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19472 ;;Total ram usage:        6 bytes
 19473 ;; Hardware stack levels used:    1
 19474 ;; Hardware stack levels required when called:    7
 19475 ;; This function calls:
 19476 ;;		Nothing
 19477 ;; This function is called by:
 19478 ;;		_LCD_Reset
 19479 ;;		_LCD_Init
 19480 ;;		_MXK_Init
 19481 ;;		_init
 19482 ;;		_move_and_rotate
 19483 ;;		_mode4
 19484 ;; This function uses a non-reentrant model
 19485 ;;
 19486                           
 19487                           	psect	text91
 19488  015630                     __ptext91:
 19489                           	opt stack 0
 19490  015630                     _delay_ms:
 19491                           	opt stack 22
 19492                           
 19493                           ;Types.c: 242: volatile unsigned long u;
 19494                           ;Types.c: 243: while (ms--)
 19495                           
 19496                           ;incstack = 0
 19497  015630  D01F               	goto	u9430
 19498  015632                     l12645:
 19499                           
 19500                           ;Types.c: 244: {
 19501                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19502  015632  0E00               	movlw	0
 19503  015634  0100               	movlb	0	; () banked
 19504  015636  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19505  015638  0E00               	movlw	0
 19506  01563A  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19507  01563C  0E00               	movlw	0
 19508  01563E  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19509  015640  0E00               	movlw	0
 19510  015642  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19511  015644                     l12647:
 19512                           
 19513                           ; BSR set to: 0
 19514  015644  0100               	movlb	0	; () banked
 19515  015646  51BF               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19516  015648  0100               	movlb	0	; () banked
 19517  01564A  11BE               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19518  01564C  E111               	bnz	l12653
 19519  01564E  0EB0               	movlw	176
 19520  015650  0100               	movlb	0	; () banked
 19521  015652  5DBC               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19522  015654  0E04               	movlw	4
 19523  015656  0100               	movlb	0	; () banked
 19524  015658  59BD               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19525  01565A  B0D8               	btfsc	status,0,c
 19526  01565C  D009               	goto	u9430
 19527                           
 19528                           ; BSR set to: 0
 19529                           
 19530                           ; BSR set to: 0
 19531  01565E  F000               	nop		; ;# 
 19532  015660  0E01               	movlw	1
 19533  015662  0100               	movlb	0	; () banked
 19534  015664  27BC               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19535  015666  0E00               	movlw	0
 19536  015668  23BD               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19537  01566A  23BE               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19538  01566C  23BF               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19539  01566E  D7EA               	goto	l12647
 19540  015670                     u9430:
 19541  015670                     l12653:
 19542  015670  0100               	movlb	0	; () banked
 19543  015672  07BA               	decf	delay_ms@ms& (0+255),f,b
 19544  015674  A0D8               	btfss	status,0,c
 19545  015676  07BB               	decf	(delay_ms@ms+1)& (0+255),f,b
 19546  015678  0100               	movlb	0	; () banked
 19547  01567A  29BA               	incf	delay_ms@ms& (0+255),w,b
 19548  01567C  E1DA               	bnz	l12645
 19549  01567E  0100               	movlb	0	; () banked
 19550  015680  29BB               	incf	(delay_ms@ms+1)& (0+255),w,b
 19551  015682  A4D8               	btfss	status,2,c
 19552  015684  D7D6               	goto	l824
 19553                           
 19554                           ; BSR set to: 0
 19555                           ;Types.c: 251: }
 19556                           ;Types.c: 252: }
 19557                           ;Types.c: 253: u = 0x8008;
 19558                           
 19559                           ; BSR set to: 0
 19560  015686  0E08               	movlw	8
 19561  015688  0100               	movlb	0	; () banked
 19562  01568A  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19563  01568C  0E80               	movlw	128
 19564  01568E  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19565  015690  0E00               	movlw	0
 19566  015692  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19567  015694  0E00               	movlw	0
 19568  015696  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19569                           
 19570                           ; BSR set to: 0
 19571  015698  0012               	return		;funcret
 19572  01569A                     __end_of_delay_ms:
 19573                           	opt stack 0
 19574                           tosu	equ	0xFFF
 19575                           tosh	equ	0xFFE
 19576                           tosl	equ	0xFFD
 19577                           pclath	equ	0xFFA
 19578                           tblptru	equ	0xFF8
 19579                           tblptrh	equ	0xFF7
 19580                           tblptrl	equ	0xFF6
 19581                           tablat	equ	0xFF5
 19582                           prodh	equ	0xFF4
 19583                           prodl	equ	0xFF3
 19584                           intcon	equ	0xFF2
 19585                           postinc0	equ	0xFEE
 19586                           wreg	equ	0xFE8
 19587                           indf1	equ	0xFE7
 19588                           postdec1	equ	0xFE5
 19589                           fsr1h	equ	0xFE2
 19590                           fsr1l	equ	0xFE1
 19591                           indf2	equ	0xFDF
 19592                           postinc2	equ	0xFDE
 19593                           postdec2	equ	0xFDD
 19594                           plusw2	equ	0xFDB
 19595                           fsr2h	equ	0xFDA
 19596                           fsr2l	equ	0xFD9
 19597                           status	equ	0xFD8
 19598                           
 19599 ;; *************** function _Reset_Low *****************
 19600 ;; Defined at:
 19601 ;;		line 32 in file "Library/LCD.c"
 19602 ;; Parameters:    Size  Location     Type
 19603 ;;		None
 19604 ;; Auto vars:     Size  Location     Type
 19605 ;;		None
 19606 ;; Return value:  Size  Location     Type
 19607 ;;                  1    wreg      void 
 19608 ;; Registers used:
 19609 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19610 ;; Tracked objects:
 19611 ;;		On entry : 0/0
 19612 ;;		On exit  : 0/0
 19613 ;;		Unchanged: 0/0
 19614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19619 ;;Total ram usage:        0 bytes
 19620 ;; Hardware stack levels used:    1
 19621 ;; Hardware stack levels required when called:   11
 19622 ;; This function calls:
 19623 ;;		_Port_SetPin
 19624 ;; This function is called by:
 19625 ;;		_LCD_Reset
 19626 ;; This function uses a non-reentrant model
 19627 ;;
 19628                           
 19629                           	psect	text92
 19630  01642C                     __ptext92:
 19631                           	opt stack 0
 19632  01642C                     _Reset_Low:
 19633                           	opt stack 15
 19634                           
 19635                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 19636                           
 19637                           ; BSR set to: 0
 19638                           ;incstack = 0
 19639  01642C  0EC0               	movlw	low _PortF
 19640  01642E  0100               	movlb	0	; () banked
 19641  016430  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19642  016432  0E03               	movlw	high _PortF
 19643  016434  0100               	movlb	0	; () banked
 19644  016436  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19645  016438  0E06               	movlw	6
 19646  01643A  0100               	movlb	0	; () banked
 19647  01643C  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19648  01643E  0E01               	movlw	1
 19649  016440  0100               	movlb	0	; () banked
 19650  016442  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19651  016444  ECC8  F09F         	call	_Port_SetPin	;wreg free
 19652  016448  0012               	return		;funcret
 19653  01644A                     __end_of_Reset_Low:
 19654                           	opt stack 0
 19655                           tosu	equ	0xFFF
 19656                           tosh	equ	0xFFE
 19657                           tosl	equ	0xFFD
 19658                           pclath	equ	0xFFA
 19659                           tblptru	equ	0xFF8
 19660                           tblptrh	equ	0xFF7
 19661                           tblptrl	equ	0xFF6
 19662                           tablat	equ	0xFF5
 19663                           prodh	equ	0xFF4
 19664                           prodl	equ	0xFF3
 19665                           intcon	equ	0xFF2
 19666                           postinc0	equ	0xFEE
 19667                           wreg	equ	0xFE8
 19668                           indf1	equ	0xFE7
 19669                           postdec1	equ	0xFE5
 19670                           fsr1h	equ	0xFE2
 19671                           fsr1l	equ	0xFE1
 19672                           indf2	equ	0xFDF
 19673                           postinc2	equ	0xFDE
 19674                           postdec2	equ	0xFDD
 19675                           plusw2	equ	0xFDB
 19676                           fsr2h	equ	0xFDA
 19677                           fsr2l	equ	0xFD9
 19678                           status	equ	0xFD8
 19679                           
 19680 ;; *************** function _Reset_High *****************
 19681 ;; Defined at:
 19682 ;;		line 36 in file "Library/LCD.c"
 19683 ;; Parameters:    Size  Location     Type
 19684 ;;		None
 19685 ;; Auto vars:     Size  Location     Type
 19686 ;;		None
 19687 ;; Return value:  Size  Location     Type
 19688 ;;                  1    wreg      void 
 19689 ;; Registers used:
 19690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19691 ;; Tracked objects:
 19692 ;;		On entry : 0/0
 19693 ;;		On exit  : 0/0
 19694 ;;		Unchanged: 0/0
 19695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19700 ;;Total ram usage:        0 bytes
 19701 ;; Hardware stack levels used:    1
 19702 ;; Hardware stack levels required when called:   11
 19703 ;; This function calls:
 19704 ;;		_Port_SetPin
 19705 ;; This function is called by:
 19706 ;;		_LCD_Reset
 19707 ;; This function uses a non-reentrant model
 19708 ;;
 19709                           
 19710                           	psect	text93
 19711  01644A                     __ptext93:
 19712                           	opt stack 0
 19713  01644A                     _Reset_High:
 19714                           	opt stack 15
 19715                           
 19716                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 19717                           
 19718                           ;incstack = 0
 19719  01644A  0EC0               	movlw	low _PortF
 19720  01644C  0100               	movlb	0	; () banked
 19721  01644E  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19722  016450  0E03               	movlw	high _PortF
 19723  016452  0100               	movlb	0	; () banked
 19724  016454  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19725  016456  0E06               	movlw	6
 19726  016458  0100               	movlb	0	; () banked
 19727  01645A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19728  01645C  0E00               	movlw	0
 19729  01645E  0100               	movlb	0	; () banked
 19730  016460  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19731  016462  ECC8  F09F         	call	_Port_SetPin	;wreg free
 19732  016466  0012               	return		;funcret
 19733  016468                     __end_of_Reset_High:
 19734                           	opt stack 0
 19735                           tosu	equ	0xFFF
 19736                           tosh	equ	0xFFE
 19737                           tosl	equ	0xFFD
 19738                           pclath	equ	0xFFA
 19739                           tblptru	equ	0xFF8
 19740                           tblptrh	equ	0xFF7
 19741                           tblptrl	equ	0xFF6
 19742                           tablat	equ	0xFF5
 19743                           prodh	equ	0xFF4
 19744                           prodl	equ	0xFF3
 19745                           intcon	equ	0xFF2
 19746                           postinc0	equ	0xFEE
 19747                           wreg	equ	0xFE8
 19748                           indf1	equ	0xFE7
 19749                           postdec1	equ	0xFE5
 19750                           fsr1h	equ	0xFE2
 19751                           fsr1l	equ	0xFE1
 19752                           indf2	equ	0xFDF
 19753                           postinc2	equ	0xFDE
 19754                           postdec2	equ	0xFDD
 19755                           plusw2	equ	0xFDB
 19756                           fsr2h	equ	0xFDA
 19757                           fsr2l	equ	0xFD9
 19758                           status	equ	0xFD8
 19759                           
 19760 ;; *************** function _ISR_Enable *****************
 19761 ;; Defined at:
 19762 ;;		line 27 in file "Library/ISR.c"
 19763 ;; Parameters:    Size  Location     Type
 19764 ;;		None
 19765 ;; Auto vars:     Size  Location     Type
 19766 ;;		None
 19767 ;; Return value:  Size  Location     Type
 19768 ;;                  1    wreg      void 
 19769 ;; Registers used:
 19770 ;;		None
 19771 ;; Tracked objects:
 19772 ;;		On entry : 0/0
 19773 ;;		On exit  : 0/0
 19774 ;;		Unchanged: 0/0
 19775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19780 ;;Total ram usage:        0 bytes
 19781 ;; Hardware stack levels used:    1
 19782 ;; Hardware stack levels required when called:    7
 19783 ;; This function calls:
 19784 ;;		Nothing
 19785 ;; This function is called by:
 19786 ;;		_init
 19787 ;; This function uses a non-reentrant model
 19788 ;;
 19789                           
 19790                           	psect	text94
 19791  0166F2                     __ptext94:
 19792                           	opt stack 0
 19793  0166F2                     _ISR_Enable:
 19794                           	opt stack 22
 19795                           
 19796                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19797                           
 19798                           ;incstack = 0
 19799  0166F2  8CF2               	bsf	intcon,6,c	;volatile
 19800                           
 19801                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19802  0166F4  8EF2               	bsf	intcon,7,c	;volatile
 19803                           
 19804                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19805  0166F6  88F2               	bsf	intcon,4,c	;volatile
 19806                           
 19807                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19808  0166F8  92F2               	bcf	intcon,1,c	;volatile
 19809  0166FA  0012               	return		;funcret
 19810  0166FC                     __end_of_ISR_Enable:
 19811                           	opt stack 0
 19812                           tosu	equ	0xFFF
 19813                           tosh	equ	0xFFE
 19814                           tosl	equ	0xFFD
 19815                           pclath	equ	0xFFA
 19816                           tblptru	equ	0xFF8
 19817                           tblptrh	equ	0xFF7
 19818                           tblptrl	equ	0xFF6
 19819                           tablat	equ	0xFF5
 19820                           prodh	equ	0xFF4
 19821                           prodl	equ	0xFF3
 19822                           intcon	equ	0xFF2
 19823                           postinc0	equ	0xFEE
 19824                           wreg	equ	0xFE8
 19825                           indf1	equ	0xFE7
 19826                           postdec1	equ	0xFE5
 19827                           fsr1h	equ	0xFE2
 19828                           fsr1l	equ	0xFE1
 19829                           indf2	equ	0xFDF
 19830                           postinc2	equ	0xFDE
 19831                           postdec2	equ	0xFDD
 19832                           plusw2	equ	0xFDB
 19833                           fsr2h	equ	0xFDA
 19834                           fsr2l	equ	0xFD9
 19835                           status	equ	0xFD8
 19836                           
 19837 ;; *************** function _HMI_Init *****************
 19838 ;; Defined at:
 19839 ;;		line 104 in file "HMI.c"
 19840 ;; Parameters:    Size  Location     Type
 19841 ;;		None
 19842 ;; Auto vars:     Size  Location     Type
 19843 ;;  in              2   59[BANK0 ] unsigned short 
 19844 ;; Return value:  Size  Location     Type
 19845 ;;                  1    wreg      void 
 19846 ;; Registers used:
 19847 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19848 ;; Tracked objects:
 19849 ;;		On entry : 0/0
 19850 ;;		On exit  : 0/0
 19851 ;;		Unchanged: 0/0
 19852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19854 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19856 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19857 ;;Total ram usage:        2 bytes
 19858 ;; Hardware stack levels used:    1
 19859 ;; Hardware stack levels required when called:   16
 19860 ;; This function calls:
 19861 ;;		_Button_Init
 19862 ;;		_SPI_Init
 19863 ;;		_SPI_MinSpeed
 19864 ;; This function is called by:
 19865 ;;		_init
 19866 ;; This function uses a non-reentrant model
 19867 ;;
 19868                           
 19869                           	psect	text95
 19870  01212C                     __ptext95:
 19871                           	opt stack 0
 19872  01212C                     _HMI_Init:
 19873                           	opt stack 13
 19874                           
 19875                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 19876                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 19877                           
 19878                           ;incstack = 0
 19879  01212C  0E6E               	movlw	low (_HMIBoard+48)
 19880  01212E  0101               	movlb	1	; () banked
 19881  012130  6F00               	movwf	Button_Init@pInput& (0+255),b
 19882  012132  0E03               	movlw	high (_HMIBoard+48)
 19883  012134  0101               	movlb	1	; () banked
 19884  012136  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19885  012138  0E00               	movlw	0
 19886  01213A  0101               	movlb	1	; () banked
 19887  01213C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19888  01213E  0E02               	movlw	2
 19889  012140  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19890  012142  0E2C               	movlw	low _HMI_InitButtons
 19891  012144  0101               	movlb	1	; () banked
 19892  012146  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19893  012148  0E67               	movlw	high _HMI_InitButtons
 19894  01214A  0101               	movlb	1	; () banked
 19895  01214C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19896  01214E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19897  012150  0101               	movlb	1	; () banked
 19898  012152  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19899  012154  0E60               	movlw	low _HMI_DIPSwitch
 19900  012156  0101               	movlb	1	; () banked
 19901  012158  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19902  01215A  0E65               	movlw	high _HMI_DIPSwitch
 19903  01215C  0101               	movlb	1	; () banked
 19904  01215E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19905  012160  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 19906  012162  0101               	movlb	1	; () banked
 19907  012164  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19908  012166  0E04               	movlw	low _Event_NULL
 19909  012168  0101               	movlb	1	; () banked
 19910  01216A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19911  01216C  0E14               	movlw	high _Event_NULL
 19912  01216E  0101               	movlb	1	; () banked
 19913  012170  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19914  012172  0E00               	movlw	low (_Event_NULL shr (0+16))
 19915  012174  0101               	movlb	1	; () banked
 19916  012176  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19917  012178  ECF6  F09E         	call	_Button_Init	;wreg free
 19918                           
 19919                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 19920                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 19921  01217C  0E50               	movlw	low (_HMIBoard+18)
 19922  01217E  0101               	movlb	1	; () banked
 19923  012180  6F00               	movwf	Button_Init@pInput& (0+255),b
 19924  012182  0E03               	movlw	high (_HMIBoard+18)
 19925  012184  0101               	movlb	1	; () banked
 19926  012186  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19927  012188  0E00               	movlw	0
 19928  01218A  0101               	movlb	1	; () banked
 19929  01218C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19930  01218E  0E02               	movlw	2
 19931  012190  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19932  012192  0E2C               	movlw	low _HMI_InitButtons
 19933  012194  0101               	movlb	1	; () banked
 19934  012196  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19935  012198  0E67               	movlw	high _HMI_InitButtons
 19936  01219A  0101               	movlb	1	; () banked
 19937  01219C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19938  01219E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19939  0121A0  0101               	movlb	1	; () banked
 19940  0121A2  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19941  0121A4  0EC0               	movlw	low _HMI_LeftSwitch
 19942  0121A6  0101               	movlb	1	; () banked
 19943  0121A8  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19944  0121AA  0E65               	movlw	high _HMI_LeftSwitch
 19945  0121AC  0101               	movlb	1	; () banked
 19946  0121AE  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19947  0121B0  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 19948  0121B2  0101               	movlb	1	; () banked
 19949  0121B4  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19950  0121B6  0E04               	movlw	low _Event_NULL
 19951  0121B8  0101               	movlb	1	; () banked
 19952  0121BA  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19953  0121BC  0E14               	movlw	high _Event_NULL
 19954  0121BE  0101               	movlb	1	; () banked
 19955  0121C0  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19956  0121C2  0E00               	movlw	low (_Event_NULL shr (0+16))
 19957  0121C4  0101               	movlb	1	; () banked
 19958  0121C6  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19959  0121C8  ECF6  F09E         	call	_Button_Init	;wreg free
 19960                           
 19961                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 19962                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 19963  0121CC  0E46               	movlw	low (_HMIBoard+8)
 19964  0121CE  0101               	movlb	1	; () banked
 19965  0121D0  6F00               	movwf	Button_Init@pInput& (0+255),b
 19966  0121D2  0E03               	movlw	high (_HMIBoard+8)
 19967  0121D4  0101               	movlb	1	; () banked
 19968  0121D6  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19969  0121D8  0E00               	movlw	0
 19970  0121DA  0101               	movlb	1	; () banked
 19971  0121DC  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19972  0121DE  0E02               	movlw	2
 19973  0121E0  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19974  0121E2  0E2C               	movlw	low _HMI_InitButtons
 19975  0121E4  0101               	movlb	1	; () banked
 19976  0121E6  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19977  0121E8  0E67               	movlw	high _HMI_InitButtons
 19978  0121EA  0101               	movlb	1	; () banked
 19979  0121EC  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19980  0121EE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19981  0121F0  0101               	movlb	1	; () banked
 19982  0121F2  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19983  0121F4  0EA8               	movlw	low _HMI_RightSwitch
 19984  0121F6  0101               	movlb	1	; () banked
 19985  0121F8  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19986  0121FA  0E65               	movlw	high _HMI_RightSwitch
 19987  0121FC  0101               	movlb	1	; () banked
 19988  0121FE  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19989  012200  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 19990  012202  0101               	movlb	1	; () banked
 19991  012204  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19992  012206  0E04               	movlw	low _Event_NULL
 19993  012208  0101               	movlb	1	; () banked
 19994  01220A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19995  01220C  0E14               	movlw	high _Event_NULL
 19996  01220E  0101               	movlb	1	; () banked
 19997  012210  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19998  012212  0E00               	movlw	low (_Event_NULL shr (0+16))
 19999  012214  0101               	movlb	1	; () banked
 20000  012216  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20001  012218  ECF6  F09E         	call	_Button_Init	;wreg free
 20002                           
 20003                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 20004                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 20005  01221C  0E5A               	movlw	low (_HMIBoard+28)
 20006  01221E  0101               	movlb	1	; () banked
 20007  012220  6F00               	movwf	Button_Init@pInput& (0+255),b
 20008  012222  0E03               	movlw	high (_HMIBoard+28)
 20009  012224  0101               	movlb	1	; () banked
 20010  012226  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20011  012228  0E00               	movlw	0
 20012  01222A  0101               	movlb	1	; () banked
 20013  01222C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20014  01222E  0E02               	movlw	2
 20015  012230  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20016  012232  0E2C               	movlw	low _HMI_InitButtons
 20017  012234  0101               	movlb	1	; () banked
 20018  012236  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20019  012238  0E67               	movlw	high _HMI_InitButtons
 20020  01223A  0101               	movlb	1	; () banked
 20021  01223C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20022  01223E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20023  012240  0101               	movlb	1	; () banked
 20024  012242  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20025  012244  0E90               	movlw	low _HMI_UpSwitch
 20026  012246  0101               	movlb	1	; () banked
 20027  012248  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20028  01224A  0E65               	movlw	high _HMI_UpSwitch
 20029  01224C  0101               	movlb	1	; () banked
 20030  01224E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20031  012250  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 20032  012252  0101               	movlb	1	; () banked
 20033  012254  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20034  012256  0E04               	movlw	low _Event_NULL
 20035  012258  0101               	movlb	1	; () banked
 20036  01225A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20037  01225C  0E14               	movlw	high _Event_NULL
 20038  01225E  0101               	movlb	1	; () banked
 20039  012260  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20040  012262  0E00               	movlw	low (_Event_NULL shr (0+16))
 20041  012264  0101               	movlb	1	; () banked
 20042  012266  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20043  012268  ECF6  F09E         	call	_Button_Init	;wreg free
 20044                           
 20045                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 20046                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 20047  01226C  0E64               	movlw	low (_HMIBoard+38)
 20048  01226E  0101               	movlb	1	; () banked
 20049  012270  6F00               	movwf	Button_Init@pInput& (0+255),b
 20050  012272  0E03               	movlw	high (_HMIBoard+38)
 20051  012274  0101               	movlb	1	; () banked
 20052  012276  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20053  012278  0E00               	movlw	0
 20054  01227A  0101               	movlb	1	; () banked
 20055  01227C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20056  01227E  0E02               	movlw	2
 20057  012280  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20058  012282  0E2C               	movlw	low _HMI_InitButtons
 20059  012284  0101               	movlb	1	; () banked
 20060  012286  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20061  012288  0E67               	movlw	high _HMI_InitButtons
 20062  01228A  0101               	movlb	1	; () banked
 20063  01228C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20064  01228E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20065  012290  0101               	movlb	1	; () banked
 20066  012292  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20067  012294  0E78               	movlw	low _HMI_DownSwitch
 20068  012296  0101               	movlb	1	; () banked
 20069  012298  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20070  01229A  0E65               	movlw	high _HMI_DownSwitch
 20071  01229C  0101               	movlb	1	; () banked
 20072  01229E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20073  0122A0  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 20074  0122A2  0101               	movlb	1	; () banked
 20075  0122A4  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20076  0122A6  0E04               	movlw	low _Event_NULL
 20077  0122A8  0101               	movlb	1	; () banked
 20078  0122AA  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20079  0122AC  0E14               	movlw	high _Event_NULL
 20080  0122AE  0101               	movlb	1	; () banked
 20081  0122B0  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20082  0122B2  0E00               	movlw	low (_Event_NULL shr (0+16))
 20083  0122B4  0101               	movlb	1	; () banked
 20084  0122B6  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20085  0122B8  ECF6  F09E         	call	_Button_Init	;wreg free
 20086                           
 20087                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 20088  0122BC  0EA0               	movlw	160
 20089  0122BE  0100               	movlb	0	; () banked
 20090  0122C0  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 20091  0122C2  0E86               	movlw	134
 20092  0122C4  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20093  0122C6  0E01               	movlw	1
 20094  0122C8  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20095  0122CA  0E00               	movlw	0
 20096  0122CC  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20097  0122CE  0E00               	movlw	0
 20098  0122D0  0100               	movlb	0	; () banked
 20099  0122D2  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 20100  0122D4  0E02               	movlw	2
 20101  0122D6  0100               	movlb	0	; () banked
 20102  0122D8  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 20103  0122DA  EC53  F082         	call	_SPI_Init	;wreg free
 20104                           
 20105                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 20106  0122DE  0E78               	movlw	low _SPI1
 20107  0122E0  0100               	movlb	0	; () banked
 20108  0122E2  6FC9               	movwf	SPI_MinSpeed@pInput& (0+255),b
 20109  0122E4  0E03               	movlw	high _SPI1
 20110  0122E6  0100               	movlb	0	; () banked
 20111  0122E8  6FCA               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 20112  0122EA  ECCB  F0A9         	call	_SPI_MinSpeed	;wreg free
 20113                           
 20114                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 20115  0122EE  0E00               	movlw	0
 20116  0122F0  0100               	movlb	0	; () banked
 20117  0122F2  6FF6               	movwf	(HMI_Init@in+1)& (0+255),b
 20118  0122F4  0E00               	movlw	0
 20119  0122F6  6FF5               	movwf	HMI_Init@in& (0+255),b
 20120  0122F8                     l14387:
 20121                           
 20122                           ; BSR set to: 0
 20123  0122F8  0100               	movlb	0	; () banked
 20124  0122FA  51F6               	movf	(HMI_Init@in+1)& (0+255),w,b
 20125  0122FC  E113               	bnz	l1153
 20126  0122FE  0E08               	movlw	8
 20127  012300  0100               	movlb	0	; () banked
 20128  012302  5DF5               	subwf	HMI_Init@in& (0+255),w,b
 20129  012304  B0D8               	btfsc	status,0,c
 20130  012306  0012               	return	
 20131                           
 20132                           ; BSR set to: 0
 20133                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 20134                           
 20135                           ; BSR set to: 0
 20136                           
 20137                           ; BSR set to: 0
 20138  012308  0E3E               	movlw	low _HMIBoard
 20139  01230A  0100               	movlb	0	; () banked
 20140  01230C  25F5               	addwf	HMI_Init@in& (0+255),w,b
 20141  01230E  6ED9               	movwf	fsr2l,c
 20142  012310  0E03               	movlw	high _HMIBoard
 20143  012312  0100               	movlb	0	; () banked
 20144  012314  21F6               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 20145  012316  6EDA               	movwf	fsr2h,c
 20146  012318  0E00               	movlw	0
 20147  01231A  6EDF               	movwf	indf2,c
 20148                           
 20149                           ; BSR set to: 0
 20150  01231C  0100               	movlb	0	; () banked
 20151  01231E  4BF5               	infsnz	HMI_Init@in& (0+255),f,b
 20152  012320  2BF6               	incf	(HMI_Init@in+1)& (0+255),f,b
 20153  012322  D7EA               	goto	l14387
 20154  012324                     l1153:
 20155                           
 20156                           ; BSR set to: 0
 20157  012324  0012               	return		;funcret
 20158  012326                     __end_of_HMI_Init:
 20159                           	opt stack 0
 20160                           tosu	equ	0xFFF
 20161                           tosh	equ	0xFFE
 20162                           tosl	equ	0xFFD
 20163                           pclath	equ	0xFFA
 20164                           tblptru	equ	0xFF8
 20165                           tblptrh	equ	0xFF7
 20166                           tblptrl	equ	0xFF6
 20167                           tablat	equ	0xFF5
 20168                           prodh	equ	0xFF4
 20169                           prodl	equ	0xFF3
 20170                           intcon	equ	0xFF2
 20171                           postinc0	equ	0xFEE
 20172                           wreg	equ	0xFE8
 20173                           indf1	equ	0xFE7
 20174                           postdec1	equ	0xFE5
 20175                           fsr1h	equ	0xFE2
 20176                           fsr1l	equ	0xFE1
 20177                           indf2	equ	0xFDF
 20178                           postinc2	equ	0xFDE
 20179                           postdec2	equ	0xFDD
 20180                           plusw2	equ	0xFDB
 20181                           fsr2h	equ	0xFDA
 20182                           fsr2l	equ	0xFD9
 20183                           status	equ	0xFD8
 20184                           
 20185 ;; *************** function _SPI_MinSpeed *****************
 20186 ;; Defined at:
 20187 ;;		line 190 in file "Library/SPI.c"
 20188 ;; Parameters:    Size  Location     Type
 20189 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20190 ;;		 -> SPI1(11), 
 20191 ;; Auto vars:     Size  Location     Type
 20192 ;;		None
 20193 ;; Return value:  Size  Location     Type
 20194 ;;                  1    wreg      void 
 20195 ;; Registers used:
 20196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20197 ;; Tracked objects:
 20198 ;;		On entry : 0/0
 20199 ;;		On exit  : 0/0
 20200 ;;		Unchanged: 0/0
 20201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20202 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20205 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20206 ;;Total ram usage:        2 bytes
 20207 ;; Hardware stack levels used:    1
 20208 ;; Hardware stack levels required when called:    9
 20209 ;; This function calls:
 20210 ;;		_Byte_SetBit
 20211 ;;		_Byte_SetQuad
 20212 ;; This function is called by:
 20213 ;;		_HMI_Init
 20214 ;; This function uses a non-reentrant model
 20215 ;;
 20216                           
 20217                           	psect	text96
 20218  015396                     __ptext96:
 20219                           	opt stack 0
 20220  015396                     _SPI_MinSpeed:
 20221                           	opt stack 19
 20222                           
 20223                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20224                           
 20225                           ; BSR set to: 0
 20226                           ;incstack = 0
 20227  015396  0100               	movlb	0	; () banked
 20228  015398  EE20 F006          	lfsr	2,6
 20229  01539C  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20230  01539E  26D9               	addwf	fsr2l,f,c
 20231  0153A0  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20232  0153A2  22DA               	addwfc	fsr2h,f,c
 20233  0153A4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20234  0153A8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20235  0153AC  0E05               	movlw	5
 20236  0153AE  0100               	movlb	0	; () banked
 20237  0153B0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20238  0153B2  0E00               	movlw	0
 20239  0153B4  0100               	movlb	0	; () banked
 20240  0153B6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20241  0153B8  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20242                           
 20243                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 20244  0153BC  0100               	movlb	0	; () banked
 20245  0153BE  EE20 F006          	lfsr	2,6
 20246  0153C2  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20247  0153C4  26D9               	addwf	fsr2l,f,c
 20248  0153C6  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20249  0153C8  22DA               	addwfc	fsr2h,f,c
 20250  0153CA  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20251  0153CE  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20252  0153D2  0E00               	movlw	0
 20253  0153D4  0100               	movlb	0	; () banked
 20254  0153D6  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20255  0153D8  0E02               	movlw	2
 20256  0153DA  0100               	movlb	0	; () banked
 20257  0153DC  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20258  0153DE  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 20259                           
 20260                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20261  0153E2  0100               	movlb	0	; () banked
 20262  0153E4  EE20 F006          	lfsr	2,6
 20263  0153E8  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20264  0153EA  26D9               	addwf	fsr2l,f,c
 20265  0153EC  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20266  0153EE  22DA               	addwfc	fsr2h,f,c
 20267  0153F0  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20268  0153F4  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20269  0153F8  0E05               	movlw	5
 20270  0153FA  0100               	movlb	0	; () banked
 20271  0153FC  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20272  0153FE  0E01               	movlw	1
 20273  015400  0100               	movlb	0	; () banked
 20274  015402  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20275  015404  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20276  015408  0012               	return		;funcret
 20277  01540A                     __end_of_SPI_MinSpeed:
 20278                           	opt stack 0
 20279                           tosu	equ	0xFFF
 20280                           tosh	equ	0xFFE
 20281                           tosl	equ	0xFFD
 20282                           pclath	equ	0xFFA
 20283                           tblptru	equ	0xFF8
 20284                           tblptrh	equ	0xFF7
 20285                           tblptrl	equ	0xFF6
 20286                           tablat	equ	0xFF5
 20287                           prodh	equ	0xFF4
 20288                           prodl	equ	0xFF3
 20289                           intcon	equ	0xFF2
 20290                           postinc0	equ	0xFEE
 20291                           wreg	equ	0xFE8
 20292                           indf1	equ	0xFE7
 20293                           postdec1	equ	0xFE5
 20294                           fsr1h	equ	0xFE2
 20295                           fsr1l	equ	0xFE1
 20296                           indf2	equ	0xFDF
 20297                           postinc2	equ	0xFDE
 20298                           postdec2	equ	0xFDD
 20299                           plusw2	equ	0xFDB
 20300                           fsr2h	equ	0xFDA
 20301                           fsr2l	equ	0xFD9
 20302                           status	equ	0xFD8
 20303                           
 20304 ;; *************** function _SPI_Init *****************
 20305 ;; Defined at:
 20306 ;;		line 12 in file "Library/SPI.c"
 20307 ;; Parameters:    Size  Location     Type
 20308 ;;  pClock          4   45[BANK0 ] unsigned long 
 20309 ;;  pChannel        1   49[BANK0 ] enum E6744
 20310 ;;  pMode           1   50[BANK0 ] enum E6748
 20311 ;; Auto vars:     Size  Location     Type
 20312 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 20313 ;;		 -> SPI1(11), SPI2(11), 
 20314 ;; Return value:  Size  Location     Type
 20315 ;;                  1    wreg      void 
 20316 ;; Registers used:
 20317 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20318 ;; Tracked objects:
 20319 ;;		On entry : 0/0
 20320 ;;		On exit  : 0/0
 20321 ;;		Unchanged: 0/0
 20322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20323 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20324 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20326 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20327 ;;Total ram usage:        8 bytes
 20328 ;; Hardware stack levels used:    1
 20329 ;; Hardware stack levels required when called:   12
 20330 ;; This function calls:
 20331 ;;		_Byte_SetBit
 20332 ;;		_Byte_SetQuad
 20333 ;;		_Port_SetPinType
 20334 ;;		_SPI_DCS
 20335 ;;		_SPI_DisableISR
 20336 ;;		_Timer2_Init
 20337 ;; This function is called by:
 20338 ;;		_Configure_GPIOs
 20339 ;;		_HMI_Init
 20340 ;; This function uses a non-reentrant model
 20341 ;;
 20342                           
 20343                           	psect	text97
 20344  0104A6                     __ptext97:
 20345                           	opt stack 0
 20346  0104A6                     _SPI_Init:
 20347                           	opt stack 15
 20348                           
 20349                           ;SPI.c: 14: SPIPtr pInput;
 20350                           ;SPI.c: 16: switch (pChannel)
 20351                           
 20352                           ;incstack = 0
 20353  0104A6  D00C               	goto	l597
 20354  0104A8                     
 20355                           ;SPI.c: 19: pInput = &SPI1;
 20356  0104A8  0E78               	movlw	low _SPI1
 20357  0104AA  0100               	movlb	0	; () banked
 20358  0104AC  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20359  0104AE  0E03               	movlw	high _SPI1
 20360  0104B0  D004               	goto	L13
 20361  0104B2                     
 20362                           ; BSR set to: 0
 20363                           ;SPI.c: 22: pInput = &SPI2;
 20364                           
 20365                           ; BSR set to: 0
 20366  0104B2  0E83               	movlw	low _SPI2
 20367  0104B4  0100               	movlb	0	; () banked
 20368  0104B6  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20369  0104B8  0E03               	movlw	high _SPI2
 20370  0104BA                     L13:
 20371  0104BA  0100               	movlb	0	; () banked
 20372  0104BC  6FEE               	movwf	(SPI_Init@pInput+1)& (0+255),b
 20373                           
 20374                           ; BSR set to: 0
 20375                           ;SPI.c: 24: };
 20376                           
 20377                           ;SPI.c: 23: break;
 20378  0104BE  D008               	goto	l599
 20379  0104C0                     l597:
 20380                           
 20381                           ; BSR set to: 0
 20382  0104C0  0100               	movlb	0	; () banked
 20383  0104C2  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20384                           
 20385                           ; Switch size 1, requested type "space"
 20386                           ; Number of cases is 2, Range of values is 0 to 1
 20387                           ; switch strategies available:
 20388                           ; Name         Instructions Cycles
 20389                           ; simple_byte            7     4 (average)
 20390                           ;	Chosen strategy is simple_byte
 20391  0104C4  0A00               	xorlw	0	; case 0
 20392  0104C6  B4D8               	btfsc	status,2,c
 20393  0104C8  D7EF               	goto	l598
 20394  0104CA  0A01               	xorlw	1	; case 1
 20395  0104CC  B4D8               	btfsc	status,2,c
 20396  0104CE  D7F1               	goto	l600
 20397  0104D0                     l599:
 20398                           
 20399                           ; BSR set to: 0
 20400                           ;SPI.c: 26: pInput->mChannel = pChannel;
 20401                           
 20402                           ; BSR set to: 0
 20403  0104D0  0100               	movlb	0	; () banked
 20404  0104D2  EE20 F002          	lfsr	2,2
 20405  0104D6  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20406  0104D8  26D9               	addwf	fsr2l,f,c
 20407  0104DA  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20408  0104DC  22DA               	addwfc	fsr2h,f,c
 20409  0104DE  C0EB  FFDF         	movff	SPI_Init@pChannel,indf2
 20410                           
 20411                           ;SPI.c: 35: switch (pChannel)
 20412  0104E2  D0B1               	goto	l601
 20413  0104E4                     
 20414                           ; BSR set to: 0
 20415                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 20416                           
 20417                           ; BSR set to: 0
 20418  0104E4  0EA5               	movlw	low _PortC
 20419  0104E6  0100               	movlb	0	; () banked
 20420  0104E8  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20421  0104EA  0E00               	movlw	high _PortC
 20422  0104EC  0100               	movlb	0	; () banked
 20423  0104EE  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20424  0104F0  0E02               	movlw	2
 20425  0104F2  0100               	movlb	0	; () banked
 20426  0104F4  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20427  0104F6  0E03               	movlw	3
 20428  0104F8  0100               	movlb	0	; () banked
 20429  0104FA  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20430  0104FC  EC5B  F093         	call	_Port_SetPinType	;wreg free
 20431                           
 20432                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20433  010500  0EA5               	movlw	low _PortC
 20434  010502  0100               	movlb	0	; () banked
 20435  010504  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20436  010506  0E00               	movlw	high _PortC
 20437  010508  0100               	movlb	0	; () banked
 20438  01050A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20439  01050C  0E03               	movlw	3
 20440  01050E  0100               	movlb	0	; () banked
 20441  010510  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20442  010512  0E03               	movlw	3
 20443  010514  0100               	movlb	0	; () banked
 20444  010516  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20445  010518  EC5B  F093         	call	_Port_SetPinType	;wreg free
 20446                           
 20447                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20448  01051C  0EA5               	movlw	low _PortC
 20449  01051E  0100               	movlb	0	; () banked
 20450  010520  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20451  010522  0E00               	movlw	high _PortC
 20452  010524  0100               	movlb	0	; () banked
 20453  010526  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20454  010528  0E05               	movlw	5
 20455  01052A  0100               	movlb	0	; () banked
 20456  01052C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20457  01052E  0E03               	movlw	3
 20458  010530  0100               	movlb	0	; () banked
 20459  010532  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20460  010534  EC5B  F093         	call	_Port_SetPinType	;wreg free
 20461                           
 20462                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20463  010538  0EA5               	movlw	low _PortC
 20464  01053A  0100               	movlb	0	; () banked
 20465  01053C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20466  01053E  0E00               	movlw	high _PortC
 20467  010540  0100               	movlb	0	; () banked
 20468  010542  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20469  010544  0E04               	movlw	4
 20470  010546  0100               	movlb	0	; () banked
 20471  010548  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20472  01054A  0E00               	movlw	0
 20473  01054C  0100               	movlb	0	; () banked
 20474  01054E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20475  010550  EC5B  F093         	call	_Port_SetPinType	;wreg free
 20476                           
 20477                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20478  010554  0100               	movlb	0	; () banked
 20479  010556  EE20 F003          	lfsr	2,3
 20480  01055A  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20481  01055C  26D9               	addwf	fsr2l,f,c
 20482  01055E  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20483  010560  22DA               	addwfc	fsr2h,f,c
 20484  010562  0EC7               	movlw	199
 20485  010564  6EDE               	movwf	postinc2,c
 20486  010566  0E0F               	movlw	15
 20487  010568  6EDD               	movwf	postdec2,c
 20488                           
 20489                           ; BSR set to: 0
 20490                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20491  01056A  0100               	movlb	0	; () banked
 20492  01056C  EE20 F006          	lfsr	2,6
 20493  010570  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20494  010572  26D9               	addwf	fsr2l,f,c
 20495  010574  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20496  010576  22DA               	addwfc	fsr2h,f,c
 20497  010578  0EC6               	movlw	198
 20498  01057A  6EDE               	movwf	postinc2,c
 20499  01057C  0E0F               	movlw	15
 20500  01057E  6EDD               	movwf	postdec2,c
 20501                           
 20502                           ; BSR set to: 0
 20503                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20504  010580  0100               	movlb	0	; () banked
 20505  010582  EE20 F009          	lfsr	2,9
 20506  010586  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20507  010588  26D9               	addwf	fsr2l,f,c
 20508  01058A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20509  01058C  22DA               	addwfc	fsr2h,f,c
 20510  01058E  0EC9               	movlw	201
 20511  010590  D056               	goto	L14
 20512  010592                     
 20513                           ; BSR set to: 0
 20514                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20515                           
 20516                           ; BSR set to: 0
 20517  010592  0E9B               	movlw	low _PortD
 20518  010594  0100               	movlb	0	; () banked
 20519  010596  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20520  010598  0E00               	movlw	high _PortD
 20521  01059A  0100               	movlb	0	; () banked
 20522  01059C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20523  01059E  0E07               	movlw	7
 20524  0105A0  0100               	movlb	0	; () banked
 20525  0105A2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20526  0105A4  0E03               	movlw	3
 20527  0105A6  0100               	movlb	0	; () banked
 20528  0105A8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20529  0105AA  EC5B  F093         	call	_Port_SetPinType	;wreg free
 20530                           
 20531                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20532  0105AE  0E9B               	movlw	low _PortD
 20533  0105B0  0100               	movlb	0	; () banked
 20534  0105B2  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20535  0105B4  0E00               	movlw	high _PortD
 20536  0105B6  0100               	movlb	0	; () banked
 20537  0105B8  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20538  0105BA  0E06               	movlw	6
 20539  0105BC  0100               	movlb	0	; () banked
 20540  0105BE  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20541  0105C0  0E03               	movlw	3
 20542  0105C2  0100               	movlb	0	; () banked
 20543  0105C4  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20544  0105C6  EC5B  F093         	call	_Port_SetPinType	;wreg free
 20545                           
 20546                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20547  0105CA  0E9B               	movlw	low _PortD
 20548  0105CC  0100               	movlb	0	; () banked
 20549  0105CE  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20550  0105D0  0E00               	movlw	high _PortD
 20551  0105D2  0100               	movlb	0	; () banked
 20552  0105D4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20553  0105D6  0E04               	movlw	4
 20554  0105D8  0100               	movlb	0	; () banked
 20555  0105DA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20556  0105DC  0E03               	movlw	3
 20557  0105DE  0100               	movlb	0	; () banked
 20558  0105E0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20559  0105E2  EC5B  F093         	call	_Port_SetPinType	;wreg free
 20560                           
 20561                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20562  0105E6  0E9B               	movlw	low _PortD
 20563  0105E8  0100               	movlb	0	; () banked
 20564  0105EA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20565  0105EC  0E00               	movlw	high _PortD
 20566  0105EE  0100               	movlb	0	; () banked
 20567  0105F0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20568  0105F2  0E05               	movlw	5
 20569  0105F4  0100               	movlb	0	; () banked
 20570  0105F6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20571  0105F8  0E00               	movlw	0
 20572  0105FA  0100               	movlb	0	; () banked
 20573  0105FC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20574  0105FE  EC5B  F093         	call	_Port_SetPinType	;wreg free
 20575                           
 20576                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20577  010602  0100               	movlb	0	; () banked
 20578  010604  EE20 F003          	lfsr	2,3
 20579  010608  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20580  01060A  26D9               	addwf	fsr2l,f,c
 20581  01060C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20582  01060E  22DA               	addwfc	fsr2h,f,c
 20583  010610  0E6D               	movlw	109
 20584  010612  6EDE               	movwf	postinc2,c
 20585  010614  0E0F               	movlw	15
 20586  010616  6EDD               	movwf	postdec2,c
 20587                           
 20588                           ; BSR set to: 0
 20589                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20590  010618  0100               	movlb	0	; () banked
 20591  01061A  EE20 F006          	lfsr	2,6
 20592  01061E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20593  010620  26D9               	addwf	fsr2l,f,c
 20594  010622  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20595  010624  22DA               	addwfc	fsr2h,f,c
 20596  010626  0E6C               	movlw	108
 20597  010628  6EDE               	movwf	postinc2,c
 20598  01062A  0E0F               	movlw	15
 20599  01062C  6EDD               	movwf	postdec2,c
 20600                           
 20601                           ; BSR set to: 0
 20602                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20603  01062E  0100               	movlb	0	; () banked
 20604  010630  EE20 F009          	lfsr	2,9
 20605  010634  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20606  010636  26D9               	addwf	fsr2l,f,c
 20607  010638  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20608  01063A  22DA               	addwfc	fsr2h,f,c
 20609  01063C  0E6F               	movlw	111
 20610  01063E                     L14:
 20611  01063E  6EDE               	movwf	postinc2,c
 20612  010640  0E0F               	movlw	15
 20613  010642  6EDD               	movwf	postdec2,c
 20614                           
 20615                           ;SPI.c: 68: break;
 20616  010644  D009               	goto	l603
 20617  010646                     l601:
 20618                           
 20619                           ; BSR set to: 0
 20620                           
 20621                           ; BSR set to: 0
 20622  010646  0100               	movlb	0	; () banked
 20623  010648  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20624                           
 20625                           ; Switch size 1, requested type "space"
 20626                           ; Number of cases is 2, Range of values is 0 to 1
 20627                           ; switch strategies available:
 20628                           ; Name         Instructions Cycles
 20629                           ; simple_byte            7     4 (average)
 20630                           ;	Chosen strategy is simple_byte
 20631  01064A  0A00               	xorlw	0	; case 0
 20632  01064C  B4D8               	btfsc	status,2,c
 20633  01064E  D74A               	goto	l602
 20634  010650  0A01               	xorlw	1	; case 1
 20635  010652  A4D8               	btfss	status,2,c
 20636  010654  0012               	return	
 20637  010656  D79D               	goto	l604
 20638  010658                     l603:
 20639                           
 20640                           ; BSR set to: 0
 20641                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20642                           
 20643                           ; BSR set to: 0
 20644  010658  0100               	movlb	0	; () banked
 20645  01065A  EE20 F006          	lfsr	2,6
 20646  01065E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20647  010660  26D9               	addwf	fsr2l,f,c
 20648  010662  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20649  010664  22DA               	addwfc	fsr2h,f,c
 20650  010666  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20651  01066A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20652  01066E  0E05               	movlw	5
 20653  010670  0100               	movlb	0	; () banked
 20654  010672  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20655  010674  0E00               	movlw	0
 20656  010676  0100               	movlb	0	; () banked
 20657  010678  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20658  01067A  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20659                           
 20660                           ;SPI.c: 77: switch(pMode)
 20661  01067E  D09C               	goto	l607
 20662  010680                     
 20663                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20664  010680  0100               	movlb	0	; () banked
 20665  010682  EE20 F006          	lfsr	2,6
 20666  010686  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20667  010688  26D9               	addwf	fsr2l,f,c
 20668  01068A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20669  01068C  22DA               	addwfc	fsr2h,f,c
 20670  01068E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20671  010692  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20672  010696  0E04               	movlw	4
 20673  010698  0100               	movlb	0	; () banked
 20674  01069A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20675  01069C  0E00               	movlw	0
 20676  01069E  0100               	movlb	0	; () banked
 20677  0106A0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20678  0106A2  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20679                           
 20680                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20681  0106A6  0100               	movlb	0	; () banked
 20682  0106A8  EE20 F003          	lfsr	2,3
 20683  0106AC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20684  0106AE  26D9               	addwf	fsr2l,f,c
 20685  0106B0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20686  0106B2  22DA               	addwfc	fsr2h,f,c
 20687  0106B4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20688  0106B8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20689  0106BC  0E06               	movlw	6
 20690  0106BE  0100               	movlb	0	; () banked
 20691  0106C0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20692  0106C2  0E00               	movlw	0
 20693  0106C4  0100               	movlb	0	; () banked
 20694  0106C6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20695  0106C8  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20696                           
 20697                           ;SPI.c: 82: break;
 20698  0106CC  D084               	goto	l609
 20699  0106CE                     
 20700                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20701  0106CE  0100               	movlb	0	; () banked
 20702  0106D0  EE20 F006          	lfsr	2,6
 20703  0106D4  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20704  0106D6  26D9               	addwf	fsr2l,f,c
 20705  0106D8  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20706  0106DA  22DA               	addwfc	fsr2h,f,c
 20707  0106DC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20708  0106E0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20709  0106E4  0E04               	movlw	4
 20710  0106E6  0100               	movlb	0	; () banked
 20711  0106E8  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20712  0106EA  0E00               	movlw	0
 20713  0106EC  0100               	movlb	0	; () banked
 20714  0106EE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20715  0106F0  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20716                           
 20717                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20718  0106F4  0100               	movlb	0	; () banked
 20719  0106F6  EE20 F003          	lfsr	2,3
 20720  0106FA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20721  0106FC  26D9               	addwf	fsr2l,f,c
 20722  0106FE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20723  010700  22DA               	addwfc	fsr2h,f,c
 20724  010702  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20725  010706  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20726  01070A  0E06               	movlw	6
 20727  01070C  0100               	movlb	0	; () banked
 20728  01070E  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20729  010710  0E01               	movlw	1
 20730  010712  0100               	movlb	0	; () banked
 20731  010714  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20732  010716  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20733                           
 20734                           ;SPI.c: 86: break;
 20735  01071A  D05D               	goto	l609
 20736  01071C                     
 20737                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20738  01071C  0100               	movlb	0	; () banked
 20739  01071E  EE20 F006          	lfsr	2,6
 20740  010722  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20741  010724  26D9               	addwf	fsr2l,f,c
 20742  010726  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20743  010728  22DA               	addwfc	fsr2h,f,c
 20744  01072A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20745  01072E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20746  010732  0E04               	movlw	4
 20747  010734  0100               	movlb	0	; () banked
 20748  010736  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20749  010738  0E01               	movlw	1
 20750  01073A  0100               	movlb	0	; () banked
 20751  01073C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20752  01073E  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20753                           
 20754                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20755  010742  0100               	movlb	0	; () banked
 20756  010744  EE20 F003          	lfsr	2,3
 20757  010748  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20758  01074A  26D9               	addwf	fsr2l,f,c
 20759  01074C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20760  01074E  22DA               	addwfc	fsr2h,f,c
 20761  010750  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20762  010754  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20763  010758  0E06               	movlw	6
 20764  01075A  0100               	movlb	0	; () banked
 20765  01075C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20766  01075E  0E00               	movlw	0
 20767  010760  0100               	movlb	0	; () banked
 20768  010762  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20769  010764  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20770                           
 20771                           ;SPI.c: 90: break;
 20772  010768  D036               	goto	l609
 20773  01076A                     
 20774                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20775  01076A  0100               	movlb	0	; () banked
 20776  01076C  EE20 F006          	lfsr	2,6
 20777  010770  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20778  010772  26D9               	addwf	fsr2l,f,c
 20779  010774  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20780  010776  22DA               	addwfc	fsr2h,f,c
 20781  010778  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20782  01077C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20783  010780  0E04               	movlw	4
 20784  010782  0100               	movlb	0	; () banked
 20785  010784  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20786  010786  0E01               	movlw	1
 20787  010788  0100               	movlb	0	; () banked
 20788  01078A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20789  01078C  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20790                           
 20791                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20792  010790  0100               	movlb	0	; () banked
 20793  010792  EE20 F003          	lfsr	2,3
 20794  010796  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20795  010798  26D9               	addwf	fsr2l,f,c
 20796  01079A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20797  01079C  22DA               	addwfc	fsr2h,f,c
 20798  01079E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20799  0107A2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20800  0107A6  0E06               	movlw	6
 20801  0107A8  0100               	movlb	0	; () banked
 20802  0107AA  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20803  0107AC  0E01               	movlw	1
 20804  0107AE  0100               	movlb	0	; () banked
 20805  0107B0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20806  0107B2  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20807                           
 20808                           ;SPI.c: 94: break;
 20809  0107B6  D00F               	goto	l609
 20810  0107B8                     l607:
 20811  0107B8  0100               	movlb	0	; () banked
 20812  0107BA  51EC               	movf	SPI_Init@pMode& (0+255),w,b
 20813                           
 20814                           ; Switch size 1, requested type "space"
 20815                           ; Number of cases is 4, Range of values is 0 to 3
 20816                           ; switch strategies available:
 20817                           ; Name         Instructions Cycles
 20818                           ; simple_byte           13     7 (average)
 20819                           ;	Chosen strategy is simple_byte
 20820  0107BC  0A00               	xorlw	0	; case 0
 20821  0107BE  B4D8               	btfsc	status,2,c
 20822  0107C0  D75F               	goto	l608
 20823  0107C2  0A01               	xorlw	1	; case 1
 20824  0107C4  B4D8               	btfsc	status,2,c
 20825  0107C6  D783               	goto	l610
 20826  0107C8  0A03               	xorlw	3	; case 2
 20827  0107CA  B4D8               	btfsc	status,2,c
 20828  0107CC  D7A7               	goto	l611
 20829  0107CE  0A01               	xorlw	1	; case 3
 20830  0107D0  A4D8               	btfss	status,2,c
 20831  0107D2  0012               	return	
 20832  0107D4  D7CA               	goto	l612
 20833  0107D6                     l609:
 20834                           
 20835                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 20836                           
 20837                           ; BSR set to: 0
 20838  0107D6  0100               	movlb	0	; () banked
 20839  0107D8  EE20 F006          	lfsr	2,6
 20840  0107DC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20841  0107DE  26D9               	addwf	fsr2l,f,c
 20842  0107E0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20843  0107E2  22DA               	addwfc	fsr2h,f,c
 20844  0107E4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20845  0107E8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20846  0107EC  0E07               	movlw	7
 20847  0107EE  0100               	movlb	0	; () banked
 20848  0107F0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20849  0107F2  0E00               	movlw	0
 20850  0107F4  0100               	movlb	0	; () banked
 20851  0107F6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20852  0107F8  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20853                           
 20854                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 20855  0107FC  0100               	movlb	0	; () banked
 20856  0107FE  EE20 F006          	lfsr	2,6
 20857  010802  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20858  010804  26D9               	addwf	fsr2l,f,c
 20859  010806  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20860  010808  22DA               	addwfc	fsr2h,f,c
 20861  01080A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20862  01080E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20863  010812  0E06               	movlw	6
 20864  010814  0100               	movlb	0	; () banked
 20865  010816  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20866  010818  0E00               	movlw	0
 20867  01081A  0100               	movlb	0	; () banked
 20868  01081C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20869  01081E  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20870                           
 20871                           ;SPI.c: 106: Timer2_Init(pClock);
 20872  010822  C0E7  F0C7         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 20873  010826  C0E8  F0C8         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 20874  01082A  C0E9  F0C9         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 20875  01082E  C0EA  F0CA         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 20876  010832  EC72  F099         	call	_Timer2_Init	;wreg free
 20877                           
 20878                           ;SPI.c: 112: SPI_DisableISR(pInput);
 20879  010836  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 20880  01083A  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 20881  01083E  EC7F  F0B1         	call	_SPI_DisableISR	;wreg free
 20882                           
 20883                           ;SPI.c: 116: switch (pChannel)
 20884  010842  D004               	goto	l614
 20885  010844                     l615:
 20886                           
 20887                           ; BSR set to: 0
 20888  010844  869F               	bsf	3999,3,c	;volatile
 20889  010846  D00B               	goto	l616
 20890  010848                     l617:
 20891                           
 20892                           ; BSR set to: 0
 20893  010848  8EA5               	bsf	4005,7,c	;volatile
 20894  01084A  D009               	goto	l616
 20895  01084C                     l614:
 20896                           
 20897                           ; BSR set to: 0
 20898  01084C  0100               	movlb	0	; () banked
 20899  01084E  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20900                           
 20901                           ; Switch size 1, requested type "space"
 20902                           ; Number of cases is 2, Range of values is 0 to 1
 20903                           ; switch strategies available:
 20904                           ; Name         Instructions Cycles
 20905                           ; simple_byte            7     4 (average)
 20906                           ;	Chosen strategy is simple_byte
 20907  010850  0A00               	xorlw	0	; case 0
 20908  010852  B4D8               	btfsc	status,2,c
 20909  010854  D7F7               	goto	l615
 20910  010856  0A01               	xorlw	1	; case 1
 20911  010858  A4D8               	btfss	status,2,c
 20912  01085A  0012               	return	
 20913  01085C  D7F5               	goto	l617
 20914  01085E                     l616:
 20915                           
 20916                           ; BSR set to: 0
 20917                           ;SPI.c: 124: SPI_DCS(pInput);
 20918                           
 20919                           ; BSR set to: 0
 20920  01085E  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DCS@pInput
 20921  010862  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 20922  010866  ECDF  F0B0         	call	_SPI_DCS	;wreg free
 20923                           
 20924                           ;SPI.c: 126: pInput->mBusy = 0;
 20925  01086A  C0ED  FFD9         	movff	SPI_Init@pInput,fsr2l
 20926  01086E  C0EE  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 20927  010872  0E00               	movlw	0
 20928  010874  6EDF               	movwf	indf2,c
 20929                           
 20930                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 20931  010876  0100               	movlb	0	; () banked
 20932  010878  EE20 F006          	lfsr	2,6
 20933  01087C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20934  01087E  26D9               	addwf	fsr2l,f,c
 20935  010880  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20936  010882  22DA               	addwfc	fsr2h,f,c
 20937  010884  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20938  010888  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20939  01088C  0E00               	movlw	0
 20940  01088E  0100               	movlb	0	; () banked
 20941  010890  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20942  010892  0E03               	movlw	3
 20943  010894  0100               	movlb	0	; () banked
 20944  010896  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20945  010898  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 20946                           
 20947                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20948  01089C  0100               	movlb	0	; () banked
 20949  01089E  EE20 F006          	lfsr	2,6
 20950  0108A2  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20951  0108A4  26D9               	addwf	fsr2l,f,c
 20952  0108A6  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20953  0108A8  22DA               	addwfc	fsr2h,f,c
 20954  0108AA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20955  0108AE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20956  0108B2  0E05               	movlw	5
 20957  0108B4  0100               	movlb	0	; () banked
 20958  0108B6  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20959  0108B8  0E01               	movlw	1
 20960  0108BA  0100               	movlb	0	; () banked
 20961  0108BC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20962  0108BE  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 20963  0108C2  0012               	return		;funcret
 20964  0108C4                     __end_of_SPI_Init:
 20965                           	opt stack 0
 20966                           tosu	equ	0xFFF
 20967                           tosh	equ	0xFFE
 20968                           tosl	equ	0xFFD
 20969                           pclath	equ	0xFFA
 20970                           tblptru	equ	0xFF8
 20971                           tblptrh	equ	0xFF7
 20972                           tblptrl	equ	0xFF6
 20973                           tablat	equ	0xFF5
 20974                           prodh	equ	0xFF4
 20975                           prodl	equ	0xFF3
 20976                           intcon	equ	0xFF2
 20977                           postinc0	equ	0xFEE
 20978                           wreg	equ	0xFE8
 20979                           indf1	equ	0xFE7
 20980                           postdec1	equ	0xFE5
 20981                           fsr1h	equ	0xFE2
 20982                           fsr1l	equ	0xFE1
 20983                           indf2	equ	0xFDF
 20984                           postinc2	equ	0xFDE
 20985                           postdec2	equ	0xFDD
 20986                           plusw2	equ	0xFDB
 20987                           fsr2h	equ	0xFDA
 20988                           fsr2l	equ	0xFD9
 20989                           status	equ	0xFD8
 20990                           
 20991 ;; *************** function _Timer2_Init *****************
 20992 ;; Defined at:
 20993 ;;		line 10 in file "Library/Timer2.c"
 20994 ;; Parameters:    Size  Location     Type
 20995 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 20996 ;; Auto vars:     Size  Location     Type
 20997 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 20998 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 20999 ;;  RDIV            4   18[BANK0 ] unsigned long 
 21000 ;; Return value:  Size  Location     Type
 21001 ;;                  1    wreg      void 
 21002 ;; Registers used:
 21003 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21004 ;; Tracked objects:
 21005 ;;		On entry : 0/0
 21006 ;;		On exit  : 0/0
 21007 ;;		Unchanged: 0/0
 21008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21009 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21010 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21012 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21013 ;;Total ram usage:       17 bytes
 21014 ;; Hardware stack levels used:    1
 21015 ;; Hardware stack levels required when called:    8
 21016 ;; This function calls:
 21017 ;;		_Timer2_Clear
 21018 ;;		___lldiv
 21019 ;; This function is called by:
 21020 ;;		_SPI_Init
 21021 ;; This function uses a non-reentrant model
 21022 ;;
 21023                           
 21024                           	psect	text98
 21025  0132E4                     __ptext98:
 21026                           	opt stack 0
 21027  0132E4                     _Timer2_Init:
 21028                           	opt stack 18
 21029                           
 21030                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 21031                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 21032                           ;Timer2.c: 14: static UINT8 PRE = 0;
 21033                           ;Timer2.c: 15: static UINT32 DIV = 0;
 21034                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 21035                           
 21036                           ;incstack = 0
 21037  0132E4  0E00               	movlw	0
 21038  0132E6  0100               	movlb	0	; () banked
 21039  0132E8  6FD0               	movwf	Timer2_Init@pCPUClock& (0+255),b
 21040  0132EA  0E6C               	movlw	108
 21041  0132EC  6FD1               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 21042  0132EE  0EDC               	movlw	220
 21043  0132F0  6FD2               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 21044  0132F2  0E02               	movlw	2
 21045  0132F4  6FD3               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 21046                           
 21047                           ; BSR set to: 0
 21048                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 21049                           ;Timer2.c: 20: pFrequency *= 2;
 21050  0132F6  0100               	movlb	0	; () banked
 21051  0132F8  90D8               	bcf	status,0,c
 21052  0132FA  37C7               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 21053  0132FC  37C8               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 21054  0132FE  37C9               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 21055  013300  37CA               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 21056                           
 21057                           ; BSR set to: 0
 21058                           ;Timer2.c: 23: pCPUClock /= 4;
 21059  013302  0E02               	movlw	2
 21060  013304  0100               	movlb	0	; () banked
 21061  013306  6FCB               	movwf	??_Timer2_Init& (0+255),b
 21062  013308                     u9495:
 21063  013308  90D8               	bcf	status,0,c
 21064  01330A  0100               	movlb	0	; () banked
 21065  01330C  33D3               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 21066  01330E  33D2               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 21067  013310  33D1               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 21068  013312  33D0               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 21069  013314  0100               	movlb	0	; () banked
 21070  013316  2FCB               	decfsz	??_Timer2_Init& (0+255),f,b
 21071  013318  D7F7               	goto	u9495
 21072                           
 21073                           ; BSR set to: 0
 21074                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 21075  01331A  C0D0  F0BA         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 21076  01331E  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 21077  013322  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 21078  013326  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 21079  01332A  C0C7  F0BE         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 21080  01332E  C0C8  F0BF         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 21081  013332  C0C9  F0C0         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 21082  013336  C0CA  F0C1         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 21083  01333A  EC4A  F0A1         	call	___lldiv	;wreg free
 21084  01333E  C0BA  F0D4         	movff	?___lldiv,Timer2_Init@DIVIDE
 21085  013342  C0BB  F0D5         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 21086  013346  C0BC  F0D6         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 21087  01334A  C0BD  F0D7         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 21088                           
 21089                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 21090  01334E  D010               	goto	l1828
 21091  013350                     l12727:
 21092                           
 21093                           ;Timer2.c: 28: {
 21094                           ;Timer2.c: 29: RDIV = 0;
 21095  013350  0E00               	movlw	0
 21096  013352  0100               	movlb	0	; () banked
 21097  013354  6FCC               	movwf	Timer2_Init@RDIV& (0+255),b
 21098  013356  0E00               	movlw	0
 21099  013358  6FCD               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 21100  01335A  0E00               	movlw	0
 21101  01335C  6FCE               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 21102  01335E  0E00               	movlw	0
 21103  013360  6FCF               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 21104                           
 21105                           ; BSR set to: 0
 21106                           ;Timer2.c: 30: INDEX ++;
 21107  013362  0100               	movlb	0	; () banked
 21108  013364  2B8B               	incf	Timer2_Init@INDEX& (0+255),f,b
 21109                           
 21110                           ; BSR set to: 0
 21111                           ;Timer2.c: 31: if (INDEX >= 3)
 21112  013366  0E02               	movlw	2
 21113  013368  0100               	movlb	0	; () banked
 21114  01336A  658B               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 21115  01336C  D001               	goto	l1828
 21116  01336E  D026               	goto	u9510
 21117  013370                     l1828:
 21118                           
 21119                           ; BSR set to: 0
 21120                           
 21121                           ; BSR set to: 0
 21122  013370  C0D4  F0BA         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 21123  013374  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 21124  013378  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 21125  01337C  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 21126  013380  0100               	movlb	0	; () banked
 21127  013382  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21128  013384  0D01               	mullw	1
 21129  013386  0E1C               	movlw	low Timer2_Init@PRESCALE
 21130  013388  24F3               	addwf	prodl,w,c
 21131  01338A  6EF6               	movwf	tblptrl,c
 21132  01338C  0EFD               	movlw	high Timer2_Init@PRESCALE
 21133  01338E  20F4               	addwfc	prodh,w,c
 21134  013390  6EF7               	movwf	tblptrh,c
 21135  013392                     	if	1	;There are 3 active tblptr bytes
 21136  013392  6AF8               	clrf	tblptru,c
 21137  013394  0E00               	movlw	low (__mediumconst shr (0+16))
 21138  013396  22F8               	addwfc	tblptru,f,c
 21139  013398                     	endif
 21140  013398  0008               	tblrd		*
 21141  01339A  50F5               	movf	tablat,w,c
 21142  01339C  0100               	movlb	0	; () banked
 21143  01339E  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21144  0133A0  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21145  0133A2  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21146  0133A4  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21147  0133A6  EC4A  F0A1         	call	___lldiv	;wreg free
 21148  0133AA  0100               	movlb	0	; () banked
 21149  0133AC  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 21150  0133AE  0100               	movlb	0	; () banked
 21151  0133B0  11BC               	iorwf	(?___lldiv+2)& (0+255),w,b
 21152  0133B2  E1CE               	bnz	l12727
 21153  0133B4  0100               	movlb	0	; () banked
 21154  0133B6  05BB               	decf	(?___lldiv+1)& (0+255),w,b
 21155  0133B8  B0D8               	btfsc	status,0,c
 21156  0133BA  D7CA               	goto	l1827
 21157  0133BC                     u9510:
 21158                           
 21159                           ; BSR set to: 0
 21160                           ;Timer2.c: 33: }
 21161                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 21162                           
 21163                           ; BSR set to: 0
 21164  0133BC  50CA               	movf	4042,w,c	;volatile
 21165  0133BE  0100               	movlb	0	; () banked
 21166  0133C0  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21167  0133C2  0BFC               	andlw	-4
 21168  0133C4  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21169  0133C6  6ECA               	movwf	4042,c	;volatile
 21170                           
 21171                           ; BSR set to: 0
 21172                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 21173  0133C8  84CA               	bsf	4042,2,c	;volatile
 21174                           
 21175                           ; BSR set to: 0
 21176                           ;Timer2.c: 44: Timer2_Clear();
 21177  0133CA  EC87  F0B3         	call	_Timer2_Clear	;wreg free
 21178                           
 21179                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 21180  0133CE  0100               	movlb	0	; () banked
 21181  0133D0  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21182  0133D2  0D01               	mullw	1
 21183  0133D4  0E1C               	movlw	low Timer2_Init@PRESCALE
 21184  0133D6  24F3               	addwf	prodl,w,c
 21185  0133D8  6EF6               	movwf	tblptrl,c
 21186  0133DA  0EFD               	movlw	high Timer2_Init@PRESCALE
 21187  0133DC  20F4               	addwfc	prodh,w,c
 21188  0133DE  6EF7               	movwf	tblptrh,c
 21189  0133E0                     	if	1	;There are 3 active tblptr bytes
 21190  0133E0  6AF8               	clrf	tblptru,c
 21191  0133E2  0E00               	movlw	low (__mediumconst shr (0+16))
 21192  0133E4  22F8               	addwfc	tblptru,f,c
 21193  0133E6                     	endif
 21194  0133E6  0008               	tblrd		*
 21195  0133E8  CFF5 F08A          	movff	tablat,Timer2_Init@PRE
 21196                           
 21197                           ; BSR set to: 0
 21198                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 21199  0133EC  0EFF               	movlw	255
 21200  0133EE  0100               	movlb	0	; () banked
 21201  0133F0  25D4               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 21202  0133F2  0103               	movlb	3	; () banked
 21203  0133F4  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 21204  0133F6  0EFF               	movlw	255
 21205  0133F8  0100               	movlb	0	; () banked
 21206  0133FA  21D5               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 21207  0133FC  0103               	movlb	3	; () banked
 21208  0133FE  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 21209  013400  0EFF               	movlw	255
 21210  013402  0100               	movlb	0	; () banked
 21211  013404  21D6               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 21212  013406  0103               	movlb	3	; () banked
 21213  013408  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 21214  01340A  0EFF               	movlw	255
 21215  01340C  0100               	movlb	0	; () banked
 21216  01340E  21D7               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 21217  013410  0103               	movlb	3	; () banked
 21218  013412  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 21219                           
 21220                           ; BSR set to: 3
 21221                           ;Timer2.c: 48: INDEX = DIV/PRE;
 21222  013414  C326  F0BA         	movff	Timer2_Init@DIV,___lldiv@dividend
 21223  013418  C327  F0BB         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 21224  01341C  C328  F0BC         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 21225  013420  C329  F0BD         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 21226  013424  0100               	movlb	0	; () banked
 21227  013426  518A               	movf	Timer2_Init@PRE& (0+255),w,b
 21228  013428  0100               	movlb	0	; () banked
 21229  01342A  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21230  01342C  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21231  01342E  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21232  013430  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21233  013432  EC4A  F0A1         	call	___lldiv	;wreg free
 21234  013436  0100               	movlb	0	; () banked
 21235  013438  51BA               	movf	?___lldiv& (0+255),w,b
 21236  01343A  0100               	movlb	0	; () banked
 21237  01343C  6F8B               	movwf	Timer2_Init@INDEX& (0+255),b
 21238                           
 21239                           ; BSR set to: 0
 21240                           ;Timer2.c: 49: PR2 = INDEX;
 21241  01343E  C08B  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 21242                           
 21243                           ; BSR set to: 0
 21244  013442  0012               	return		;funcret
 21245  013444                     __end_of_Timer2_Init:
 21246                           	opt stack 0
 21247                           tosu	equ	0xFFF
 21248                           tosh	equ	0xFFE
 21249                           tosl	equ	0xFFD
 21250                           pclath	equ	0xFFA
 21251                           tblptru	equ	0xFF8
 21252                           tblptrh	equ	0xFF7
 21253                           tblptrl	equ	0xFF6
 21254                           tablat	equ	0xFF5
 21255                           prodh	equ	0xFF4
 21256                           prodl	equ	0xFF3
 21257                           intcon	equ	0xFF2
 21258                           postinc0	equ	0xFEE
 21259                           wreg	equ	0xFE8
 21260                           indf1	equ	0xFE7
 21261                           postdec1	equ	0xFE5
 21262                           fsr1h	equ	0xFE2
 21263                           fsr1l	equ	0xFE1
 21264                           indf2	equ	0xFDF
 21265                           postinc2	equ	0xFDE
 21266                           postdec2	equ	0xFDD
 21267                           plusw2	equ	0xFDB
 21268                           fsr2h	equ	0xFDA
 21269                           fsr2l	equ	0xFD9
 21270                           status	equ	0xFD8
 21271                           
 21272 ;; *************** function ___lldiv *****************
 21273 ;; Defined at:
 21274 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 21275 ;; Parameters:    Size  Location     Type
 21276 ;;  dividend        4    0[BANK0 ] unsigned long 
 21277 ;;  divisor         4    4[BANK0 ] unsigned long 
 21278 ;; Auto vars:     Size  Location     Type
 21279 ;;  quotient        4    8[BANK0 ] unsigned long 
 21280 ;;  counter         1   12[BANK0 ] unsigned char 
 21281 ;; Return value:  Size  Location     Type
 21282 ;;                  4    0[BANK0 ] unsigned long 
 21283 ;; Registers used:
 21284 ;;		wreg, status,2, status,0
 21285 ;; Tracked objects:
 21286 ;;		On entry : 0/0
 21287 ;;		On exit  : 0/0
 21288 ;;		Unchanged: 0/0
 21289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21290 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21291 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21293 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21294 ;;Total ram usage:       13 bytes
 21295 ;; Hardware stack levels used:    1
 21296 ;; Hardware stack levels required when called:    7
 21297 ;; This function calls:
 21298 ;;		Nothing
 21299 ;; This function is called by:
 21300 ;;		_Timer0_Init
 21301 ;;		_Timer2_Init
 21302 ;;		_rand_between
 21303 ;;		_I2C_Init
 21304 ;; This function uses a non-reentrant model
 21305 ;;
 21306                           
 21307                           	psect	text99
 21308  014294                     __ptext99:
 21309                           	opt stack 0
 21310  014294                     ___lldiv:
 21311                           	opt stack 19
 21312                           
 21313                           ; BSR set to: 0
 21314                           ;incstack = 0
 21315  014294  0E00               	movlw	0
 21316  014296  0100               	movlb	0	; () banked
 21317  014298  6FC2               	movwf	___lldiv@quotient& (0+255),b
 21318  01429A  0E00               	movlw	0
 21319  01429C  6FC3               	movwf	(___lldiv@quotient+1)& (0+255),b
 21320  01429E  0E00               	movlw	0
 21321  0142A0  6FC4               	movwf	(___lldiv@quotient+2)& (0+255),b
 21322  0142A2  0E00               	movlw	0
 21323  0142A4  6FC5               	movwf	(___lldiv@quotient+3)& (0+255),b
 21324                           
 21325                           ; BSR set to: 0
 21326  0142A6  0100               	movlb	0	; () banked
 21327  0142A8  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21328  0142AA  0100               	movlb	0	; () banked
 21329  0142AC  11BF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 21330  0142AE  0100               	movlb	0	; () banked
 21331  0142B0  11C0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 21332  0142B2  0100               	movlb	0	; () banked
 21333  0142B4  11C1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 21334  0142B6  B4D8               	btfsc	status,2,c
 21335  0142B8  D042               	goto	l2805
 21336                           
 21337                           ; BSR set to: 0
 21338  0142BA  0E01               	movlw	1
 21339  0142BC  0100               	movlb	0	; () banked
 21340  0142BE  6FC6               	movwf	___lldiv@counter& (0+255),b
 21341  0142C0  D008               	goto	l2800
 21342  0142C2                     
 21343                           ; BSR set to: 0
 21344                           
 21345                           ; BSR set to: 0
 21346  0142C2  0100               	movlb	0	; () banked
 21347  0142C4  90D8               	bcf	status,0,c
 21348  0142C6  37BE               	rlcf	___lldiv@divisor& (0+255),f,b
 21349  0142C8  37BF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 21350  0142CA  37C0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 21351  0142CC  37C1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 21352  0142CE  0100               	movlb	0	; () banked
 21353  0142D0  2BC6               	incf	___lldiv@counter& (0+255),f,b
 21354  0142D2                     l2800:
 21355                           
 21356                           ; BSR set to: 0
 21357                           
 21358                           ; BSR set to: 0
 21359  0142D2  0100               	movlb	0	; () banked
 21360  0142D4  AFC1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 21361  0142D6  D7F5               	goto	l2801
 21362  0142D8                     u9370:
 21363                           
 21364                           ; BSR set to: 0
 21365                           
 21366                           ; BSR set to: 0
 21367                           
 21368                           ; BSR set to: 0
 21369  0142D8  0100               	movlb	0	; () banked
 21370  0142DA  90D8               	bcf	status,0,c
 21371  0142DC  37C2               	rlcf	___lldiv@quotient& (0+255),f,b
 21372  0142DE  37C3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 21373  0142E0  37C4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 21374  0142E2  37C5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 21375                           
 21376                           ; BSR set to: 0
 21377  0142E4  0100               	movlb	0	; () banked
 21378  0142E6  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21379  0142E8  0100               	movlb	0	; () banked
 21380  0142EA  5DBA               	subwf	___lldiv@dividend& (0+255),w,b
 21381  0142EC  0100               	movlb	0	; () banked
 21382  0142EE  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21383  0142F0  0100               	movlb	0	; () banked
 21384  0142F2  59BB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 21385  0142F4  0100               	movlb	0	; () banked
 21386  0142F6  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21387  0142F8  0100               	movlb	0	; () banked
 21388  0142FA  59BC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 21389  0142FC  0100               	movlb	0	; () banked
 21390  0142FE  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21391  014300  0100               	movlb	0	; () banked
 21392  014302  59BD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 21393  014304  A0D8               	btfss	status,0,c
 21394  014306  D012               	goto	l2804
 21395                           
 21396                           ; BSR set to: 0
 21397  014308  0100               	movlb	0	; () banked
 21398  01430A  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21399  01430C  0100               	movlb	0	; () banked
 21400  01430E  5FBA               	subwf	___lldiv@dividend& (0+255),f,b
 21401  014310  0100               	movlb	0	; () banked
 21402  014312  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21403  014314  0100               	movlb	0	; () banked
 21404  014316  5BBB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 21405  014318  0100               	movlb	0	; () banked
 21406  01431A  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21407  01431C  0100               	movlb	0	; () banked
 21408  01431E  5BBC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 21409  014320  0100               	movlb	0	; () banked
 21410  014322  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21411  014324  0100               	movlb	0	; () banked
 21412  014326  5BBD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 21413                           
 21414                           ; BSR set to: 0
 21415  014328  0100               	movlb	0	; () banked
 21416  01432A  81C2               	bsf	___lldiv@quotient& (0+255),0,b
 21417  01432C                     l2804:
 21418                           
 21419                           ; BSR set to: 0
 21420                           
 21421                           ; BSR set to: 0
 21422  01432C  0100               	movlb	0	; () banked
 21423  01432E  90D8               	bcf	status,0,c
 21424  014330  33C1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 21425  014332  33C0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 21426  014334  33BF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 21427  014336  33BE               	rrcf	___lldiv@divisor& (0+255),f,b
 21428                           
 21429                           ; BSR set to: 0
 21430  014338  0100               	movlb	0	; () banked
 21431  01433A  2FC6               	decfsz	___lldiv@counter& (0+255),f,b
 21432  01433C  D7CD               	goto	u9370
 21433  01433E                     l2805:
 21434                           
 21435                           ; BSR set to: 0
 21436                           
 21437                           ; BSR set to: 0
 21438  01433E  C0C2  F0BA         	movff	___lldiv@quotient,?___lldiv
 21439  014342  C0C3  F0BB         	movff	___lldiv@quotient+1,?___lldiv+1
 21440  014346  C0C4  F0BC         	movff	___lldiv@quotient+2,?___lldiv+2
 21441  01434A  C0C5  F0BD         	movff	___lldiv@quotient+3,?___lldiv+3
 21442                           
 21443                           ; BSR set to: 0
 21444  01434E  0012               	return		;funcret
 21445  014350                     __end_of___lldiv:
 21446                           	opt stack 0
 21447                           tosu	equ	0xFFF
 21448                           tosh	equ	0xFFE
 21449                           tosl	equ	0xFFD
 21450                           pclath	equ	0xFFA
 21451                           tblptru	equ	0xFF8
 21452                           tblptrh	equ	0xFF7
 21453                           tblptrl	equ	0xFF6
 21454                           tablat	equ	0xFF5
 21455                           prodh	equ	0xFF4
 21456                           prodl	equ	0xFF3
 21457                           intcon	equ	0xFF2
 21458                           postinc0	equ	0xFEE
 21459                           wreg	equ	0xFE8
 21460                           indf1	equ	0xFE7
 21461                           postdec1	equ	0xFE5
 21462                           fsr1h	equ	0xFE2
 21463                           fsr1l	equ	0xFE1
 21464                           indf2	equ	0xFDF
 21465                           postinc2	equ	0xFDE
 21466                           postdec2	equ	0xFDD
 21467                           plusw2	equ	0xFDB
 21468                           fsr2h	equ	0xFDA
 21469                           fsr2l	equ	0xFD9
 21470                           status	equ	0xFD8
 21471                           
 21472 ;; *************** function _Timer2_Clear *****************
 21473 ;; Defined at:
 21474 ;;		line 3 in file "Library/Timer2.c"
 21475 ;; Parameters:    Size  Location     Type
 21476 ;;		None
 21477 ;; Auto vars:     Size  Location     Type
 21478 ;;		None
 21479 ;; Return value:  Size  Location     Type
 21480 ;;                  1    wreg      void 
 21481 ;; Registers used:
 21482 ;;		None
 21483 ;; Tracked objects:
 21484 ;;		On entry : 0/0
 21485 ;;		On exit  : 0/0
 21486 ;;		Unchanged: 0/0
 21487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21492 ;;Total ram usage:        0 bytes
 21493 ;; Hardware stack levels used:    1
 21494 ;; Hardware stack levels required when called:    7
 21495 ;; This function calls:
 21496 ;;		Nothing
 21497 ;; This function is called by:
 21498 ;;		_Timer2_Init
 21499 ;; This function uses a non-reentrant model
 21500 ;;
 21501                           
 21502                           	psect	text100
 21503  01670E                     __ptext100:
 21504                           	opt stack 0
 21505  01670E                     _Timer2_Clear:
 21506                           	opt stack 18
 21507                           
 21508                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21509                           
 21510                           ; BSR set to: 0
 21511                           ;incstack = 0
 21512  01670E  929E               	bcf	3998,1,c	;volatile
 21513                           
 21514                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21515  016710  929D               	bcf	3997,1,c	;volatile
 21516                           
 21517                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21518  016712  929F               	bcf	3999,1,c	;volatile
 21519  016714  0012               	return		;funcret
 21520  016716                     __end_of_Timer2_Clear:
 21521                           	opt stack 0
 21522                           tosu	equ	0xFFF
 21523                           tosh	equ	0xFFE
 21524                           tosl	equ	0xFFD
 21525                           pclath	equ	0xFFA
 21526                           tblptru	equ	0xFF8
 21527                           tblptrh	equ	0xFF7
 21528                           tblptrl	equ	0xFF6
 21529                           tablat	equ	0xFF5
 21530                           prodh	equ	0xFF4
 21531                           prodl	equ	0xFF3
 21532                           intcon	equ	0xFF2
 21533                           postinc0	equ	0xFEE
 21534                           wreg	equ	0xFE8
 21535                           indf1	equ	0xFE7
 21536                           postdec1	equ	0xFE5
 21537                           fsr1h	equ	0xFE2
 21538                           fsr1l	equ	0xFE1
 21539                           indf2	equ	0xFDF
 21540                           postinc2	equ	0xFDE
 21541                           postdec2	equ	0xFDD
 21542                           plusw2	equ	0xFDB
 21543                           fsr2h	equ	0xFDA
 21544                           fsr2l	equ	0xFD9
 21545                           status	equ	0xFD8
 21546                           
 21547 ;; *************** function _SPI_DisableISR *****************
 21548 ;; Defined at:
 21549 ;;		line 181 in file "Library/SPI.c"
 21550 ;; Parameters:    Size  Location     Type
 21551 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21552 ;;		 -> SPI1(11), SPI2(11), 
 21553 ;; Auto vars:     Size  Location     Type
 21554 ;;		None
 21555 ;; Return value:  Size  Location     Type
 21556 ;;                  1    wreg      void 
 21557 ;; Registers used:
 21558 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21559 ;; Tracked objects:
 21560 ;;		On entry : 0/0
 21561 ;;		On exit  : 0/0
 21562 ;;		Unchanged: 0/0
 21563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21568 ;;Total ram usage:        2 bytes
 21569 ;; Hardware stack levels used:    1
 21570 ;; Hardware stack levels required when called:    7
 21571 ;; This function calls:
 21572 ;;		Nothing
 21573 ;; This function is called by:
 21574 ;;		_SPI_Init
 21575 ;; This function uses a non-reentrant model
 21576 ;;
 21577                           
 21578                           	psect	text101
 21579  0162FE                     __ptext101:
 21580                           	opt stack 0
 21581  0162FE                     _SPI_DisableISR:
 21582                           	opt stack 19
 21583                           
 21584                           ;SPI.c: 183: switch (pInput->mChannel)
 21585                           
 21586                           ;incstack = 0
 21587  0162FE  D004               	goto	l654
 21588  016300                     l655:
 21589                           
 21590                           ; BSR set to: 0
 21591  016300  969D               	bcf	3997,3,c	;volatile
 21592  016302  0012               	return	
 21593  016304                     l657:
 21594                           
 21595                           ; BSR set to: 0
 21596  016304  9EA3               	bcf	4003,7,c	;volatile
 21597                           
 21598                           ; BSR set to: 0
 21599                           ;SPI.c: 188: };
 21600                           
 21601                           ; BSR set to: 0
 21602                           
 21603                           ;SPI.c: 187: default: return;
 21604  016306  0012               	return	
 21605  016308                     l654:
 21606                           
 21607                           ; BSR set to: 0
 21608  016308  0100               	movlb	0	; () banked
 21609  01630A  EE20 F002          	lfsr	2,2
 21610  01630E  51BA               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21611  016310  26D9               	addwf	fsr2l,f,c
 21612  016312  51BB               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21613  016314  22DA               	addwfc	fsr2h,f,c
 21614  016316  50DF               	movf	indf2,w,c
 21615                           
 21616                           ; Switch size 1, requested type "space"
 21617                           ; Number of cases is 2, Range of values is 0 to 1
 21618                           ; switch strategies available:
 21619                           ; Name         Instructions Cycles
 21620                           ; simple_byte            7     4 (average)
 21621                           ;	Chosen strategy is simple_byte
 21622  016318  0A00               	xorlw	0	; case 0
 21623  01631A  B4D8               	btfsc	status,2,c
 21624  01631C  D7F1               	goto	l655
 21625  01631E  0A01               	xorlw	1	; case 1
 21626  016320  A4D8               	btfss	status,2,c
 21627  016322  0012               	return	
 21628  016324  D7EF               	goto	l657
 21629  016326                     __end_of_SPI_DisableISR:
 21630                           	opt stack 0
 21631                           tosu	equ	0xFFF
 21632                           tosh	equ	0xFFE
 21633                           tosl	equ	0xFFD
 21634                           pclath	equ	0xFFA
 21635                           tblptru	equ	0xFF8
 21636                           tblptrh	equ	0xFF7
 21637                           tblptrl	equ	0xFF6
 21638                           tablat	equ	0xFF5
 21639                           prodh	equ	0xFF4
 21640                           prodl	equ	0xFF3
 21641                           intcon	equ	0xFF2
 21642                           postinc0	equ	0xFEE
 21643                           wreg	equ	0xFE8
 21644                           indf1	equ	0xFE7
 21645                           postdec1	equ	0xFE5
 21646                           fsr1h	equ	0xFE2
 21647                           fsr1l	equ	0xFE1
 21648                           indf2	equ	0xFDF
 21649                           postinc2	equ	0xFDE
 21650                           postdec2	equ	0xFDD
 21651                           plusw2	equ	0xFDB
 21652                           fsr2h	equ	0xFDA
 21653                           fsr2l	equ	0xFD9
 21654                           status	equ	0xFD8
 21655                           
 21656 ;; *************** function _SPI_DCS *****************
 21657 ;; Defined at:
 21658 ;;		line 219 in file "Library/SPI.c"
 21659 ;; Parameters:    Size  Location     Type
 21660 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21661 ;;		 -> SPI1(11), SPI2(11), 
 21662 ;; Auto vars:     Size  Location     Type
 21663 ;;		None
 21664 ;; Return value:  Size  Location     Type
 21665 ;;                  1    wreg      void 
 21666 ;; Registers used:
 21667 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21668 ;; Tracked objects:
 21669 ;;		On entry : 0/0
 21670 ;;		On exit  : 0/0
 21671 ;;		Unchanged: 0/0
 21672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21673 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21677 ;;Total ram usage:        2 bytes
 21678 ;; Hardware stack levels used:    1
 21679 ;; Hardware stack levels required when called:    7
 21680 ;; This function calls:
 21681 ;;		Nothing
 21682 ;; This function is called by:
 21683 ;;		_SPI_Init
 21684 ;; This function uses a non-reentrant model
 21685 ;;
 21686                           
 21687                           	psect	text102
 21688  0161BE                     __ptext102:
 21689                           	opt stack 0
 21690  0161BE                     _SPI_DCS:
 21691                           	opt stack 19
 21692                           
 21693                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 21694                           
 21695                           ; BSR set to: 0
 21696                           ;incstack = 0
 21697  0161BE  0100               	movlb	0	; () banked
 21698  0161C0  EE20 F002          	lfsr	2,2
 21699  0161C4  51BA               	movf	SPI_DCS@pInput& (0+255),w,b
 21700  0161C6  26D9               	addwf	fsr2l,f,c
 21701  0161C8  51BB               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 21702  0161CA  22DA               	addwfc	fsr2h,f,c
 21703  0161CC  50DF               	movf	indf2,w,c
 21704  0161CE  A4D8               	btfss	status,2,c
 21705  0161D0  D007               	goto	l673
 21706                           
 21707                           ; BSR set to: 0
 21708                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 21709  0161D2  C0A9  FFD9         	movff	_PortC+4,fsr2l
 21710  0161D6  C0AA  FFDA         	movff	_PortC+5,fsr2h
 21711  0161DA  0100               	movlb	0	; () banked
 21712  0161DC  84DF               	bsf	indf2,2,c
 21713  0161DE  0012               	return	
 21714  0161E0                     l673:
 21715                           
 21716                           ; BSR set to: 0
 21717                           ;SPI.c: 223: else
 21718                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 21719                           
 21720                           ; BSR set to: 0
 21721  0161E0  C09F  FFD9         	movff	_PortD+4,fsr2l
 21722  0161E4  C0A0  FFDA         	movff	_PortD+5,fsr2h
 21723  0161E8  0100               	movlb	0	; () banked
 21724  0161EA  8EDF               	bsf	indf2,7,c
 21725  0161EC  0012               	return	
 21726  0161EE                     __end_of_SPI_DCS:
 21727                           	opt stack 0
 21728                           tosu	equ	0xFFF
 21729                           tosh	equ	0xFFE
 21730                           tosl	equ	0xFFD
 21731                           pclath	equ	0xFFA
 21732                           tblptru	equ	0xFF8
 21733                           tblptrh	equ	0xFF7
 21734                           tblptrl	equ	0xFF6
 21735                           tablat	equ	0xFF5
 21736                           prodh	equ	0xFF4
 21737                           prodl	equ	0xFF3
 21738                           intcon	equ	0xFF2
 21739                           postinc0	equ	0xFEE
 21740                           wreg	equ	0xFE8
 21741                           indf1	equ	0xFE7
 21742                           postdec1	equ	0xFE5
 21743                           fsr1h	equ	0xFE2
 21744                           fsr1l	equ	0xFE1
 21745                           indf2	equ	0xFDF
 21746                           postinc2	equ	0xFDE
 21747                           postdec2	equ	0xFDD
 21748                           plusw2	equ	0xFDB
 21749                           fsr2h	equ	0xFDA
 21750                           fsr2l	equ	0xFD9
 21751                           status	equ	0xFD8
 21752                           
 21753 ;; *************** function _Button_Init *****************
 21754 ;; Defined at:
 21755 ;;		line 18 in file "Library/Button.c"
 21756 ;; Parameters:    Size  Location     Type
 21757 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 21758 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 21759 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 21760 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 21761 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 21762 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 21763 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 21764 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 21765 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 21766 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 21767 ;; Auto vars:     Size  Location     Type
 21768 ;;		None
 21769 ;; Return value:  Size  Location     Type
 21770 ;;                  1    wreg      void 
 21771 ;; Registers used:
 21772 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21773 ;; Tracked objects:
 21774 ;;		On entry : 0/0
 21775 ;;		On exit  : 0/0
 21776 ;;		Unchanged: 0/0
 21777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21778 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21781 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21782 ;;Total ram usage:       13 bytes
 21783 ;; Hardware stack levels used:    1
 21784 ;; Hardware stack levels required when called:   15
 21785 ;; This function calls:
 21786 ;;		_HMI_InitButtons
 21787 ;;		_MXK_InitDIPSwitch
 21788 ;;		_MXK_InitTestButton
 21789 ;; This function is called by:
 21790 ;;		_HMI_Init
 21791 ;;		_FunctInitButton
 21792 ;; This function uses a non-reentrant model
 21793 ;;
 21794                           
 21795                           	psect	text103
 21796  013DEC                     __ptext103:
 21797                           	opt stack 0
 21798  013DEC                     _Button_Init:
 21799                           	opt stack 13
 21800                           
 21801                           ;Button.c: 21: if(pInput==(void*)0)
 21802                           
 21803                           ; BSR set to: 0
 21804                           ;incstack = 0
 21805  013DEC  0101               	movlb	1	; () banked
 21806  013DEE  5100               	movf	Button_Init@pInput& (0+255),w,b
 21807  013DF0  0101               	movlb	1	; () banked
 21808  013DF2  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 21809  013DF4  B4D8               	btfsc	status,2,c
 21810  013DF6  0012               	return	
 21811                           
 21812                           ; BSR set to: 1
 21813                           ;Button.c: 23: if(pInitIO==(void*)0)
 21814                           
 21815                           ; BSR set to: 1
 21816                           
 21817                           ; BSR set to: 1
 21818                           ;Button.c: 22: return;
 21819  013DF8  0101               	movlb	1	; () banked
 21820  013DFA  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21821  013DFC  0101               	movlb	1	; () banked
 21822  013DFE  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21823  013E00  0101               	movlb	1	; () banked
 21824  013E02  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21825  013E04  B4D8               	btfsc	status,2,c
 21826  013E06  0012               	return	
 21827                           
 21828                           ; BSR set to: 1
 21829                           ;Button.c: 25: if(pGetState==(void*)0)
 21830                           
 21831                           ; BSR set to: 1
 21832                           
 21833                           ; BSR set to: 1
 21834                           ;Button.c: 24: return;
 21835  013E08  0101               	movlb	1	; () banked
 21836  013E0A  5107               	movf	Button_Init@pGetState& (0+255),w,b
 21837  013E0C  0101               	movlb	1	; () banked
 21838  013E0E  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21839  013E10  0101               	movlb	1	; () banked
 21840  013E12  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21841  013E14  B4D8               	btfsc	status,2,c
 21842  013E16  0012               	return	
 21843                           
 21844                           ; BSR set to: 1
 21845                           ;Button.c: 27: if(pFunction==(void*)0)
 21846                           
 21847                           ; BSR set to: 1
 21848                           
 21849                           ; BSR set to: 1
 21850                           ;Button.c: 26: return;
 21851  013E18  0101               	movlb	1	; () banked
 21852  013E1A  510A               	movf	Button_Init@pFunction& (0+255),w,b
 21853  013E1C  0101               	movlb	1	; () banked
 21854  013E1E  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21855  013E20  0101               	movlb	1	; () banked
 21856  013E22  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21857  013E24  B4D8               	btfsc	status,2,c
 21858  013E26  0012               	return	
 21859                           
 21860                           ; BSR set to: 1
 21861                           ;Button.c: 30: if(pThreshold == 0)
 21862                           
 21863                           ; BSR set to: 1
 21864                           
 21865                           ; BSR set to: 1
 21866                           ;Button.c: 28: return;
 21867  013E28  0101               	movlb	1	; () banked
 21868  013E2A  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 21869  013E2C  0101               	movlb	1	; () banked
 21870  013E2E  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 21871  013E30  A4D8               	btfss	status,2,c
 21872  013E32  D005               	goto	l8
 21873                           
 21874                           ; BSR set to: 1
 21875                           ;Button.c: 31: pThreshold = 1;
 21876  013E34  0E00               	movlw	0
 21877  013E36  0101               	movlb	1	; () banked
 21878  013E38  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21879  013E3A  0E01               	movlw	1
 21880  013E3C  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21881  013E3E                     l8:
 21882                           
 21883                           ; BSR set to: 1
 21884                           ;Button.c: 34: pInput->mState = 0;
 21885                           
 21886                           ; BSR set to: 1
 21887  013E3E  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 21888  013E42  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 21889  013E46  0E00               	movlw	0
 21890  013E48  6EDF               	movwf	indf2,c
 21891                           
 21892                           ; BSR set to: 1
 21893                           ;Button.c: 35: pInput->mCount = 0;
 21894  013E4A  0101               	movlb	1	; () banked
 21895  013E4C  EE20 F001          	lfsr	2,1
 21896  013E50  5100               	movf	Button_Init@pInput& (0+255),w,b
 21897  013E52  26D9               	addwf	fsr2l,f,c
 21898  013E54  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21899  013E56  22DA               	addwfc	fsr2h,f,c
 21900  013E58  0E00               	movlw	0
 21901  013E5A  6EDF               	movwf	indf2,c
 21902                           
 21903                           ; BSR set to: 1
 21904                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 21905  013E5C  0101               	movlb	1	; () banked
 21906  013E5E  EE20 F002          	lfsr	2,2
 21907  013E62  5100               	movf	Button_Init@pInput& (0+255),w,b
 21908  013E64  26D9               	addwf	fsr2l,f,c
 21909  013E66  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21910  013E68  22DA               	addwfc	fsr2h,f,c
 21911  013E6A  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 21912  013E6E  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 21913                           
 21914                           ; BSR set to: 1
 21915                           ;Button.c: 37: pInput->mFunction = pFunction;
 21916  013E72  0101               	movlb	1	; () banked
 21917  013E74  EE20 F004          	lfsr	2,4
 21918  013E78  5100               	movf	Button_Init@pInput& (0+255),w,b
 21919  013E7A  26D9               	addwf	fsr2l,f,c
 21920  013E7C  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21921  013E7E  22DA               	addwfc	fsr2h,f,c
 21922  013E80  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 21923  013E84  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 21924  013E88  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 21925                           
 21926                           ; BSR set to: 1
 21927                           ;Button.c: 38: pInput->mGetState = pGetState;
 21928  013E8C  0101               	movlb	1	; () banked
 21929  013E8E  EE20 F007          	lfsr	2,7
 21930  013E92  5100               	movf	Button_Init@pInput& (0+255),w,b
 21931  013E94  26D9               	addwf	fsr2l,f,c
 21932  013E96  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21933  013E98  22DA               	addwfc	fsr2h,f,c
 21934  013E9A  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 21935  013E9E  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 21936  013EA2  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 21937                           
 21938                           ; BSR set to: 1
 21939                           ;Button.c: 41: pInitIO();
 21940  013EA6  D801               	call	u10718
 21941  013EA8  0012               	return	
 21942  013EAA                     u10718:
 21943  013EAA  0005               	push	
 21944  013EAC  6EFA               	movwf	pclath,c
 21945  013EAE  0101               	movlb	1	; () banked
 21946  013EB0  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21947  013EB2  6EFD               	movwf	tosl,c
 21948  013EB4  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 21949  013EB6  6EFE               	movwf	tosh,c
 21950  013EB8  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 21951  013EBA  6EFF               	movwf	tosu,c
 21952  013EBC  50FA               	movf	pclath,w,c
 21953  013EBE  0012               	return		;indir
 21954  013EC0                     __end_of_Button_Init:
 21955                           	opt stack 0
 21956                           tosu	equ	0xFFF
 21957                           tosh	equ	0xFFE
 21958                           tosl	equ	0xFFD
 21959                           pclath	equ	0xFFA
 21960                           tblptru	equ	0xFF8
 21961                           tblptrh	equ	0xFF7
 21962                           tblptrl	equ	0xFF6
 21963                           tablat	equ	0xFF5
 21964                           prodh	equ	0xFF4
 21965                           prodl	equ	0xFF3
 21966                           intcon	equ	0xFF2
 21967                           postinc0	equ	0xFEE
 21968                           wreg	equ	0xFE8
 21969                           indf1	equ	0xFE7
 21970                           postdec1	equ	0xFE5
 21971                           fsr1h	equ	0xFE2
 21972                           fsr1l	equ	0xFE1
 21973                           indf2	equ	0xFDF
 21974                           postinc2	equ	0xFDE
 21975                           postdec2	equ	0xFDD
 21976                           plusw2	equ	0xFDB
 21977                           fsr2h	equ	0xFDA
 21978                           fsr2l	equ	0xFD9
 21979                           status	equ	0xFD8
 21980                           
 21981 ;; *************** function _MXK_InitDIPSwitch *****************
 21982 ;; Defined at:
 21983 ;;		line 20 in file "Library/MXK.c"
 21984 ;; Parameters:    Size  Location     Type
 21985 ;;		None
 21986 ;; Auto vars:     Size  Location     Type
 21987 ;;		None
 21988 ;; Return value:  Size  Location     Type
 21989 ;;                  1    wreg      void 
 21990 ;; Registers used:
 21991 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21992 ;; Tracked objects:
 21993 ;;		On entry : 0/0
 21994 ;;		On exit  : 0/0
 21995 ;;		Unchanged: 0/0
 21996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22001 ;;Total ram usage:        0 bytes
 22002 ;; Hardware stack levels used:    1
 22003 ;; Hardware stack levels required when called:   14
 22004 ;; This function calls:
 22005 ;;		_Port_SetQuadType
 22006 ;; This function is called by:
 22007 ;;		_FunctInitButton
 22008 ;;		_Button_Init
 22009 ;; This function uses a non-reentrant model
 22010 ;;
 22011                           
 22012                           	psect	text104
 22013  016468                     __ptext104:
 22014                           	opt stack 0
 22015  016468                     _MXK_InitDIPSwitch:
 22016                           	opt stack 13
 22017                           
 22018                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 22019                           
 22020                           ;incstack = 0
 22021  016468  0E9B               	movlw	low _PortD
 22022  01646A  0100               	movlb	0	; () banked
 22023  01646C  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 22024  01646E  0E00               	movlw	high _PortD
 22025  016470  0100               	movlb	0	; () banked
 22026  016472  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 22027  016474  0E00               	movlw	0
 22028  016476  0100               	movlb	0	; () banked
 22029  016478  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 22030  01647A  0E00               	movlw	0
 22031  01647C  0100               	movlb	0	; () banked
 22032  01647E  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 22033  016480  EC4E  F08D         	call	_Port_SetQuadType	;wreg free
 22034  016484  0012               	return		;funcret
 22035  016486                     __end_of_MXK_InitDIPSwitch:
 22036                           	opt stack 0
 22037                           tosu	equ	0xFFF
 22038                           tosh	equ	0xFFE
 22039                           tosl	equ	0xFFD
 22040                           pclath	equ	0xFFA
 22041                           tblptru	equ	0xFF8
 22042                           tblptrh	equ	0xFF7
 22043                           tblptrl	equ	0xFF6
 22044                           tablat	equ	0xFF5
 22045                           prodh	equ	0xFF4
 22046                           prodl	equ	0xFF3
 22047                           intcon	equ	0xFF2
 22048                           postinc0	equ	0xFEE
 22049                           wreg	equ	0xFE8
 22050                           indf1	equ	0xFE7
 22051                           postdec1	equ	0xFE5
 22052                           fsr1h	equ	0xFE2
 22053                           fsr1l	equ	0xFE1
 22054                           indf2	equ	0xFDF
 22055                           postinc2	equ	0xFDE
 22056                           postdec2	equ	0xFDD
 22057                           plusw2	equ	0xFDB
 22058                           fsr2h	equ	0xFDA
 22059                           fsr2l	equ	0xFD9
 22060                           status	equ	0xFD8
 22061                           
 22062 ;; *************** function _HMI_InitButtons *****************
 22063 ;; Defined at:
 22064 ;;		line 21 in file "HMI.c"
 22065 ;; Parameters:    Size  Location     Type
 22066 ;;		None
 22067 ;; Auto vars:     Size  Location     Type
 22068 ;;		None
 22069 ;; Return value:  Size  Location     Type
 22070 ;;                  1    wreg      void 
 22071 ;; Registers used:
 22072 ;;		wreg, status,2
 22073 ;; Tracked objects:
 22074 ;;		On entry : 0/0
 22075 ;;		On exit  : 0/0
 22076 ;;		Unchanged: 0/0
 22077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22082 ;;Total ram usage:        0 bytes
 22083 ;; Hardware stack levels used:    1
 22084 ;; Hardware stack levels required when called:    7
 22085 ;; This function calls:
 22086 ;;		Nothing
 22087 ;; This function is called by:
 22088 ;;		_HMI_Init
 22089 ;;		_Button_Init
 22090 ;; This function uses a non-reentrant model
 22091 ;;
 22092                           
 22093                           	psect	text105
 22094  01672C                     __ptext105:
 22095                           	opt stack 0
 22096  01672C                     _HMI_InitButtons:
 22097                           	opt stack 20
 22098                           
 22099                           ;HMI.c: 23: TRISE = 0xFC;
 22100                           
 22101                           ;incstack = 0
 22102  01672C  0EFC               	movlw	252
 22103  01672E  6E96               	movwf	3990,c	;volatile
 22104  016730  0012               	return		;funcret
 22105  016732                     __end_of_HMI_InitButtons:
 22106                           	opt stack 0
 22107                           tosu	equ	0xFFF
 22108                           tosh	equ	0xFFE
 22109                           tosl	equ	0xFFD
 22110                           pclath	equ	0xFFA
 22111                           tblptru	equ	0xFF8
 22112                           tblptrh	equ	0xFF7
 22113                           tblptrl	equ	0xFF6
 22114                           tablat	equ	0xFF5
 22115                           prodh	equ	0xFF4
 22116                           prodl	equ	0xFF3
 22117                           intcon	equ	0xFF2
 22118                           postinc0	equ	0xFEE
 22119                           wreg	equ	0xFE8
 22120                           indf1	equ	0xFE7
 22121                           postdec1	equ	0xFE5
 22122                           fsr1h	equ	0xFE2
 22123                           fsr1l	equ	0xFE1
 22124                           indf2	equ	0xFDF
 22125                           postinc2	equ	0xFDE
 22126                           postdec2	equ	0xFDD
 22127                           plusw2	equ	0xFDB
 22128                           fsr2h	equ	0xFDA
 22129                           fsr2l	equ	0xFD9
 22130                           status	equ	0xFD8
 22131                           
 22132 ;; *************** function _MXK_InitTestButton *****************
 22133 ;; Defined at:
 22134 ;;		line 10 in file "Library/MXK.c"
 22135 ;; Parameters:    Size  Location     Type
 22136 ;;		None
 22137 ;; Auto vars:     Size  Location     Type
 22138 ;;		None
 22139 ;; Return value:  Size  Location     Type
 22140 ;;                  1    wreg      void 
 22141 ;; Registers used:
 22142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22143 ;; Tracked objects:
 22144 ;;		On entry : 0/0
 22145 ;;		On exit  : 0/0
 22146 ;;		Unchanged: 0/0
 22147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22152 ;;Total ram usage:        0 bytes
 22153 ;; Hardware stack levels used:    1
 22154 ;; Hardware stack levels required when called:   12
 22155 ;; This function calls:
 22156 ;;		_Port_SetPinType
 22157 ;; This function is called by:
 22158 ;;		_FunctInitButton
 22159 ;;		_Button_Init
 22160 ;; This function uses a non-reentrant model
 22161 ;;
 22162                           
 22163                           	psect	text106
 22164  016486                     __ptext106:
 22165                           	opt stack 0
 22166  016486                     _MXK_InitTestButton:
 22167                           	opt stack 15
 22168                           
 22169                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 22170                           
 22171                           ;incstack = 0
 22172  016486  0EAC               	movlw	low _PortB
 22173  016488  0100               	movlb	0	; () banked
 22174  01648A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22175  01648C  0E03               	movlw	high _PortB
 22176  01648E  0100               	movlb	0	; () banked
 22177  016490  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22178  016492  0E04               	movlw	4
 22179  016494  0100               	movlb	0	; () banked
 22180  016496  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22181  016498  0E00               	movlw	0
 22182  01649A  0100               	movlb	0	; () banked
 22183  01649C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22184  01649E  EC5B  F093         	call	_Port_SetPinType	;wreg free
 22185  0164A2  0012               	return		;funcret
 22186  0164A4                     __end_of_MXK_InitTestButton:
 22187                           	opt stack 0
 22188                           tosu	equ	0xFFF
 22189                           tosh	equ	0xFFE
 22190                           tosl	equ	0xFFD
 22191                           pclath	equ	0xFFA
 22192                           tblptru	equ	0xFF8
 22193                           tblptrh	equ	0xFF7
 22194                           tblptrl	equ	0xFF6
 22195                           tablat	equ	0xFF5
 22196                           prodh	equ	0xFF4
 22197                           prodl	equ	0xFF3
 22198                           intcon	equ	0xFF2
 22199                           postinc0	equ	0xFEE
 22200                           wreg	equ	0xFE8
 22201                           indf1	equ	0xFE7
 22202                           postdec1	equ	0xFE5
 22203                           fsr1h	equ	0xFE2
 22204                           fsr1l	equ	0xFE1
 22205                           indf2	equ	0xFDF
 22206                           postinc2	equ	0xFDE
 22207                           postdec2	equ	0xFDD
 22208                           plusw2	equ	0xFDB
 22209                           fsr2h	equ	0xFDA
 22210                           fsr2l	equ	0xFD9
 22211                           status	equ	0xFD8
 22212                           
 22213 ;; *************** function _Port_SetPinType *****************
 22214 ;; Defined at:
 22215 ;;		line 189 in file "Library/Port.c"
 22216 ;; Parameters:    Size  Location     Type
 22217 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22218 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22219 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22220 ;;  pPin            1   40[BANK0 ] enum E6750
 22221 ;;  pType           1   41[BANK0 ] enum E6795
 22222 ;; Auto vars:     Size  Location     Type
 22223 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 22224 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 22225 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 22226 ;;  Output          1   42[BANK0 ] enum E6475
 22227 ;; Return value:  Size  Location     Type
 22228 ;;                  1    wreg      enum E6475
 22229 ;; Registers used:
 22230 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22231 ;; Tracked objects:
 22232 ;;		On entry : 0/0
 22233 ;;		On exit  : 0/0
 22234 ;;		Unchanged: 0/0
 22235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22236 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22237 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22239 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22240 ;;Total ram usage:        7 bytes
 22241 ;; Hardware stack levels used:    1
 22242 ;; Hardware stack levels required when called:   11
 22243 ;; This function calls:
 22244 ;;		_Byte_SetBit
 22245 ;;		_PortProperty_Valid
 22246 ;;		_Word_SetPair
 22247 ;; This function is called by:
 22248 ;;		_Configure_GPIOs
 22249 ;;		_LED_Init
 22250 ;;		_Port_Init
 22251 ;;		_SPI_Init
 22252 ;;		_Motor_Init
 22253 ;;		_MXK_InitTestButton
 22254 ;;		_MXK_Init
 22255 ;;		_I2C_Init
 22256 ;; This function uses a non-reentrant model
 22257 ;;
 22258                           
 22259                           	psect	text107
 22260  0126B6                     __ptext107:
 22261                           	opt stack 0
 22262  0126B6                     _Port_SetPinType:
 22263                           	opt stack 17
 22264                           
 22265                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 22266                           
 22267                           ;incstack = 0
 22268  0126B6  C0E0  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 22269  0126BA  C0E1  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 22270  0126BE  CFDE F0E5          	movff	postinc2,Port_SetPinType@Props
 22271  0126C2  CFDD F0E6          	movff	postdec2,Port_SetPinType@Props+1
 22272                           
 22273                           ;Port.c: 192: ePinError Output = ePinErrorState;
 22274  0126C6  0E05               	movlw	5
 22275  0126C8  0100               	movlb	0	; () banked
 22276  0126CA  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22277                           
 22278                           ;Port.c: 193: switch (pType)
 22279  0126CC  D0B5               	goto	l412
 22280  0126CE                     
 22281                           ; BSR set to: 0
 22282                           ;Port.c: 197: {
 22283                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22284                           
 22285                           ; BSR set to: 0
 22286  0126CE  0100               	movlb	0	; () banked
 22287  0126D0  EE20 F002          	lfsr	2,2
 22288  0126D4  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22289  0126D6  26D9               	addwf	fsr2l,f,c
 22290  0126D8  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22291  0126DA  22DA               	addwfc	fsr2h,f,c
 22292  0126DC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22293  0126E0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22294  0126E4  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22295  0126E8  0E01               	movlw	1
 22296  0126EA  0100               	movlb	0	; () banked
 22297  0126EC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22298  0126EE  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 22299                           
 22300                           ;Port.c: 203: break;
 22301  0126F2  D0B0               	goto	l414
 22302  0126F4                     
 22303                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 22304  0126F4  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22305  0126F8  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22306  0126FC  0E01               	movlw	1
 22307  0126FE  0100               	movlb	0	; () banked
 22308  012700  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22309  012702  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22310  012706  EC65  F0A8         	call	_PortProperty_Valid	;wreg free
 22311  01270A  0100               	movlb	0	; () banked
 22312  01270C  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22313  01270E  0100               	movlb	0	; () banked
 22314  012710  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22315  012712  A4D8               	btfss	status,2,c
 22316  012714  0012               	return	
 22317                           
 22318                           ; BSR set to: 0
 22319                           ;Port.c: 208: {
 22320                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22321  012716  0100               	movlb	0	; () banked
 22322  012718  EE20 F002          	lfsr	2,2
 22323  01271C  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22324  01271E  26D9               	addwf	fsr2l,f,c
 22325  012720  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22326  012722  22DA               	addwfc	fsr2h,f,c
 22327  012724  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22328  012728  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22329  01272C  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22330  012730  0E00               	movlw	0
 22331  012732  0100               	movlb	0	; () banked
 22332  012734  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22333  012736  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 22334                           
 22335                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22336  01273A  0100               	movlb	0	; () banked
 22337  01273C  EE20 F004          	lfsr	2,4
 22338  012740  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22339  012742  26D9               	addwf	fsr2l,f,c
 22340  012744  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22341  012746  22DA               	addwfc	fsr2h,f,c
 22342  012748  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22343  01274C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22344  012750  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22345  012754  0E00               	movlw	0
 22346  012756  0100               	movlb	0	; () banked
 22347  012758  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22348  01275A  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 22349                           
 22350                           ;Port.c: 214: break;
 22351  01275E  D07A               	goto	l414
 22352  012760                     
 22353                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 22354                           
 22355                           ;Port.c: 218: case eTypeOutputOpenSource:
 22356  012760  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22357  012764  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22358  012768  0E02               	movlw	2
 22359  01276A  0100               	movlb	0	; () banked
 22360  01276C  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22361  01276E  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22362  012772  EC65  F0A8         	call	_PortProperty_Valid	;wreg free
 22363  012776  0100               	movlb	0	; () banked
 22364  012778  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22365  01277A  0100               	movlb	0	; () banked
 22366  01277C  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22367  01277E  A4D8               	btfss	status,2,c
 22368  012780  0012               	return	
 22369                           
 22370                           ; BSR set to: 0
 22371                           ;Port.c: 220: {
 22372                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22373  012782  0100               	movlb	0	; () banked
 22374  012784  EE20 F002          	lfsr	2,2
 22375  012788  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22376  01278A  26D9               	addwf	fsr2l,f,c
 22377  01278C  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22378  01278E  22DA               	addwfc	fsr2h,f,c
 22379  012790  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22380  012794  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22381  012798  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22382  01279C  0E01               	movlw	1
 22383  01279E  0100               	movlb	0	; () banked
 22384  0127A0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22385  0127A2  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 22386                           
 22387                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 22388  0127A6  0100               	movlb	0	; () banked
 22389  0127A8  EE20 F004          	lfsr	2,4
 22390  0127AC  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22391  0127AE  26D9               	addwf	fsr2l,f,c
 22392  0127B0  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22393  0127B2  22DA               	addwfc	fsr2h,f,c
 22394  0127B4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22395  0127B8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22396  0127BC  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22397  0127C0  0E01               	movlw	1
 22398  0127C2  0100               	movlb	0	; () banked
 22399  0127C4  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22400  0127C6  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 22401                           
 22402                           ;Port.c: 226: break;
 22403  0127CA  D044               	goto	l414
 22404  0127CC                     
 22405                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 22406                           
 22407                           ;Port.c: 230: case eTypeOutputPushPull:
 22408  0127CC  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22409  0127D0  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22410  0127D4  0E00               	movlw	0
 22411  0127D6  0100               	movlb	0	; () banked
 22412  0127D8  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22413  0127DA  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22414  0127DE  EC65  F0A8         	call	_PortProperty_Valid	;wreg free
 22415  0127E2  0100               	movlb	0	; () banked
 22416  0127E4  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22417  0127E6  0100               	movlb	0	; () banked
 22418  0127E8  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22419  0127EA  A4D8               	btfss	status,2,c
 22420  0127EC  0012               	return	
 22421                           
 22422                           ; BSR set to: 0
 22423                           ;Port.c: 232: {
 22424                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22425  0127EE  0100               	movlb	0	; () banked
 22426  0127F0  EE20 F002          	lfsr	2,2
 22427  0127F4  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22428  0127F6  26D9               	addwf	fsr2l,f,c
 22429  0127F8  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22430  0127FA  22DA               	addwfc	fsr2h,f,c
 22431  0127FC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22432  012800  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22433  012804  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22434  012808  0E00               	movlw	0
 22435  01280A  0100               	movlb	0	; () banked
 22436  01280C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22437  01280E  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 22438                           
 22439                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22440  012812  0100               	movlb	0	; () banked
 22441  012814  EE20 F004          	lfsr	2,4
 22442  012818  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22443  01281A  26D9               	addwf	fsr2l,f,c
 22444  01281C  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22445  01281E  22DA               	addwfc	fsr2h,f,c
 22446  012820  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22447  012824  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22448  012828  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22449  01282C  0E00               	movlw	0
 22450  01282E  0100               	movlb	0	; () banked
 22451  012830  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22452  012832  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 22453                           
 22454                           ;Port.c: 239: }
 22455                           
 22456                           ;Port.c: 238: break;
 22457  012836  D00E               	goto	l414
 22458  012838                     l412:
 22459  012838  0100               	movlb	0	; () banked
 22460  01283A  51E3               	movf	Port_SetPinType@pType& (0+255),w,b
 22461                           
 22462                           ; Switch size 1, requested type "space"
 22463                           ; Number of cases is 4, Range of values is 0 to 3
 22464                           ; switch strategies available:
 22465                           ; Name         Instructions Cycles
 22466                           ; simple_byte           13     7 (average)
 22467                           ;	Chosen strategy is simple_byte
 22468  01283C  0A00               	xorlw	0	; case 0
 22469  01283E  B4D8               	btfsc	status,2,c
 22470  012840  D746               	goto	l413
 22471  012842  0A01               	xorlw	1	; case 1
 22472  012844  B4D8               	btfsc	status,2,c
 22473  012846  D756               	goto	l415
 22474  012848  0A03               	xorlw	3	; case 2
 22475  01284A  B4D8               	btfsc	status,2,c
 22476  01284C  D789               	goto	l417
 22477  01284E  0A01               	xorlw	1	; case 3
 22478  012850  B4D8               	btfsc	status,2,c
 22479  012852  D7BC               	goto	l421
 22480  012854                     l414:
 22481                           
 22482                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22483                           
 22484                           ; BSR set to: 0
 22485  012854  0E08               	movlw	8
 22486  012856  0100               	movlb	0	; () banked
 22487  012858  25E0               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22488  01285A  0100               	movlb	0	; () banked
 22489  01285C  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22490  01285E  0E00               	movlw	0
 22491  012860  0100               	movlb	0	; () banked
 22492  012862  21E1               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22493  012864  0100               	movlb	0	; () banked
 22494  012866  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22495  012868  C0E2  F0CB         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22496  01286C  C0E3  F0CC         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22497  012870  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 22498  012874  0012               	return	
 22499  012876                     __end_of_Port_SetPinType:
 22500                           	opt stack 0
 22501                           tosu	equ	0xFFF
 22502                           tosh	equ	0xFFE
 22503                           tosl	equ	0xFFD
 22504                           pclath	equ	0xFFA
 22505                           tblptru	equ	0xFF8
 22506                           tblptrh	equ	0xFF7
 22507                           tblptrl	equ	0xFF6
 22508                           tablat	equ	0xFF5
 22509                           prodh	equ	0xFF4
 22510                           prodl	equ	0xFF3
 22511                           intcon	equ	0xFF2
 22512                           postinc0	equ	0xFEE
 22513                           wreg	equ	0xFE8
 22514                           indf1	equ	0xFE7
 22515                           postdec1	equ	0xFE5
 22516                           fsr1h	equ	0xFE2
 22517                           fsr1l	equ	0xFE1
 22518                           indf2	equ	0xFDF
 22519                           postinc2	equ	0xFDE
 22520                           postdec2	equ	0xFDD
 22521                           plusw2	equ	0xFDB
 22522                           fsr2h	equ	0xFDA
 22523                           fsr2l	equ	0xFD9
 22524                           status	equ	0xFD8
 22525                           
 22526 ;; *************** function _Port_SetQuadType *****************
 22527 ;; Defined at:
 22528 ;;		line 399 in file "Library/Port.c"
 22529 ;; Parameters:    Size  Location     Type
 22530 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22531 ;;		 -> PortB(10), PortD(10), 
 22532 ;;  pQuad           1   56[BANK0 ] enum E6776
 22533 ;;  pType           1   57[BANK0 ] enum E6795
 22534 ;; Auto vars:     Size  Location     Type
 22535 ;;  Output          1   58[BANK0 ] enum E6475
 22536 ;; Return value:  Size  Location     Type
 22537 ;;                  1    wreg      enum E6475
 22538 ;; Registers used:
 22539 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22540 ;; Tracked objects:
 22541 ;;		On entry : 0/0
 22542 ;;		On exit  : 0/0
 22543 ;;		Unchanged: 0/0
 22544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22545 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22548 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22549 ;;Total ram usage:        5 bytes
 22550 ;; Hardware stack levels used:    1
 22551 ;; Hardware stack levels required when called:   13
 22552 ;; This function calls:
 22553 ;;		_Byte_SetQuad
 22554 ;;		_Port_CheckQuadType
 22555 ;;		_Word_SetPair
 22556 ;; This function is called by:
 22557 ;;		_MXK_InitDIPSwitch
 22558 ;;		_MXK_Init
 22559 ;; This function uses a non-reentrant model
 22560 ;;
 22561                           
 22562                           	psect	text108
 22563  011A9C                     __ptext108:
 22564                           	opt stack 0
 22565  011A9C                     _Port_SetQuadType:
 22566                           	opt stack 15
 22567                           
 22568                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22569                           
 22570                           ;incstack = 0
 22571  011A9C  0E05               	movlw	5
 22572  011A9E  0100               	movlb	0	; () banked
 22573  011AA0  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22574                           
 22575                           ;Port.c: 403: switch (pType)
 22576  011AA2  D0C7               	goto	l476
 22577  011AA4                     
 22578                           ; BSR set to: 0
 22579                           ;Port.c: 407: {
 22580                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22581                           
 22582                           ; BSR set to: 0
 22583  011AA4  0100               	movlb	0	; () banked
 22584  011AA6  EE20 F002          	lfsr	2,2
 22585  011AAA  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22586  011AAC  26D9               	addwf	fsr2l,f,c
 22587  011AAE  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22588  011AB0  22DA               	addwfc	fsr2h,f,c
 22589  011AB2  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22590  011AB6  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22591  011ABA  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22592  011ABE  0E0F               	movlw	15
 22593  011AC0  0100               	movlb	0	; () banked
 22594  011AC2  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22595  011AC4  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 22596                           
 22597                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22598  011AC8  0100               	movlb	0	; () banked
 22599  011ACA  EE20 F004          	lfsr	2,4
 22600  011ACE  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22601  011AD0  26D9               	addwf	fsr2l,f,c
 22602  011AD2  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22603  011AD4  22DA               	addwfc	fsr2h,f,c
 22604  011AD6  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22605  011ADA  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22606  011ADE  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22607  011AE2  0E00               	movlw	0
 22608  011AE4  0100               	movlb	0	; () banked
 22609  011AE6  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22610  011AE8  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 22611                           
 22612                           ;Port.c: 413: }
 22613                           ;Port.c: 415: break;
 22614  011AEC  D0B0               	goto	l478
 22615  011AEE                     
 22616                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22617  011AEE  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22618  011AF2  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22619  011AF6  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22620  011AFA  0E03               	movlw	3
 22621  011AFC  0100               	movlb	0	; () banked
 22622  011AFE  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22623  011B00  ECDC  F0AC         	call	_Port_CheckQuadType	;wreg free
 22624  011B04  0100               	movlb	0	; () banked
 22625  011B06  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22626  011B08  0100               	movlb	0	; () banked
 22627  011B0A  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22628  011B0C  A4D8               	btfss	status,2,c
 22629  011B0E  0012               	return	
 22630                           
 22631                           ; BSR set to: 0
 22632                           ;Port.c: 418: {
 22633                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22634  011B10  0100               	movlb	0	; () banked
 22635  011B12  EE20 F002          	lfsr	2,2
 22636  011B16  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22637  011B18  26D9               	addwf	fsr2l,f,c
 22638  011B1A  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22639  011B1C  22DA               	addwfc	fsr2h,f,c
 22640  011B1E  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22641  011B22  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22642  011B26  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22643  011B2A  0E00               	movlw	0
 22644  011B2C  0100               	movlb	0	; () banked
 22645  011B2E  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22646  011B30  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 22647                           
 22648                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22649  011B34  0100               	movlb	0	; () banked
 22650  011B36  EE20 F004          	lfsr	2,4
 22651  011B3A  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22652  011B3C  26D9               	addwf	fsr2l,f,c
 22653  011B3E  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22654  011B40  22DA               	addwfc	fsr2h,f,c
 22655  011B42  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22656  011B46  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22657  011B4A  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22658  011B4E  0E00               	movlw	0
 22659  011B50  0100               	movlb	0	; () banked
 22660  011B52  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22661  011B54  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 22662                           
 22663                           ;Port.c: 424: }
 22664  011B58  D07A               	goto	l478
 22665  011B5A                     
 22666                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22667  011B5A  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22668  011B5E  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22669  011B62  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22670  011B66  0E03               	movlw	3
 22671  011B68  0100               	movlb	0	; () banked
 22672  011B6A  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22673  011B6C  ECDC  F0AC         	call	_Port_CheckQuadType	;wreg free
 22674  011B70  0100               	movlb	0	; () banked
 22675  011B72  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22676  011B74  0100               	movlb	0	; () banked
 22677  011B76  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22678  011B78  A4D8               	btfss	status,2,c
 22679  011B7A  0012               	return	
 22680                           
 22681                           ; BSR set to: 0
 22682                           ;Port.c: 429: {
 22683                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22684  011B7C  0100               	movlb	0	; () banked
 22685  011B7E  EE20 F002          	lfsr	2,2
 22686  011B82  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22687  011B84  26D9               	addwf	fsr2l,f,c
 22688  011B86  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22689  011B88  22DA               	addwfc	fsr2h,f,c
 22690  011B8A  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22691  011B8E  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22692  011B92  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22693  011B96  0E0F               	movlw	15
 22694  011B98  0100               	movlb	0	; () banked
 22695  011B9A  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22696  011B9C  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 22697                           
 22698                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22699  011BA0  0100               	movlb	0	; () banked
 22700  011BA2  EE20 F004          	lfsr	2,4
 22701  011BA6  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22702  011BA8  26D9               	addwf	fsr2l,f,c
 22703  011BAA  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22704  011BAC  22DA               	addwfc	fsr2h,f,c
 22705  011BAE  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22706  011BB2  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22707  011BB6  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22708  011BBA  0E0F               	movlw	15
 22709  011BBC  0100               	movlb	0	; () banked
 22710  011BBE  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22711  011BC0  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 22712                           
 22713                           ;Port.c: 435: }
 22714  011BC4  D044               	goto	l478
 22715  011BC6                     
 22716                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22717  011BC6  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22718  011BCA  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22719  011BCE  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22720  011BD2  0E03               	movlw	3
 22721  011BD4  0100               	movlb	0	; () banked
 22722  011BD6  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22723  011BD8  ECDC  F0AC         	call	_Port_CheckQuadType	;wreg free
 22724  011BDC  0100               	movlb	0	; () banked
 22725  011BDE  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22726  011BE0  0100               	movlb	0	; () banked
 22727  011BE2  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22728  011BE4  A4D8               	btfss	status,2,c
 22729  011BE6  0012               	return	
 22730                           
 22731                           ; BSR set to: 0
 22732                           ;Port.c: 440: {
 22733                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22734  011BE8  0100               	movlb	0	; () banked
 22735  011BEA  EE20 F002          	lfsr	2,2
 22736  011BEE  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22737  011BF0  26D9               	addwf	fsr2l,f,c
 22738  011BF2  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22739  011BF4  22DA               	addwfc	fsr2h,f,c
 22740  011BF6  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22741  011BFA  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22742  011BFE  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22743  011C02  0E00               	movlw	0
 22744  011C04  0100               	movlb	0	; () banked
 22745  011C06  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22746  011C08  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 22747                           
 22748                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22749  011C0C  0100               	movlb	0	; () banked
 22750  011C0E  EE20 F004          	lfsr	2,4
 22751  011C12  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22752  011C14  26D9               	addwf	fsr2l,f,c
 22753  011C16  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22754  011C18  22DA               	addwfc	fsr2h,f,c
 22755  011C1A  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22756  011C1E  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22757  011C22  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22758  011C26  0E00               	movlw	0
 22759  011C28  0100               	movlb	0	; () banked
 22760  011C2A  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22761  011C2C  ECC8  F0B1         	call	_Byte_SetQuad	;wreg free
 22762                           
 22763                           ;Port.c: 446: }
 22764  011C30  D00E               	goto	l478
 22765  011C32                     l476:
 22766  011C32  0100               	movlb	0	; () banked
 22767  011C34  51F3               	movf	Port_SetQuadType@pType& (0+255),w,b
 22768                           
 22769                           ; Switch size 1, requested type "space"
 22770                           ; Number of cases is 4, Range of values is 0 to 3
 22771                           ; switch strategies available:
 22772                           ; Name         Instructions Cycles
 22773                           ; simple_byte           13     7 (average)
 22774                           ;	Chosen strategy is simple_byte
 22775  011C36  0A00               	xorlw	0	; case 0
 22776  011C38  B4D8               	btfsc	status,2,c
 22777  011C3A  D734               	goto	l477
 22778  011C3C  0A01               	xorlw	1	; case 1
 22779  011C3E  B4D8               	btfsc	status,2,c
 22780  011C40  D756               	goto	l479
 22781  011C42  0A03               	xorlw	3	; case 2
 22782  011C44  B4D8               	btfsc	status,2,c
 22783  011C46  D789               	goto	l483
 22784  011C48  0A01               	xorlw	1	; case 3
 22785  011C4A  B4D8               	btfsc	status,2,c
 22786  011C4C  D7BC               	goto	l486
 22787  011C4E                     l478:
 22788                           
 22789                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22790                           
 22791                           ; BSR set to: 0
 22792  011C4E  0E08               	movlw	8
 22793  011C50  0100               	movlb	0	; () banked
 22794  011C52  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22795  011C54  0100               	movlb	0	; () banked
 22796  011C56  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22797  011C58  0E00               	movlw	0
 22798  011C5A  0100               	movlb	0	; () banked
 22799  011C5C  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22800  011C5E  0100               	movlb	0	; () banked
 22801  011C60  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22802  011C62  0100               	movlb	0	; () banked
 22803  011C64  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22804  011C66  0D04               	mullw	4
 22805  011C68  CFF3 F0CB          	movff	prodl,Word_SetPair@pPair
 22806  011C6C  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22807  011C70  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 22808                           
 22809                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22810  011C74  0E08               	movlw	8
 22811  011C76  0100               	movlb	0	; () banked
 22812  011C78  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22813  011C7A  0100               	movlb	0	; () banked
 22814  011C7C  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22815  011C7E  0E00               	movlw	0
 22816  011C80  0100               	movlb	0	; () banked
 22817  011C82  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22818  011C84  0100               	movlb	0	; () banked
 22819  011C86  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22820  011C88  0100               	movlb	0	; () banked
 22821  011C8A  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22822  011C8C  0D04               	mullw	4
 22823  011C8E  28F3               	incf	prodl,w,c
 22824  011C90  0100               	movlb	0	; () banked
 22825  011C92  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22826  011C94  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22827  011C98  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 22828                           
 22829                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22830  011C9C  0E08               	movlw	8
 22831  011C9E  0100               	movlb	0	; () banked
 22832  011CA0  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22833  011CA2  0100               	movlb	0	; () banked
 22834  011CA4  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22835  011CA6  0E00               	movlw	0
 22836  011CA8  0100               	movlb	0	; () banked
 22837  011CAA  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22838  011CAC  0100               	movlb	0	; () banked
 22839  011CAE  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22840  011CB0  0100               	movlb	0	; () banked
 22841  011CB2  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22842  011CB4  0D04               	mullw	4
 22843  011CB6  50F3               	movf	prodl,w,c
 22844  011CB8  0F02               	addlw	2
 22845  011CBA  0100               	movlb	0	; () banked
 22846  011CBC  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22847  011CBE  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22848  011CC2  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 22849                           
 22850                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22851  011CC6  0E08               	movlw	8
 22852  011CC8  0100               	movlb	0	; () banked
 22853  011CCA  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22854  011CCC  0100               	movlb	0	; () banked
 22855  011CCE  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22856  011CD0  0E00               	movlw	0
 22857  011CD2  0100               	movlb	0	; () banked
 22858  011CD4  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22859  011CD6  0100               	movlb	0	; () banked
 22860  011CD8  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22861  011CDA  0100               	movlb	0	; () banked
 22862  011CDC  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22863  011CDE  0D04               	mullw	4
 22864  011CE0  50F3               	movf	prodl,w,c
 22865  011CE2  0F03               	addlw	3
 22866  011CE4  0100               	movlb	0	; () banked
 22867  011CE6  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22868  011CE8  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22869  011CEC  ECD9  F0AE         	call	_Word_SetPair	;wreg free
 22870  011CF0  0012               	return	
 22871  011CF2                     __end_of_Port_SetQuadType:
 22872                           	opt stack 0
 22873                           tosu	equ	0xFFF
 22874                           tosh	equ	0xFFE
 22875                           tosl	equ	0xFFD
 22876                           pclath	equ	0xFFA
 22877                           tblptru	equ	0xFF8
 22878                           tblptrh	equ	0xFF7
 22879                           tblptrl	equ	0xFF6
 22880                           tablat	equ	0xFF5
 22881                           prodh	equ	0xFF4
 22882                           prodl	equ	0xFF3
 22883                           intcon	equ	0xFF2
 22884                           postinc0	equ	0xFEE
 22885                           wreg	equ	0xFE8
 22886                           indf1	equ	0xFE7
 22887                           postdec1	equ	0xFE5
 22888                           fsr1h	equ	0xFE2
 22889                           fsr1l	equ	0xFE1
 22890                           indf2	equ	0xFDF
 22891                           postinc2	equ	0xFDE
 22892                           postdec2	equ	0xFDD
 22893                           plusw2	equ	0xFDB
 22894                           fsr2h	equ	0xFDA
 22895                           fsr2l	equ	0xFD9
 22896                           status	equ	0xFD8
 22897                           
 22898 ;; *************** function _Word_SetPair *****************
 22899 ;; Defined at:
 22900 ;;		line 149 in file "Library/Types.c"
 22901 ;; Parameters:    Size  Location     Type
 22902 ;;  pInput          2   15[BANK0 ] PTR struct Word
 22903 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22904 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22905 ;;  pPair           1   17[BANK0 ] unsigned char 
 22906 ;;  pValue          1   18[BANK0 ] unsigned char 
 22907 ;; Auto vars:     Size  Location     Type
 22908 ;;		None
 22909 ;; Return value:  Size  Location     Type
 22910 ;;                  1    wreg      void 
 22911 ;; Registers used:
 22912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22913 ;; Tracked objects:
 22914 ;;		On entry : 0/0
 22915 ;;		On exit  : 0/0
 22916 ;;		Unchanged: 0/0
 22917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22918 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22921 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22922 ;;Total ram usage:        4 bytes
 22923 ;; Hardware stack levels used:    1
 22924 ;; Hardware stack levels required when called:    9
 22925 ;; This function calls:
 22926 ;;		_Byte_SetPair
 22927 ;; This function is called by:
 22928 ;;		_Port_SetPinType
 22929 ;;		_Port_SetQuadType
 22930 ;;		_Port_SetType
 22931 ;;		_Port_SetPairType
 22932 ;;		_PortProperty_Init
 22933 ;; This function uses a non-reentrant model
 22934 ;;
 22935                           
 22936                           	psect	text109
 22937  015DB2                     __ptext109:
 22938                           	opt stack 0
 22939  015DB2                     _Word_SetPair:
 22940                           	opt stack 18
 22941                           
 22942                           ;Types.c: 151: if (pPair >= 4)
 22943                           
 22944                           ;incstack = 0
 22945  015DB2  0E03               	movlw	3
 22946  015DB4  0100               	movlb	0	; () banked
 22947  015DB6  65CB               	cpfsgt	Word_SetPair@pPair& (0+255),b
 22948  015DB8  D014               	goto	l776
 22949                           
 22950                           ; BSR set to: 0
 22951                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 22952  015DBA  0E01               	movlw	1
 22953  015DBC  0100               	movlb	0	; () banked
 22954  015DBE  25C9               	addwf	Word_SetPair@pInput& (0+255),w,b
 22955  015DC0  0100               	movlb	0	; () banked
 22956  015DC2  6FC5               	movwf	Byte_SetPair@pInput& (0+255),b
 22957  015DC4  0E00               	movlw	0
 22958  015DC6  0100               	movlb	0	; () banked
 22959  015DC8  21CA               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 22960  015DCA  0100               	movlb	0	; () banked
 22961  015DCC  6FC6               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 22962  015DCE  0100               	movlb	0	; () banked
 22963  015DD0  51CB               	movf	Word_SetPair@pPair& (0+255),w,b
 22964  015DD2  0FFC               	addlw	252
 22965  015DD4  0100               	movlb	0	; () banked
 22966  015DD6  6FC7               	movwf	Byte_SetPair@pPair& (0+255),b
 22967  015DD8  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22968  015DDC  ECB7  F0B1         	call	_Byte_SetPair	;wreg free
 22969  015DE0  0012               	return	
 22970  015DE2                     l776:
 22971                           
 22972                           ;Types.c: 153: else
 22973                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 22974  015DE2  C0C9  F0C5         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 22975  015DE6  C0CA  F0C6         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 22976  015DEA  C0CB  F0C7         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 22977  015DEE  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22978  015DF2  ECB7  F0B1         	call	_Byte_SetPair	;wreg free
 22979  015DF6  0012               	return	
 22980  015DF8                     __end_of_Word_SetPair:
 22981                           	opt stack 0
 22982                           tosu	equ	0xFFF
 22983                           tosh	equ	0xFFE
 22984                           tosl	equ	0xFFD
 22985                           pclath	equ	0xFFA
 22986                           tblptru	equ	0xFF8
 22987                           tblptrh	equ	0xFF7
 22988                           tblptrl	equ	0xFF6
 22989                           tablat	equ	0xFF5
 22990                           prodh	equ	0xFF4
 22991                           prodl	equ	0xFF3
 22992                           intcon	equ	0xFF2
 22993                           postinc0	equ	0xFEE
 22994                           wreg	equ	0xFE8
 22995                           indf1	equ	0xFE7
 22996                           postdec1	equ	0xFE5
 22997                           fsr1h	equ	0xFE2
 22998                           fsr1l	equ	0xFE1
 22999                           indf2	equ	0xFDF
 23000                           postinc2	equ	0xFDE
 23001                           postdec2	equ	0xFDD
 23002                           plusw2	equ	0xFDB
 23003                           fsr2h	equ	0xFDA
 23004                           fsr2l	equ	0xFD9
 23005                           status	equ	0xFD8
 23006                           
 23007 ;; *************** function _Byte_SetPair *****************
 23008 ;; Defined at:
 23009 ;;		line 83 in file "Library/Types.c"
 23010 ;; Parameters:    Size  Location     Type
 23011 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23012 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23013 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23014 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 23015 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 23016 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 23017 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 23018 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 23019 ;;		 -> NULL(0), 
 23020 ;;  pPair           1   13[BANK0 ] unsigned char 
 23021 ;;  pValue          1   14[BANK0 ] unsigned char 
 23022 ;; Auto vars:     Size  Location     Type
 23023 ;;		None
 23024 ;; Return value:  Size  Location     Type
 23025 ;;                  1    wreg      void 
 23026 ;; Registers used:
 23027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23028 ;; Tracked objects:
 23029 ;;		On entry : 0/0
 23030 ;;		On exit  : 0/0
 23031 ;;		Unchanged: 0/0
 23032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23033 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23036 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23037 ;;Total ram usage:        4 bytes
 23038 ;; Hardware stack levels used:    1
 23039 ;; Hardware stack levels required when called:    8
 23040 ;; This function calls:
 23041 ;;		_Byte_SetZone
 23042 ;; This function is called by:
 23043 ;;		_Word_SetPair
 23044 ;;		_Port_SetPairType
 23045 ;;		_Port_SetPair
 23046 ;; This function uses a non-reentrant model
 23047 ;;
 23048                           
 23049                           	psect	text110
 23050  01636E                     __ptext110:
 23051                           	opt stack 0
 23052  01636E                     _Byte_SetPair:
 23053                           	opt stack 18
 23054                           
 23055                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 23056                           
 23057                           ;incstack = 0
 23058  01636E  C0C5  F0BA         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 23059  016372  C0C6  F0BB         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 23060  016376  0E04               	movlw	4
 23061  016378  0100               	movlb	0	; () banked
 23062  01637A  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23063  01637C  C0C7  F0BD         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 23064  016380  0E02               	movlw	2
 23065  016382  0100               	movlb	0	; () banked
 23066  016384  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23067  016386  C0C8  F0BF         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 23068  01638A  EC05  F0A2         	call	_Byte_SetZone	;wreg free
 23069  01638E  0012               	return		;funcret
 23070  016390                     __end_of_Byte_SetPair:
 23071                           	opt stack 0
 23072                           tosu	equ	0xFFF
 23073                           tosh	equ	0xFFE
 23074                           tosl	equ	0xFFD
 23075                           pclath	equ	0xFFA
 23076                           tblptru	equ	0xFF8
 23077                           tblptrh	equ	0xFF7
 23078                           tblptrl	equ	0xFF6
 23079                           tablat	equ	0xFF5
 23080                           prodh	equ	0xFF4
 23081                           prodl	equ	0xFF3
 23082                           intcon	equ	0xFF2
 23083                           postinc0	equ	0xFEE
 23084                           wreg	equ	0xFE8
 23085                           indf1	equ	0xFE7
 23086                           postdec1	equ	0xFE5
 23087                           fsr1h	equ	0xFE2
 23088                           fsr1l	equ	0xFE1
 23089                           indf2	equ	0xFDF
 23090                           postinc2	equ	0xFDE
 23091                           postdec2	equ	0xFDD
 23092                           plusw2	equ	0xFDB
 23093                           fsr2h	equ	0xFDA
 23094                           fsr2l	equ	0xFD9
 23095                           status	equ	0xFD8
 23096                           
 23097 ;; *************** function _Port_CheckQuadType *****************
 23098 ;; Defined at:
 23099 ;;		line 126 in file "Library/Port.c"
 23100 ;; Parameters:    Size  Location     Type
 23101 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 23102 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23103 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23104 ;;  pQuad           1   49[BANK0 ] enum E6776
 23105 ;;  pDrive          1   50[BANK0 ] enum E6469
 23106 ;; Auto vars:     Size  Location     Type
 23107 ;;  Output          1   53[BANK0 ] enum E6475
 23108 ;;  Pair2           1   52[BANK0 ] enum E6760
 23109 ;;  Pair1           1   51[BANK0 ] enum E6760
 23110 ;; Return value:  Size  Location     Type
 23111 ;;                  1    wreg      enum E6475
 23112 ;; Registers used:
 23113 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23114 ;; Tracked objects:
 23115 ;;		On entry : 0/0
 23116 ;;		On exit  : 0/0
 23117 ;;		Unchanged: 0/0
 23118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23119 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23120 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23122 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23123 ;;Total ram usage:        7 bytes
 23124 ;; Hardware stack levels used:    1
 23125 ;; Hardware stack levels required when called:   12
 23126 ;; This function calls:
 23127 ;;		_Port_CheckPairType
 23128 ;; This function is called by:
 23129 ;;		_Port_CheckPortType
 23130 ;;		_Port_SetQuadType
 23131 ;; This function uses a non-reentrant model
 23132 ;;
 23133                           
 23134                           	psect	text111
 23135  0159B8                     __ptext111:
 23136                           	opt stack 0
 23137  0159B8                     _Port_CheckQuadType:
 23138                           	opt stack 14
 23139                           
 23140                           ;Port.c: 128: ePinError Output = ePinErrorState;
 23141                           
 23142                           ;incstack = 0
 23143  0159B8  0E05               	movlw	5
 23144  0159BA  0100               	movlb	0	; () banked
 23145  0159BC  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23146                           
 23147                           ; BSR set to: 0
 23148                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 23149  0159BE  0100               	movlb	0	; () banked
 23150  0159C0  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23151  0159C2  0D02               	mullw	2
 23152  0159C4  CFF3 F0ED          	movff	prodl,Port_CheckQuadType@Pair1
 23153                           
 23154                           ; BSR set to: 0
 23155                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 23156  0159C8  0100               	movlb	0	; () banked
 23157  0159CA  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23158  0159CC  0D02               	mullw	2
 23159  0159CE  28F3               	incf	prodl,w,c
 23160  0159D0  0100               	movlb	0	; () banked
 23161  0159D2  6FEE               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 23162                           
 23163                           ; BSR set to: 0
 23164                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 23165  0159D4  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23166  0159D8  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23167  0159DC  C0ED  F0E2         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 23168  0159E0  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23169  0159E4  EC4D  F0AB         	call	_Port_CheckPairType	;wreg free
 23170  0159E8  0100               	movlb	0	; () banked
 23171  0159EA  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23172  0159EC  0100               	movlb	0	; () banked
 23173  0159EE  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23174  0159F0  A4D8               	btfss	status,2,c
 23175  0159F2  D00C               	goto	l393
 23176                           
 23177                           ; BSR set to: 0
 23178                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 23179  0159F4  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23180  0159F8  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23181  0159FC  C0EE  F0E2         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 23182  015A00  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23183  015A04  EC4D  F0AB         	call	_Port_CheckPairType	;wreg free
 23184  015A08  0100               	movlb	0	; () banked
 23185  015A0A  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23186  015A0C                     l393:
 23187                           
 23188                           ; BSR set to: 0
 23189                           ;Port.c: 136: return Output;
 23190                           
 23191                           ; BSR set to: 0
 23192  015A0C  0100               	movlb	0	; () banked
 23193  015A0E  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23194  015A10  0012               	return	
 23195  015A12                     __end_of_Port_CheckQuadType:
 23196                           	opt stack 0
 23197                           tosu	equ	0xFFF
 23198                           tosh	equ	0xFFE
 23199                           tosl	equ	0xFFD
 23200                           pclath	equ	0xFFA
 23201                           tblptru	equ	0xFF8
 23202                           tblptrh	equ	0xFF7
 23203                           tblptrl	equ	0xFF6
 23204                           tablat	equ	0xFF5
 23205                           prodh	equ	0xFF4
 23206                           prodl	equ	0xFF3
 23207                           intcon	equ	0xFF2
 23208                           postinc0	equ	0xFEE
 23209                           wreg	equ	0xFE8
 23210                           indf1	equ	0xFE7
 23211                           postdec1	equ	0xFE5
 23212                           fsr1h	equ	0xFE2
 23213                           fsr1l	equ	0xFE1
 23214                           indf2	equ	0xFDF
 23215                           postinc2	equ	0xFDE
 23216                           postdec2	equ	0xFDD
 23217                           plusw2	equ	0xFDB
 23218                           fsr2h	equ	0xFDA
 23219                           fsr2l	equ	0xFD9
 23220                           status	equ	0xFD8
 23221                           
 23222 ;; *************** function _Port_CheckPairType *****************
 23223 ;; Defined at:
 23224 ;;		line 112 in file "Library/Port.c"
 23225 ;; Parameters:    Size  Location     Type
 23226 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23227 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23228 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23229 ;;  pPair           1   40[BANK0 ] enum E6760
 23230 ;;  pDrive          1   41[BANK0 ] enum E6469
 23231 ;; Auto vars:     Size  Location     Type
 23232 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 23233 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23234 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23235 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23236 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23237 ;;  Output          1   44[BANK0 ] enum E6475
 23238 ;;  Pin2            1   43[BANK0 ] enum E6750
 23239 ;;  Pin1            1   42[BANK0 ] enum E6750
 23240 ;; Return value:  Size  Location     Type
 23241 ;;                  1    wreg      enum E6475
 23242 ;; Registers used:
 23243 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23244 ;; Tracked objects:
 23245 ;;		On entry : 0/0
 23246 ;;		On exit  : 0/0
 23247 ;;		Unchanged: 0/0
 23248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23249 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23250 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23252 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23253 ;;Total ram usage:        9 bytes
 23254 ;; Hardware stack levels used:    1
 23255 ;; Hardware stack levels required when called:   11
 23256 ;; This function calls:
 23257 ;;		_PortProperty_Valid
 23258 ;; This function is called by:
 23259 ;;		_Port_CheckQuadType
 23260 ;;		_Port_SetPairType
 23261 ;; This function uses a non-reentrant model
 23262 ;;
 23263                           
 23264                           	psect	text112
 23265  01569A                     __ptext112:
 23266                           	opt stack 0
 23267  01569A                     _Port_CheckPairType:
 23268                           	opt stack 14
 23269                           
 23270                           ;Port.c: 114: ePinError Output = ePinErrorState;
 23271                           
 23272                           ; BSR set to: 0
 23273                           ;incstack = 0
 23274  01569A  0E05               	movlw	5
 23275  01569C  0100               	movlb	0	; () banked
 23276  01569E  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23277                           
 23278                           ; BSR set to: 0
 23279                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 23280  0156A0  C0E0  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 23281  0156A4  C0E1  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 23282  0156A8  CFDE F0E7          	movff	postinc2,Port_CheckPairType@Props
 23283  0156AC  CFDD F0E8          	movff	postdec2,Port_CheckPairType@Props+1
 23284                           
 23285                           ; BSR set to: 0
 23286                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 23287  0156B0  0100               	movlb	0	; () banked
 23288  0156B2  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23289  0156B4  0D02               	mullw	2
 23290  0156B6  CFF3 F0E4          	movff	prodl,Port_CheckPairType@Pin1
 23291                           
 23292                           ; BSR set to: 0
 23293                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 23294  0156BA  0100               	movlb	0	; () banked
 23295  0156BC  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23296  0156BE  0D02               	mullw	2
 23297  0156C0  28F3               	incf	prodl,w,c
 23298  0156C2  0100               	movlb	0	; () banked
 23299  0156C4  6FE5               	movwf	Port_CheckPairType@Pin2& (0+255),b
 23300                           
 23301                           ; BSR set to: 0
 23302                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 23303  0156C6  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23304  0156CA  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23305  0156CE  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23306  0156D2  C0E4  F0CC         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 23307  0156D6  EC65  F0A8         	call	_PortProperty_Valid	;wreg free
 23308  0156DA  0100               	movlb	0	; () banked
 23309  0156DC  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23310  0156DE  0100               	movlb	0	; () banked
 23311  0156E0  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23312  0156E2  A4D8               	btfss	status,2,c
 23313  0156E4  D00C               	goto	l389
 23314                           
 23315                           ; BSR set to: 0
 23316                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 23317  0156E6  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23318  0156EA  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23319  0156EE  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23320  0156F2  C0E5  F0CC         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 23321  0156F6  EC65  F0A8         	call	_PortProperty_Valid	;wreg free
 23322  0156FA  0100               	movlb	0	; () banked
 23323  0156FC  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23324  0156FE                     l389:
 23325                           
 23326                           ; BSR set to: 0
 23327                           ;Port.c: 124: return Output;
 23328                           
 23329                           ; BSR set to: 0
 23330  0156FE  0100               	movlb	0	; () banked
 23331  015700  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23332  015702  0012               	return	
 23333  015704                     __end_of_Port_CheckPairType:
 23334                           	opt stack 0
 23335                           tosu	equ	0xFFF
 23336                           tosh	equ	0xFFE
 23337                           tosl	equ	0xFFD
 23338                           pclath	equ	0xFFA
 23339                           tblptru	equ	0xFF8
 23340                           tblptrh	equ	0xFF7
 23341                           tblptrl	equ	0xFF6
 23342                           tablat	equ	0xFF5
 23343                           prodh	equ	0xFF4
 23344                           prodl	equ	0xFF3
 23345                           intcon	equ	0xFF2
 23346                           postinc0	equ	0xFEE
 23347                           wreg	equ	0xFE8
 23348                           indf1	equ	0xFE7
 23349                           postdec1	equ	0xFE5
 23350                           fsr1h	equ	0xFE2
 23351                           fsr1l	equ	0xFE1
 23352                           indf2	equ	0xFDF
 23353                           postinc2	equ	0xFDE
 23354                           postdec2	equ	0xFDD
 23355                           plusw2	equ	0xFDB
 23356                           fsr2h	equ	0xFDA
 23357                           fsr2l	equ	0xFD9
 23358                           status	equ	0xFD8
 23359                           
 23360 ;; *************** function _PortProperty_Valid *****************
 23361 ;; Defined at:
 23362 ;;		line 220 in file "Library/Types.c"
 23363 ;; Parameters:    Size  Location     Type
 23364 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 23365 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23366 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23367 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23368 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23369 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 23370 ;;  pPin            1   18[BANK0 ] unsigned char 
 23371 ;; Auto vars:     Size  Location     Type
 23372 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 23373 ;;  Pair            1   37[BANK0 ] enum E6469
 23374 ;; Return value:  Size  Location     Type
 23375 ;;                  1    wreg      enum E6475
 23376 ;; Registers used:
 23377 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23378 ;; Tracked objects:
 23379 ;;		On entry : 0/0
 23380 ;;		On exit  : 0/0
 23381 ;;		Unchanged: 0/0
 23382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23383 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23384 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23386 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23387 ;;Total ram usage:       23 bytes
 23388 ;; Hardware stack levels used:    1
 23389 ;; Hardware stack levels required when called:   10
 23390 ;; This function calls:
 23391 ;;		_Word_GetPair
 23392 ;; This function is called by:
 23393 ;;		_Port_CheckPairType
 23394 ;;		_Port_SetPinType
 23395 ;; This function uses a non-reentrant model
 23396 ;;
 23397                           
 23398                           	psect	text113
 23399  0150CA                     __ptext113:
 23400                           	opt stack 0
 23401  0150CA                     _PortProperty_Valid:
 23402                           	opt stack 17
 23403                           
 23404                           ;Types.c: 222: ePinDrive Pair;
 23405                           ;Types.c: 223: const ePinError Errors[4][4] =
 23406                           ;Types.c: 224: {
 23407                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 23408                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 23409                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 23410                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 23411                           ;Types.c: 230: };
 23412                           
 23413                           ; BSR set to: 0
 23414                           ;incstack = 0
 23415  0150CA  0EF5               	movlw	low PortProperty_Valid@F6830
 23416  0150CC  6EF6               	movwf	tblptrl,c
 23417  0150CE                     	if	1	;There is more than 1 active tblptr byte
 23418  0150CE  0EFC               	movlw	high PortProperty_Valid@F6830
 23419  0150D0  6EF7               	movwf	tblptrh,c
 23420  0150D2                     	endif
 23421  0150D2                     	if	1	;There are 3 active tblptr bytes
 23422  0150D2  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 23423  0150D4  6EF8               	movwf	tblptru,c
 23424  0150D6                     	endif
 23425  0150D6  EE20  F0CF         	lfsr	2,PortProperty_Valid@Errors
 23426  0150DA  0E0F               	movlw	15
 23427  0150DC                     u8820:
 23428  0150DC  0009               	tblrd		*+
 23429  0150DE  CFF5 FFDE          	movff	tablat,postinc2
 23430  0150E2  06E8               	decf	wreg,f,c
 23431  0150E4  E2FB               	bc	u8820
 23432                           
 23433                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23434  0150E6  C0C9  F0C6         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23435  0150EA  C0CA  F0C7         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23436  0150EE  C0CC  F0C8         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23437  0150F2  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 23438  0150F6  0100               	movlb	0	; () banked
 23439  0150F8  6FDF               	movwf	PortProperty_Valid@Pair& (0+255),b
 23440                           
 23441                           ; BSR set to: 0
 23442                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23443  0150FA  0E04               	movlw	4
 23444  0150FC  0100               	movlb	0	; () banked
 23445  0150FE  61CB               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23446  015100  D020               	goto	l819
 23447                           
 23448                           ; BSR set to: 0
 23449  015102  0E04               	movlw	4
 23450  015104  0100               	movlb	0	; () banked
 23451  015106  61DF               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23452  015108  D01C               	goto	l819
 23453                           
 23454                           ; BSR set to: 0
 23455                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23456  01510A  0100               	movlb	0	; () banked
 23457  01510C  51CB               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23458  01510E  0D04               	mullw	4
 23459  015110  0ECF               	movlw	low PortProperty_Valid@Errors
 23460  015112  0100               	movlb	0	; () banked
 23461  015114  6FCD               	movwf	??_PortProperty_Valid& (0+255),b
 23462  015116  0E00               	movlw	high PortProperty_Valid@Errors
 23463  015118  0100               	movlb	0	; () banked
 23464  01511A  6FCE               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23465  01511C  50F3               	movf	prodl,w,c
 23466  01511E  0100               	movlb	0	; () banked
 23467  015120  27CD               	addwf	??_PortProperty_Valid& (0+255),f,b
 23468  015122  50F4               	movf	prodh,w,c
 23469  015124  0100               	movlb	0	; () banked
 23470  015126  23CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23471  015128  0100               	movlb	0	; () banked
 23472  01512A  51DF               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23473  01512C  0D01               	mullw	1
 23474  01512E  50F3               	movf	prodl,w,c
 23475  015130  0100               	movlb	0	; () banked
 23476  015132  25CD               	addwf	??_PortProperty_Valid& (0+255),w,b
 23477  015134  6ED9               	movwf	fsr2l,c
 23478  015136  50F4               	movf	prodh,w,c
 23479  015138  0100               	movlb	0	; () banked
 23480  01513A  21CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23481  01513C  6EDA               	movwf	fsr2h,c
 23482  01513E  50DF               	movf	indf2,w,c
 23483                           
 23484                           ; BSR set to: 0
 23485  015140  0012               	return	
 23486  015142                     l819:
 23487                           
 23488                           ; BSR set to: 0
 23489                           ;Types.c: 237: return ePinErrorState;
 23490                           
 23491                           ; BSR set to: 0
 23492  015142  0E05               	movlw	5
 23493  015144  0012               	return	
 23494  015146                     __end_of_PortProperty_Valid:
 23495                           	opt stack 0
 23496                           tosu	equ	0xFFF
 23497                           tosh	equ	0xFFE
 23498                           tosl	equ	0xFFD
 23499                           pclath	equ	0xFFA
 23500                           tblptru	equ	0xFF8
 23501                           tblptrh	equ	0xFF7
 23502                           tblptrl	equ	0xFF6
 23503                           tablat	equ	0xFF5
 23504                           prodh	equ	0xFF4
 23505                           prodl	equ	0xFF3
 23506                           intcon	equ	0xFF2
 23507                           postinc0	equ	0xFEE
 23508                           wreg	equ	0xFE8
 23509                           indf1	equ	0xFE7
 23510                           postdec1	equ	0xFE5
 23511                           fsr1h	equ	0xFE2
 23512                           fsr1l	equ	0xFE1
 23513                           indf2	equ	0xFDF
 23514                           postinc2	equ	0xFDE
 23515                           postdec2	equ	0xFDD
 23516                           plusw2	equ	0xFDB
 23517                           fsr2h	equ	0xFDA
 23518                           fsr2l	equ	0xFD9
 23519                           status	equ	0xFD8
 23520                           
 23521 ;; *************** function _Byte_SetQuad *****************
 23522 ;; Defined at:
 23523 ;;		line 101 in file "Library/Types.c"
 23524 ;; Parameters:    Size  Location     Type
 23525 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23526 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23527 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23528 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23529 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23530 ;;		 -> NULL(0), 
 23531 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23532 ;;  pValue          1   14[BANK0 ] unsigned char 
 23533 ;; Auto vars:     Size  Location     Type
 23534 ;;		None
 23535 ;; Return value:  Size  Location     Type
 23536 ;;                  1    wreg      void 
 23537 ;; Registers used:
 23538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23539 ;; Tracked objects:
 23540 ;;		On entry : 0/0
 23541 ;;		On exit  : 0/0
 23542 ;;		Unchanged: 0/0
 23543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23544 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23547 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23548 ;;Total ram usage:        4 bytes
 23549 ;; Hardware stack levels used:    1
 23550 ;; Hardware stack levels required when called:    8
 23551 ;; This function calls:
 23552 ;;		_Byte_SetZone
 23553 ;; This function is called by:
 23554 ;;		_Port_SetQuadType
 23555 ;;		_SPI_Init
 23556 ;;		_SPI_MinSpeed
 23557 ;;		_SPI_MaxSpeed
 23558 ;;		_Port_SetQuad
 23559 ;;		_Word_SetQuad
 23560 ;;		_I2C_Init
 23561 ;; This function uses a non-reentrant model
 23562 ;;
 23563                           
 23564                           	psect	text114
 23565  016390                     __ptext114:
 23566                           	opt stack 0
 23567  016390                     _Byte_SetQuad:
 23568                           	opt stack 19
 23569                           
 23570                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23571                           
 23572                           ; BSR set to: 0
 23573                           ;incstack = 0
 23574  016390  C0C5  F0BA         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23575  016394  C0C6  F0BB         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23576  016398  0E02               	movlw	2
 23577  01639A  0100               	movlb	0	; () banked
 23578  01639C  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23579  01639E  C0C7  F0BD         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23580  0163A2  0E04               	movlw	4
 23581  0163A4  0100               	movlb	0	; () banked
 23582  0163A6  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23583  0163A8  C0C8  F0BF         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23584  0163AC  EC05  F0A2         	call	_Byte_SetZone	;wreg free
 23585  0163B0  0012               	return		;funcret
 23586  0163B2                     __end_of_Byte_SetQuad:
 23587                           	opt stack 0
 23588                           tosu	equ	0xFFF
 23589                           tosh	equ	0xFFE
 23590                           tosl	equ	0xFFD
 23591                           pclath	equ	0xFFA
 23592                           tblptru	equ	0xFF8
 23593                           tblptrh	equ	0xFF7
 23594                           tblptrl	equ	0xFF6
 23595                           tablat	equ	0xFF5
 23596                           prodh	equ	0xFF4
 23597                           prodl	equ	0xFF3
 23598                           intcon	equ	0xFF2
 23599                           postinc0	equ	0xFEE
 23600                           wreg	equ	0xFE8
 23601                           indf1	equ	0xFE7
 23602                           postdec1	equ	0xFE5
 23603                           fsr1h	equ	0xFE2
 23604                           fsr1l	equ	0xFE1
 23605                           indf2	equ	0xFDF
 23606                           postinc2	equ	0xFDE
 23607                           postdec2	equ	0xFDD
 23608                           plusw2	equ	0xFDB
 23609                           fsr2h	equ	0xFDA
 23610                           fsr2l	equ	0xFD9
 23611                           status	equ	0xFD8
 23612                           
 23613 ;; *************** function _Byte_SetZone *****************
 23614 ;; Defined at:
 23615 ;;		line 47 in file "Library/Types.c"
 23616 ;; Parameters:    Size  Location     Type
 23617 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23618 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23619 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23620 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23621 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23622 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23623 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23624 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23625 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23626 ;;  pMax            1    2[BANK0 ] unsigned char 
 23627 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23628 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23629 ;;  pValue          1    5[BANK0 ] unsigned char 
 23630 ;; Auto vars:     Size  Location     Type
 23631 ;;  MASK            1   10[BANK0 ] unsigned char 
 23632 ;;  Offset          1    9[BANK0 ] unsigned char 
 23633 ;; Return value:  Size  Location     Type
 23634 ;;                  1    wreg      void 
 23635 ;; Registers used:
 23636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23637 ;; Tracked objects:
 23638 ;;		On entry : 0/0
 23639 ;;		On exit  : 0/0
 23640 ;;		Unchanged: 0/0
 23641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23642 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23644 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23645 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23646 ;;Total ram usage:       11 bytes
 23647 ;; Hardware stack levels used:    1
 23648 ;; Hardware stack levels required when called:    7
 23649 ;; This function calls:
 23650 ;;		Nothing
 23651 ;; This function is called by:
 23652 ;;		_Byte_SetPair
 23653 ;;		_Byte_SetQuad
 23654 ;;		_Byte_SetTriple
 23655 ;; This function uses a non-reentrant model
 23656 ;;
 23657                           
 23658                           	psect	text115
 23659  01440A                     __ptext115:
 23660                           	opt stack 0
 23661  01440A                     _Byte_SetZone:
 23662                           	opt stack 18
 23663                           
 23664                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23665                           
 23666                           ;incstack = 0
 23667  01440A  0100               	movlb	0	; () banked
 23668  01440C  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23669  01440E  0D01               	mullw	1
 23670  014410  0E0F               	movlw	low _MASKS
 23671  014412  24F3               	addwf	prodl,w,c
 23672  014414  6EF6               	movwf	tblptrl,c
 23673  014416  0EFD               	movlw	high _MASKS
 23674  014418  20F4               	addwfc	prodh,w,c
 23675  01441A  6EF7               	movwf	tblptrh,c
 23676  01441C                     	if	1	;There are 3 active tblptr bytes
 23677  01441C  6AF8               	clrf	tblptru,c
 23678  01441E  0E00               	movlw	low (__mediumconst shr (0+16))
 23679  014420  22F8               	addwfc	tblptru,f,c
 23680  014422                     	endif
 23681  014422  0008               	tblrd		*
 23682  014424  CFF5 F0C4          	movff	tablat,Byte_SetZone@MASK
 23683                           
 23684                           ; BSR set to: 0
 23685                           ;Types.c: 50: UINT8 Offset = 0;
 23686  014428  0E00               	movlw	0
 23687  01442A  0100               	movlb	0	; () banked
 23688  01442C  6FC3               	movwf	Byte_SetZone@Offset& (0+255),b
 23689                           
 23690                           ;Types.c: 52: while (pChunk >= pMax)
 23691  01442E  D006               	goto	l726
 23692  014430                     
 23693                           ; BSR set to: 0
 23694                           ;Types.c: 53: {
 23695                           ;Types.c: 54: pChunk -= pMax;
 23696                           
 23697                           ; BSR set to: 0
 23698  014430  0100               	movlb	0	; () banked
 23699  014432  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23700  014434  0100               	movlb	0	; () banked
 23701  014436  5FBD               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23702                           
 23703                           ; BSR set to: 0
 23704                           ;Types.c: 55: Offset += 1;
 23705  014438  0100               	movlb	0	; () banked
 23706  01443A  2BC3               	incf	Byte_SetZone@Offset& (0+255),f,b
 23707  01443C                     l726:
 23708                           
 23709                           ; BSR set to: 0
 23710                           
 23711                           ; BSR set to: 0
 23712  01443C  0100               	movlb	0	; () banked
 23713  01443E  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23714  014440  0100               	movlb	0	; () banked
 23715  014442  5DBD               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23716  014444  B0D8               	btfsc	status,0,c
 23717  014446  D7F4               	goto	l727
 23718                           
 23719                           ; BSR set to: 0
 23720                           ;Types.c: 56: }
 23721                           ;Types.c: 57: pChunk *= pChunkSize;
 23722                           
 23723                           ; BSR set to: 0
 23724  014448  0100               	movlb	0	; () banked
 23725  01444A  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23726  01444C  0100               	movlb	0	; () banked
 23727  01444E  03BD               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23728  014450  50F3               	movf	prodl,w,c
 23729  014452  6FBD               	movwf	Byte_SetZone@pChunk& (0+255),b
 23730                           
 23731                           ; BSR set to: 0
 23732                           ;Types.c: 58: pChunk += Offset;
 23733  014454  0100               	movlb	0	; () banked
 23734  014456  51C3               	movf	Byte_SetZone@Offset& (0+255),w,b
 23735  014458  0100               	movlb	0	; () banked
 23736  01445A  27BD               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23737                           
 23738                           ; BSR set to: 0
 23739                           ;Types.c: 60: pValue &= MASK;
 23740  01445C  0100               	movlb	0	; () banked
 23741  01445E  51C4               	movf	Byte_SetZone@MASK& (0+255),w,b
 23742  014460  0100               	movlb	0	; () banked
 23743  014462  17BF               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23744                           
 23745                           ; BSR set to: 0
 23746                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23747  014464  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23748  014468  C0C4  F0C1         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23749  01446C  0100               	movlb	0	; () banked
 23750  01446E  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23751  014470  D003               	goto	u8874
 23752  014472                     u8875:
 23753  014472  0100               	movlb	0	; () banked
 23754  014474  90D8               	bcf	status,0,c
 23755  014476  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23756  014478                     u8874:
 23757  014478  0100               	movlb	0	; () banked
 23758  01447A  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23759  01447C  D7FA               	goto	u8875
 23760  01447E  0100               	movlb	0	; () banked
 23761  014480  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23762  014482  0AFF               	xorlw	255
 23763  014484  0100               	movlb	0	; () banked
 23764  014486  6FC2               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23765  014488  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23766  01448C  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23767  014490  0100               	movlb	0	; () banked
 23768  014492  51C2               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23769  014494  16DF               	andwf	indf2,f,c
 23770                           
 23771                           ; BSR set to: 0
 23772                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23773  014496  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23774  01449A  C0BF  F0C1         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23775  01449E  0100               	movlb	0	; () banked
 23776  0144A0  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23777  0144A2  D003               	goto	u8884
 23778  0144A4                     u8885:
 23779  0144A4  0100               	movlb	0	; () banked
 23780  0144A6  90D8               	bcf	status,0,c
 23781  0144A8  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23782  0144AA                     u8884:
 23783  0144AA  0100               	movlb	0	; () banked
 23784  0144AC  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23785  0144AE  D7FA               	goto	u8885
 23786  0144B0  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23787  0144B4  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23788  0144B8  0100               	movlb	0	; () banked
 23789  0144BA  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23790  0144BC  12DF               	iorwf	indf2,f,c
 23791                           
 23792                           ; BSR set to: 0
 23793  0144BE  0012               	return		;funcret
 23794  0144C0                     __end_of_Byte_SetZone:
 23795                           	opt stack 0
 23796                           tosu	equ	0xFFF
 23797                           tosh	equ	0xFFE
 23798                           tosl	equ	0xFFD
 23799                           pclath	equ	0xFFA
 23800                           tblptru	equ	0xFF8
 23801                           tblptrh	equ	0xFF7
 23802                           tblptrl	equ	0xFF6
 23803                           tablat	equ	0xFF5
 23804                           prodh	equ	0xFF4
 23805                           prodl	equ	0xFF3
 23806                           intcon	equ	0xFF2
 23807                           postinc0	equ	0xFEE
 23808                           wreg	equ	0xFE8
 23809                           indf1	equ	0xFE7
 23810                           postdec1	equ	0xFE5
 23811                           fsr1h	equ	0xFE2
 23812                           fsr1l	equ	0xFE1
 23813                           indf2	equ	0xFDF
 23814                           postinc2	equ	0xFDE
 23815                           postdec2	equ	0xFDD
 23816                           plusw2	equ	0xFDB
 23817                           fsr2h	equ	0xFDA
 23818                           fsr2l	equ	0xFD9
 23819                           status	equ	0xFD8
 23820                           
 23821 ;; *************** function _Console_Init *****************
 23822 ;; Defined at:
 23823 ;;		line 157 in file "Library/Console.c"
 23824 ;; Parameters:    Size  Location     Type
 23825 ;;		None
 23826 ;; Auto vars:     Size  Location     Type
 23827 ;;  y               1    3[BANK0 ] unsigned char 
 23828 ;;  x               1    2[BANK0 ] unsigned char 
 23829 ;; Return value:  Size  Location     Type
 23830 ;;                  1    wreg      void 
 23831 ;; Registers used:
 23832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23833 ;; Tracked objects:
 23834 ;;		On entry : 0/0
 23835 ;;		On exit  : 0/0
 23836 ;;		Unchanged: 0/0
 23837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23841 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23842 ;;Total ram usage:        4 bytes
 23843 ;; Hardware stack levels used:    1
 23844 ;; Hardware stack levels required when called:    7
 23845 ;; This function calls:
 23846 ;;		Nothing
 23847 ;; This function is called by:
 23848 ;;		_init
 23849 ;; This function uses a non-reentrant model
 23850 ;;
 23851                           
 23852                           	psect	text116
 23853  014E2E                     __ptext116:
 23854                           	opt stack 0
 23855  014E2E                     _Console_Init:
 23856                           	opt stack 22
 23857                           
 23858                           ;Console.c: 160: lBufferX = 0;
 23859                           
 23860                           ; BSR set to: 0
 23861                           ;incstack = 0
 23862  014E2E  0E00               	movlw	0
 23863  014E30  0100               	movlb	0	; () banked
 23864  014E32  6F8F               	movwf	_lBufferX& (0+255),b
 23865                           
 23866                           ;Console.c: 161: lBufferY = 0;
 23867  014E34  0E00               	movlw	0
 23868  014E36  0100               	movlb	0	; () banked
 23869  014E38  6F8E               	movwf	_lBufferY& (0+255),b
 23870                           
 23871                           ;Console.c: 163: UINT8 x, y;
 23872                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23873  014E3A  0E00               	movlw	0
 23874  014E3C  0100               	movlb	0	; () banked
 23875  014E3E  6FBC               	movwf	Console_Init@x& (0+255),b
 23876  014E40                     l14359:
 23877                           
 23878                           ; BSR set to: 0
 23879  014E40  0E13               	movlw	19
 23880  014E42  0100               	movlb	0	; () banked
 23881  014E44  65BC               	cpfsgt	Console_Init@x& (0+255),b
 23882  014E46  D001               	goto	l976
 23883  014E48  0012               	return	
 23884  014E4A                     l976:
 23885                           
 23886                           ; BSR set to: 0
 23887                           ;Console.c: 165: {
 23888                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23889                           
 23890                           ; BSR set to: 0
 23891  014E4A  0E00               	movlw	0
 23892  014E4C  0100               	movlb	0	; () banked
 23893  014E4E  6FBD               	movwf	Console_Init@y& (0+255),b
 23894  014E50                     l14365:
 23895                           
 23896                           ; BSR set to: 0
 23897  014E50  0E0E               	movlw	14
 23898  014E52  0100               	movlb	0	; () banked
 23899  014E54  65BD               	cpfsgt	Console_Init@y& (0+255),b
 23900  014E56  D001               	goto	l978
 23901  014E58  D02C               	goto	u11280
 23902  014E5A                     l978:
 23903                           
 23904                           ; BSR set to: 0
 23905                           ;Console.c: 167: {
 23906                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23907                           
 23908                           ; BSR set to: 0
 23909  014E5A  0100               	movlb	0	; () banked
 23910  014E5C  51BD               	movf	Console_Init@y& (0+255),w,b
 23911  014E5E  0D14               	mullw	20
 23912  014E60  0EAA               	movlw	low _lBuffer
 23913  014E62  0100               	movlb	0	; () banked
 23914  014E64  6FBA               	movwf	??_Console_Init& (0+255),b
 23915  014E66  0E04               	movlw	high _lBuffer
 23916  014E68  0100               	movlb	0	; () banked
 23917  014E6A  6FBB               	movwf	(??_Console_Init+1)& (0+255),b
 23918  014E6C  50F3               	movf	prodl,w,c
 23919  014E6E  0100               	movlb	0	; () banked
 23920  014E70  27BA               	addwf	??_Console_Init& (0+255),f,b
 23921  014E72  50F4               	movf	prodh,w,c
 23922  014E74  0100               	movlb	0	; () banked
 23923  014E76  23BB               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23924  014E78  0100               	movlb	0	; () banked
 23925  014E7A  51BC               	movf	Console_Init@x& (0+255),w,b
 23926  014E7C  0D01               	mullw	1
 23927  014E7E  50F3               	movf	prodl,w,c
 23928  014E80  0100               	movlb	0	; () banked
 23929  014E82  25BA               	addwf	??_Console_Init& (0+255),w,b
 23930  014E84  6ED9               	movwf	fsr2l,c
 23931  014E86  50F4               	movf	prodh,w,c
 23932  014E88  0100               	movlb	0	; () banked
 23933  014E8A  21BB               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23934  014E8C  6EDA               	movwf	fsr2h,c
 23935  014E8E  0E00               	movlw	0
 23936  014E90  6EDF               	movwf	indf2,c
 23937                           
 23938                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23939  014E92  0100               	movlb	0	; () banked
 23940  014E94  51BD               	movf	Console_Init@y& (0+255),w,b
 23941  014E96  0D02               	mullw	2
 23942  014E98  0E00               	movlw	low _lCBuffer
 23943  014E9A  24F3               	addwf	prodl,w,c
 23944  014E9C  6ED9               	movwf	fsr2l,c
 23945  014E9E  0E03               	movlw	high _lCBuffer
 23946  014EA0  20F4               	addwfc	prodh,w,c
 23947  014EA2  6EDA               	movwf	fsr2h,c
 23948  014EA4  0EFF               	movlw	255
 23949  014EA6  6EDE               	movwf	postinc2,c
 23950  014EA8  0EFF               	movlw	255
 23951  014EAA  6EDD               	movwf	postdec2,c
 23952                           
 23953                           ; BSR set to: 0
 23954  014EAC  0100               	movlb	0	; () banked
 23955  014EAE  2BBD               	incf	Console_Init@y& (0+255),f,b
 23956  014EB0  D7CF               	goto	l14365
 23957  014EB2                     u11280:
 23958                           
 23959                           ; BSR set to: 0
 23960                           
 23961                           ; BSR set to: 0
 23962  014EB2  0100               	movlb	0	; () banked
 23963  014EB4  2BBC               	incf	Console_Init@x& (0+255),f,b
 23964  014EB6  D7C4               	goto	l14359
 23965  014EB8                     __end_of_Console_Init:
 23966                           	opt stack 0
 23967                           tosu	equ	0xFFF
 23968                           tosh	equ	0xFFE
 23969                           tosl	equ	0xFFD
 23970                           pclath	equ	0xFFA
 23971                           tblptru	equ	0xFF8
 23972                           tblptrh	equ	0xFF7
 23973                           tblptrl	equ	0xFF6
 23974                           tablat	equ	0xFF5
 23975                           prodh	equ	0xFF4
 23976                           prodl	equ	0xFF3
 23977                           intcon	equ	0xFF2
 23978                           postinc0	equ	0xFEE
 23979                           wreg	equ	0xFE8
 23980                           indf1	equ	0xFE7
 23981                           postdec1	equ	0xFE5
 23982                           fsr1h	equ	0xFE2
 23983                           fsr1l	equ	0xFE1
 23984                           indf2	equ	0xFDF
 23985                           postinc2	equ	0xFDE
 23986                           postdec2	equ	0xFDD
 23987                           plusw2	equ	0xFDB
 23988                           fsr2h	equ	0xFDA
 23989                           fsr2l	equ	0xFD9
 23990                           status	equ	0xFD8
 23991                           
 23992 ;; *************** function _ADC_Start *****************
 23993 ;; Defined at:
 23994 ;;		line 114 in file "Library/ADC.c"
 23995 ;; Parameters:    Size  Location     Type
 23996 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 23997 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23998 ;;		 -> NULL(0), 
 23999 ;; Auto vars:     Size  Location     Type
 24000 ;;		None
 24001 ;; Return value:  Size  Location     Type
 24002 ;;                  1    wreg      void 
 24003 ;; Registers used:
 24004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24005 ;; Tracked objects:
 24006 ;;		On entry : 0/0
 24007 ;;		On exit  : 0/0
 24008 ;;		Unchanged: 0/0
 24009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24010 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24012 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24013 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24014 ;;Total ram usage:        4 bytes
 24015 ;; Hardware stack levels used:    1
 24016 ;; Hardware stack levels required when called:    8
 24017 ;; This function calls:
 24018 ;;		_ADC_Off
 24019 ;;		_ADC_On
 24020 ;;		_ADC_SetChannel
 24021 ;; This function is called by:
 24022 ;;		_init
 24023 ;;		_findClosestWall
 24024 ;;		_mode1
 24025 ;;		_FunctADC
 24026 ;; This function uses a non-reentrant model
 24027 ;;
 24028                           
 24029                           	psect	text117
 24030  014F42                     __ptext117:
 24031                           	opt stack 0
 24032  014F42                     _ADC_Start:
 24033                           	opt stack 20
 24034                           
 24035                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 24036                           
 24037                           ; BSR set to: 0
 24038                           ;incstack = 0
 24039  014F42  B2C2               	btfsc	4034,1,c	;volatile
 24040  014F44  0012               	return	
 24041  014F46                     
 24042                           ;ADC.c: 128: {
 24043                           ;ADC.c: 129: ADC_Off();
 24044                           
 24045                           ;ADC.c: 127: for(;;)
 24046  014F46  EC8B  F0B3         	call	_ADC_Off	;wreg free
 24047                           
 24048                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 24049  014F4A  C0BC  FFD9         	movff	ADC_Start@pInput,fsr2l
 24050  014F4E  C0BD  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 24051  014F52  50DF               	movf	indf2,w,c
 24052  014F54  EC7D  F0B2         	call	_ADC_SetChannel
 24053                           
 24054                           ;ADC.c: 131: ADC_On();
 24055  014F58  EC99  F0B3         	call	_ADC_On	;wreg free
 24056                           
 24057                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 24058  014F5C  82C2               	bsf	4034,1,c	;volatile
 24059  014F5E  B2C2               	btfsc	4034,1,c	;volatile
 24060  014F60  D7FE               	goto	l1280
 24061                           
 24062                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 24063  014F62  50C3               	movf	4035,w,c	;volatile
 24064  014F64  CFC4 F0BE          	movff	4036,??_ADC_Start	;volatile
 24065  014F68  0100               	movlb	0	; () banked
 24066  014F6A  6BBF               	clrf	(??_ADC_Start+1)& (0+255),b
 24067  014F6C  C0BE  F0BF         	movff	??_ADC_Start,??_ADC_Start+1
 24068  014F70  0100               	movlb	0	; () banked
 24069  014F72  6BBE               	clrf	??_ADC_Start& (0+255),b
 24070  014F74  0100               	movlb	0	; () banked
 24071  014F76  13BE               	iorwf	??_ADC_Start& (0+255),f,b
 24072  014F78  0E00               	movlw	0
 24073  014F7A  13BF               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 24074  014F7C  0100               	movlb	0	; () banked
 24075  014F7E  EE20 F001          	lfsr	2,1
 24076  014F82  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24077  014F84  26D9               	addwf	fsr2l,f,c
 24078  014F86  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24079  014F88  22DA               	addwfc	fsr2h,f,c
 24080  014F8A  C0BE  FFDE         	movff	??_ADC_Start,postinc2
 24081  014F8E  C0BF  FFDD         	movff	??_ADC_Start+1,postdec2
 24082                           
 24083                           ;ADC.c: 141: if (pInput->mNext == 0)
 24084  014F92  0100               	movlb	0	; () banked
 24085  014F94  EE20 F003          	lfsr	2,3
 24086  014F98  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24087  014F9A  26D9               	addwf	fsr2l,f,c
 24088  014F9C  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24089  014F9E  22DA               	addwfc	fsr2h,f,c
 24090  014FA0  50DE               	movf	postinc2,w,c
 24091  014FA2  10DE               	iorwf	postinc2,w,c
 24092  014FA4  B4D8               	btfsc	status,2,c
 24093  014FA6  D00C               	goto	l1283
 24094                           
 24095                           ; BSR set to: 0
 24096                           ;ADC.c: 145: pInput = pInput->mNext;
 24097                           
 24098                           ; BSR set to: 0
 24099                           
 24100                           ; BSR set to: 0
 24101                           ;ADC.c: 142: break;
 24102  014FA8  0100               	movlb	0	; () banked
 24103  014FAA  EE20 F003          	lfsr	2,3
 24104  014FAE  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24105  014FB0  26D9               	addwf	fsr2l,f,c
 24106  014FB2  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24107  014FB4  22DA               	addwfc	fsr2h,f,c
 24108  014FB6  CFDE F0BC          	movff	postinc2,ADC_Start@pInput
 24109  014FBA  CFDD F0BD          	movff	postdec2,ADC_Start@pInput+1
 24110                           
 24111                           ;ADC.c: 146: }
 24112  014FBE  D7C3               	goto	l1276
 24113  014FC0                     l1283:
 24114                           
 24115                           ; BSR set to: 0
 24116                           ;ADC.c: 147: ADC_Off();
 24117                           
 24118                           ; BSR set to: 0
 24119  014FC0  EC8B  F0B3         	call	_ADC_Off	;wreg free
 24120  014FC4  0012               	return		;funcret
 24121  014FC6                     __end_of_ADC_Start:
 24122                           	opt stack 0
 24123                           tosu	equ	0xFFF
 24124                           tosh	equ	0xFFE
 24125                           tosl	equ	0xFFD
 24126                           pclath	equ	0xFFA
 24127                           tblptru	equ	0xFF8
 24128                           tblptrh	equ	0xFF7
 24129                           tblptrl	equ	0xFF6
 24130                           tablat	equ	0xFF5
 24131                           prodh	equ	0xFF4
 24132                           prodl	equ	0xFF3
 24133                           intcon	equ	0xFF2
 24134                           postinc0	equ	0xFEE
 24135                           wreg	equ	0xFE8
 24136                           indf1	equ	0xFE7
 24137                           postdec1	equ	0xFE5
 24138                           fsr1h	equ	0xFE2
 24139                           fsr1l	equ	0xFE1
 24140                           indf2	equ	0xFDF
 24141                           postinc2	equ	0xFDE
 24142                           postdec2	equ	0xFDD
 24143                           plusw2	equ	0xFDB
 24144                           fsr2h	equ	0xFDA
 24145                           fsr2l	equ	0xFD9
 24146                           status	equ	0xFD8
 24147                           
 24148 ;; *************** function _ADC_Init *****************
 24149 ;; Defined at:
 24150 ;;		line 19 in file "Library/ADC.c"
 24151 ;; Parameters:    Size  Location     Type
 24152 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 24153 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24154 ;;  pChannel        1    6[BANK0 ] enum E6742
 24155 ;; Auto vars:     Size  Location     Type
 24156 ;;		None
 24157 ;; Return value:  Size  Location     Type
 24158 ;;                  1    wreg      void 
 24159 ;; Registers used:
 24160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24161 ;; Tracked objects:
 24162 ;;		On entry : 0/0
 24163 ;;		On exit  : 0/0
 24164 ;;		Unchanged: 0/0
 24165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24166 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24169 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24170 ;;Total ram usage:        3 bytes
 24171 ;; Hardware stack levels used:    1
 24172 ;; Hardware stack levels required when called:    9
 24173 ;; This function calls:
 24174 ;;		_ADC_Calibrate
 24175 ;;		_ADC_ClockDivision
 24176 ;;		_ADC_ConversionTime
 24177 ;;		_ADC_SetChannel
 24178 ;;		_ADC_SetupIO
 24179 ;; This function is called by:
 24180 ;;		_init
 24181 ;;		_FunctInitADC
 24182 ;; This function uses a non-reentrant model
 24183 ;;
 24184                           
 24185                           	psect	text118
 24186  015146                     __ptext118:
 24187                           	opt stack 0
 24188  015146                     _ADC_Init:
 24189                           	opt stack 20
 24190                           
 24191                           ;ADC.c: 21: if(pInput==(void*)0)
 24192                           
 24193                           ;incstack = 0
 24194  015146  0100               	movlb	0	; () banked
 24195  015148  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24196  01514A  0100               	movlb	0	; () banked
 24197  01514C  11BF               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 24198  01514E  B4D8               	btfsc	status,2,c
 24199  015150  0012               	return	
 24200                           
 24201                           ; BSR set to: 0
 24202                           ;ADC.c: 25: lCurrent = pInput;
 24203                           
 24204                           ; BSR set to: 0
 24205                           
 24206                           ; BSR set to: 0
 24207                           ;ADC.c: 22: return;
 24208  015152  C0BE  F081         	movff	ADC_Init@pInput,_lCurrent
 24209  015156  C0BF  F082         	movff	ADC_Init@pInput+1,_lCurrent+1
 24210                           
 24211                           ; BSR set to: 0
 24212                           ;ADC.c: 27: pInput->mChannel = pChannel;
 24213  01515A  C0BE  FFD9         	movff	ADC_Init@pInput,fsr2l
 24214  01515E  C0BF  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 24215  015162  C0C0  FFDF         	movff	ADC_Init@pChannel,indf2
 24216                           
 24217                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 24218  015166  0100               	movlb	0	; () banked
 24219  015168  EE20 F003          	lfsr	2,3
 24220  01516C  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24221  01516E  26D9               	addwf	fsr2l,f,c
 24222  015170  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24223  015172  22DA               	addwfc	fsr2h,f,c
 24224  015174  0E00               	movlw	0
 24225  015176  6EDE               	movwf	postinc2,c
 24226  015178  0E00               	movlw	0
 24227  01517A  6EDD               	movwf	postdec2,c
 24228                           
 24229                           ;ADC.c: 29: pInput->mValue = 0;
 24230  01517C  0100               	movlb	0	; () banked
 24231  01517E  EE20 F001          	lfsr	2,1
 24232  015182  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24233  015184  26D9               	addwf	fsr2l,f,c
 24234  015186  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24235  015188  22DA               	addwfc	fsr2h,f,c
 24236  01518A  0E00               	movlw	0
 24237  01518C  6EDE               	movwf	postinc2,c
 24238  01518E  0E00               	movlw	0
 24239  015190  6EDD               	movwf	postdec2,c
 24240                           
 24241                           ; BSR set to: 0
 24242                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 24243  015192  0100               	movlb	0	; () banked
 24244  015194  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24245  015196  EC7D  F0B2         	call	_ADC_SetChannel
 24246                           
 24247                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 24248  01519A  9EC2               	bcf	4034,7,c	;volatile
 24249                           
 24250                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 24251  01519C  9CC2               	bcf	4034,6,c	;volatile
 24252                           
 24253                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 24254  01519E  8EC1               	bsf	4033,7,c	;volatile
 24255                           
 24256                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 24257  0151A0  8CC1               	bsf	4033,6,c	;volatile
 24258                           
 24259                           ;ADC.c: 43: ADC_ConversionTime(12);
 24260  0151A2  0E0C               	movlw	12
 24261  0151A4  EC6E  F0AE         	call	_ADC_ConversionTime
 24262                           
 24263                           ;ADC.c: 47: ADC_ClockDivision(16);
 24264  0151A8  0E10               	movlw	16
 24265  0151AA  EC5C  F0A7         	call	_ADC_ClockDivision
 24266                           
 24267                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 24268  0151AE  0100               	movlb	0	; () banked
 24269  0151B0  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24270  0151B2  ECC6  F0B0         	call	_ADC_SetupIO
 24271                           
 24272                           ;ADC.c: 58: ADC_Initialised = 1;
 24273  0151B6  0E01               	movlw	1
 24274  0151B8  6E3C               	movwf	_ADC_Initialised,c
 24275                           
 24276                           ;ADC.c: 61: ADC_Calibrate();
 24277  0151BA  EC0D  F0B3         	call	_ADC_Calibrate	;wreg free
 24278  0151BE  0012               	return		;funcret
 24279  0151C0                     __end_of_ADC_Init:
 24280                           	opt stack 0
 24281                           tosu	equ	0xFFF
 24282                           tosh	equ	0xFFE
 24283                           tosl	equ	0xFFD
 24284                           pclath	equ	0xFFA
 24285                           tblptru	equ	0xFF8
 24286                           tblptrh	equ	0xFF7
 24287                           tblptrl	equ	0xFF6
 24288                           tablat	equ	0xFF5
 24289                           prodh	equ	0xFF4
 24290                           prodl	equ	0xFF3
 24291                           intcon	equ	0xFF2
 24292                           postinc0	equ	0xFEE
 24293                           wreg	equ	0xFE8
 24294                           indf1	equ	0xFE7
 24295                           postdec1	equ	0xFE5
 24296                           fsr1h	equ	0xFE2
 24297                           fsr1l	equ	0xFE1
 24298                           indf2	equ	0xFDF
 24299                           postinc2	equ	0xFDE
 24300                           postdec2	equ	0xFDD
 24301                           plusw2	equ	0xFDB
 24302                           fsr2h	equ	0xFDA
 24303                           fsr2l	equ	0xFD9
 24304                           status	equ	0xFD8
 24305                           
 24306 ;; *************** function _ADC_SetupIO *****************
 24307 ;; Defined at:
 24308 ;;		line 150 in file "Library/ADC.c"
 24309 ;; Parameters:    Size  Location     Type
 24310 ;;  pChannel        1    wreg     enum E6742
 24311 ;; Auto vars:     Size  Location     Type
 24312 ;;  pChannel        1    2[BANK0 ] enum E6742
 24313 ;;  MASK            1    3[BANK0 ] unsigned char 
 24314 ;; Return value:  Size  Location     Type
 24315 ;;                  1    wreg      void 
 24316 ;; Registers used:
 24317 ;;		wreg, status,2, status,0
 24318 ;; Tracked objects:
 24319 ;;		On entry : 0/0
 24320 ;;		On exit  : 0/0
 24321 ;;		Unchanged: 0/0
 24322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24324 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24326 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24327 ;;Total ram usage:        4 bytes
 24328 ;; Hardware stack levels used:    1
 24329 ;; Hardware stack levels required when called:    7
 24330 ;; This function calls:
 24331 ;;		Nothing
 24332 ;; This function is called by:
 24333 ;;		_ADC_Init
 24334 ;; This function uses a non-reentrant model
 24335 ;;
 24336                           
 24337                           	psect	text119
 24338  01618C                     __ptext119:
 24339                           	opt stack 0
 24340  01618C                     _ADC_SetupIO:
 24341                           	opt stack 21
 24342                           
 24343                           ;incstack = 0
 24344                           ;ADC_SetupIO@pChannel stored from wreg
 24345  01618C  0100               	movlb	0	; () banked
 24346  01618E  6FBC               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24347                           
 24348                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24349  016190  C0BC  F0BA         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24350  016194  0E01               	movlw	1
 24351  016196  0100               	movlb	0	; () banked
 24352  016198  6FBB               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24353  01619A  0100               	movlb	0	; () banked
 24354  01619C  2BBA               	incf	??_ADC_SetupIO& (0+255),f,b
 24355  01619E  D003               	goto	u10934
 24356  0161A0                     u10935:
 24357  0161A0  0100               	movlb	0	; () banked
 24358  0161A2  90D8               	bcf	status,0,c
 24359  0161A4  37BB               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24360  0161A6                     u10934:
 24361  0161A6  0100               	movlb	0	; () banked
 24362  0161A8  2FBA               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24363  0161AA  D7FA               	goto	u10935
 24364  0161AC  0100               	movlb	0	; () banked
 24365  0161AE  51BB               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24366  0161B0  0AFF               	xorlw	255
 24367  0161B2  0100               	movlb	0	; () banked
 24368  0161B4  6FBD               	movwf	ADC_SetupIO@MASK& (0+255),b
 24369                           
 24370                           ;ADC.c: 153: ANCON0 &= MASK;
 24371  0161B6  0100               	movlb	0	; () banked
 24372  0161B8  51BD               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24373  0161BA  16C1               	andwf	4033,f,c	;volatile
 24374                           
 24375                           ; BSR set to: 0
 24376  0161BC  0012               	return		;funcret
 24377  0161BE                     __end_of_ADC_SetupIO:
 24378                           	opt stack 0
 24379                           tosu	equ	0xFFF
 24380                           tosh	equ	0xFFE
 24381                           tosl	equ	0xFFD
 24382                           pclath	equ	0xFFA
 24383                           tblptru	equ	0xFF8
 24384                           tblptrh	equ	0xFF7
 24385                           tblptrl	equ	0xFF6
 24386                           tablat	equ	0xFF5
 24387                           prodh	equ	0xFF4
 24388                           prodl	equ	0xFF3
 24389                           intcon	equ	0xFF2
 24390                           postinc0	equ	0xFEE
 24391                           wreg	equ	0xFE8
 24392                           indf1	equ	0xFE7
 24393                           postdec1	equ	0xFE5
 24394                           fsr1h	equ	0xFE2
 24395                           fsr1l	equ	0xFE1
 24396                           indf2	equ	0xFDF
 24397                           postinc2	equ	0xFDE
 24398                           postdec2	equ	0xFDD
 24399                           plusw2	equ	0xFDB
 24400                           fsr2h	equ	0xFDA
 24401                           fsr2l	equ	0xFD9
 24402                           status	equ	0xFD8
 24403                           
 24404 ;; *************** function _ADC_SetChannel *****************
 24405 ;; Defined at:
 24406 ;;		line 155 in file "Library/ADC.c"
 24407 ;; Parameters:    Size  Location     Type
 24408 ;;  pChannel        1    wreg     enum E6742
 24409 ;; Auto vars:     Size  Location     Type
 24410 ;;  pChannel        1    1[BANK0 ] enum E6742
 24411 ;; Return value:  Size  Location     Type
 24412 ;;                  1    wreg      void 
 24413 ;; Registers used:
 24414 ;;		wreg, status,2, status,0
 24415 ;; Tracked objects:
 24416 ;;		On entry : 0/0
 24417 ;;		On exit  : 0/0
 24418 ;;		Unchanged: 0/0
 24419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24424 ;;Total ram usage:        2 bytes
 24425 ;; Hardware stack levels used:    1
 24426 ;; Hardware stack levels required when called:    7
 24427 ;; This function calls:
 24428 ;;		Nothing
 24429 ;; This function is called by:
 24430 ;;		_ADC_Init
 24431 ;;		_ADC_Start
 24432 ;;		_ADC_ISR
 24433 ;;		_ADC_Sample
 24434 ;; This function uses a non-reentrant model
 24435 ;;
 24436                           
 24437                           	psect	text120
 24438  0164FA                     __ptext120:
 24439                           	opt stack 0
 24440  0164FA                     _ADC_SetChannel:
 24441                           	opt stack 20
 24442                           
 24443                           ; BSR set to: 0
 24444                           ;incstack = 0
 24445                           ;ADC_SetChannel@pChannel stored from wreg
 24446  0164FA  0100               	movlb	0	; () banked
 24447  0164FC  6FBB               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24448                           
 24449                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24450  0164FE  C0BB  F0BA         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24451  016502  0100               	movlb	0	; () banked
 24452  016504  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24453  016506  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24454  016508  50C2               	movf	4034,w,c	;volatile
 24455  01650A  0100               	movlb	0	; () banked
 24456  01650C  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24457  01650E  0BC3               	andlw	-61
 24458  016510  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24459  016512  6EC2               	movwf	4034,c	;volatile
 24460                           
 24461                           ; BSR set to: 0
 24462  016514  0012               	return		;funcret
 24463  016516                     __end_of_ADC_SetChannel:
 24464                           	opt stack 0
 24465                           tosu	equ	0xFFF
 24466                           tosh	equ	0xFFE
 24467                           tosl	equ	0xFFD
 24468                           pclath	equ	0xFFA
 24469                           tblptru	equ	0xFF8
 24470                           tblptrh	equ	0xFF7
 24471                           tblptrl	equ	0xFF6
 24472                           tablat	equ	0xFF5
 24473                           prodh	equ	0xFF4
 24474                           prodl	equ	0xFF3
 24475                           intcon	equ	0xFF2
 24476                           postinc0	equ	0xFEE
 24477                           wreg	equ	0xFE8
 24478                           indf1	equ	0xFE7
 24479                           postdec1	equ	0xFE5
 24480                           fsr1h	equ	0xFE2
 24481                           fsr1l	equ	0xFE1
 24482                           indf2	equ	0xFDF
 24483                           postinc2	equ	0xFDE
 24484                           postdec2	equ	0xFDD
 24485                           plusw2	equ	0xFDB
 24486                           fsr2h	equ	0xFDA
 24487                           fsr2l	equ	0xFD9
 24488                           status	equ	0xFD8
 24489                           
 24490 ;; *************** function _ADC_ConversionTime *****************
 24491 ;; Defined at:
 24492 ;;		line 199 in file "Library/ADC.c"
 24493 ;; Parameters:    Size  Location     Type
 24494 ;;  pCount          1    wreg     unsigned char 
 24495 ;; Auto vars:     Size  Location     Type
 24496 ;;  pCount          1    1[BANK0 ] unsigned char 
 24497 ;; Return value:  Size  Location     Type
 24498 ;;                  1    wreg      void 
 24499 ;; Registers used:
 24500 ;;		wreg, status,2, status,0
 24501 ;; Tracked objects:
 24502 ;;		On entry : 0/0
 24503 ;;		On exit  : 0/0
 24504 ;;		Unchanged: 0/0
 24505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24509 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24510 ;;Total ram usage:        2 bytes
 24511 ;; Hardware stack levels used:    1
 24512 ;; Hardware stack levels required when called:    7
 24513 ;; This function calls:
 24514 ;;		Nothing
 24515 ;; This function is called by:
 24516 ;;		_ADC_Init
 24517 ;; This function uses a non-reentrant model
 24518 ;;
 24519                           
 24520                           	psect	text121
 24521  015CDC                     __ptext121:
 24522                           	opt stack 0
 24523  015CDC                     _ADC_ConversionTime:
 24524                           	opt stack 21
 24525                           
 24526                           ; BSR set to: 0
 24527                           ;incstack = 0
 24528                           ;ADC_ConversionTime@pCount stored from wreg
 24529  015CDC  0100               	movlb	0	; () banked
 24530  015CDE  6FBB               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24531                           
 24532                           ;ADC.c: 201: if (pCount == 10)
 24533  015CE0  0E0A               	movlw	10
 24534  015CE2  0100               	movlb	0	; () banked
 24535  015CE4  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24536  015CE6  B4D8               	btfsc	status,2,c
 24537  015CE8  D00A               	goto	u10900
 24538                           
 24539                           ; BSR set to: 0
 24540                           ;ADC.c: 203: else if (pCount == 14)
 24541                           
 24542                           ; BSR set to: 0
 24543                           
 24544                           ; BSR set to: 0
 24545                           ;ADC.c: 202: pCount -= 2;
 24546  015CEA  0E0E               	movlw	14
 24547  015CEC  0100               	movlb	0	; () banked
 24548  015CEE  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24549  015CF0  B4D8               	btfsc	status,2,c
 24550  015CF2  D005               	goto	u10900
 24551                           
 24552                           ; BSR set to: 0
 24553                           ;ADC.c: 205: else if (pCount == 18)
 24554                           
 24555                           ; BSR set to: 0
 24556                           
 24557                           ; BSR set to: 0
 24558                           ;ADC.c: 204: pCount -= 2;
 24559  015CF4  0E12               	movlw	18
 24560  015CF6  0100               	movlb	0	; () banked
 24561  015CF8  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24562  015CFA  A4D8               	btfss	status,2,c
 24563  015CFC  D003               	goto	l1313
 24564  015CFE                     u10900:
 24565                           
 24566                           ; BSR set to: 0
 24567                           ;ADC.c: 206: pCount -= 2;
 24568  015CFE  0E02               	movlw	2
 24569  015D00  0100               	movlb	0	; () banked
 24570  015D02  5FBB               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24571  015D04                     l1313:
 24572                           
 24573                           ; BSR set to: 0
 24574                           ;ADC.c: 208: pCount <<= 1;
 24575                           
 24576                           ; BSR set to: 0
 24577                           
 24578                           ; BSR set to: 0
 24579  015D04  0100               	movlb	0	; () banked
 24580  015D06  90D8               	bcf	status,0,c
 24581  015D08  37BB               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24582                           
 24583                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24584  015D0A  C0BB  F0BA         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24585  015D0E  0100               	movlb	0	; () banked
 24586  015D10  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24587  015D12  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24588  015D14  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24589  015D16  50C1               	movf	4033,w,c	;volatile
 24590  015D18  0100               	movlb	0	; () banked
 24591  015D1A  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24592  015D1C  0BC7               	andlw	-57
 24593  015D1E  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24594  015D20  6EC1               	movwf	4033,c	;volatile
 24595                           
 24596                           ; BSR set to: 0
 24597  015D22  0012               	return		;funcret
 24598  015D24                     __end_of_ADC_ConversionTime:
 24599                           	opt stack 0
 24600                           tosu	equ	0xFFF
 24601                           tosh	equ	0xFFE
 24602                           tosl	equ	0xFFD
 24603                           pclath	equ	0xFFA
 24604                           tblptru	equ	0xFF8
 24605                           tblptrh	equ	0xFF7
 24606                           tblptrl	equ	0xFF6
 24607                           tablat	equ	0xFF5
 24608                           prodh	equ	0xFF4
 24609                           prodl	equ	0xFF3
 24610                           intcon	equ	0xFF2
 24611                           postinc0	equ	0xFEE
 24612                           wreg	equ	0xFE8
 24613                           indf1	equ	0xFE7
 24614                           postdec1	equ	0xFE5
 24615                           fsr1h	equ	0xFE2
 24616                           fsr1l	equ	0xFE1
 24617                           indf2	equ	0xFDF
 24618                           postinc2	equ	0xFDE
 24619                           postdec2	equ	0xFDD
 24620                           plusw2	equ	0xFDB
 24621                           fsr2h	equ	0xFDA
 24622                           fsr2l	equ	0xFD9
 24623                           status	equ	0xFD8
 24624                           
 24625 ;; *************** function _ADC_ClockDivision *****************
 24626 ;; Defined at:
 24627 ;;		line 159 in file "Library/ADC.c"
 24628 ;; Parameters:    Size  Location     Type
 24629 ;;  pDivide         1    wreg     unsigned char 
 24630 ;; Auto vars:     Size  Location     Type
 24631 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24632 ;;  unfound         1    2[BANK0 ] unsigned char 
 24633 ;;  reg             1    1[BANK0 ] unsigned char 
 24634 ;; Return value:  Size  Location     Type
 24635 ;;                  1    wreg      void 
 24636 ;; Registers used:
 24637 ;;		wreg, status,2, status,0
 24638 ;; Tracked objects:
 24639 ;;		On entry : 0/0
 24640 ;;		On exit  : 0/0
 24641 ;;		Unchanged: 0/0
 24642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24644 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24646 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24647 ;;Total ram usage:        3 bytes
 24648 ;; Hardware stack levels used:    1
 24649 ;; Hardware stack levels required when called:    7
 24650 ;; This function calls:
 24651 ;;		Nothing
 24652 ;; This function is called by:
 24653 ;;		_ADC_Init
 24654 ;; This function uses a non-reentrant model
 24655 ;;
 24656                           
 24657                           	psect	text122
 24658  014EB8                     __ptext122:
 24659                           	opt stack 0
 24660  014EB8                     _ADC_ClockDivision:
 24661                           	opt stack 21
 24662                           
 24663                           ; BSR set to: 0
 24664                           ;incstack = 0
 24665                           ;ADC_ClockDivision@pDivide stored from wreg
 24666  014EB8  0100               	movlb	0	; () banked
 24667  014EBA  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24668                           
 24669                           ;ADC.c: 161: UINT8 reg = 0;
 24670  014EBC  0E00               	movlw	0
 24671  014EBE  0100               	movlb	0	; () banked
 24672  014EC0  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24673                           
 24674                           ;ADC.c: 162: bool unfound = 1;
 24675  014EC2  0E01               	movlw	1
 24676  014EC4  D002               	goto	L15
 24677  014EC6                     
 24678                           ; BSR set to: 0
 24679                           ;ADC.c: 167: reg = 0;
 24680                           
 24681                           ; BSR set to: 0
 24682  014EC6  0E00               	movlw	0
 24683  014EC8  D00C               	goto	L20
 24684  014ECA                     L15:
 24685  014ECA  0100               	movlb	0	; () banked
 24686  014ECC  6FBC               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24687                           
 24688                           ;ADC.c: 169: break;
 24689  014ECE  D02D               	goto	l1296
 24690  014ED0                     
 24691                           ; BSR set to: 0
 24692                           ;ADC.c: 171: reg = 0b100;
 24693                           
 24694                           ; BSR set to: 0
 24695  014ED0  0E04               	movlw	4
 24696  014ED2  D007               	goto	L20
 24697  014ED4                     
 24698                           ; BSR set to: 0
 24699                           ;ADC.c: 175: reg = 0b001;
 24700                           
 24701                           ; BSR set to: 0
 24702  014ED4  0E01               	movlw	1
 24703  014ED6  D005               	goto	L20
 24704  014ED8                     
 24705                           ; BSR set to: 0
 24706                           ;ADC.c: 179: reg = 0b101;
 24707                           
 24708                           ; BSR set to: 0
 24709  014ED8  0E05               	movlw	5
 24710  014EDA  D003               	goto	L20
 24711  014EDC                     
 24712                           ; BSR set to: 0
 24713                           ;ADC.c: 183: reg = 0b010;
 24714                           
 24715                           ; BSR set to: 0
 24716  014EDC  0E02               	movlw	2
 24717  014EDE  D001               	goto	L20
 24718  014EE0                     
 24719                           ; BSR set to: 0
 24720                           ;ADC.c: 187: reg = 0b110;
 24721                           
 24722                           ; BSR set to: 0
 24723  014EE0  0E06               	movlw	6
 24724  014EE2                     L20:
 24725  014EE2  0100               	movlb	0	; () banked
 24726  014EE4  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24727                           
 24728                           ;ADC.c: 188: unfound = 0;
 24729  014EE6  0E00               	movlw	0
 24730  014EE8  D7F0               	goto	L15
 24731  014EEA                     
 24732                           ; BSR set to: 0
 24733                           ;ADC.c: 191: if (pDivide > 2)
 24734                           
 24735                           ; BSR set to: 0
 24736  014EEA  0E02               	movlw	2
 24737  014EEC  0100               	movlb	0	; () banked
 24738  014EEE  65BA               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24739  014EF0  D003               	goto	l1303
 24740                           
 24741                           ; BSR set to: 0
 24742                           ;ADC.c: 192: pDivide--;
 24743  014EF2  0100               	movlb	0	; () banked
 24744  014EF4  07BA               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24745  014EF6  D019               	goto	l1296
 24746  014EF8                     l1303:
 24747                           
 24748                           ; BSR set to: 0
 24749                           ;ADC.c: 193: else
 24750                           ;ADC.c: 194: pDivide = 2;
 24751                           
 24752                           ; BSR set to: 0
 24753  014EF8  0E02               	movlw	2
 24754  014EFA  0100               	movlb	0	; () banked
 24755  014EFC  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24756                           
 24757                           ; BSR set to: 0
 24758                           ;ADC.c: 195: };
 24759  014EFE  D015               	goto	l1296
 24760  014F00                     
 24761                           ; BSR set to: 0
 24762                           
 24763                           ; BSR set to: 0
 24764  014F00  0100               	movlb	0	; () banked
 24765  014F02  51BA               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24766                           
 24767                           ; Switch size 1, requested type "space"
 24768                           ; Number of cases is 6, Range of values is 2 to 64
 24769                           ; switch strategies available:
 24770                           ; Name         Instructions Cycles
 24771                           ; simple_byte           19    10 (average)
 24772                           ;	Chosen strategy is simple_byte
 24773  014F04  0A02               	xorlw	2	; case 2
 24774  014F06  B4D8               	btfsc	status,2,c
 24775  014F08  D7DE               	goto	l1295
 24776  014F0A  0A06               	xorlw	6	; case 4
 24777  014F0C  B4D8               	btfsc	status,2,c
 24778  014F0E  D7E0               	goto	l1297
 24779  014F10  0A0C               	xorlw	12	; case 8
 24780  014F12  B4D8               	btfsc	status,2,c
 24781  014F14  D7DF               	goto	l1298
 24782  014F16  0A18               	xorlw	24	; case 16
 24783  014F18  B4D8               	btfsc	status,2,c
 24784  014F1A  D7DE               	goto	l1299
 24785  014F1C  0A30               	xorlw	48	; case 32
 24786  014F1E  B4D8               	btfsc	status,2,c
 24787  014F20  D7DD               	goto	l1300
 24788  014F22  0A60               	xorlw	96	; case 64
 24789  014F24  B4D8               	btfsc	status,2,c
 24790  014F26  D7DC               	goto	l1301
 24791  014F28  D7E0               	goto	l1302
 24792  014F2A                     l1296:
 24793                           
 24794                           ; BSR set to: 0
 24795                           
 24796                           ; BSR set to: 0
 24797                           
 24798                           ; BSR set to: 0
 24799  014F2A  0100               	movlb	0	; () banked
 24800  014F2C  51BC               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24801  014F2E  0100               	movlb	0	; () banked
 24802  014F30  A4D8               	btfss	status,2,c
 24803  014F32  D7E6               	goto	l1294
 24804                           
 24805                           ; BSR set to: 0
 24806                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24807                           
 24808                           ; BSR set to: 0
 24809  014F34  50C1               	movf	4033,w,c	;volatile
 24810  014F36  0100               	movlb	0	; () banked
 24811  014F38  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24812  014F3A  0BF8               	andlw	-8
 24813  014F3C  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24814  014F3E  6EC1               	movwf	4033,c	;volatile
 24815                           
 24816                           ; BSR set to: 0
 24817  014F40  0012               	return		;funcret
 24818  014F42                     __end_of_ADC_ClockDivision:
 24819                           	opt stack 0
 24820                           tosu	equ	0xFFF
 24821                           tosh	equ	0xFFE
 24822                           tosl	equ	0xFFD
 24823                           pclath	equ	0xFFA
 24824                           tblptru	equ	0xFF8
 24825                           tblptrh	equ	0xFF7
 24826                           tblptrl	equ	0xFF6
 24827                           tablat	equ	0xFF5
 24828                           prodh	equ	0xFF4
 24829                           prodl	equ	0xFF3
 24830                           intcon	equ	0xFF2
 24831                           postinc0	equ	0xFEE
 24832                           wreg	equ	0xFE8
 24833                           indf1	equ	0xFE7
 24834                           postdec1	equ	0xFE5
 24835                           fsr1h	equ	0xFE2
 24836                           fsr1l	equ	0xFE1
 24837                           indf2	equ	0xFDF
 24838                           postinc2	equ	0xFDE
 24839                           postdec2	equ	0xFDD
 24840                           plusw2	equ	0xFDB
 24841                           fsr2h	equ	0xFDA
 24842                           fsr2l	equ	0xFD9
 24843                           status	equ	0xFD8
 24844                           
 24845 ;; *************** function _ADC_Calibrate *****************
 24846 ;; Defined at:
 24847 ;;		line 63 in file "Library/ADC.c"
 24848 ;; Parameters:    Size  Location     Type
 24849 ;;		None
 24850 ;; Auto vars:     Size  Location     Type
 24851 ;;		None
 24852 ;; Return value:  Size  Location     Type
 24853 ;;                  1    wreg      void 
 24854 ;; Registers used:
 24855 ;;		cstack
 24856 ;; Tracked objects:
 24857 ;;		On entry : 0/0
 24858 ;;		On exit  : 0/0
 24859 ;;		Unchanged: 0/0
 24860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24865 ;;Total ram usage:        0 bytes
 24866 ;; Hardware stack levels used:    1
 24867 ;; Hardware stack levels required when called:    8
 24868 ;; This function calls:
 24869 ;;		_ADC_Off
 24870 ;;		_ADC_On
 24871 ;; This function is called by:
 24872 ;;		_ADC_Init
 24873 ;; This function uses a non-reentrant model
 24874 ;;
 24875                           
 24876                           	psect	text123
 24877  01661A                     __ptext123:
 24878                           	opt stack 0
 24879  01661A                     _ADC_Calibrate:
 24880                           	opt stack 20
 24881                           
 24882                           ;ADC.c: 65: ADC_On();
 24883                           
 24884                           ; BSR set to: 0
 24885                           ;incstack = 0
 24886  01661A  EC99  F0B3         	call	_ADC_On	;wreg free
 24887                           
 24888                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 24889  01661E  8CC1               	bsf	4033,6,c	;volatile
 24890                           
 24891                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 24892  016620  82C2               	bsf	4034,1,c	;volatile
 24893  016622  B2C2               	btfsc	4034,1,c	;volatile
 24894  016624  D7FE               	goto	l1254
 24895                           
 24896                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 24897  016626  9CC1               	bcf	4033,6,c	;volatile
 24898                           
 24899                           ;ADC.c: 73: ADC_Off();
 24900  016628  EC8B  F0B3         	call	_ADC_Off	;wreg free
 24901  01662C  0012               	return		;funcret
 24902  01662E                     __end_of_ADC_Calibrate:
 24903                           	opt stack 0
 24904                           tosu	equ	0xFFF
 24905                           tosh	equ	0xFFE
 24906                           tosl	equ	0xFFD
 24907                           pclath	equ	0xFFA
 24908                           tblptru	equ	0xFF8
 24909                           tblptrh	equ	0xFF7
 24910                           tblptrl	equ	0xFF6
 24911                           tablat	equ	0xFF5
 24912                           prodh	equ	0xFF4
 24913                           prodl	equ	0xFF3
 24914                           intcon	equ	0xFF2
 24915                           postinc0	equ	0xFEE
 24916                           wreg	equ	0xFE8
 24917                           indf1	equ	0xFE7
 24918                           postdec1	equ	0xFE5
 24919                           fsr1h	equ	0xFE2
 24920                           fsr1l	equ	0xFE1
 24921                           indf2	equ	0xFDF
 24922                           postinc2	equ	0xFDE
 24923                           postdec2	equ	0xFDD
 24924                           plusw2	equ	0xFDB
 24925                           fsr2h	equ	0xFDA
 24926                           fsr2l	equ	0xFD9
 24927                           status	equ	0xFD8
 24928                           
 24929 ;; *************** function _ADC_On *****************
 24930 ;; Defined at:
 24931 ;;		line 85 in file "Library/ADC.c"
 24932 ;; Parameters:    Size  Location     Type
 24933 ;;		None
 24934 ;; Auto vars:     Size  Location     Type
 24935 ;;		None
 24936 ;; Return value:  Size  Location     Type
 24937 ;;                  1    wreg      void 
 24938 ;; Registers used:
 24939 ;;		None
 24940 ;; Tracked objects:
 24941 ;;		On entry : 0/0
 24942 ;;		On exit  : 0/0
 24943 ;;		Unchanged: 0/0
 24944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24949 ;;Total ram usage:        0 bytes
 24950 ;; Hardware stack levels used:    1
 24951 ;; Hardware stack levels required when called:    7
 24952 ;; This function calls:
 24953 ;;		Nothing
 24954 ;; This function is called by:
 24955 ;;		_ADC_Calibrate
 24956 ;;		_ADC_Start
 24957 ;;		_ADC_ISR
 24958 ;;		_ADC_Sample
 24959 ;; This function uses a non-reentrant model
 24960 ;;
 24961                           
 24962                           	psect	text124
 24963  016732                     __ptext124:
 24964                           	opt stack 0
 24965  016732                     _ADC_On:
 24966                           	opt stack 20
 24967                           
 24968                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 24969                           
 24970                           ;incstack = 0
 24971  016732  80C2               	bsf	4034,0,c	;volatile
 24972                           
 24973                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 24974  016734  9C9E               	bcf	3998,6,c	;volatile
 24975  016736  0012               	return		;funcret
 24976  016738                     __end_of_ADC_On:
 24977                           	opt stack 0
 24978                           tosu	equ	0xFFF
 24979                           tosh	equ	0xFFE
 24980                           tosl	equ	0xFFD
 24981                           pclath	equ	0xFFA
 24982                           tblptru	equ	0xFF8
 24983                           tblptrh	equ	0xFF7
 24984                           tblptrl	equ	0xFF6
 24985                           tablat	equ	0xFF5
 24986                           prodh	equ	0xFF4
 24987                           prodl	equ	0xFF3
 24988                           intcon	equ	0xFF2
 24989                           postinc0	equ	0xFEE
 24990                           wreg	equ	0xFE8
 24991                           indf1	equ	0xFE7
 24992                           postdec1	equ	0xFE5
 24993                           fsr1h	equ	0xFE2
 24994                           fsr1l	equ	0xFE1
 24995                           indf2	equ	0xFDF
 24996                           postinc2	equ	0xFDE
 24997                           postdec2	equ	0xFDD
 24998                           plusw2	equ	0xFDB
 24999                           fsr2h	equ	0xFDA
 25000                           fsr2l	equ	0xFD9
 25001                           status	equ	0xFD8
 25002                           
 25003 ;; *************** function _ADC_Off *****************
 25004 ;; Defined at:
 25005 ;;		line 94 in file "Library/ADC.c"
 25006 ;; Parameters:    Size  Location     Type
 25007 ;;		None
 25008 ;; Auto vars:     Size  Location     Type
 25009 ;;		None
 25010 ;; Return value:  Size  Location     Type
 25011 ;;                  1    wreg      void 
 25012 ;; Registers used:
 25013 ;;		None
 25014 ;; Tracked objects:
 25015 ;;		On entry : 0/0
 25016 ;;		On exit  : 0/0
 25017 ;;		Unchanged: 0/0
 25018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25023 ;;Total ram usage:        0 bytes
 25024 ;; Hardware stack levels used:    1
 25025 ;; Hardware stack levels required when called:    7
 25026 ;; This function calls:
 25027 ;;		Nothing
 25028 ;; This function is called by:
 25029 ;;		_ADC_Calibrate
 25030 ;;		_ADC_Start
 25031 ;;		_ADC_ISR
 25032 ;;		_ADC_Sample
 25033 ;; This function uses a non-reentrant model
 25034 ;;
 25035                           
 25036                           	psect	text125
 25037  016716                     __ptext125:
 25038                           	opt stack 0
 25039  016716                     _ADC_Off:
 25040                           	opt stack 20
 25041                           
 25042                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 25043                           
 25044                           ;incstack = 0
 25045  016716  90C2               	bcf	4034,0,c	;volatile
 25046                           
 25047                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 25048  016718  9C9E               	bcf	3998,6,c	;volatile
 25049                           
 25050                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 25051  01671A  9C9D               	bcf	3997,6,c	;volatile
 25052  01671C  0012               	return		;funcret
 25053  01671E                     __end_of_ADC_Off:
 25054                           	opt stack 0
 25055                           tosu	equ	0xFFF
 25056                           tosh	equ	0xFFE
 25057                           tosl	equ	0xFFD
 25058                           pclath	equ	0xFFA
 25059                           tblptru	equ	0xFF8
 25060                           tblptrh	equ	0xFF7
 25061                           tblptrl	equ	0xFF6
 25062                           tablat	equ	0xFF5
 25063                           prodh	equ	0xFF4
 25064                           prodl	equ	0xFF3
 25065                           intcon	equ	0xFF2
 25066                           postinc0	equ	0xFEE
 25067                           wreg	equ	0xFE8
 25068                           indf1	equ	0xFE7
 25069                           postdec1	equ	0xFE5
 25070                           fsr1h	equ	0xFE2
 25071                           fsr1l	equ	0xFE1
 25072                           indf2	equ	0xFDF
 25073                           postinc2	equ	0xFDE
 25074                           postdec2	equ	0xFDD
 25075                           plusw2	equ	0xFDB
 25076                           fsr2h	equ	0xFDA
 25077                           fsr2l	equ	0xFD9
 25078                           status	equ	0xFD8
 25079                           
 25080 ;; *************** function _getMode *****************
 25081 ;; Defined at:
 25082 ;;		line 105 in file "main.c"
 25083 ;; Parameters:    Size  Location     Type
 25084 ;;		None
 25085 ;; Auto vars:     Size  Location     Type
 25086 ;;		None
 25087 ;; Return value:  Size  Location     Type
 25088 ;;                  1    wreg      void 
 25089 ;; Registers used:
 25090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25091 ;; Tracked objects:
 25092 ;;		On entry : 0/0
 25093 ;;		On exit  : 0/0
 25094 ;;		Unchanged: 0/0
 25095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25100 ;;Total ram usage:        0 bytes
 25101 ;; Hardware stack levels used:    1
 25102 ;; Hardware stack levels required when called:   16
 25103 ;; This function calls:
 25104 ;;		_HMI_DIPSwitch
 25105 ;;		_HMI_DownSwitch
 25106 ;;		_HMI_LeftSwitch
 25107 ;;		_HMI_Poll
 25108 ;;		_HMI_RightSwitch
 25109 ;;		_HMI_UpSwitch
 25110 ;;		_MXK_DIPSwitch
 25111 ;;		_MXK_TestButton
 25112 ;; This function is called by:
 25113 ;;		_main
 25114 ;; This function uses a non-reentrant model
 25115 ;;
 25116                           
 25117                           	psect	text126
 25118  014116                     __ptext126:
 25119                           	opt stack 0
 25120  014116                     _getMode:
 25121                           	opt stack 14
 25122                           
 25123                           ;main.c: 106: HMI_Poll();
 25124                           
 25125                           ;incstack = 0
 25126  014116  EC05  F0AA         	call	_HMI_Poll	;wreg free
 25127                           
 25128                           ;main.c: 107: mode = 0;
 25129  01411A  0E00               	movlw	0
 25130  01411C  0100               	movlb	0	; () banked
 25131  01411E  6F74               	movwf	(_mode+1)& (0+255),b
 25132  014120  0E00               	movlw	0
 25133  014122  6F73               	movwf	_mode& (0+255),b
 25134                           
 25135                           ; BSR set to: 0
 25136                           ;main.c: 108: if (HMIBoard.mUp.mGetState()) {
 25137  014124  EE23  F061         	lfsr	2,_HMIBoard+35
 25138  014128  D801               	call	u11828
 25139  01412A  D00A               	goto	u11829
 25140  01412C                     u11828:
 25141  01412C  0005               	push	
 25142  01412E  6EFA               	movwf	pclath,c
 25143  014130  50DE               	movf	postinc2,w,c
 25144  014132  6EFD               	movwf	tosl,c
 25145  014134  50DE               	movf	postinc2,w,c
 25146  014136  6EFE               	movwf	tosh,c
 25147  014138  50DE               	movf	postinc2,w,c
 25148  01413A  6EFF               	movwf	tosu,c
 25149  01413C  50FA               	movf	pclath,w,c
 25150  01413E  0012               	return		;indir
 25151  014140                     u11829:
 25152  014140  0900               	iorlw	0
 25153  014142  B4D8               	btfsc	status,2,c
 25154  014144  D005               	goto	l2304
 25155                           
 25156                           ;main.c: 109: mode = 1;
 25157  014146  0E00               	movlw	0
 25158  014148  0100               	movlb	0	; () banked
 25159  01414A  6F74               	movwf	(_mode+1)& (0+255),b
 25160  01414C  0E01               	movlw	1
 25161  01414E  6F73               	movwf	_mode& (0+255),b
 25162  014150                     l2304:
 25163                           
 25164                           ;main.c: 110: }
 25165                           ;main.c: 111: if (HMIBoard.mRight.mGetState()) {
 25166                           
 25167                           ; BSR set to: 0
 25168  014150  EE23  F04D         	lfsr	2,_HMIBoard+15
 25169  014154  D801               	call	u11848
 25170  014156  D00A               	goto	u11849
 25171  014158                     u11848:
 25172  014158  0005               	push	
 25173  01415A  6EFA               	movwf	pclath,c
 25174  01415C  50DE               	movf	postinc2,w,c
 25175  01415E  6EFD               	movwf	tosl,c
 25176  014160  50DE               	movf	postinc2,w,c
 25177  014162  6EFE               	movwf	tosh,c
 25178  014164  50DE               	movf	postinc2,w,c
 25179  014166  6EFF               	movwf	tosu,c
 25180  014168  50FA               	movf	pclath,w,c
 25181  01416A  0012               	return		;indir
 25182  01416C                     u11849:
 25183  01416C  0900               	iorlw	0
 25184  01416E  B4D8               	btfsc	status,2,c
 25185  014170  D005               	goto	l2305
 25186                           
 25187                           ;main.c: 112: mode = 2;
 25188  014172  0E00               	movlw	0
 25189  014174  0100               	movlb	0	; () banked
 25190  014176  6F74               	movwf	(_mode+1)& (0+255),b
 25191  014178  0E02               	movlw	2
 25192  01417A  6F73               	movwf	_mode& (0+255),b
 25193  01417C                     l2305:
 25194                           
 25195                           ;main.c: 113: }
 25196                           ;main.c: 114: if (HMIBoard.mDown.mGetState()) {
 25197                           
 25198                           ; BSR set to: 0
 25199  01417C  EE23  F06B         	lfsr	2,_HMIBoard+45
 25200  014180  D801               	call	u11868
 25201  014182  D00A               	goto	u11869
 25202  014184                     u11868:
 25203  014184  0005               	push	
 25204  014186  6EFA               	movwf	pclath,c
 25205  014188  50DE               	movf	postinc2,w,c
 25206  01418A  6EFD               	movwf	tosl,c
 25207  01418C  50DE               	movf	postinc2,w,c
 25208  01418E  6EFE               	movwf	tosh,c
 25209  014190  50DE               	movf	postinc2,w,c
 25210  014192  6EFF               	movwf	tosu,c
 25211  014194  50FA               	movf	pclath,w,c
 25212  014196  0012               	return		;indir
 25213  014198                     u11869:
 25214  014198  0900               	iorlw	0
 25215  01419A  B4D8               	btfsc	status,2,c
 25216  01419C  D005               	goto	l2306
 25217                           
 25218                           ;main.c: 115: mode = 3;
 25219  01419E  0E00               	movlw	0
 25220  0141A0  0100               	movlb	0	; () banked
 25221  0141A2  6F74               	movwf	(_mode+1)& (0+255),b
 25222  0141A4  0E03               	movlw	3
 25223  0141A6  6F73               	movwf	_mode& (0+255),b
 25224  0141A8                     l2306:
 25225                           
 25226                           ;main.c: 116: }
 25227                           ;main.c: 117: if (HMIBoard.mLeft.mGetState()) {
 25228                           
 25229                           ; BSR set to: 0
 25230  0141A8  EE23  F057         	lfsr	2,_HMIBoard+25
 25231  0141AC  D801               	call	u11888
 25232  0141AE  D00A               	goto	u11889
 25233  0141B0                     u11888:
 25234  0141B0  0005               	push	
 25235  0141B2  6EFA               	movwf	pclath,c
 25236  0141B4  50DE               	movf	postinc2,w,c
 25237  0141B6  6EFD               	movwf	tosl,c
 25238  0141B8  50DE               	movf	postinc2,w,c
 25239  0141BA  6EFE               	movwf	tosh,c
 25240  0141BC  50DE               	movf	postinc2,w,c
 25241  0141BE  6EFF               	movwf	tosu,c
 25242  0141C0  50FA               	movf	pclath,w,c
 25243  0141C2  0012               	return		;indir
 25244  0141C4                     u11889:
 25245  0141C4  0900               	iorlw	0
 25246  0141C6  B4D8               	btfsc	status,2,c
 25247  0141C8  0012               	return	
 25248                           
 25249                           ;main.c: 118: mode = 4;
 25250  0141CA  0E00               	movlw	0
 25251  0141CC  0100               	movlb	0	; () banked
 25252  0141CE  6F74               	movwf	(_mode+1)& (0+255),b
 25253  0141D0  0E04               	movlw	4
 25254  0141D2  6F73               	movwf	_mode& (0+255),b
 25255  0141D4  0012               	return	
 25256  0141D6                     __end_of_getMode:
 25257                           	opt stack 0
 25258                           tosu	equ	0xFFF
 25259                           tosh	equ	0xFFE
 25260                           tosl	equ	0xFFD
 25261                           pclath	equ	0xFFA
 25262                           tblptru	equ	0xFF8
 25263                           tblptrh	equ	0xFF7
 25264                           tblptrl	equ	0xFF6
 25265                           tablat	equ	0xFF5
 25266                           prodh	equ	0xFF4
 25267                           prodl	equ	0xFF3
 25268                           intcon	equ	0xFF2
 25269                           postinc0	equ	0xFEE
 25270                           wreg	equ	0xFE8
 25271                           indf1	equ	0xFE7
 25272                           postdec1	equ	0xFE5
 25273                           fsr1h	equ	0xFE2
 25274                           fsr1l	equ	0xFE1
 25275                           indf2	equ	0xFDF
 25276                           postinc2	equ	0xFDE
 25277                           postdec2	equ	0xFDD
 25278                           plusw2	equ	0xFDB
 25279                           fsr2h	equ	0xFDA
 25280                           fsr2l	equ	0xFD9
 25281                           status	equ	0xFD8
 25282                           
 25283 ;; *************** function _HMI_Poll *****************
 25284 ;; Defined at:
 25285 ;;		line 252 in file "HMI.c"
 25286 ;; Parameters:    Size  Location     Type
 25287 ;;		None
 25288 ;; Auto vars:     Size  Location     Type
 25289 ;;		None
 25290 ;; Return value:  Size  Location     Type
 25291 ;;                  1    wreg      void 
 25292 ;; Registers used:
 25293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25294 ;; Tracked objects:
 25295 ;;		On entry : 0/0
 25296 ;;		On exit  : 0/0
 25297 ;;		Unchanged: 0/0
 25298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25303 ;;Total ram usage:        0 bytes
 25304 ;; Hardware stack levels used:    1
 25305 ;; Hardware stack levels required when called:   15
 25306 ;; This function calls:
 25307 ;;		_Button_Poll
 25308 ;; This function is called by:
 25309 ;;		_getMode
 25310 ;;		_safeToGo
 25311 ;;		_main
 25312 ;; This function uses a non-reentrant model
 25313 ;;
 25314                           
 25315                           	psect	text127
 25316  01540A                     __ptext127:
 25317                           	opt stack 0
 25318  01540A                     _HMI_Poll:
 25319                           	opt stack 13
 25320                           
 25321                           ;HMI.c: 254: TRISE = 0xFC;
 25322                           
 25323                           ;incstack = 0
 25324  01540A  0EFC               	movlw	252
 25325  01540C  6E96               	movwf	3990,c	;volatile
 25326                           
 25327                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 25328  01540E  0E6E               	movlw	low (_HMIBoard+48)
 25329  015410  0100               	movlb	0	; () banked
 25330  015412  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25331  015414  0E03               	movlw	high (_HMIBoard+48)
 25332  015416  0100               	movlb	0	; () banked
 25333  015418  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25334  01541A  0E01               	movlw	1
 25335  01541C  0100               	movlb	0	; () banked
 25336  01541E  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25337  015420  EC0F  F098         	call	_Button_Poll	;wreg free
 25338                           
 25339                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 25340  015424  0E50               	movlw	low (_HMIBoard+18)
 25341  015426  0100               	movlb	0	; () banked
 25342  015428  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25343  01542A  0E03               	movlw	high (_HMIBoard+18)
 25344  01542C  0100               	movlb	0	; () banked
 25345  01542E  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25346  015430  0E01               	movlw	1
 25347  015432  0100               	movlb	0	; () banked
 25348  015434  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25349  015436  EC0F  F098         	call	_Button_Poll	;wreg free
 25350                           
 25351                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 25352  01543A  0E46               	movlw	low (_HMIBoard+8)
 25353  01543C  0100               	movlb	0	; () banked
 25354  01543E  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25355  015440  0E03               	movlw	high (_HMIBoard+8)
 25356  015442  0100               	movlb	0	; () banked
 25357  015444  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25358  015446  0E01               	movlw	1
 25359  015448  0100               	movlb	0	; () banked
 25360  01544A  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25361  01544C  EC0F  F098         	call	_Button_Poll	;wreg free
 25362                           
 25363                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 25364  015450  0E5A               	movlw	low (_HMIBoard+28)
 25365  015452  0100               	movlb	0	; () banked
 25366  015454  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25367  015456  0E03               	movlw	high (_HMIBoard+28)
 25368  015458  0100               	movlb	0	; () banked
 25369  01545A  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25370  01545C  0E01               	movlw	1
 25371  01545E  0100               	movlb	0	; () banked
 25372  015460  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25373  015462  EC0F  F098         	call	_Button_Poll	;wreg free
 25374                           
 25375                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 25376  015466  0E64               	movlw	low (_HMIBoard+38)
 25377  015468  0100               	movlb	0	; () banked
 25378  01546A  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25379  01546C  0E03               	movlw	high (_HMIBoard+38)
 25380  01546E  0100               	movlb	0	; () banked
 25381  015470  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25382  015472  0E01               	movlw	1
 25383  015474  0100               	movlb	0	; () banked
 25384  015476  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25385  015478  EC0F  F098         	call	_Button_Poll	;wreg free
 25386  01547C  0012               	return		;funcret
 25387  01547E                     __end_of_HMI_Poll:
 25388                           	opt stack 0
 25389                           tosu	equ	0xFFF
 25390                           tosh	equ	0xFFE
 25391                           tosl	equ	0xFFD
 25392                           pclath	equ	0xFFA
 25393                           tblptru	equ	0xFF8
 25394                           tblptrh	equ	0xFF7
 25395                           tblptrl	equ	0xFF6
 25396                           tablat	equ	0xFF5
 25397                           prodh	equ	0xFF4
 25398                           prodl	equ	0xFF3
 25399                           intcon	equ	0xFF2
 25400                           postinc0	equ	0xFEE
 25401                           wreg	equ	0xFE8
 25402                           indf1	equ	0xFE7
 25403                           postdec1	equ	0xFE5
 25404                           fsr1h	equ	0xFE2
 25405                           fsr1l	equ	0xFE1
 25406                           indf2	equ	0xFDF
 25407                           postinc2	equ	0xFDE
 25408                           postdec2	equ	0xFDD
 25409                           plusw2	equ	0xFDB
 25410                           fsr2h	equ	0xFDA
 25411                           fsr2l	equ	0xFD9
 25412                           status	equ	0xFD8
 25413                           
 25414 ;; *************** function _Button_Poll *****************
 25415 ;; Defined at:
 25416 ;;		line 57 in file "Library/Button.c"
 25417 ;; Parameters:    Size  Location     Type
 25418 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 25419 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 25420 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 25421 ;; Auto vars:     Size  Location     Type
 25422 ;;  Pin             1   35[BANK0 ] unsigned char 
 25423 ;; Return value:  Size  Location     Type
 25424 ;;                  1    wreg      unsigned char 
 25425 ;; Registers used:
 25426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25427 ;; Tracked objects:
 25428 ;;		On entry : 0/0
 25429 ;;		On exit  : 0/0
 25430 ;;		Unchanged: 0/0
 25431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25432 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25434 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25435 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25436 ;;Total ram usage:        9 bytes
 25437 ;; Hardware stack levels used:    1
 25438 ;; Hardware stack levels required when called:   14
 25439 ;; This function calls:
 25440 ;;		_Event_DIPSwitch
 25441 ;;		_Event_NULL
 25442 ;;		_Event_TestButton
 25443 ;;		_HMI_DIPSwitch
 25444 ;;		_HMI_DownSwitch
 25445 ;;		_HMI_LeftSwitch
 25446 ;;		_HMI_RightSwitch
 25447 ;;		_HMI_UpSwitch
 25448 ;;		_MXK_DIPSwitch
 25449 ;;		_MXK_TestButton
 25450 ;; This function is called by:
 25451 ;;		_HMI_Poll
 25452 ;;		_MXK_Poll
 25453 ;; This function uses a non-reentrant model
 25454 ;;
 25455                           
 25456                           	psect	text128
 25457  01301E                     __ptext128:
 25458                           	opt stack 0
 25459  01301E                     _Button_Poll:
 25460                           	opt stack 13
 25461                           
 25462                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25463                           
 25464                           ;incstack = 0
 25465  01301E  0100               	movlb	0	; () banked
 25466  013020  EE20 F007          	lfsr	2,7
 25467  013024  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25468  013026  26D9               	addwf	fsr2l,f,c
 25469  013028  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25470  01302A  22DA               	addwfc	fsr2h,f,c
 25471  01302C  D801               	call	u9688
 25472  01302E  D00A               	goto	u9689
 25473  013030                     u9688:
 25474  013030  0005               	push	
 25475  013032  6EFA               	movwf	pclath,c
 25476  013034  50DE               	movf	postinc2,w,c
 25477  013036  6EFD               	movwf	tosl,c
 25478  013038  50DE               	movf	postinc2,w,c
 25479  01303A  6EFE               	movwf	tosh,c
 25480  01303C  50DE               	movf	postinc2,w,c
 25481  01303E  6EFF               	movwf	tosu,c
 25482  013040  50FA               	movf	pclath,w,c
 25483  013042  0012               	return		;indir
 25484  013044                     u9689:
 25485  013044  0100               	movlb	0	; () banked
 25486  013046  6FDD               	movwf	Button_Poll@Pin& (0+255),b
 25487                           
 25488                           ; BSR set to: 0
 25489                           ;Button.c: 61: if (pButton->mState == Pin)
 25490  013048  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25491  01304C  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25492  013050  0100               	movlb	0	; () banked
 25493  013052  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25494  013054  18DE               	xorwf	postinc2,w,c
 25495  013056  A4D8               	btfss	status,2,c
 25496  013058  D021               	goto	l11
 25497                           
 25498                           ; BSR set to: 0
 25499                           ;Button.c: 62: {
 25500                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25501  01305A  0100               	movlb	0	; () banked
 25502  01305C  EE20 F001          	lfsr	2,1
 25503  013060  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25504  013062  26D9               	addwf	fsr2l,f,c
 25505  013064  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25506  013066  22DA               	addwfc	fsr2h,f,c
 25507  013068  0100               	movlb	0	; () banked
 25508  01306A  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25509  01306C  5CDE               	subwf	postinc2,w,c
 25510  01306E  B0D8               	btfsc	status,0,c
 25511  013070  D00A               	goto	l12
 25512                           
 25513                           ; BSR set to: 0
 25514                           ;Button.c: 66: pButton->mCount = 0;
 25515  013072  0100               	movlb	0	; () banked
 25516  013074  EE20 F001          	lfsr	2,1
 25517  013078  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25518  01307A  26D9               	addwf	fsr2l,f,c
 25519  01307C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25520  01307E  22DA               	addwfc	fsr2h,f,c
 25521  013080  0E00               	movlw	0
 25522  013082  6EDF               	movwf	indf2,c
 25523  013084  0012               	return	
 25524  013086                     l12:
 25525                           
 25526                           ; BSR set to: 0
 25527                           ;Button.c: 67: else
 25528                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25529                           
 25530                           ; BSR set to: 0
 25531  013086  0100               	movlb	0	; () banked
 25532  013088  EE20 F001          	lfsr	2,1
 25533  01308C  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25534  01308E  26D9               	addwf	fsr2l,f,c
 25535  013090  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25536  013092  22DA               	addwfc	fsr2h,f,c
 25537  013094  0100               	movlb	0	; () banked
 25538  013096  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25539  013098  5EDF               	subwf	indf2,f,c
 25540                           
 25541                           ; BSR set to: 0
 25542                           ;Button.c: 69: }
 25543  01309A  0012               	return	
 25544  01309C                     l11:
 25545                           
 25546                           ; BSR set to: 0
 25547                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25548                           
 25549                           ; BSR set to: 0
 25550  01309C  0100               	movlb	0	; () banked
 25551  01309E  EE20 F001          	lfsr	2,1
 25552  0130A2  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25553  0130A4  26D9               	addwf	fsr2l,f,c
 25554  0130A6  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25555  0130A8  22DA               	addwfc	fsr2h,f,c
 25556  0130AA  50DF               	movf	indf2,w,c
 25557  0130AC  0100               	movlb	0	; () banked
 25558  0130AE  6FD8               	movwf	??_Button_Poll& (0+255),b
 25559  0130B0  6BD9               	clrf	(??_Button_Poll+1)& (0+255),b
 25560  0130B2  0100               	movlb	0	; () banked
 25561  0130B4  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25562  0130B6  0100               	movlb	0	; () banked
 25563  0130B8  27D8               	addwf	??_Button_Poll& (0+255),f,b
 25564  0130BA  0E00               	movlw	0
 25565  0130BC  23D9               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25566  0130BE  0100               	movlb	0	; () banked
 25567  0130C0  EE20 F001          	lfsr	2,1
 25568  0130C4  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25569  0130C6  26D9               	addwf	fsr2l,f,c
 25570  0130C8  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25571  0130CA  22DA               	addwfc	fsr2h,f,c
 25572  0130CC  50DF               	movf	indf2,w,c
 25573  0130CE  0100               	movlb	0	; () banked
 25574  0130D0  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25575  0130D2  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25576  0130D4  0100               	movlb	0	; () banked
 25577  0130D6  51D8               	movf	??_Button_Poll& (0+255),w,b
 25578  0130D8  0100               	movlb	0	; () banked
 25579  0130DA  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25580  0130DC  0100               	movlb	0	; () banked
 25581  0130DE  51DB               	movf	(??_Button_Poll+3)& (0+255),w,b
 25582  0130E0  0A80               	xorlw	128
 25583  0130E2  0100               	movlb	0	; () banked
 25584  0130E4  6FDC               	movwf	(??_Button_Poll+4)& (0+255),b
 25585  0130E6  0100               	movlb	0	; () banked
 25586  0130E8  51D9               	movf	(??_Button_Poll+1)& (0+255),w,b
 25587  0130EA  0A80               	xorlw	128
 25588  0130EC  0100               	movlb	0	; () banked
 25589  0130EE  59DC               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25590  0130F0  B0D8               	btfsc	status,0,c
 25591  0130F2  0012               	return	
 25592                           
 25593                           ; BSR set to: 0
 25594                           ;Button.c: 73: {
 25595                           ;Button.c: 75: pButton->mCount += pIncrement;
 25596  0130F4  0100               	movlb	0	; () banked
 25597  0130F6  EE20 F001          	lfsr	2,1
 25598  0130FA  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25599  0130FC  26D9               	addwf	fsr2l,f,c
 25600  0130FE  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25601  013100  22DA               	addwfc	fsr2h,f,c
 25602  013102  0100               	movlb	0	; () banked
 25603  013104  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25604  013106  26DF               	addwf	indf2,f,c
 25605                           
 25606                           ; BSR set to: 0
 25607                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25608  013108  0100               	movlb	0	; () banked
 25609  01310A  EE20 F002          	lfsr	2,2
 25610  01310E  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25611  013110  26D9               	addwf	fsr2l,f,c
 25612  013112  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25613  013114  22DA               	addwfc	fsr2h,f,c
 25614  013116  0100               	movlb	0	; () banked
 25615  013118  EE10 F001          	lfsr	1,1
 25616  01311C  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25617  01311E  26E1               	addwf	fsr1l,f,c
 25618  013120  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25619  013122  22E2               	addwfc	fsr1h,f,c
 25620  013124  50E7               	movf	indf1,w,c
 25621  013126  0100               	movlb	0	; () banked
 25622  013128  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25623  01312A  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25624  01312C  50DE               	movf	postinc2,w,c
 25625  01312E  0100               	movlb	0	; () banked
 25626  013130  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25627  013132  50DE               	movf	postinc2,w,c
 25628  013134  0100               	movlb	0	; () banked
 25629  013136  59DB               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 25630  013138  A0D8               	btfss	status,0,c
 25631  01313A  0012               	return	
 25632                           
 25633                           ; BSR set to: 0
 25634                           ;Button.c: 77: {
 25635                           ;Button.c: 79: pButton->mState = Pin;
 25636  01313C  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25637  013140  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25638  013144  C0DD  FFDF         	movff	Button_Poll@Pin,indf2
 25639                           
 25640                           ; BSR set to: 0
 25641                           ;Button.c: 80: pButton->mCount = 0;
 25642  013148  0100               	movlb	0	; () banked
 25643  01314A  EE20 F001          	lfsr	2,1
 25644  01314E  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25645  013150  26D9               	addwf	fsr2l,f,c
 25646  013152  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25647  013154  22DA               	addwfc	fsr2h,f,c
 25648  013156  0E00               	movlw	0
 25649  013158  6EDF               	movwf	indf2,c
 25650                           
 25651                           ; BSR set to: 0
 25652                           ;Button.c: 83: pButton->mFunction(Pin);
 25653  01315A  0100               	movlb	0	; () banked
 25654  01315C  EE20 F004          	lfsr	2,4
 25655  013160  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25656  013162  26D9               	addwf	fsr2l,f,c
 25657  013164  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25658  013166  22DA               	addwfc	fsr2h,f,c
 25659  013168  D801               	call	u9738
 25660  01316A  0012               	return	
 25661  01316C                     u9738:
 25662  01316C  0005               	push	
 25663  01316E  6EFA               	movwf	pclath,c
 25664  013170  50DE               	movf	postinc2,w,c
 25665  013172  6EFD               	movwf	tosl,c
 25666  013174  50DE               	movf	postinc2,w,c
 25667  013176  6EFE               	movwf	tosh,c
 25668  013178  50DE               	movf	postinc2,w,c
 25669  01317A  6EFF               	movwf	tosu,c
 25670  01317C  50FA               	movf	pclath,w,c
 25671  01317E  0100               	movlb	0	; () banked
 25672  013180  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25673  013182  0012               	return		;indir
 25674  013184                     __end_of_Button_Poll:
 25675                           	opt stack 0
 25676                           tosu	equ	0xFFF
 25677                           tosh	equ	0xFFE
 25678                           tosl	equ	0xFFD
 25679                           pclath	equ	0xFFA
 25680                           tblptru	equ	0xFF8
 25681                           tblptrh	equ	0xFF7
 25682                           tblptrl	equ	0xFF6
 25683                           tablat	equ	0xFF5
 25684                           prodh	equ	0xFF4
 25685                           prodl	equ	0xFF3
 25686                           intcon	equ	0xFF2
 25687                           postinc0	equ	0xFEE
 25688                           wreg	equ	0xFE8
 25689                           indf1	equ	0xFE7
 25690                           postdec1	equ	0xFE5
 25691                           fsr1h	equ	0xFE2
 25692                           fsr1l	equ	0xFE1
 25693                           indf2	equ	0xFDF
 25694                           postinc2	equ	0xFDE
 25695                           postdec2	equ	0xFDD
 25696                           plusw2	equ	0xFDB
 25697                           fsr2h	equ	0xFDA
 25698                           fsr2l	equ	0xFD9
 25699                           status	equ	0xFD8
 25700                           
 25701 ;; *************** function _MXK_DIPSwitch *****************
 25702 ;; Defined at:
 25703 ;;		line 24 in file "Library/MXK.c"
 25704 ;; Parameters:    Size  Location     Type
 25705 ;;		None
 25706 ;; Auto vars:     Size  Location     Type
 25707 ;;		None
 25708 ;; Return value:  Size  Location     Type
 25709 ;;                  1    wreg      unsigned char 
 25710 ;; Registers used:
 25711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25712 ;; Tracked objects:
 25713 ;;		On entry : 0/0
 25714 ;;		On exit  : 0/0
 25715 ;;		Unchanged: 0/0
 25716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25721 ;;Total ram usage:        0 bytes
 25722 ;; Hardware stack levels used:    1
 25723 ;; Hardware stack levels required when called:    8
 25724 ;; This function calls:
 25725 ;;		_Port_GetQuad
 25726 ;; This function is called by:
 25727 ;;		_FunctInitButton
 25728 ;;		_Button_Poll
 25729 ;;		_getMode
 25730 ;; This function uses a non-reentrant model
 25731 ;;
 25732                           
 25733                           	psect	text129
 25734  016548                     __ptext129:
 25735                           	opt stack 0
 25736  016548                     _MXK_DIPSwitch:
 25737                           	opt stack 18
 25738                           
 25739                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 25740                           
 25741                           ;incstack = 0
 25742  016548  0E9B               	movlw	low _PortD
 25743  01654A  0100               	movlb	0	; () banked
 25744  01654C  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25745  01654E  0E00               	movlw	high _PortD
 25746  016550  0100               	movlb	0	; () banked
 25747  016552  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25748  016554  0E00               	movlw	0
 25749  016556  0100               	movlb	0	; () banked
 25750  016558  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25751  01655A  EC25  F0AE         	call	_Port_GetQuad
 25752  01655E  0012               	return	
 25753  016560                     __end_of_MXK_DIPSwitch:
 25754                           	opt stack 0
 25755                           tosu	equ	0xFFF
 25756                           tosh	equ	0xFFE
 25757                           tosl	equ	0xFFD
 25758                           pclath	equ	0xFFA
 25759                           tblptru	equ	0xFF8
 25760                           tblptrh	equ	0xFF7
 25761                           tblptrl	equ	0xFF6
 25762                           tablat	equ	0xFF5
 25763                           prodh	equ	0xFF4
 25764                           prodl	equ	0xFF3
 25765                           intcon	equ	0xFF2
 25766                           postinc0	equ	0xFEE
 25767                           wreg	equ	0xFE8
 25768                           indf1	equ	0xFE7
 25769                           postdec1	equ	0xFE5
 25770                           fsr1h	equ	0xFE2
 25771                           fsr1l	equ	0xFE1
 25772                           indf2	equ	0xFDF
 25773                           postinc2	equ	0xFDE
 25774                           postdec2	equ	0xFDD
 25775                           plusw2	equ	0xFDB
 25776                           fsr2h	equ	0xFDA
 25777                           fsr2l	equ	0xFD9
 25778                           status	equ	0xFD8
 25779                           
 25780 ;; *************** function _HMI_DIPSwitch *****************
 25781 ;; Defined at:
 25782 ;;		line 47 in file "HMI.c"
 25783 ;; Parameters:    Size  Location     Type
 25784 ;;		None
 25785 ;; Auto vars:     Size  Location     Type
 25786 ;;		None
 25787 ;; Return value:  Size  Location     Type
 25788 ;;                  1    wreg      unsigned char 
 25789 ;; Registers used:
 25790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25791 ;; Tracked objects:
 25792 ;;		On entry : 0/0
 25793 ;;		On exit  : 0/0
 25794 ;;		Unchanged: 0/0
 25795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25800 ;;Total ram usage:        0 bytes
 25801 ;; Hardware stack levels used:    1
 25802 ;; Hardware stack levels required when called:    8
 25803 ;; This function calls:
 25804 ;;		_Port_GetQuad
 25805 ;; This function is called by:
 25806 ;;		_HMI_Init
 25807 ;;		_Button_Poll
 25808 ;;		_getMode
 25809 ;; This function uses a non-reentrant model
 25810 ;;
 25811                           
 25812                           	psect	text130
 25813  016560                     __ptext130:
 25814                           	opt stack 0
 25815  016560                     _HMI_DIPSwitch:
 25816                           	opt stack 18
 25817                           
 25818                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 25819                           
 25820                           ;incstack = 0
 25821  016560  0E91               	movlw	low _PortE
 25822  016562  0100               	movlb	0	; () banked
 25823  016564  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25824  016566  0E00               	movlw	high _PortE
 25825  016568  0100               	movlb	0	; () banked
 25826  01656A  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25827  01656C  0E00               	movlw	0
 25828  01656E  0100               	movlb	0	; () banked
 25829  016570  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25830  016572  EC25  F0AE         	call	_Port_GetQuad	;wreg free
 25831  016576  0012               	return	
 25832  016578                     __end_of_HMI_DIPSwitch:
 25833                           	opt stack 0
 25834                           tosu	equ	0xFFF
 25835                           tosh	equ	0xFFE
 25836                           tosl	equ	0xFFD
 25837                           pclath	equ	0xFFA
 25838                           tblptru	equ	0xFF8
 25839                           tblptrh	equ	0xFF7
 25840                           tblptrl	equ	0xFF6
 25841                           tablat	equ	0xFF5
 25842                           prodh	equ	0xFF4
 25843                           prodl	equ	0xFF3
 25844                           intcon	equ	0xFF2
 25845                           postinc0	equ	0xFEE
 25846                           wreg	equ	0xFE8
 25847                           indf1	equ	0xFE7
 25848                           postdec1	equ	0xFE5
 25849                           fsr1h	equ	0xFE2
 25850                           fsr1l	equ	0xFE1
 25851                           indf2	equ	0xFDF
 25852                           postinc2	equ	0xFDE
 25853                           postdec2	equ	0xFDD
 25854                           plusw2	equ	0xFDB
 25855                           fsr2h	equ	0xFDA
 25856                           fsr2l	equ	0xFD9
 25857                           status	equ	0xFD8
 25858                           
 25859 ;; *************** function _HMI_DownSwitch *****************
 25860 ;; Defined at:
 25861 ;;		line 42 in file "HMI.c"
 25862 ;; Parameters:    Size  Location     Type
 25863 ;;		None
 25864 ;; Auto vars:     Size  Location     Type
 25865 ;;		None
 25866 ;; Return value:  Size  Location     Type
 25867 ;;                  1    wreg      unsigned char 
 25868 ;; Registers used:
 25869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25870 ;; Tracked objects:
 25871 ;;		On entry : 0/0
 25872 ;;		On exit  : 0/0
 25873 ;;		Unchanged: 0/0
 25874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25879 ;;Total ram usage:        0 bytes
 25880 ;; Hardware stack levels used:    1
 25881 ;; Hardware stack levels required when called:    8
 25882 ;; This function calls:
 25883 ;;		_Port_GetPin
 25884 ;; This function is called by:
 25885 ;;		_HMI_Init
 25886 ;;		_Button_Poll
 25887 ;;		_getMode
 25888 ;; This function uses a non-reentrant model
 25889 ;;
 25890                           
 25891                           	psect	text131
 25892  016578                     __ptext131:
 25893                           	opt stack 0
 25894  016578                     _HMI_DownSwitch:
 25895                           	opt stack 18
 25896                           
 25897                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 25898                           
 25899                           ;incstack = 0
 25900  016578  0E91               	movlw	low _PortE
 25901  01657A  0100               	movlb	0	; () banked
 25902  01657C  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25903  01657E  0E00               	movlw	high _PortE
 25904  016580  0100               	movlb	0	; () banked
 25905  016582  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25906  016584  0E06               	movlw	6
 25907  016586  0100               	movlb	0	; () banked
 25908  016588  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25909  01658A  ECFC  F0AE         	call	_Port_GetPin	;wreg free
 25910  01658E  0012               	return	
 25911  016590                     __end_of_HMI_DownSwitch:
 25912                           	opt stack 0
 25913                           tosu	equ	0xFFF
 25914                           tosh	equ	0xFFE
 25915                           tosl	equ	0xFFD
 25916                           pclath	equ	0xFFA
 25917                           tblptru	equ	0xFF8
 25918                           tblptrh	equ	0xFF7
 25919                           tblptrl	equ	0xFF6
 25920                           tablat	equ	0xFF5
 25921                           prodh	equ	0xFF4
 25922                           prodl	equ	0xFF3
 25923                           intcon	equ	0xFF2
 25924                           postinc0	equ	0xFEE
 25925                           wreg	equ	0xFE8
 25926                           indf1	equ	0xFE7
 25927                           postdec1	equ	0xFE5
 25928                           fsr1h	equ	0xFE2
 25929                           fsr1l	equ	0xFE1
 25930                           indf2	equ	0xFDF
 25931                           postinc2	equ	0xFDE
 25932                           postdec2	equ	0xFDD
 25933                           plusw2	equ	0xFDB
 25934                           fsr2h	equ	0xFDA
 25935                           fsr2l	equ	0xFD9
 25936                           status	equ	0xFD8
 25937                           
 25938 ;; *************** function _HMI_UpSwitch *****************
 25939 ;; Defined at:
 25940 ;;		line 37 in file "HMI.c"
 25941 ;; Parameters:    Size  Location     Type
 25942 ;;		None
 25943 ;; Auto vars:     Size  Location     Type
 25944 ;;		None
 25945 ;; Return value:  Size  Location     Type
 25946 ;;                  1    wreg      unsigned char 
 25947 ;; Registers used:
 25948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25949 ;; Tracked objects:
 25950 ;;		On entry : 0/0
 25951 ;;		On exit  : 0/0
 25952 ;;		Unchanged: 0/0
 25953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25958 ;;Total ram usage:        0 bytes
 25959 ;; Hardware stack levels used:    1
 25960 ;; Hardware stack levels required when called:    8
 25961 ;; This function calls:
 25962 ;;		_Port_GetPin
 25963 ;; This function is called by:
 25964 ;;		_HMI_Init
 25965 ;;		_Button_Poll
 25966 ;;		_getMode
 25967 ;; This function uses a non-reentrant model
 25968 ;;
 25969                           
 25970                           	psect	text132
 25971  016590                     __ptext132:
 25972                           	opt stack 0
 25973  016590                     _HMI_UpSwitch:
 25974                           	opt stack 18
 25975                           
 25976                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 25977                           
 25978                           ;incstack = 0
 25979  016590  0E91               	movlw	low _PortE
 25980  016592  0100               	movlb	0	; () banked
 25981  016594  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25982  016596  0E00               	movlw	high _PortE
 25983  016598  0100               	movlb	0	; () banked
 25984  01659A  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25985  01659C  0E07               	movlw	7
 25986  01659E  0100               	movlb	0	; () banked
 25987  0165A0  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25988  0165A2  ECFC  F0AE         	call	_Port_GetPin	;wreg free
 25989  0165A6  0012               	return	
 25990  0165A8                     __end_of_HMI_UpSwitch:
 25991                           	opt stack 0
 25992                           tosu	equ	0xFFF
 25993                           tosh	equ	0xFFE
 25994                           tosl	equ	0xFFD
 25995                           pclath	equ	0xFFA
 25996                           tblptru	equ	0xFF8
 25997                           tblptrh	equ	0xFF7
 25998                           tblptrl	equ	0xFF6
 25999                           tablat	equ	0xFF5
 26000                           prodh	equ	0xFF4
 26001                           prodl	equ	0xFF3
 26002                           intcon	equ	0xFF2
 26003                           postinc0	equ	0xFEE
 26004                           wreg	equ	0xFE8
 26005                           indf1	equ	0xFE7
 26006                           postdec1	equ	0xFE5
 26007                           fsr1h	equ	0xFE2
 26008                           fsr1l	equ	0xFE1
 26009                           indf2	equ	0xFDF
 26010                           postinc2	equ	0xFDE
 26011                           postdec2	equ	0xFDD
 26012                           plusw2	equ	0xFDB
 26013                           fsr2h	equ	0xFDA
 26014                           fsr2l	equ	0xFD9
 26015                           status	equ	0xFD8
 26016                           
 26017 ;; *************** function _HMI_RightSwitch *****************
 26018 ;; Defined at:
 26019 ;;		line 32 in file "HMI.c"
 26020 ;; Parameters:    Size  Location     Type
 26021 ;;		None
 26022 ;; Auto vars:     Size  Location     Type
 26023 ;;		None
 26024 ;; Return value:  Size  Location     Type
 26025 ;;                  1    wreg      unsigned char 
 26026 ;; Registers used:
 26027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26028 ;; Tracked objects:
 26029 ;;		On entry : 0/0
 26030 ;;		On exit  : 0/0
 26031 ;;		Unchanged: 0/0
 26032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26037 ;;Total ram usage:        0 bytes
 26038 ;; Hardware stack levels used:    1
 26039 ;; Hardware stack levels required when called:    8
 26040 ;; This function calls:
 26041 ;;		_Port_GetPin
 26042 ;; This function is called by:
 26043 ;;		_HMI_Init
 26044 ;;		_Button_Poll
 26045 ;;		_getMode
 26046 ;; This function uses a non-reentrant model
 26047 ;;
 26048                           
 26049                           	psect	text133
 26050  0165A8                     __ptext133:
 26051                           	opt stack 0
 26052  0165A8                     _HMI_RightSwitch:
 26053                           	opt stack 18
 26054                           
 26055                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 26056                           
 26057                           ;incstack = 0
 26058  0165A8  0E91               	movlw	low _PortE
 26059  0165AA  0100               	movlb	0	; () banked
 26060  0165AC  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26061  0165AE  0E00               	movlw	high _PortE
 26062  0165B0  0100               	movlb	0	; () banked
 26063  0165B2  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26064  0165B4  0E04               	movlw	4
 26065  0165B6  0100               	movlb	0	; () banked
 26066  0165B8  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26067  0165BA  ECFC  F0AE         	call	_Port_GetPin	;wreg free
 26068  0165BE  0012               	return	
 26069  0165C0                     __end_of_HMI_RightSwitch:
 26070                           	opt stack 0
 26071                           tosu	equ	0xFFF
 26072                           tosh	equ	0xFFE
 26073                           tosl	equ	0xFFD
 26074                           pclath	equ	0xFFA
 26075                           tblptru	equ	0xFF8
 26076                           tblptrh	equ	0xFF7
 26077                           tblptrl	equ	0xFF6
 26078                           tablat	equ	0xFF5
 26079                           prodh	equ	0xFF4
 26080                           prodl	equ	0xFF3
 26081                           intcon	equ	0xFF2
 26082                           postinc0	equ	0xFEE
 26083                           wreg	equ	0xFE8
 26084                           indf1	equ	0xFE7
 26085                           postdec1	equ	0xFE5
 26086                           fsr1h	equ	0xFE2
 26087                           fsr1l	equ	0xFE1
 26088                           indf2	equ	0xFDF
 26089                           postinc2	equ	0xFDE
 26090                           postdec2	equ	0xFDD
 26091                           plusw2	equ	0xFDB
 26092                           fsr2h	equ	0xFDA
 26093                           fsr2l	equ	0xFD9
 26094                           status	equ	0xFD8
 26095                           
 26096 ;; *************** function _HMI_LeftSwitch *****************
 26097 ;; Defined at:
 26098 ;;		line 27 in file "HMI.c"
 26099 ;; Parameters:    Size  Location     Type
 26100 ;;		None
 26101 ;; Auto vars:     Size  Location     Type
 26102 ;;		None
 26103 ;; Return value:  Size  Location     Type
 26104 ;;                  1    wreg      unsigned char 
 26105 ;; Registers used:
 26106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26107 ;; Tracked objects:
 26108 ;;		On entry : 0/0
 26109 ;;		On exit  : 0/0
 26110 ;;		Unchanged: 0/0
 26111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26116 ;;Total ram usage:        0 bytes
 26117 ;; Hardware stack levels used:    1
 26118 ;; Hardware stack levels required when called:    8
 26119 ;; This function calls:
 26120 ;;		_Port_GetPin
 26121 ;; This function is called by:
 26122 ;;		_HMI_Init
 26123 ;;		_Button_Poll
 26124 ;;		_getMode
 26125 ;; This function uses a non-reentrant model
 26126 ;;
 26127                           
 26128                           	psect	text134
 26129  0165C0                     __ptext134:
 26130                           	opt stack 0
 26131  0165C0                     _HMI_LeftSwitch:
 26132                           	opt stack 18
 26133                           
 26134                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 26135                           
 26136                           ;incstack = 0
 26137  0165C0  0E91               	movlw	low _PortE
 26138  0165C2  0100               	movlb	0	; () banked
 26139  0165C4  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26140  0165C6  0E00               	movlw	high _PortE
 26141  0165C8  0100               	movlb	0	; () banked
 26142  0165CA  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26143  0165CC  0E05               	movlw	5
 26144  0165CE  0100               	movlb	0	; () banked
 26145  0165D0  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26146  0165D2  ECFC  F0AE         	call	_Port_GetPin	;wreg free
 26147  0165D6  0012               	return	
 26148  0165D8                     __end_of_HMI_LeftSwitch:
 26149                           	opt stack 0
 26150                           tosu	equ	0xFFF
 26151                           tosh	equ	0xFFE
 26152                           tosl	equ	0xFFD
 26153                           pclath	equ	0xFFA
 26154                           tblptru	equ	0xFF8
 26155                           tblptrh	equ	0xFF7
 26156                           tblptrl	equ	0xFF6
 26157                           tablat	equ	0xFF5
 26158                           prodh	equ	0xFF4
 26159                           prodl	equ	0xFF3
 26160                           intcon	equ	0xFF2
 26161                           postinc0	equ	0xFEE
 26162                           wreg	equ	0xFE8
 26163                           indf1	equ	0xFE7
 26164                           postdec1	equ	0xFE5
 26165                           fsr1h	equ	0xFE2
 26166                           fsr1l	equ	0xFE1
 26167                           indf2	equ	0xFDF
 26168                           postinc2	equ	0xFDE
 26169                           postdec2	equ	0xFDD
 26170                           plusw2	equ	0xFDB
 26171                           fsr2h	equ	0xFDA
 26172                           fsr2l	equ	0xFD9
 26173                           status	equ	0xFD8
 26174                           
 26175 ;; *************** function _MXK_TestButton *****************
 26176 ;; Defined at:
 26177 ;;		line 14 in file "Library/MXK.c"
 26178 ;; Parameters:    Size  Location     Type
 26179 ;;		None
 26180 ;; Auto vars:     Size  Location     Type
 26181 ;;		None
 26182 ;; Return value:  Size  Location     Type
 26183 ;;                  1    wreg      unsigned char 
 26184 ;; Registers used:
 26185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26186 ;; Tracked objects:
 26187 ;;		On entry : 0/0
 26188 ;;		On exit  : 0/0
 26189 ;;		Unchanged: 0/0
 26190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26195 ;;Total ram usage:        0 bytes
 26196 ;; Hardware stack levels used:    1
 26197 ;; Hardware stack levels required when called:    8
 26198 ;; This function calls:
 26199 ;;		_Port_GetPin
 26200 ;; This function is called by:
 26201 ;;		_FunctInitButton
 26202 ;;		_Button_Poll
 26203 ;;		_getMode
 26204 ;; This function uses a non-reentrant model
 26205 ;;
 26206                           
 26207                           	psect	text135
 26208  0165D8                     __ptext135:
 26209                           	opt stack 0
 26210  0165D8                     _MXK_TestButton:
 26211                           	opt stack 18
 26212                           
 26213                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 26214                           
 26215                           ;incstack = 0
 26216  0165D8  0EAC               	movlw	low _PortB
 26217  0165DA  0100               	movlb	0	; () banked
 26218  0165DC  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26219  0165DE  0E03               	movlw	high _PortB
 26220  0165E0  0100               	movlb	0	; () banked
 26221  0165E2  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26222  0165E4  0E04               	movlw	4
 26223  0165E6  0100               	movlb	0	; () banked
 26224  0165E8  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26225  0165EA  ECFC  F0AE         	call	_Port_GetPin	;wreg free
 26226  0165EE  0012               	return	
 26227  0165F0                     __end_of_MXK_TestButton:
 26228                           	opt stack 0
 26229                           tosu	equ	0xFFF
 26230                           tosh	equ	0xFFE
 26231                           tosl	equ	0xFFD
 26232                           pclath	equ	0xFFA
 26233                           tblptru	equ	0xFF8
 26234                           tblptrh	equ	0xFF7
 26235                           tblptrl	equ	0xFF6
 26236                           tablat	equ	0xFF5
 26237                           prodh	equ	0xFF4
 26238                           prodl	equ	0xFF3
 26239                           intcon	equ	0xFF2
 26240                           postinc0	equ	0xFEE
 26241                           wreg	equ	0xFE8
 26242                           indf1	equ	0xFE7
 26243                           postdec1	equ	0xFE5
 26244                           fsr1h	equ	0xFE2
 26245                           fsr1l	equ	0xFE1
 26246                           indf2	equ	0xFDF
 26247                           postinc2	equ	0xFDE
 26248                           postdec2	equ	0xFDD
 26249                           plusw2	equ	0xFDB
 26250                           fsr2h	equ	0xFDA
 26251                           fsr2l	equ	0xFD9
 26252                           status	equ	0xFD8
 26253                           
 26254 ;; *************** function _Port_GetQuad *****************
 26255 ;; Defined at:
 26256 ;;		line 498 in file "Library/Port.c"
 26257 ;; Parameters:    Size  Location     Type
 26258 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 26259 ;;		 -> PortE(10), PortD(10), 
 26260 ;;  pQuad           1    2[BANK0 ] enum E6776
 26261 ;; Auto vars:     Size  Location     Type
 26262 ;;  Output          1    5[BANK0 ] unsigned char 
 26263 ;; Return value:  Size  Location     Type
 26264 ;;                  1    wreg      unsigned char 
 26265 ;; Registers used:
 26266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26267 ;; Tracked objects:
 26268 ;;		On entry : 0/0
 26269 ;;		On exit  : 0/0
 26270 ;;		Unchanged: 0/0
 26271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26272 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26274 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26275 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26276 ;;Total ram usage:        6 bytes
 26277 ;; Hardware stack levels used:    1
 26278 ;; Hardware stack levels required when called:    7
 26279 ;; This function calls:
 26280 ;;		Nothing
 26281 ;; This function is called by:
 26282 ;;		_HMI_DIPSwitch
 26283 ;;		_MXK_DIPSwitch
 26284 ;;		_Port_ToggleQuad
 26285 ;; This function uses a non-reentrant model
 26286 ;;
 26287                           
 26288                           	psect	text136
 26289  015C4A                     __ptext136:
 26290                           	opt stack 0
 26291  015C4A                     _Port_GetQuad:
 26292                           	opt stack 18
 26293                           
 26294                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 26295                           
 26296                           ;incstack = 0
 26297  015C4A  0100               	movlb	0	; () banked
 26298  015C4C  EE20 F006          	lfsr	2,6
 26299  015C50  51BA               	movf	Port_GetQuad@pInput& (0+255),w,b
 26300  015C52  26D9               	addwf	fsr2l,f,c
 26301  015C54  51BB               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 26302  015C56  22DA               	addwfc	fsr2h,f,c
 26303  015C58  CFDE F0BD          	movff	postinc2,??_Port_GetQuad
 26304  015C5C  CFDD F0BE          	movff	postdec2,??_Port_GetQuad+1
 26305  015C60  C0BD  FFD9         	movff	??_Port_GetQuad,fsr2l
 26306  015C64  C0BE  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 26307  015C68  50DF               	movf	indf2,w,c
 26308  015C6A  0100               	movlb	0	; () banked
 26309  015C6C  6FBF               	movwf	Port_GetQuad@Output& (0+255),b
 26310                           
 26311                           ; BSR set to: 0
 26312                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 26313  015C6E  0100               	movlb	0	; () banked
 26314  015C70  51BC               	movf	Port_GetQuad@pQuad& (0+255),w,b
 26315  015C72  0D04               	mullw	4
 26316  015C74  28F3               	incf	prodl,w,c
 26317  015C76  0100               	movlb	0	; () banked
 26318  015C78  6FBD               	movwf	??_Port_GetQuad& (0+255),b
 26319  015C7A  D003               	goto	u9230
 26320  015C7C                     u9235:
 26321  015C7C  0100               	movlb	0	; () banked
 26322  015C7E  90D8               	bcf	status,0,c
 26323  015C80  33BF               	rrcf	Port_GetQuad@Output& (0+255),f,b
 26324  015C82                     u9230:
 26325  015C82  0100               	movlb	0	; () banked
 26326  015C84  2FBD               	decfsz	??_Port_GetQuad& (0+255),f,b
 26327  015C86  D7FA               	goto	u9235
 26328                           
 26329                           ;Port.c: 502: Output &= 0xF;
 26330  015C88  0E0F               	movlw	15
 26331  015C8A  0100               	movlb	0	; () banked
 26332  015C8C  17BF               	andwf	Port_GetQuad@Output& (0+255),f,b
 26333                           
 26334                           ; BSR set to: 0
 26335                           ;Port.c: 503: return Output;
 26336  015C8E  0100               	movlb	0	; () banked
 26337  015C90  51BF               	movf	Port_GetQuad@Output& (0+255),w,b
 26338  015C92  0012               	return	
 26339  015C94                     __end_of_Port_GetQuad:
 26340                           	opt stack 0
 26341                           tosu	equ	0xFFF
 26342                           tosh	equ	0xFFE
 26343                           tosl	equ	0xFFD
 26344                           pclath	equ	0xFFA
 26345                           tblptru	equ	0xFF8
 26346                           tblptrh	equ	0xFF7
 26347                           tblptrl	equ	0xFF6
 26348                           tablat	equ	0xFF5
 26349                           prodh	equ	0xFF4
 26350                           prodl	equ	0xFF3
 26351                           intcon	equ	0xFF2
 26352                           postinc0	equ	0xFEE
 26353                           wreg	equ	0xFE8
 26354                           indf1	equ	0xFE7
 26355                           postdec1	equ	0xFE5
 26356                           fsr1h	equ	0xFE2
 26357                           fsr1l	equ	0xFE1
 26358                           indf2	equ	0xFDF
 26359                           postinc2	equ	0xFDE
 26360                           postdec2	equ	0xFDD
 26361                           plusw2	equ	0xFDB
 26362                           fsr2h	equ	0xFDA
 26363                           fsr2l	equ	0xFD9
 26364                           status	equ	0xFD8
 26365                           
 26366 ;; *************** function _Event_DIPSwitch *****************
 26367 ;; Defined at:
 26368 ;;		line 22 in file "Events.c"
 26369 ;; Parameters:    Size  Location     Type
 26370 ;;  pState          1    wreg     unsigned char 
 26371 ;; Auto vars:     Size  Location     Type
 26372 ;;  pState          1   25[BANK0 ] unsigned char 
 26373 ;;  Bar             1   26[BANK0 ] unsigned char 
 26374 ;; Return value:  Size  Location     Type
 26375 ;;                  1    wreg      void 
 26376 ;; Registers used:
 26377 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26378 ;; Tracked objects:
 26379 ;;		On entry : 0/0
 26380 ;;		On exit  : 0/0
 26381 ;;		Unchanged: 0/0
 26382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26384 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26387 ;;Total ram usage:        2 bytes
 26388 ;; Hardware stack levels used:    1
 26389 ;; Hardware stack levels required when called:   13
 26390 ;; This function calls:
 26391 ;;		_HMI_GetBar
 26392 ;;		_HMI_SetBar
 26393 ;;		_LED_Toggle
 26394 ;; This function is called by:
 26395 ;;		_FunctInitButton
 26396 ;;		_Button_Poll
 26397 ;; This function uses a non-reentrant model
 26398 ;;
 26399                           
 26400                           	psect	text137
 26401  01624E                     __ptext137:
 26402                           	opt stack 0
 26403  01624E                     _Event_DIPSwitch:
 26404                           	opt stack 13
 26405                           
 26406                           ; BSR set to: 0
 26407                           ;incstack = 0
 26408                           ;Event_DIPSwitch@pState stored from wreg
 26409  01624E  0100               	movlb	0	; () banked
 26410  016250  6FD3               	movwf	Event_DIPSwitch@pState& (0+255),b
 26411                           
 26412                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 26413  016252  EC9C  F0B3         	call	_HMI_GetBar	;wreg free
 26414  016256  0100               	movlb	0	; () banked
 26415  016258  6FD4               	movwf	Event_DIPSwitch@Bar& (0+255),b
 26416                           
 26417                           ; BSR set to: 0
 26418                           ;Events.c: 25: Bar &= 0x0F;
 26419  01625A  0E0F               	movlw	15
 26420  01625C  0100               	movlb	0	; () banked
 26421  01625E  17D4               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 26422                           
 26423                           ; BSR set to: 0
 26424                           ;Events.c: 26: pState <<= 4;
 26425  016260  0100               	movlb	0	; () banked
 26426  016262  3BD3               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 26427  016264  0EF0               	movlw	240
 26428  016266  17D3               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 26429                           
 26430                           ; BSR set to: 0
 26431                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26432  016268  0100               	movlb	0	; () banked
 26433  01626A  51D3               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26434  01626C  0100               	movlb	0	; () banked
 26435  01626E  11D4               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26436  016270  EC7E  F0B3         	call	_HMI_SetBar
 26437                           
 26438                           ;Events.c: 32: LED_Toggle(eLED1);
 26439  016274  0E00               	movlw	0
 26440  016276  EC92  F0AE         	call	_LED_Toggle
 26441  01627A  0012               	return		;funcret
 26442  01627C                     __end_of_Event_DIPSwitch:
 26443                           	opt stack 0
 26444                           tosu	equ	0xFFF
 26445                           tosh	equ	0xFFE
 26446                           tosl	equ	0xFFD
 26447                           pclath	equ	0xFFA
 26448                           tblptru	equ	0xFF8
 26449                           tblptrh	equ	0xFF7
 26450                           tblptrl	equ	0xFF6
 26451                           tablat	equ	0xFF5
 26452                           prodh	equ	0xFF4
 26453                           prodl	equ	0xFF3
 26454                           intcon	equ	0xFF2
 26455                           postinc0	equ	0xFEE
 26456                           wreg	equ	0xFE8
 26457                           indf1	equ	0xFE7
 26458                           postdec1	equ	0xFE5
 26459                           fsr1h	equ	0xFE2
 26460                           fsr1l	equ	0xFE1
 26461                           indf2	equ	0xFDF
 26462                           postinc2	equ	0xFDE
 26463                           postdec2	equ	0xFDD
 26464                           plusw2	equ	0xFDB
 26465                           fsr2h	equ	0xFDA
 26466                           fsr2l	equ	0xFD9
 26467                           status	equ	0xFD8
 26468                           
 26469 ;; *************** function _Event_NULL *****************
 26470 ;; Defined at:
 26471 ;;		line 9 in file "Events.c"
 26472 ;; Parameters:    Size  Location     Type
 26473 ;;  pState          1    wreg     unsigned char 
 26474 ;; Auto vars:     Size  Location     Type
 26475 ;;  pState          1    0[COMRAM] unsigned char 
 26476 ;; Return value:  Size  Location     Type
 26477 ;;                  1    wreg      void 
 26478 ;; Registers used:
 26479 ;;		wreg
 26480 ;; Tracked objects:
 26481 ;;		On entry : 0/0
 26482 ;;		On exit  : 0/0
 26483 ;;		Unchanged: 0/0
 26484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26489 ;;Total ram usage:        0 bytes
 26490 ;; Hardware stack levels used:    1
 26491 ;; Hardware stack levels required when called:    7
 26492 ;; This function calls:
 26493 ;;		Nothing
 26494 ;; This function is called by:
 26495 ;;		_HMI_Init
 26496 ;;		_Button_Poll
 26497 ;; This function uses a non-reentrant model
 26498 ;;
 26499                           
 26500                           	psect	text138
 26501  001404                     __ptext138:
 26502                           	opt stack 0
 26503  001404                     _Event_NULL:
 26504                           	opt stack 19
 26505                           
 26506                           ;incstack = 0
 26507  001404  0012               	return		;funcret
 26508  001406                     __end_of_Event_NULL:
 26509                           	opt stack 0
 26510                           tosu	equ	0xFFF
 26511                           tosh	equ	0xFFE
 26512                           tosl	equ	0xFFD
 26513                           pclath	equ	0xFFA
 26514                           tblptru	equ	0xFF8
 26515                           tblptrh	equ	0xFF7
 26516                           tblptrl	equ	0xFF6
 26517                           tablat	equ	0xFF5
 26518                           prodh	equ	0xFF4
 26519                           prodl	equ	0xFF3
 26520                           intcon	equ	0xFF2
 26521                           postinc0	equ	0xFEE
 26522                           wreg	equ	0xFE8
 26523                           indf1	equ	0xFE7
 26524                           postdec1	equ	0xFE5
 26525                           fsr1h	equ	0xFE2
 26526                           fsr1l	equ	0xFE1
 26527                           indf2	equ	0xFDF
 26528                           postinc2	equ	0xFDE
 26529                           postdec2	equ	0xFDD
 26530                           plusw2	equ	0xFDB
 26531                           fsr2h	equ	0xFDA
 26532                           fsr2l	equ	0xFD9
 26533                           status	equ	0xFD8
 26534                           
 26535 ;; *************** function _Event_TestButton *****************
 26536 ;; Defined at:
 26537 ;;		line 52 in file "Events.c"
 26538 ;; Parameters:    Size  Location     Type
 26539 ;;  pState          1    wreg     unsigned char 
 26540 ;; Auto vars:     Size  Location     Type
 26541 ;;  pState          1   25[BANK0 ] unsigned char 
 26542 ;; Return value:  Size  Location     Type
 26543 ;;                  1    wreg      void 
 26544 ;; Registers used:
 26545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26546 ;; Tracked objects:
 26547 ;;		On entry : 0/0
 26548 ;;		On exit  : 0/0
 26549 ;;		Unchanged: 0/0
 26550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26554 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26555 ;;Total ram usage:        1 bytes
 26556 ;; Hardware stack levels used:    1
 26557 ;; Hardware stack levels required when called:   13
 26558 ;; This function calls:
 26559 ;;		_HMI_SetButton
 26560 ;;		_HMI_SetNumber
 26561 ;;		_LED_Toggle
 26562 ;; This function is called by:
 26563 ;;		_FunctInitButton
 26564 ;;		_Button_Poll
 26565 ;; This function uses a non-reentrant model
 26566 ;;
 26567                           
 26568                           	psect	text139
 26569  01603C                     __ptext139:
 26570                           	opt stack 0
 26571  01603C                     _Event_TestButton:
 26572                           	opt stack 13
 26573                           
 26574                           ;incstack = 0
 26575                           ;Event_TestButton@pState stored from wreg
 26576  01603C  0100               	movlb	0	; () banked
 26577  01603E  6FD3               	movwf	Event_TestButton@pState& (0+255),b
 26578                           
 26579                           ;Events.c: 56: static UINT8 j = 0;
 26580                           ;Events.c: 60: if (pState == 0)
 26581  016040  0100               	movlb	0	; () banked
 26582  016042  51D3               	movf	Event_TestButton@pState& (0+255),w,b
 26583  016044  0100               	movlb	0	; () banked
 26584  016046  A4D8               	btfss	status,2,c
 26585  016048  D013               	goto	l1873
 26586                           
 26587                           ; BSR set to: 0
 26588                           ;Events.c: 61: {
 26589                           ;Events.c: 62: j++;
 26590  01604A  0100               	movlb	0	; () banked
 26591  01604C  2B89               	incf	Event_TestButton@j& (0+255),f,b
 26592                           
 26593                           ; BSR set to: 0
 26594                           ;Events.c: 63: val += j;
 26595  01604E  0100               	movlb	0	; () banked
 26596  016050  5189               	movf	Event_TestButton@j& (0+255),w,b
 26597  016052  0100               	movlb	0	; () banked
 26598  016054  277D               	addwf	_val& (0+255),f,b
 26599  016056  0E00               	movlw	0
 26600  016058  237E               	addwfc	(_val+1)& (0+255),f,b
 26601                           
 26602                           ; BSR set to: 0
 26603                           ;Events.c: 64: HMI_SetNumber( val );
 26604  01605A  C07D  F0D0         	movff	_val,HMI_SetNumber@pInput
 26605  01605E  C07E  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 26606  016062  EC6A  F0B1         	call	_HMI_SetNumber	;wreg free
 26607                           
 26608                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26609  016066  0100               	movlb	0	; () banked
 26610  016068  5189               	movf	Event_TestButton@j& (0+255),w,b
 26611  01606A  0B03               	andlw	3
 26612  01606C  EC42  F0A6         	call	_HMI_SetButton
 26613  016070                     l1873:
 26614                           
 26615                           ;Events.c: 68: }
 26616                           ;Events.c: 72: LED_Toggle(eLED1);
 26617  016070  0E00               	movlw	0
 26618  016072  EC92  F0AE         	call	_LED_Toggle
 26619  016076  0012               	return		;funcret
 26620  016078                     __end_of_Event_TestButton:
 26621                           	opt stack 0
 26622                           tosu	equ	0xFFF
 26623                           tosh	equ	0xFFE
 26624                           tosl	equ	0xFFD
 26625                           pclath	equ	0xFFA
 26626                           tblptru	equ	0xFF8
 26627                           tblptrh	equ	0xFF7
 26628                           tblptrl	equ	0xFF6
 26629                           tablat	equ	0xFF5
 26630                           prodh	equ	0xFF4
 26631                           prodl	equ	0xFF3
 26632                           intcon	equ	0xFF2
 26633                           postinc0	equ	0xFEE
 26634                           wreg	equ	0xFE8
 26635                           indf1	equ	0xFE7
 26636                           postdec1	equ	0xFE5
 26637                           fsr1h	equ	0xFE2
 26638                           fsr1l	equ	0xFE1
 26639                           indf2	equ	0xFDF
 26640                           postinc2	equ	0xFDE
 26641                           postdec2	equ	0xFDD
 26642                           plusw2	equ	0xFDB
 26643                           fsr2h	equ	0xFDA
 26644                           fsr2l	equ	0xFD9
 26645                           status	equ	0xFD8
 26646                           
 26647 ;; *************** function _HMI_SetNumber *****************
 26648 ;; Defined at:
 26649 ;;		line 221 in file "HMI.c"
 26650 ;; Parameters:    Size  Location     Type
 26651 ;;  pInput          2   22[BANK0 ] int 
 26652 ;; Auto vars:     Size  Location     Type
 26653 ;;		None
 26654 ;; Return value:  Size  Location     Type
 26655 ;;                  1    wreg      void 
 26656 ;; Registers used:
 26657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26658 ;; Tracked objects:
 26659 ;;		On entry : 0/0
 26660 ;;		On exit  : 0/0
 26661 ;;		Unchanged: 0/0
 26662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26663 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26667 ;;Total ram usage:        2 bytes
 26668 ;; Hardware stack levels used:    1
 26669 ;; Hardware stack levels required when called:    9
 26670 ;; This function calls:
 26671 ;;		_HMI_SetSegments
 26672 ;;		_itos
 26673 ;; This function is called by:
 26674 ;;		_Event_TestButton
 26675 ;;		_findClosestWall
 26676 ;;		_mode1
 26677 ;;		_Event_HMI_UpButton
 26678 ;;		_Event_HMI_DownButton
 26679 ;; This function uses a non-reentrant model
 26680 ;;
 26681                           
 26682                           	psect	text140
 26683  0162D4                     __ptext140:
 26684                           	opt stack 0
 26685  0162D4                     _HMI_SetNumber:
 26686                           	opt stack 16
 26687                           
 26688                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26689                           
 26690                           ;incstack = 0
 26691  0162D4  C0D0  F0C6         	movff	HMI_SetNumber@pInput,itos@input
 26692  0162D8  C0D1  F0C7         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26693  0162DC  0E3E               	movlw	low _HMIBoard
 26694  0162DE  0100               	movlb	0	; () banked
 26695  0162E0  6FC8               	movwf	itos@destination& (0+255),b
 26696  0162E2  0E03               	movlw	high _HMIBoard
 26697  0162E4  0100               	movlb	0	; () banked
 26698  0162E6  6FC9               	movwf	(itos@destination+1)& (0+255),b
 26699  0162E8  EC1F  F09E         	call	_itos	;wreg free
 26700                           
 26701                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26702  0162EC  0E3E               	movlw	low _HMIBoard
 26703  0162EE  0100               	movlb	0	; () banked
 26704  0162F0  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
 26705  0162F2  0E03               	movlw	high _HMIBoard
 26706  0162F4  0100               	movlb	0	; () banked
 26707  0162F6  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26708  0162F8  ECA8  F0A1         	call	_HMI_SetSegments	;wreg free
 26709  0162FC  0012               	return		;funcret
 26710  0162FE                     __end_of_HMI_SetNumber:
 26711                           	opt stack 0
 26712                           tosu	equ	0xFFF
 26713                           tosh	equ	0xFFE
 26714                           tosl	equ	0xFFD
 26715                           pclath	equ	0xFFA
 26716                           tblptru	equ	0xFF8
 26717                           tblptrh	equ	0xFF7
 26718                           tblptrl	equ	0xFF6
 26719                           tablat	equ	0xFF5
 26720                           prodh	equ	0xFF4
 26721                           prodl	equ	0xFF3
 26722                           intcon	equ	0xFF2
 26723                           postinc0	equ	0xFEE
 26724                           wreg	equ	0xFE8
 26725                           indf1	equ	0xFE7
 26726                           postdec1	equ	0xFE5
 26727                           fsr1h	equ	0xFE2
 26728                           fsr1l	equ	0xFE1
 26729                           indf2	equ	0xFDF
 26730                           postinc2	equ	0xFDE
 26731                           postdec2	equ	0xFDD
 26732                           plusw2	equ	0xFDB
 26733                           fsr2h	equ	0xFDA
 26734                           fsr2l	equ	0xFD9
 26735                           status	equ	0xFD8
 26736                           
 26737 ;; *************** function _itos *****************
 26738 ;; Defined at:
 26739 ;;		line 369 in file "Library/Types.c"
 26740 ;; Parameters:    Size  Location     Type
 26741 ;;  input           2   12[BANK0 ] unsigned short 
 26742 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26743 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26744 ;; Auto vars:     Size  Location     Type
 26745 ;;  Out             2   20[BANK0 ] unsigned short 
 26746 ;;  Length          2   18[BANK0 ] unsigned short 
 26747 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26748 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26749 ;; Return value:  Size  Location     Type
 26750 ;;                  1    wreg      void 
 26751 ;; Registers used:
 26752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26753 ;; Tracked objects:
 26754 ;;		On entry : 0/0
 26755 ;;		On exit  : 0/0
 26756 ;;		Unchanged: 0/0
 26757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26758 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26759 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26761 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26762 ;;Total ram usage:       10 bytes
 26763 ;; Hardware stack levels used:    1
 26764 ;; Hardware stack levels required when called:    8
 26765 ;; This function calls:
 26766 ;;		___lwdiv
 26767 ;;		___lwmod
 26768 ;;		_reverse
 26769 ;; This function is called by:
 26770 ;;		_HMI_SetNumber
 26771 ;; This function uses a non-reentrant model
 26772 ;;
 26773                           
 26774                           	psect	text141
 26775  013C3E                     __ptext141:
 26776                           	opt stack 0
 26777  013C3E                     _itos:
 26778                           	opt stack 16
 26779                           
 26780                           ;Types.c: 371: UINT16 Out = input;
 26781                           
 26782                           ;incstack = 0
 26783  013C3E  C0C6  F0CE         	movff	itos@input,itos@Out
 26784  013C42  C0C7  F0CF         	movff	itos@input+1,itos@Out+1
 26785                           
 26786                           ;Types.c: 372: UINT16 Length = 0;
 26787  013C46  0E00               	movlw	0
 26788  013C48  0100               	movlb	0	; () banked
 26789  013C4A  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26790  013C4C  0E00               	movlw	0
 26791  013C4E  6FCC               	movwf	itos@Length& (0+255),b
 26792                           
 26793                           ; BSR set to: 0
 26794                           ;Types.c: 373: char *Data = destination;
 26795  013C50  C0C8  F0CA         	movff	itos@destination,itos@Data
 26796  013C54  C0C9  F0CB         	movff	itos@destination+1,itos@Data+1
 26797                           
 26798                           ; BSR set to: 0
 26799                           ;Types.c: 374: if(Out == 0)
 26800  013C58  0100               	movlb	0	; () banked
 26801  013C5A  51CE               	movf	itos@Out& (0+255),w,b
 26802  013C5C  0100               	movlb	0	; () banked
 26803  013C5E  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26804  013C60  A4D8               	btfss	status,2,c
 26805  013C62  D034               	goto	l929
 26806                           
 26807                           ; BSR set to: 0
 26808                           ;Types.c: 375: {
 26809                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26810  013C64  C0CA  FFD9         	movff	itos@Data,fsr2l
 26811  013C68  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26812  013C6C  0E30               	movlw	48
 26813  013C6E  6EDF               	movwf	indf2,c
 26814                           
 26815                           ; BSR set to: 0
 26816                           ;Types.c: 377: Length = 1;
 26817  013C70  0E00               	movlw	0
 26818  013C72  0100               	movlb	0	; () banked
 26819  013C74  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26820  013C76  0E01               	movlw	1
 26821  013C78  6FCC               	movwf	itos@Length& (0+255),b
 26822                           
 26823                           ;Types.c: 378: }
 26824  013C7A  D040               	goto	l928
 26825  013C7C                     
 26826                           ; BSR set to: 0
 26827                           ;Types.c: 382: {
 26828                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26829                           
 26830                           ; BSR set to: 0
 26831  013C7C  C0CE  F0C1         	movff	itos@Out,___lwmod@dividend
 26832  013C80  C0CF  F0C2         	movff	itos@Out+1,___lwmod@dividend+1
 26833  013C84  0E00               	movlw	0
 26834  013C86  0100               	movlb	0	; () banked
 26835  013C88  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
 26836  013C8A  0E0A               	movlw	10
 26837  013C8C  6FC3               	movwf	___lwmod@divisor& (0+255),b
 26838  013C8E  EC7D  F0AC         	call	___lwmod	;wreg free
 26839  013C92  0100               	movlb	0	; () banked
 26840  013C94  51C1               	movf	?___lwmod& (0+255),w,b
 26841  013C96  0F30               	addlw	48
 26842  013C98  C0CA  FFD9         	movff	itos@Data,fsr2l
 26843  013C9C  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26844  013CA0  6EDF               	movwf	indf2,c
 26845                           
 26846                           ; BSR set to: 0
 26847                           ;Types.c: 384: Out /= 10;
 26848  013CA2  C0CE  F0BA         	movff	itos@Out,___lwdiv@dividend
 26849  013CA6  C0CF  F0BB         	movff	itos@Out+1,___lwdiv@dividend+1
 26850  013CAA  0E00               	movlw	0
 26851  013CAC  0100               	movlb	0	; () banked
 26852  013CAE  6FBD               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26853  013CB0  0E0A               	movlw	10
 26854  013CB2  6FBC               	movwf	___lwdiv@divisor& (0+255),b
 26855  013CB4  ECE0  F0A8         	call	___lwdiv	;wreg free
 26856  013CB8  C0BA  F0CE         	movff	?___lwdiv,itos@Out
 26857  013CBC  C0BB  F0CF         	movff	?___lwdiv+1,itos@Out+1
 26858                           
 26859                           ;Types.c: 385: Length ++;
 26860  013CC0  0100               	movlb	0	; () banked
 26861  013CC2  4BCC               	infsnz	itos@Length& (0+255),f,b
 26862  013CC4  2BCD               	incf	(itos@Length+1)& (0+255),f,b
 26863                           
 26864                           ; BSR set to: 0
 26865                           ;Types.c: 386: Data++;
 26866  013CC6  0100               	movlb	0	; () banked
 26867  013CC8  4BCA               	infsnz	itos@Data& (0+255),f,b
 26868  013CCA  2BCB               	incf	(itos@Data+1)& (0+255),f,b
 26869  013CCC                     l929:
 26870                           
 26871                           ; BSR set to: 0
 26872                           
 26873                           ; BSR set to: 0
 26874  013CCC  0100               	movlb	0	; () banked
 26875  013CCE  51CE               	movf	itos@Out& (0+255),w,b
 26876  013CD0  0100               	movlb	0	; () banked
 26877  013CD2  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26878  013CD4  B4D8               	btfsc	status,2,c
 26879  013CD6  D008               	goto	u9080
 26880                           
 26881                           ; BSR set to: 0
 26882  013CD8  0100               	movlb	0	; () banked
 26883  013CDA  51CD               	movf	(itos@Length+1)& (0+255),w,b
 26884  013CDC  E105               	bnz	l12343
 26885  013CDE  0E06               	movlw	6
 26886  013CE0  0100               	movlb	0	; () banked
 26887  013CE2  5DCC               	subwf	itos@Length& (0+255),w,b
 26888  013CE4  A0D8               	btfss	status,0,c
 26889  013CE6  D7CA               	goto	l930
 26890  013CE8                     u9080:
 26891  013CE8                     l12343:
 26892                           
 26893                           ; BSR set to: 0
 26894                           ;Types.c: 387: }
 26895                           ;Types.c: 388: reverse(destination, Length);
 26896  013CE8  C0C8  F0BA         	movff	itos@destination,reverse@input
 26897  013CEC  C0C9  F0BB         	movff	itos@destination+1,reverse@input+1
 26898  013CF0  C0CC  F0BC         	movff	itos@Length,reverse@length
 26899  013CF4  C0CD  F0BD         	movff	itos@Length+1,reverse@length+1
 26900  013CF8  ECAD  F0AA         	call	_reverse	;wreg free
 26901  013CFC                     l928:
 26902                           
 26903                           ;Types.c: 389: }
 26904                           ;Types.c: 390: destination[Length] = '\0';
 26905  013CFC  0100               	movlb	0	; () banked
 26906  013CFE  51CC               	movf	itos@Length& (0+255),w,b
 26907  013D00  0100               	movlb	0	; () banked
 26908  013D02  25C8               	addwf	itos@destination& (0+255),w,b
 26909  013D04  6ED9               	movwf	fsr2l,c
 26910  013D06  0100               	movlb	0	; () banked
 26911  013D08  51CD               	movf	(itos@Length+1)& (0+255),w,b
 26912  013D0A  0100               	movlb	0	; () banked
 26913  013D0C  21C9               	addwfc	(itos@destination+1)& (0+255),w,b
 26914  013D0E  6EDA               	movwf	fsr2h,c
 26915  013D10  0E00               	movlw	0
 26916  013D12  6EDF               	movwf	indf2,c
 26917                           
 26918                           ; BSR set to: 0
 26919  013D14  0012               	return		;funcret
 26920  013D16                     __end_of_itos:
 26921                           	opt stack 0
 26922                           tosu	equ	0xFFF
 26923                           tosh	equ	0xFFE
 26924                           tosl	equ	0xFFD
 26925                           pclath	equ	0xFFA
 26926                           tblptru	equ	0xFF8
 26927                           tblptrh	equ	0xFF7
 26928                           tblptrl	equ	0xFF6
 26929                           tablat	equ	0xFF5
 26930                           prodh	equ	0xFF4
 26931                           prodl	equ	0xFF3
 26932                           intcon	equ	0xFF2
 26933                           postinc0	equ	0xFEE
 26934                           wreg	equ	0xFE8
 26935                           indf1	equ	0xFE7
 26936                           postdec1	equ	0xFE5
 26937                           fsr1h	equ	0xFE2
 26938                           fsr1l	equ	0xFE1
 26939                           indf2	equ	0xFDF
 26940                           postinc2	equ	0xFDE
 26941                           postdec2	equ	0xFDD
 26942                           plusw2	equ	0xFDB
 26943                           fsr2h	equ	0xFDA
 26944                           fsr2l	equ	0xFD9
 26945                           status	equ	0xFD8
 26946                           
 26947 ;; *************** function _reverse *****************
 26948 ;; Defined at:
 26949 ;;		line 357 in file "Library/Types.c"
 26950 ;; Parameters:    Size  Location     Type
 26951 ;;  input           2    0[BANK0 ] PTR unsigned char 
 26952 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26953 ;;  length          2    2[BANK0 ] unsigned short 
 26954 ;; Auto vars:     Size  Location     Type
 26955 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 26956 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26957 ;;  tempVar         1    4[BANK0 ] unsigned char 
 26958 ;; Return value:  Size  Location     Type
 26959 ;;                  1    wreg      void 
 26960 ;; Registers used:
 26961 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26962 ;; Tracked objects:
 26963 ;;		On entry : 0/0
 26964 ;;		On exit  : 0/0
 26965 ;;		Unchanged: 0/0
 26966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26968 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26970 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26971 ;;Total ram usage:        7 bytes
 26972 ;; Hardware stack levels used:    1
 26973 ;; Hardware stack levels required when called:    7
 26974 ;; This function calls:
 26975 ;;		Nothing
 26976 ;; This function is called by:
 26977 ;;		_itos
 26978 ;; This function uses a non-reentrant model
 26979 ;;
 26980                           
 26981                           	psect	text142
 26982  01555A                     __ptext142:
 26983                           	opt stack 0
 26984  01555A                     _reverse:
 26985                           	opt stack 16
 26986                           
 26987                           ;Types.c: 359: char tempVar,
 26988                           ;Types.c: 360: *iterator = input + length;
 26989                           
 26990                           ; BSR set to: 0
 26991                           ;incstack = 0
 26992  01555A  0100               	movlb	0	; () banked
 26993  01555C  51BC               	movf	reverse@length& (0+255),w,b
 26994  01555E  0100               	movlb	0	; () banked
 26995  015560  25BA               	addwf	reverse@input& (0+255),w,b
 26996  015562  0100               	movlb	0	; () banked
 26997  015564  6FBF               	movwf	reverse@iterator& (0+255),b
 26998  015566  0100               	movlb	0	; () banked
 26999  015568  51BD               	movf	(reverse@length+1)& (0+255),w,b
 27000  01556A  0100               	movlb	0	; () banked
 27001  01556C  21BB               	addwfc	(reverse@input+1)& (0+255),w,b
 27002  01556E  0100               	movlb	0	; () banked
 27003  015570  6FC0               	movwf	(reverse@iterator+1)& (0+255),b
 27004                           
 27005                           ;Types.c: 362: while ( --iterator > input )
 27006  015572  D01A               	goto	l921
 27007  015574                     
 27008                           ; BSR set to: 0
 27009                           ;Types.c: 363: {
 27010                           ;Types.c: 364: tempVar = *input;
 27011                           
 27012                           ; BSR set to: 0
 27013  015574  C0BA  FFD9         	movff	reverse@input,fsr2l
 27014  015578  C0BB  FFDA         	movff	reverse@input+1,fsr2h
 27015  01557C  50DF               	movf	indf2,w,c
 27016  01557E  0100               	movlb	0	; () banked
 27017  015580  6FBE               	movwf	reverse@tempVar& (0+255),b
 27018                           
 27019                           ; BSR set to: 0
 27020                           ;Types.c: 365: *input++=*iterator;
 27021  015582  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27022  015586  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27023  01558A  C0BA  FFE1         	movff	reverse@input,fsr1l
 27024  01558E  C0BB  FFE2         	movff	reverse@input+1,fsr1h
 27025  015592  CFDF FFE7          	movff	indf2,indf1
 27026                           
 27027                           ; BSR set to: 0
 27028  015596  0100               	movlb	0	; () banked
 27029  015598  4BBA               	infsnz	reverse@input& (0+255),f,b
 27030  01559A  2BBB               	incf	(reverse@input+1)& (0+255),f,b
 27031                           
 27032                           ; BSR set to: 0
 27033                           ;Types.c: 366: *iterator=tempVar;
 27034  01559C  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27035  0155A0  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27036  0155A4  C0BE  FFDF         	movff	reverse@tempVar,indf2
 27037  0155A8                     l921:
 27038                           
 27039                           ; BSR set to: 0
 27040                           
 27041                           ; BSR set to: 0
 27042  0155A8  0100               	movlb	0	; () banked
 27043  0155AA  07BF               	decf	reverse@iterator& (0+255),f,b
 27044  0155AC  A0D8               	btfss	status,0,c
 27045  0155AE  07C0               	decf	(reverse@iterator+1)& (0+255),f,b
 27046  0155B0  0100               	movlb	0	; () banked
 27047  0155B2  51BF               	movf	reverse@iterator& (0+255),w,b
 27048  0155B4  0100               	movlb	0	; () banked
 27049  0155B6  5DBA               	subwf	reverse@input& (0+255),w,b
 27050  0155B8  0100               	movlb	0	; () banked
 27051  0155BA  51C0               	movf	(reverse@iterator+1)& (0+255),w,b
 27052  0155BC  0100               	movlb	0	; () banked
 27053  0155BE  59BB               	subwfb	(reverse@input+1)& (0+255),w,b
 27054  0155C0  B0D8               	btfsc	status,0,c
 27055  0155C2  0012               	return	
 27056  0155C4  D7D7               	goto	l922
 27057  0155C6                     __end_of_reverse:
 27058                           	opt stack 0
 27059                           tosu	equ	0xFFF
 27060                           tosh	equ	0xFFE
 27061                           tosl	equ	0xFFD
 27062                           pclath	equ	0xFFA
 27063                           tblptru	equ	0xFF8
 27064                           tblptrh	equ	0xFF7
 27065                           tblptrl	equ	0xFF6
 27066                           tablat	equ	0xFF5
 27067                           prodh	equ	0xFF4
 27068                           prodl	equ	0xFF3
 27069                           intcon	equ	0xFF2
 27070                           postinc0	equ	0xFEE
 27071                           wreg	equ	0xFE8
 27072                           indf1	equ	0xFE7
 27073                           postdec1	equ	0xFE5
 27074                           fsr1h	equ	0xFE2
 27075                           fsr1l	equ	0xFE1
 27076                           indf2	equ	0xFDF
 27077                           postinc2	equ	0xFDE
 27078                           postdec2	equ	0xFDD
 27079                           plusw2	equ	0xFDB
 27080                           fsr2h	equ	0xFDA
 27081                           fsr2l	equ	0xFD9
 27082                           status	equ	0xFD8
 27083                           
 27084 ;; *************** function ___lwmod *****************
 27085 ;; Defined at:
 27086 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 27087 ;; Parameters:    Size  Location     Type
 27088 ;;  dividend        2    7[BANK0 ] unsigned int 
 27089 ;;  divisor         2    9[BANK0 ] unsigned int 
 27090 ;; Auto vars:     Size  Location     Type
 27091 ;;  counter         1   11[BANK0 ] unsigned char 
 27092 ;; Return value:  Size  Location     Type
 27093 ;;                  2    7[BANK0 ] unsigned int 
 27094 ;; Registers used:
 27095 ;;		wreg, status,2, status,0
 27096 ;; Tracked objects:
 27097 ;;		On entry : 0/0
 27098 ;;		On exit  : 0/0
 27099 ;;		Unchanged: 0/0
 27100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27101 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27104 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27105 ;;Total ram usage:        5 bytes
 27106 ;; Hardware stack levels used:    1
 27107 ;; Hardware stack levels required when called:    7
 27108 ;; This function calls:
 27109 ;;		Nothing
 27110 ;; This function is called by:
 27111 ;;		_itos
 27112 ;;		_printf
 27113 ;; This function uses a non-reentrant model
 27114 ;;
 27115                           
 27116                           	psect	text143
 27117  0158FA                     __ptext143:
 27118                           	opt stack 0
 27119  0158FA                     ___lwmod:
 27120                           	opt stack 22
 27121                           
 27122                           ; BSR set to: 0
 27123                           ;incstack = 0
 27124  0158FA  0100               	movlb	0	; () banked
 27125  0158FC  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27126  0158FE  0100               	movlb	0	; () banked
 27127  015900  11C4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27128  015902  B4D8               	btfsc	status,2,c
 27129  015904  D026               	goto	l2868
 27130                           
 27131                           ; BSR set to: 0
 27132  015906  0E01               	movlw	1
 27133  015908  0100               	movlb	0	; () banked
 27134  01590A  6FC5               	movwf	___lwmod@counter& (0+255),b
 27135  01590C  D006               	goto	l2863
 27136  01590E                     
 27137                           ; BSR set to: 0
 27138                           
 27139                           ; BSR set to: 0
 27140  01590E  0100               	movlb	0	; () banked
 27141  015910  90D8               	bcf	status,0,c
 27142  015912  37C3               	rlcf	___lwmod@divisor& (0+255),f,b
 27143  015914  37C4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27144  015916  0100               	movlb	0	; () banked
 27145  015918  2BC5               	incf	___lwmod@counter& (0+255),f,b
 27146  01591A                     l2863:
 27147                           
 27148                           ; BSR set to: 0
 27149                           
 27150                           ; BSR set to: 0
 27151  01591A  0100               	movlb	0	; () banked
 27152  01591C  AFC4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27153  01591E  D7F7               	goto	l2864
 27154  015920                     u9000:
 27155                           
 27156                           ; BSR set to: 0
 27157                           
 27158                           ; BSR set to: 0
 27159                           
 27160                           ; BSR set to: 0
 27161  015920  0100               	movlb	0	; () banked
 27162  015922  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27163  015924  0100               	movlb	0	; () banked
 27164  015926  5DC1               	subwf	___lwmod@dividend& (0+255),w,b
 27165  015928  0100               	movlb	0	; () banked
 27166  01592A  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27167  01592C  0100               	movlb	0	; () banked
 27168  01592E  59C2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27169  015930  A0D8               	btfss	status,0,c
 27170  015932  D008               	goto	l2867
 27171                           
 27172                           ; BSR set to: 0
 27173  015934  0100               	movlb	0	; () banked
 27174  015936  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27175  015938  0100               	movlb	0	; () banked
 27176  01593A  5FC1               	subwf	___lwmod@dividend& (0+255),f,b
 27177  01593C  0100               	movlb	0	; () banked
 27178  01593E  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27179  015940  0100               	movlb	0	; () banked
 27180  015942  5BC2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27181  015944                     l2867:
 27182                           
 27183                           ; BSR set to: 0
 27184                           
 27185                           ; BSR set to: 0
 27186  015944  0100               	movlb	0	; () banked
 27187  015946  90D8               	bcf	status,0,c
 27188  015948  33C4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27189  01594A  33C3               	rrcf	___lwmod@divisor& (0+255),f,b
 27190                           
 27191                           ; BSR set to: 0
 27192  01594C  0100               	movlb	0	; () banked
 27193  01594E  2FC5               	decfsz	___lwmod@counter& (0+255),f,b
 27194  015950  D7E7               	goto	u9000
 27195  015952                     l2868:
 27196                           
 27197                           ; BSR set to: 0
 27198                           
 27199                           ; BSR set to: 0
 27200  015952  C0C1  F0C1         	movff	___lwmod@dividend,?___lwmod
 27201  015956  C0C2  F0C2         	movff	___lwmod@dividend+1,?___lwmod+1
 27202                           
 27203                           ; BSR set to: 0
 27204  01595A  0012               	return		;funcret
 27205  01595C                     __end_of___lwmod:
 27206                           	opt stack 0
 27207                           tosu	equ	0xFFF
 27208                           tosh	equ	0xFFE
 27209                           tosl	equ	0xFFD
 27210                           pclath	equ	0xFFA
 27211                           tblptru	equ	0xFF8
 27212                           tblptrh	equ	0xFF7
 27213                           tblptrl	equ	0xFF6
 27214                           tablat	equ	0xFF5
 27215                           prodh	equ	0xFF4
 27216                           prodl	equ	0xFF3
 27217                           intcon	equ	0xFF2
 27218                           postinc0	equ	0xFEE
 27219                           wreg	equ	0xFE8
 27220                           indf1	equ	0xFE7
 27221                           postdec1	equ	0xFE5
 27222                           fsr1h	equ	0xFE2
 27223                           fsr1l	equ	0xFE1
 27224                           indf2	equ	0xFDF
 27225                           postinc2	equ	0xFDE
 27226                           postdec2	equ	0xFDD
 27227                           plusw2	equ	0xFDB
 27228                           fsr2h	equ	0xFDA
 27229                           fsr2l	equ	0xFD9
 27230                           status	equ	0xFD8
 27231                           
 27232 ;; *************** function ___lwdiv *****************
 27233 ;; Defined at:
 27234 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 27235 ;; Parameters:    Size  Location     Type
 27236 ;;  dividend        2    0[BANK0 ] unsigned int 
 27237 ;;  divisor         2    2[BANK0 ] unsigned int 
 27238 ;; Auto vars:     Size  Location     Type
 27239 ;;  quotient        2    5[BANK0 ] unsigned int 
 27240 ;;  counter         1    4[BANK0 ] unsigned char 
 27241 ;; Return value:  Size  Location     Type
 27242 ;;                  2    0[BANK0 ] unsigned int 
 27243 ;; Registers used:
 27244 ;;		wreg, status,2, status,0
 27245 ;; Tracked objects:
 27246 ;;		On entry : 0/0
 27247 ;;		On exit  : 0/0
 27248 ;;		Unchanged: 0/0
 27249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27250 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27251 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27253 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27254 ;;Total ram usage:        7 bytes
 27255 ;; Hardware stack levels used:    1
 27256 ;; Hardware stack levels required when called:    7
 27257 ;; This function calls:
 27258 ;;		Nothing
 27259 ;; This function is called by:
 27260 ;;		_itos
 27261 ;;		_printf
 27262 ;; This function uses a non-reentrant model
 27263 ;;
 27264                           
 27265                           	psect	text144
 27266  0151C0                     __ptext144:
 27267                           	opt stack 0
 27268  0151C0                     ___lwdiv:
 27269                           	opt stack 22
 27270                           
 27271                           ; BSR set to: 0
 27272                           ;incstack = 0
 27273  0151C0  0E00               	movlw	0
 27274  0151C2  0100               	movlb	0	; () banked
 27275  0151C4  6FC0               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27276  0151C6  0E00               	movlw	0
 27277  0151C8  6FBF               	movwf	___lwdiv@quotient& (0+255),b
 27278                           
 27279                           ; BSR set to: 0
 27280  0151CA  0100               	movlb	0	; () banked
 27281  0151CC  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27282  0151CE  0100               	movlb	0	; () banked
 27283  0151D0  11BD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27284  0151D2  B4D8               	btfsc	status,2,c
 27285  0151D4  D02C               	goto	l2858
 27286                           
 27287                           ; BSR set to: 0
 27288  0151D6  0E01               	movlw	1
 27289  0151D8  0100               	movlb	0	; () banked
 27290  0151DA  6FBE               	movwf	___lwdiv@counter& (0+255),b
 27291  0151DC  D006               	goto	l2853
 27292  0151DE                     
 27293                           ; BSR set to: 0
 27294                           
 27295                           ; BSR set to: 0
 27296  0151DE  0100               	movlb	0	; () banked
 27297  0151E0  90D8               	bcf	status,0,c
 27298  0151E2  37BC               	rlcf	___lwdiv@divisor& (0+255),f,b
 27299  0151E4  37BD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27300  0151E6  0100               	movlb	0	; () banked
 27301  0151E8  2BBE               	incf	___lwdiv@counter& (0+255),f,b
 27302  0151EA                     l2853:
 27303                           
 27304                           ; BSR set to: 0
 27305                           
 27306                           ; BSR set to: 0
 27307  0151EA  0100               	movlb	0	; () banked
 27308  0151EC  AFBD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27309  0151EE  D7F7               	goto	l2854
 27310  0151F0                     u8970:
 27311                           
 27312                           ; BSR set to: 0
 27313                           
 27314                           ; BSR set to: 0
 27315                           
 27316                           ; BSR set to: 0
 27317  0151F0  0100               	movlb	0	; () banked
 27318  0151F2  90D8               	bcf	status,0,c
 27319  0151F4  37BF               	rlcf	___lwdiv@quotient& (0+255),f,b
 27320  0151F6  37C0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27321                           
 27322                           ; BSR set to: 0
 27323  0151F8  0100               	movlb	0	; () banked
 27324  0151FA  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27325  0151FC  0100               	movlb	0	; () banked
 27326  0151FE  5DBA               	subwf	___lwdiv@dividend& (0+255),w,b
 27327  015200  0100               	movlb	0	; () banked
 27328  015202  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27329  015204  0100               	movlb	0	; () banked
 27330  015206  59BB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27331  015208  A0D8               	btfss	status,0,c
 27332  01520A  D00A               	goto	l2857
 27333                           
 27334                           ; BSR set to: 0
 27335  01520C  0100               	movlb	0	; () banked
 27336  01520E  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27337  015210  0100               	movlb	0	; () banked
 27338  015212  5FBA               	subwf	___lwdiv@dividend& (0+255),f,b
 27339  015214  0100               	movlb	0	; () banked
 27340  015216  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27341  015218  0100               	movlb	0	; () banked
 27342  01521A  5BBB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27343                           
 27344                           ; BSR set to: 0
 27345  01521C  0100               	movlb	0	; () banked
 27346  01521E  81BF               	bsf	___lwdiv@quotient& (0+255),0,b
 27347  015220                     l2857:
 27348                           
 27349                           ; BSR set to: 0
 27350                           
 27351                           ; BSR set to: 0
 27352  015220  0100               	movlb	0	; () banked
 27353  015222  90D8               	bcf	status,0,c
 27354  015224  33BD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27355  015226  33BC               	rrcf	___lwdiv@divisor& (0+255),f,b
 27356                           
 27357                           ; BSR set to: 0
 27358  015228  0100               	movlb	0	; () banked
 27359  01522A  2FBE               	decfsz	___lwdiv@counter& (0+255),f,b
 27360  01522C  D7E1               	goto	u8970
 27361  01522E                     l2858:
 27362                           
 27363                           ; BSR set to: 0
 27364                           
 27365                           ; BSR set to: 0
 27366  01522E  C0BF  F0BA         	movff	___lwdiv@quotient,?___lwdiv
 27367  015232  C0C0  F0BB         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27368                           
 27369                           ; BSR set to: 0
 27370  015236  0012               	return		;funcret
 27371  015238                     __end_of___lwdiv:
 27372                           	opt stack 0
 27373                           tosu	equ	0xFFF
 27374                           tosh	equ	0xFFE
 27375                           tosl	equ	0xFFD
 27376                           pclath	equ	0xFFA
 27377                           tblptru	equ	0xFF8
 27378                           tblptrh	equ	0xFF7
 27379                           tblptrl	equ	0xFF6
 27380                           tablat	equ	0xFF5
 27381                           prodh	equ	0xFF4
 27382                           prodl	equ	0xFF3
 27383                           intcon	equ	0xFF2
 27384                           postinc0	equ	0xFEE
 27385                           wreg	equ	0xFE8
 27386                           indf1	equ	0xFE7
 27387                           postdec1	equ	0xFE5
 27388                           fsr1h	equ	0xFE2
 27389                           fsr1l	equ	0xFE1
 27390                           indf2	equ	0xFDF
 27391                           postinc2	equ	0xFDE
 27392                           postdec2	equ	0xFDD
 27393                           plusw2	equ	0xFDB
 27394                           fsr2h	equ	0xFDA
 27395                           fsr2l	equ	0xFD9
 27396                           status	equ	0xFD8
 27397                           
 27398 ;; *************** function _HMI_SetSegments *****************
 27399 ;; Defined at:
 27400 ;;		line 226 in file "HMI.c"
 27401 ;; Parameters:    Size  Location     Type
 27402 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27403 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27404 ;; Auto vars:     Size  Location     Type
 27405 ;;  in              2    4[BANK0 ] unsigned short 
 27406 ;; Return value:  Size  Location     Type
 27407 ;;                  1    wreg      void 
 27408 ;; Registers used:
 27409 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27410 ;; Tracked objects:
 27411 ;;		On entry : 0/0
 27412 ;;		On exit  : 0/0
 27413 ;;		Unchanged: 0/0
 27414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27415 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27418 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27419 ;;Total ram usage:        5 bytes
 27420 ;; Hardware stack levels used:    1
 27421 ;; Hardware stack levels required when called:    8
 27422 ;; This function calls:
 27423 ;;		_ToSegment
 27424 ;; This function is called by:
 27425 ;;		_HMI_SetNumber
 27426 ;; This function uses a non-reentrant model
 27427 ;;
 27428                           
 27429                           	psect	text145
 27430  014350                     __ptext145:
 27431                           	opt stack 0
 27432  014350                     _HMI_SetSegments:
 27433                           	opt stack 16
 27434                           
 27435                           ;HMI.c: 228: UINT16 in=0;
 27436                           
 27437                           ; BSR set to: 0
 27438                           ;incstack = 0
 27439  014350  0E00               	movlw	0
 27440  014352  0100               	movlb	0	; () banked
 27441  014354  6FBF               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27442  014356  0E00               	movlw	0
 27443  014358  6FBE               	movwf	HMI_SetSegments@in& (0+255),b
 27444                           
 27445                           ;HMI.c: 229: while(*pString)
 27446  01435A  D038               	goto	l1202
 27447  01435C                     
 27448                           ; BSR set to: 0
 27449                           ;HMI.c: 230: {
 27450                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27451                           
 27452                           ; BSR set to: 0
 27453  01435C  0E3E               	movlw	low _HMIBoard
 27454  01435E  0100               	movlb	0	; () banked
 27455  014360  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27456  014362  6ED9               	movwf	fsr2l,c
 27457  014364  0E03               	movlw	high _HMIBoard
 27458  014366  0100               	movlb	0	; () banked
 27459  014368  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27460  01436A  6EDA               	movwf	fsr2h,c
 27461  01436C  C0BB  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27462  014370  C0BC  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27463  014374  50E7               	movf	indf1,w,c
 27464  014376  EC0C  F08C         	call	_ToSegment
 27465  01437A  6EDF               	movwf	indf2,c
 27466                           
 27467                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27468  01437C  0E3E               	movlw	low _HMIBoard
 27469  01437E  0100               	movlb	0	; () banked
 27470  014380  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27471  014382  6ED9               	movwf	fsr2l,c
 27472  014384  0E03               	movlw	high _HMIBoard
 27473  014386  0100               	movlb	0	; () banked
 27474  014388  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27475  01438A  6EDA               	movwf	fsr2h,c
 27476  01438C  0E80               	movlw	128
 27477  01438E  18DE               	xorwf	postinc2,w,c
 27478  014390  A4D8               	btfss	status,2,c
 27479  014392  D00E               	goto	l1201
 27480                           
 27481                           ; BSR set to: 0
 27482                           ;HMI.c: 234: {
 27483                           ;HMI.c: 235: in--;
 27484  014394  0100               	movlb	0	; () banked
 27485  014396  07BE               	decf	HMI_SetSegments@in& (0+255),f,b
 27486  014398  A0D8               	btfss	status,0,c
 27487  01439A  07BF               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27488                           
 27489                           ; BSR set to: 0
 27490                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27491  01439C  0E3E               	movlw	low _HMIBoard
 27492  01439E  0100               	movlb	0	; () banked
 27493  0143A0  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27494  0143A2  6ED9               	movwf	fsr2l,c
 27495  0143A4  0E03               	movlw	high _HMIBoard
 27496  0143A6  0100               	movlb	0	; () banked
 27497  0143A8  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27498  0143AA  6EDA               	movwf	fsr2h,c
 27499  0143AC  0E00               	movlw	0
 27500  0143AE  8EDB               	bsf	plusw2,7,c
 27501  0143B0                     l1201:
 27502                           
 27503                           ; BSR set to: 0
 27504                           ;HMI.c: 237: }
 27505                           ;HMI.c: 239: pString++;
 27506                           
 27507                           ; BSR set to: 0
 27508  0143B0  0100               	movlb	0	; () banked
 27509  0143B2  4BBB               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27510  0143B4  2BBC               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27511                           
 27512                           ; BSR set to: 0
 27513                           ;HMI.c: 240: in++;
 27514  0143B6  0100               	movlb	0	; () banked
 27515  0143B8  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27516  0143BA  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27517                           
 27518                           ; BSR set to: 0
 27519                           ;HMI.c: 241: if (in>=6)
 27520  0143BC  0100               	movlb	0	; () banked
 27521  0143BE  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27522  0143C0  E11A               	bnz	l12395
 27523  0143C2  0E06               	movlw	6
 27524  0143C4  0100               	movlb	0	; () banked
 27525  0143C6  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27526  0143C8  B0D8               	btfsc	status,0,c
 27527  0143CA  D015               	goto	l1204
 27528  0143CC                     l1202:
 27529                           
 27530                           ; BSR set to: 0
 27531                           
 27532                           ; BSR set to: 0
 27533                           
 27534                           ; BSR set to: 0
 27535  0143CC  C0BB  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27536  0143D0  C0BC  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27537  0143D4  50DF               	movf	indf2,w,c
 27538  0143D6  B4D8               	btfsc	status,2,c
 27539  0143D8  D00E               	goto	l1204
 27540  0143DA  D7C0               	goto	l1200
 27541  0143DC                     
 27542                           ; BSR set to: 0
 27543                           ;HMI.c: 245: {
 27544                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27545                           
 27546                           ; BSR set to: 0
 27547  0143DC  0E3E               	movlw	low _HMIBoard
 27548  0143DE  0100               	movlb	0	; () banked
 27549  0143E0  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27550  0143E2  6ED9               	movwf	fsr2l,c
 27551  0143E4  0E03               	movlw	high _HMIBoard
 27552  0143E6  0100               	movlb	0	; () banked
 27553  0143E8  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27554  0143EA  6EDA               	movwf	fsr2h,c
 27555  0143EC  0E00               	movlw	0
 27556  0143EE  6EDF               	movwf	indf2,c
 27557                           
 27558                           ; BSR set to: 0
 27559                           ;HMI.c: 247: in++;
 27560  0143F0  0100               	movlb	0	; () banked
 27561  0143F2  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27562  0143F4  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27563  0143F6                     l1204:
 27564  0143F6                     l12395:
 27565                           
 27566                           ; BSR set to: 0
 27567  0143F6  0100               	movlb	0	; () banked
 27568  0143F8  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27569  0143FA  E106               	bnz	l1207
 27570  0143FC  0E06               	movlw	6
 27571  0143FE  0100               	movlb	0	; () banked
 27572  014400  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27573  014402  B0D8               	btfsc	status,0,c
 27574  014404  0012               	return	
 27575  014406  D7EA               	goto	l1205
 27576  014408                     l1207:
 27577                           
 27578                           ; BSR set to: 0
 27579  014408  0012               	return		;funcret
 27580  01440A                     __end_of_HMI_SetSegments:
 27581                           	opt stack 0
 27582                           tosu	equ	0xFFF
 27583                           tosh	equ	0xFFE
 27584                           tosl	equ	0xFFD
 27585                           pclath	equ	0xFFA
 27586                           tblptru	equ	0xFF8
 27587                           tblptrh	equ	0xFF7
 27588                           tblptrl	equ	0xFF6
 27589                           tablat	equ	0xFF5
 27590                           prodh	equ	0xFF4
 27591                           prodl	equ	0xFF3
 27592                           intcon	equ	0xFF2
 27593                           postinc0	equ	0xFEE
 27594                           wreg	equ	0xFE8
 27595                           indf1	equ	0xFE7
 27596                           postdec1	equ	0xFE5
 27597                           fsr1h	equ	0xFE2
 27598                           fsr1l	equ	0xFE1
 27599                           indf2	equ	0xFDF
 27600                           postinc2	equ	0xFDE
 27601                           postdec2	equ	0xFDD
 27602                           plusw2	equ	0xFDB
 27603                           fsr2h	equ	0xFDA
 27604                           fsr2l	equ	0xFD9
 27605                           status	equ	0xFD8
 27606                           
 27607 ;; *************** function _ToSegment *****************
 27608 ;; Defined at:
 27609 ;;		line 284 in file "Library/Types.c"
 27610 ;; Parameters:    Size  Location     Type
 27611 ;;  pCHR            1    wreg     unsigned char 
 27612 ;; Auto vars:     Size  Location     Type
 27613 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27614 ;; Return value:  Size  Location     Type
 27615 ;;                  1    wreg      unsigned char 
 27616 ;; Registers used:
 27617 ;;		wreg, status,2, status,0
 27618 ;; Tracked objects:
 27619 ;;		On entry : 0/0
 27620 ;;		On exit  : 0/0
 27621 ;;		Unchanged: 0/0
 27622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27626 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27627 ;;Total ram usage:        1 bytes
 27628 ;; Hardware stack levels used:    1
 27629 ;; Hardware stack levels required when called:    7
 27630 ;; This function calls:
 27631 ;;		Nothing
 27632 ;; This function is called by:
 27633 ;;		_HMI_SetSegments
 27634 ;; This function uses a non-reentrant model
 27635 ;;
 27636                           
 27637                           	psect	text146
 27638  011818                     __ptext146:
 27639                           	opt stack 0
 27640  011818                     _ToSegment:
 27641                           	opt stack 16
 27642                           
 27643                           ; BSR set to: 0
 27644                           ;incstack = 0
 27645                           ;ToSegment@pCHR stored from wreg
 27646  011818  0100               	movlb	0	; () banked
 27647  01181A  6FBA               	movwf	ToSegment@pCHR& (0+255),b
 27648                           
 27649                           ;Types.c: 286: switch(pCHR)
 27650  01181C  D07E               	goto	l853
 27651  01181E  0E3F               	movlw	63
 27652  011820  0012               	return	
 27653  011822  0E06               	movlw	6
 27654  011824  0012               	return	
 27655  011826  0E5B               	movlw	91
 27656  011828  0012               	return	
 27657  01182A  0E4F               	movlw	79
 27658  01182C  0012               	return	
 27659  01182E  0E66               	movlw	102
 27660  011830  0012               	return	
 27661  011832  0E6D               	movlw	109
 27662  011834  0012               	return	
 27663  011836  0E7D               	movlw	125
 27664  011838  0012               	return	
 27665  01183A  0E07               	movlw	7
 27666  01183C  0012               	return	
 27667  01183E  0E7F               	movlw	127
 27668  011840  0012               	return	
 27669  011842  0E6F               	movlw	111
 27670  011844  0012               	return	
 27671  011846  0E5F               	movlw	95
 27672  011848  0012               	return	
 27673  01184A  0E7C               	movlw	124
 27674  01184C  0012               	return	
 27675  01184E  0E58               	movlw	88
 27676  011850  0012               	return	
 27677  011852  0E5E               	movlw	94
 27678  011854  0012               	return	
 27679  011856  0E7B               	movlw	123
 27680  011858  0012               	return	
 27681  01185A  0E71               	movlw	113
 27682  01185C  0012               	return	
 27683  01185E  0E6F               	movlw	111
 27684  011860  0012               	return	
 27685  011862  0E74               	movlw	116
 27686  011864  0012               	return	
 27687  011866  0E04               	movlw	4
 27688  011868  0012               	return	
 27689  01186A  0E0E               	movlw	14
 27690  01186C  0012               	return	
 27691  01186E  0E7A               	movlw	122
 27692  011870  0012               	return	
 27693  011872  0E06               	movlw	6
 27694  011874  0012               	return	
 27695  011876  0E14               	movlw	20
 27696  011878  0012               	return	
 27697  01187A  0E54               	movlw	84
 27698  01187C  0012               	return	
 27699  01187E  0E5C               	movlw	92
 27700  011880  0012               	return	
 27701  011882  0E73               	movlw	115
 27702  011884  0012               	return	
 27703  011886  0E67               	movlw	103
 27704  011888  0012               	return	
 27705  01188A  0E50               	movlw	80
 27706  01188C  0012               	return	
 27707  01188E  0E6D               	movlw	109
 27708  011890  0012               	return	
 27709  011892  0E78               	movlw	120
 27710  011894  0012               	return	
 27711  011896  0E1C               	movlw	28
 27712  011898  0012               	return	
 27713  01189A  0E62               	movlw	98
 27714  01189C  0012               	return	
 27715  01189E  0E2A               	movlw	42
 27716  0118A0  0012               	return	
 27717  0118A2  0E64               	movlw	100
 27718  0118A4  0012               	return	
 27719  0118A6  0E6E               	movlw	110
 27720  0118A8  0012               	return	
 27721  0118AA  0E5B               	movlw	91
 27722  0118AC  0012               	return	
 27723  0118AE  0E77               	movlw	119
 27724  0118B0  0012               	return	
 27725  0118B2  0E7F               	movlw	127
 27726  0118B4  0012               	return	
 27727  0118B6  0E39               	movlw	57
 27728  0118B8  0012               	return	
 27729  0118BA  0E3F               	movlw	63
 27730  0118BC  0012               	return	
 27731  0118BE  0E79               	movlw	121
 27732  0118C0  0012               	return	
 27733  0118C2  0E71               	movlw	113
 27734  0118C4  0012               	return	
 27735  0118C6  0E3D               	movlw	61
 27736  0118C8  0012               	return	
 27737  0118CA  0E76               	movlw	118
 27738  0118CC  0012               	return	
 27739  0118CE  0E06               	movlw	6
 27740  0118D0  0012               	return	
 27741  0118D2  0E1E               	movlw	30
 27742  0118D4  0012               	return	
 27743  0118D6  0E57               	movlw	87
 27744  0118D8  0012               	return	
 27745  0118DA  0E38               	movlw	56
 27746  0118DC  0012               	return	
 27747  0118DE  0E76               	movlw	118
 27748  0118E0  0012               	return	
 27749  0118E2  0E76               	movlw	118
 27750  0118E4  0012               	return	
 27751  0118E6  0E3F               	movlw	63
 27752  0118E8  0012               	return	
 27753  0118EA  0E73               	movlw	115
 27754  0118EC  0012               	return	
 27755  0118EE  0E3F               	movlw	63
 27756  0118F0  0012               	return	
 27757  0118F2  0E77               	movlw	119
 27758  0118F4  0012               	return	
 27759  0118F6  0E6D               	movlw	109
 27760  0118F8  0012               	return	
 27761  0118FA  0E31               	movlw	49
 27762  0118FC  0012               	return	
 27763  0118FE  0E3E               	movlw	62
 27764  011900  0012               	return	
 27765  011902  0E3E               	movlw	62
 27766  011904  0012               	return	
 27767  011906  0E7E               	movlw	126
 27768  011908  0012               	return	
 27769  01190A  0E76               	movlw	118
 27770  01190C  0012               	return	
 27771  01190E  0E66               	movlw	102
 27772  011910  0012               	return	
 27773  011912  0E5B               	movlw	91
 27774  011914  0012               	return	
 27775  011916  0E80               	movlw	128
 27776  011918  0012               	return	
 27777  01191A                     l853:
 27778  01191A  0100               	movlb	0	; () banked
 27779  01191C  51BA               	movf	ToSegment@pCHR& (0+255),w,b
 27780                           
 27781                           ; Switch size 1, requested type "space"
 27782                           ; Number of cases is 63, Range of values is 46 to 122
 27783                           ; switch strategies available:
 27784                           ; Name         Instructions Cycles
 27785                           ; simple_byte          190    96 (average)
 27786                           ;	Chosen strategy is simple_byte
 27787  01191E  0A2E               	xorlw	46	; case 46
 27788  011920  B4D8               	btfsc	status,2,c
 27789  011922  D7F9               	goto	l917
 27790  011924  0A1E               	xorlw	30	; case 48
 27791  011926  B4D8               	btfsc	status,2,c
 27792  011928  D77A               	goto	l854
 27793  01192A  0A01               	xorlw	1	; case 49
 27794  01192C  B4D8               	btfsc	status,2,c
 27795  01192E  D779               	goto	l856
 27796  011930  0A03               	xorlw	3	; case 50
 27797  011932  B4D8               	btfsc	status,2,c
 27798  011934  D778               	goto	l857
 27799  011936  0A01               	xorlw	1	; case 51
 27800  011938  B4D8               	btfsc	status,2,c
 27801  01193A  D777               	goto	l858
 27802  01193C  0A07               	xorlw	7	; case 52
 27803  01193E  B4D8               	btfsc	status,2,c
 27804  011940  D776               	goto	l859
 27805  011942  0A01               	xorlw	1	; case 53
 27806  011944  B4D8               	btfsc	status,2,c
 27807  011946  D775               	goto	l860
 27808  011948  0A03               	xorlw	3	; case 54
 27809  01194A  B4D8               	btfsc	status,2,c
 27810  01194C  D774               	goto	l861
 27811  01194E  0A01               	xorlw	1	; case 55
 27812  011950  B4D8               	btfsc	status,2,c
 27813  011952  D773               	goto	l862
 27814  011954  0A0F               	xorlw	15	; case 56
 27815  011956  B4D8               	btfsc	status,2,c
 27816  011958  D772               	goto	l863
 27817  01195A  0A01               	xorlw	1	; case 57
 27818  01195C  B4D8               	btfsc	status,2,c
 27819  01195E  D771               	goto	l864
 27820  011960  0A78               	xorlw	120	; case 65
 27821  011962  B4D8               	btfsc	status,2,c
 27822  011964  D7A4               	goto	l891
 27823  011966  0A03               	xorlw	3	; case 66
 27824  011968  B4D8               	btfsc	status,2,c
 27825  01196A  D7A3               	goto	l892
 27826  01196C  0A01               	xorlw	1	; case 67
 27827  01196E  B4D8               	btfsc	status,2,c
 27828  011970  D7A2               	goto	l893
 27829  011972  0A07               	xorlw	7	; case 68
 27830  011974  B4D8               	btfsc	status,2,c
 27831  011976  D7A1               	goto	l894
 27832  011978  0A01               	xorlw	1	; case 69
 27833  01197A  B4D8               	btfsc	status,2,c
 27834  01197C  D7A0               	goto	l895
 27835  01197E  0A03               	xorlw	3	; case 70
 27836  011980  B4D8               	btfsc	status,2,c
 27837  011982  D79F               	goto	l896
 27838  011984  0A01               	xorlw	1	; case 71
 27839  011986  B4D8               	btfsc	status,2,c
 27840  011988  D79E               	goto	l897
 27841  01198A  0A0F               	xorlw	15	; case 72
 27842  01198C  B4D8               	btfsc	status,2,c
 27843  01198E  D79D               	goto	l898
 27844  011990  0A01               	xorlw	1	; case 73
 27845  011992  B4D8               	btfsc	status,2,c
 27846  011994  D79C               	goto	l899
 27847  011996  0A03               	xorlw	3	; case 74
 27848  011998  B4D8               	btfsc	status,2,c
 27849  01199A  D79B               	goto	l900
 27850  01199C  0A01               	xorlw	1	; case 75
 27851  01199E  B4D8               	btfsc	status,2,c
 27852  0119A0  D79A               	goto	l901
 27853  0119A2  0A07               	xorlw	7	; case 76
 27854  0119A4  B4D8               	btfsc	status,2,c
 27855  0119A6  D799               	goto	l902
 27856  0119A8  0A01               	xorlw	1	; case 77
 27857  0119AA  B4D8               	btfsc	status,2,c
 27858  0119AC  D798               	goto	l903
 27859  0119AE  0A03               	xorlw	3	; case 78
 27860  0119B0  B4D8               	btfsc	status,2,c
 27861  0119B2  D797               	goto	l904
 27862  0119B4  0A01               	xorlw	1	; case 79
 27863  0119B6  B4D8               	btfsc	status,2,c
 27864  0119B8  D796               	goto	l905
 27865  0119BA  0A1F               	xorlw	31	; case 80
 27866  0119BC  B4D8               	btfsc	status,2,c
 27867  0119BE  D795               	goto	l906
 27868  0119C0  0A01               	xorlw	1	; case 81
 27869  0119C2  B4D8               	btfsc	status,2,c
 27870  0119C4  D794               	goto	l907
 27871  0119C6  0A03               	xorlw	3	; case 82
 27872  0119C8  B4D8               	btfsc	status,2,c
 27873  0119CA  D793               	goto	l908
 27874  0119CC  0A01               	xorlw	1	; case 83
 27875  0119CE  B4D8               	btfsc	status,2,c
 27876  0119D0  D792               	goto	l909
 27877  0119D2  0A07               	xorlw	7	; case 84
 27878  0119D4  B4D8               	btfsc	status,2,c
 27879  0119D6  D791               	goto	l910
 27880  0119D8  0A01               	xorlw	1	; case 85
 27881  0119DA  B4D8               	btfsc	status,2,c
 27882  0119DC  D790               	goto	l911
 27883  0119DE  0A03               	xorlw	3	; case 86
 27884  0119E0  B4D8               	btfsc	status,2,c
 27885  0119E2  D78F               	goto	l912
 27886  0119E4  0A01               	xorlw	1	; case 87
 27887  0119E6  B4D8               	btfsc	status,2,c
 27888  0119E8  D78E               	goto	l913
 27889  0119EA  0A0F               	xorlw	15	; case 88
 27890  0119EC  B4D8               	btfsc	status,2,c
 27891  0119EE  D78D               	goto	l914
 27892  0119F0  0A01               	xorlw	1	; case 89
 27893  0119F2  B4D8               	btfsc	status,2,c
 27894  0119F4  D78C               	goto	l915
 27895  0119F6  0A03               	xorlw	3	; case 90
 27896  0119F8  B4D8               	btfsc	status,2,c
 27897  0119FA  D78B               	goto	l916
 27898  0119FC  0A3B               	xorlw	59	; case 97
 27899  0119FE  B4D8               	btfsc	status,2,c
 27900  011A00  D722               	goto	l865
 27901  011A02  0A03               	xorlw	3	; case 98
 27902  011A04  B4D8               	btfsc	status,2,c
 27903  011A06  D721               	goto	l866
 27904  011A08  0A01               	xorlw	1	; case 99
 27905  011A0A  B4D8               	btfsc	status,2,c
 27906  011A0C  D720               	goto	l867
 27907  011A0E  0A07               	xorlw	7	; case 100
 27908  011A10  B4D8               	btfsc	status,2,c
 27909  011A12  D71F               	goto	l868
 27910  011A14  0A01               	xorlw	1	; case 101
 27911  011A16  B4D8               	btfsc	status,2,c
 27912  011A18  D71E               	goto	l869
 27913  011A1A  0A03               	xorlw	3	; case 102
 27914  011A1C  B4D8               	btfsc	status,2,c
 27915  011A1E  D71D               	goto	l870
 27916  011A20  0A01               	xorlw	1	; case 103
 27917  011A22  B4D8               	btfsc	status,2,c
 27918  011A24  D71C               	goto	l871
 27919  011A26  0A0F               	xorlw	15	; case 104
 27920  011A28  B4D8               	btfsc	status,2,c
 27921  011A2A  D71B               	goto	l872
 27922  011A2C  0A01               	xorlw	1	; case 105
 27923  011A2E  B4D8               	btfsc	status,2,c
 27924  011A30  D71A               	goto	l873
 27925  011A32  0A03               	xorlw	3	; case 106
 27926  011A34  B4D8               	btfsc	status,2,c
 27927  011A36  D719               	goto	l874
 27928  011A38  0A01               	xorlw	1	; case 107
 27929  011A3A  B4D8               	btfsc	status,2,c
 27930  011A3C  D718               	goto	l875
 27931  011A3E  0A07               	xorlw	7	; case 108
 27932  011A40  B4D8               	btfsc	status,2,c
 27933  011A42  D717               	goto	l876
 27934  011A44  0A01               	xorlw	1	; case 109
 27935  011A46  B4D8               	btfsc	status,2,c
 27936  011A48  D716               	goto	l877
 27937  011A4A  0A03               	xorlw	3	; case 110
 27938  011A4C  B4D8               	btfsc	status,2,c
 27939  011A4E  D715               	goto	l878
 27940  011A50  0A01               	xorlw	1	; case 111
 27941  011A52  B4D8               	btfsc	status,2,c
 27942  011A54  D714               	goto	l879
 27943  011A56  0A1F               	xorlw	31	; case 112
 27944  011A58  B4D8               	btfsc	status,2,c
 27945  011A5A  D713               	goto	l880
 27946  011A5C  0A01               	xorlw	1	; case 113
 27947  011A5E  B4D8               	btfsc	status,2,c
 27948  011A60  D712               	goto	l881
 27949  011A62  0A03               	xorlw	3	; case 114
 27950  011A64  B4D8               	btfsc	status,2,c
 27951  011A66  D711               	goto	l882
 27952  011A68  0A01               	xorlw	1	; case 115
 27953  011A6A  B4D8               	btfsc	status,2,c
 27954  011A6C  D710               	goto	l883
 27955  011A6E  0A07               	xorlw	7	; case 116
 27956  011A70  B4D8               	btfsc	status,2,c
 27957  011A72  D70F               	goto	l884
 27958  011A74  0A01               	xorlw	1	; case 117
 27959  011A76  B4D8               	btfsc	status,2,c
 27960  011A78  D70E               	goto	l885
 27961  011A7A  0A03               	xorlw	3	; case 118
 27962  011A7C  B4D8               	btfsc	status,2,c
 27963  011A7E  D70D               	goto	l886
 27964  011A80  0A01               	xorlw	1	; case 119
 27965  011A82  B4D8               	btfsc	status,2,c
 27966  011A84  D70C               	goto	l887
 27967  011A86  0A0F               	xorlw	15	; case 120
 27968  011A88  B4D8               	btfsc	status,2,c
 27969  011A8A  D70B               	goto	l888
 27970  011A8C  0A01               	xorlw	1	; case 121
 27971  011A8E  B4D8               	btfsc	status,2,c
 27972  011A90  D70A               	goto	l889
 27973  011A92  0A03               	xorlw	3	; case 122
 27974  011A94  B4D8               	btfsc	status,2,c
 27975  011A96  D709               	goto	l890
 27976                           
 27977                           ;Types.c: 354: return 0;
 27978                           
 27979                           ; BSR set to: 0
 27980  011A98  0E00               	movlw	0
 27981  011A9A  0012               	return	
 27982  011A9C                     __end_of_ToSegment:
 27983                           	opt stack 0
 27984                           tosu	equ	0xFFF
 27985                           tosh	equ	0xFFE
 27986                           tosl	equ	0xFFD
 27987                           pclath	equ	0xFFA
 27988                           tblptru	equ	0xFF8
 27989                           tblptrh	equ	0xFF7
 27990                           tblptrl	equ	0xFF6
 27991                           tablat	equ	0xFF5
 27992                           prodh	equ	0xFF4
 27993                           prodl	equ	0xFF3
 27994                           intcon	equ	0xFF2
 27995                           postinc0	equ	0xFEE
 27996                           wreg	equ	0xFE8
 27997                           indf1	equ	0xFE7
 27998                           postdec1	equ	0xFE5
 27999                           fsr1h	equ	0xFE2
 28000                           fsr1l	equ	0xFE1
 28001                           indf2	equ	0xFDF
 28002                           postinc2	equ	0xFDE
 28003                           postdec2	equ	0xFDD
 28004                           plusw2	equ	0xFDB
 28005                           fsr2h	equ	0xFDA
 28006                           fsr2l	equ	0xFD9
 28007                           status	equ	0xFD8
 28008                           
 28009 ;; *************** function _HMI_SetButton *****************
 28010 ;; Defined at:
 28011 ;;		line 186 in file "HMI.c"
 28012 ;; Parameters:    Size  Location     Type
 28013 ;;  pValue          1    wreg     unsigned char 
 28014 ;; Auto vars:     Size  Location     Type
 28015 ;;  pValue          1    6[BANK0 ] unsigned char 
 28016 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 28017 ;;  v               1    7[BANK0 ] unsigned char 
 28018 ;; Return value:  Size  Location     Type
 28019 ;;                  1    wreg      void 
 28020 ;; Registers used:
 28021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28022 ;; Tracked objects:
 28023 ;;		On entry : 0/0
 28024 ;;		On exit  : 0/0
 28025 ;;		Unchanged: 0/0
 28026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28028 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28029 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28030 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28031 ;;Total ram usage:        8 bytes
 28032 ;; Hardware stack levels used:    1
 28033 ;; Hardware stack levels required when called:    7
 28034 ;; This function calls:
 28035 ;;		Nothing
 28036 ;; This function is called by:
 28037 ;;		_Event_TestButton
 28038 ;; This function uses a non-reentrant model
 28039 ;;
 28040                           
 28041                           	psect	text147
 28042  014C84                     __ptext147:
 28043                           	opt stack 0
 28044  014C84                     _HMI_SetButton:
 28045                           	opt stack 18
 28046                           
 28047                           ;incstack = 0
 28048                           ;HMI_SetButton@pValue stored from wreg
 28049  014C84  0100               	movlb	0	; () banked
 28050  014C86  6FC0               	movwf	HMI_SetButton@pValue& (0+255),b
 28051                           
 28052                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 28053  014C88  0E18               	movlw	low HMI_SetButton@F7213
 28054  014C8A  6EF6               	movwf	tblptrl,c
 28055  014C8C                     	if	1	;There is more than 1 active tblptr byte
 28056  014C8C  0EFD               	movlw	high HMI_SetButton@F7213
 28057  014C8E  6EF7               	movwf	tblptrh,c
 28058  014C90                     	endif
 28059  014C90                     	if	1	;There are 3 active tblptr bytes
 28060  014C90  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 28061  014C92  6EF8               	movwf	tblptru,c
 28062  014C94                     	endif
 28063  014C94  0009               	tblrd		*+
 28064  014C96  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex
 28065  014C9A  0009               	tblrd		*+
 28066  014C9C  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+1
 28067  014CA0  0009               	tblrd		*+
 28068  014CA2  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+2
 28069  014CA6  000A               	tblrd		*-
 28070  014CA8  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+3
 28071                           
 28072                           ;HMI.c: 189: UINT8 v = 0b00010001;
 28073  014CAC  0E11               	movlw	17
 28074  014CAE  0100               	movlb	0	; () banked
 28075  014CB0  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28076                           
 28077                           ; BSR set to: 0
 28078                           ;HMI.c: 190: pValue &= 3;
 28079  014CB2  0E03               	movlw	3
 28080  014CB4  0100               	movlb	0	; () banked
 28081  014CB6  17C0               	andwf	HMI_SetButton@pValue& (0+255),f,b
 28082                           
 28083                           ; BSR set to: 0
 28084                           ;HMI.c: 191: v = v << reindex[pValue];
 28085  014CB8  0100               	movlb	0	; () banked
 28086  014CBA  51C0               	movf	HMI_SetButton@pValue& (0+255),w,b
 28087  014CBC  0D01               	mullw	1
 28088  014CBE  0EBC               	movlw	low HMI_SetButton@reindex
 28089  014CC0  24F3               	addwf	prodl,w,c
 28090  014CC2  6ED9               	movwf	fsr2l,c
 28091  014CC4  0E00               	movlw	high HMI_SetButton@reindex
 28092  014CC6  20F4               	addwfc	prodh,w,c
 28093  014CC8  6EDA               	movwf	fsr2h,c
 28094  014CCA  50DF               	movf	indf2,w,c
 28095  014CCC  0100               	movlb	0	; () banked
 28096  014CCE  6FBA               	movwf	??_HMI_SetButton& (0+255),b
 28097  014CD0  C0C1  F0BB         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 28098  014CD4  0100               	movlb	0	; () banked
 28099  014CD6  2BBA               	incf	??_HMI_SetButton& (0+255),f,b
 28100  014CD8  D003               	goto	u9304
 28101  014CDA                     u9305:
 28102  014CDA  0100               	movlb	0	; () banked
 28103  014CDC  90D8               	bcf	status,0,c
 28104  014CDE  37BB               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 28105  014CE0                     u9304:
 28106  014CE0  0100               	movlb	0	; () banked
 28107  014CE2  2FBA               	decfsz	??_HMI_SetButton& (0+255),f,b
 28108  014CE4  D7FA               	goto	u9305
 28109  014CE6  0100               	movlb	0	; () banked
 28110  014CE8  51BB               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 28111  014CEA  0100               	movlb	0	; () banked
 28112  014CEC  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28113                           
 28114                           ; BSR set to: 0
 28115                           ;HMI.c: 192: v = v >> 4;
 28116  014CEE  0100               	movlb	0	; () banked
 28117  014CF0  39C1               	swapf	HMI_SetButton@v& (0+255),w,b
 28118  014CF2  0B0F               	andlw	15
 28119  014CF4  0100               	movlb	0	; () banked
 28120  014CF6  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28121                           
 28122                           ; BSR set to: 0
 28123                           ;HMI.c: 193: v = v & 0x0F;
 28124  014CF8  0100               	movlb	0	; () banked
 28125  014CFA  51C1               	movf	HMI_SetButton@v& (0+255),w,b
 28126  014CFC  0B0F               	andlw	15
 28127  014CFE  0100               	movlb	0	; () banked
 28128  014D00  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28129                           
 28130                           ; BSR set to: 0
 28131                           ;HMI.c: 194: HMIBoard.pButton = v;
 28132  014D02  0103               	movlb	3	; () banked
 28133  014D04  5144               	movf	(_HMIBoard+6)& (0+255),w,b
 28134  014D06  0100               	movlb	0	; () banked
 28135  014D08  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28136  014D0A  0BF0               	andlw	-16
 28137  014D0C  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28138  014D0E  0103               	movlb	3	; () banked
 28139  014D10  6F44               	movwf	(_HMIBoard+6)& (0+255),b
 28140                           
 28141                           ; BSR set to: 3
 28142  014D12  0012               	return		;funcret
 28143  014D14                     __end_of_HMI_SetButton:
 28144                           	opt stack 0
 28145                           tosu	equ	0xFFF
 28146                           tosh	equ	0xFFE
 28147                           tosl	equ	0xFFD
 28148                           pclath	equ	0xFFA
 28149                           tblptru	equ	0xFF8
 28150                           tblptrh	equ	0xFF7
 28151                           tblptrl	equ	0xFF6
 28152                           tablat	equ	0xFF5
 28153                           prodh	equ	0xFF4
 28154                           prodl	equ	0xFF3
 28155                           intcon	equ	0xFF2
 28156                           postinc0	equ	0xFEE
 28157                           wreg	equ	0xFE8
 28158                           indf1	equ	0xFE7
 28159                           postdec1	equ	0xFE5
 28160                           fsr1h	equ	0xFE2
 28161                           fsr1l	equ	0xFE1
 28162                           indf2	equ	0xFDF
 28163                           postinc2	equ	0xFDE
 28164                           postdec2	equ	0xFDD
 28165                           plusw2	equ	0xFDB
 28166                           fsr2h	equ	0xFDA
 28167                           fsr2l	equ	0xFD9
 28168                           status	equ	0xFD8
 28169                           
 28170 ;; *************** function _LED_Toggle *****************
 28171 ;; Defined at:
 28172 ;;		line 50 in file "Library/LED.c"
 28173 ;; Parameters:    Size  Location     Type
 28174 ;;  pLED            1    wreg     enum E6739
 28175 ;; Auto vars:     Size  Location     Type
 28176 ;;  pLED            1   24[BANK0 ] enum E6739
 28177 ;; Return value:  Size  Location     Type
 28178 ;;                  1    wreg      void 
 28179 ;; Registers used:
 28180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28181 ;; Tracked objects:
 28182 ;;		On entry : 0/0
 28183 ;;		On exit  : 0/0
 28184 ;;		Unchanged: 0/0
 28185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28189 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28190 ;;Total ram usage:        1 bytes
 28191 ;; Hardware stack levels used:    1
 28192 ;; Hardware stack levels required when called:   12
 28193 ;; This function calls:
 28194 ;;		_Port_TogglePin
 28195 ;; This function is called by:
 28196 ;;		_LCD_Reset
 28197 ;;		_Event_DIPSwitch
 28198 ;;		_Event_TestButton
 28199 ;;		_Event_ADCSequenceComplete
 28200 ;;		_Event_HMI_DIPSwitch
 28201 ;;		_Event_HMI_LeftButton
 28202 ;;		_Event_HMI_RightButton
 28203 ;;		_Event_HMI_UpButton
 28204 ;;		_Event_HMI_DownButton
 28205 ;; This function uses a non-reentrant model
 28206 ;;
 28207                           
 28208                           	psect	text148
 28209  015D24                     __ptext148:
 28210                           	opt stack 0
 28211  015D24                     _LED_Toggle:
 28212                           	opt stack 13
 28213                           
 28214                           ; BSR set to: 3
 28215                           ;incstack = 0
 28216                           ;LED_Toggle@pLED stored from wreg
 28217  015D24  0100               	movlb	0	; () banked
 28218  015D26  6FD2               	movwf	LED_Toggle@pLED& (0+255),b
 28219                           
 28220                           ;LED.c: 52: switch (pLED)
 28221  015D28  D018               	goto	l234
 28222  015D2A                     
 28223                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 28224  015D2A  0EA5               	movlw	low _PortC
 28225  015D2C  0100               	movlb	0	; () banked
 28226  015D2E  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28227  015D30  0E00               	movlw	high _PortC
 28228  015D32  0100               	movlb	0	; () banked
 28229  015D34  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28230  015D36  0E00               	movlw	0
 28231  015D38  0100               	movlb	0	; () banked
 28232  015D3A  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28233  015D3C  ECF7  F0B0         	call	_Port_TogglePin	;wreg free
 28234                           
 28235                           ;LED.c: 56: break;
 28236  015D40  0012               	return	
 28237  015D42                     
 28238                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 28239  015D42  0EA5               	movlw	low _PortC
 28240  015D44  0100               	movlb	0	; () banked
 28241  015D46  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28242  015D48  0E00               	movlw	high _PortC
 28243  015D4A  0100               	movlb	0	; () banked
 28244  015D4C  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28245  015D4E  0E01               	movlw	1
 28246  015D50  0100               	movlb	0	; () banked
 28247  015D52  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28248  015D54  ECF7  F0B0         	call	_Port_TogglePin	;wreg free
 28249                           
 28250                           ;LED.c: 60: }
 28251                           
 28252                           ;LED.c: 59: break;
 28253  015D58  0012               	return	
 28254  015D5A                     l234:
 28255  015D5A  0100               	movlb	0	; () banked
 28256  015D5C  51D2               	movf	LED_Toggle@pLED& (0+255),w,b
 28257                           
 28258                           ; Switch size 1, requested type "space"
 28259                           ; Number of cases is 2, Range of values is 0 to 1
 28260                           ; switch strategies available:
 28261                           ; Name         Instructions Cycles
 28262                           ; simple_byte            7     4 (average)
 28263                           ;	Chosen strategy is simple_byte
 28264  015D5E  0A00               	xorlw	0	; case 0
 28265  015D60  B4D8               	btfsc	status,2,c
 28266  015D62  D7E3               	goto	l235
 28267  015D64  0A01               	xorlw	1	; case 1
 28268  015D66  A4D8               	btfss	status,2,c
 28269  015D68  0012               	return	
 28270  015D6A  D7EB               	goto	l237
 28271  015D6C                     __end_of_LED_Toggle:
 28272                           	opt stack 0
 28273                           tosu	equ	0xFFF
 28274                           tosh	equ	0xFFE
 28275                           tosl	equ	0xFFD
 28276                           pclath	equ	0xFFA
 28277                           tblptru	equ	0xFF8
 28278                           tblptrh	equ	0xFF7
 28279                           tblptrl	equ	0xFF6
 28280                           tablat	equ	0xFF5
 28281                           prodh	equ	0xFF4
 28282                           prodl	equ	0xFF3
 28283                           intcon	equ	0xFF2
 28284                           postinc0	equ	0xFEE
 28285                           wreg	equ	0xFE8
 28286                           indf1	equ	0xFE7
 28287                           postdec1	equ	0xFE5
 28288                           fsr1h	equ	0xFE2
 28289                           fsr1l	equ	0xFE1
 28290                           indf2	equ	0xFDF
 28291                           postinc2	equ	0xFDE
 28292                           postdec2	equ	0xFDD
 28293                           plusw2	equ	0xFDB
 28294                           fsr2h	equ	0xFDA
 28295                           fsr2l	equ	0xFD9
 28296                           status	equ	0xFD8
 28297                           
 28298 ;; *************** function _Port_TogglePin *****************
 28299 ;; Defined at:
 28300 ;;		line 278 in file "Library/Port.c"
 28301 ;; Parameters:    Size  Location     Type
 28302 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 28303 ;;		 -> PortC(10), 
 28304 ;;  pPin            1   22[BANK0 ] enum E6750
 28305 ;; Auto vars:     Size  Location     Type
 28306 ;;  Value           1   23[BANK0 ] unsigned char 
 28307 ;; Return value:  Size  Location     Type
 28308 ;;                  1    wreg      void 
 28309 ;; Registers used:
 28310 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28311 ;; Tracked objects:
 28312 ;;		On entry : 0/0
 28313 ;;		On exit  : 0/0
 28314 ;;		Unchanged: 0/0
 28315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28316 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28319 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28320 ;;Total ram usage:        4 bytes
 28321 ;; Hardware stack levels used:    1
 28322 ;; Hardware stack levels required when called:   11
 28323 ;; This function calls:
 28324 ;;		_Port_GetPin
 28325 ;;		_Port_SetPin
 28326 ;; This function is called by:
 28327 ;;		_LED_Toggle
 28328 ;; This function uses a non-reentrant model
 28329 ;;
 28330                           
 28331                           	psect	text149
 28332  0161EE                     __ptext149:
 28333                           	opt stack 0
 28334  0161EE                     _Port_TogglePin:
 28335                           	opt stack 13
 28336                           
 28337                           ;Port.c: 280: UINT8 Value;
 28338                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 28339                           
 28340                           ;incstack = 0
 28341  0161EE  C0CE  F0BA         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 28342  0161F2  C0CF  F0BB         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 28343  0161F6  C0D0  F0BC         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 28344  0161FA  ECFC  F0AE         	call	_Port_GetPin	;wreg free
 28345  0161FE  0100               	movlb	0	; () banked
 28346  016200  6FD1               	movwf	Port_TogglePin@Value& (0+255),b
 28347                           
 28348                           ; BSR set to: 0
 28349                           ;Port.c: 282: Value ^= 0x01;
 28350  016202  0E01               	movlw	1
 28351  016204  0100               	movlb	0	; () banked
 28352  016206  1BD1               	xorwf	Port_TogglePin@Value& (0+255),f,b
 28353                           
 28354                           ; BSR set to: 0
 28355                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 28356  016208  C0CE  F0C9         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 28357  01620C  C0CF  F0CA         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 28358  016210  C0D0  F0CB         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 28359  016214  C0D1  F0CC         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 28360  016218  ECC8  F09F         	call	_Port_SetPin	;wreg free
 28361  01621C  0012               	return		;funcret
 28362  01621E                     __end_of_Port_TogglePin:
 28363                           	opt stack 0
 28364                           tosu	equ	0xFFF
 28365                           tosh	equ	0xFFE
 28366                           tosl	equ	0xFFD
 28367                           pclath	equ	0xFFA
 28368                           tblptru	equ	0xFF8
 28369                           tblptrh	equ	0xFF7
 28370                           tblptrl	equ	0xFF6
 28371                           tablat	equ	0xFF5
 28372                           prodh	equ	0xFF4
 28373                           prodl	equ	0xFF3
 28374                           intcon	equ	0xFF2
 28375                           postinc0	equ	0xFEE
 28376                           wreg	equ	0xFE8
 28377                           indf1	equ	0xFE7
 28378                           postdec1	equ	0xFE5
 28379                           fsr1h	equ	0xFE2
 28380                           fsr1l	equ	0xFE1
 28381                           indf2	equ	0xFDF
 28382                           postinc2	equ	0xFDE
 28383                           postdec2	equ	0xFDD
 28384                           plusw2	equ	0xFDB
 28385                           fsr2h	equ	0xFDA
 28386                           fsr2l	equ	0xFD9
 28387                           status	equ	0xFD8
 28388                           
 28389 ;; *************** function _Port_SetPin *****************
 28390 ;; Defined at:
 28391 ;;		line 247 in file "Library/Port.c"
 28392 ;; Parameters:    Size  Location     Type
 28393 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 28394 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 28395 ;;  pPin            1   17[BANK0 ] enum E6750
 28396 ;;  pValue          1   18[BANK0 ] unsigned char 
 28397 ;; Auto vars:     Size  Location     Type
 28398 ;;  Type            1   19[BANK0 ] enum E6795
 28399 ;; Return value:  Size  Location     Type
 28400 ;;                  1    wreg      void 
 28401 ;; Registers used:
 28402 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28403 ;; Tracked objects:
 28404 ;;		On entry : 0/0
 28405 ;;		On exit  : 0/0
 28406 ;;		Unchanged: 0/0
 28407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28408 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28409 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28411 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28412 ;;Total ram usage:        5 bytes
 28413 ;; Hardware stack levels used:    1
 28414 ;; Hardware stack levels required when called:   10
 28415 ;; This function calls:
 28416 ;;		_Byte_SetBit
 28417 ;;		_Word_GetPair
 28418 ;; This function is called by:
 28419 ;;		_Reset_Low
 28420 ;;		_Reset_High
 28421 ;;		_LED_Set
 28422 ;;		_Port_TogglePin
 28423 ;;		_Motor_Init
 28424 ;;		_Motor_Step
 28425 ;;		_MXK_Init
 28426 ;; This function uses a non-reentrant model
 28427 ;;
 28428                           
 28429                           	psect	text150
 28430  013F90                     __ptext150:
 28431                           	opt stack 0
 28432  013F90                     _Port_SetPin:
 28433                           	opt stack 13
 28434                           
 28435                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28436                           
 28437                           ;incstack = 0
 28438  013F90  0E08               	movlw	8
 28439  013F92  0100               	movlb	0	; () banked
 28440  013F94  25C9               	addwf	Port_SetPin@pInput& (0+255),w,b
 28441  013F96  0100               	movlb	0	; () banked
 28442  013F98  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 28443  013F9A  0E00               	movlw	0
 28444  013F9C  0100               	movlb	0	; () banked
 28445  013F9E  21CA               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28446  013FA0  0100               	movlb	0	; () banked
 28447  013FA2  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28448  013FA4  C0CB  F0C8         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28449  013FA8  ECFF  F0AF         	call	_Word_GetPair	;wreg free
 28450  013FAC  0100               	movlb	0	; () banked
 28451  013FAE  6FCD               	movwf	Port_SetPin@Type& (0+255),b
 28452                           
 28453                           ;Port.c: 250: switch (Type)
 28454  013FB0  D042               	goto	l427
 28455  013FB2                     
 28456                           ; BSR set to: 0
 28457                           ;Port.c: 256: pValue &= 1;
 28458                           
 28459                           ; BSR set to: 0
 28460  013FB2  0E01               	movlw	1
 28461  013FB4  0100               	movlb	0	; () banked
 28462  013FB6  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28463                           
 28464                           ; BSR set to: 0
 28465                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28466  013FB8  0100               	movlb	0	; () banked
 28467  013FBA  EE20 F002          	lfsr	2,2
 28468  013FBE  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28469  013FC0  26D9               	addwf	fsr2l,f,c
 28470  013FC2  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28471  013FC4  22DA               	addwfc	fsr2h,f,c
 28472  013FC6  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28473  013FCA  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28474  013FCE  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28475  013FD2  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28476  013FD6  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 28477                           
 28478                           ;Port.c: 258: break;
 28479  013FDA  0012               	return	
 28480  013FDC                     
 28481                           ;Port.c: 261: pValue &= 1;
 28482  013FDC  0E01               	movlw	1
 28483  013FDE  0100               	movlb	0	; () banked
 28484  013FE0  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28485                           
 28486                           ;Port.c: 262: pValue ^= 1;
 28487  013FE2  0E01               	movlw	1
 28488  013FE4  0100               	movlb	0	; () banked
 28489  013FE6  1BCC               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28490                           
 28491                           ; BSR set to: 0
 28492                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28493  013FE8  0100               	movlb	0	; () banked
 28494  013FEA  EE20 F002          	lfsr	2,2
 28495  013FEE  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28496  013FF0  26D9               	addwf	fsr2l,f,c
 28497  013FF2  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28498  013FF4  22DA               	addwfc	fsr2h,f,c
 28499  013FF6  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28500  013FFA  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28501  013FFE  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28502  014002  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28503  014006  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 28504                           
 28505                           ;Port.c: 264: break;
 28506  01400A  0012               	return	
 28507  01400C                     
 28508                           ;Port.c: 266: pValue &= 1;
 28509  01400C  0E01               	movlw	1
 28510  01400E  0100               	movlb	0	; () banked
 28511  014010  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28512                           
 28513                           ; BSR set to: 0
 28514                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28515  014012  0100               	movlb	0	; () banked
 28516  014014  EE20 F004          	lfsr	2,4
 28517  014018  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28518  01401A  26D9               	addwf	fsr2l,f,c
 28519  01401C  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28520  01401E  22DA               	addwfc	fsr2h,f,c
 28521  014020  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28522  014024  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28523  014028  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28524  01402C  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28525  014030  EC1A  F0AC         	call	_Byte_SetBit	;wreg free
 28526                           
 28527                           ;Port.c: 269: }
 28528                           
 28529                           ;Port.c: 268: break;
 28530  014034  0012               	return	
 28531  014036                     l427:
 28532  014036  0100               	movlb	0	; () banked
 28533  014038  51CD               	movf	Port_SetPin@Type& (0+255),w,b
 28534                           
 28535                           ; Switch size 1, requested type "space"
 28536                           ; Number of cases is 4, Range of values is 0 to 3
 28537                           ; switch strategies available:
 28538                           ; Name         Instructions Cycles
 28539                           ; simple_byte           13     7 (average)
 28540                           ;	Chosen strategy is simple_byte
 28541  01403A  0A00               	xorlw	0	; case 0
 28542  01403C  B4D8               	btfsc	status,2,c
 28543  01403E  0012               	return	
 28544  014040  0A01               	xorlw	1	; case 1
 28545  014042  B4D8               	btfsc	status,2,c
 28546  014044  D7B6               	goto	l430
 28547  014046  0A03               	xorlw	3	; case 2
 28548  014048  B4D8               	btfsc	status,2,c
 28549  01404A  D7C8               	goto	l432
 28550  01404C  0A01               	xorlw	1	; case 3
 28551  01404E  A4D8               	btfss	status,2,c
 28552  014050  0012               	return	
 28553  014052  D7DC               	goto	l433
 28554  014054                     __end_of_Port_SetPin:
 28555                           	opt stack 0
 28556                           tosu	equ	0xFFF
 28557                           tosh	equ	0xFFE
 28558                           tosl	equ	0xFFD
 28559                           pclath	equ	0xFFA
 28560                           tblptru	equ	0xFF8
 28561                           tblptrh	equ	0xFF7
 28562                           tblptrl	equ	0xFF6
 28563                           tablat	equ	0xFF5
 28564                           prodh	equ	0xFF4
 28565                           prodl	equ	0xFF3
 28566                           intcon	equ	0xFF2
 28567                           postinc0	equ	0xFEE
 28568                           wreg	equ	0xFE8
 28569                           indf1	equ	0xFE7
 28570                           postdec1	equ	0xFE5
 28571                           fsr1h	equ	0xFE2
 28572                           fsr1l	equ	0xFE1
 28573                           indf2	equ	0xFDF
 28574                           postinc2	equ	0xFDE
 28575                           postdec2	equ	0xFDD
 28576                           plusw2	equ	0xFDB
 28577                           fsr2h	equ	0xFDA
 28578                           fsr2l	equ	0xFD9
 28579                           status	equ	0xFD8
 28580                           
 28581 ;; *************** function _Word_GetPair *****************
 28582 ;; Defined at:
 28583 ;;		line 156 in file "Library/Types.c"
 28584 ;; Parameters:    Size  Location     Type
 28585 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28586 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28587 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28588 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28589 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28590 ;;  pPair           1   14[BANK0 ] unsigned char 
 28591 ;; Auto vars:     Size  Location     Type
 28592 ;;		None
 28593 ;; Return value:  Size  Location     Type
 28594 ;;                  1    wreg      unsigned char 
 28595 ;; Registers used:
 28596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28597 ;; Tracked objects:
 28598 ;;		On entry : 0/0
 28599 ;;		On exit  : 0/0
 28600 ;;		Unchanged: 0/0
 28601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28602 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28605 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28606 ;;Total ram usage:        3 bytes
 28607 ;; Hardware stack levels used:    1
 28608 ;; Hardware stack levels required when called:    9
 28609 ;; This function calls:
 28610 ;;		_Byte_GetPair
 28611 ;; This function is called by:
 28612 ;;		_Port_Init
 28613 ;;		_Port_SetPin
 28614 ;;		_Port_Set
 28615 ;;		_PortProperty_Valid
 28616 ;;		_Port_SetPair
 28617 ;;		_Port_SetQuad
 28618 ;; This function uses a non-reentrant model
 28619 ;;
 28620                           
 28621                           	psect	text151
 28622  015FFE                     __ptext151:
 28623                           	opt stack 0
 28624  015FFE                     _Word_GetPair:
 28625                           	opt stack 13
 28626                           
 28627                           ;Types.c: 158: if (pPair >= 4)
 28628                           
 28629                           ;incstack = 0
 28630  015FFE  0E03               	movlw	3
 28631  016000  0100               	movlb	0	; () banked
 28632  016002  65C8               	cpfsgt	Word_GetPair@pPair& (0+255),b
 28633  016004  D012               	goto	l781
 28634                           
 28635                           ; BSR set to: 0
 28636                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28637  016006  0E01               	movlw	1
 28638  016008  0100               	movlb	0	; () banked
 28639  01600A  25C6               	addwf	Word_GetPair@pInput& (0+255),w,b
 28640  01600C  0100               	movlb	0	; () banked
 28641  01600E  6FC3               	movwf	Byte_GetPair@pInput& (0+255),b
 28642  016010  0E00               	movlw	0
 28643  016012  0100               	movlb	0	; () banked
 28644  016014  21C7               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 28645  016016  0100               	movlb	0	; () banked
 28646  016018  6FC4               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 28647  01601A  0100               	movlb	0	; () banked
 28648  01601C  51C8               	movf	Word_GetPair@pPair& (0+255),w,b
 28649  01601E  0FFC               	addlw	252
 28650  016020  0100               	movlb	0	; () banked
 28651  016022  6FC5               	movwf	Byte_GetPair@pPair& (0+255),b
 28652  016024  EC52  F0B2         	call	_Byte_GetPair	;wreg free
 28653  016028  0012               	return	
 28654  01602A                     l781:
 28655                           
 28656                           ;Types.c: 160: else
 28657                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28658  01602A  C0C6  F0C3         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 28659  01602E  C0C7  F0C4         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 28660  016032  C0C8  F0C5         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 28661  016036  EC52  F0B2         	call	_Byte_GetPair	;wreg free
 28662  01603A  0012               	return	
 28663  01603C                     __end_of_Word_GetPair:
 28664                           	opt stack 0
 28665                           tosu	equ	0xFFF
 28666                           tosh	equ	0xFFE
 28667                           tosl	equ	0xFFD
 28668                           pclath	equ	0xFFA
 28669                           tblptru	equ	0xFF8
 28670                           tblptrh	equ	0xFF7
 28671                           tblptrl	equ	0xFF6
 28672                           tablat	equ	0xFF5
 28673                           prodh	equ	0xFF4
 28674                           prodl	equ	0xFF3
 28675                           intcon	equ	0xFF2
 28676                           postinc0	equ	0xFEE
 28677                           wreg	equ	0xFE8
 28678                           indf1	equ	0xFE7
 28679                           postdec1	equ	0xFE5
 28680                           fsr1h	equ	0xFE2
 28681                           fsr1l	equ	0xFE1
 28682                           indf2	equ	0xFDF
 28683                           postinc2	equ	0xFDE
 28684                           postdec2	equ	0xFDD
 28685                           plusw2	equ	0xFDB
 28686                           fsr2h	equ	0xFDA
 28687                           fsr2l	equ	0xFD9
 28688                           status	equ	0xFD8
 28689                           
 28690 ;; *************** function _Byte_GetPair *****************
 28691 ;; Defined at:
 28692 ;;		line 87 in file "Library/Types.c"
 28693 ;; Parameters:    Size  Location     Type
 28694 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 28695 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28696 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28697 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28698 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28699 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28700 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28701 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28702 ;;		 -> NULL(0), 
 28703 ;;  pPair           1   11[BANK0 ] unsigned char 
 28704 ;; Auto vars:     Size  Location     Type
 28705 ;;		None
 28706 ;; Return value:  Size  Location     Type
 28707 ;;                  1    wreg      unsigned char 
 28708 ;; Registers used:
 28709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28710 ;; Tracked objects:
 28711 ;;		On entry : 0/0
 28712 ;;		On exit  : 0/0
 28713 ;;		Unchanged: 0/0
 28714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28715 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28718 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28719 ;;Total ram usage:        3 bytes
 28720 ;; Hardware stack levels used:    1
 28721 ;; Hardware stack levels required when called:    8
 28722 ;; This function calls:
 28723 ;;		_Byte_GetZone
 28724 ;; This function is called by:
 28725 ;;		_Word_GetPair
 28726 ;; This function uses a non-reentrant model
 28727 ;;
 28728                           
 28729                           	psect	text152
 28730  0164A4                     __ptext152:
 28731                           	opt stack 0
 28732  0164A4                     _Byte_GetPair:
 28733                           	opt stack 13
 28734                           
 28735                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28736                           
 28737                           ;incstack = 0
 28738  0164A4  C0C3  F0BA         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 28739  0164A8  C0C4  F0BB         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 28740  0164AC  0E04               	movlw	4
 28741  0164AE  0100               	movlb	0	; () banked
 28742  0164B0  6FBC               	movwf	Byte_GetZone@pMax& (0+255),b
 28743  0164B2  C0C5  F0BD         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 28744  0164B6  0E02               	movlw	2
 28745  0164B8  0100               	movlb	0	; () banked
 28746  0164BA  6FBE               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 28747  0164BC  ECA8  F0A5         	call	_Byte_GetZone	;wreg free
 28748  0164C0  0012               	return	
 28749  0164C2                     __end_of_Byte_GetPair:
 28750                           	opt stack 0
 28751                           tosu	equ	0xFFF
 28752                           tosh	equ	0xFFE
 28753                           tosl	equ	0xFFD
 28754                           pclath	equ	0xFFA
 28755                           tblptru	equ	0xFF8
 28756                           tblptrh	equ	0xFF7
 28757                           tblptrl	equ	0xFF6
 28758                           tablat	equ	0xFF5
 28759                           prodh	equ	0xFF4
 28760                           prodl	equ	0xFF3
 28761                           intcon	equ	0xFF2
 28762                           postinc0	equ	0xFEE
 28763                           wreg	equ	0xFE8
 28764                           indf1	equ	0xFE7
 28765                           postdec1	equ	0xFE5
 28766                           fsr1h	equ	0xFE2
 28767                           fsr1l	equ	0xFE1
 28768                           indf2	equ	0xFDF
 28769                           postinc2	equ	0xFDE
 28770                           postdec2	equ	0xFDD
 28771                           plusw2	equ	0xFDB
 28772                           fsr2h	equ	0xFDA
 28773                           fsr2l	equ	0xFD9
 28774                           status	equ	0xFD8
 28775                           
 28776 ;; *************** function _Byte_GetZone *****************
 28777 ;; Defined at:
 28778 ;;		line 64 in file "Library/Types.c"
 28779 ;; Parameters:    Size  Location     Type
 28780 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28781 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28782 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28783 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28784 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28785 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28786 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28787 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28788 ;;		 -> NULL(0), 
 28789 ;;  pMax            1    2[BANK0 ] unsigned char 
 28790 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28791 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28792 ;; Auto vars:     Size  Location     Type
 28793 ;;  Output          1    8[BANK0 ] unsigned char 
 28794 ;;  Offset          1    7[BANK0 ] unsigned char 
 28795 ;;  MASK            1    6[BANK0 ] unsigned char 
 28796 ;; Return value:  Size  Location     Type
 28797 ;;                  1    wreg      unsigned char 
 28798 ;; Registers used:
 28799 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28800 ;; Tracked objects:
 28801 ;;		On entry : 0/0
 28802 ;;		On exit  : 0/0
 28803 ;;		Unchanged: 0/0
 28804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28805 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28806 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28808 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28809 ;;Total ram usage:        9 bytes
 28810 ;; Hardware stack levels used:    1
 28811 ;; Hardware stack levels required when called:    7
 28812 ;; This function calls:
 28813 ;;		Nothing
 28814 ;; This function is called by:
 28815 ;;		_Byte_GetPair
 28816 ;;		_Byte_GetTriple
 28817 ;;		_Byte_GetQuad
 28818 ;; This function uses a non-reentrant model
 28819 ;;
 28820                           
 28821                           	psect	text153
 28822  014B50                     __ptext153:
 28823                           	opt stack 0
 28824  014B50                     _Byte_GetZone:
 28825                           	opt stack 13
 28826                           
 28827                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28828                           
 28829                           ;incstack = 0
 28830  014B50  C0BA  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 28831  014B54  C0BB  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 28832  014B58  0E00               	movlw	low (__mediumconst shr (0+16))
 28833  014B5A  6EF8               	movwf	tblptru,c
 28834  014B5C  0E0F               	movlw	(high __ramtop+-1)
 28835  014B5E  64F7               	cpfsgt	tblptrh,c
 28836  014B60  D003               	bra	u8767
 28837  014B62  0008               	tblrd		*
 28838  014B64  50F5               	movf	tablat,w,c
 28839  014B66  D005               	bra	u8760
 28840  014B68                     u8767:
 28841  014B68  CFF6 FFE9          	movff	tblptrl,fsr0l
 28842  014B6C  CFF7 FFEA          	movff	tblptrh,fsr0h
 28843  014B70  50EF               	movf	indf0,w,c
 28844  014B72                     u8760:
 28845  014B72  0100               	movlb	0	; () banked
 28846  014B74  6FC2               	movwf	Byte_GetZone@Output& (0+255),b
 28847                           
 28848                           ; BSR set to: 0
 28849                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28850  014B76  0100               	movlb	0	; () banked
 28851  014B78  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28852  014B7A  0D01               	mullw	1
 28853  014B7C  0E0F               	movlw	low _MASKS
 28854  014B7E  24F3               	addwf	prodl,w,c
 28855  014B80  6EF6               	movwf	tblptrl,c
 28856  014B82  0EFD               	movlw	high _MASKS
 28857  014B84  20F4               	addwfc	prodh,w,c
 28858  014B86  6EF7               	movwf	tblptrh,c
 28859  014B88                     	if	1	;There are 3 active tblptr bytes
 28860  014B88  6AF8               	clrf	tblptru,c
 28861  014B8A  0E00               	movlw	low (__mediumconst shr (0+16))
 28862  014B8C  22F8               	addwfc	tblptru,f,c
 28863  014B8E                     	endif
 28864  014B8E  0008               	tblrd		*
 28865  014B90  CFF5 F0C0          	movff	tablat,Byte_GetZone@MASK
 28866                           
 28867                           ; BSR set to: 0
 28868                           ;Types.c: 68: UINT8 Offset = 0;
 28869  014B94  0E00               	movlw	0
 28870  014B96  0100               	movlb	0	; () banked
 28871  014B98  6FC1               	movwf	Byte_GetZone@Offset& (0+255),b
 28872                           
 28873                           ;Types.c: 70: while (pChunk >= pMax)
 28874  014B9A  D006               	goto	l732
 28875  014B9C                     
 28876                           ; BSR set to: 0
 28877                           ;Types.c: 71: {
 28878                           ;Types.c: 72: pChunk -= pMax;
 28879                           
 28880                           ; BSR set to: 0
 28881  014B9C  0100               	movlb	0	; () banked
 28882  014B9E  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 28883  014BA0  0100               	movlb	0	; () banked
 28884  014BA2  5FBD               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 28885                           
 28886                           ; BSR set to: 0
 28887                           ;Types.c: 73: Offset += 1;
 28888  014BA4  0100               	movlb	0	; () banked
 28889  014BA6  2BC1               	incf	Byte_GetZone@Offset& (0+255),f,b
 28890  014BA8                     l732:
 28891                           
 28892                           ; BSR set to: 0
 28893                           
 28894                           ; BSR set to: 0
 28895  014BA8  0100               	movlb	0	; () banked
 28896  014BAA  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 28897  014BAC  0100               	movlb	0	; () banked
 28898  014BAE  5DBD               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 28899  014BB0  B0D8               	btfsc	status,0,c
 28900  014BB2  D7F4               	goto	l733
 28901                           
 28902                           ; BSR set to: 0
 28903                           ;Types.c: 74: }
 28904                           ;Types.c: 75: pChunk *= pChunkSize;
 28905                           
 28906                           ; BSR set to: 0
 28907  014BB4  0100               	movlb	0	; () banked
 28908  014BB6  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28909  014BB8  0100               	movlb	0	; () banked
 28910  014BBA  03BD               	mulwf	Byte_GetZone@pChunk& (0+255),b
 28911  014BBC  50F3               	movf	prodl,w,c
 28912  014BBE  6FBD               	movwf	Byte_GetZone@pChunk& (0+255),b
 28913                           
 28914                           ; BSR set to: 0
 28915                           ;Types.c: 76: pChunk += Offset;
 28916  014BC0  0100               	movlb	0	; () banked
 28917  014BC2  51C1               	movf	Byte_GetZone@Offset& (0+255),w,b
 28918  014BC4  0100               	movlb	0	; () banked
 28919  014BC6  27BD               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 28920                           
 28921                           ; BSR set to: 0
 28922                           ;Types.c: 78: Output >>= pChunk;
 28923  014BC8  0100               	movlb	0	; () banked
 28924  014BCA  29BD               	incf	Byte_GetZone@pChunk& (0+255),w,b
 28925  014BCC  0100               	movlb	0	; () banked
 28926  014BCE  6FBF               	movwf	??_Byte_GetZone& (0+255),b
 28927  014BD0  D003               	goto	u8780
 28928  014BD2                     u8785:
 28929  014BD2  0100               	movlb	0	; () banked
 28930  014BD4  90D8               	bcf	status,0,c
 28931  014BD6  33C2               	rrcf	Byte_GetZone@Output& (0+255),f,b
 28932  014BD8                     u8780:
 28933  014BD8  0100               	movlb	0	; () banked
 28934  014BDA  2FBF               	decfsz	??_Byte_GetZone& (0+255),f,b
 28935  014BDC  D7FA               	goto	u8785
 28936                           
 28937                           ;Types.c: 79: Output &= MASK;
 28938  014BDE  0100               	movlb	0	; () banked
 28939  014BE0  51C0               	movf	Byte_GetZone@MASK& (0+255),w,b
 28940  014BE2  0100               	movlb	0	; () banked
 28941  014BE4  17C2               	andwf	Byte_GetZone@Output& (0+255),f,b
 28942                           
 28943                           ; BSR set to: 0
 28944                           ;Types.c: 80: return Output;
 28945  014BE6  0100               	movlb	0	; () banked
 28946  014BE8  51C2               	movf	Byte_GetZone@Output& (0+255),w,b
 28947  014BEA  0012               	return	
 28948  014BEC                     __end_of_Byte_GetZone:
 28949                           	opt stack 0
 28950                           tosu	equ	0xFFF
 28951                           tosh	equ	0xFFE
 28952                           tosl	equ	0xFFD
 28953                           pclath	equ	0xFFA
 28954                           tblptru	equ	0xFF8
 28955                           tblptrh	equ	0xFF7
 28956                           tblptrl	equ	0xFF6
 28957                           tablat	equ	0xFF5
 28958                           prodh	equ	0xFF4
 28959                           prodl	equ	0xFF3
 28960                           intcon	equ	0xFF2
 28961                           indf0	equ	0xFEF
 28962                           postinc0	equ	0xFEE
 28963                           fsr0h	equ	0xFEA
 28964                           fsr0l	equ	0xFE9
 28965                           wreg	equ	0xFE8
 28966                           indf1	equ	0xFE7
 28967                           postdec1	equ	0xFE5
 28968                           fsr1h	equ	0xFE2
 28969                           fsr1l	equ	0xFE1
 28970                           indf2	equ	0xFDF
 28971                           postinc2	equ	0xFDE
 28972                           postdec2	equ	0xFDD
 28973                           plusw2	equ	0xFDB
 28974                           fsr2h	equ	0xFDA
 28975                           fsr2l	equ	0xFD9
 28976                           status	equ	0xFD8
 28977                           
 28978 ;; *************** function _Byte_SetBit *****************
 28979 ;; Defined at:
 28980 ;;		line 32 in file "Library/Types.c"
 28981 ;; Parameters:    Size  Location     Type
 28982 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28983 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28984 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28985 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28986 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28987 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28988 ;;		 -> NULL(0), 
 28989 ;;  pBit            1    2[BANK0 ] unsigned char 
 28990 ;;  pValue          1    3[BANK0 ] unsigned char 
 28991 ;; Auto vars:     Size  Location     Type
 28992 ;;		None
 28993 ;; Return value:  Size  Location     Type
 28994 ;;                  1    wreg      void 
 28995 ;; Registers used:
 28996 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28997 ;; Tracked objects:
 28998 ;;		On entry : 0/0
 28999 ;;		On exit  : 0/0
 29000 ;;		Unchanged: 0/0
 29001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29002 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29004 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29005 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29006 ;;Total ram usage:        7 bytes
 29007 ;; Hardware stack levels used:    1
 29008 ;; Hardware stack levels required when called:    7
 29009 ;; This function calls:
 29010 ;;		Nothing
 29011 ;; This function is called by:
 29012 ;;		_Port_SetPinType
 29013 ;;		_Port_SetPin
 29014 ;;		_SPI_Init
 29015 ;;		_SPI_MinSpeed
 29016 ;;		_SPI_MaxSpeed
 29017 ;;		_Word_SetBit
 29018 ;;		_I2C_Init
 29019 ;; This function uses a non-reentrant model
 29020 ;;
 29021                           
 29022                           	psect	text154
 29023  015834                     __ptext154:
 29024                           	opt stack 0
 29025  015834                     _Byte_SetBit:
 29026                           	opt stack 15
 29027                           
 29028                           ;Types.c: 34: pValue &= 1;
 29029                           
 29030                           ; BSR set to: 0
 29031                           ;incstack = 0
 29032  015834  0E01               	movlw	1
 29033  015836  0100               	movlb	0	; () banked
 29034  015838  17BD               	andwf	Byte_SetBit@pValue& (0+255),f,b
 29035                           
 29036                           ; BSR set to: 0
 29037                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 29038  01583A  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29039  01583E  0E01               	movlw	1
 29040  015840  0100               	movlb	0	; () banked
 29041  015842  6FBF               	movwf	(??_Byte_SetBit+1)& (0+255),b
 29042  015844  0100               	movlb	0	; () banked
 29043  015846  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29044  015848  D003               	goto	u8804
 29045  01584A                     u8805:
 29046  01584A  0100               	movlb	0	; () banked
 29047  01584C  90D8               	bcf	status,0,c
 29048  01584E  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29049  015850                     u8804:
 29050  015850  0100               	movlb	0	; () banked
 29051  015852  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29052  015854  D7FA               	goto	u8805
 29053  015856  0100               	movlb	0	; () banked
 29054  015858  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29055  01585A  0AFF               	xorlw	255
 29056  01585C  0100               	movlb	0	; () banked
 29057  01585E  6FC0               	movwf	(??_Byte_SetBit+2)& (0+255),b
 29058  015860  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29059  015864  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29060  015868  0100               	movlb	0	; () banked
 29061  01586A  51C0               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 29062  01586C  16DF               	andwf	indf2,f,c
 29063                           
 29064                           ; BSR set to: 0
 29065                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 29066  01586E  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29067  015872  C0BD  F0BF         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 29068  015876  0100               	movlb	0	; () banked
 29069  015878  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29070  01587A  D003               	goto	u8814
 29071  01587C                     u8815:
 29072  01587C  0100               	movlb	0	; () banked
 29073  01587E  90D8               	bcf	status,0,c
 29074  015880  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29075  015882                     u8814:
 29076  015882  0100               	movlb	0	; () banked
 29077  015884  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29078  015886  D7FA               	goto	u8815
 29079  015888  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29080  01588C  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29081  015890  0100               	movlb	0	; () banked
 29082  015892  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29083  015894  12DF               	iorwf	indf2,f,c
 29084                           
 29085                           ; BSR set to: 0
 29086  015896  0012               	return		;funcret
 29087  015898                     __end_of_Byte_SetBit:
 29088                           	opt stack 0
 29089                           tosu	equ	0xFFF
 29090                           tosh	equ	0xFFE
 29091                           tosl	equ	0xFFD
 29092                           pclath	equ	0xFFA
 29093                           tblptru	equ	0xFF8
 29094                           tblptrh	equ	0xFF7
 29095                           tblptrl	equ	0xFF6
 29096                           tablat	equ	0xFF5
 29097                           prodh	equ	0xFF4
 29098                           prodl	equ	0xFF3
 29099                           intcon	equ	0xFF2
 29100                           indf0	equ	0xFEF
 29101                           postinc0	equ	0xFEE
 29102                           fsr0h	equ	0xFEA
 29103                           fsr0l	equ	0xFE9
 29104                           wreg	equ	0xFE8
 29105                           indf1	equ	0xFE7
 29106                           postdec1	equ	0xFE5
 29107                           fsr1h	equ	0xFE2
 29108                           fsr1l	equ	0xFE1
 29109                           indf2	equ	0xFDF
 29110                           postinc2	equ	0xFDE
 29111                           postdec2	equ	0xFDD
 29112                           plusw2	equ	0xFDB
 29113                           fsr2h	equ	0xFDA
 29114                           fsr2l	equ	0xFD9
 29115                           status	equ	0xFD8
 29116                           
 29117 ;; *************** function _Port_GetPin *****************
 29118 ;; Defined at:
 29119 ;;		line 271 in file "Library/Port.c"
 29120 ;; Parameters:    Size  Location     Type
 29121 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 29122 ;;		 -> PortB(10), PortE(10), PortC(10), 
 29123 ;;  pPin            1    2[BANK0 ] enum E6750
 29124 ;; Auto vars:     Size  Location     Type
 29125 ;;  Output          1    5[BANK0 ] unsigned char 
 29126 ;; Return value:  Size  Location     Type
 29127 ;;                  1    wreg      unsigned char 
 29128 ;; Registers used:
 29129 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29130 ;; Tracked objects:
 29131 ;;		On entry : 0/0
 29132 ;;		On exit  : 0/0
 29133 ;;		Unchanged: 0/0
 29134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29135 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29138 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29139 ;;Total ram usage:        6 bytes
 29140 ;; Hardware stack levels used:    1
 29141 ;; Hardware stack levels required when called:    7
 29142 ;; This function calls:
 29143 ;;		Nothing
 29144 ;; This function is called by:
 29145 ;;		_Port_TogglePin
 29146 ;;		_HMI_LeftSwitch
 29147 ;;		_HMI_RightSwitch
 29148 ;;		_HMI_UpSwitch
 29149 ;;		_HMI_DownSwitch
 29150 ;;		_MXK_TestButton
 29151 ;; This function uses a non-reentrant model
 29152 ;;
 29153                           
 29154                           	psect	text155
 29155  015DF8                     __ptext155:
 29156                           	opt stack 0
 29157  015DF8                     _Port_GetPin:
 29158                           	opt stack 18
 29159                           
 29160                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 29161                           
 29162                           ; BSR set to: 0
 29163                           ;incstack = 0
 29164  015DF8  0100               	movlb	0	; () banked
 29165  015DFA  EE20 F006          	lfsr	2,6
 29166  015DFE  51BA               	movf	Port_GetPin@pInput& (0+255),w,b
 29167  015E00  26D9               	addwf	fsr2l,f,c
 29168  015E02  51BB               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 29169  015E04  22DA               	addwfc	fsr2h,f,c
 29170  015E06  CFDE F0BD          	movff	postinc2,??_Port_GetPin
 29171  015E0A  CFDD F0BE          	movff	postdec2,??_Port_GetPin+1
 29172  015E0E  C0BD  FFD9         	movff	??_Port_GetPin,fsr2l
 29173  015E12  C0BE  FFDA         	movff	??_Port_GetPin+1,fsr2h
 29174  015E16  50DF               	movf	indf2,w,c
 29175  015E18  0100               	movlb	0	; () banked
 29176  015E1A  6FBF               	movwf	Port_GetPin@Output& (0+255),b
 29177                           
 29178                           ; BSR set to: 0
 29179                           ;Port.c: 274: Output >>= (UINT8)pPin;
 29180  015E1C  0100               	movlb	0	; () banked
 29181  015E1E  29BC               	incf	Port_GetPin@pPin& (0+255),w,b
 29182  015E20  0100               	movlb	0	; () banked
 29183  015E22  6FBD               	movwf	??_Port_GetPin& (0+255),b
 29184  015E24  D003               	goto	u8850
 29185  015E26                     u8855:
 29186  015E26  0100               	movlb	0	; () banked
 29187  015E28  90D8               	bcf	status,0,c
 29188  015E2A  33BF               	rrcf	Port_GetPin@Output& (0+255),f,b
 29189  015E2C                     u8850:
 29190  015E2C  0100               	movlb	0	; () banked
 29191  015E2E  2FBD               	decfsz	??_Port_GetPin& (0+255),f,b
 29192  015E30  D7FA               	goto	u8855
 29193                           
 29194                           ;Port.c: 275: Output &= 1;
 29195  015E32  0E01               	movlw	1
 29196  015E34  0100               	movlb	0	; () banked
 29197  015E36  17BF               	andwf	Port_GetPin@Output& (0+255),f,b
 29198                           
 29199                           ; BSR set to: 0
 29200                           ;Port.c: 276: return Output;
 29201  015E38  0100               	movlb	0	; () banked
 29202  015E3A  51BF               	movf	Port_GetPin@Output& (0+255),w,b
 29203  015E3C  0012               	return	
 29204  015E3E                     __end_of_Port_GetPin:
 29205                           	opt stack 0
 29206                           tosu	equ	0xFFF
 29207                           tosh	equ	0xFFE
 29208                           tosl	equ	0xFFD
 29209                           pclath	equ	0xFFA
 29210                           tblptru	equ	0xFF8
 29211                           tblptrh	equ	0xFF7
 29212                           tblptrl	equ	0xFF6
 29213                           tablat	equ	0xFF5
 29214                           prodh	equ	0xFF4
 29215                           prodl	equ	0xFF3
 29216                           intcon	equ	0xFF2
 29217                           indf0	equ	0xFEF
 29218                           postinc0	equ	0xFEE
 29219                           fsr0h	equ	0xFEA
 29220                           fsr0l	equ	0xFE9
 29221                           wreg	equ	0xFE8
 29222                           indf1	equ	0xFE7
 29223                           postdec1	equ	0xFE5
 29224                           fsr1h	equ	0xFE2
 29225                           fsr1l	equ	0xFE1
 29226                           indf2	equ	0xFDF
 29227                           postinc2	equ	0xFDE
 29228                           postdec2	equ	0xFDD
 29229                           plusw2	equ	0xFDB
 29230                           fsr2h	equ	0xFDA
 29231                           fsr2l	equ	0xFD9
 29232                           status	equ	0xFD8
 29233                           
 29234 ;; *************** function _HMI_SetBar *****************
 29235 ;; Defined at:
 29236 ;;		line 205 in file "HMI.c"
 29237 ;; Parameters:    Size  Location     Type
 29238 ;;  pValue          1    wreg     unsigned char 
 29239 ;; Auto vars:     Size  Location     Type
 29240 ;;  pValue          1    0[BANK0 ] unsigned char 
 29241 ;; Return value:  Size  Location     Type
 29242 ;;                  1    wreg      void 
 29243 ;; Registers used:
 29244 ;;		wreg
 29245 ;; Tracked objects:
 29246 ;;		On entry : 0/0
 29247 ;;		On exit  : 0/0
 29248 ;;		Unchanged: 0/0
 29249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29253 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29254 ;;Total ram usage:        1 bytes
 29255 ;; Hardware stack levels used:    1
 29256 ;; Hardware stack levels required when called:    7
 29257 ;; This function calls:
 29258 ;;		Nothing
 29259 ;; This function is called by:
 29260 ;;		_Event_DIPSwitch
 29261 ;;		_Event_HMI_DIPSwitch
 29262 ;;		_Event_HMI_LeftButton
 29263 ;;		_Event_HMI_RightButton
 29264 ;; This function uses a non-reentrant model
 29265 ;;
 29266                           
 29267                           	psect	text156
 29268  0166FC                     __ptext156:
 29269                           	opt stack 0
 29270  0166FC                     _HMI_SetBar:
 29271                           	opt stack 18
 29272                           
 29273                           ; BSR set to: 0
 29274                           ;incstack = 0
 29275                           ;HMI_SetBar@pValue stored from wreg
 29276  0166FC  0100               	movlb	0	; () banked
 29277  0166FE  6FBA               	movwf	HMI_SetBar@pValue& (0+255),b
 29278                           
 29279                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 29280  016700  C0BA  F345         	movff	HMI_SetBar@pValue,_HMIBoard+7
 29281  016704  0012               	return		;funcret
 29282  016706                     __end_of_HMI_SetBar:
 29283                           	opt stack 0
 29284                           tosu	equ	0xFFF
 29285                           tosh	equ	0xFFE
 29286                           tosl	equ	0xFFD
 29287                           pclath	equ	0xFFA
 29288                           tblptru	equ	0xFF8
 29289                           tblptrh	equ	0xFF7
 29290                           tblptrl	equ	0xFF6
 29291                           tablat	equ	0xFF5
 29292                           prodh	equ	0xFF4
 29293                           prodl	equ	0xFF3
 29294                           intcon	equ	0xFF2
 29295                           indf0	equ	0xFEF
 29296                           postinc0	equ	0xFEE
 29297                           fsr0h	equ	0xFEA
 29298                           fsr0l	equ	0xFE9
 29299                           wreg	equ	0xFE8
 29300                           indf1	equ	0xFE7
 29301                           postdec1	equ	0xFE5
 29302                           fsr1h	equ	0xFE2
 29303                           fsr1l	equ	0xFE1
 29304                           indf2	equ	0xFDF
 29305                           postinc2	equ	0xFDE
 29306                           postdec2	equ	0xFDD
 29307                           plusw2	equ	0xFDB
 29308                           fsr2h	equ	0xFDA
 29309                           fsr2l	equ	0xFD9
 29310                           status	equ	0xFD8
 29311                           
 29312 ;; *************** function _HMI_GetBar *****************
 29313 ;; Defined at:
 29314 ;;		line 209 in file "HMI.c"
 29315 ;; Parameters:    Size  Location     Type
 29316 ;;		None
 29317 ;; Auto vars:     Size  Location     Type
 29318 ;;		None
 29319 ;; Return value:  Size  Location     Type
 29320 ;;                  1    wreg      unsigned char 
 29321 ;; Registers used:
 29322 ;;		wreg, status,2
 29323 ;; Tracked objects:
 29324 ;;		On entry : 0/0
 29325 ;;		On exit  : 0/0
 29326 ;;		Unchanged: 0/0
 29327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29332 ;;Total ram usage:        0 bytes
 29333 ;; Hardware stack levels used:    1
 29334 ;; Hardware stack levels required when called:    7
 29335 ;; This function calls:
 29336 ;;		Nothing
 29337 ;; This function is called by:
 29338 ;;		_Event_DIPSwitch
 29339 ;;		_Event_HMI_DIPSwitch
 29340 ;; This function uses a non-reentrant model
 29341 ;;
 29342                           
 29343                           	psect	text157
 29344  016738                     __ptext157:
 29345                           	opt stack 0
 29346  016738                     _HMI_GetBar:
 29347                           	opt stack 18
 29348                           
 29349                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 29350                           
 29351                           ;incstack = 0
 29352  016738  0103               	movlb	3	; () banked
 29353  01673A  5145               	movf	(_HMIBoard+7)& (0+255),w,b
 29354  01673C  0012               	return	
 29355  01673E                     __end_of_HMI_GetBar:
 29356                           	opt stack 0
 29357                           tosu	equ	0xFFF
 29358                           tosh	equ	0xFFE
 29359                           tosl	equ	0xFFD
 29360                           pclath	equ	0xFFA
 29361                           tblptru	equ	0xFF8
 29362                           tblptrh	equ	0xFF7
 29363                           tblptrl	equ	0xFF6
 29364                           tablat	equ	0xFF5
 29365                           prodh	equ	0xFF4
 29366                           prodl	equ	0xFF3
 29367                           intcon	equ	0xFF2
 29368                           indf0	equ	0xFEF
 29369                           postinc0	equ	0xFEE
 29370                           fsr0h	equ	0xFEA
 29371                           fsr0l	equ	0xFE9
 29372                           wreg	equ	0xFE8
 29373                           indf1	equ	0xFE7
 29374                           postdec1	equ	0xFE5
 29375                           fsr1h	equ	0xFE2
 29376                           fsr1l	equ	0xFE1
 29377                           indf2	equ	0xFDF
 29378                           postinc2	equ	0xFDE
 29379                           postdec2	equ	0xFDD
 29380                           plusw2	equ	0xFDB
 29381                           fsr2h	equ	0xFDA
 29382                           fsr2l	equ	0xFD9
 29383                           status	equ	0xFD8
 29384                           
 29385 ;; *************** function _ISR_Function *****************
 29386 ;; Defined at:
 29387 ;;		line 38 in file "Library/ISR.c"
 29388 ;; Parameters:    Size  Location     Type
 29389 ;;		None
 29390 ;; Auto vars:     Size  Location     Type
 29391 ;;		None
 29392 ;; Return value:  Size  Location     Type
 29393 ;;                  1    wreg      void 
 29394 ;; Registers used:
 29395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29396 ;; Tracked objects:
 29397 ;;		On entry : 0/0
 29398 ;;		On exit  : 0/0
 29399 ;;		Unchanged: 0/0
 29400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29403 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29404 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29405 ;;Total ram usage:       18 bytes
 29406 ;; Hardware stack levels used:    1
 29407 ;; Hardware stack levels required when called:    6
 29408 ;; This function calls:
 29409 ;;		_Timer0_ISR
 29410 ;; This function is called by:
 29411 ;;		Interrupt level 2
 29412 ;; This function uses a non-reentrant model
 29413 ;;
 29414                           
 29415                           	psect	intcode
 29416  001408                     __pintcode:
 29417                           	opt stack 0
 29418  001408                     _ISR_Function:
 29419                           	opt stack 13
 29420                           
 29421                           ; BSR set to: 3
 29422                           ;incstack = 0
 29423  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29424  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29425  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29426  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29427  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29428  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29429  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29430  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29431  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29432  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29433  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29434  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29435  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29436  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29437  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29438  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29439  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29440  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29441  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29442                           
 29443                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29444  001452  92F2               	bcf	intcon,1,c	;volatile
 29445                           
 29446                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29447  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29448  001456  AAF2               	btfss	intcon,5,c	;volatile
 29449  001458  D002               	goto	i2l1590
 29450                           
 29451                           ;ISR.c: 68: Timer0_ISR();
 29452  00145A  EC3E  F0B1         	call	_Timer0_ISR	;wreg free
 29453  00145E                     i2l1590:
 29454  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29455  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29456  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29457  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29458  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29459  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29460  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29461  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29462  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29463  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29464  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29465  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29466  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29467  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29468  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29469  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29470  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29471  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29472  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29473  0014A8  0011               	retfie		f
 29474  0014AA                     __end_of_ISR_Function:
 29475                           	opt stack 0
 29476                           tosu	equ	0xFFF
 29477                           tosh	equ	0xFFE
 29478                           tosl	equ	0xFFD
 29479                           pclatu	equ	0xFFB
 29480                           pclath	equ	0xFFA
 29481                           tblptru	equ	0xFF8
 29482                           tblptrh	equ	0xFF7
 29483                           tblptrl	equ	0xFF6
 29484                           tablat	equ	0xFF5
 29485                           prodh	equ	0xFF4
 29486                           prodl	equ	0xFF3
 29487                           intcon	equ	0xFF2
 29488                           indf0	equ	0xFEF
 29489                           postinc0	equ	0xFEE
 29490                           fsr0h	equ	0xFEA
 29491                           fsr0l	equ	0xFE9
 29492                           wreg	equ	0xFE8
 29493                           indf1	equ	0xFE7
 29494                           postdec1	equ	0xFE5
 29495                           fsr1h	equ	0xFE2
 29496                           fsr1l	equ	0xFE1
 29497                           indf2	equ	0xFDF
 29498                           postinc2	equ	0xFDE
 29499                           postdec2	equ	0xFDD
 29500                           plusw2	equ	0xFDB
 29501                           fsr2h	equ	0xFDA
 29502                           fsr2l	equ	0xFD9
 29503                           status	equ	0xFD8
 29504                           
 29505 ;; *************** function _Timer0_ISR *****************
 29506 ;; Defined at:
 29507 ;;		line 94 in file "Library/Timer0.c"
 29508 ;; Parameters:    Size  Location     Type
 29509 ;;		None
 29510 ;; Auto vars:     Size  Location     Type
 29511 ;;		None
 29512 ;; Return value:  Size  Location     Type
 29513 ;;                  1    wreg      void 
 29514 ;; Registers used:
 29515 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29516 ;; Tracked objects:
 29517 ;;		On entry : 0/0
 29518 ;;		On exit  : 0/0
 29519 ;;		Unchanged: 0/0
 29520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29525 ;;Total ram usage:        0 bytes
 29526 ;; Hardware stack levels used:    1
 29527 ;; Hardware stack levels required when called:    5
 29528 ;; This function calls:
 29529 ;;		Absolute function
 29530 ;;		i2_Motor_Step
 29531 ;;		i2_Timer0_Stop
 29532 ;; This function is called by:
 29533 ;;		_ISR_Function
 29534 ;; This function uses a non-reentrant model
 29535 ;;
 29536                           
 29537                           	psect	text159
 29538  01627C                     __ptext159:
 29539                           	opt stack 0
 29540  01627C                     _Timer0_ISR:
 29541                           	opt stack 13
 29542                           
 29543                           ;Timer0.c: 96: Timer0_Stop();
 29544                           
 29545                           ;incstack = 0
 29546  01627C  EC9F  F0B3         	call	i2_Timer0_Stop	;wreg free
 29547                           
 29548                           ;Timer0.c: 99: if (gISR != 0)
 29549  016280  0100               	movlb	0	; () banked
 29550  016282  5160               	movf	_gISR& (0+255),w,b
 29551  016284  0100               	movlb	0	; () banked
 29552  016286  1161               	iorwf	(_gISR+1)& (0+255),w,b
 29553  016288  0100               	movlb	0	; () banked
 29554  01628A  1162               	iorwf	(_gISR+2)& (0+255),w,b
 29555  01628C  B4D8               	btfsc	status,2,c
 29556  01628E  0012               	return	
 29557                           
 29558                           ; BSR set to: 0
 29559                           ;Timer0.c: 100: gISR();
 29560  016290  D801               	call	i2u1388_48
 29561  016292  0012               	return	
 29562  016294                     i2u1388_48:
 29563  016294  0005               	push	
 29564  016296  6EFA               	movwf	pclath,c
 29565  016298  0100               	movlb	0	; () banked
 29566  01629A  5160               	movf	_gISR& (0+255),w,b
 29567  01629C  6EFD               	movwf	tosl,c
 29568  01629E  5161               	movf	(_gISR+1)& (0+255),w,b
 29569  0162A0  6EFE               	movwf	tosh,c
 29570  0162A2  5162               	movf	(_gISR+2)& (0+255),w,b
 29571  0162A4  6EFF               	movwf	tosu,c
 29572  0162A6  50FA               	movf	pclath,w,c
 29573  0162A8  0012               	return		;indir
 29574  0162AA                     __end_of_Timer0_ISR:
 29575                           	opt stack 0
 29576                           tosu	equ	0xFFF
 29577                           tosh	equ	0xFFE
 29578                           tosl	equ	0xFFD
 29579                           pclatu	equ	0xFFB
 29580                           pclath	equ	0xFFA
 29581                           tblptru	equ	0xFF8
 29582                           tblptrh	equ	0xFF7
 29583                           tblptrl	equ	0xFF6
 29584                           tablat	equ	0xFF5
 29585                           prodh	equ	0xFF4
 29586                           prodl	equ	0xFF3
 29587                           intcon	equ	0xFF2
 29588                           indf0	equ	0xFEF
 29589                           postinc0	equ	0xFEE
 29590                           fsr0h	equ	0xFEA
 29591                           fsr0l	equ	0xFE9
 29592                           wreg	equ	0xFE8
 29593                           indf1	equ	0xFE7
 29594                           postdec1	equ	0xFE5
 29595                           fsr1h	equ	0xFE2
 29596                           fsr1l	equ	0xFE1
 29597                           indf2	equ	0xFDF
 29598                           postinc2	equ	0xFDE
 29599                           postdec2	equ	0xFDD
 29600                           plusw2	equ	0xFDB
 29601                           fsr2h	equ	0xFDA
 29602                           fsr2l	equ	0xFD9
 29603                           status	equ	0xFD8
 29604                           
 29605 ;; *************** function i2_Motor_Step *****************
 29606 ;; Defined at:
 29607 ;;		line 75 in file "Library/Motor.c"
 29608 ;; Parameters:    Size  Location     Type
 29609 ;;		None
 29610 ;; Auto vars:     Size  Location     Type
 29611 ;;		None
 29612 ;; Return value:  Size  Location     Type
 29613 ;;                  1    wreg      void 
 29614 ;; Registers used:
 29615 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29616 ;; Tracked objects:
 29617 ;;		On entry : 0/0
 29618 ;;		On exit  : 0/0
 29619 ;;		Unchanged: 0/0
 29620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29623 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29625 ;;Total ram usage:        2 bytes
 29626 ;; Hardware stack levels used:    1
 29627 ;; Hardware stack levels required when called:    4
 29628 ;; This function calls:
 29629 ;;		i2_MXK_Queue
 29630 ;;		i2_MXK_Release
 29631 ;;		i2_MXK_SwitchTo
 29632 ;;		i2_Port_SetPin
 29633 ;;		i2_Timer0_Restart
 29634 ;;		i2_Timer0_Stop
 29635 ;; This function is called by:
 29636 ;; This function uses a non-reentrant model
 29637 ;;
 29638                           
 29639                           	psect	text160
 29640  0137B0                     __ptext160:
 29641                           	opt stack 0
 29642  0137B0                     i2_Motor_Step:
 29643                           	opt stack 13
 29644                           
 29645                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29646                           
 29647                           ;incstack = 0
 29648  0137B0  0100               	movlb	0	; () banked
 29649  0137B2  EE20 F004          	lfsr	2,4
 29650  0137B6  517F               	movf	_lMotor& (0+255),w,b
 29651  0137B8  26D9               	addwf	fsr2l,f,c
 29652  0137BA  5180               	movf	(_lMotor+1)& (0+255),w,b
 29653  0137BC  22DA               	addwfc	fsr2h,f,c
 29654  0137BE  50DF               	movf	indf2,w,c
 29655  0137C0  EC91  F0B0         	call	i2_MXK_SwitchTo
 29656  0137C4  0900               	iorlw	0
 29657  0137C6  B4D8               	btfsc	status,2,c
 29658  0137C8  D06A               	goto	i2l1627
 29659                           
 29660                           ;Motor.c: 78: {
 29661                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29662  0137CA  C07F  FFD9         	movff	_lMotor,fsr2l
 29663  0137CE  C080  FFDA         	movff	_lMotor+1,fsr2h
 29664  0137D2  50DE               	movf	postinc2,w,c
 29665  0137D4  10DE               	iorwf	postinc2,w,c
 29666  0137D6  B4D8               	btfsc	status,2,c
 29667  0137D8  D05D               	goto	i2l1628
 29668                           
 29669                           ;Motor.c: 80: {
 29670                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29671  0137DA  C07F  FFD9         	movff	_lMotor,fsr2l
 29672  0137DE  C080  FFDA         	movff	_lMotor+1,fsr2h
 29673  0137E2  0E01               	movlw	1
 29674  0137E4  BEDB               	btfsc	plusw2,7,c
 29675  0137E6  D022               	goto	i2l1629
 29676  0137E8  0E01               	movlw	1
 29677  0137EA  50DB               	movf	plusw2,w,c
 29678  0137EC  E103               	bnz	i2u736_40
 29679  0137EE  04DE               	decf	postinc2,w,c
 29680  0137F0  A0D8               	btfss	status,0,c
 29681  0137F2  D01C               	goto	i2l1629
 29682  0137F4                     i2u736_40:
 29683                           
 29684                           ;Motor.c: 83: {
 29685                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29686  0137F4  C07F  FFD9         	movff	_lMotor,fsr2l
 29687  0137F8  C080  FFDA         	movff	_lMotor+1,fsr2h
 29688  0137FC  28DE               	incf	postinc2,w,c
 29689  0137FE  E104               	bnz	i2u737_40
 29690  013800  0E7F               	movlw	127
 29691  013802  18DE               	xorwf	postinc2,w,c
 29692  013804  B4D8               	btfsc	status,2,c
 29693  013806  D007               	goto	i2l1630
 29694  013808                     i2u737_40:
 29695                           
 29696                           ;Motor.c: 85: lMotor->mDelta --;
 29697  013808  C07F  FFD9         	movff	_lMotor,fsr2l
 29698  01380C  C080  FFDA         	movff	_lMotor+1,fsr2h
 29699  013810  06DE               	decf	postinc2,f,c
 29700  013812  0E00               	movlw	0
 29701  013814  5ADD               	subwfb	postdec2,f,c
 29702  013816                     i2l1630:
 29703                           
 29704                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29705  013816  0E91               	movlw	low _PortE
 29706  013818  6E10               	movwf	i2Port_SetPin@pInput,c
 29707  01381A  0E00               	movlw	high _PortE
 29708  01381C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29709  01381E  0E00               	movlw	0
 29710  013820  6E12               	movwf	i2Port_SetPin@pPin,c
 29711  013822  0E01               	movlw	1
 29712  013824  6E13               	movwf	i2Port_SetPin@pValue,c
 29713  013826  EC64  F0A3         	call	i2_Port_SetPin	;wreg free
 29714                           
 29715                           ;Motor.c: 88: }
 29716  01382A  D01B               	goto	i2l1631
 29717  01382C                     i2l1629:
 29718                           
 29719                           ;Motor.c: 89: else
 29720                           ;Motor.c: 90: {
 29721                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29722  01382C  C07F  FFD9         	movff	_lMotor,fsr2l
 29723  013830  C080  FFDA         	movff	_lMotor+1,fsr2h
 29724  013834  04DE               	decf	postinc2,w,c
 29725  013836  E104               	bnz	i2u738_40
 29726  013838  0E80               	movlw	128
 29727  01383A  18DE               	xorwf	postinc2,w,c
 29728  01383C  B4D8               	btfsc	status,2,c
 29729  01383E  D007               	goto	i2l1632
 29730  013840                     i2u738_40:
 29731                           
 29732                           ;Motor.c: 92: lMotor->mDelta ++;
 29733  013840  C07F  FFD9         	movff	_lMotor,fsr2l
 29734  013844  C080  FFDA         	movff	_lMotor+1,fsr2h
 29735  013848  2ADE               	incf	postinc2,f,c
 29736  01384A  0E00               	movlw	0
 29737  01384C  22DD               	addwfc	postdec2,f,c
 29738  01384E                     i2l1632:
 29739                           
 29740                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29741  01384E  0E91               	movlw	low _PortE
 29742  013850  6E10               	movwf	i2Port_SetPin@pInput,c
 29743  013852  0E00               	movlw	high _PortE
 29744  013854  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29745  013856  0E00               	movlw	0
 29746  013858  6E12               	movwf	i2Port_SetPin@pPin,c
 29747  01385A  0E00               	movlw	0
 29748  01385C  6E13               	movwf	i2Port_SetPin@pValue,c
 29749  01385E  EC64  F0A3         	call	i2_Port_SetPin	;wreg free
 29750  013862                     i2l1631:
 29751                           
 29752                           ;Motor.c: 95: }
 29753                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29754  013862  0E91               	movlw	low _PortE
 29755  013864  6E10               	movwf	i2Port_SetPin@pInput,c
 29756  013866  0E00               	movlw	high _PortE
 29757  013868  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29758  01386A  0E01               	movlw	1
 29759  01386C  6E12               	movwf	i2Port_SetPin@pPin,c
 29760  01386E  0E01               	movlw	1
 29761  013870  6E13               	movwf	i2Port_SetPin@pValue,c
 29762  013872  EC64  F0A3         	call	i2_Port_SetPin	;wreg free
 29763                           
 29764                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29765  013876  0E91               	movlw	low _PortE
 29766  013878  6E10               	movwf	i2Port_SetPin@pInput,c
 29767  01387A  0E00               	movlw	high _PortE
 29768  01387C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29769  01387E  0E01               	movlw	1
 29770  013880  6E12               	movwf	i2Port_SetPin@pPin,c
 29771  013882  0E00               	movlw	0
 29772  013884  6E13               	movwf	i2Port_SetPin@pValue,c
 29773  013886  EC64  F0A3         	call	i2_Port_SetPin	;wreg free
 29774                           
 29775                           ;Motor.c: 101: MXK_Release();
 29776  01388A  ECA2  F0B3         	call	i2_MXK_Release	;wreg free
 29777                           
 29778                           ;Motor.c: 102: Timer0_Restart();
 29779  01388E  EC6E  F0B3         	call	i2_Timer0_Restart	;wreg free
 29780                           
 29781                           ;Motor.c: 103: return;
 29782  013892  0012               	return	
 29783  013894                     i2l1628:
 29784                           
 29785                           ;Motor.c: 104: }
 29786                           ;Motor.c: 105: MXK_Release();
 29787  013894  ECA2  F0B3         	call	i2_MXK_Release	;wreg free
 29788                           
 29789                           ;Motor.c: 106: Timer0_Stop();
 29790  013898  EC9F  F0B3         	call	i2_Timer0_Stop	;wreg free
 29791                           
 29792                           ;Motor.c: 107: return;
 29793  01389C  0012               	return	
 29794  01389E                     i2l1627:
 29795                           
 29796                           ;Motor.c: 108: }
 29797                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29798  01389E  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29799  0138A2  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29800  0138A6  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29801  0138AA  EC55  F0B3         	call	i2_MXK_Queue	;wreg free
 29802  0138AE  0012               	return		;funcret
 29803  0138B0                     __end_ofi2_Motor_Step:
 29804                           	opt stack 0
 29805                           tosu	equ	0xFFF
 29806                           tosh	equ	0xFFE
 29807                           tosl	equ	0xFFD
 29808                           pclatu	equ	0xFFB
 29809                           pclath	equ	0xFFA
 29810                           tblptru	equ	0xFF8
 29811                           tblptrh	equ	0xFF7
 29812                           tblptrl	equ	0xFF6
 29813                           tablat	equ	0xFF5
 29814                           prodh	equ	0xFF4
 29815                           prodl	equ	0xFF3
 29816                           intcon	equ	0xFF2
 29817                           indf0	equ	0xFEF
 29818                           postinc0	equ	0xFEE
 29819                           fsr0h	equ	0xFEA
 29820                           fsr0l	equ	0xFE9
 29821                           wreg	equ	0xFE8
 29822                           indf1	equ	0xFE7
 29823                           postdec1	equ	0xFE5
 29824                           fsr1h	equ	0xFE2
 29825                           fsr1l	equ	0xFE1
 29826                           indf2	equ	0xFDF
 29827                           postinc2	equ	0xFDE
 29828                           postdec2	equ	0xFDD
 29829                           plusw2	equ	0xFDB
 29830                           fsr2h	equ	0xFDA
 29831                           fsr2l	equ	0xFD9
 29832                           status	equ	0xFD8
 29833                           
 29834 ;; *************** function i2_Timer0_Stop *****************
 29835 ;; Defined at:
 29836 ;;		line 89 in file "Library/Timer0.c"
 29837 ;; Parameters:    Size  Location     Type
 29838 ;;		None
 29839 ;; Auto vars:     Size  Location     Type
 29840 ;;		None
 29841 ;; Return value:  Size  Location     Type
 29842 ;;                  1    wreg      void 
 29843 ;; Registers used:
 29844 ;;		None
 29845 ;; Tracked objects:
 29846 ;;		On entry : 0/0
 29847 ;;		On exit  : 0/0
 29848 ;;		Unchanged: 0/0
 29849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29854 ;;Total ram usage:        0 bytes
 29855 ;; Hardware stack levels used:    1
 29856 ;; This function calls:
 29857 ;;		Nothing
 29858 ;; This function is called by:
 29859 ;;		_Timer0_ISR
 29860 ;;		i2_Motor_Step
 29861 ;; This function uses a non-reentrant model
 29862 ;;
 29863                           
 29864                           	psect	text161
 29865  01673E                     __ptext161:
 29866                           	opt stack 0
 29867  01673E                     i2_Timer0_Stop:
 29868                           	opt stack 17
 29869                           
 29870                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29871                           
 29872                           ;incstack = 0
 29873  01673E  9AF2               	bcf	intcon,5,c	;volatile
 29874                           
 29875                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29876  016740  94F2               	bcf	intcon,2,c	;volatile
 29877  016742  0012               	return		;funcret
 29878  016744                     __end_ofi2_Timer0_Stop:
 29879                           	opt stack 0
 29880                           tosu	equ	0xFFF
 29881                           tosh	equ	0xFFE
 29882                           tosl	equ	0xFFD
 29883                           pclatu	equ	0xFFB
 29884                           pclath	equ	0xFFA
 29885                           tblptru	equ	0xFF8
 29886                           tblptrh	equ	0xFF7
 29887                           tblptrl	equ	0xFF6
 29888                           tablat	equ	0xFF5
 29889                           prodh	equ	0xFF4
 29890                           prodl	equ	0xFF3
 29891                           intcon	equ	0xFF2
 29892                           indf0	equ	0xFEF
 29893                           postinc0	equ	0xFEE
 29894                           fsr0h	equ	0xFEA
 29895                           fsr0l	equ	0xFE9
 29896                           wreg	equ	0xFE8
 29897                           indf1	equ	0xFE7
 29898                           postdec1	equ	0xFE5
 29899                           fsr1h	equ	0xFE2
 29900                           fsr1l	equ	0xFE1
 29901                           indf2	equ	0xFDF
 29902                           postinc2	equ	0xFDE
 29903                           postdec2	equ	0xFDD
 29904                           plusw2	equ	0xFDB
 29905                           fsr2h	equ	0xFDA
 29906                           fsr2l	equ	0xFD9
 29907                           status	equ	0xFD8
 29908                           
 29909 ;; *************** function i2_Timer0_Restart *****************
 29910 ;; Defined at:
 29911 ;;		line 83 in file "Library/Timer0.c"
 29912 ;; Parameters:    Size  Location     Type
 29913 ;;		None
 29914 ;; Auto vars:     Size  Location     Type
 29915 ;;		None
 29916 ;; Return value:  Size  Location     Type
 29917 ;;                  1    wreg      void 
 29918 ;; Registers used:
 29919 ;;		None
 29920 ;; Tracked objects:
 29921 ;;		On entry : 0/0
 29922 ;;		On exit  : 0/0
 29923 ;;		Unchanged: 0/0
 29924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29929 ;;Total ram usage:        0 bytes
 29930 ;; Hardware stack levels used:    1
 29931 ;; This function calls:
 29932 ;;		Nothing
 29933 ;; This function is called by:
 29934 ;;		i2_Motor_Step
 29935 ;; This function uses a non-reentrant model
 29936 ;;
 29937                           
 29938                           	psect	text162
 29939  0166DC                     __ptext162:
 29940                           	opt stack 0
 29941  0166DC                     i2_Timer0_Restart:
 29942                           	opt stack 16
 29943                           
 29944                           ;Timer0.c: 85: TMR0 = COUNTER;
 29945                           
 29946                           ;incstack = 0
 29947  0166DC  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29948  0166E0  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29949                           
 29950                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29951  0166E4  8AF2               	bsf	intcon,5,c	;volatile
 29952  0166E6  0012               	return		;funcret
 29953  0166E8                     __end_ofi2_Timer0_Restart:
 29954                           	opt stack 0
 29955                           tosu	equ	0xFFF
 29956                           tosh	equ	0xFFE
 29957                           tosl	equ	0xFFD
 29958                           pclatu	equ	0xFFB
 29959                           pclath	equ	0xFFA
 29960                           tblptru	equ	0xFF8
 29961                           tblptrh	equ	0xFF7
 29962                           tblptrl	equ	0xFF6
 29963                           tablat	equ	0xFF5
 29964                           prodh	equ	0xFF4
 29965                           prodl	equ	0xFF3
 29966                           intcon	equ	0xFF2
 29967                           indf0	equ	0xFEF
 29968                           postinc0	equ	0xFEE
 29969                           fsr0h	equ	0xFEA
 29970                           fsr0l	equ	0xFE9
 29971                           wreg	equ	0xFE8
 29972                           indf1	equ	0xFE7
 29973                           postdec1	equ	0xFE5
 29974                           fsr1h	equ	0xFE2
 29975                           fsr1l	equ	0xFE1
 29976                           indf2	equ	0xFDF
 29977                           postinc2	equ	0xFDE
 29978                           postdec2	equ	0xFDD
 29979                           plusw2	equ	0xFDB
 29980                           fsr2h	equ	0xFDA
 29981                           fsr2l	equ	0xFD9
 29982                           status	equ	0xFD8
 29983                           
 29984 ;; *************** function i2_Port_SetPin *****************
 29985 ;; Defined at:
 29986 ;;		line 247 in file "Library/Port.c"
 29987 ;; Parameters:    Size  Location     Type
 29988 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29989 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29990 ;;  pPin            1   17[COMRAM] enum E6750
 29991 ;;  pValue          1   18[COMRAM] unsigned char 
 29992 ;; Auto vars:     Size  Location     Type
 29993 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29994 ;; Return value:  Size  Location     Type
 29995 ;;                  1    wreg      void 
 29996 ;; Registers used:
 29997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29998 ;; Tracked objects:
 29999 ;;		On entry : 0/0
 30000 ;;		On exit  : 0/0
 30001 ;;		Unchanged: 0/0
 30002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30003 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30006 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30007 ;;Total ram usage:        5 bytes
 30008 ;; Hardware stack levels used:    1
 30009 ;; Hardware stack levels required when called:    3
 30010 ;; This function calls:
 30011 ;;		i2_Byte_SetBit
 30012 ;;		i2_Word_GetPair
 30013 ;; This function is called by:
 30014 ;;		i2_Motor_Step
 30015 ;; This function uses a non-reentrant model
 30016 ;;
 30017                           
 30018                           	psect	text163
 30019  0146C8                     __ptext163:
 30020                           	opt stack 0
 30021  0146C8                     i2_Port_SetPin:
 30022                           	opt stack 13
 30023                           
 30024                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 30025                           
 30026                           ;incstack = 0
 30027  0146C8  0E08               	movlw	8
 30028  0146CA  2410               	addwf	i2Port_SetPin@pInput,w,c
 30029  0146CC  6E0D               	movwf	i2Word_GetPair@pInput,c
 30030  0146CE  0E00               	movlw	0
 30031  0146D0  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 30032  0146D2  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 30033  0146D4  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 30034  0146D8  EC0F  F0B1         	call	i2_Word_GetPair	;wreg free
 30035  0146DC  6E14               	movwf	i2Port_SetPin@Type,c
 30036                           
 30037                           ;Port.c: 250: switch (Type)
 30038  0146DE  D03B               	goto	i2l427
 30039  0146E0                     
 30040                           ;Port.c: 256: pValue &= 1;
 30041  0146E0  0E01               	movlw	1
 30042  0146E2  1613               	andwf	i2Port_SetPin@pValue,f,c
 30043                           
 30044                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30045  0146E4  EE20 F002          	lfsr	2,2
 30046  0146E8  5010               	movf	i2Port_SetPin@pInput,w,c
 30047  0146EA  26D9               	addwf	fsr2l,f,c
 30048  0146EC  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30049  0146EE  22DA               	addwfc	fsr2h,f,c
 30050  0146F0  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30051  0146F4  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30052  0146F8  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30053  0146FC  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30054  014700  ECDA  F0AD         	call	i2_Byte_SetBit	;wreg free
 30055                           
 30056                           ;Port.c: 258: break;
 30057  014704  0012               	return	
 30058  014706                     
 30059                           ;Port.c: 261: pValue &= 1;
 30060  014706  0E01               	movlw	1
 30061  014708  1613               	andwf	i2Port_SetPin@pValue,f,c
 30062                           
 30063                           ;Port.c: 262: pValue ^= 1;
 30064  01470A  0E01               	movlw	1
 30065  01470C  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 30066                           
 30067                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30068  01470E  EE20 F002          	lfsr	2,2
 30069  014712  5010               	movf	i2Port_SetPin@pInput,w,c
 30070  014714  26D9               	addwf	fsr2l,f,c
 30071  014716  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30072  014718  22DA               	addwfc	fsr2h,f,c
 30073  01471A  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30074  01471E  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30075  014722  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30076  014726  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30077  01472A  ECDA  F0AD         	call	i2_Byte_SetBit	;wreg free
 30078                           
 30079                           ;Port.c: 264: break;
 30080  01472E  0012               	return	
 30081  014730                     
 30082                           ;Port.c: 266: pValue &= 1;
 30083  014730  0E01               	movlw	1
 30084  014732  1613               	andwf	i2Port_SetPin@pValue,f,c
 30085                           
 30086                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 30087  014734  EE20 F004          	lfsr	2,4
 30088  014738  5010               	movf	i2Port_SetPin@pInput,w,c
 30089  01473A  26D9               	addwf	fsr2l,f,c
 30090  01473C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30091  01473E  22DA               	addwfc	fsr2h,f,c
 30092  014740  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30093  014744  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30094  014748  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30095  01474C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30096  014750  ECDA  F0AD         	call	i2_Byte_SetBit	;wreg free
 30097                           
 30098                           ;Port.c: 269: }
 30099                           
 30100                           ;Port.c: 268: break;
 30101  014754  0012               	return	
 30102  014756                     i2l427:
 30103  014756  5014               	movf	i2Port_SetPin@Type,w,c
 30104                           
 30105                           ; Switch size 1, requested type "space"
 30106                           ; Number of cases is 4, Range of values is 0 to 3
 30107                           ; switch strategies available:
 30108                           ; Name         Instructions Cycles
 30109                           ; simple_byte           13     7 (average)
 30110                           ;	Chosen strategy is simple_byte
 30111  014758  0A00               	xorlw	0	; case 0
 30112  01475A  B4D8               	btfsc	status,2,c
 30113  01475C  0012               	return	
 30114  01475E  0A01               	xorlw	1	; case 1
 30115  014760  B4D8               	btfsc	status,2,c
 30116  014762  D7BE               	goto	i2l430
 30117  014764  0A03               	xorlw	3	; case 2
 30118  014766  B4D8               	btfsc	status,2,c
 30119  014768  D7CE               	goto	i2l432
 30120  01476A  0A01               	xorlw	1	; case 3
 30121  01476C  A4D8               	btfss	status,2,c
 30122  01476E  0012               	return	
 30123  014770  D7DF               	goto	i2l433
 30124  014772                     __end_ofi2_Port_SetPin:
 30125                           	opt stack 0
 30126                           tosu	equ	0xFFF
 30127                           tosh	equ	0xFFE
 30128                           tosl	equ	0xFFD
 30129                           pclatu	equ	0xFFB
 30130                           pclath	equ	0xFFA
 30131                           tblptru	equ	0xFF8
 30132                           tblptrh	equ	0xFF7
 30133                           tblptrl	equ	0xFF6
 30134                           tablat	equ	0xFF5
 30135                           prodh	equ	0xFF4
 30136                           prodl	equ	0xFF3
 30137                           intcon	equ	0xFF2
 30138                           indf0	equ	0xFEF
 30139                           postinc0	equ	0xFEE
 30140                           fsr0h	equ	0xFEA
 30141                           fsr0l	equ	0xFE9
 30142                           wreg	equ	0xFE8
 30143                           indf1	equ	0xFE7
 30144                           postdec1	equ	0xFE5
 30145                           fsr1h	equ	0xFE2
 30146                           fsr1l	equ	0xFE1
 30147                           indf2	equ	0xFDF
 30148                           postinc2	equ	0xFDE
 30149                           postdec2	equ	0xFDD
 30150                           plusw2	equ	0xFDB
 30151                           fsr2h	equ	0xFDA
 30152                           fsr2l	equ	0xFD9
 30153                           status	equ	0xFD8
 30154                           
 30155 ;; *************** function i2_Word_GetPair *****************
 30156 ;; Defined at:
 30157 ;;		line 156 in file "Library/Types.c"
 30158 ;; Parameters:    Size  Location     Type
 30159 ;;  pInput          2   12[COMRAM] PTR struct Word
 30160 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 30161 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 30162 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 30163 ;;		 -> PortC(10), PortF(10), NULL(0), 
 30164 ;;  pPair           1   14[COMRAM] unsigned char 
 30165 ;; Auto vars:     Size  Location     Type
 30166 ;;		None
 30167 ;; Return value:  Size  Location     Type
 30168 ;;                  1    wreg      unsigned char 
 30169 ;; Registers used:
 30170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30171 ;; Tracked objects:
 30172 ;;		On entry : 0/0
 30173 ;;		On exit  : 0/0
 30174 ;;		Unchanged: 0/0
 30175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30176 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30179 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30180 ;;Total ram usage:        3 bytes
 30181 ;; Hardware stack levels used:    1
 30182 ;; Hardware stack levels required when called:    2
 30183 ;; This function calls:
 30184 ;;		i2_Byte_GetPair
 30185 ;; This function is called by:
 30186 ;;		i2_Port_SetPin
 30187 ;; This function uses a non-reentrant model
 30188 ;;
 30189                           
 30190                           	psect	text164
 30191  01621E                     __ptext164:
 30192                           	opt stack 0
 30193  01621E                     i2_Word_GetPair:
 30194                           	opt stack 13
 30195                           
 30196                           ;Types.c: 158: if (pPair >= 4)
 30197                           
 30198                           ;incstack = 0
 30199  01621E  0E03               	movlw	3
 30200  016220  640F               	cpfsgt	i2Word_GetPair@pPair,c
 30201  016222  D00C               	goto	i2l781
 30202                           
 30203                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 30204  016224  0E01               	movlw	1
 30205  016226  240D               	addwf	i2Word_GetPair@pInput,w,c
 30206  016228  6E0A               	movwf	i2Byte_GetPair@pInput,c
 30207  01622A  0E00               	movlw	0
 30208  01622C  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 30209  01622E  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 30210  016230  500F               	movf	i2Word_GetPair@pPair,w,c
 30211  016232  0FFC               	addlw	252
 30212  016234  6E0C               	movwf	i2Byte_GetPair@pPair,c
 30213  016236  EC8B  F0B2         	call	i2_Byte_GetPair	;wreg free
 30214  01623A  0012               	return	
 30215  01623C                     i2l781:
 30216                           
 30217                           ;Types.c: 160: else
 30218                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 30219  01623C  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 30220  016240  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 30221  016244  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 30222  016248  EC8B  F0B2         	call	i2_Byte_GetPair	;wreg free
 30223  01624C  0012               	return	
 30224  01624E                     __end_ofi2_Word_GetPair:
 30225                           	opt stack 0
 30226                           tosu	equ	0xFFF
 30227                           tosh	equ	0xFFE
 30228                           tosl	equ	0xFFD
 30229                           pclatu	equ	0xFFB
 30230                           pclath	equ	0xFFA
 30231                           tblptru	equ	0xFF8
 30232                           tblptrh	equ	0xFF7
 30233                           tblptrl	equ	0xFF6
 30234                           tablat	equ	0xFF5
 30235                           prodh	equ	0xFF4
 30236                           prodl	equ	0xFF3
 30237                           intcon	equ	0xFF2
 30238                           indf0	equ	0xFEF
 30239                           postinc0	equ	0xFEE
 30240                           fsr0h	equ	0xFEA
 30241                           fsr0l	equ	0xFE9
 30242                           wreg	equ	0xFE8
 30243                           indf1	equ	0xFE7
 30244                           postdec1	equ	0xFE5
 30245                           fsr1h	equ	0xFE2
 30246                           fsr1l	equ	0xFE1
 30247                           indf2	equ	0xFDF
 30248                           postinc2	equ	0xFDE
 30249                           postdec2	equ	0xFDD
 30250                           plusw2	equ	0xFDB
 30251                           fsr2h	equ	0xFDA
 30252                           fsr2l	equ	0xFD9
 30253                           status	equ	0xFD8
 30254                           
 30255 ;; *************** function i2_Byte_GetPair *****************
 30256 ;; Defined at:
 30257 ;;		line 87 in file "Library/Types.c"
 30258 ;; Parameters:    Size  Location     Type
 30259 ;;  pInput          2    9[COMRAM] PTR struct Byte
 30260 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30261 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30262 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30263 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30264 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30265 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30266 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30267 ;;		 -> NULL(0), 
 30268 ;;  pPair           1   11[COMRAM] unsigned char 
 30269 ;; Auto vars:     Size  Location     Type
 30270 ;;		None
 30271 ;; Return value:  Size  Location     Type
 30272 ;;                  1    wreg      unsigned char 
 30273 ;; Registers used:
 30274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30275 ;; Tracked objects:
 30276 ;;		On entry : 0/0
 30277 ;;		On exit  : 0/0
 30278 ;;		Unchanged: 0/0
 30279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30280 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30283 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30284 ;;Total ram usage:        3 bytes
 30285 ;; Hardware stack levels used:    1
 30286 ;; Hardware stack levels required when called:    1
 30287 ;; This function calls:
 30288 ;;		i2_Byte_GetZone
 30289 ;; This function is called by:
 30290 ;;		i2_Word_GetPair
 30291 ;; This function uses a non-reentrant model
 30292 ;;
 30293                           
 30294                           	psect	text165
 30295  016516                     __ptext165:
 30296                           	opt stack 0
 30297  016516                     i2_Byte_GetPair:
 30298                           	opt stack 13
 30299                           
 30300                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30301                           
 30302                           ;incstack = 0
 30303  016516  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30304  01651A  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30305  01651E  0E04               	movlw	4
 30306  016520  6E03               	movwf	i2Byte_GetZone@pMax,c
 30307  016522  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30308  016526  0E02               	movlw	2
 30309  016528  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30310  01652A  EC1C  F0A9         	call	i2_Byte_GetZone	;wreg free
 30311  01652E  0012               	return	
 30312  016530                     __end_ofi2_Byte_GetPair:
 30313                           	opt stack 0
 30314                           tosu	equ	0xFFF
 30315                           tosh	equ	0xFFE
 30316                           tosl	equ	0xFFD
 30317                           pclatu	equ	0xFFB
 30318                           pclath	equ	0xFFA
 30319                           tblptru	equ	0xFF8
 30320                           tblptrh	equ	0xFF7
 30321                           tblptrl	equ	0xFF6
 30322                           tablat	equ	0xFF5
 30323                           prodh	equ	0xFF4
 30324                           prodl	equ	0xFF3
 30325                           intcon	equ	0xFF2
 30326                           indf0	equ	0xFEF
 30327                           postinc0	equ	0xFEE
 30328                           fsr0h	equ	0xFEA
 30329                           fsr0l	equ	0xFE9
 30330                           wreg	equ	0xFE8
 30331                           indf1	equ	0xFE7
 30332                           postdec1	equ	0xFE5
 30333                           fsr1h	equ	0xFE2
 30334                           fsr1l	equ	0xFE1
 30335                           indf2	equ	0xFDF
 30336                           postinc2	equ	0xFDE
 30337                           postdec2	equ	0xFDD
 30338                           plusw2	equ	0xFDB
 30339                           fsr2h	equ	0xFDA
 30340                           fsr2l	equ	0xFD9
 30341                           status	equ	0xFD8
 30342                           
 30343 ;; *************** function i2_Byte_GetZone *****************
 30344 ;; Defined at:
 30345 ;;		line 64 in file "Library/Types.c"
 30346 ;; Parameters:    Size  Location     Type
 30347 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30348 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30349 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30350 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30351 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30352 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30353 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30354 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30355 ;;		 -> NULL(0), 
 30356 ;;  pMax            1    2[COMRAM] unsigned char 
 30357 ;;  pChunk          1    3[COMRAM] unsigned char 
 30358 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30359 ;; Auto vars:     Size  Location     Type
 30360 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30361 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30362 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30363 ;; Return value:  Size  Location     Type
 30364 ;;                  1    wreg      unsigned char 
 30365 ;; Registers used:
 30366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30367 ;; Tracked objects:
 30368 ;;		On entry : 0/0
 30369 ;;		On exit  : 0/0
 30370 ;;		Unchanged: 0/0
 30371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30372 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30373 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30375 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30376 ;;Total ram usage:        9 bytes
 30377 ;; Hardware stack levels used:    1
 30378 ;; This function calls:
 30379 ;;		Nothing
 30380 ;; This function is called by:
 30381 ;;		i2_Byte_GetPair
 30382 ;; This function uses a non-reentrant model
 30383 ;;
 30384                           
 30385                           	psect	text166
 30386  015238                     __ptext166:
 30387                           	opt stack 0
 30388  015238                     i2_Byte_GetZone:
 30389                           	opt stack 13
 30390                           
 30391                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30392                           
 30393                           ;incstack = 0
 30394  015238  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30395  01523C  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30396  015240  0E00               	movlw	low (__mediumconst shr (0+16))
 30397  015242  6EF8               	movwf	tblptru,c
 30398  015244  0E0F               	movlw	(high __ramtop+-1)
 30399  015246  64F7               	cpfsgt	tblptrh,c
 30400  015248  D003               	bra	i2u505_47
 30401  01524A  0008               	tblrd		*
 30402  01524C  50F5               	movf	tablat,w,c
 30403  01524E  D005               	bra	i2u505_40
 30404  015250                     i2u505_47:
 30405  015250  CFF6 FFE9          	movff	tblptrl,fsr0l
 30406  015254  CFF7 FFEA          	movff	tblptrh,fsr0h
 30407  015258  50EF               	movf	indf0,w,c
 30408  01525A                     i2u505_40:
 30409  01525A  6E09               	movwf	i2Byte_GetZone@Output,c
 30410                           
 30411                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30412  01525C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30413  01525E  0D01               	mullw	1
 30414  015260  0E0F               	movlw	low _MASKS
 30415  015262  24F3               	addwf	prodl,w,c
 30416  015264  6EF6               	movwf	tblptrl,c
 30417  015266  0EFD               	movlw	high _MASKS
 30418  015268  20F4               	addwfc	prodh,w,c
 30419  01526A  6EF7               	movwf	tblptrh,c
 30420  01526C                     	if	1	;There are 3 active tblptr bytes
 30421  01526C  6AF8               	clrf	tblptru,c
 30422  01526E  0E00               	movlw	low (__mediumconst shr (0+16))
 30423  015270  22F8               	addwfc	tblptru,f,c
 30424  015272                     	endif
 30425  015272  0008               	tblrd		*
 30426  015274  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30427                           
 30428                           ;Types.c: 68: UINT8 Offset = 0;
 30429  015278  0E00               	movlw	0
 30430  01527A  6E08               	movwf	i2Byte_GetZone@Offset,c
 30431                           
 30432                           ;Types.c: 70: while (pChunk >= pMax)
 30433  01527C  D003               	goto	i2l732
 30434  01527E                     
 30435                           ;Types.c: 71: {
 30436                           ;Types.c: 72: pChunk -= pMax;
 30437  01527E  5003               	movf	i2Byte_GetZone@pMax,w,c
 30438  015280  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30439                           
 30440                           ;Types.c: 73: Offset += 1;
 30441  015282  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30442  015284                     i2l732:
 30443  015284  5003               	movf	i2Byte_GetZone@pMax,w,c
 30444  015286  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30445  015288  B0D8               	btfsc	status,0,c
 30446  01528A  D7F9               	goto	i2l733
 30447                           
 30448                           ;Types.c: 74: }
 30449                           ;Types.c: 75: pChunk *= pChunkSize;
 30450  01528C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30451  01528E  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30452  015290  50F3               	movf	prodl,w,c
 30453  015292  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30454                           
 30455                           ;Types.c: 76: pChunk += Offset;
 30456  015294  5008               	movf	i2Byte_GetZone@Offset,w,c
 30457  015296  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30458                           
 30459                           ;Types.c: 78: Output >>= pChunk;
 30460  015298  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30461  01529A  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30462  01529C  D002               	goto	i2u507_40
 30463  01529E                     i2u507_45:
 30464  01529E  90D8               	bcf	status,0,c
 30465  0152A0  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30466  0152A2                     i2u507_40:
 30467  0152A2  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30468  0152A4  D7FC               	goto	i2u507_45
 30469                           
 30470                           ;Types.c: 79: Output &= MASK;
 30471  0152A6  5007               	movf	i2Byte_GetZone@MASK,w,c
 30472  0152A8  1609               	andwf	i2Byte_GetZone@Output,f,c
 30473                           
 30474                           ;Types.c: 80: return Output;
 30475  0152AA  5009               	movf	i2Byte_GetZone@Output,w,c
 30476  0152AC  0012               	return	
 30477  0152AE                     __end_ofi2_Byte_GetZone:
 30478                           	opt stack 0
 30479                           tosu	equ	0xFFF
 30480                           tosh	equ	0xFFE
 30481                           tosl	equ	0xFFD
 30482                           pclatu	equ	0xFFB
 30483                           pclath	equ	0xFFA
 30484                           tblptru	equ	0xFF8
 30485                           tblptrh	equ	0xFF7
 30486                           tblptrl	equ	0xFF6
 30487                           tablat	equ	0xFF5
 30488                           prodh	equ	0xFF4
 30489                           prodl	equ	0xFF3
 30490                           intcon	equ	0xFF2
 30491                           indf0	equ	0xFEF
 30492                           postinc0	equ	0xFEE
 30493                           fsr0h	equ	0xFEA
 30494                           fsr0l	equ	0xFE9
 30495                           wreg	equ	0xFE8
 30496                           indf1	equ	0xFE7
 30497                           postdec1	equ	0xFE5
 30498                           fsr1h	equ	0xFE2
 30499                           fsr1l	equ	0xFE1
 30500                           indf2	equ	0xFDF
 30501                           postinc2	equ	0xFDE
 30502                           postdec2	equ	0xFDD
 30503                           plusw2	equ	0xFDB
 30504                           fsr2h	equ	0xFDA
 30505                           fsr2l	equ	0xFD9
 30506                           status	equ	0xFD8
 30507                           
 30508 ;; *************** function i2_Byte_SetBit *****************
 30509 ;; Defined at:
 30510 ;;		line 32 in file "Library/Types.c"
 30511 ;; Parameters:    Size  Location     Type
 30512 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30513 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30514 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30515 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30516 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30517 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30518 ;;		 -> NULL(0), 
 30519 ;;  pBit            1    2[COMRAM] unsigned char 
 30520 ;;  pValue          1    3[COMRAM] unsigned char 
 30521 ;; Auto vars:     Size  Location     Type
 30522 ;;		None
 30523 ;; Return value:  Size  Location     Type
 30524 ;;                  1    wreg      void 
 30525 ;; Registers used:
 30526 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30527 ;; Tracked objects:
 30528 ;;		On entry : 0/0
 30529 ;;		On exit  : 0/0
 30530 ;;		Unchanged: 0/0
 30531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30532 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30534 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30535 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30536 ;;Total ram usage:        7 bytes
 30537 ;; Hardware stack levels used:    1
 30538 ;; This function calls:
 30539 ;;		Nothing
 30540 ;; This function is called by:
 30541 ;;		i2_Port_SetPin
 30542 ;; This function uses a non-reentrant model
 30543 ;;
 30544                           
 30545                           	psect	text167
 30546  015BB4                     __ptext167:
 30547                           	opt stack 0
 30548  015BB4                     i2_Byte_SetBit:
 30549                           	opt stack 15
 30550                           
 30551                           ;Types.c: 34: pValue &= 1;
 30552                           
 30553                           ;incstack = 0
 30554  015BB4  0E01               	movlw	1
 30555  015BB6  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30556                           
 30557                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30558  015BB8  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30559  015BBC  0E01               	movlw	1
 30560  015BBE  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30561  015BC0  2A05               	incf	??i2_Byte_SetBit,f,c
 30562  015BC2  D002               	goto	i2u635_44
 30563  015BC4                     i2u635_45:
 30564  015BC4  90D8               	bcf	status,0,c
 30565  015BC6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30566  015BC8                     i2u635_44:
 30567  015BC8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30568  015BCA  D7FC               	goto	i2u635_45
 30569  015BCC  5006               	movf	??i2_Byte_SetBit+1,w,c
 30570  015BCE  0AFF               	xorlw	255
 30571  015BD0  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30572  015BD2  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30573  015BD6  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30574  015BDA  5007               	movf	??i2_Byte_SetBit+2,w,c
 30575  015BDC  16DF               	andwf	indf2,f,c
 30576                           
 30577                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30578  015BDE  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30579  015BE2  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30580  015BE6  2A05               	incf	??i2_Byte_SetBit,f,c
 30581  015BE8  D002               	goto	i2u636_44
 30582  015BEA                     i2u636_45:
 30583  015BEA  90D8               	bcf	status,0,c
 30584  015BEC  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30585  015BEE                     i2u636_44:
 30586  015BEE  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30587  015BF0  D7FC               	goto	i2u636_45
 30588  015BF2  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30589  015BF6  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30590  015BFA  5006               	movf	??i2_Byte_SetBit+1,w,c
 30591  015BFC  12DF               	iorwf	indf2,f,c
 30592  015BFE  0012               	return		;funcret
 30593  015C00                     __end_ofi2_Byte_SetBit:
 30594                           	opt stack 0
 30595                           tosu	equ	0xFFF
 30596                           tosh	equ	0xFFE
 30597                           tosl	equ	0xFFD
 30598                           pclatu	equ	0xFFB
 30599                           pclath	equ	0xFFA
 30600                           tblptru	equ	0xFF8
 30601                           tblptrh	equ	0xFF7
 30602                           tblptrl	equ	0xFF6
 30603                           tablat	equ	0xFF5
 30604                           prodh	equ	0xFF4
 30605                           prodl	equ	0xFF3
 30606                           intcon	equ	0xFF2
 30607                           indf0	equ	0xFEF
 30608                           postinc0	equ	0xFEE
 30609                           fsr0h	equ	0xFEA
 30610                           fsr0l	equ	0xFE9
 30611                           wreg	equ	0xFE8
 30612                           indf1	equ	0xFE7
 30613                           postdec1	equ	0xFE5
 30614                           fsr1h	equ	0xFE2
 30615                           fsr1l	equ	0xFE1
 30616                           indf2	equ	0xFDF
 30617                           postinc2	equ	0xFDE
 30618                           postdec2	equ	0xFDD
 30619                           plusw2	equ	0xFDB
 30620                           fsr2h	equ	0xFDA
 30621                           fsr2l	equ	0xFD9
 30622                           status	equ	0xFD8
 30623                           
 30624 ;; *************** function i2_MXK_SwitchTo *****************
 30625 ;; Defined at:
 30626 ;;		line 105 in file "Library/MXK.c"
 30627 ;; Parameters:    Size  Location     Type
 30628 ;;  pModule         1    wreg     enum E6927
 30629 ;; Auto vars:     Size  Location     Type
 30630 ;;  pModule         1    7[COMRAM] enum E6927
 30631 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30632 ;; Return value:  Size  Location     Type
 30633 ;;                  1    wreg      unsigned char 
 30634 ;; Registers used:
 30635 ;;		wreg, status,2, status,0, cstack
 30636 ;; Tracked objects:
 30637 ;;		On entry : 0/0
 30638 ;;		On exit  : 0/0
 30639 ;;		Unchanged: 0/0
 30640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30644 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30645 ;;Total ram usage:        2 bytes
 30646 ;; Hardware stack levels used:    1
 30647 ;; Hardware stack levels required when called:    1
 30648 ;; This function calls:
 30649 ;;		i2_delay_us
 30650 ;; This function is called by:
 30651 ;;		i2_Motor_Step
 30652 ;; This function uses a non-reentrant model
 30653 ;;
 30654                           
 30655                           	psect	text168
 30656  016122                     __ptext168:
 30657                           	opt stack 0
 30658  016122                     i2_MXK_SwitchTo:
 30659                           	opt stack 15
 30660                           
 30661                           ;incstack = 0
 30662                           ;i2MXK_SwitchTo@pModule stored from wreg
 30663  016122  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30664                           
 30665                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30666  016124  5086               	movf	3974,w,c	;volatile
 30667  016126  0B0F               	andlw	15
 30668  016128  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30669                           
 30670                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30671  01612A  504B               	movf	_Bus_State,w,c
 30672  01612C  A4D8               	btfss	status,2,c
 30673  01612E  D002               	goto	i2l1730
 30674                           
 30675                           ;MXK.c: 110: return 0;
 30676  016130  0E00               	movlw	0
 30677  016132  0012               	return	
 30678  016134                     i2l1730:
 30679                           
 30680                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30681  016134  0E00               	movlw	0
 30682  016136  6E4B               	movwf	_Bus_State,c
 30683                           
 30684                           ;MXK.c: 114: if (CUR != pModule)
 30685  016138  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30686  01613A  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30687  01613C  B4D8               	btfsc	status,2,c
 30688  01613E  D00A               	goto	i2l1732
 30689                           
 30690                           ;MXK.c: 115: {
 30691                           ;MXK.c: 116: PORTG &= ~(0xF);
 30692  016140  0EF0               	movlw	240
 30693  016142  1686               	andwf	3974,f,c	;volatile
 30694                           
 30695                           ;MXK.c: 117: PORTG |= pModule;
 30696  016144  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30697  016146  1286               	iorwf	3974,f,c	;volatile
 30698                           
 30699                           ;MXK.c: 120: delay_us(10);
 30700  016148  0E00               	movlw	0
 30701  01614A  6E02               	movwf	i2delay_us@us+1,c
 30702  01614C  0E0A               	movlw	10
 30703  01614E  6E01               	movwf	i2delay_us@us,c
 30704  016150  EC82  F0AF         	call	i2_delay_us	;wreg free
 30705  016154                     i2l1732:
 30706                           
 30707                           ;MXK.c: 121: }
 30708                           ;MXK.c: 122: return 1;
 30709  016154  0E01               	movlw	1
 30710  016156  0012               	return	
 30711  016158                     __end_ofi2_MXK_SwitchTo:
 30712                           	opt stack 0
 30713                           tosu	equ	0xFFF
 30714                           tosh	equ	0xFFE
 30715                           tosl	equ	0xFFD
 30716                           pclatu	equ	0xFFB
 30717                           pclath	equ	0xFFA
 30718                           tblptru	equ	0xFF8
 30719                           tblptrh	equ	0xFF7
 30720                           tblptrl	equ	0xFF6
 30721                           tablat	equ	0xFF5
 30722                           prodh	equ	0xFF4
 30723                           prodl	equ	0xFF3
 30724                           intcon	equ	0xFF2
 30725                           indf0	equ	0xFEF
 30726                           postinc0	equ	0xFEE
 30727                           fsr0h	equ	0xFEA
 30728                           fsr0l	equ	0xFE9
 30729                           wreg	equ	0xFE8
 30730                           indf1	equ	0xFE7
 30731                           postdec1	equ	0xFE5
 30732                           fsr1h	equ	0xFE2
 30733                           fsr1l	equ	0xFE1
 30734                           indf2	equ	0xFDF
 30735                           postinc2	equ	0xFDE
 30736                           postdec2	equ	0xFDD
 30737                           plusw2	equ	0xFDB
 30738                           fsr2h	equ	0xFDA
 30739                           fsr2l	equ	0xFD9
 30740                           status	equ	0xFD8
 30741                           
 30742 ;; *************** function i2_delay_us *****************
 30743 ;; Defined at:
 30744 ;;		line 255 in file "Library/Types.c"
 30745 ;; Parameters:    Size  Location     Type
 30746 ;;  us              2    0[COMRAM] unsigned short 
 30747 ;; Auto vars:     Size  Location     Type
 30748 ;;  delay_us        4    2[COMRAM] unsigned long 
 30749 ;; Return value:  Size  Location     Type
 30750 ;;                  1    wreg      void 
 30751 ;; Registers used:
 30752 ;;		wreg, status,2, status,0
 30753 ;; Tracked objects:
 30754 ;;		On entry : 0/0
 30755 ;;		On exit  : 0/0
 30756 ;;		Unchanged: 0/0
 30757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30758 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30759 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30761 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30762 ;;Total ram usage:        6 bytes
 30763 ;; Hardware stack levels used:    1
 30764 ;; This function calls:
 30765 ;;		Nothing
 30766 ;; This function is called by:
 30767 ;;		i2_MXK_SwitchTo
 30768 ;; This function uses a non-reentrant model
 30769 ;;
 30770                           
 30771                           	psect	text169
 30772  015F04                     __ptext169:
 30773                           	opt stack 0
 30774  015F04                     i2_delay_us:
 30775                           	opt stack 15
 30776                           
 30777                           ;Types.c: 256: unsigned long u;
 30778                           ;Types.c: 257: while (us--) {
 30779                           
 30780                           ;incstack = 0
 30781  015F04  D016               	goto	i2u639_40
 30782  015F06                     i2l9639:
 30783                           
 30784                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30785  015F06  0E00               	movlw	0
 30786  015F08  6E03               	movwf	i2delay_us@u,c
 30787  015F0A  0E00               	movlw	0
 30788  015F0C  6E04               	movwf	i2delay_us@u+1,c
 30789  015F0E  0E00               	movlw	0
 30790  015F10  6E05               	movwf	i2delay_us@u+2,c
 30791  015F12  0E00               	movlw	0
 30792  015F14  6E06               	movwf	i2delay_us@u+3,c
 30793  015F16                     i2l9641:
 30794  015F16  5003               	movf	i2delay_us@u,w,c
 30795  015F18  1004               	iorwf	i2delay_us@u+1,w,c
 30796  015F1A  1005               	iorwf	i2delay_us@u+2,w,c
 30797  015F1C  1006               	iorwf	i2delay_us@u+3,w,c
 30798  015F1E  A4D8               	btfss	status,2,c
 30799  015F20  D008               	goto	i2u639_40
 30800  015F22  F000               	nop		; ;# 
 30801  015F24  0E01               	movlw	1
 30802  015F26  2603               	addwf	i2delay_us@u,f,c
 30803  015F28  0E00               	movlw	0
 30804  015F2A  2204               	addwfc	i2delay_us@u+1,f,c
 30805  015F2C  2205               	addwfc	i2delay_us@u+2,f,c
 30806  015F2E  2206               	addwfc	i2delay_us@u+3,f,c
 30807  015F30  D7F2               	goto	i2l9641
 30808  015F32                     i2u639_40:
 30809  015F32  0601               	decf	i2delay_us@us,f,c
 30810  015F34  A0D8               	btfss	status,0,c
 30811  015F36  0602               	decf	i2delay_us@us+1,f,c
 30812  015F38  2801               	incf	i2delay_us@us,w,c
 30813  015F3A  E1E5               	bnz	i2l9639
 30814  015F3C  2802               	incf	i2delay_us@us+1,w,c
 30815  015F3E  B4D8               	btfsc	status,2,c
 30816  015F40  0012               	return	
 30817  015F42  D7E1               	goto	i2l832
 30818  015F44                     __end_ofi2_delay_us:
 30819                           	opt stack 0
 30820                           tosu	equ	0xFFF
 30821                           tosh	equ	0xFFE
 30822                           tosl	equ	0xFFD
 30823                           pclatu	equ	0xFFB
 30824                           pclath	equ	0xFFA
 30825                           tblptru	equ	0xFF8
 30826                           tblptrh	equ	0xFF7
 30827                           tblptrl	equ	0xFF6
 30828                           tablat	equ	0xFF5
 30829                           prodh	equ	0xFF4
 30830                           prodl	equ	0xFF3
 30831                           intcon	equ	0xFF2
 30832                           indf0	equ	0xFEF
 30833                           postinc0	equ	0xFEE
 30834                           fsr0h	equ	0xFEA
 30835                           fsr0l	equ	0xFE9
 30836                           wreg	equ	0xFE8
 30837                           indf1	equ	0xFE7
 30838                           postdec1	equ	0xFE5
 30839                           fsr1h	equ	0xFE2
 30840                           fsr1l	equ	0xFE1
 30841                           indf2	equ	0xFDF
 30842                           postinc2	equ	0xFDE
 30843                           postdec2	equ	0xFDD
 30844                           plusw2	equ	0xFDB
 30845                           fsr2h	equ	0xFDA
 30846                           fsr2l	equ	0xFD9
 30847                           status	equ	0xFD8
 30848                           
 30849 ;; *************** function i2_MXK_Release *****************
 30850 ;; Defined at:
 30851 ;;		line 130 in file "Library/MXK.c"
 30852 ;; Parameters:    Size  Location     Type
 30853 ;;		None
 30854 ;; Auto vars:     Size  Location     Type
 30855 ;;		None
 30856 ;; Return value:  Size  Location     Type
 30857 ;;                  1    wreg      unsigned char 
 30858 ;; Registers used:
 30859 ;;		wreg, status,2, status,0
 30860 ;; Tracked objects:
 30861 ;;		On entry : 0/0
 30862 ;;		On exit  : 0/0
 30863 ;;		Unchanged: 0/0
 30864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30869 ;;Total ram usage:        0 bytes
 30870 ;; Hardware stack levels used:    1
 30871 ;; This function calls:
 30872 ;;		Nothing
 30873 ;; This function is called by:
 30874 ;;		i2_Motor_Step
 30875 ;; This function uses a non-reentrant model
 30876 ;;
 30877                           
 30878                           	psect	text170
 30879  016744                     __ptext170:
 30880                           	opt stack 0
 30881  016744                     i2_MXK_Release:
 30882                           	opt stack 16
 30883                           
 30884                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30885                           
 30886                           ;incstack = 0
 30887  016744  0E01               	movlw	1
 30888  016746  6E4B               	movwf	_Bus_State,c
 30889                           
 30890                           ;MXK.c: 135: return 1;
 30891                           ;	Return value of i2_MXK_Release is never used
 30892  016748  0012               	return	
 30893  01674A                     __end_ofi2_MXK_Release:
 30894                           	opt stack 0
 30895                           tosu	equ	0xFFF
 30896                           tosh	equ	0xFFE
 30897                           tosl	equ	0xFFD
 30898                           pclatu	equ	0xFFB
 30899                           pclath	equ	0xFFA
 30900                           tblptru	equ	0xFF8
 30901                           tblptrh	equ	0xFF7
 30902                           tblptrl	equ	0xFF6
 30903                           tablat	equ	0xFF5
 30904                           prodh	equ	0xFF4
 30905                           prodl	equ	0xFF3
 30906                           intcon	equ	0xFF2
 30907                           indf0	equ	0xFEF
 30908                           postinc0	equ	0xFEE
 30909                           fsr0h	equ	0xFEA
 30910                           fsr0l	equ	0xFE9
 30911                           wreg	equ	0xFE8
 30912                           indf1	equ	0xFE7
 30913                           postdec1	equ	0xFE5
 30914                           fsr1h	equ	0xFE2
 30915                           fsr1l	equ	0xFE1
 30916                           indf2	equ	0xFDF
 30917                           postinc2	equ	0xFDE
 30918                           postdec2	equ	0xFDD
 30919                           plusw2	equ	0xFDB
 30920                           fsr2h	equ	0xFDA
 30921                           fsr2l	equ	0xFD9
 30922                           status	equ	0xFD8
 30923                           
 30924 ;; *************** function i2_MXK_Queue *****************
 30925 ;; Defined at:
 30926 ;;		line 144 in file "Library/MXK.c"
 30927 ;; Parameters:    Size  Location     Type
 30928 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30929 ;;		 -> Absolute function(1), Motor_Step(1), 
 30930 ;; Auto vars:     Size  Location     Type
 30931 ;;		None
 30932 ;; Return value:  Size  Location     Type
 30933 ;;                  1    wreg      void 
 30934 ;; Registers used:
 30935 ;;		wreg, status,2, status,0
 30936 ;; Tracked objects:
 30937 ;;		On entry : 0/0
 30938 ;;		On exit  : 0/0
 30939 ;;		Unchanged: 0/0
 30940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30941 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30944 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30945 ;;Total ram usage:        3 bytes
 30946 ;; Hardware stack levels used:    1
 30947 ;; This function calls:
 30948 ;;		Nothing
 30949 ;; This function is called by:
 30950 ;;		i2_Motor_Step
 30951 ;; This function uses a non-reentrant model
 30952 ;;
 30953                           
 30954                           	psect	text171
 30955  0166AA                     __ptext171:
 30956                           	opt stack 0
 30957  0166AA                     i2_MXK_Queue:
 30958                           	opt stack 16
 30959                           
 30960                           ;MXK.c: 146: lQueue = pCallback;
 30961                           
 30962                           ;incstack = 0
 30963  0166AA  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30964  0166AE  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30965  0166B2  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30966  0166B6  0012               	return		;funcret
 30967  0166B8                     __end_ofi2_MXK_Queue:
 30968                           	opt stack 0
 30969                           tosu	equ	0xFFF
 30970                           tosh	equ	0xFFE
 30971                           tosl	equ	0xFFD
 30972                           pclatu	equ	0xFFB
 30973                           pclath	equ	0xFFA
 30974                           tblptru	equ	0xFF8
 30975                           tblptrh	equ	0xFF7
 30976                           tblptrl	equ	0xFF6
 30977                           tablat	equ	0xFF5
 30978                           prodh	equ	0xFF4
 30979                           prodl	equ	0xFF3
 30980                           intcon	equ	0xFF2
 30981                           indf0	equ	0xFEF
 30982                           postinc0	equ	0xFEE
 30983                           fsr0h	equ	0xFEA
 30984                           fsr0l	equ	0xFE9
 30985                           wreg	equ	0xFE8
 30986                           indf1	equ	0xFE7
 30987                           postdec1	equ	0xFE5
 30988                           fsr1h	equ	0xFE2
 30989                           fsr1l	equ	0xFE1
 30990                           indf2	equ	0xFDF
 30991                           postinc2	equ	0xFDE
 30992                           postdec2	equ	0xFDD
 30993                           plusw2	equ	0xFDB
 30994                           fsr2h	equ	0xFDA
 30995                           fsr2l	equ	0xFD9
 30996                           status	equ	0xFD8
 30997                           tosu	equ	0xFFF
 30998                           tosh	equ	0xFFE
 30999                           tosl	equ	0xFFD
 31000                           pclatu	equ	0xFFB
 31001                           pclath	equ	0xFFA
 31002                           tblptru	equ	0xFF8
 31003                           tblptrh	equ	0xFF7
 31004                           tblptrl	equ	0xFF6
 31005                           tablat	equ	0xFF5
 31006                           prodh	equ	0xFF4
 31007                           prodl	equ	0xFF3
 31008                           intcon	equ	0xFF2
 31009                           indf0	equ	0xFEF
 31010                           postinc0	equ	0xFEE
 31011                           fsr0h	equ	0xFEA
 31012                           fsr0l	equ	0xFE9
 31013                           wreg	equ	0xFE8
 31014                           indf1	equ	0xFE7
 31015                           postdec1	equ	0xFE5
 31016                           fsr1h	equ	0xFE2
 31017                           fsr1l	equ	0xFE1
 31018                           indf2	equ	0xFDF
 31019                           postinc2	equ	0xFDE
 31020                           postdec2	equ	0xFDD
 31021                           plusw2	equ	0xFDB
 31022                           fsr2h	equ	0xFDA
 31023                           fsr2l	equ	0xFD9
 31024                           status	equ	0xFD8
 31025                           
 31026                           	psect	text172
 31027  000000                     __ptext172:
 31028                           	opt stack 0
 31029                           tosu	equ	0xFFF
 31030                           tosh	equ	0xFFE
 31031                           tosl	equ	0xFFD
 31032                           pclatu	equ	0xFFB
 31033                           pclath	equ	0xFFA
 31034                           tblptru	equ	0xFF8
 31035                           tblptrh	equ	0xFF7
 31036                           tblptrl	equ	0xFF6
 31037                           tablat	equ	0xFF5
 31038                           prodh	equ	0xFF4
 31039                           prodl	equ	0xFF3
 31040                           intcon	equ	0xFF2
 31041                           indf0	equ	0xFEF
 31042                           postinc0	equ	0xFEE
 31043                           fsr0h	equ	0xFEA
 31044                           fsr0l	equ	0xFE9
 31045                           wreg	equ	0xFE8
 31046                           indf1	equ	0xFE7
 31047                           postdec1	equ	0xFE5
 31048                           fsr1h	equ	0xFE2
 31049                           fsr1l	equ	0xFE1
 31050                           indf2	equ	0xFDF
 31051                           postinc2	equ	0xFDE
 31052                           postdec2	equ	0xFDD
 31053                           plusw2	equ	0xFDB
 31054                           fsr2h	equ	0xFDA
 31055                           fsr2l	equ	0xFD9
 31056                           status	equ	0xFD8
 31057                           
 31058                           	psect	rparam
 31059  0000                     tosu	equ	0xFFF
 31060                           tosh	equ	0xFFE
 31061                           tosl	equ	0xFFD
 31062                           pclatu	equ	0xFFB
 31063                           pclath	equ	0xFFA
 31064                           tblptru	equ	0xFF8
 31065                           tblptrh	equ	0xFF7
 31066                           tblptrl	equ	0xFF6
 31067                           tablat	equ	0xFF5
 31068                           prodh	equ	0xFF4
 31069                           prodl	equ	0xFF3
 31070                           intcon	equ	0xFF2
 31071                           indf0	equ	0xFEF
 31072                           postinc0	equ	0xFEE
 31073                           fsr0h	equ	0xFEA
 31074                           fsr0l	equ	0xFE9
 31075                           wreg	equ	0xFE8
 31076                           indf1	equ	0xFE7
 31077                           postdec1	equ	0xFE5
 31078                           fsr1h	equ	0xFE2
 31079                           fsr1l	equ	0xFE1
 31080                           indf2	equ	0xFDF
 31081                           postinc2	equ	0xFDE
 31082                           postdec2	equ	0xFDD
 31083                           plusw2	equ	0xFDB
 31084                           fsr2h	equ	0xFDA
 31085                           fsr2l	equ	0xFD9
 31086                           status	equ	0xFD8
 31087                           
 31088                           	psect	temp
 31089  000051                     btemp:
 31090                           	opt stack 0
 31091  000051                     	ds	1
 31092  0000                     int$flags	set	btemp
 31093  0000                     wtemp6	set	btemp+1
 31094                           tosu	equ	0xFFF
 31095                           tosh	equ	0xFFE
 31096                           tosl	equ	0xFFD
 31097                           pclatu	equ	0xFFB
 31098                           pclath	equ	0xFFA
 31099                           tblptru	equ	0xFF8
 31100                           tblptrh	equ	0xFF7
 31101                           tblptrl	equ	0xFF6
 31102                           tablat	equ	0xFF5
 31103                           prodh	equ	0xFF4
 31104                           prodl	equ	0xFF3
 31105                           intcon	equ	0xFF2
 31106                           indf0	equ	0xFEF
 31107                           postinc0	equ	0xFEE
 31108                           fsr0h	equ	0xFEA
 31109                           fsr0l	equ	0xFE9
 31110                           wreg	equ	0xFE8
 31111                           indf1	equ	0xFE7
 31112                           postdec1	equ	0xFE5
 31113                           fsr1h	equ	0xFE2
 31114                           fsr1l	equ	0xFE1
 31115                           indf2	equ	0xFDF
 31116                           postinc2	equ	0xFDE
 31117                           postdec2	equ	0xFDD
 31118                           plusw2	equ	0xFDB
 31119                           fsr2h	equ	0xFDA
 31120                           fsr2l	equ	0xFD9
 31121                           status	equ	0xFD8


Data Sizes:
    Strings     241
    Constant    730
    Data        29
    BSS         822
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     63     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     254
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 76
		 -> STR_16(CODE[21]), STR_15(CODE[21]), STR_14(CODE[21]), STR_13(CODE[21]), 
		 -> STR_12(CODE[21]), STR_11(CODE[3]), STR_10(CODE[76]), STR_9(CODE[3]), 
		 -> STR_8(CODE[14]), STR_7(CODE[3]), STR_6(CODE[46]), STR_5(CODE[3]), 
		 -> STR_4(CODE[46]), STR_3(CODE[3]), STR_2(CODE[60]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _move_and_rotate->_irobot_rotate
    _irobot_rotate->_irobot_move
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _findClosestWall->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2021311
                                              8 BANK3      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0  287934
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                           _delay_ms
                    _findClosestWall
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                           _safeToGo
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                     10    10      0  108678
                                              4 BANK1      6     6      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                      _irobot_rotate
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  108302
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      0     0      0   14658
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                        5     1      4    4279
                                             25 BANK0      5     1      4
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  175853
                                             44 BANK0      2     2      0
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                 _irobot_stop_motion
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3662
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  194792
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   93644
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    17     12    6795
                                             21 BANK0     20     8     12
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1249
                                             57 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    4447
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    1523
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4    8425
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3703
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  999008
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362768
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              1 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      5     2      3
                                              0 BANK1      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291732
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262269
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94893
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1774
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96823
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _delay_ms
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A      FE      11       99.2%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     498      12        0.0%
DATA                 0      0     5C4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Sep 16 16:39:44 2017

                                 _update_angle 6640                                  i2_Timer0_Stop 673E  
                             SPI_Init@pChannel 00EB                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 37B0                                              _A 004C  
                        __end_of_irobot_rotate 5834                                              l8 3E3E  
                                 ___fldiv@aexp 00D2                                   ___fldiv@bexp 00D1  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 64C2                                   ___fldiv@sign 00C6  
                                           l11 309C                                             l12 3086  
                                           l90 2FD2                                             l85 2ECE  
                                           l87 2F3C                                             l89 2FA8  
                                 ___awdiv@sign 00BF                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00BC                                  _HMI_DIPSwitch 6560  
                           LCD_DrawField@pSize 00D2                             LCD_DrawField@count 00D8  
                   __end_of_irobot_stop_motion 5DB2                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 66DC                           ADC_ClockDivision@reg 00BB  
                                          l120 4C24                                            l121 4C3A  
                                          l122 4C50                                            l220 58DA  
                                          l117 4C66                                            l221 589E  
                                          l118 4C0E                                            l230 5B36  
                                          l222 58EA                                            l223 58BC  
                                  ?_LED_Toggle 0001                                            l234 5D5A  
                                          l235 5D2A                                            l227 5B52  
                                          l403 2B5C                                            l412 2838  
                                          l228 5B1A                                            l340 48D2  
                                          l404 2AFC                                            l237 5D42  
                                          l421 27CC                                            l413 26CE  
                                          l341 48E0                                            l405 2B8C  
                                ??_Console_Tab 00C2                                            l430 3FB2  
                                          l414 2854                                            l350 49DA  
                                          l342 48EE                                            l510 1CFA  
                                          l406 2B14                                            l415 26F4  
                                          l351 496A                                            l343 48FC  
                                          l511 1E0A                                            l407 2B2C  
                                          l183 4A8E                                            l432 3FDC  
                                          l600 04B2                                            l344 490A  
                                          l512 1D1C                                            l408 2B44  
                                          l184 4A68                                            l433 400C  
                                          l417 2760                                            l601 0646  
                                          l353 4978                                            l337 4934  
                                          l345 4918                                            l610 06CE  
                                          l602 04E4                                            l354 4986  
                                          l346 4926                                            l338 48C4  
                                          l370 4864                                            l427 4036  
                                          l611 071C                                            l603 0658  
                                          l355 4994                                            l363 488E  
                                          l371 4872                                            l531 17B4  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 49A2  
                                          l372 4880                                            l364 481E  
                                          l532 17D8                                            l516 1D64  
                                          l357 49B0                                            l509 1DEE  
                                          l614 084C                                            l358 49BE  
                                          l366 482C                                            l526 17F8  
                                          l615 0844                                            l607 07B8  
                                          l359 49CC                                            l367 483A  
                                          l519 1DAC                                            l616 085E  
                                          l608 0680                                            l368 4848  
                                          l528 1816                                            l393 5A0C  
                                          l617 0848                                            l609 07D6  
                                          l369 4856                                            l529 1794  
                                          l483 1B5A                                            l732 4BA8  
                                          l900 18D2                                            l476 1C32  
                                          l733 4B9C                                            l901 18D6  
                                          l389 56FE                                            l477 1AA4  
                                          l397 5CD6                                            l910 18FA  
                                          l902 18DA                                            l726 443C  
                                          l478 1C4E                                            l486 1BC6  
                                          l654 6308                                            l911 18FE  
                                          l903 18DE                                            l727 4430  
                                          l479 1AEE                                            l655 6300  
                                          l912 1902                                            l904 18E2  
                                          l824 5632                                            l832 5AC4  
                                          l913 1906                                            l905 18E6  
                                          l921 55A8                                            l673 61E0  
                                          l657 6304                                            l681 5500  
                                          l914 190A                                            l906 18EA  
                                          l922 5574                                            l930 3C7C  
                                          l915 190E                                            l907 18EE  
                                          l819 5142                                            l916 1912  
                                          l908 18F2                                            l860 1832  
                                          l684 5516                                            l781 602A  
                                          l853 191A                                            l917 1916  
                                          l909 18F6                                            l861 1836  
                                          l597 04C0                                            l870 185A  
                                          l862 183A                                            l854 181E  
                                          l598 04A8                                            l678 553C  
                                          l686 5526                                            l871 185E  
                                          l863 183E                                            l599 04D0  
                                          l679 54F0                                            l880 1882  
                                          l872 1862                                            l864 1842  
                                          l856 1822                                            l928 3CFC  
                                          l776 5DE2                                            l881 1886  
                                          l873 1866                                            l865 1846  
                                          l857 1826                                            l929 3CCC  
                                          l890 18AA                                            l882 188A  
                                          l874 186A                                            l866 184A  
                                          l858 182A                                            l891 18AE  
                                          l883 188E                                            l875 186E  
                                          l867 184E                                            l859 182E  
                                          l892 18B2                                            l884 1892  
                                          l876 1872                                            l868 1852  
                                          l893 18B6                                            l885 1896  
                                          l877 1876                                            l869 1856  
                                          l894 18BA                                            l886 189A  
                                          l878 187A                                            l990 4D30  
                                          l895 18BE                                            l887 189E  
                                          l879 187E                                            l983 4B2C  
                                          l896 18C2                                            l888 18A2  
                                          l976 4E4A                                            l992 4D40  
                                          l984 4AB0                                            l897 18C6  
                                          l889 18A6                                            l985 4B28  
                                          l898 18CA                                            l978 4E5A  
                                          l899 18CE                                            l997 5972  
                                          l999 5996                                            _PR2 000FCB  
                                          _dip 033A                                            _val 007D  
                              __end_of_ADC_Off 671E                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D3                                   _Word_GetPair 5FFE  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 00C1                     __end_of_ADC_ConversionTime 5D24  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00CA                             Console_MakeField@y 00CB  
                                   _TXSTA1bits 000FAD                                _update_distance 662E  
                                 Console_Tab@c 00C9                                   Console_Tab@i 00C8  
                          LCD_DrawField@pField 00CC                                   Console_Tab@t 00C7  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 00D5  
                                 ___flmul@bexp 00DA                                     i2_delay_us 5F04  
                         Port_Set@TypeRequired 00DC                                   ___flmul@sign 00D4  
                                 ___flmul@temp 00DF                                   ___flmul@prod 00DB  
                            Console_FormFeed@x 00BC                              Console_FormFeed@y 00BD  
                          LCD_DrawField@pPoint 00CE                                 ?_LCD_DrawField 00CC  
                        Port_SetPinType@Output 00E4                                Port_SetPin@Type 00CD  
                              Port_SetPin@pPin 00CB                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C3                                __end_of_LED_Set 5B64  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 46C8  
                                 ___fltol@exp1 00F8                                   _Word_SetPair 5DB2  
                                         l1000 59B2                                           l1010 40A6  
                                         l1004 579E                                  ?_Byte_GetZone 00BA  
                                         l1005 57CC                                           l1200 435C  
                                         l1040 2882                                           l1201 43B0  
                                         l1009 40B2                                           l1041 2888  
                                         l1202 43CC                                           l1042 288E  
                                         l1043 2894                                           l1204 43F6  
                                         l1300 4EDC                                           l1036 29DE  
                                         l1044 289A                                           l2020 570E  
                                         l2100 2C68                                           l1205 43DC  
                                         l1301 4EE0                                           l1045 28A0  
                                         l1037 287C                                           l2021 5712  
                                         l1302 4EEA                                           l1062 20B6  
                                         l2110 5E6C                                           l2022 5716  
                                         l1207 4408                                           l1303 4EF8  
                                         l1063 20E4                                           l1047 2946  
                                         l2023 571A                                           l2031 3964  
                                         l3000 0482                                           l1056 1F46  
                                         l2024 571E                                           l2040 38E4  
                                         l2032 38B6                                           l1313 5D04  
                                         l1153 2324                                           l1057 210C  
                                         l2017 572E                                           l2025 5722  
                                         l2114 561C                                           l3010 241C  
                                         l1082 3F2C                                           l1058 1F4E  
                                         l1146 5064                                           l2106 5E78  
                                         l2026 5726                                           l2018 570A  
                                         l2042 38F8                                           l2034 38C0  
                                         l2115 55DE                                           l3011 23FE  
                                         l3003 2370                                           l1059 1F78  
                                         l2027 572A                                           l2035 38C6  
                                         l2140 5A4A                                           l3004 2380  
                                         l1084 3F34                                           l2108 5E64  
                                         l2036 38CC                                           l3013 246A  
                                         l3005 23A8                                           l1077 3EFC  
                                         l2045 3924                                           l2037 38D2  
                                         l1254 6622                                           l3014 245A  
                                         l1158 5F80                                           l2070 4E28  
                                         l2062 4DE4                                           l2054 4DAA  
                                         l2038 38D8                                           l3007 23C0  
                                         l1079 3F0C                                           l2135 4548  
                                         l2047 3938                                           l2039 38DE  
                                         l2311 5C28                                           l2304 4150  
                                         l1280 4F5E                                           l3008 23B0  
                                         l2152 57F4                                           l2305 417C  
                                         l2306 41A8                                           l3018 2490  
                                         l2066 4E0A                                           l2058 4DC4  
                                         l2314 5C44                                           l2154 57FA  
                                         l2330 0A1E                                           l2410 3AA2  
                                         l1283 4FC0                                           l3019 24E2  
                                         l2163 5D96                                           l2091 2C1E  
                                         l2411 3AA8                                           l1276 4F46  
                                         l2092 2BD8                                           l2156 581C  
                                         l2340 0C66                                           l2332 0AE0  
                                         l2404 3A8A                                           l2333 0A3E  
                                         l2325 0902                                           l2405 3B36  
                                         l1294 4F00                                           l1630 35EA  
                                         l2094 2C4E                                           l2350 0D60  
                                         l2318 4FF4                                           l2406 3A90  
                                         l1295 4EC6                                           l1631 3646  
                                         l2095 2C32                                           l2319 4FE0  
                                         l2335 0A76                                           l2327 09A4  
                                         l1296 4F2A                                           l1632 362A  
                                         l2440 25D4                                           l2360 0ED4  
                                         l2352 0E00                                           l2328 09D4  
                                         l2408 3A96                                           l1297 4ED0  
                                         l2097 2D1E                                           l2353 0E30  
                                         l2409 3A9C                                           l1298 4ED4  
                                         l1730 5E98                                           l2434 2582  
                                         l2098 2C62                                           l2338 0BB6  
                                         l1299 4ED8                                           l1627 3692  
                                         l2435 251E                                           l2427 2502  
                                         l2099 2CAA                                           l2355 0E7C  
                                         l1724 5FCC                                           l1732 5EC0  
                                         l1628 3688                                           l2620 4232  
                                         l2444 262A                                           l2436 2536  
                                         l2428 2516                                           l2348 0D2C  
                                         l1629 3608                                           l2621 4226  
                                         l2445 2688                                           l2429 2546  
                                         l2437 2540                                           l2365 1088  
                                         l2357 0F3E                                           l1726 5FFA  
                                         l2446 2630                                           l2438 25BA  
                                         l2366 0FEE                                           l2358 0E9C  
                                         l2374 3A5A                                           l1735 64F6  
                                         l2375 3A10                                           l2800 42D2  
                                         l2296 479E                                           l2624 4268  
                                         l2368 1026                                           l2392 3544  
                                         l2801 42C2                                           l2625 4276  
                                         l2617 41F2                                           l2385 344A  
                                         l2298 47D0                                           l2626 428A  
                                         l2618 4208                                           l2386 348E  
                                         l1827 3350                                           l2387 3476  
                                         l2804 432C                                           l1828 3370  
                                         l2805 433E                                           l2397 3570  
                                         l1784 31EA                                           l1873 6070  
                                         l1785 31F8                                           l2681 374C  
                                         l2690 379E                                           l2682 3738  
                                         l1787 3202                                           l2940 10BC  
                                         l2853 51EA                                           l2941 10EA  
                                         l2854 51DE                                           l2950 11CA  
                                         l2942 10E0                                           l2863 591A  
                                         l2951 12CC                                           l2687 3778  
                                         l2679 36CA                                           l2864 590E  
                                         l2960 1304                                           l2952 1248  
                                         l2944 111A                                           l2688 3768  
                                         l2857 5220                                           l2953 1280  
                                         l2945 1148                                           l2858 522E  
                                         l2970 1436                                           l2954 1274  
                                         l2946 113E                                           l2867 5944  
                                         l2971 143A                                           l2955 12C8  
                                         l2868 5952                                           l2948 119C  
                                         l2980 009C                                           l2965 1372  
                                         l2981 00B4                                           l2958 1318  
                                         l2982 00DC                                           l2974 001E  
                                         l2967 13C2                                           l2959 12EE  
                                         l2975 0048                                           l2968 13F0  
                                         l2976 0042                                           l2969 1426  
                                         l2993 03BE                                           l2977 005A  
                                         l2986 0364                                           l2978 0078  
                                         l2995 040E                                           l2987 033A  
                                         l2979 00A2                                           l2996 0434  
                                         l2988 0350                                           l2998 0462  
                                         l2999 048C                                 ??_Console_Init 00BA  
                        Port_SetPinType@pInput 00E0                                           STR_1 FFFB  
                                         STR_2 FF59                                           STR_3 FFFB  
                                         STR_4 FF95                                           STR_5 FFFB  
                                         STR_6 FF95                                           STR_7 FFFB  
                                         STR_8 FFED                                           STR_9 FFFB  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 4A0A                       __end_of_irobot_song_play 661A  
                                         u9000 5920                                           _PIR1 000F9E  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u9100 57C4                            __end_of_GetPortTRIS 48BE  
                                         u9025 6660                                           u9026 6662  
                                         u9230 5C82                                           u9304 4CE0  
                                         u9080 3CE8                                           u9305 4CDA  
                                         u9250 5AFC                                           u9090 579A  
                                         u9235 5C7C                                           u9180 4238  
                                         u9510 33BC                                           u9430 5670  
                                         u9370 42D8                                           u9530 617A  
                                         u8804 5850                                           u8820 50DC  
                                         u8805 584A                                           u8814 5882  
                                         u8815 587C                                           u9535 6174  
                                         u8760 4B72                                           u8850 5E2C  
                                         _SPI1 0378                                           u8780 4BD8  
                                         u8940 4D84                                           u9660 5E58  
                                         _SPI2 0383                                           u8950 4D8A  
                                         u8855 5E26                                           u8767 4B68  
                                         u9495 3308                                           u9760 531C  
                                         u8785 4BD2                                           u9825 148C  
                                         u8970 51F0                                           u9738 316C  
                                         u8874 4478                                           u8875 4472  
                                         u9835 14A4                                           u8884 44AA  
                                         u9940 3F76                                           u8885 44A4  
                                         u9845 14BC                                           u9950 3F82  
                                         u9855 14DE                                           u9688 3030  
                                         _TMR0 000FD6                                           u9689 3044  
                                         u9865 165E                                           u9875 16DC  
                                         u9885 171E                                           u9990 50B2  
                                         u9895 1760                                           u9985 5074  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 00BF  
                                         _gISR 0060                             Event_DIPSwitch@Bar 00D4  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 00BD  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 00C9                                           _dist 0069  
                                ?_Byte_SetByte 00BA                                  ?_Byte_SetPair 00C5  
                              __end_of_SPI_DCS 61EE                                           _main 3A86  
                   irobot_leds@powerLuminosity 00CC                                           _init 4772  
                                         _mode 0073                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 00C5                                           _itos 3C3E  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 00BA  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 51C0                                  ??_Byte_SetBit 00BE  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 00BF                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 00CB                              Timer0_Init@DIVIDE 00D1  
                              ?_SPI_DisableISR 00BA                               Motor_Move@pMotor 00BD  
                          HMI_SetButton@pValue 00C0                                  Console_Init@x 00BC  
                                Console_Init@y 00BD                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FEFF                           Set_Rotation@rotation 00C0  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 63B2  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 5AC2  
                             __end_of_LCD_Init 301E                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 58FA  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F5  
                      GetPortProperties@pInput 00BC                                  ??_Button_Poll 00D8  
                             __end_of_HMI_Init 2326                                          l12215 4D36  
                                        l12209 4D26                                          l13131 5300  
                                        l12343 3CE8                                          l13127 52F2  
                                        l14015 1F6E                                          l14051 5F4E  
                                        l13421 31EA                                          l13353 3EF2  
                                        l12395 43F6                                          l12491 5AD6  
                                        l12645 5632                                          l12653 5670  
                                        l14253 25DA                                          l12727 3350  
                                        l12647 5644                                          l13359 3F02  
                                        l13391 505C                                          l14337 2F3C  
                                        l12489 5AC4                                          l14347 2FE0  
                                        l14365 4E50                                          l14359 4E40  
                                        l16313 0AE0                                          l14387 22F8  
                                        l13933 5A92                                          l12973 6684  
                                        l13669 1426                               __end_of_HMI_Poll 547E  
                                        l13937 5AA0                                          l16443 0E9C  
                                        l16339 0C92                                          l13973 2AF2  
                                        l16461 0F3E                                          l16295 0A3E  
                                        l16477 0FEE                                          _I2C1T 0040  
                                        _I2C2T 03CA                                  ___fltol@sign1 00F7  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___fldiv 145E                                __end_of___awdiv 4294  
                        irobot_rotate@isScript 00D7                                          ?_itos 00C6  
                                        STR_10 FF0D                                          STR_11 FFFB  
                                        STR_12 FFD8                                          STR_13 FFC3  
                                        STR_14 FFC3                                          STR_15 FFC3  
                                        STR_16 FFC3                                __end_of___flmul 04A6  
                              __end_of___fltol 37B0                                _Event_DIPSwitch 624E  
                              __end_of___lldiv 4350                                          u10030 3256  
                                        u10060 35C8                                          u11100 2616  
                                        u11020 57E8                                          u10070 35DC  
                                        u10310 136C                                          u10080 361C  
                                        u11120 2694                                          u11210 2ECC  
                                        u10340 13D6                                          u10500 03B8  
                                        u10350 1404                                          u11150 36EA  
                                        u10440 00C8                                          u11250 2FE0  
                                        u10530 0422                                          u10450 02DC  
                                        u11155 36DE                        __size_of_HMI_LeftSwitch 0018  
                                        u10540 0448                                          u10620 2478  
                              ___awdiv@divisor 00BC                                          u11190 3782  
                                        u10455 02D0                                          u11280 4EB2  
                                        u11370 5C1C                                          u10900 5CFE  
                                        u10740 5ABC                                          u11380 5C3E  
                                        u10718 3EAA                                          u10830 20F4  
                                        u14030 0F52                                          u10770 2B92  
                                        u14130 34A4                                          u10934 61A6  
                                        u14230 3564                                          u10935 61A0  
                                        u14170 34C4                                          u11828 412C  
                                        u11829 4140                                          u11848 4158  
                                        u13800 0AF4                                          u11849 416C  
                                        u11868 4184                                          u11869 4198  
                                        u13718 5F96                                          u13830 0BCA  
                                        u13719 5FAC                                          u13831 0BC8  
                                        u11888 41B0                                          u11889 41C4  
                                        u13850 0C7C                                          u13860 0C92  
                                        _INDEX 008D                                __end_of___lwdiv 5238  
                                        _MASKS FD0F                                __end_of___lwmod 595C  
                                        i2l430 46E0                                          i2l432 4706  
                                        i2l433 4730                                          i2l427 4756  
                                        i2l732 5284                                          i2l733 527E  
                                        i2l832 5F06                                          i2l781 623C  
                              ___awdiv@counter 00BE                            ?_irobot_init_song_0 0001  
                                        _PORTA 000F80                                          _PORTB 000F81  
                                        _PORTC 000F82                                          _PORTD 000F83  
                                        _PORTE 000F84                                          _PORTF 000F85  
                                        _PORTG 000F86                        __size_of_HMI_DownSwitch 0018  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TRISD 000F95  
                                        _TRISE 000F96                                          _TRISF 000F97  
                                        _TRISG 000F98                               ??i2_Byte_GetPair 000D  
                             ??i2_Byte_GetZone 0006                             Port_TogglePin@pPin 00D0  
                              __end_of_getMode 41D6                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03B6                                          _PortB 03AC  
                                        _PortC 00A5                                          _PortD 009B  
                                        _PortE 0091                                          _PortF 03C0  
                                        _PortG 03A2                        __end_of_Port_SetPinType 2876  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 00C6  
                        ??_irobot_led_power_on 00CE                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 00CF                                __end_of_dpowers FD0F  
                               ??_Byte_GetZone 00BF                      irobot_move@moveTurnRadius 00CC  
                                        _mode1 0CCA                                          _mode2 39A0  
                                        _mode3 65F0                                          _mode4 3444  
                               Button_Poll@Pin 00DD                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 4116                               __end_of_MXK_Init 2EAC  
                     __size_of_sort_iRBumpDrop 008C                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 6664  
                             __end_of_SPI_Init 08C4                               __end_of_SPI_Send 555A  
                        __end_ofi2_MXK_Release 674A                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 55C6  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 00BD  
                            __end_of_ADC_Start 4FC6                                 ??_Byte_SetPair 00C9  
                               ??_Byte_SetQuad 00C9                                          plusw2 000FDB  
                               ??_Byte_SetZone 00C0                                          status 000FD8  
                                        wtemp6 0052                         __size_of_ADC_Calibrate 0014  
                              _Configure_GPIOs 547E                                _findClosestWall 08C4  
                         i2MXK_Queue@pCallback 0001                                    i2delay_us@u 0003  
                         ??_irobot_init_song_0 00BB                                 _LCD_Word_Write 640E  
                          __size_of_LED_Toggle 0048                            __size_of_HMI_GetBar 0006  
                                ?_HMI_UpSwitch 0001                                     _Event_NULL 1404  
                  __size_of_Port_CheckPairType 006A                                    mode1@moveto 03F6  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 00CA  
                                 ?_irobot_init 0001                                __initialization 4570  
                          __size_of_HMI_Render 003E                                   ?_irobot_move 00CA  
                          __end_of_Byte_GetBit 618C                         irobot_leds@powerColour 00CB  
                                 __end_of_main 3B66                                   __end_of_init 4818  
             irobot_query_and_update@packetIDs 00CF                                   __end_of_itos 3D16  
                         HMI_SetButton@reindex 00BC                                   SPI_Send9@dat 002D  
                          __end_of_Byte_SetBit 5898                               __end_of_InitList FCE5  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 6664  
                                    ??_ADC_Off 00BA                        __end_of_update_distance 6640  
                  __size_of_Port_CheckPortType 0048                                    HMI_Render@a 00C2  
                                       ??_main 03FC                                         ??_init 00F9  
                                       ??_itos 00CA                        _Console_MakeField$10974 00C8  
                                __activetblptr 000003                              Port_SetPin@pInput 00C9  
                            __end_of_LCD_Reset 5BB4                              Port_SetPin@pValue 00CC  
                                    ??_LED_Set 00CF                              _MXK_InitDIPSwitch 6468  
                            GetPortPORT@pInput 00BC                         Port_CheckPairType@Pin1 00E4  
                       Port_CheckPairType@Pin2 00E5                              __end_of_LCD_Write 636E  
                                  _GetPortPORT 4964                                   ?i2_MXK_Queue 0001  
                                  _GetPortTRIS 4818                                ??_LCD_DrawField 00D6  
                   __end_of_PortProperty_Valid 5146                               __end_of_Port_Set 1818  
                                  ?i2_delay_us 0001               __size_of_Console_IncrementCursor 0066  
                          __end_of_Button_Init 3EC0                            __end_of_Button_Poll 3184  
                            Word_GetPair@pPair 00C8                        LCD_FillRectangle@pPoint 00C5  
                           ?_MXK_InitDIPSwitch 0001                                  _HMI_SetButton 4C84  
                                    ??_SPI_DCS 00BC                                         ?_mode1 0001  
                                       ?_mode2 0001                                         ?_mode3 0001  
                                       ?_mode4 0001                             _angleToClosestWall 006B  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                       _ADC_On 6732                                  _HMI_SetNumber 62D4  
                       Port_SetQuadType@Output 00F4                                         _ANCON0 000FC1  
                             ___awdiv@dividend 00BA                                         ?_putch 0001  
                             ??_Console_Render 00DD                                  ToSegment@pCHR 00BA  
                             _Console_FormFeed 4D14                         Port_SetQuadType@pInput 00F0  
                                       i2l1630 3816                                         i2l1631 3862  
                                       i2l1632 384E                                         i2l1730 6134  
                                       i2l1627 389E                                         i2l1732 6154  
                                       i2l1628 3894                                         i2l1629 382C  
                                       i2l1590 145E                                 __CFG_WDTEN$OFF 000000  
                          __size_of_ISR_Enable 000A                                         i2l9641 5F16  
                                       i2l9639 5F06                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 642C  
                               _Timer0_Restart 66D0                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 00F5                                         _TXREG1 000FAE  
                             __end_of___xxtofl 24F4                                 i2_MXK_SwitchTo 6122  
                                       _TXSTA1 000FAD                                Byte_GetBit@pBit 00BC  
                                   _Reset_High 644A                             Console_Render@temp 00DF  
                               ??_HMI_UpSwitch 00C0                                 OutSeg@pSegment 00BD  
                              ??i2_Timer0_Stop 0001                            Port_TogglePin@Value 00D1  
                       ADC_SetChannel@pChannel 00BB                               __end_of_delay_ms 569A  
                                 LED_Init@pLED 00E7                               __end_of_delay_us 5B14  
                                ??_Timer0_Init 00CB                                  ??_Timer2_Init 00CB  
                                ??_Timer0_Stop 00BA                                     _Timer0_ISR 627C  
                     __size_of_Console_NewLine 00A2                              Timer2_Init@DIVIDE 00D4  
                               __CFG_XINST$OFF 000000                                         _TimerX 00F9  
                                       _OutSeg 5048                       __size_of_HMI_InitButtons 0006  
                                   _Motor_Init 3D16                     __end_of_load_iRScriptStack 5630  
                                   _Motor_Move 60B2                                         _iRWall 0035  
                                ??_Motor_Speed 00D9                                     _Motor_Step 357E  
                          rx_assign@byteNumber 00BC                        __end_of_Event_DIPSwitch 627C  
                                       ___wmul 60EC                                ??_HMI_DIPSwitch 00C0  
                load_iRScriptStack@bytesToLoad 00C8                                      ??___fldiv 00C2  
                                    ??___awdiv 00BE                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                                      ??___flmul 00D0  
                                       _lMotor 007F                                      ??___fltol 0100  
                                    ??___lldiv 00C2                                         _lQueue 0063  
                                   _TestButton 0398                                      ??___lwdiv 00BE  
                           __size_of_ToSegment 0284                                      ??___lwmod 00C5  
                     __end_of_Port_SetQuadType 1CF2                       i2Byte_GetZone@pChunkSize 0005  
                             __end_of_safeToGo 5C4A                                   HMI_GRender@a 002B  
                         __end_of_Console_Init 4EB8                              GetPortTRIS@pInput 00BC  
                           __size_of_Reset_Low 001E                                         clear_0 45D8  
                                       clear_1 45EA                                         clear_2 45F6  
                                       clear_3 4602                                         clear_4 460E  
                             ___awdiv@quotient 00C0                     irobot_stop_motion@isScript 00D3  
                                ?_eusart_getch 0001                                     Port_Init@i 0106  
                                   _iRDistance 0079                              __end_of_MXK_Queue 66AA  
                   __end_ofHMI_SetButton@F7213 FD1C                                      ??_getMode 00DE  
                                   _iRBumpLeft 0087                                         _printf 24F4  
                                   _iRBumpDrop 0036                      __end_of_MXK_InitDIPSwitch 6486  
                                _ADC_Calibrate 661A                                     _iRDropLeft 0085  
                               HMI_SetButton@v 00C1                                  ?_eusart_putch 0001  
                       HMI_SetSegments@pString 00BB                                    _Console_Tab 4054  
                          LCD_Word_Write@value 00BF                                   __pdataCOMRAM 0047  
                           __size_of_Port_Init 0192                                  ??_Port_GetPin 00BD  
                     Port_CheckPortType@Output 00F3                                      ?_ADC_Init 00BE  
                           _twos_complement_of 5E3E                                ??i2_Port_SetPin 0014  
                                 __mediumconst FC32                    __end_ofTimer2_Init@PRESCALE FD1F  
                     Port_CheckPortType@pDrive 00F2                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 00F0                                  ??_Port_SetPin 00CD  
                                    ??_reverse 00BE                                     _StepRotate 0071  
                        Console_MakeField@Fill 0464                               ?_Port_SetPinType 00E0  
                                       putch@c 00CE                              Motor_Speed@pMotor 00D5  
                               ?_HMI_SetNumber 00D0                                 i2_Word_GetPair 621E  
                      __end_of_Configure_GPIOs 54EE                            irobot_leds@isScript 00CD  
                      __end_of_findClosestWall 0CCA                               ??_MXK_TestButton 00C0  
                       __end_of_Timer0_Restart 66DC                                  Set_Rotation@m 00BF  
                                 ?_MXK_Release 0001                            ?_twos_complement_of 00BA  
                __size_of_irobot_move_straight 0018                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 6158                                   ___xxtofl@arg 00C4  
                                 i2delay_us@us 0001                                   ___xxtofl@exp 00C3  
                                 ___xxtofl@val 00BA                          _update_bump_and_cliff 6078  
                              ?_LCD_Word_Write 00BF                                     __accesstop 0060  
                      __end_of__initialization 4614                                      ?_LCD_Fill 00C3  
        irobot_query_and_update@packetVariable 00D3                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 00EC                                    _Byte_GetBit 6158  
                                   _Stepstomin 006F                                      ?_LED_Init 0001  
                     __end_ofi2_Timer0_Restart 66E8                                      ?_HMI_Init 0001  
                            ??_Set_Addr_Window 00C2                                      ?_HMI_Poll 0001  
             __size_of_irobot_query_and_update 0186                                  ___rparam_used 000001  
                            ??_sort_iRBumpDrop 00BA                                     ___fltol@f1 00F3  
                                  _Byte_SetBit 5834                                  __end_of_MASKS FD18  
                               _PortA_Property FF0B                                    ?_Event_NULL 0001  
                                    LCD_Fill@i 00C5                                      LCD_Fill@j 00C6  
                          load_iRScriptStack@i 00C9                                      LCD_Init@i 00F1  
                               __pcstackCOMRAM 0001                                 _PortB_Property FF09  
                          __size_ofi2_delay_us 0040                                   __pidataBANK0 671E  
                                 __pidataBANK3 66B8              irobot_move_straight@straightSpeed 00D3  
                          i2Byte_SetBit@pInput 0001                           __end_of_Byte_GetPair 64C2  
                              Console_Render@x 00E4                                Console_Render@y 00E5  
                          i2Byte_SetBit@pValue 0004                                  ?_Set_Rotation 0001  
                          Timer0_Init@PRESCALE FCE5                           __end_of_Byte_GetZone 4BEC  
                                __end_of_mode1 109E                                  __end_of_mode2 3A86  
                                __end_of_mode3 6606                                  __end_of_mode4 357E  
                         ??_twos_complement_of 00BC                              irobot_leds@LEDBit 00CA  
                               _PortC_Property FF07                            __end_of_Timer0_Init 32E4  
                                __end_of_putch 6672                                 ??_eusart_getch 00BA  
                                    ?_MXK_Init 0001                            __end_of_Timer2_Init 3444  
                          __end_of_Timer0_Stop 672C                                 ?_ADC_Calibrate 0001  
                                    ?_SPI_Init 00E7                               ?_update_distance 0001  
                                    ?_SPI_Send 00BA                                 ??_eusart_putch 00BA  
                                  _Button_Init 3DEC                              Port_SetType@pType 00F6  
                                  _Button_Poll 301E                           __end_of_Byte_SetByte 669C  
                         __end_of_Byte_SetPair 6390                                 _HMI_LeftSwitch 65C0  
                               _PortD_Property FF05                           __end_of_Byte_SetQuad 63B2  
                                 ??_LED_Toggle 00D2                                   ??_HMI_GetBar 00BA  
                   eusart_putch@eusartSendChar 00BA                           __end_of_Byte_SetZone 44C0  
                          __end_of_Motor_Speed 62D4                                 _HMI_DownSwitch 6578  
                                SPI_Send@pData 00BC                          __end_of_MXK_DIPSwitch 6560  
                                 ??_HMI_SetBar 00BA                       __size_of_get_packet_size 0066  
                                 ??_HMI_Render 00C2                                 _PortE_Property FF03  
                                   ??_ADC_Init 00C1                       __size_of_HMI_SetSegments 00BA  
                       __end_ofi2_Word_GetPair 624E                                 _PortF_Property FF01  
                      Port_CheckQuadType@Pair1 00ED                        Port_CheckQuadType@Pair2 00EE  
                     MXK_BlockSwitchTo@pModule 00C1                                        ??_mode1 03F4  
                                      ??_mode2 00E6                                        ??_mode3 00DE  
                                      ??_mode4 00F9                                        ?_ADC_On 0001  
                            _Console_Backspace 595C                                ?_Timer0_Restart 0001  
                                      ??_putch 00CE                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5EC4                              __end_of_ToSegment 1A9C  
                               _PortG_Property FEFF                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5E3E                             _irobot_stop_motion 5D6C  
                      Port_CheckQuadType@pQuad 00EB                                reverse@iterator 00BF  
                             ??_SPI_DisableISR 00BC                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 644A                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C5  
                                   ??_LCD_Init 00EF                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 4054                         __end_of_PortA_Property FF0D  
             irobot_led_power_on@powerOnColour 00CE                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00BA                                     ??_LED_Init 00E7  
                     ADC_ClockDivision@pDivide 00BA                             Byte_SetByte@pValue 00BC  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 5CDC                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00F5                             ??_irobot_song_play 00BB  
                                   ??_HMI_Poll 00DE                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E7                         __end_of_PortB_Property FF0B  
                                ?_Timer0_Start 00BA                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2BA6                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00E2                             __end_of_LED_Toggle 5D6C  
                           __end_of_HMI_GetBar 673E                       LCD_FillRectangle@pColour 00C3  
                                   _angleTotal 0075                            ??_Console_Backspace 00BC  
                            Set_Addr_Window@xe 00C0                              Set_Addr_Window@ye 00C1  
                            Set_Addr_Window@xs 00C2                              Set_Addr_Window@ys 00BF  
                                      ?_OutSeg 00BD                                    ?_Motor_Init 00E7  
                           Byte_SetPair@pInput 00C5                                    ?_Motor_Move 00BD  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 00C8  
                           __end_of_HMI_SetBar 6706                         __end_of_PortC_Property FF09  
                           Word_GetPair@pInput 00C6                             __end_of_HMI_Render 5F82  
                               ??_Set_Rotation 00BF                                      ?_Port_Set 00C9  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 00BA  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 00BF  
                                 ??_ISR_Enable 00BA                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 65D8                         __end_of_PortD_Property FF07  
                                      _ADC_AN0 00B5                                        _ADC_AN1 03DB  
                                      _ADC_AN2 03D6                                        _ADC_AN3 03D1  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00BA  
                            _Console_MakeField 3EC0                                        _ADC_Off 6716  
                            ??_Console_NewLine 00BA                       ADC_ClockDivision@unfound 00BC  
                       __end_of_HMI_DownSwitch 6590                                     ??_SPI_Init 00ED  
                       Event_TestButton@pState 00D3                                     ??_SPI_Send 00BD  
                                      ?_printf 00CF                              ??_HMI_InitButtons 00BA  
                   __size_of_MXK_InitDIPSwitch 001E                       __size_of_move_and_rotate 0082  
                       __end_of_PortE_Property FF05                            Console_Render@F6956 03E8  
                           ?_Console_MakeField 00BF                                        _COUNTER 0029  
                              ??_HMI_SetButton 00BA                           __end_of_HMI_UpSwitch 65A8  
                         ??_irobot_stop_motion 00D3                                        _LED_Set 5B14  
                      _Console_IncrementCursor 576A                                      ?___xxtofl 00BA  
                       __end_of_PortF_Property FF03                                    _gBackcolour 0083  
                              ??_HMI_SetNumber 00D2                                      _I2C1_Done 0337  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0334  
                                    _I2C1_More 0331                                      _I2C2_More 032E  
                                    ?_delay_ms 00BA                      __end_of_Console_Backspace 59B8  
                                    ?_delay_us 00BA                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 64A4                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 00BA  
                       __end_of_PortG_Property FF01                            ??_Console_MakeField 00C1  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 006D  
                                      _SPI_DCS 61BE                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 00BA                               ?_Configure_GPIOs 0001  
                             ?_findClosestWall 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 0064  
                             ADC_Init@pChannel 00C0                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00E5                             __end_of_ISR_Enable 66FC  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 00BA                              Event_TestButton@j 0089  
                                    ?_safeToGo 0001                                     ??_Mode_Set 00BA  
                               ??_Timer2_Clear 00BA                                        _Font5x7 FD1F  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 00BB  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 00BD                           SPI_DisableISR@pInput 00BA  
                                ?_Port_GetQuad 00BA                                Byte_SetBit@pBit 00BC  
                         Port_TogglePin@pInput 00CE                          __end_ofi2_Byte_SetBit 5C00  
                                    _ADC_Start 4F42                                        __Hparam 0000  
                            Port_GetQuad@pQuad 00BC                                    _Timer0_Init 3184  
                                  _Timer2_Init 32E4                                        __Lparam 0000  
                                  _Timer0_Stop 6726                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD05  
                                      _iRAngle 033C                                  LCD_Write@mode 00BD  
                              __size_of_OutSeg 0082                                     ??_Port_Set 00CC  
                    __end_of_Console_MakeField 3F90                              _Console_PrintChar 2876  
                                  _Motor_Speed 62AA                                        _Stepper 00AF  
                                ?_Port_SetType 00F4                                        _gCursor 0047  
                                      ___fldiv 109E                                        ___awdiv 41D6  
                        ??_Console_ClearCursor 00BA                                        ___flmul 0000  
                                      ___fltol 36A4                                        _lBuffer 04AA  
                                      ___lldiv 4294                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 00BA                                        ___lwdiv 51C0  
                                      ___lwmod 58FA                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4DA2                             ?_Console_PrintChar 0001  
                                      __pcinit 4570                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 4116  
                                      __ptext0 3A86                                        __ptext1 3444  
                                      __ptext2 08C4                                        __ptext3 65F0  
                                      __ptext4 4FC6                                        __ptext5 57D0  
                                      __ptext6 39A0                                        __ptext7 6530  
                                      __ptext8 0CCA                                        __ptext9 5C00  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 64DE                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD05                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00CE                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00D3                                     ??___xxtofl 00BE  
                                 ?_GetPortPORT 00BA                                   ?_GetPortTRIS 00BA  
                          ??_Console_PrintChar 00CA                                    _Port_GetPin 5DF8  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03E4  
                          LCD_DrawRectangle@p4 03E0                                   ??i2_delay_us 0003  
                                   ??_delay_ms 00BC                                     ??_delay_us 00BC  
                                      _reverse 555A                                      _DIPSwitch 038E  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 3F90  
                                  _iRBumpRight 0088                                 LCD_DrawField@i 00DC  
                                    _LCD_Reset 5B64                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 634C                                    _iRDropRight 0086  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 00BA  
                         end_of_initialization 4614                            ADC_SetupIO@pChannel 00BC  
                            ??_get_packet_size 00BA  irobot_query_and_update@numberOfPacketRequests 00D2  
                                   delay_us@us 00BA                              ??_HMI_SetSegments 00BD  
                      Console_PrintChar@pInput 00CD                                   _Console_Init 4E2E  
                         __end_of_eusart_getch 670E                        _irobot_query_and_update 2BA6  
                                   ??_safeToGo 00DE                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 5704                           __end_of_eusart_putch 668E  
                                      itos@Out 00CE                                 ??_Port_GetQuad 00BD  
                           _PortProperty_Valid 50CA                             Byte_SetQuad@pInput 00C5  
                           SPI_MinSpeed@pInput 00C9                             Byte_SetQuad@pValue 00C8  
                          __end_of_ADC_SetupIO 61BE                          __size_of_Byte_GetPair 001E  
                                    i2u1388_48 6294                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 00BE                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 00BC                              ??_HMI_RightSwitch 00C0  
                              ___lldiv@counter 00C6                      __end_of_Console_PrintChar 2A14  
                          __end_of_ADC_Voltage 3C3E                                 ??_Port_SetType 00F7  
                   __end_of_Port_CheckQuadType 5A12                                        printf@c 00E2  
                                      printf@f 00CF                                 Port_Init@pPort 0103  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 00C3                              __end_of_rx_assign 39A0  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00C9                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 5CDC                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 5F44                             Button_Init@pInitIO 0104  
                                _irobot_rotate 57D0                          Timer0_Init@pFrequency 00C7  
                            ?_Port_SetQuadType 00F0                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00BE                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00F4  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00C0  
                        Console_Render@lCursor 00E0                             _load_iRScriptStack 55C6  
                                    _MXK_Queue 669C                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 00C2                               Byte_GetZone@pMax 00BC  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00C6                                _Set_Addr_Window 461E  
                               SPI_Init@pClock 00E7                               ??_LCD_Word_Write 00C1  
                              _sort_iRBumpDrop 4DA2                              ??_move_and_rotate 00D8  
                                  ___fldiv@grs 00CD                                    ___fldiv@rem 00C7  
                        __end_of_LCD_DrawField 4AAE                                 Port_Set@pInput 00C9  
                               SPI_Init@pInput 00ED                           ??_PortProperty_Valid 00CD  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00CB  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 4C84  
                                   ?_LCD_Write 00BD                                   _Byte_GetPair 64A4  
                           HMI_SetButton@F7213 FD18                            ?_load_iRScriptStack 00BA  
                                 _Byte_GetZone 4B50                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00DA                              LCD_DrawField@ymax 00DB  
                               __end_of_ADC_On 6738                                 _Port_TogglePin 61EE  
                             _Event_TestButton 603C                                    ___flmul@grs 00D6  
                         Port_SetPinType@Props 00E5                                   ?_Byte_GetBit 00BA  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 668E  
                                 _Byte_SetPair 636E                                ADC_SetupIO@MASK 00BD  
                                 _Byte_SetQuad 6390                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 440A                           Port_SetPinType@pType 00E3  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00BA  
                                ?_SPI_MaxSpeed 00C9                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00BA                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C9  
                        __end_ofi2_Timer0_Stop 6744                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D3  
                               __end_of_OutSeg 50CA                           ??_load_iRScriptStack 00C4  
                 __end_of_irobot_move_straight 6548                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 6122                          __end_of_HMI_DIPSwitch 6578  
                                __pidataCOMRAM 66E8                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D5                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 66D0                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 6716                                 __end_of_printf 26B6  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00BA  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C6  
                             ??_Timer0_Restart 00BA                           __end_of_Timer0_Start 634C  
                           Port_SetType@Output 0100                            start_initialization 4570  
                                   ?_MXK_Queue 00BA                       PortProperty_Valid@Errors 00CF  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 52AE  
                           Port_SetType@pInput 00F4                                 _ADC_SetChannel 64FA  
                                   HMI_Init@in 00F5                            HMI_SetNumber@pInput 00D0  
                        __end_ofi2_Port_SetPin 4772                             __end_of_Event_NULL 1406  
                       rx_assign@packetIDValue 00BB                         __end_of_Port_TogglePin 621E  
                                ?_Word_SetPair 00C9                              Byte_SetBit@pInput 00BA  
                                     ??_ADC_On 00BA                                 ??_MXK_SwitchTo 00C0  
                            Byte_SetBit@pValue 00BD                             ?_LCD_FillRectangle 00C3  
                    ??_irobot_query_and_update 00CA                            _Console_ResetCursor 63D2  
                  PortProperty_Valid@pPinDrive 00CB                                    _ADC_SetupIO 618C  
                         MXK_BlockSwitchTo@CUR 00C0                       PortProperty_Valid@pInput 00C9  
                                i2_MXK_Release 6744                                    _ADC_Voltage 3B66  
                       LCD_FillRectangle@pSize 00C9                                 SPI_Send@pInput 00BA  
                                 ??_Reset_High 00CE                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 00CB                          Port_SetQuadType@pQuad 00F2  
                                    _ToSegment 1818                            ??_LCD_FillRectangle 00CD  
                        Port_SetQuadType@pType 00F3                                _Console_NewLine 4AAE  
                               ??_SPI_MinSpeed 00CB                                    ??_ADC_Start 00BE  
                                 _HMI_UpSwitch 6590                                      _Reset_Low 642C  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 672C  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 00D7                                 ADC_Init@pInput 00BE  
                                    _gCharSize 03F0                               Timer2_Init@INDEX 008B  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 00EB                                       ??_OutSeg 00BE  
                                    OutSeg@out 00C1                        __size_of_Console_Render 0210  
                                 ??_Motor_Move 00C1                                   ??_Motor_Step 00CE  
                                    _iRAngleSS 031E                                      _iRCliffFL 0033  
                                    _iRCliffFR 0032                             Byte_SetZone@Offset 00C3  
                                     ??___wmul 00BE                           ?_Console_ResetCursor 0001  
                                    _Port_Init 2A14                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03E8                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 00BD                                       ?_ADC_Off 0001  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 00BA  
                           Byte_SetZone@pValue 00BF                                  Mode_Set@pMode 00BA  
                                     ??_printf 00DB                        __end_of_Set_Addr_Window 46C8  
                     Port_CheckQuadType@Output 00EF                        __end_of_sort_iRBumpDrop 4E2E  
                                    _gLineSize 03EC                       Port_CheckQuadType@pDrive 00EC  
                               ??_Word_GetPair 00C9                       Port_CheckQuadType@pInput 00E9  
                         __end_of_Port_GetQuad 5C94                                      ___fldiv@a 00BE  
                                    ___fldiv@b 00BA                      __end_of_LCD_FillRectangle 5322  
                                  __pbssBIGRAM 04AA                         __end_of_ADC_SetChannel 6516  
                                     ?_LED_Set 00CE                                      ___flmul@a 00CC  
                                    ___flmul@b 00C8                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 00BC                             __end_of_Reset_High 6468  
                                __pcstackBANK0 00BA                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03F4  
                      ??_update_bump_and_cliff 00D7                                     itos@Length 00CC  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CD  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 62AA                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00D3                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1F1C                                       ?_SPI_DCS 00BA  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00CE  
                                ??_eusart_init 00BA                                    ??_LCD_Write 00BE  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 3DEC                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 60EC                             __end_of_Motor_Step 36A4  
                        Timer2_Init@pFrequency 00C7                                 ?i2_MXK_Release 0001  
                     Port_CheckPairType@Output 00E6              twos_complement_of@complementValue 00BA  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 00E3  
                     Port_CheckPairType@pInput 00E0                                 reverse@tempVar 00BE  
                           _MXK_InitTestButton 6486                                     ?_Reset_Low 0001  
                            __size_of_safeToGo 004A                                   ?_Timer0_Init 00C7  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 00C7  
                             ??_HMI_LeftSwitch 00C0                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 00BA                                  ??_irobot_leds 00CD  
                                ??_irobot_init 00BB                                ??_irobot_rotate 00D7  
                                ??_irobot_move 00CE                                  _lStepFunction 0066  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 00C7  
                             ??_HMI_DownSwitch 00C0                                      __pintcode 1408  
                                __pmediumconst FC32                                   ?_Motor_Speed 00D5  
                        ??_Console_ResetCursor 00BA                                       ?___fldiv 00BA  
                                     ?___awdiv 00BA                                      __ptext100 670E  
                                    __ptext101 62FE                                      __ptext110 636E  
                                    __ptext102 61BE                                      __ptext111 59B8  
                                    __ptext103 3DEC                                      __ptext120 64FA  
                                    __ptext112 569A                                      __ptext104 6468  
                                    __ptext121 5CDC                                      __ptext113 50CA  
                                    __ptext105 672C                                      __ptext130 6560  
                                    __ptext122 4EB8                                      __ptext114 6390  
                                    __ptext106 6486                                      __ptext131 6578  
                                    __ptext123 661A                                      __ptext115 440A  
                                    __ptext107 26B6                                      __ptext140 62D4  
                                    __ptext132 6590                                      __ptext124 6732  
                                    __ptext116 4E2E                                      __ptext108 1A9C  
                                    __ptext141 3C3E                                      __ptext133 65A8  
                                    __ptext125 6716                                      __ptext117 4F42  
                                    __ptext109 5DB2                                      __ptext150 3F90  
                                    __ptext142 555A                                      __ptext134 65C0  
                                    __ptext126 4116                                      __ptext118 5146  
                                    __ptext151 5FFE                                      __ptext143 58FA  
                                    __ptext135 65D8                                      __ptext127 540A  
                                    __ptext119 618C                                      __ptext160 37B0  
                                    __ptext152 64A4                                      __ptext144 51C0  
                                    __ptext136 5C4A                                      __ptext128 301E  
                                    __ptext161 673E                                      __ptext153 4B50  
                                    __ptext145 4350                                      __ptext137 624E  
                                    __ptext129 6548                                      __ptext170 6744  
                                    __ptext162 66DC                                      __ptext154 5834  
                                    __ptext146 1818                                      __ptext138 1404  
                                    __ptext171 66AA                                      __ptext163 46C8  
                                    __ptext155 5DF8                                      __ptext147 4C84  
                                    __ptext139 603C                __end_of_irobot_query_and_update 2D2C  
                                    __ptext172 0000                                      __ptext164 621E  
                                    __ptext156 66FC                                      __ptext148 5D24  
                                    __ptext165 6516                                      __ptext157 6738  
                                    __ptext149 61EE                                      __ptext166 5238  
                                    _pShiftVal 007B                                      __ptext167 5BB4  
                                    __ptext159 627C                                      __ptext168 6122  
                                    __ptext169 5F04                                       ?___flmul 00C8  
                                     ?___fltol 00F3                                       ?___lldiv 00BA  
                                   ?_Port_Init 0101                           Timer0_Init@pCPUClock 00CD  
                                     ?___lwdiv 00BA                                       ?___lwmod 00C1  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 48BE                                       ?_getMode 0001  
                                 _eusart_getch 6706                    __end_ofTimer0_Init@PRESCALE FCF5  
                              _get_packet_size 5704                                   _eusart_putch 6680  
                           ??_Console_FormFeed 00BA                                _HMI_SetSegments 4350  
                           ?_GetPortProperties 00BA                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00BD                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00BA                                       _ADC_Init 5146  
                        __end_of_HMI_SetButton 4D14                           __size_of_Console_Tab 00C2  
                                     ?_reverse 00BA                           irobot_move@moveSpeed 00CA  
                                 ?_Port_SetPin 00C9                          __end_of_HMI_SetNumber 62FE  
                             ___lwdiv@quotient 00BF                                _HMI_RightSwitch 65A8  
                  __size_of_ADC_ConversionTime 0048                                 __size_of_mode1 03D4  
                               __size_of_mode2 00E6                                 __size_of_mode3 0016  
                               __size_of_mode4 013A                            ??_GetPortProperties 00BC  
                      __end_of_Console_NewLine 4B50                           ??_MXK_InitTestButton 00E7  
                           Byte_GetPair@pInput 00C3                                 __size_of_putch 000E  
                      __end_of_HMI_InitButtons 6732                              i2Port_SetPin@Type 0014  
                         _irobot_move_straight 6530                              i2Port_SetPin@pPin 0012  
                               i2_Byte_GetPair 6516                                       _LCD_Fill 5A6A  
                                     _LCD_Init 2EAC                                 ___wmul@product 00BE  
                                     _HMIBoard 033E                                 i2_Byte_GetZone 5238  
                                     _LED_Init 5898                                      delay_ms@u 00BC  
                           Button_Poll@pButton 00D5                                      delay_us@u 00BC  
                                     _HMI_Init 212C                                       _HMI_Poll 540A  
                           MXK_Queue@pCallback 00BA                                       _IPR1bits 000F9F  
                                     _IPR3bits 000FA5                                       _PIE1bits 000F9D  
                          __end_of_eusart_init 640E                                       _PIE3bits 000FA3  
                  __end_of_Console_ClearCursor 5F04                       __size_of_Configure_GPIOs 0070  
                     __size_of_findClosestWall 0406                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 00C7                                       i2u505_40 525A  
                                     _PIR1bits 000F9E                                       i2u505_47 5250  
                                     i2u507_40 52A2                                       i2u507_45 529E  
                                     _PIR3bits 000FA4                                       i2u635_44 5BC8  
                                     i2u635_45 5BC4                                       i2u636_44 5BEE  
                                     i2u636_45 5BEA                                       i2u639_40 5F32  
                                     i2u736_40 37F4                                       i2u737_40 3808  
                                     i2u738_40 3840                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 000D  
                                  _mode1$15594 03F8                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 00BB                               HMI_SetBar@pValue 00BA  
                            Button_Init@pInput 0100                        __size_of_SPI_DisableISR 0028  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 00E4  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                        __size_of_Timer0_Clear 000C                                       _SSP1STAT 000FC7  
                    __end_of_GetPortProperties 4964                                       _SSP2STAT 000F6D  
                                 _Set_Rotation 4BEC                          __size_of_Timer2_Clear 0008  
                         __end_of_MXK_SwitchTo 5EC4                             _Port_CheckPairType 569A  
                                     _MXK_Init 2D2C                          __size_of_Timer0_Start 0026  
                              _move_and_rotate 4FC6                                MXK_SwitchTo@CUR 00C0  
                        __end_of_ADC_Calibrate 662E                            __end_of_irobot_leds 5A6A  
                                     _SPI_Init 04A6                            __end_of_irobot_init 6680  
                     __end_of_Event_TestButton 6078                                       _SPI_Send 54EE  
                          __end_of_irobot_move 4570                                      _rx_assign 38B0  
                                   _ADCON0bits 000FC2                               __size_of_ADC_Off 0008  
                                   _ADCON1bits 000FC1                               ?_Set_Addr_Window 00BF  
                            ___wmul@multiplier 00BA                               ?_sort_iRBumpDrop 0001  
                            Byte_GetBit@Output 00BE                                     printf@flag 00DD  
                         Timer2_Init@pCPUClock 00D0                     __size_of_LCD_FillRectangle 0074  
                         __size_of_Button_Init 00D4                           __end_of_SPI_MaxSpeed 5396  
                                   printf@prec 00DC                          Motor_Speed@pFrequency 00D7  
                            Byte_GetBit@pInput 00BA                            Port_SetPinType@pPin 00E2  
                         __size_of_Button_Poll 0166                                  _MXK_DIPSwitch 6548  
                           _Port_CheckQuadType 59B8                            ?_Port_CheckPairType 00E0  
                         __end_of_SPI_MinSpeed 540A                                  ??_MXK_Dequeue 00D0  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 5C94                           __end_of_update_angle 6652  
                        Button_Poll@pIncrement 00D7                        PortProperty_Valid@F6830 FCF5  
                         __end_ofi2_Motor_Step 38B0                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 4584  
                                    copy_data1 45A4                                      copy_data2 45C4  
                                ??_MXK_Release 00BA                         __end_ofi2_Byte_GetPair 6530  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 00E9                          ?_irobot_move_straight 00D3  
                       __end_ofi2_Byte_GetZone 52AE                            __end_ofi2_MXK_Queue 66B8  
                                    mode2@dist 00E6                            ?_Port_CheckPortType 00F0  
                              itos@destination 00C8                                       _InitList FC33  
                   __end_of_irobot_init_song_0 63D2                           _Motor_Step$intlevel0 3584  
                                     _Mode_Set 6652                             Port_GetQuad@Output 00BF  
                            ??_update_distance 00D7                                    ??_ToSegment 00BA  
                                 _ISR_Function 1408                                   _Timer0_Clear 66C4  
                           Port_GetQuad@pInput 00BA                                   _Timer2_Clear 670E  
                         __end_of_Word_GetPair 603C                                       _lCBuffer 0300  
                         ??_Port_CheckPairType 00E4                                    ??_Reset_Low 00CE  
                                     __Hrparam 0000                                   _Timer0_Start 6326  
                                 OutSeg@pInput 00C0                                 _Console_Render 1F1C  
                                     __Lrparam 0000                                Timer2_Init@RDIV 00CC  
                                     _iRCliffL 0034                                       _iRCliffR 0031  
                               LCD_Write@value 00BE                                       _Port_Set 145E  
                                 OutSeg@segset 003E                                      rand@screw 003B  
                         __end_of_Word_SetPair 5DF8                        __end_of_get_packet_size 576A  
                                  ??_Port_Init 0104                        __end_of_HMI_SetSegments 440A  
                         ??_Port_CheckQuadType 00ED                               __size_of___fldiv 03C0  
                             _irobot_song_play 6606                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___flmul 04A6  
                             __size_of___fltol 010C                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 5FC0                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 00F3                               __size_of___lwmod 0062  
                                     _lBufferX 008F                                       _lBufferY 008E  
                          Timer2_Init@PRESCALE FD1C                          _findClosestWall$15593 0106  
                                   ?_rx_assign 00BB                                LCD_Fill@pColour 00C3  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 0081                               __size_of_getMode 00C0  
                      __end_of_HMI_RightSwitch 65C0                         Byte_GetZone@pChunkSize 00BE  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 00BE  
                        __size_of_Port_SetType 022A                                  reverse@length 00BC  
                                    itos@input 00C6                          i2MXK_SwitchTo@pModule 0008  
                                     ___xxtofl 2326                            irobot_move@isScript 00D2  
                           Motor_Init@pAddress 00E9                                       _delay_ms 5630  
                                     _delay_us 5AC2                                       _clearall 0090  
                              ___lwdiv@divisor 00BC                                ___lwdiv@counter 00BE  
                              Port_GetPin@pPin 00BC                                       __ptext10 662E  
                                     __ptext11 6078                                       __ptext20 5E3E  
                                     __ptext12 6640                                       __ptext21 6606  
                                     __ptext13 2BA6                                       __ptext30 63D2  
                                     __ptext22 24F4                                       __ptext14 38B0  
                                     __ptext31 595C                                       __ptext23 6664  
                                     __ptext15 4DA2                                       __ptext40 52AE  
                                     __ptext32 5EC4                                       __ptext24 2876  
                                     __ptext16 5704                                       __ptext41 4A0A  
                                     __ptext33 36A4                                       __ptext25 4054  
                                     __ptext17 6706                                       __ptext50 64C2  
                                     __ptext42 60EC                                       __ptext34 62AA  
                                     __ptext26 41D6                                       __ptext18 5D6C  
                                     __ptext51 5A12                                       __ptext43 3EC0  
                                     __ptext35 60B2                                       __ptext27 576A  
                                     __ptext19 44C0                                       __ptext60 2D2C  
                                     __ptext52 55C6                                       __ptext44 6158  
                                     __ptext36 6326                                       __ptext28 4AAE  
                                     __ptext61 2A14                                       __ptext53 63B2  
                                     __ptext45 3B66                                       __ptext37 5F44  
                                     __ptext29 4D14                                       __ptext70 5B14  
                                     __ptext62 1CF2                                       __ptext54 6672  
                                     __ptext46 2326                                       __ptext38 5048  
                                     __ptext71 5F82                                       __ptext63 5C94  
                                     __ptext55 6680                                       __ptext47 0000  
                                     __ptext39 1F1C                            ??_MXK_BlockSwitchTo 00C0  
                                     __ptext80 2EAC                                       __ptext72 357E  
                                     __ptext64 145E                                       __ptext56 63F0  
                                     __ptext48 109E                                       __ptext81 4BEC  
                                     __ptext73 6726                                       __ptext65 668E  
                                     __ptext57 3D16                                       __ptext49 4772  
                                     __ptext90 5B64                                       __ptext82 5A6A  
                                     __ptext74 66D0                                       __ptext66 4818  
                                     __ptext58 3184                                       __ptext91 5630  
                                     __ptext83 461E                                       __ptext75 5E82  
                                     __ptext67 48BE                                       __ptext59 66C4  
                                     __ptext92 642C                                       __ptext84 640E  
                                     __ptext76 64DE                                       __ptext68 4964  
                                     __ptext93 644A                                       __ptext85 634C  
                                     __ptext77 669C                                       __ptext69 5898  
                                     __ptext94 66F2                                       __ptext86 54EE  
                                     __ptext78 5FC0                                       __ptext95 212C  
                                     __ptext87 6652                                       __ptext79 5AC2  
                                     __ptext96 5396                                       __ptext88 547E  
                                     __ptext97 04A6                                       __ptext89 5322  
                                     __ptext98 32E4                                       __ptext99 4294  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 4EB8  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 63F0  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 00D3                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00E1  
                          __end_of_MXK_Dequeue 5FC0                              HMI_SetSegments@in 00BE  
                        Button_Init@pThreshold 0102                                       _safeToGo 5C00  
                                __size_of_main 00E0                                  __size_of_init 00A6  
                                __size_of_itos 00D8                              Byte_GetPair@pPair 00C5  
                       __end_of_Console_Render 212C                            i2Port_SetPin@pInput 0010  
                          i2Port_SetPin@pValue 0013                                   _Port_GetQuad 5C4A  
                          __end_of_MXK_Release 64FA                                 _MXK_TestButton 65D8  
                                i2_Byte_SetBit 5BB4                        __end_of_move_and_rotate 5048  
                          ??_ADC_ClockDivision 00BA                                   _iRDistanceSS 0322  
                                  _irobot_leds 5A12                                    _irobot_init 6672  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 44C0  
                               ADC_Voltage@max 00E7                                 ADC_Voltage@ref 00EB  
                    __end_of_MXK_BlockSwitchTo 5FFE                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 1CF2                                   Port_Set@Type 00E0  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002F                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 00EF                              ??_findClosestWall 0104  
                                    printf@val 00E0                                   _SSP1STATbits 000FC7  
                         __size_of_Motor_Speed 002A                                 Timer0_Init@DIV 032A  
                               Timer0_Init@PRE 008C                                   _SSP2STATbits 000F6D  
                                   _LED_Toggle 5D24                                     _HMI_GetBar 6738  
                         Button_Init@pGetState 0107                         PortProperty_Valid@Pair 00DF  
                             ??_Port_TogglePin 00D1                                    _OSCTUNEbits 000F9B  
                                   _INTCONbits 000FF2                         PortProperty_Valid@pPin 00CC  
                                   _HMI_SetBar 66FC                                     _HMI_Render 5F44  
                             Byte_SetZone@MASK 00C4                                    i2_MXK_Queue 66AA  
                    __end_of_ADC_ClockDivision 4F42                                 Timer2_Init@DIV 0326  
                               Timer2_Init@PRE 008A                               Byte_SetZone@pMax 00BC  
                       __size_ofi2_Timer0_Stop 0006                           __size_of_Port_GetPin 0046  
                       ??_irobot_move_straight 00D5                 __size_of_update_bump_and_cliff 003A  
                         Button_Init@pFunction 010A                                       itos@Data 00CA  
                __end_of_update_bump_and_cliff 60B2                             LCD_FillRectangle@i 00CF  
                           LCD_FillRectangle@j 00D0                           __size_of_Port_SetPin 00C4  
                                     intlevel2 0000                                   reverse@input 00BA  
                       __size_of_HMI_DIPSwitch 0018                               ___lwmod@dividend 00C1  
                             ___lldiv@dividend 00BA                         __end_of_MXK_TestButton 65F0  
                              ?_Console_Render 0001                                  _iRScriptIndex 0037  
                      __size_of_LCD_Word_Write 001E                                 ?i2_Byte_SetBit 0001  
                                _iRScriptStack 0400                          __size_of_MXK_SwitchTo 0042  
                     irobot_query_and_update@i 00D6                       irobot_query_and_update@j 00D4  
                               _SPI_DisableISR 62FE                     __end_of_twos_complement_of 5E82  
                     irobot_rotate@rotateAngle 00D3                                Port_Init@pInput 0101  
                                     printf@ap 00DE                               ?_get_packet_size 0001  
                       __size_ofi2_Port_SetPin 00AA                       irobot_rotate@rotateSpeed 00D5  
                                   _ISR_Enable 66F2                               ?_HMI_SetSegments 00BB  
                      Console_MakeField@Column 00C6                          __size_of_SPI_MaxSpeed 0074  
                             ??_ADC_SetChannel 00BA                                  SPI_DCS@pInput 00BA  
                        __size_of_SPI_MinSpeed 0074                                ??_MXK_DIPSwitch 00C0  
                                  ??_rx_assign 00BD                          __size_of_update_angle 0012  
                        __size_ofi2_Motor_Step 0100                              ADC_Voltage@pInput 00E1  
                      Console_MakeField@pInput 00C5                               ?_HMI_RightSwitch 0001  
                             ___lldiv@quotient 00C2                                  ??_GetPortPORT 00BC  
                              ___lwmod@divisor 00C3                                  ??_GetPortTRIS 00BC  
                        Timer0_Start@pFunction 00BA                             Word_SetPair@pInput 00C9  
                              ___lwmod@counter 00C5                             Word_SetPair@pValue 00CC  
                     ?_irobot_query_and_update 00C0                               Motor_Init@pMotor 00E7  
                                  _MXK_Dequeue 5F82                              ADC_Voltage@output 00EF  
                                _distanceTotal 0077                                 LED_Toggle@pLED 00D2  
                                _LCD_DrawField 4A0A                               _Port_SetQuadType 1A9C  
                                  _MXK_Release 64DE                      __size_of_Console_FormFeed 008E  
                                 _MXK_SwitchTo 5E82                          __size_of_Word_GetPair 003E  
            irobot_query_and_update@startIndex 00D5                             Byte_GetZone@Offset 00C1  
                                ?_Console_Init 0001                              Word_SetPair@pPair 00CB  
                              _Port_SetPinType 26B6                        __size_of_Timer0_Restart 000C  
                           Byte_GetZone@Output 00C2                             Byte_GetZone@pChunk 00BD  
                              ?_MXK_TestButton 0001                    __end_of_Console_ResetCursor 63F0  
                           Byte_GetZone@pInput 00BA                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 57D0                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 6326                                   _SPI_MaxSpeed 5322  
            irobot_query_and_update@streamSize 00D1                                   _SPI_MinSpeed 5396  
                           Port_Set@TypeActual 00DE                               ?_move_and_rotate 0001  
