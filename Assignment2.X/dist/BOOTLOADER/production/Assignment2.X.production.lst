

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Sep 16 21:50:20 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1,inline
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1,inline
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1,inline
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   196                           	psect	text172,global,reloc=2,class=CODE,delta=1
   197                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   198                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   199  0000                     
   200                           ; Version 1.43
   201                           ; Generated 25/07/2017 GMT
   202                           ; 
   203                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   204                           ; All rights reserved.
   205                           ; 
   206                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   207                           ; 
   208                           ; Redistribution and use in source and binary forms, with or without modification, are
   209                           ; permitted provided that the following conditions are met:
   210                           ; 
   211                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   212                           ;        conditions and the following disclaimer.
   213                           ; 
   214                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   215                           ;        of conditions and the following disclaimer in the documentation and/or other
   216                           ;        materials provided with the distribution.
   217                           ; 
   218                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   219                           ;        software without specific prior written permission.
   220                           ; 
   221                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   222                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   223                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   224                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   225                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   226                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   227                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   228                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   229                           ; 
   230                           ; 
   231                           ; Code-generator required, PIC18F67J50 Definitions
   232                           ; 
   233                           ; SFR Addresses
   234  0000                     
   235                           	psect	idataCOMRAM
   236  01676C                     __pidataCOMRAM:
   237                           	opt stack 0
   238                           
   239                           ;initializer for _gCursor
   240  01676C  0006               	dw	6
   241  01676E  0006               	dw	6
   242                           
   243                           ;initializer for _Bus_State
   244  016770  01                 	db	1
   245                           
   246                           ;initializer for _A
   247  016771  41                 	db	65
   248                           
   249                           ;initializer for _a
   250  016772  61                 	db	97
   251                           
   252                           ;initializer for _zero
   253  016773  30                 	db	48
   254                           
   255                           ;initializer for _l
   256  016774  80                 	db	128
   257                           
   258                           ;initializer for _w
   259  016775  80                 	db	128
   260                           
   261                           	psect	idataBANK0
   262  0167A2                     __pidataBANK0:
   263                           	opt stack 0
   264                           
   265                           ;initializer for _TimerX
   266  0167A2  0008               	dw	8
   267                           
   268                           ;initializer for _MinDist
   269  0167A4  03E8               	dw	1000
   270                           
   271                           ;initializer for _gForecolour
   272  0167A6  FFFF               	dw	65535
   273                           
   274                           ;initializer for _change
   275  0167A8  01                 	db	1
   276                           
   277                           	psect	idataBANK3
   278  01673C                     __pidataBANK3:
   279                           	opt stack 0
   280                           
   281                           ;initializer for Console_Render@F6956
   282  01673C  0006               	dw	6
   283  01673E  0006               	dw	6
   284                           
   285                           ;initializer for _gLineSize
   286  016740  0080               	dw	128
   287  016742  0007               	dw	7
   288                           
   289                           ;initializer for _gCharSize
   290  016744  0005               	dw	5
   291  016746  0007               	dw	7
   292                           
   293                           	psect	mediumconst
   294  00FC32                     __pmediumconst:
   295                           	opt stack 0
   296  00FC32  00                 	db	0
   297  00FC33                     _InitList:
   298                           	opt stack 0
   299  00FC33  1100               	dw	4352
   300  00FC35  0080               	dw	128
   301  00FC37  012C               	dw	300
   302  00FC39  B100               	dw	45312
   303  00FC3B  0002               	dw	2
   304  00FC3D  0035               	dw	53
   305  00FC3F  0036               	dw	54
   306  00FC41  B200               	dw	45568
   307  00FC43  0002               	dw	2
   308  00FC45  0035               	dw	53
   309  00FC47  0036               	dw	54
   310  00FC49  B300               	dw	45824
   311  00FC4B  0002               	dw	2
   312  00FC4D  0035               	dw	53
   313  00FC4F  0036               	dw	54
   314  00FC51  0002               	dw	2
   315  00FC53  0035               	dw	53
   316  00FC55  0036               	dw	54
   317  00FC57  B400               	dw	46080
   318  00FC59  0000               	dw	0
   319  00FC5B  C000               	dw	49152
   320  00FC5D  00A2               	dw	162
   321  00FC5F  0002               	dw	2
   322  00FC61  0084               	dw	132
   323  00FC63  C100               	dw	49408
   324  00FC65  00C5               	dw	197
   325  00FC67  C200               	dw	49664
   326  00FC69  000D               	dw	13
   327  00FC6B  0000               	dw	0
   328  00FC6D  C300               	dw	49920
   329  00FC6F  008D               	dw	141
   330  00FC71  002A               	dw	42
   331  00FC73  C400               	dw	50176
   332  00FC75  008D               	dw	141
   333  00FC77  00EE               	dw	238
   334  00FC79  C500               	dw	50432
   335  00FC7B  000A               	dw	10
   336  00FC7D  3600               	dw	13824
   337  00FC7F  00C8               	dw	200
   338  00FC81  E000               	dw	57344
   339  00FC83  0012               	dw	18
   340  00FC85  001C               	dw	28
   341  00FC87  0010               	dw	16
   342  00FC89  0018               	dw	24
   343  00FC8B  0033               	dw	51
   344  00FC8D  002C               	dw	44
   345  00FC8F  0025               	dw	37
   346  00FC91  0028               	dw	40
   347  00FC93  0028               	dw	40
   348  00FC95  0027               	dw	39
   349  00FC97  002F               	dw	47
   350  00FC99  003C               	dw	60
   351  00FC9B  0000               	dw	0
   352  00FC9D  0003               	dw	3
   353  00FC9F  0003               	dw	3
   354  00FCA1  0010               	dw	16
   355  00FCA3  0080               	dw	128
   356  00FCA5  0078               	dw	120
   357  00FCA7  E100               	dw	57600
   358  00FCA9  0012               	dw	18
   359  00FCAB  001C               	dw	28
   360  00FCAD  0010               	dw	16
   361  00FCAF  0018               	dw	24
   362  00FCB1  002D               	dw	45
   363  00FCB3  0028               	dw	40
   364  00FCB5  0023               	dw	35
   365  00FCB7  0028               	dw	40
   366  00FCB9  0028               	dw	40
   367  00FCBB  0026               	dw	38
   368  00FCBD  002F               	dw	47
   369  00FCBF  003B               	dw	59
   370  00FCC1  0000               	dw	0
   371  00FCC3  0003               	dw	3
   372  00FCC5  0003               	dw	3
   373  00FCC7  0010               	dw	16
   374  00FCC9  3A00               	dw	14848
   375  00FCCB  0005               	dw	5
   376  00FCCD  2A00               	dw	10752
   377  00FCCF  0000               	dw	0
   378  00FCD1  0002               	dw	2
   379  00FCD3  0000               	dw	0
   380  00FCD5  0081               	dw	129
   381  00FCD7  2B00               	dw	11008
   382  00FCD9  0000               	dw	0
   383  00FCDB  0003               	dw	3
   384  00FCDD  0000               	dw	0
   385  00FCDF  00A2               	dw	162
   386  00FCE1  2900               	dw	10496
   387  00FCE3  2C00               	dw	11264
   388  00FCE5                     __end_of_InitList:
   389                           	opt stack 0
   390  00FCE5                     Timer0_Init@PRESCALE:
   391                           	opt stack 0
   392  00FCE5  0002               	dw	2
   393  00FCE7  0004               	dw	4
   394  00FCE9  0008               	dw	8
   395  00FCEB  0010               	dw	16
   396  00FCED  0020               	dw	32
   397  00FCEF  0040               	dw	64
   398  00FCF1  0080               	dw	128
   399  00FCF3  0100               	dw	256
   400  00FCF5                     __end_ofTimer0_Init@PRESCALE:
   401                           	opt stack 0
   402  00FCF5                     PortProperty_Valid@F6830:
   403                           	opt stack 0
   404  00FCF5  00                 	db	0
   405  00FCF6  01                 	db	1
   406  00FCF7  02                 	db	2
   407  00FCF8  00                 	db	0
   408  00FCF9  01                 	db	1
   409  00FCFA  00                 	db	0
   410  00FCFB  01                 	db	1
   411  00FCFC  00                 	db	0
   412  00FCFD  02                 	db	2
   413  00FCFE  02                 	db	2
   414  00FCFF  00                 	db	0
   415  00FD00  00                 	db	0
   416  00FD01  03                 	db	3
   417  00FD02  03                 	db	3
   418  00FD03  03                 	db	3
   419  00FD04  00                 	db	0
   420  00FD05                     __end_ofPortProperty_Valid@F6830:
   421                           	opt stack 0
   422  00FD05                     _dpowers:
   423                           	opt stack 0
   424  00FD05  0001               	dw	1
   425  00FD07  000A               	dw	10
   426  00FD09  0064               	dw	100
   427  00FD0B  03E8               	dw	1000
   428  00FD0D  2710               	dw	10000
   429  00FD0F                     __end_of_dpowers:
   430                           	opt stack 0
   431  00FD0F                     _MASKS:
   432                           	opt stack 0
   433  00FD0F  00                 	db	0
   434  00FD10  01                 	db	1
   435  00FD11  03                 	db	3
   436  00FD12  07                 	db	7
   437  00FD13  0F                 	db	15
   438  00FD14  1F                 	db	31
   439  00FD15  3F                 	db	63
   440  00FD16  7F                 	db	127
   441  00FD17  FF                 	db	255
   442  00FD18                     __end_of_MASKS:
   443                           	opt stack 0
   444  00FD18                     HMI_SetButton@F7213:
   445                           	opt stack 0
   446  00FD18  00                 	db	0
   447  00FD19  02                 	db	2
   448  00FD1A  01                 	db	1
   449  00FD1B  03                 	db	3
   450  00FD1C                     __end_ofHMI_SetButton@F7213:
   451                           	opt stack 0
   452  00FD1C                     Timer2_Init@PRESCALE:
   453                           	opt stack 0
   454  00FD1C  01                 	db	1
   455  00FD1D  04                 	db	4
   456  00FD1E  10                 	db	16
   457  00FD1F                     __end_ofTimer2_Init@PRESCALE:
   458                           	opt stack 0
   459  00FD1F                     _Font5x7:
   460                           	opt stack 0
   461  00FD1F  00                 	db	0
   462  00FD20  00                 	db	0
   463  00FD21  00                 	db	0
   464  00FD22  00                 	db	0
   465  00FD23  00                 	db	0
   466  00FD24  00                 	db	0
   467  00FD25  00                 	db	0
   468  00FD26  5F                 	db	95
   469  00FD27  00                 	db	0
   470  00FD28  00                 	db	0
   471  00FD29  00                 	db	0
   472  00FD2A  07                 	db	7
   473  00FD2B  00                 	db	0
   474  00FD2C  07                 	db	7
   475  00FD2D  00                 	db	0
   476  00FD2E  14                 	db	20
   477  00FD2F  7F                 	db	127
   478  00FD30  14                 	db	20
   479  00FD31  7F                 	db	127
   480  00FD32  14                 	db	20
   481  00FD33  24                 	db	36
   482  00FD34  2A                 	db	42
   483  00FD35  7F                 	db	127
   484  00FD36  2A                 	db	42
   485  00FD37  12                 	db	18
   486  00FD38  23                 	db	35
   487  00FD39  13                 	db	19
   488  00FD3A  08                 	db	8
   489  00FD3B  64                 	db	100
   490  00FD3C  62                 	db	98
   491  00FD3D  36                 	db	54
   492  00FD3E  49                 	db	73
   493  00FD3F  55                 	db	85
   494  00FD40  22                 	db	34
   495  00FD41  50                 	db	80
   496  00FD42  00                 	db	0
   497  00FD43  05                 	db	5
   498  00FD44  03                 	db	3
   499  00FD45  00                 	db	0
   500  00FD46  00                 	db	0
   501  00FD47  00                 	db	0
   502  00FD48  1C                 	db	28
   503  00FD49  22                 	db	34
   504  00FD4A  41                 	db	65
   505  00FD4B  00                 	db	0
   506  00FD4C  00                 	db	0
   507  00FD4D  41                 	db	65
   508  00FD4E  22                 	db	34
   509  00FD4F  1C                 	db	28
   510  00FD50  00                 	db	0
   511  00FD51  08                 	db	8
   512  00FD52  2A                 	db	42
   513  00FD53  1C                 	db	28
   514  00FD54  2A                 	db	42
   515  00FD55  08                 	db	8
   516  00FD56  08                 	db	8
   517  00FD57  08                 	db	8
   518  00FD58  3E                 	db	62
   519  00FD59  08                 	db	8
   520  00FD5A  08                 	db	8
   521  00FD5B  00                 	db	0
   522  00FD5C  50                 	db	80
   523  00FD5D  30                 	db	48
   524  00FD5E  00                 	db	0
   525  00FD5F  00                 	db	0
   526  00FD60  08                 	db	8
   527  00FD61  08                 	db	8
   528  00FD62  08                 	db	8
   529  00FD63  08                 	db	8
   530  00FD64  08                 	db	8
   531  00FD65  00                 	db	0
   532  00FD66  60                 	db	96
   533  00FD67  60                 	db	96
   534  00FD68  00                 	db	0
   535  00FD69  00                 	db	0
   536  00FD6A  20                 	db	32
   537  00FD6B  10                 	db	16
   538  00FD6C  08                 	db	8
   539  00FD6D  04                 	db	4
   540  00FD6E  02                 	db	2
   541  00FD6F  3E                 	db	62
   542  00FD70  51                 	db	81
   543  00FD71  49                 	db	73
   544  00FD72  45                 	db	69
   545  00FD73  3E                 	db	62
   546  00FD74  00                 	db	0
   547  00FD75  42                 	db	66
   548  00FD76  7F                 	db	127
   549  00FD77  40                 	db	64
   550  00FD78  00                 	db	0
   551  00FD79  42                 	db	66
   552  00FD7A  61                 	db	97
   553  00FD7B  51                 	db	81
   554  00FD7C  49                 	db	73
   555  00FD7D  46                 	db	70
   556  00FD7E  21                 	db	33
   557  00FD7F  41                 	db	65
   558  00FD80  45                 	db	69
   559  00FD81  4B                 	db	75
   560  00FD82  31                 	db	49
   561  00FD83  18                 	db	24
   562  00FD84  14                 	db	20
   563  00FD85  12                 	db	18
   564  00FD86  7F                 	db	127
   565  00FD87  10                 	db	16
   566  00FD88  27                 	db	39
   567  00FD89  45                 	db	69
   568  00FD8A  45                 	db	69
   569  00FD8B  45                 	db	69
   570  00FD8C  39                 	db	57
   571  00FD8D  3C                 	db	60
   572  00FD8E  4A                 	db	74
   573  00FD8F  49                 	db	73
   574  00FD90  49                 	db	73
   575  00FD91  30                 	db	48
   576  00FD92  01                 	db	1
   577  00FD93  71                 	db	113
   578  00FD94  09                 	db	9
   579  00FD95  05                 	db	5
   580  00FD96  03                 	db	3
   581  00FD97  36                 	db	54
   582  00FD98  49                 	db	73
   583  00FD99  49                 	db	73
   584  00FD9A  49                 	db	73
   585  00FD9B  36                 	db	54
   586  00FD9C  06                 	db	6
   587  00FD9D  49                 	db	73
   588  00FD9E  49                 	db	73
   589  00FD9F  29                 	db	41
   590  00FDA0  1E                 	db	30
   591  00FDA1  00                 	db	0
   592  00FDA2  36                 	db	54
   593  00FDA3  36                 	db	54
   594  00FDA4  00                 	db	0
   595  00FDA5  00                 	db	0
   596  00FDA6  00                 	db	0
   597  00FDA7  56                 	db	86
   598  00FDA8  36                 	db	54
   599  00FDA9  00                 	db	0
   600  00FDAA  00                 	db	0
   601  00FDAB  00                 	db	0
   602  00FDAC  08                 	db	8
   603  00FDAD  14                 	db	20
   604  00FDAE  22                 	db	34
   605  00FDAF  41                 	db	65
   606  00FDB0  14                 	db	20
   607  00FDB1  14                 	db	20
   608  00FDB2  14                 	db	20
   609  00FDB3  14                 	db	20
   610  00FDB4  14                 	db	20
   611  00FDB5  41                 	db	65
   612  00FDB6  22                 	db	34
   613  00FDB7  14                 	db	20
   614  00FDB8  08                 	db	8
   615  00FDB9  00                 	db	0
   616  00FDBA  02                 	db	2
   617  00FDBB  01                 	db	1
   618  00FDBC  51                 	db	81
   619  00FDBD  09                 	db	9
   620  00FDBE  06                 	db	6
   621  00FDBF  32                 	db	50
   622  00FDC0  49                 	db	73
   623  00FDC1  79                 	db	121
   624  00FDC2  41                 	db	65
   625  00FDC3  3E                 	db	62
   626  00FDC4  7E                 	db	126
   627  00FDC5  11                 	db	17
   628  00FDC6  11                 	db	17
   629  00FDC7  11                 	db	17
   630  00FDC8  7E                 	db	126
   631  00FDC9  7F                 	db	127
   632  00FDCA  49                 	db	73
   633  00FDCB  49                 	db	73
   634  00FDCC  49                 	db	73
   635  00FDCD  36                 	db	54
   636  00FDCE  3E                 	db	62
   637  00FDCF  41                 	db	65
   638  00FDD0  41                 	db	65
   639  00FDD1  41                 	db	65
   640  00FDD2  22                 	db	34
   641  00FDD3  7F                 	db	127
   642  00FDD4  41                 	db	65
   643  00FDD5  41                 	db	65
   644  00FDD6  22                 	db	34
   645  00FDD7  1C                 	db	28
   646  00FDD8  7F                 	db	127
   647  00FDD9  49                 	db	73
   648  00FDDA  49                 	db	73
   649  00FDDB  49                 	db	73
   650  00FDDC  41                 	db	65
   651  00FDDD  7F                 	db	127
   652  00FDDE  09                 	db	9
   653  00FDDF  09                 	db	9
   654  00FDE0  01                 	db	1
   655  00FDE1  01                 	db	1
   656  00FDE2  3E                 	db	62
   657  00FDE3  41                 	db	65
   658  00FDE4  41                 	db	65
   659  00FDE5  51                 	db	81
   660  00FDE6  32                 	db	50
   661  00FDE7  7F                 	db	127
   662  00FDE8  08                 	db	8
   663  00FDE9  08                 	db	8
   664  00FDEA  08                 	db	8
   665  00FDEB  7F                 	db	127
   666  00FDEC  00                 	db	0
   667  00FDED  41                 	db	65
   668  00FDEE  7F                 	db	127
   669  00FDEF  41                 	db	65
   670  00FDF0  00                 	db	0
   671  00FDF1  20                 	db	32
   672  00FDF2  40                 	db	64
   673  00FDF3  41                 	db	65
   674  00FDF4  3F                 	db	63
   675  00FDF5  01                 	db	1
   676  00FDF6  7F                 	db	127
   677  00FDF7  08                 	db	8
   678  00FDF8  14                 	db	20
   679  00FDF9  22                 	db	34
   680  00FDFA  41                 	db	65
   681  00FDFB  7F                 	db	127
   682  00FDFC  40                 	db	64
   683  00FDFD  40                 	db	64
   684  00FDFE  40                 	db	64
   685  00FDFF  40                 	db	64
   686  00FE00  7F                 	db	127
   687  00FE01  02                 	db	2
   688  00FE02  04                 	db	4
   689  00FE03  02                 	db	2
   690  00FE04  7F                 	db	127
   691  00FE05  7F                 	db	127
   692  00FE06  04                 	db	4
   693  00FE07  08                 	db	8
   694  00FE08  10                 	db	16
   695  00FE09  7F                 	db	127
   696  00FE0A  3E                 	db	62
   697  00FE0B  41                 	db	65
   698  00FE0C  41                 	db	65
   699  00FE0D  41                 	db	65
   700  00FE0E  3E                 	db	62
   701  00FE0F  7F                 	db	127
   702  00FE10  09                 	db	9
   703  00FE11  09                 	db	9
   704  00FE12  09                 	db	9
   705  00FE13  06                 	db	6
   706  00FE14  3E                 	db	62
   707  00FE15  41                 	db	65
   708  00FE16  51                 	db	81
   709  00FE17  21                 	db	33
   710  00FE18  5E                 	db	94
   711  00FE19  7F                 	db	127
   712  00FE1A  09                 	db	9
   713  00FE1B  19                 	db	25
   714  00FE1C  29                 	db	41
   715  00FE1D  46                 	db	70
   716  00FE1E  46                 	db	70
   717  00FE1F  49                 	db	73
   718  00FE20  49                 	db	73
   719  00FE21  49                 	db	73
   720  00FE22  31                 	db	49
   721  00FE23  01                 	db	1
   722  00FE24  01                 	db	1
   723  00FE25  7F                 	db	127
   724  00FE26  01                 	db	1
   725  00FE27  01                 	db	1
   726  00FE28  3F                 	db	63
   727  00FE29  40                 	db	64
   728  00FE2A  40                 	db	64
   729  00FE2B  40                 	db	64
   730  00FE2C  3F                 	db	63
   731  00FE2D  1F                 	db	31
   732  00FE2E  20                 	db	32
   733  00FE2F  40                 	db	64
   734  00FE30  20                 	db	32
   735  00FE31  1F                 	db	31
   736  00FE32  7F                 	db	127
   737  00FE33  20                 	db	32
   738  00FE34  18                 	db	24
   739  00FE35  20                 	db	32
   740  00FE36  7F                 	db	127
   741  00FE37  63                 	db	99
   742  00FE38  14                 	db	20
   743  00FE39  08                 	db	8
   744  00FE3A  14                 	db	20
   745  00FE3B  63                 	db	99
   746  00FE3C  03                 	db	3
   747  00FE3D  04                 	db	4
   748  00FE3E  78                 	db	120
   749  00FE3F  04                 	db	4
   750  00FE40  03                 	db	3
   751  00FE41  61                 	db	97
   752  00FE42  51                 	db	81
   753  00FE43  49                 	db	73
   754  00FE44  45                 	db	69
   755  00FE45  43                 	db	67
   756  00FE46  00                 	db	0
   757  00FE47  00                 	db	0
   758  00FE48  7F                 	db	127
   759  00FE49  41                 	db	65
   760  00FE4A  41                 	db	65
   761  00FE4B  02                 	db	2
   762  00FE4C  04                 	db	4
   763  00FE4D  08                 	db	8
   764  00FE4E  10                 	db	16
   765  00FE4F  20                 	db	32
   766  00FE50  41                 	db	65
   767  00FE51  41                 	db	65
   768  00FE52  7F                 	db	127
   769  00FE53  00                 	db	0
   770  00FE54  00                 	db	0
   771  00FE55  04                 	db	4
   772  00FE56  02                 	db	2
   773  00FE57  01                 	db	1
   774  00FE58  02                 	db	2
   775  00FE59  04                 	db	4
   776  00FE5A  40                 	db	64
   777  00FE5B  40                 	db	64
   778  00FE5C  40                 	db	64
   779  00FE5D  40                 	db	64
   780  00FE5E  40                 	db	64
   781  00FE5F  00                 	db	0
   782  00FE60  01                 	db	1
   783  00FE61  02                 	db	2
   784  00FE62  04                 	db	4
   785  00FE63  00                 	db	0
   786  00FE64  20                 	db	32
   787  00FE65  54                 	db	84
   788  00FE66  54                 	db	84
   789  00FE67  54                 	db	84
   790  00FE68  78                 	db	120
   791  00FE69  7F                 	db	127
   792  00FE6A  48                 	db	72
   793  00FE6B  44                 	db	68
   794  00FE6C  44                 	db	68
   795  00FE6D  38                 	db	56
   796  00FE6E  38                 	db	56
   797  00FE6F  44                 	db	68
   798  00FE70  44                 	db	68
   799  00FE71  44                 	db	68
   800  00FE72  20                 	db	32
   801  00FE73  38                 	db	56
   802  00FE74  44                 	db	68
   803  00FE75  44                 	db	68
   804  00FE76  48                 	db	72
   805  00FE77  7F                 	db	127
   806  00FE78  38                 	db	56
   807  00FE79  54                 	db	84
   808  00FE7A  54                 	db	84
   809  00FE7B  54                 	db	84
   810  00FE7C  18                 	db	24
   811  00FE7D  08                 	db	8
   812  00FE7E  7E                 	db	126
   813  00FE7F  09                 	db	9
   814  00FE80  01                 	db	1
   815  00FE81  02                 	db	2
   816  00FE82  08                 	db	8
   817  00FE83  14                 	db	20
   818  00FE84  54                 	db	84
   819  00FE85  54                 	db	84
   820  00FE86  3C                 	db	60
   821  00FE87  7F                 	db	127
   822  00FE88  08                 	db	8
   823  00FE89  04                 	db	4
   824  00FE8A  04                 	db	4
   825  00FE8B  78                 	db	120
   826  00FE8C  00                 	db	0
   827  00FE8D  44                 	db	68
   828  00FE8E  7D                 	db	125
   829  00FE8F  40                 	db	64
   830  00FE90  00                 	db	0
   831  00FE91  20                 	db	32
   832  00FE92  40                 	db	64
   833  00FE93  44                 	db	68
   834  00FE94  3D                 	db	61
   835  00FE95  00                 	db	0
   836  00FE96  00                 	db	0
   837  00FE97  7F                 	db	127
   838  00FE98  10                 	db	16
   839  00FE99  28                 	db	40
   840  00FE9A  44                 	db	68
   841  00FE9B  00                 	db	0
   842  00FE9C  41                 	db	65
   843  00FE9D  7F                 	db	127
   844  00FE9E  40                 	db	64
   845  00FE9F  00                 	db	0
   846  00FEA0  7C                 	db	124
   847  00FEA1  04                 	db	4
   848  00FEA2  18                 	db	24
   849  00FEA3  04                 	db	4
   850  00FEA4  78                 	db	120
   851  00FEA5  7C                 	db	124
   852  00FEA6  08                 	db	8
   853  00FEA7  04                 	db	4
   854  00FEA8  04                 	db	4
   855  00FEA9  78                 	db	120
   856  00FEAA  38                 	db	56
   857  00FEAB  44                 	db	68
   858  00FEAC  44                 	db	68
   859  00FEAD  44                 	db	68
   860  00FEAE  38                 	db	56
   861  00FEAF  7C                 	db	124
   862  00FEB0  14                 	db	20
   863  00FEB1  14                 	db	20
   864  00FEB2  14                 	db	20
   865  00FEB3  08                 	db	8
   866  00FEB4  08                 	db	8
   867  00FEB5  14                 	db	20
   868  00FEB6  14                 	db	20
   869  00FEB7  18                 	db	24
   870  00FEB8  7C                 	db	124
   871  00FEB9  7C                 	db	124
   872  00FEBA  08                 	db	8
   873  00FEBB  04                 	db	4
   874  00FEBC  04                 	db	4
   875  00FEBD  08                 	db	8
   876  00FEBE  48                 	db	72
   877  00FEBF  54                 	db	84
   878  00FEC0  54                 	db	84
   879  00FEC1  54                 	db	84
   880  00FEC2  20                 	db	32
   881  00FEC3  04                 	db	4
   882  00FEC4  3F                 	db	63
   883  00FEC5  44                 	db	68
   884  00FEC6  40                 	db	64
   885  00FEC7  20                 	db	32
   886  00FEC8  3C                 	db	60
   887  00FEC9  40                 	db	64
   888  00FECA  40                 	db	64
   889  00FECB  20                 	db	32
   890  00FECC  7C                 	db	124
   891  00FECD  1C                 	db	28
   892  00FECE  20                 	db	32
   893  00FECF  40                 	db	64
   894  00FED0  20                 	db	32
   895  00FED1  1C                 	db	28
   896  00FED2  3C                 	db	60
   897  00FED3  40                 	db	64
   898  00FED4  30                 	db	48
   899  00FED5  40                 	db	64
   900  00FED6  3C                 	db	60
   901  00FED7  44                 	db	68
   902  00FED8  28                 	db	40
   903  00FED9  10                 	db	16
   904  00FEDA  28                 	db	40
   905  00FEDB  44                 	db	68
   906  00FEDC  0C                 	db	12
   907  00FEDD  50                 	db	80
   908  00FEDE  50                 	db	80
   909  00FEDF  50                 	db	80
   910  00FEE0  3C                 	db	60
   911  00FEE1  44                 	db	68
   912  00FEE2  64                 	db	100
   913  00FEE3  54                 	db	84
   914  00FEE4  4C                 	db	76
   915  00FEE5  44                 	db	68
   916  00FEE6  00                 	db	0
   917  00FEE7  08                 	db	8
   918  00FEE8  36                 	db	54
   919  00FEE9  41                 	db	65
   920  00FEEA  00                 	db	0
   921  00FEEB  00                 	db	0
   922  00FEEC  00                 	db	0
   923  00FEED  7F                 	db	127
   924  00FEEE  00                 	db	0
   925  00FEEF  00                 	db	0
   926  00FEF0  00                 	db	0
   927  00FEF1  41                 	db	65
   928  00FEF2  36                 	db	54
   929  00FEF3  08                 	db	8
   930  00FEF4  00                 	db	0
   931  00FEF5  08                 	db	8
   932  00FEF6  08                 	db	8
   933  00FEF7  2A                 	db	42
   934  00FEF8  1C                 	db	28
   935  00FEF9  08                 	db	8
   936  00FEFA  08                 	db	8
   937  00FEFB  1C                 	db	28
   938  00FEFC  2A                 	db	42
   939  00FEFD  08                 	db	8
   940  00FEFE  08                 	db	8
   941  00FEFF                     __end_of_Font5x7:
   942                           	opt stack 0
   943  00FEFF                     _PortG_Property:
   944                           	opt stack 0
   945  00FEFF  FC00               	dw	64512
   946  00FF01                     __end_of_PortG_Property:
   947                           	opt stack 0
   948  00FF01                     _PortF_Property:
   949                           	opt stack 0
   950  00FF01  0FFF               	dw	4095
   951  00FF03                     __end_of_PortF_Property:
   952                           	opt stack 0
   953  00FF03                     _PortE_Property:
   954                           	opt stack 0
   955  00FF03  0000               	dw	0
   956  00FF05                     __end_of_PortE_Property:
   957                           	opt stack 0
   958  00FF05                     _PortD_Property:
   959                           	opt stack 0
   960  00FF05  FFFF               	dw	65535
   961  00FF07                     __end_of_PortD_Property:
   962                           	opt stack 0
   963  00FF07                     _PortC_Property:
   964                           	opt stack 0
   965  00FF07  FFF0               	dw	65520
   966  00FF09                     __end_of_PortC_Property:
   967                           	opt stack 0
   968  00FF09                     _PortB_Property:
   969                           	opt stack 0
   970  00FF09  FF00               	dw	65280
   971  00FF0B                     __end_of_PortB_Property:
   972                           	opt stack 0
   973  00FF0B                     _PortA_Property:
   974                           	opt stack 0
   975  00FF0B  00FF               	dw	255
   976  00FF0D                     __end_of_PortA_Property:
   977                           	opt stack 0
   978  0000                     _TMR0	set	4054
   979  0000                     _RCREG1	set	4015
   980  0000                     _TXREG1	set	4014
   981  0000                     _SPBRG1	set	4016
   982  0000                     _TXSTA1bits	set	4013
   983  0000                     _BAUDCON1bits	set	3966
   984  0000                     _RCSTA1	set	4012
   985  0000                     _TXSTA1	set	4013
   986  0000                     _TRISCbits	set	3988
   987  0000                     _PR2	set	4043
   988  0000                     _T2CONbits	set	4042
   989  0000                     _T0CONbits	set	4053
   990  0000                     _RCONbits	set	4048
   991  0000                     _OSCTUNEbits	set	3995
   992  0000                     _PIR3	set	4004
   993  0000                     _PIR2	set	4001
   994  0000                     _PIR1	set	3998
   995  0000                     _INTCONbits	set	4082
   996  0000                     _SSP2CON2bits	set	3947
   997  0000                     _SSP1CON2bits	set	4037
   998  0000                     _SSP1ADD	set	4040
   999  0000                     _ANCON0	set	4033
  1000  0000                     _ADRESL	set	4035
  1001  0000                     _ADRESH	set	4036
  1002  0000                     _ADCON1bits	set	4033
  1003  0000                     _ADCON0bits	set	4034
  1004  0000                     _SSP2CON1bits	set	3948
  1005  0000                     _SSP1CON1bits	set	4038
  1006  0000                     _SSP2STATbits	set	3949
  1007  0000                     _SSP1STATbits	set	4039
  1008  0000                     _PIE3bits	set	4003
  1009  0000                     _PIE1bits	set	3997
  1010  0000                     _PIR3bits	set	4004
  1011  0000                     _PIR1bits	set	3998
  1012  0000                     _IPR3bits	set	4005
  1013  0000                     _IPR1bits	set	3999
  1014  0000                     _PORTFbits	set	3973
  1015  0000                     _SSP2CON2	set	3947
  1016  0000                     _SSP1CON2	set	4037
  1017  0000                     _SSP2BUF	set	3951
  1018  0000                     _SSP2CON1	set	3948
  1019  0000                     _SSP2STAT	set	3949
  1020  0000                     _SSP1BUF	set	4041
  1021  0000                     _SSP1CON1	set	4038
  1022  0000                     _SSP1STAT	set	4039
  1023  0000                     _LATG	set	3983
  1024  0000                     _LATF	set	3982
  1025  0000                     _LATE	set	3981
  1026  0000                     _LATD	set	3980
  1027  0000                     _LATC	set	3979
  1028  0000                     _LATB	set	3978
  1029  0000                     _LATA	set	3977
  1030  0000                     _TRISG	set	3992
  1031  0000                     _TRISF	set	3991
  1032  0000                     _TRISE	set	3990
  1033  0000                     _TRISD	set	3989
  1034  0000                     _TRISC	set	3988
  1035  0000                     _TRISB	set	3987
  1036  0000                     _TRISA	set	3986
  1037  0000                     _PORTG	set	3974
  1038  0000                     _PORTF	set	3973
  1039  0000                     _PORTE	set	3972
  1040  0000                     _PORTD	set	3971
  1041  0000                     _PORTC	set	3970
  1042  0000                     _PORTB	set	3969
  1043  0000                     _PORTA	set	3968
  1044  00FF0D                     STR_10:
  1045  00FF0D  43                 	db	67	;'C'
  1046  00FF0E  6C                 	db	108	;'l'
  1047  00FF0F  6F                 	db	111	;'o'
  1048  00FF10  73                 	db	115	;'s'
  1049  00FF11  65                 	db	101	;'e'
  1050  00FF12  73                 	db	115	;'s'
  1051  00FF13  74                 	db	116	;'t'
  1052  00FF14  20                 	db	32
  1053  00FF15  57                 	db	87	;'W'
  1054  00FF16  61                 	db	97	;'a'
  1055  00FF17  6C                 	db	108	;'l'
  1056  00FF18  6C                 	db	108	;'l'
  1057  00FF19  3A                 	db	58	;':'
  1058  00FF1A  25                 	db	37
  1059  00FF1B  75                 	db	117	;'u'
  1060  00FF1C  0A                 	db	10
  1061  00FF1D  43                 	db	67	;'C'
  1062  00FF1E  6C                 	db	108	;'l'
  1063  00FF1F  6F                 	db	111	;'o'
  1064  00FF20  73                 	db	115	;'s'
  1065  00FF21  65                 	db	101	;'e'
  1066  00FF22  73                 	db	115	;'s'
  1067  00FF23  74                 	db	116	;'t'
  1068  00FF24  20                 	db	32
  1069  00FF25  41                 	db	65	;'A'
  1070  00FF26  6E                 	db	110	;'n'
  1071  00FF27  67                 	db	103	;'g'
  1072  00FF28  6C                 	db	108	;'l'
  1073  00FF29  65                 	db	101	;'e'
  1074  00FF2A  3A                 	db	58	;':'
  1075  00FF2B  25                 	db	37
  1076  00FF2C  64                 	db	100	;'d'
  1077  00FF2D  0A                 	db	10
  1078  00FF2E  4C                 	db	76	;'L'
  1079  00FF2F  65                 	db	101	;'e'
  1080  00FF30  66                 	db	102	;'f'
  1081  00FF31  74                 	db	116	;'t'
  1082  00FF32  20                 	db	32
  1083  00FF33  42                 	db	66	;'B'
  1084  00FF34  75                 	db	117	;'u'
  1085  00FF35  6D                 	db	109	;'m'
  1086  00FF36  70                 	db	112	;'p'
  1087  00FF37  3A                 	db	58	;':'
  1088  00FF38  25                 	db	37
  1089  00FF39  75                 	db	117	;'u'
  1090  00FF3A  0A                 	db	10
  1091  00FF3B  52                 	db	82	;'R'
  1092  00FF3C  69                 	db	105	;'i'
  1093  00FF3D  67                 	db	103	;'g'
  1094  00FF3E  68                 	db	104	;'h'
  1095  00FF3F  74                 	db	116	;'t'
  1096  00FF40  42                 	db	66	;'B'
  1097  00FF41  75                 	db	117	;'u'
  1098  00FF42  6D                 	db	109	;'m'
  1099  00FF43  70                 	db	112	;'p'
  1100  00FF44  3A                 	db	58	;':'
  1101  00FF45  25                 	db	37
  1102  00FF46  75                 	db	117	;'u'
  1103  00FF47  0A                 	db	10
  1104  00FF48  41                 	db	65	;'A'
  1105  00FF49  6E                 	db	110	;'n'
  1106  00FF4A  67                 	db	103	;'g'
  1107  00FF4B  6C                 	db	108	;'l'
  1108  00FF4C  65                 	db	101	;'e'
  1109  00FF4D  54                 	db	84	;'T'
  1110  00FF4E  6F                 	db	111	;'o'
  1111  00FF4F  54                 	db	84	;'T'
  1112  00FF50  75                 	db	117	;'u'
  1113  00FF51  72                 	db	114	;'r'
  1114  00FF52  6E                 	db	110	;'n'
  1115  00FF53  3A                 	db	58	;':'
  1116  00FF54  20                 	db	32
  1117  00FF55  25                 	db	37
  1118  00FF56  64                 	db	100	;'d'
  1119  00FF57  0A                 	db	10
  1120  00FF58  00                 	db	0
  1121  00FF59                     STR_2:
  1122  00FF59  43                 	db	67	;'C'
  1123  00FF5A  6C                 	db	108	;'l'
  1124  00FF5B  6F                 	db	111	;'o'
  1125  00FF5C  73                 	db	115	;'s'
  1126  00FF5D  65                 	db	101	;'e'
  1127  00FF5E  73                 	db	115	;'s'
  1128  00FF5F  74                 	db	116	;'t'
  1129  00FF60  20                 	db	32
  1130  00FF61  57                 	db	87	;'W'
  1131  00FF62  61                 	db	97	;'a'
  1132  00FF63  6C                 	db	108	;'l'
  1133  00FF64  6C                 	db	108	;'l'
  1134  00FF65  3A                 	db	58	;':'
  1135  00FF66  25                 	db	37
  1136  00FF67  75                 	db	117	;'u'
  1137  00FF68  0A                 	db	10
  1138  00FF69  43                 	db	67	;'C'
  1139  00FF6A  6C                 	db	108	;'l'
  1140  00FF6B  6F                 	db	111	;'o'
  1141  00FF6C  73                 	db	115	;'s'
  1142  00FF6D  65                 	db	101	;'e'
  1143  00FF6E  73                 	db	115	;'s'
  1144  00FF6F  74                 	db	116	;'t'
  1145  00FF70  20                 	db	32
  1146  00FF71  41                 	db	65	;'A'
  1147  00FF72  6E                 	db	110	;'n'
  1148  00FF73  67                 	db	103	;'g'
  1149  00FF74  6C                 	db	108	;'l'
  1150  00FF75  65                 	db	101	;'e'
  1151  00FF76  3A                 	db	58	;':'
  1152  00FF77  25                 	db	37
  1153  00FF78  64                 	db	100	;'d'
  1154  00FF79  0A                 	db	10
  1155  00FF7A  4C                 	db	76	;'L'
  1156  00FF7B  65                 	db	101	;'e'
  1157  00FF7C  66                 	db	102	;'f'
  1158  00FF7D  74                 	db	116	;'t'
  1159  00FF7E  20                 	db	32
  1160  00FF7F  42                 	db	66	;'B'
  1161  00FF80  75                 	db	117	;'u'
  1162  00FF81  6D                 	db	109	;'m'
  1163  00FF82  70                 	db	112	;'p'
  1164  00FF83  3A                 	db	58	;':'
  1165  00FF84  25                 	db	37
  1166  00FF85  75                 	db	117	;'u'
  1167  00FF86  0A                 	db	10
  1168  00FF87  52                 	db	82	;'R'
  1169  00FF88  69                 	db	105	;'i'
  1170  00FF89  67                 	db	103	;'g'
  1171  00FF8A  68                 	db	104	;'h'
  1172  00FF8B  74                 	db	116	;'t'
  1173  00FF8C  42                 	db	66	;'B'
  1174  00FF8D  75                 	db	117	;'u'
  1175  00FF8E  6D                 	db	109	;'m'
  1176  00FF8F  70                 	db	112	;'p'
  1177  00FF90  3A                 	db	58	;':'
  1178  00FF91  25                 	db	37
  1179  00FF92  75                 	db	117	;'u'
  1180  00FF93  0A                 	db	10
  1181  00FF94  00                 	db	0
  1182  00FF95                     STR_4:
  1183  00FF95  54                 	db	84	;'T'
  1184  00FF96  6F                 	db	111	;'o'
  1185  00FF97  74                 	db	116	;'t'
  1186  00FF98  61                 	db	97	;'a'
  1187  00FF99  6C                 	db	108	;'l'
  1188  00FF9A  20                 	db	32
  1189  00FF9B  44                 	db	68	;'D'
  1190  00FF9C  69                 	db	105	;'i'
  1191  00FF9D  73                 	db	115	;'s'
  1192  00FF9E  74                 	db	116	;'t'
  1193  00FF9F  61                 	db	97	;'a'
  1194  00FFA0  6E                 	db	110	;'n'
  1195  00FFA1  63                 	db	99	;'c'
  1196  00FFA2  65                 	db	101	;'e'
  1197  00FFA3  3A                 	db	58	;':'
  1198  00FFA4  25                 	db	37
  1199  00FFA5  75                 	db	117	;'u'
  1200  00FFA6  0A                 	db	10
  1201  00FFA7  4C                 	db	76	;'L'
  1202  00FFA8  65                 	db	101	;'e'
  1203  00FFA9  66                 	db	102	;'f'
  1204  00FFAA  74                 	db	116	;'t'
  1205  00FFAB  20                 	db	32
  1206  00FFAC  42                 	db	66	;'B'
  1207  00FFAD  75                 	db	117	;'u'
  1208  00FFAE  6D                 	db	109	;'m'
  1209  00FFAF  70                 	db	112	;'p'
  1210  00FFB0  3A                 	db	58	;':'
  1211  00FFB1  25                 	db	37
  1212  00FFB2  75                 	db	117	;'u'
  1213  00FFB3  0A                 	db	10
  1214  00FFB4  52                 	db	82	;'R'
  1215  00FFB5  69                 	db	105	;'i'
  1216  00FFB6  67                 	db	103	;'g'
  1217  00FFB7  68                 	db	104	;'h'
  1218  00FFB8  74                 	db	116	;'t'
  1219  00FFB9  20                 	db	32
  1220  00FFBA  42                 	db	66	;'B'
  1221  00FFBB  75                 	db	117	;'u'
  1222  00FFBC  6D                 	db	109	;'m'
  1223  00FFBD  70                 	db	112	;'p'
  1224  00FFBE  3A                 	db	58	;':'
  1225  00FFBF  25                 	db	37
  1226  00FFC0  75                 	db	117	;'u'
  1227  00FFC1  0A                 	db	10
  1228  00FFC2  00                 	db	0
  1229  00FFC3                     STR_13:
  1230  00FFC3  20                 	db	32
  1231  00FFC4  20                 	db	32
  1232  00FFC5  20                 	db	32
  1233  00FFC6  20                 	db	32
  1234  00FFC7  20                 	db	32
  1235  00FFC8  20                 	db	32
  1236  00FFC9  20                 	db	32
  1237  00FFCA  20                 	db	32
  1238  00FFCB  20                 	db	32
  1239  00FFCC  20                 	db	32
  1240  00FFCD  20                 	db	32
  1241  00FFCE  20                 	db	32
  1242  00FFCF  20                 	db	32
  1243  00FFD0  20                 	db	32
  1244  00FFD1  20                 	db	32
  1245  00FFD2  20                 	db	32
  1246  00FFD3  20                 	db	32
  1247  00FFD4  20                 	db	32
  1248  00FFD5  20                 	db	32
  1249  00FFD6  0A                 	db	10
  1250  00FFD7  00                 	db	0
  1251  00FFD8                     STR_12:
  1252  00FFD8  50                 	db	80	;'P'
  1253  00FFD9  6C                 	db	108	;'l'
  1254  00FFDA  65                 	db	101	;'e'
  1255  00FFDB  61                 	db	97	;'a'
  1256  00FFDC  73                 	db	115	;'s'
  1257  00FFDD  65                 	db	101	;'e'
  1258  00FFDE  20                 	db	32
  1259  00FFDF  73                 	db	115	;'s'
  1260  00FFE0  65                 	db	101	;'e'
  1261  00FFE1  6C                 	db	108	;'l'
  1262  00FFE2  65                 	db	101	;'e'
  1263  00FFE3  63                 	db	99	;'c'
  1264  00FFE4  74                 	db	116	;'t'
  1265  00FFE5  20                 	db	32
  1266  00FFE6  6D                 	db	109	;'m'
  1267  00FFE7  6F                 	db	111	;'o'
  1268  00FFE8  64                 	db	100	;'d'
  1269  00FFE9  65                 	db	101	;'e'
  1270  00FFEA  2E                 	db	46
  1271  00FFEB  0A                 	db	10
  1272  00FFEC  00                 	db	0
  1273  00FFED                     STR_8:
  1274  00FFED  44                 	db	68	;'D'
  1275  00FFEE  69                 	db	105	;'i'
  1276  00FFEF  73                 	db	115	;'s'
  1277  00FFF0  74                 	db	116	;'t'
  1278  00FFF1  61                 	db	97	;'a'
  1279  00FFF2  6E                 	db	110	;'n'
  1280  00FFF3  63                 	db	99	;'c'
  1281  00FFF4  65                 	db	101	;'e'
  1282  00FFF5  3A                 	db	58	;':'
  1283  00FFF6  20                 	db	32
  1284  00FFF7  25                 	db	37
  1285  00FFF8  64                 	db	100	;'d'
  1286  00FFF9  0A                 	db	10
  1287  00FFFA  00                 	db	0
  1288  00FFFB                     STR_1:
  1289  00FFFB  25                 	db	37
  1290  00FFFC  63                 	db	99	;'c'
  1291  00FFFD  00                 	db	0
  1292  0000                     
  1293                           ; #config settings
  1294  00FFFE  00                 	db	0	; dummy byte at the end
  1295  0000                     
  1296                           	psect	cinit
  1297  014658                     __pcinit:
  1298                           	opt stack 0
  1299  014658                     start_initialization:
  1300                           	opt stack 0
  1301  014658                     __initialization:
  1302                           	opt stack 0
  1303                           
  1304                           ; Initialize objects allocated to BANK3 (12 bytes)
  1305                           ; load TBLPTR registers with __pidataBANK3
  1306  014658  0E3C               	movlw	low __pidataBANK3
  1307  01465A  6EF6               	movwf	tblptrl,c
  1308  01465C  0E67               	movlw	high __pidataBANK3
  1309  01465E  6EF7               	movwf	tblptrh,c
  1310  014660  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1311  014662  6EF8               	movwf	tblptru,c
  1312  014664  EE03  F0EA         	lfsr	0,__pdataBANK3
  1313  014668  EE10 F00C          	lfsr	1,12
  1314  01466C                     copy_data0:
  1315  01466C  0009               	tblrd		*+
  1316  01466E  CFF5 FFEE          	movff	tablat,postinc0
  1317  014672  50E5               	movf	postdec1,w,c
  1318  014674  50E1               	movf	fsr1l,w,c
  1319  014676  E1FA               	bnz	copy_data0
  1320                           
  1321                           ; Initialize objects allocated to BANK0 (7 bytes)
  1322                           ; load TBLPTR registers with __pidataBANK0
  1323  014678  0EA2               	movlw	low __pidataBANK0
  1324  01467A  6EF6               	movwf	tblptrl,c
  1325  01467C  0E67               	movlw	high __pidataBANK0
  1326  01467E  6EF7               	movwf	tblptrh,c
  1327  014680  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1328  014682  6EF8               	movwf	tblptru,c
  1329  014684  EE00  F0F9         	lfsr	0,__pdataBANK0
  1330  014688  EE10 F007          	lfsr	1,7
  1331  01468C                     copy_data1:
  1332  01468C  0009               	tblrd		*+
  1333  01468E  CFF5 FFEE          	movff	tablat,postinc0
  1334  014692  50E5               	movf	postdec1,w,c
  1335  014694  50E1               	movf	fsr1l,w,c
  1336  014696  E1FA               	bnz	copy_data1
  1337                           
  1338                           ; Initialize objects allocated to COMRAM (10 bytes)
  1339                           ; load TBLPTR registers with __pidataCOMRAM
  1340  014698  0E6C               	movlw	low __pidataCOMRAM
  1341  01469A  6EF6               	movwf	tblptrl,c
  1342  01469C  0E67               	movlw	high __pidataCOMRAM
  1343  01469E  6EF7               	movwf	tblptrh,c
  1344  0146A0  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1345  0146A2  6EF8               	movwf	tblptru,c
  1346  0146A4  EE00  F047         	lfsr	0,__pdataCOMRAM
  1347  0146A8  EE10 F00A          	lfsr	1,10
  1348  0146AC                     copy_data2:
  1349  0146AC  0009               	tblrd		*+
  1350  0146AE  CFF5 FFEE          	movff	tablat,postinc0
  1351  0146B2  50E5               	movf	postdec1,w,c
  1352  0146B4  50E1               	movf	fsr1l,w,c
  1353  0146B6  E1FA               	bnz	copy_data2
  1354                           
  1355                           ; Clear objects allocated to BIGRAM (300 bytes)
  1356  0146B8  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1357  0146BC  EE11 F02C          	lfsr	1,300
  1358  0146C0                     clear_0:
  1359  0146C0  6AEE               	clrf	postinc0,c
  1360  0146C2  50E5               	movf	postdec1,w,c
  1361  0146C4  50E1               	movf	fsr1l,w,c
  1362  0146C6  E1FC               	bnz	clear_0
  1363  0146C8  50E2               	movf	fsr1h,w,c
  1364  0146CA  E1FA               	bnz	clear_0
  1365                           
  1366                           ; Clear objects allocated to BANK4 (170 bytes)
  1367  0146CC  EE04  F000         	lfsr	0,__pbssBANK4
  1368  0146D0  0EAA               	movlw	170
  1369  0146D2                     clear_1:
  1370  0146D2  6AEE               	clrf	postinc0,c
  1371  0146D4  06E8               	decf	wreg,f,c
  1372  0146D6  E1FD               	bnz	clear_1
  1373                           
  1374                           ; Clear objects allocated to BANK3 (234 bytes)
  1375  0146D8  EE03  F000         	lfsr	0,__pbssBANK3
  1376  0146DC  0EEA               	movlw	234
  1377  0146DE                     clear_2:
  1378  0146DE  6AEE               	clrf	postinc0,c
  1379  0146E0  06E8               	decf	wreg,f,c
  1380  0146E2  E1FD               	bnz	clear_2
  1381                           
  1382                           ; Clear objects allocated to BANK0 (90 bytes)
  1383  0146E4  EE00  F060         	lfsr	0,__pbssBANK0
  1384  0146E8  0E5A               	movlw	90
  1385  0146EA                     clear_3:
  1386  0146EA  6AEE               	clrf	postinc0,c
  1387  0146EC  06E8               	decf	wreg,f,c
  1388  0146EE  E1FD               	bnz	clear_3
  1389                           
  1390                           ; Clear objects allocated to COMRAM (30 bytes)
  1391  0146F0  EE00  F029         	lfsr	0,__pbssCOMRAM
  1392  0146F4  0E1E               	movlw	30
  1393  0146F6                     clear_4:
  1394  0146F6  6AEE               	clrf	postinc0,c
  1395  0146F8  06E8               	decf	wreg,f,c
  1396  0146FA  E1FD               	bnz	clear_4
  1397  0146FC                     end_of_initialization:
  1398                           	opt stack 0
  1399  0146FC                     __end_of__initialization:
  1400                           	opt stack 0
  1401  0146FC  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1402  0146FE  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1403  014700  0100               	movlb	0
  1404  014702  EFB7  F09D         	goto	_main	;jump to C main() function
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           
  1415                           	psect	bssCOMRAM
  1416  000029                     __pbssCOMRAM:
  1417                           	opt stack 0
  1418  000029                     _COUNTER:
  1419                           	opt stack 0
  1420  000029                     	ds	2
  1421  00002B                     HMI_GRender@a:
  1422                           	opt stack 0
  1423  00002B                     	ds	2
  1424  00002D                     SPI_Send9@dat:
  1425                           	opt stack 0
  1426  00002D                     	ds	2
  1427  00002F                     _iRDropCaster:
  1428                           	opt stack 0
  1429  00002F                     	ds	1
  1430  000030                     _iRVirtualWall:
  1431                           	opt stack 0
  1432  000030                     	ds	1
  1433  000031                     _iRCliffR:
  1434                           	opt stack 0
  1435  000031                     	ds	1
  1436  000032                     _iRCliffFR:
  1437                           	opt stack 0
  1438  000032                     	ds	1
  1439  000033                     _iRCliffFL:
  1440                           	opt stack 0
  1441  000033                     	ds	1
  1442  000034                     _iRCliffL:
  1443                           	opt stack 0
  1444  000034                     	ds	1
  1445  000035                     _iRWall:
  1446                           	opt stack 0
  1447  000035                     	ds	1
  1448  000036                     _iRBumpDrop:
  1449                           	opt stack 0
  1450  000036                     	ds	1
  1451  000037                     _iRScriptIndex:
  1452                           	opt stack 0
  1453  000037                     	ds	1
  1454  000038                     _u:
  1455                           	opt stack 0
  1456  000038                     	ds	1
  1457  000039                     _j:
  1458                           	opt stack 0
  1459  000039                     	ds	1
  1460  00003A                     _i:
  1461                           	opt stack 0
  1462  00003A                     	ds	1
  1463  00003B                     rand@screw:
  1464                           	opt stack 0
  1465  00003B                     	ds	1
  1466  00003C                     _ADC_Initialised:
  1467                           	opt stack 0
  1468  00003C                     	ds	1
  1469  00003D                     OutSeg@a:
  1470                           	opt stack 0
  1471  00003D                     	ds	1
  1472  00003E                     OutSeg@segset:
  1473                           	opt stack 0
  1474  00003E                     	ds	1
  1475  00003F                     OutSeg@cur:
  1476                           	opt stack 0
  1477  00003F                     	ds	1
  1478  000040                     _I2C1T:
  1479                           	opt stack 0
  1480  000040                     	ds	7
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1h	equ	0xFE2
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	dataCOMRAM
  1492  000047                     __pdataCOMRAM:
  1493                           	opt stack 0
  1494  000047                     _gCursor:
  1495                           	opt stack 0
  1496  000047                     	ds	4
  1497  00004B                     _Bus_State:
  1498                           	opt stack 0
  1499  00004B                     	ds	1
  1500  00004C                     	ds	1
  1501  00004D                     	ds	1
  1502  00004E                     	ds	1
  1503  00004F                     _l:
  1504                           	opt stack 0
  1505  00004F                     	ds	1
  1506  000050                     _w:
  1507                           	opt stack 0
  1508  000050                     	ds	1
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           fsr1h	equ	0xFE2
  1517                           fsr1l	equ	0xFE1
  1518                           
  1519                           	psect	bssBANK0
  1520  000060                     __pbssBANK0:
  1521                           	opt stack 0
  1522  000060                     _gISR:
  1523                           	opt stack 0
  1524  000060                     	ds	3
  1525  000063                     _lQueue:
  1526                           	opt stack 0
  1527  000063                     	ds	3
  1528  000066                     _lStepFunction:
  1529                           	opt stack 0
  1530  000066                     	ds	3
  1531  000069                     _dist:
  1532                           	opt stack 0
  1533  000069                     	ds	2
  1534  00006B                     _angleToClosestWall:
  1535                           	opt stack 0
  1536  00006B                     	ds	2
  1537  00006D                     _IRValue:
  1538                           	opt stack 0
  1539  00006D                     	ds	2
  1540  00006F                     _Stepstomin:
  1541                           	opt stack 0
  1542  00006F                     	ds	2
  1543  000071                     _StepRotate:
  1544                           	opt stack 0
  1545  000071                     	ds	2
  1546  000073                     _angleTotal:
  1547                           	opt stack 0
  1548  000073                     	ds	2
  1549  000075                     _distanceTotal:
  1550                           	opt stack 0
  1551  000075                     	ds	2
  1552  000077                     _iRAngle:
  1553                           	opt stack 0
  1554  000077                     	ds	2
  1555  000079                     _iRDistance:
  1556                           	opt stack 0
  1557  000079                     	ds	2
  1558  00007B                     _pShiftVal:
  1559                           	opt stack 0
  1560  00007B                     	ds	2
  1561  00007D                     _val:
  1562                           	opt stack 0
  1563  00007D                     	ds	2
  1564  00007F                     _lMotor:
  1565                           	opt stack 0
  1566  00007F                     	ds	2
  1567  000081                     _lCurrent:
  1568                           	opt stack 0
  1569  000081                     	ds	2
  1570  000083                     _gBackcolour:
  1571                           	opt stack 0
  1572  000083                     	ds	2
  1573  000085                     _iRDropLeft:
  1574                           	opt stack 0
  1575  000085                     	ds	1
  1576  000086                     _iRDropRight:
  1577                           	opt stack 0
  1578  000086                     	ds	1
  1579  000087                     _iRBumpLeft:
  1580                           	opt stack 0
  1581  000087                     	ds	1
  1582  000088                     _iRBumpRight:
  1583                           	opt stack 0
  1584  000088                     	ds	1
  1585  000089                     Event_TestButton@j:
  1586                           	opt stack 0
  1587  000089                     	ds	1
  1588  00008A                     Timer2_Init@PRE:
  1589                           	opt stack 0
  1590  00008A                     	ds	1
  1591  00008B                     Timer2_Init@INDEX:
  1592                           	opt stack 0
  1593  00008B                     	ds	1
  1594  00008C                     Timer0_Init@PRE:
  1595                           	opt stack 0
  1596  00008C                     	ds	1
  1597  00008D                     _INDEX:
  1598                           	opt stack 0
  1599  00008D                     	ds	1
  1600  00008E                     _lBufferY:
  1601                           	opt stack 0
  1602  00008E                     	ds	1
  1603  00008F                     _lBufferX:
  1604                           	opt stack 0
  1605  00008F                     	ds	1
  1606  000090                     _clearall:
  1607                           	opt stack 0
  1608  000090                     	ds	1
  1609  000091                     _PortE:
  1610                           	opt stack 0
  1611  000091                     	ds	10
  1612  00009B                     _PortD:
  1613                           	opt stack 0
  1614  00009B                     	ds	10
  1615  0000A5                     _PortC:
  1616                           	opt stack 0
  1617  0000A5                     	ds	10
  1618  0000AF                     _Stepper:
  1619                           	opt stack 0
  1620  0000AF                     	ds	6
  1621  0000B5                     _ADC_AN0:
  1622                           	opt stack 0
  1623  0000B5                     	ds	5
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1h	equ	0xFE2
  1632                           fsr1l	equ	0xFE1
  1633                           
  1634                           	psect	dataBANK0
  1635  0000F9                     __pdataBANK0:
  1636                           	opt stack 0
  1637  0000F9                     _TimerX:
  1638                           	opt stack 0
  1639  0000F9                     	ds	2
  1640  0000FB                     _MinDist:
  1641                           	opt stack 0
  1642  0000FB                     	ds	2
  1643  0000FD                     _gForecolour:
  1644                           	opt stack 0
  1645  0000FD                     	ds	2
  1646  0000FF                     _change:
  1647                           	opt stack 0
  1648  0000FF                     	ds	1
  1649                           tblptru	equ	0xFF8
  1650                           tblptrh	equ	0xFF7
  1651                           tblptrl	equ	0xFF6
  1652                           tablat	equ	0xFF5
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           postdec1	equ	0xFE5
  1656                           fsr1h	equ	0xFE2
  1657                           fsr1l	equ	0xFE1
  1658                           
  1659                           	psect	bssBANK3
  1660  000300                     __pbssBANK3:
  1661                           	opt stack 0
  1662  000300                     _lCBuffer:
  1663                           	opt stack 0
  1664  000300                     	ds	30
  1665  00031E                     _iRAngleSS:
  1666                           	opt stack 0
  1667  00031E                     	ds	4
  1668  000322                     _iRDistanceSS:
  1669                           	opt stack 0
  1670  000322                     	ds	4
  1671  000326                     Timer2_Init@DIV:
  1672                           	opt stack 0
  1673  000326                     	ds	4
  1674  00032A                     Timer0_Init@DIV:
  1675                           	opt stack 0
  1676  00032A                     	ds	4
  1677  00032E                     _I2C2_More:
  1678                           	opt stack 0
  1679  00032E                     	ds	3
  1680  000331                     _I2C1_More:
  1681                           	opt stack 0
  1682  000331                     	ds	3
  1683  000334                     _I2C2_Done:
  1684                           	opt stack 0
  1685  000334                     	ds	3
  1686  000337                     _I2C1_Done:
  1687                           	opt stack 0
  1688  000337                     	ds	3
  1689  00033A                     _angle:
  1690                           	opt stack 0
  1691  00033A                     	ds	2
  1692  00033C                     _mode:
  1693                           	opt stack 0
  1694  00033C                     	ds	2
  1695  00033E                     _dip:
  1696                           	opt stack 0
  1697  00033E                     	ds	2
  1698  000340                     _HMIBoard:
  1699                           	opt stack 0
  1700  000340                     	ds	58
  1701  00037A                     _SPI1:
  1702                           	opt stack 0
  1703  00037A                     	ds	11
  1704  000385                     _SPI2:
  1705                           	opt stack 0
  1706  000385                     	ds	11
  1707  000390                     _DIPSwitch:
  1708                           	opt stack 0
  1709  000390                     	ds	10
  1710  00039A                     _TestButton:
  1711                           	opt stack 0
  1712  00039A                     	ds	10
  1713  0003A4                     _PortG:
  1714                           	opt stack 0
  1715  0003A4                     	ds	10
  1716  0003AE                     _PortB:
  1717                           	opt stack 0
  1718  0003AE                     	ds	10
  1719  0003B8                     _PortA:
  1720                           	opt stack 0
  1721  0003B8                     	ds	10
  1722  0003C2                     _PortF:
  1723                           	opt stack 0
  1724  0003C2                     	ds	10
  1725  0003CC                     _I2C2T:
  1726                           	opt stack 0
  1727  0003CC                     	ds	7
  1728  0003D3                     _ADC_AN3:
  1729                           	opt stack 0
  1730  0003D3                     	ds	5
  1731  0003D8                     _ADC_AN2:
  1732                           	opt stack 0
  1733  0003D8                     	ds	5
  1734  0003DD                     _ADC_AN1:
  1735                           	opt stack 0
  1736  0003DD                     	ds	5
  1737  0003E2                     LCD_DrawRectangle@p4:
  1738                           	opt stack 0
  1739  0003E2                     	ds	4
  1740  0003E6                     LCD_DrawRectangle@p2:
  1741                           	opt stack 0
  1742  0003E6                     	ds	4
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1h	equ	0xFE2
  1751                           fsr1l	equ	0xFE1
  1752                           
  1753                           	psect	dataBANK3
  1754  0003EA                     __pdataBANK3:
  1755                           	opt stack 0
  1756  0003EA                     Console_Render@F6956:
  1757                           	opt stack 0
  1758  0003EA                     	ds	4
  1759  0003EE                     _gLineSize:
  1760                           	opt stack 0
  1761  0003EE                     	ds	4
  1762  0003F2                     _gCharSize:
  1763                           	opt stack 0
  1764  0003F2                     	ds	4
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           fsr1h	equ	0xFE2
  1773                           fsr1l	equ	0xFE1
  1774                           
  1775                           	psect	bssBANK4
  1776  000400                     __pbssBANK4:
  1777                           	opt stack 0
  1778  000400                     _iRScriptStack:
  1779                           	opt stack 0
  1780  000400                     	ds	100
  1781  000464                     Console_MakeField@Fill:
  1782                           	opt stack 0
  1783  000464                     	ds	70
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1h	equ	0xFE2
  1792                           fsr1l	equ	0xFE1
  1793                           
  1794                           	psect	bssBIGRAM
  1795  0004AA                     __pbssBIGRAM:
  1796                           	opt stack 0
  1797  0004AA                     _lBuffer:
  1798                           	opt stack 0
  1799  0004AA                     	ds	300
  1800                           tblptru	equ	0xFF8
  1801                           tblptrh	equ	0xFF7
  1802                           tblptrl	equ	0xFF6
  1803                           tablat	equ	0xFF5
  1804                           postinc0	equ	0xFEE
  1805                           wreg	equ	0xFE8
  1806                           postdec1	equ	0xFE5
  1807                           fsr1h	equ	0xFE2
  1808                           fsr1l	equ	0xFE1
  1809                           
  1810                           	psect	cstackBANK3
  1811  0003F6                     __pcstackBANK3:
  1812                           	opt stack 0
  1813  0003F6                     ??_findClosestWall:
  1814  0003F6                     ??_mode1:
  1815                           
  1816                           ; 1 bytes @ 0x0
  1817  0003F6                     	ds	2
  1818  0003F8                     mode1@moveto:
  1819                           	opt stack 0
  1820  0003F8                     _findClosestWall$15599:
  1821                           	opt stack 0
  1822                           
  1823                           ; 4 bytes @ 0x2
  1824  0003F8                     	ds	2
  1825  0003FA                     _mode1$15600:
  1826                           	opt stack 0
  1827                           
  1828                           ; 4 bytes @ 0x4
  1829  0003FA                     	ds	4
  1830  0003FE                     ??_main:
  1831                           
  1832                           ; 1 bytes @ 0x8
  1833  0003FE                     	ds	2
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           fsr1h	equ	0xFE2
  1842                           fsr1l	equ	0xFE1
  1843                           
  1844                           	psect	cstackBANK2
  1845  000200                     __pcstackBANK2:
  1846                           	opt stack 0
  1847  000200                     irobot_query_and_update@TXArray:
  1848                           	opt stack 0
  1849                           
  1850                           ; 256 bytes @ 0x0
  1851  000200                     	ds	256
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1h	equ	0xFE2
  1860                           fsr1l	equ	0xFE1
  1861                           
  1862                           	psect	cstackBANK1
  1863  000100                     __pcstackBANK1:
  1864                           	opt stack 0
  1865  000100                     ??___fltol:
  1866  000100                     Port_SetType@Output:
  1867                           	opt stack 0
  1868  000100                     Button_Init@pInput:
  1869                           	opt stack 0
  1870  000100                     irobot_query_and_update@RXArray:
  1871                           	opt stack 0
  1872                           
  1873                           ; 256 bytes @ 0x0
  1874  000100                     	ds	1
  1875  000101                     Port_Init@pInput:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x1
  1879  000101                     	ds	1
  1880  000102                     Button_Init@pThreshold:
  1881                           	opt stack 0
  1882                           
  1883                           ; 2 bytes @ 0x2
  1884  000102                     	ds	1
  1885  000103                     Port_Init@pPort:
  1886                           	opt stack 0
  1887                           
  1888                           ; 1 bytes @ 0x3
  1889  000103                     	ds	1
  1890  000104                     ??_Port_Init:
  1891  000104                     Button_Init@pInitIO:
  1892                           	opt stack 0
  1893                           
  1894                           ; 3 bytes @ 0x4
  1895  000104                     	ds	2
  1896  000106                     Port_Init@i:
  1897                           	opt stack 0
  1898                           
  1899                           ; 1 bytes @ 0x6
  1900  000106                     	ds	1
  1901  000107                     Button_Init@pGetState:
  1902                           	opt stack 0
  1903                           
  1904                           ; 3 bytes @ 0x7
  1905  000107                     	ds	3
  1906  00010A                     Button_Init@pFunction:
  1907                           	opt stack 0
  1908                           
  1909                           ; 3 bytes @ 0xA
  1910  00010A                     	ds	246
  1911                           tblptru	equ	0xFF8
  1912                           tblptrh	equ	0xFF7
  1913                           tblptrl	equ	0xFF6
  1914                           tablat	equ	0xFF5
  1915                           postinc0	equ	0xFEE
  1916                           wreg	equ	0xFE8
  1917                           postdec1	equ	0xFE5
  1918                           fsr1h	equ	0xFE2
  1919                           fsr1l	equ	0xFE1
  1920                           
  1921                           	psect	cstackBANK0
  1922  0000BA                     __pcstackBANK0:
  1923                           	opt stack 0
  1924  0000BA                     ??_Console_ClearCursor:
  1925  0000BA                     ??_ADC_SetChannel:
  1926  0000BA                     ??_ADC_ConversionTime:
  1927  0000BA                     ??_ADC_SetupIO:
  1928  0000BA                     ??_sort_iRBumpDrop:
  1929  0000BA                     ?_load_iRScriptStack:
  1930                           	opt stack 0
  1931  0000BA                     ??_Console_Init:
  1932  0000BA                     ??_Console_NewLine:
  1933  0000BA                     ??_Console_FormFeed:
  1934  0000BA                     ??_HMI_SetButton:
  1935  0000BA                     ?_GetPortProperties:
  1936                           	opt stack 0
  1937  0000BA                     ?_GetPortPORT:
  1938                           	opt stack 0
  1939  0000BA                     ?_GetPortTRIS:
  1940                           	opt stack 0
  1941  0000BA                     ?_twos_complement_of:
  1942                           	opt stack 0
  1943  0000BA                     ?___wmul:
  1944                           	opt stack 0
  1945  0000BA                     ?___awdiv:
  1946                           	opt stack 0
  1947  0000BA                     ?___lwdiv:
  1948                           	opt stack 0
  1949  0000BA                     ?___fldiv:
  1950                           	opt stack 0
  1951  0000BA                     ?___lldiv:
  1952                           	opt stack 0
  1953  0000BA                     ?___xxtofl:
  1954                           	opt stack 0
  1955  0000BA                     Mode_Set@pMode:
  1956                           	opt stack 0
  1957  0000BA                     ToSegment@pCHR:
  1958                           	opt stack 0
  1959  0000BA                     HMI_SetBar@pValue:
  1960                           	opt stack 0
  1961  0000BA                     ADC_ClockDivision@pDivide:
  1962                           	opt stack 0
  1963  0000BA                     get_packet_size@packetID:
  1964                           	opt stack 0
  1965  0000BA                     eusart_putch@eusartSendChar:
  1966                           	opt stack 0
  1967  0000BA                     Port_GetPin@pInput:
  1968                           	opt stack 0
  1969  0000BA                     Port_GetQuad@pInput:
  1970                           	opt stack 0
  1971  0000BA                     SPI_DisableISR@pInput:
  1972                           	opt stack 0
  1973  0000BA                     SPI_DCS@pInput:
  1974                           	opt stack 0
  1975  0000BA                     SPI_Send@pInput:
  1976                           	opt stack 0
  1977  0000BA                     Byte_SetBit@pInput:
  1978                           	opt stack 0
  1979  0000BA                     Byte_GetBit@pInput:
  1980                           	opt stack 0
  1981  0000BA                     Byte_SetZone@pInput:
  1982                           	opt stack 0
  1983  0000BA                     Byte_GetZone@pInput:
  1984                           	opt stack 0
  1985  0000BA                     Byte_SetByte@pInput:
  1986                           	opt stack 0
  1987  0000BA                     delay_ms@ms:
  1988                           	opt stack 0
  1989  0000BA                     delay_us@us:
  1990                           	opt stack 0
  1991  0000BA                     reverse@input:
  1992                           	opt stack 0
  1993  0000BA                     twos_complement_of@complementValue:
  1994                           	opt stack 0
  1995  0000BA                     ___wmul@multiplier:
  1996                           	opt stack 0
  1997  0000BA                     ___awdiv@dividend:
  1998                           	opt stack 0
  1999  0000BA                     ___lwdiv@dividend:
  2000                           	opt stack 0
  2001  0000BA                     MXK_Queue@pCallback:
  2002                           	opt stack 0
  2003  0000BA                     Timer0_Start@pFunction:
  2004                           	opt stack 0
  2005  0000BA                     ___lldiv@dividend:
  2006                           	opt stack 0
  2007  0000BA                     ___fldiv@b:
  2008                           	opt stack 0
  2009  0000BA                     ___xxtofl@val:
  2010                           	opt stack 0
  2011                           
  2012                           ; 4 bytes @ 0x0
  2013  0000BA                     	ds	1
  2014  0000BB                     ADC_SetChannel@pChannel:
  2015                           	opt stack 0
  2016  0000BB                     ADC_ClockDivision@reg:
  2017                           	opt stack 0
  2018  0000BB                     ADC_ConversionTime@pCount:
  2019                           	opt stack 0
  2020  0000BB                     rx_assign@packetIDValue:
  2021                           	opt stack 0
  2022  0000BB                     irobot_song_play@songNumber:
  2023                           	opt stack 0
  2024  0000BB                     HMI_SetSegments@pString:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x1
  2028  0000BB                     	ds	1
  2029  0000BC                     GetPortProperties@pInput:
  2030                           	opt stack 0
  2031  0000BC                     GetPortPORT@pInput:
  2032                           	opt stack 0
  2033  0000BC                     GetPortTRIS@pInput:
  2034                           	opt stack 0
  2035  0000BC                     Port_GetPin@pPin:
  2036                           	opt stack 0
  2037  0000BC                     Port_GetQuad@pQuad:
  2038                           	opt stack 0
  2039  0000BC                     SPI_Send@pData:
  2040                           	opt stack 0
  2041  0000BC                     Byte_SetBit@pBit:
  2042                           	opt stack 0
  2043  0000BC                     Byte_GetBit@pBit:
  2044                           	opt stack 0
  2045  0000BC                     Byte_SetZone@pMax:
  2046                           	opt stack 0
  2047  0000BC                     Byte_GetZone@pMax:
  2048                           	opt stack 0
  2049  0000BC                     Byte_SetByte@pValue:
  2050                           	opt stack 0
  2051  0000BC                     Console_Init@x:
  2052                           	opt stack 0
  2053  0000BC                     Console_FormFeed@x:
  2054                           	opt stack 0
  2055  0000BC                     ADC_SetupIO@pChannel:
  2056                           	opt stack 0
  2057  0000BC                     ADC_ClockDivision@unfound:
  2058                           	opt stack 0
  2059  0000BC                     rx_assign@byteNumber:
  2060                           	opt stack 0
  2061  0000BC                     reverse@length:
  2062                           	opt stack 0
  2063  0000BC                     ADC_Start@pInput:
  2064                           	opt stack 0
  2065  0000BC                     ___wmul@multiplicand:
  2066                           	opt stack 0
  2067  0000BC                     ___awdiv@divisor:
  2068                           	opt stack 0
  2069  0000BC                     ___lwdiv@divisor:
  2070                           	opt stack 0
  2071  0000BC                     delay_ms@u:
  2072                           	opt stack 0
  2073  0000BC                     delay_us@u:
  2074                           	opt stack 0
  2075  0000BC                     HMI_SetButton@reindex:
  2076                           	opt stack 0
  2077                           
  2078                           ; 4 bytes @ 0x2
  2079  0000BC                     	ds	1
  2080  0000BD                     ??_Port_GetPin:
  2081  0000BD                     ??_Port_GetQuad:
  2082  0000BD                     ??_Byte_GetBit:
  2083  0000BD                     ??_rx_assign:
  2084  0000BD                     LCD_Write@mode:
  2085                           	opt stack 0
  2086  0000BD                     Byte_SetBit@pValue:
  2087                           	opt stack 0
  2088  0000BD                     Byte_SetZone@pChunk:
  2089                           	opt stack 0
  2090  0000BD                     Byte_GetZone@pChunk:
  2091                           	opt stack 0
  2092  0000BD                     Console_Init@y:
  2093                           	opt stack 0
  2094  0000BD                     Console_FormFeed@y:
  2095                           	opt stack 0
  2096  0000BD                     OutSeg@pSegment:
  2097                           	opt stack 0
  2098  0000BD                     ADC_SetupIO@MASK:
  2099                           	opt stack 0
  2100  0000BD                     Motor_Move@pMotor:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x3
  2104  0000BD                     	ds	1
  2105  0000BE                     ??_Byte_SetBit:
  2106  0000BE                     ??_Console_IncrementCursor:
  2107  0000BE                     ??_OutSeg:
  2108  0000BE                     ??_ADC_Start:
  2109  0000BE                     ??___xxtofl:
  2110  0000BE                     LCD_Write@value:
  2111                           	opt stack 0
  2112  0000BE                     Byte_GetBit@Output:
  2113                           	opt stack 0
  2114  0000BE                     Byte_SetZone@pChunkSize:
  2115                           	opt stack 0
  2116  0000BE                     Byte_GetZone@pChunkSize:
  2117                           	opt stack 0
  2118  0000BE                     reverse@tempVar:
  2119                           	opt stack 0
  2120  0000BE                     ___awdiv@counter:
  2121                           	opt stack 0
  2122  0000BE                     ___lwdiv@counter:
  2123                           	opt stack 0
  2124  0000BE                     HMI_SetSegments@in:
  2125                           	opt stack 0
  2126  0000BE                     ADC_Init@pInput:
  2127                           	opt stack 0
  2128  0000BE                     ___wmul@product:
  2129                           	opt stack 0
  2130  0000BE                     ___lldiv@divisor:
  2131                           	opt stack 0
  2132  0000BE                     ___fldiv@a:
  2133                           	opt stack 0
  2134                           
  2135                           ; 4 bytes @ 0x4
  2136  0000BE                     	ds	1
  2137  0000BF                     ??_Byte_GetZone:
  2138  0000BF                     ?_Console_MakeField:
  2139                           	opt stack 0
  2140  0000BF                     Set_Addr_Window@ys:
  2141                           	opt stack 0
  2142  0000BF                     Set_Rotation@m:
  2143                           	opt stack 0
  2144  0000BF                     Port_GetPin@Output:
  2145                           	opt stack 0
  2146  0000BF                     Port_GetQuad@Output:
  2147                           	opt stack 0
  2148  0000BF                     Byte_SetZone@pValue:
  2149                           	opt stack 0
  2150  0000BF                     rx_assign@packetID:
  2151                           	opt stack 0
  2152  0000BF                     ___awdiv@sign:
  2153                           	opt stack 0
  2154  0000BF                     LCD_Word_Write@value:
  2155                           	opt stack 0
  2156  0000BF                     reverse@iterator:
  2157                           	opt stack 0
  2158  0000BF                     Motor_Move@pDelta:
  2159                           	opt stack 0
  2160  0000BF                     ___lwdiv@quotient:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x5
  2164  0000BF                     	ds	1
  2165  0000C0                     ?_irobot_query_and_update:
  2166                           	opt stack 0
  2167  0000C0                     ??_Byte_SetZone:
  2168  0000C0                     Set_Addr_Window@xe:
  2169                           	opt stack 0
  2170  0000C0                     Set_Rotation@rotation:
  2171                           	opt stack 0
  2172  0000C0                     Byte_GetZone@MASK:
  2173                           	opt stack 0
  2174  0000C0                     OutSeg@pInput:
  2175                           	opt stack 0
  2176  0000C0                     HMI_SetButton@pValue:
  2177                           	opt stack 0
  2178  0000C0                     ADC_Init@pChannel:
  2179                           	opt stack 0
  2180  0000C0                     MXK_BlockSwitchTo@CUR:
  2181                           	opt stack 0
  2182  0000C0                     MXK_SwitchTo@CUR:
  2183                           	opt stack 0
  2184  0000C0                     ___awdiv@quotient:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x6
  2188  0000C0                     	ds	1
  2189  0000C1                     ??_Console_MakeField:
  2190  0000C1                     ?___lwmod:
  2191                           	opt stack 0
  2192  0000C1                     Set_Addr_Window@ye:
  2193                           	opt stack 0
  2194  0000C1                     Byte_GetZone@Offset:
  2195                           	opt stack 0
  2196  0000C1                     OutSeg@out:
  2197                           	opt stack 0
  2198  0000C1                     HMI_SetButton@v:
  2199                           	opt stack 0
  2200  0000C1                     MXK_BlockSwitchTo@pModule:
  2201                           	opt stack 0
  2202  0000C1                     MXK_SwitchTo@pModule:
  2203                           	opt stack 0
  2204  0000C1                     ___lwmod@dividend:
  2205                           	opt stack 0
  2206                           
  2207                           ; 2 bytes @ 0x7
  2208  0000C1                     	ds	1
  2209  0000C2                     ??___fldiv:
  2210  0000C2                     ??_Console_Tab:
  2211  0000C2                     Set_Addr_Window@xs:
  2212                           	opt stack 0
  2213  0000C2                     Byte_GetZone@Output:
  2214                           	opt stack 0
  2215  0000C2                     ___xxtofl@sign:
  2216                           	opt stack 0
  2217  0000C2                     HMI_Render@a:
  2218                           	opt stack 0
  2219  0000C2                     ___lldiv@quotient:
  2220                           	opt stack 0
  2221                           
  2222                           ; 4 bytes @ 0x8
  2223  0000C2                     	ds	1
  2224  0000C3                     Byte_SetZone@Offset:
  2225                           	opt stack 0
  2226  0000C3                     ___xxtofl@exp:
  2227                           	opt stack 0
  2228  0000C3                     LCD_Fill@pColour:
  2229                           	opt stack 0
  2230  0000C3                     LCD_FillRectangle@pColour:
  2231                           	opt stack 0
  2232  0000C3                     Byte_GetPair@pInput:
  2233                           	opt stack 0
  2234  0000C3                     Console_MakeField@Index:
  2235                           	opt stack 0
  2236  0000C3                     ___lwmod@divisor:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x9
  2240  0000C3                     	ds	1
  2241  0000C4                     ??_load_iRScriptStack:
  2242  0000C4                     Byte_SetZone@MASK:
  2243                           	opt stack 0
  2244  0000C4                     ___xxtofl@arg:
  2245                           	opt stack 0
  2246                           
  2247                           ; 4 bytes @ 0xA
  2248  0000C4                     	ds	1
  2249  0000C5                     LCD_Fill@i:
  2250                           	opt stack 0
  2251  0000C5                     Byte_GetPair@pPair:
  2252                           	opt stack 0
  2253  0000C5                     Console_MakeField@pInput:
  2254                           	opt stack 0
  2255  0000C5                     ___lwmod@counter:
  2256                           	opt stack 0
  2257  0000C5                     Byte_SetPair@pInput:
  2258                           	opt stack 0
  2259  0000C5                     Byte_SetQuad@pInput:
  2260                           	opt stack 0
  2261  0000C5                     LCD_FillRectangle@pPoint:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0xB
  2265  0000C5                     	ds	1
  2266  0000C6                     LCD_Fill@j:
  2267                           	opt stack 0
  2268  0000C6                     ___lldiv@counter:
  2269                           	opt stack 0
  2270  0000C6                     ___fldiv@sign:
  2271                           	opt stack 0
  2272  0000C6                     Word_GetPair@pInput:
  2273                           	opt stack 0
  2274  0000C6                     itos@input:
  2275                           	opt stack 0
  2276  0000C6                     Console_MakeField@Column:
  2277                           	opt stack 0
  2278  0000C6                     load_iRScriptStack@loadByte:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0xC
  2282  0000C6                     	ds	1
  2283  0000C7                     Byte_SetPair@pPair:
  2284                           	opt stack 0
  2285  0000C7                     Byte_SetQuad@pQuad:
  2286                           	opt stack 0
  2287  0000C7                     Console_Tab@t:
  2288                           	opt stack 0
  2289  0000C7                     Timer0_Init@pFrequency:
  2290                           	opt stack 0
  2291  0000C7                     Timer2_Init@pFrequency:
  2292                           	opt stack 0
  2293  0000C7                     ___fldiv@rem:
  2294                           	opt stack 0
  2295                           
  2296                           ; 4 bytes @ 0xD
  2297  0000C7                     	ds	1
  2298  0000C8                     ?___flmul:
  2299                           	opt stack 0
  2300  0000C8                     Byte_SetPair@pValue:
  2301                           	opt stack 0
  2302  0000C8                     Byte_SetQuad@pValue:
  2303                           	opt stack 0
  2304  0000C8                     Word_GetPair@pPair:
  2305                           	opt stack 0
  2306  0000C8                     Console_Tab@i:
  2307                           	opt stack 0
  2308  0000C8                     load_iRScriptStack@bytesToLoad:
  2309                           	opt stack 0
  2310  0000C8                     itos@destination:
  2311                           	opt stack 0
  2312  0000C8                     _Console_MakeField$10974:
  2313                           	opt stack 0
  2314  0000C8                     ___flmul@b:
  2315                           	opt stack 0
  2316                           
  2317                           ; 4 bytes @ 0xE
  2318  0000C8                     	ds	1
  2319  0000C9                     Console_Tab@c:
  2320                           	opt stack 0
  2321  0000C9                     load_iRScriptStack@i:
  2322                           	opt stack 0
  2323  0000C9                     Port_SetPin@pInput:
  2324                           	opt stack 0
  2325  0000C9                     Port_Set@pInput:
  2326                           	opt stack 0
  2327  0000C9                     SPI_MinSpeed@pInput:
  2328                           	opt stack 0
  2329  0000C9                     SPI_MaxSpeed@pInput:
  2330                           	opt stack 0
  2331  0000C9                     Word_SetPair@pInput:
  2332                           	opt stack 0
  2333  0000C9                     PortProperty_Valid@pInput:
  2334                           	opt stack 0
  2335  0000C9                     LCD_FillRectangle@pSize:
  2336                           	opt stack 0
  2337                           
  2338                           ; 4 bytes @ 0xF
  2339  0000C9                     	ds	1
  2340  0000CA                     ??_irobot_query_and_update:
  2341  0000CA                     ??_Console_PrintChar:
  2342  0000CA                     Console_MakeField@x:
  2343                           	opt stack 0
  2344  0000CA                     irobot_leds@LEDBit:
  2345                           	opt stack 0
  2346  0000CA                     itos@Data:
  2347                           	opt stack 0
  2348  0000CA                     irobot_move@moveSpeed:
  2349                           	opt stack 0
  2350                           
  2351                           ; 2 bytes @ 0x10
  2352  0000CA                     	ds	1
  2353  0000CB                     ??_Timer2_Init:
  2354  0000CB                     ??_Timer0_Init:
  2355  0000CB                     Port_SetPin@pPin:
  2356                           	opt stack 0
  2357  0000CB                     Port_Set@pValue:
  2358                           	opt stack 0
  2359  0000CB                     Word_SetPair@pPair:
  2360                           	opt stack 0
  2361  0000CB                     PortProperty_Valid@pPinDrive:
  2362                           	opt stack 0
  2363  0000CB                     Console_MakeField@y:
  2364                           	opt stack 0
  2365  0000CB                     irobot_leds@powerColour:
  2366                           	opt stack 0
  2367  0000CB                     ___fldiv@new_exp:
  2368                           	opt stack 0
  2369                           
  2370                           ; 2 bytes @ 0x11
  2371  0000CB                     	ds	1
  2372  0000CC                     ??_Port_Set:
  2373  0000CC                     Port_SetPin@pValue:
  2374                           	opt stack 0
  2375  0000CC                     Word_SetPair@pValue:
  2376                           	opt stack 0
  2377  0000CC                     PortProperty_Valid@pPin:
  2378                           	opt stack 0
  2379  0000CC                     irobot_leds@powerLuminosity:
  2380                           	opt stack 0
  2381  0000CC                     LCD_DrawField@pField:
  2382                           	opt stack 0
  2383  0000CC                     itos@Length:
  2384                           	opt stack 0
  2385  0000CC                     irobot_move@moveTurnRadius:
  2386                           	opt stack 0
  2387  0000CC                     Timer2_Init@RDIV:
  2388                           	opt stack 0
  2389  0000CC                     ___flmul@a:
  2390                           	opt stack 0
  2391                           
  2392                           ; 4 bytes @ 0x12
  2393  0000CC                     	ds	1
  2394  0000CD                     ??_PortProperty_Valid:
  2395  0000CD                     ??_LCD_FillRectangle:
  2396  0000CD                     Port_SetPin@Type:
  2397                           	opt stack 0
  2398  0000CD                     Console_PrintChar@pInput:
  2399                           	opt stack 0
  2400  0000CD                     irobot_leds@isScript:
  2401                           	opt stack 0
  2402  0000CD                     Timer0_Init@pCPUClock:
  2403                           	opt stack 0
  2404  0000CD                     ___fldiv@grs:
  2405                           	opt stack 0
  2406                           
  2407                           ; 4 bytes @ 0x13
  2408  0000CD                     	ds	1
  2409  0000CE                     ??_irobot_move:
  2410  0000CE                     LED_Set@pValue:
  2411                           	opt stack 0
  2412  0000CE                     putch@c:
  2413                           	opt stack 0
  2414  0000CE                     irobot_led_power_on@powerOnColour:
  2415                           	opt stack 0
  2416  0000CE                     Port_TogglePin@pInput:
  2417                           	opt stack 0
  2418  0000CE                     itos@Out:
  2419                           	opt stack 0
  2420  0000CE                     LCD_DrawField@pPoint:
  2421                           	opt stack 0
  2422                           
  2423                           ; 4 bytes @ 0x14
  2424  0000CE                     	ds	1
  2425  0000CF                     ?_printf:
  2426                           	opt stack 0
  2427  0000CF                     LCD_FillRectangle@i:
  2428                           	opt stack 0
  2429  0000CF                     LED_Set@pLED:
  2430                           	opt stack 0
  2431  0000CF                     irobot_query_and_update@packetIDs:
  2432                           	opt stack 0
  2433  0000CF                     printf@f:
  2434                           	opt stack 0
  2435  0000CF                     PortProperty_Valid@Errors:
  2436                           	opt stack 0
  2437                           
  2438                           ; 16 bytes @ 0x15
  2439  0000CF                     	ds	1
  2440  0000D0                     ??___flmul:
  2441  0000D0                     LCD_FillRectangle@j:
  2442                           	opt stack 0
  2443  0000D0                     Port_TogglePin@pPin:
  2444                           	opt stack 0
  2445  0000D0                     HMI_SetNumber@pInput:
  2446                           	opt stack 0
  2447  0000D0                     Timer2_Init@pCPUClock:
  2448                           	opt stack 0
  2449                           
  2450                           ; 4 bytes @ 0x16
  2451  0000D0                     	ds	1
  2452  0000D1                     Port_TogglePin@Value:
  2453                           	opt stack 0
  2454  0000D1                     irobot_query_and_update@streamSize:
  2455                           	opt stack 0
  2456  0000D1                     ___fldiv@bexp:
  2457                           	opt stack 0
  2458  0000D1                     Timer0_Init@DIVIDE:
  2459                           	opt stack 0
  2460                           
  2461                           ; 4 bytes @ 0x17
  2462  0000D1                     	ds	1
  2463  0000D2                     LED_Toggle@pLED:
  2464                           	opt stack 0
  2465  0000D2                     irobot_query_and_update@numberOfPacketRequests:
  2466                           	opt stack 0
  2467  0000D2                     irobot_move@isScript:
  2468                           	opt stack 0
  2469  0000D2                     ___fldiv@aexp:
  2470                           	opt stack 0
  2471  0000D2                     LCD_DrawField@pSize:
  2472                           	opt stack 0
  2473                           
  2474                           ; 4 bytes @ 0x18
  2475  0000D2                     	ds	1
  2476  0000D3                     Event_DIPSwitch@pState:
  2477                           	opt stack 0
  2478  0000D3                     Event_TestButton@pState:
  2479                           	opt stack 0
  2480  0000D3                     irobot_query_and_update@packetVariable:
  2481                           	opt stack 0
  2482  0000D3                     irobot_stop_motion@isScript:
  2483                           	opt stack 0
  2484  0000D3                     irobot_move_straight@straightSpeed:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x19
  2488  0000D3                     	ds	1
  2489  0000D4                     Event_DIPSwitch@Bar:
  2490                           	opt stack 0
  2491  0000D4                     irobot_query_and_update@j:
  2492                           	opt stack 0
  2493  0000D4                     ___flmul@sign:
  2494                           	opt stack 0
  2495  0000D4                     Timer2_Init@DIVIDE:
  2496                           	opt stack 0
  2497                           
  2498                           ; 4 bytes @ 0x1A
  2499  0000D4                     	ds	1
  2500  0000D5                     irobot_query_and_update@startIndex:
  2501                           	opt stack 0
  2502  0000D5                     ___flmul@aexp:
  2503                           	opt stack 0
  2504  0000D5                     Button_Poll@pButton:
  2505                           	opt stack 0
  2506  0000D5                     Motor_Speed@pMotor:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x1B
  2510  0000D5                     	ds	1
  2511  0000D6                     ??_LCD_DrawField:
  2512  0000D6                     irobot_query_and_update@i:
  2513                           	opt stack 0
  2514  0000D6                     ___flmul@grs:
  2515                           	opt stack 0
  2516                           
  2517                           ; 4 bytes @ 0x1C
  2518  0000D6                     	ds	1
  2519  0000D7                     Button_Poll@pIncrement:
  2520                           	opt stack 0
  2521  0000D7                     Motor_Speed@pFrequency:
  2522                           	opt stack 0
  2523  0000D7                     irobot_rotate@rotateAngle:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x1D
  2527  0000D7                     	ds	1
  2528  0000D8                     ??_Button_Poll:
  2529  0000D8                     LCD_DrawField@count:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x1E
  2533  0000D8                     	ds	1
  2534  0000D9                     irobot_rotate@rotateSpeed:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x1F
  2538  0000D9                     	ds	1
  2539  0000DA                     LCD_DrawField@xmax:
  2540                           	opt stack 0
  2541  0000DA                     ___flmul@bexp:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x20
  2545  0000DA                     	ds	1
  2546  0000DB                     ??_printf:
  2547  0000DB                     ??_irobot_rotate:
  2548  0000DB                     LCD_DrawField@ymax:
  2549                           	opt stack 0
  2550  0000DB                     ___flmul@prod:
  2551                           	opt stack 0
  2552                           
  2553                           ; 4 bytes @ 0x21
  2554  0000DB                     	ds	1
  2555  0000DC                     LCD_DrawField@i:
  2556                           	opt stack 0
  2557  0000DC                     printf@prec:
  2558                           	opt stack 0
  2559  0000DC                     Port_Set@TypeRequired:
  2560                           	opt stack 0
  2561                           
  2562                           ; 2 bytes @ 0x22
  2563  0000DC                     	ds	1
  2564  0000DD                     ??_Console_Render:
  2565  0000DD                     Button_Poll@Pin:
  2566                           	opt stack 0
  2567  0000DD                     irobot_rotate@isScript:
  2568                           	opt stack 0
  2569  0000DD                     printf@flag:
  2570                           	opt stack 0
  2571                           
  2572                           ; 1 bytes @ 0x23
  2573  0000DD                     	ds	1
  2574  0000DE                     Port_Set@TypeActual:
  2575                           	opt stack 0
  2576  0000DE                     irobot_rotate@rotateDirection:
  2577                           	opt stack 0
  2578  0000DE                     printf@ap:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0x24
  2582  0000DE                     	ds	1
  2583  0000DF                     PortProperty_Valid@Pair:
  2584                           	opt stack 0
  2585  0000DF                     Console_Render@temp:
  2586                           	opt stack 0
  2587  0000DF                     ___flmul@temp:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x25
  2591  0000DF                     	ds	1
  2592  0000E0                     Port_Set@Type:
  2593                           	opt stack 0
  2594  0000E0                     Port_CheckPairType@pInput:
  2595                           	opt stack 0
  2596  0000E0                     Port_SetPinType@pInput:
  2597                           	opt stack 0
  2598  0000E0                     irobot_rotate@angleTotal:
  2599                           	opt stack 0
  2600  0000E0                     printf@val:
  2601                           	opt stack 0
  2602  0000E0                     Console_Render@lCursor:
  2603                           	opt stack 0
  2604                           
  2605                           ; 4 bytes @ 0x26
  2606  0000E0                     	ds	1
  2607  0000E1                     ?_ADC_Voltage:
  2608                           	opt stack 0
  2609  0000E1                     ADC_Voltage@pInput:
  2610                           	opt stack 0
  2611                           
  2612                           ; 2 bytes @ 0x27
  2613  0000E1                     	ds	1
  2614  0000E2                     Port_CheckPairType@pPair:
  2615                           	opt stack 0
  2616  0000E2                     Port_SetPinType@pPin:
  2617                           	opt stack 0
  2618  0000E2                     printf@c:
  2619                           	opt stack 0
  2620                           
  2621                           ; 1 bytes @ 0x28
  2622  0000E2                     	ds	1
  2623  0000E3                     Port_CheckPairType@pDrive:
  2624                           	opt stack 0
  2625  0000E3                     Port_SetPinType@pType:
  2626                           	opt stack 0
  2627                           
  2628                           ; 1 bytes @ 0x29
  2629  0000E3                     	ds	1
  2630  0000E4                     Port_CheckPairType@Pin1:
  2631                           	opt stack 0
  2632  0000E4                     Port_SetPinType@Output:
  2633                           	opt stack 0
  2634  0000E4                     Console_Render@x:
  2635                           	opt stack 0
  2636                           
  2637                           ; 1 bytes @ 0x2A
  2638  0000E4                     	ds	1
  2639  0000E5                     ??_ADC_Voltage:
  2640  0000E5                     Port_CheckPairType@Pin2:
  2641                           	opt stack 0
  2642  0000E5                     Console_Render@y:
  2643                           	opt stack 0
  2644  0000E5                     Port_SetPinType@Props:
  2645                           	opt stack 0
  2646                           
  2647                           ; 2 bytes @ 0x2B
  2648  0000E5                     	ds	1
  2649  0000E6                     Port_CheckPairType@Output:
  2650                           	opt stack 0
  2651  0000E6                     mode2@dist:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x2C
  2655  0000E6                     	ds	1
  2656  0000E7                     LED_Init@pLED:
  2657                           	opt stack 0
  2658  0000E7                     Port_CheckPairType@Props:
  2659                           	opt stack 0
  2660  0000E7                     Motor_Init@pMotor:
  2661                           	opt stack 0
  2662  0000E7                     SPI_Init@pClock:
  2663                           	opt stack 0
  2664  0000E7                     ADC_Voltage@max:
  2665                           	opt stack 0
  2666                           
  2667                           ; 4 bytes @ 0x2D
  2668  0000E7                     	ds	2
  2669  0000E9                     Port_CheckQuadType@pInput:
  2670                           	opt stack 0
  2671  0000E9                     Motor_Init@pAddress:
  2672                           	opt stack 0
  2673                           
  2674                           ; 2 bytes @ 0x2F
  2675  0000E9                     	ds	2
  2676  0000EB                     Port_CheckQuadType@pQuad:
  2677                           	opt stack 0
  2678  0000EB                     SPI_Init@pChannel:
  2679                           	opt stack 0
  2680  0000EB                     ADC_Voltage@ref:
  2681                           	opt stack 0
  2682                           
  2683                           ; 4 bytes @ 0x31
  2684  0000EB                     	ds	1
  2685  0000EC                     Port_CheckQuadType@pDrive:
  2686                           	opt stack 0
  2687  0000EC                     SPI_Init@pMode:
  2688                           	opt stack 0
  2689                           
  2690                           ; 1 bytes @ 0x32
  2691  0000EC                     	ds	1
  2692  0000ED                     Port_CheckQuadType@Pair1:
  2693                           	opt stack 0
  2694  0000ED                     SPI_Init@pInput:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x33
  2698  0000ED                     	ds	1
  2699  0000EE                     Port_CheckQuadType@Pair2:
  2700                           	opt stack 0
  2701                           
  2702                           ; 1 bytes @ 0x34
  2703  0000EE                     	ds	1
  2704  0000EF                     ??_LCD_Init:
  2705  0000EF                     Port_CheckQuadType@Output:
  2706                           	opt stack 0
  2707  0000EF                     ADC_Voltage@output:
  2708                           	opt stack 0
  2709                           
  2710                           ; 4 bytes @ 0x35
  2711  0000EF                     	ds	1
  2712  0000F0                     Port_CheckPortType@pInput:
  2713                           	opt stack 0
  2714  0000F0                     Port_SetQuadType@pInput:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x36
  2718  0000F0                     	ds	1
  2719  0000F1                     LCD_Init@i:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x37
  2723  0000F1                     	ds	1
  2724  0000F2                     Port_CheckPortType@pDrive:
  2725                           	opt stack 0
  2726  0000F2                     Port_SetQuadType@pQuad:
  2727                           	opt stack 0
  2728                           
  2729                           ; 1 bytes @ 0x38
  2730  0000F2                     	ds	1
  2731  0000F3                     ?___fltol:
  2732                           	opt stack 0
  2733  0000F3                     Port_CheckPortType@Output:
  2734                           	opt stack 0
  2735  0000F3                     Port_SetQuadType@pType:
  2736                           	opt stack 0
  2737  0000F3                     ___fltol@f1:
  2738                           	opt stack 0
  2739                           
  2740                           ; 4 bytes @ 0x39
  2741  0000F3                     	ds	1
  2742  0000F4                     Port_SetQuadType@Output:
  2743                           	opt stack 0
  2744  0000F4                     Port_SetType@pInput:
  2745                           	opt stack 0
  2746                           
  2747                           ; 2 bytes @ 0x3A
  2748  0000F4                     	ds	1
  2749  0000F5                     HMI_Init@in:
  2750                           	opt stack 0
  2751                           
  2752                           ; 2 bytes @ 0x3B
  2753  0000F5                     	ds	1
  2754  0000F6                     Port_SetType@pType:
  2755                           	opt stack 0
  2756                           
  2757                           ; 1 bytes @ 0x3C
  2758  0000F6                     	ds	1
  2759  0000F7                     ??_Port_SetType:
  2760  0000F7                     ___fltol@sign1:
  2761                           	opt stack 0
  2762                           
  2763                           ; 1 bytes @ 0x3D
  2764  0000F7                     	ds	1
  2765  0000F8                     ___fltol@exp1:
  2766                           	opt stack 0
  2767                           
  2768                           ; 1 bytes @ 0x3E
  2769  0000F8                     	ds	1
  2770  0000F9                     tblptru	equ	0xFF8
  2771                           tblptrh	equ	0xFF7
  2772                           tblptrl	equ	0xFF6
  2773                           tablat	equ	0xFF5
  2774                           postinc0	equ	0xFEE
  2775                           wreg	equ	0xFE8
  2776                           postdec1	equ	0xFE5
  2777                           fsr1h	equ	0xFE2
  2778                           fsr1l	equ	0xFE1
  2779                           
  2780                           ; 1 bytes @ 0x3F
  2781                           
  2782                           	psect	cstackCOMRAM
  2783  000001                     __pcstackCOMRAM:
  2784                           	opt stack 0
  2785  000001                     i2Byte_SetBit@pInput:
  2786                           	opt stack 0
  2787  000001                     i2Byte_GetZone@pInput:
  2788                           	opt stack 0
  2789  000001                     i2delay_us@us:
  2790                           	opt stack 0
  2791  000001                     i2MXK_Queue@pCallback:
  2792                           	opt stack 0
  2793                           
  2794                           ; 3 bytes @ 0x0
  2795  000001                     	ds	2
  2796  000003                     i2Byte_SetBit@pBit:
  2797                           	opt stack 0
  2798  000003                     i2Byte_GetZone@pMax:
  2799                           	opt stack 0
  2800  000003                     i2delay_us@u:
  2801                           	opt stack 0
  2802                           
  2803                           ; 4 bytes @ 0x2
  2804  000003                     	ds	1
  2805  000004                     i2Byte_SetBit@pValue:
  2806                           	opt stack 0
  2807  000004                     i2Byte_GetZone@pChunk:
  2808                           	opt stack 0
  2809                           
  2810                           ; 1 bytes @ 0x3
  2811  000004                     	ds	1
  2812  000005                     ??i2_Byte_SetBit:
  2813  000005                     i2Byte_GetZone@pChunkSize:
  2814                           	opt stack 0
  2815                           
  2816                           ; 1 bytes @ 0x4
  2817  000005                     	ds	1
  2818  000006                     ??i2_Byte_GetZone:
  2819                           
  2820                           ; 1 bytes @ 0x5
  2821  000006                     	ds	1
  2822  000007                     i2Byte_GetZone@MASK:
  2823                           	opt stack 0
  2824  000007                     i2MXK_SwitchTo@CUR:
  2825                           	opt stack 0
  2826                           
  2827                           ; 1 bytes @ 0x6
  2828  000007                     	ds	1
  2829  000008                     i2Byte_GetZone@Offset:
  2830                           	opt stack 0
  2831  000008                     i2MXK_SwitchTo@pModule:
  2832                           	opt stack 0
  2833                           
  2834                           ; 1 bytes @ 0x7
  2835  000008                     	ds	1
  2836  000009                     i2Byte_GetZone@Output:
  2837                           	opt stack 0
  2838                           
  2839                           ; 1 bytes @ 0x8
  2840  000009                     	ds	1
  2841  00000A                     i2Byte_GetPair@pInput:
  2842                           	opt stack 0
  2843                           
  2844                           ; 2 bytes @ 0x9
  2845  00000A                     	ds	2
  2846  00000C                     i2Byte_GetPair@pPair:
  2847                           	opt stack 0
  2848                           
  2849                           ; 1 bytes @ 0xB
  2850  00000C                     	ds	1
  2851  00000D                     i2Word_GetPair@pInput:
  2852                           	opt stack 0
  2853                           
  2854                           ; 2 bytes @ 0xC
  2855  00000D                     	ds	2
  2856  00000F                     i2Word_GetPair@pPair:
  2857                           	opt stack 0
  2858                           
  2859                           ; 1 bytes @ 0xE
  2860  00000F                     	ds	1
  2861  000010                     i2Port_SetPin@pInput:
  2862                           	opt stack 0
  2863                           
  2864                           ; 2 bytes @ 0xF
  2865  000010                     	ds	2
  2866  000012                     i2Port_SetPin@pPin:
  2867                           	opt stack 0
  2868                           
  2869                           ; 1 bytes @ 0x11
  2870  000012                     	ds	1
  2871  000013                     i2Port_SetPin@pValue:
  2872                           	opt stack 0
  2873                           
  2874                           ; 1 bytes @ 0x12
  2875  000013                     	ds	1
  2876  000014                     i2Port_SetPin@Type:
  2877                           	opt stack 0
  2878                           
  2879                           ; 1 bytes @ 0x13
  2880  000014                     	ds	1
  2881  000015                     
  2882                           ; 1 bytes @ 0x14
  2883  000015                     	ds	2
  2884  000017                     ??_ISR_Function:
  2885                           
  2886                           ; 1 bytes @ 0x16
  2887  000017                     	ds	18
  2888                           tblptru	equ	0xFF8
  2889                           tblptrh	equ	0xFF7
  2890                           tblptrl	equ	0xFF6
  2891                           tablat	equ	0xFF5
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           postdec1	equ	0xFE5
  2895                           fsr1h	equ	0xFE2
  2896                           fsr1l	equ	0xFE1
  2897                           
  2898 ;;
  2899 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2900 ;;
  2901 ;; *************** function _main *****************
  2902 ;; Defined at:
  2903 ;;		line 348 in file "main.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;		None
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  1    wreg      void 
  2910 ;; Registers used:
  2911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;Total ram usage:        2 bytes
  2922 ;; Hardware stack levels required when called:   18
  2923 ;; This function calls:
  2924 ;;		_Console_Render
  2925 ;;		_HMI_Poll
  2926 ;;		_MXK_Dequeue
  2927 ;;		_MXK_Release
  2928 ;;		_MXK_SwitchTo
  2929 ;;		_getMode
  2930 ;;		_init
  2931 ;;		_mode1
  2932 ;;		_mode2
  2933 ;;		_mode3
  2934 ;;		_mode4
  2935 ;;		_printf
  2936 ;; This function is called by:
  2937 ;;		Startup code after reset
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text0
  2942  013B6E                     __ptext0:
  2943                           	opt stack 0
  2944  013B6E                     _main:
  2945                           	opt stack 13
  2946                           
  2947                           ;main.c: 349: init();
  2948                           
  2949                           ;incstack = 0
  2950  013B6E  EC2D  F0A4         	call	_init	;wreg free
  2951  013B72                     l2407:
  2952                           
  2953                           ;main.c: 351: getMode();
  2954  013B72  ECFF  F0A0         	call	_getMode	;wreg free
  2955                           
  2956                           ;main.c: 352: switch (mode) {
  2957  013B76  D053               	goto	l2408
  2958  013B78                     
  2959                           ;main.c: 354: mode1();
  2960  013B78  EC6A  F086         	call	_mode1	;wreg free
  2961                           
  2962                           ;main.c: 355: break;
  2963  013B7C  D7FA               	goto	l2407
  2964  013B7E                     
  2965                           ;main.c: 357: mode2();
  2966  013B7E  EC44  F09D         	call	_mode2	;wreg free
  2967                           
  2968                           ;main.c: 358: break;
  2969  013B82  D7F7               	goto	l2407
  2970  013B84                     
  2971                           ;main.c: 360: mode3();
  2972  013B84  EC3A  F0B3         	call	_mode3	;wreg free
  2973                           
  2974                           ;main.c: 361: break;
  2975  013B88  D7F4               	goto	l2407
  2976  013B8A                     
  2977                           ;main.c: 363: mode4();
  2978  013B8A  ECBA  F09A         	call	_mode4	;wreg free
  2979                           
  2980                           ;main.c: 364: break;
  2981  013B8E  D7F1               	goto	l2407
  2982  013B90                     
  2983                           ;main.c: 366: if (MXK_SwitchTo(eMXK_HMI)) {
  2984  013B90  0E01               	movlw	1
  2985  013B92  EC83  F0AF         	call	_MXK_SwitchTo
  2986  013B96  0900               	iorlw	0
  2987  013B98  B4D8               	btfsc	status,2,c
  2988  013B9A  D7EB               	goto	l2407
  2989                           
  2990                           ;main.c: 367: printf("%c", (char)35);
  2991  013B9C  0EFB               	movlw	low STR_1
  2992  013B9E  0100               	movlb	0	; () banked
  2993  013BA0  6FCF               	movwf	printf@f& (0+255),b
  2994  013BA2  0EFF               	movlw	high STR_1
  2995  013BA4  0100               	movlb	0	; () banked
  2996  013BA6  6FD0               	movwf	(printf@f+1)& (0+255),b
  2997  013BA8  0E00               	movlw	0
  2998  013BAA  0100               	movlb	0	; () banked
  2999  013BAC  6FD2               	movwf	(?_printf+3)& (0+255),b
  3000  013BAE  0E23               	movlw	35
  3001  013BB0  6FD1               	movwf	(?_printf+2)& (0+255),b
  3002  013BB2  EC7F  F092         	call	_printf	;wreg free
  3003                           
  3004                           ;main.c: 368: printf("Please select mode.\n");
  3005  013BB6  0ED8               	movlw	low STR_12
  3006  013BB8  0100               	movlb	0	; () banked
  3007  013BBA  6FCF               	movwf	printf@f& (0+255),b
  3008  013BBC  0EFF               	movlw	high STR_12
  3009  013BBE  0100               	movlb	0	; () banked
  3010  013BC0  6FD0               	movwf	(printf@f+1)& (0+255),b
  3011  013BC2  EC7F  F092         	call	_printf	;wreg free
  3012                           
  3013                           ;main.c: 369: printf("                   \n");
  3014  013BC6  0EC3               	movlw	low STR_13
  3015  013BC8  0100               	movlb	0	; () banked
  3016  013BCA  6FCF               	movwf	printf@f& (0+255),b
  3017  013BCC  0EFF               	movlw	high STR_13
  3018  013BCE  0100               	movlb	0	; () banked
  3019  013BD0  6FD0               	movwf	(printf@f+1)& (0+255),b
  3020  013BD2  EC7F  F092         	call	_printf	;wreg free
  3021                           
  3022                           ;main.c: 370: printf("                   \n");
  3023  013BD6  0EC3               	movlw	low STR_13
  3024  013BD8  0100               	movlb	0	; () banked
  3025  013BDA  6FCF               	movwf	printf@f& (0+255),b
  3026  013BDC  0EFF               	movlw	high STR_13
  3027  013BDE  0100               	movlb	0	; () banked
  3028  013BE0  6FD0               	movwf	(printf@f+1)& (0+255),b
  3029  013BE2  EC7F  F092         	call	_printf	;wreg free
  3030                           
  3031                           ;main.c: 371: printf("                   \n");
  3032  013BE6  0EC3               	movlw	low STR_13
  3033  013BE8  0100               	movlb	0	; () banked
  3034  013BEA  6FCF               	movwf	printf@f& (0+255),b
  3035  013BEC  0EFF               	movlw	high STR_13
  3036  013BEE  0100               	movlb	0	; () banked
  3037  013BF0  6FD0               	movwf	(printf@f+1)& (0+255),b
  3038  013BF2  EC7F  F092         	call	_printf	;wreg free
  3039                           
  3040                           ;main.c: 372: printf("                   \n");
  3041  013BF6  0EC3               	movlw	low STR_13
  3042  013BF8  0100               	movlb	0	; () banked
  3043  013BFA  6FCF               	movwf	printf@f& (0+255),b
  3044  013BFC  0EFF               	movlw	high STR_13
  3045  013BFE  0100               	movlb	0	; () banked
  3046  013C00  6FD0               	movwf	(printf@f+1)& (0+255),b
  3047  013C02  EC7F  F092         	call	_printf	;wreg free
  3048                           
  3049                           ;main.c: 373: Console_Render();
  3050  013C06  EC93  F08F         	call	_Console_Render	;wreg free
  3051                           
  3052                           ;main.c: 374: HMI_Poll();
  3053  013C0A  EC79  F0AA         	call	_HMI_Poll	;wreg free
  3054                           
  3055                           ;main.c: 375: if (MXK_Release())
  3056  013C0E  ECB1  F0B2         	call	_MXK_Release	;wreg free
  3057  013C12  0900               	iorlw	0
  3058  013C14  B4D8               	btfsc	status,2,c
  3059  013C16  D7AD               	goto	l2407
  3060                           
  3061                           ;main.c: 376: MXK_Dequeue();
  3062  013C18  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  3063                           
  3064                           ;main.c: 377: }
  3065                           ;main.c: 378: }
  3066  013C1C  D7AA               	goto	l2407
  3067  013C1E                     l2408:
  3068  013C1E  C33C  F3FE         	movff	_mode,??_main
  3069  013C22  C33D  F3FF         	movff	_mode+1,??_main+1
  3070                           
  3071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3072                           ; Switch size 1, requested type "space"
  3073                           ; Number of cases is 1, Range of values is 0 to 0
  3074                           ; switch strategies available:
  3075                           ; Name         Instructions Cycles
  3076                           ; simple_byte            4     3 (average)
  3077                           ;	Chosen strategy is simple_byte
  3078  013C26  0103               	movlb	3	; () banked
  3079  013C28  51FF               	movf	(??_main+1)& (0+255),w,b
  3080  013C2A  0A00               	xorlw	0	; case 0
  3081  013C2C  A4D8               	btfss	status,2,c
  3082  013C2E  D7B0               	goto	l2414
  3083                           
  3084                           ; BSR set to: 3
  3085                           ; Switch size 1, requested type "space"
  3086                           ; Number of cases is 4, Range of values is 1 to 4
  3087                           ; switch strategies available:
  3088                           ; Name         Instructions Cycles
  3089                           ; simple_byte           13     7 (average)
  3090                           ;	Chosen strategy is simple_byte
  3091  013C30  0103               	movlb	3	; () banked
  3092  013C32  51FE               	movf	??_main& (0+255),w,b
  3093  013C34  0A01               	xorlw	1	; case 1
  3094  013C36  B4D8               	btfsc	status,2,c
  3095  013C38  D79F               	goto	l2409
  3096  013C3A  0A03               	xorlw	3	; case 2
  3097  013C3C  B4D8               	btfsc	status,2,c
  3098  013C3E  D79F               	goto	l2411
  3099  013C40  0A01               	xorlw	1	; case 3
  3100  013C42  B4D8               	btfsc	status,2,c
  3101  013C44  D79F               	goto	l2412
  3102  013C46  0A07               	xorlw	7	; case 4
  3103  013C48  B4D8               	btfsc	status,2,c
  3104  013C4A  D79F               	goto	l2413
  3105  013C4C  D7A1               	goto	l2414
  3106  013C4E                     __end_of_main:
  3107                           	opt stack 0
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1h	equ	0xFE2
  3116                           fsr1l	equ	0xFE1
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _mode4 *****************
  3120 ;; Defined at:
  3121 ;;		line 322 in file "main.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;Total ram usage:        0 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:   17
  3142 ;; This function calls:
  3143 ;;		_Console_Render
  3144 ;;		_MXK_Dequeue
  3145 ;;		_MXK_Release
  3146 ;;		_MXK_SwitchTo
  3147 ;;		_delay_ms
  3148 ;;		_findClosestWall
  3149 ;;		_irobot_move_straight
  3150 ;;		_irobot_song_play
  3151 ;;		_irobot_stop_motion
  3152 ;;		_printf
  3153 ;;		_safeToGo
  3154 ;;		_update_bump_and_cliff
  3155 ;;		_update_distance
  3156 ;; This function is called by:
  3157 ;;		_main
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text1
  3162  013574                     __ptext1:
  3163                           	opt stack 0
  3164  013574                     _mode4:
  3165                           	opt stack 13
  3166                           
  3167                           ;main.c: 323: safeToGo();
  3168                           
  3169                           ; BSR set to: 3
  3170                           ;incstack = 0
  3171  013574  EC42  F0AE         	call	_safeToGo	;wreg free
  3172                           
  3173                           ;main.c: 324: findClosestWall();
  3174  013578  EC62  F084         	call	_findClosestWall	;wreg free
  3175                           
  3176                           ;main.c: 325: delay_ms(100);
  3177  01357C  0E00               	movlw	0
  3178  01357E  0100               	movlb	0	; () banked
  3179  013580  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  3180  013582  0E64               	movlw	100
  3181  013584  6FBA               	movwf	delay_ms@ms& (0+255),b
  3182  013586  EC8C  F0AB         	call	_delay_ms	;wreg free
  3183                           
  3184                           ;main.c: 326: irobot_move_straight(200);
  3185  01358A  0E00               	movlw	0
  3186  01358C  0100               	movlb	0	; () banked
  3187  01358E  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3188  013590  0EC8               	movlw	200
  3189  013592  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3190  013594  ECDA  F0B2         	call	_irobot_move_straight	;wreg free
  3191                           
  3192                           ;main.c: 327: dist = 0;
  3193  013598  0E00               	movlw	0
  3194  01359A  0100               	movlb	0	; () banked
  3195  01359C  6F6A               	movwf	(_dist+1)& (0+255),b
  3196  01359E  0E00               	movlw	0
  3197  0135A0  6F69               	movwf	_dist& (0+255),b
  3198                           
  3199                           ;main.c: 328: while (dist < 300 && !iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDro
      +                          pLeft) {
  3200  0135A2  D00C               	goto	l2395
  3201  0135A4                     
  3202                           ; BSR set to: 0
  3203                           ;main.c: 329: update_distance();
  3204                           
  3205                           ; BSR set to: 0
  3206  0135A4  EC59  F0B3         	call	_update_distance	;wreg free
  3207                           
  3208                           ;main.c: 330: dist += iRDistance;
  3209  0135A8  0100               	movlb	0	; () banked
  3210  0135AA  5179               	movf	_iRDistance& (0+255),w,b
  3211  0135AC  0100               	movlb	0	; () banked
  3212  0135AE  2769               	addwf	_dist& (0+255),f,b
  3213  0135B0  0100               	movlb	0	; () banked
  3214  0135B2  517A               	movf	(_iRDistance+1)& (0+255),w,b
  3215  0135B4  0100               	movlb	0	; () banked
  3216  0135B6  236A               	addwfc	(_dist+1)& (0+255),f,b
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 331: update_bump_and_cliff();
  3220  0135B8  EC7E  F0B0         	call	_update_bump_and_cliff	;wreg free
  3221  0135BC                     l2395:
  3222  0135BC  0100               	movlb	0	; () banked
  3223  0135BE  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  3224  0135C0  D008               	goto	u13940
  3225  0135C2  0E2C               	movlw	44
  3226  0135C4  0100               	movlb	0	; () banked
  3227  0135C6  5D69               	subwf	_dist& (0+255),w,b
  3228  0135C8  0E01               	movlw	1
  3229  0135CA  0100               	movlb	0	; () banked
  3230  0135CC  596A               	subwfb	(_dist+1)& (0+255),w,b
  3231  0135CE  B0D8               	btfsc	status,0,c
  3232  0135D0  D010               	goto	u13980
  3233  0135D2                     u13940:
  3234                           
  3235                           ; BSR set to: 0
  3236  0135D2  0100               	movlb	0	; () banked
  3237  0135D4  5187               	movf	_iRBumpLeft& (0+255),w,b
  3238  0135D6  A4D8               	btfss	status,2,c
  3239  0135D8  D00C               	goto	u13980
  3240                           
  3241                           ; BSR set to: 0
  3242  0135DA  0100               	movlb	0	; () banked
  3243  0135DC  5188               	movf	_iRBumpRight& (0+255),w,b
  3244  0135DE  A4D8               	btfss	status,2,c
  3245  0135E0  D008               	goto	u13980
  3246                           
  3247                           ; BSR set to: 0
  3248  0135E2  0100               	movlb	0	; () banked
  3249  0135E4  5186               	movf	_iRDropRight& (0+255),w,b
  3250  0135E6  A4D8               	btfss	status,2,c
  3251  0135E8  D004               	goto	u13980
  3252                           
  3253                           ; BSR set to: 0
  3254  0135EA  0100               	movlb	0	; () banked
  3255  0135EC  5185               	movf	_iRDropLeft& (0+255),w,b
  3256  0135EE  B4D8               	btfsc	status,2,c
  3257  0135F0  D7D9               	goto	l2396
  3258  0135F2                     u13980:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 332: }
  3262                           ;main.c: 334: irobot_stop_motion(0);
  3263                           
  3264                           ; BSR set to: 0
  3265                           
  3266                           ; BSR set to: 0
  3267  0135F2  0E00               	movlw	0
  3268  0135F4  ECF8  F0AE         	call	_irobot_stop_motion
  3269                           
  3270                           ;main.c: 335: if (MXK_SwitchTo(eMXK_HMI)) {
  3271  0135F8  0E01               	movlw	1
  3272  0135FA  EC83  F0AF         	call	_MXK_SwitchTo
  3273  0135FE  0900               	iorlw	0
  3274  013600  B4D8               	btfsc	status,2,c
  3275  013602  D037               	goto	l2401
  3276                           
  3277                           ;main.c: 336: printf("%c", (char)35);
  3278  013604  0EFB               	movlw	low STR_1
  3279  013606  0100               	movlb	0	; () banked
  3280  013608  6FCF               	movwf	printf@f& (0+255),b
  3281  01360A  0EFF               	movlw	high STR_1
  3282  01360C  0100               	movlb	0	; () banked
  3283  01360E  6FD0               	movwf	(printf@f+1)& (0+255),b
  3284  013610  0E00               	movlw	0
  3285  013612  0100               	movlb	0	; () banked
  3286  013614  6FD2               	movwf	(?_printf+3)& (0+255),b
  3287  013616  0E23               	movlw	35
  3288  013618  6FD1               	movwf	(?_printf+2)& (0+255),b
  3289  01361A  EC7F  F092         	call	_printf	;wreg free
  3290                           
  3291                           ;main.c: 337: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\nAng
      +                          leToTurn: %d\n", MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight, angleToClosestWal
      +                          l -67);
  3292  01361E  0E0D               	movlw	low STR_10
  3293  013620  0100               	movlb	0	; () banked
  3294  013622  6FCF               	movwf	printf@f& (0+255),b
  3295  013624  0EFF               	movlw	high STR_10
  3296  013626  0100               	movlb	0	; () banked
  3297  013628  6FD0               	movwf	(printf@f+1)& (0+255),b
  3298  01362A  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3299  01362E  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3300  013632  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3301  013636  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3302  01363A  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3303  01363E  0100               	movlb	0	; () banked
  3304  013640  6BD6               	clrf	(?_printf+7)& (0+255),b
  3305  013642  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3306  013646  0100               	movlb	0	; () banked
  3307  013648  6BD8               	clrf	(?_printf+9)& (0+255),b
  3308  01364A  0EBD               	movlw	189
  3309  01364C  0100               	movlb	0	; () banked
  3310  01364E  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3311  013650  0100               	movlb	0	; () banked
  3312  013652  6FD9               	movwf	(?_printf+10)& (0+255),b
  3313  013654  0EFF               	movlw	255
  3314  013656  0100               	movlb	0	; () banked
  3315  013658  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3316  01365A  0100               	movlb	0	; () banked
  3317  01365C  6FDA               	movwf	(?_printf+11)& (0+255),b
  3318  01365E  EC7F  F092         	call	_printf	;wreg free
  3319                           
  3320                           ;main.c: 338: Console_Render();
  3321  013662  EC93  F08F         	call	_Console_Render	;wreg free
  3322                           
  3323                           ;main.c: 339: if (MXK_Release())
  3324  013666  ECB1  F0B2         	call	_MXK_Release	;wreg free
  3325  01366A  0900               	iorlw	0
  3326  01366C  A4D8               	btfss	status,2,c
  3327                           
  3328                           ;main.c: 340: MXK_Dequeue();
  3329  01366E  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  3330  013672                     l2401:
  3331                           
  3332                           ;main.c: 341: }
  3333                           ;main.c: 343: irobot_song_play(0);
  3334  013672  0E00               	movlw	0
  3335  013674  EC45  F0B3         	call	_irobot_song_play
  3336                           
  3337                           ;main.c: 344: irobot_stop_motion(0);
  3338  013678  0E00               	movlw	0
  3339  01367A  ECF8  F0AE         	call	_irobot_stop_motion
  3340  01367E  0012               	return		;funcret
  3341  013680                     __end_of_mode4:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           postinc0	equ	0xFEE
  3348                           wreg	equ	0xFE8
  3349                           postdec1	equ	0xFE5
  3350                           fsr1h	equ	0xFE2
  3351                           fsr1l	equ	0xFE1
  3352                           status	equ	0xFD8
  3353                           
  3354 ;; *************** function _findClosestWall *****************
  3355 ;; Defined at:
  3356 ;;		line 152 in file "main.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;		None
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;		None
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;Total ram usage:        6 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:   13
  3377 ;; This function calls:
  3378 ;;		_ADC_Start
  3379 ;;		_ADC_Voltage
  3380 ;;		_Console_Render
  3381 ;;		_HMI_Render
  3382 ;;		_HMI_SetNumber
  3383 ;;		_MXK_Dequeue
  3384 ;;		_MXK_Release
  3385 ;;		_MXK_SwitchTo
  3386 ;;		_Motor_Move
  3387 ;;		_Motor_Speed
  3388 ;;		___fldiv
  3389 ;;		___flmul
  3390 ;;		___fltol
  3391 ;;		___xxtofl
  3392 ;;		_irobot_rotate
  3393 ;;		_printf
  3394 ;; This function is called by:
  3395 ;;		_mode4
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text2
  3400  0108C4                     __ptext2:
  3401                           	opt stack 0
  3402  0108C4                     _findClosestWall:
  3403                           	opt stack 16
  3404                           
  3405                           ;main.c: 153: StepRotate = 400;
  3406                           
  3407                           ;incstack = 0
  3408  0108C4  0E01               	movlw	1
  3409  0108C6  0100               	movlb	0	; () banked
  3410  0108C8  6F72               	movwf	(_StepRotate+1)& (0+255),b
  3411  0108CA  0E90               	movlw	144
  3412  0108CC  6F71               	movwf	_StepRotate& (0+255),b
  3413                           
  3414                           ;main.c: 154: MinDist = 1000;
  3415  0108CE  0E03               	movlw	3
  3416  0108D0  0100               	movlb	0	; () banked
  3417  0108D2  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3418  0108D4  0EE8               	movlw	232
  3419  0108D6  6FFB               	movwf	_MinDist& (0+255),b
  3420                           
  3421                           ;main.c: 155: Stepstomin = 0;
  3422  0108D8  0E00               	movlw	0
  3423  0108DA  0100               	movlb	0	; () banked
  3424  0108DC  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  3425  0108DE  0E00               	movlw	0
  3426  0108E0  6F6F               	movwf	_Stepstomin& (0+255),b
  3427                           
  3428                           ;main.c: 156: angleToClosestWall = 1000;
  3429  0108E2  0E03               	movlw	3
  3430  0108E4  0100               	movlb	0	; () banked
  3431  0108E6  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3432  0108E8  0EE8               	movlw	232
  3433  0108EA  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3434                           
  3435                           ;main.c: 157: IRValue = 0;
  3436  0108EC  0E00               	movlw	0
  3437  0108EE  0100               	movlb	0	; () banked
  3438  0108F0  6F6E               	movwf	(_IRValue+1)& (0+255),b
  3439  0108F2  0E00               	movlw	0
  3440  0108F4  6F6D               	movwf	_IRValue& (0+255),b
  3441                           
  3442                           ;main.c: 158: TimerX = 8;
  3443  0108F6  0E00               	movlw	0
  3444  0108F8  0100               	movlb	0	; () banked
  3445  0108FA  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3446  0108FC  0E08               	movlw	8
  3447  0108FE  6FF9               	movwf	_TimerX& (0+255),b
  3448                           
  3449                           ;main.c: 159: angle = 0;
  3450  010900  0E00               	movlw	0
  3451  010902  0103               	movlb	3	; () banked
  3452  010904  6F3B               	movwf	(_angle+1)& (0+255),b
  3453  010906  0E00               	movlw	0
  3454  010908  6F3A               	movwf	_angle& (0+255),b
  3455                           
  3456                           ;main.c: 160: while (StepRotate > 0) {
  3457  01090A  D15A               	goto	l2350
  3458  01090C                     
  3459                           ;main.c: 161: StepRotate--;
  3460                           
  3461                           ; BSR set to: 3
  3462  01090C  0100               	movlb	0	; () banked
  3463  01090E  0771               	decf	_StepRotate& (0+255),f,b
  3464  010910  A0D8               	btfss	status,0,c
  3465  010912  0772               	decf	(_StepRotate+1)& (0+255),f,b
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;main.c: 162: ADC_Start(&ADC_AN0);
  3469  010914  0EB5               	movlw	low _ADC_AN0
  3470  010916  0100               	movlb	0	; () banked
  3471  010918  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3472  01091A  0E00               	movlw	high _ADC_AN0
  3473  01091C  0100               	movlb	0	; () banked
  3474  01091E  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3475  010920  EC15  F0A8         	call	_ADC_Start	;wreg free
  3476                           
  3477                           ;main.c: 163: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3478  010924  0EB5               	movlw	low _ADC_AN0
  3479  010926  0100               	movlb	0	; () banked
  3480  010928  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3481  01092A  0E00               	movlw	high _ADC_AN0
  3482  01092C  0100               	movlb	0	; () banked
  3483  01092E  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3484  010930  EC27  F09E         	call	_ADC_Voltage	;wreg free
  3485  010934  C0E1  F3F8         	movff	?_ADC_Voltage,_findClosestWall$15599
  3486  010938  C0E2  F3F9         	movff	?_ADC_Voltage+1,_findClosestWall$15599+1
  3487  01093C  C0E3  F3FA         	movff	?_ADC_Voltage+2,_findClosestWall$15599+2
  3488  010940  C0E4  F3FB         	movff	?_ADC_Voltage+3,_findClosestWall$15599+3
  3489                           
  3490                           ;main.c: 163: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3491  010944  C3F8  F0BE         	movff	_findClosestWall$15599,___fldiv@a
  3492  010948  C3F9  F0BF         	movff	_findClosestWall$15599+1,___fldiv@a+1
  3493  01094C  C3FA  F0C0         	movff	_findClosestWall$15599+2,___fldiv@a+2
  3494  010950  C3FB  F0C1         	movff	_findClosestWall$15599+3,___fldiv@a+3
  3495  010954  0E00               	movlw	0
  3496  010956  0100               	movlb	0	; () banked
  3497  010958  6FBA               	movwf	___fldiv@b& (0+255),b
  3498  01095A  0E00               	movlw	0
  3499  01095C  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3500  01095E  0E6C               	movlw	108
  3501  010960  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3502  010962  0E42               	movlw	66
  3503  010964  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3504  010966  EC54  F088         	call	___fldiv	;wreg free
  3505  01096A  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3506  01096E  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3507  010972  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3508  010976  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3509  01097A  ECC6  F09B         	call	___fltol	;wreg free
  3510  01097E  C0F3  F06D         	movff	?___fltol,_IRValue
  3511  010982  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3512                           
  3513                           ;main.c: 164: if (MXK_SwitchTo(eMXK_HMI)) {
  3514  010986  0E01               	movlw	1
  3515  010988  EC83  F0AF         	call	_MXK_SwitchTo
  3516  01098C  0900               	iorlw	0
  3517  01098E  B4D8               	btfsc	status,2,c
  3518  010990  D00E               	goto	l2339
  3519                           
  3520                           ;main.c: 165: HMI_SetNumber(IRValue);
  3521  010992  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3522  010996  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3523  01099A  ECAC  F0B1         	call	_HMI_SetNumber	;wreg free
  3524                           
  3525                           ;main.c: 166: HMI_Render();
  3526  01099E  ECE4  F0AF         	call	_HMI_Render	;wreg free
  3527                           
  3528                           ;main.c: 167: if (MXK_Release())
  3529  0109A2  ECB1  F0B2         	call	_MXK_Release	;wreg free
  3530  0109A6  0900               	iorlw	0
  3531  0109A8  A4D8               	btfss	status,2,c
  3532                           
  3533                           ;main.c: 168: MXK_Dequeue();
  3534  0109AA  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  3535  0109AE                     l2339:
  3536                           
  3537                           ;main.c: 169: }
  3538                           ;main.c: 170: if (IRValue < MinDist) {
  3539  0109AE  0100               	movlb	0	; () banked
  3540  0109B0  51FB               	movf	_MinDist& (0+255),w,b
  3541  0109B2  0100               	movlb	0	; () banked
  3542  0109B4  5D6D               	subwf	_IRValue& (0+255),w,b
  3543  0109B6  0100               	movlb	0	; () banked
  3544  0109B8  516E               	movf	(_IRValue+1)& (0+255),w,b
  3545  0109BA  0A80               	xorlw	128
  3546  0109BC  0103               	movlb	3	; () banked
  3547  0109BE  6FF6               	movwf	??_findClosestWall& (0+255),b
  3548  0109C0  0100               	movlb	0	; () banked
  3549  0109C2  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3550  0109C4  0A80               	xorlw	128
  3551  0109C6  0103               	movlb	3	; () banked
  3552  0109C8  59F6               	subwfb	??_findClosestWall& (0+255),w,b
  3553  0109CA  B0D8               	btfsc	status,0,c
  3554  0109CC  D036               	goto	l2340
  3555                           
  3556                           ; BSR set to: 3
  3557                           ;main.c: 171: MinDist = IRValue;
  3558  0109CE  C06D  F0FB         	movff	_IRValue,_MinDist
  3559  0109D2  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  3560                           
  3561                           ;main.c: 172: Stepstomin = StepRotate;
  3562  0109D6  C071  F06F         	movff	_StepRotate,_Stepstomin
  3563  0109DA  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  3564                           
  3565                           ; BSR set to: 3
  3566                           ;main.c: 173: angleToClosestWall = Stepstomin * 0.675;
  3567  0109DE  0ECD               	movlw	205
  3568  0109E0  0100               	movlb	0	; () banked
  3569  0109E2  6FCC               	movwf	___flmul@a& (0+255),b
  3570  0109E4  0ECC               	movlw	204
  3571  0109E6  6FCD               	movwf	(___flmul@a+1)& (0+255),b
  3572  0109E8  0E2C               	movlw	44
  3573  0109EA  6FCE               	movwf	(___flmul@a+2)& (0+255),b
  3574  0109EC  0E3F               	movlw	63
  3575  0109EE  6FCF               	movwf	(___flmul@a+3)& (0+255),b
  3576  0109F0  C06F  F0BA         	movff	_Stepstomin,___xxtofl@val
  3577  0109F4  C070  F0BB         	movff	_Stepstomin+1,___xxtofl@val+1
  3578  0109F8  0100               	movlb	0	; () banked
  3579  0109FA  0E00               	movlw	0
  3580  0109FC  BFBB               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3581  0109FE  0EFF               	movlw	-1
  3582  010A00  6FBC               	movwf	(___xxtofl@val+2)& (0+255),b
  3583  010A02  6FBD               	movwf	(___xxtofl@val+3)& (0+255),b
  3584  010A04  0E01               	movlw	1
  3585  010A06  EC98  F091         	call	___xxtofl
  3586  010A0A  C0BA  F0C8         	movff	?___xxtofl,___flmul@b
  3587  010A0E  C0BB  F0C9         	movff	?___xxtofl+1,___flmul@b+1
  3588  010A12  C0BC  F0CA         	movff	?___xxtofl+2,___flmul@b+2
  3589  010A16  C0BD  F0CB         	movff	?___xxtofl+3,___flmul@b+3
  3590  010A1A  EC00  F080         	call	___flmul	;wreg free
  3591  010A1E  C0C8  F0F3         	movff	?___flmul,___fltol@f1
  3592  010A22  C0C9  F0F4         	movff	?___flmul+1,___fltol@f1+1
  3593  010A26  C0CA  F0F5         	movff	?___flmul+2,___fltol@f1+2
  3594  010A2A  C0CB  F0F6         	movff	?___flmul+3,___fltol@f1+3
  3595  010A2E  ECC6  F09B         	call	___fltol	;wreg free
  3596  010A32  C0F3  F06B         	movff	?___fltol,_angleToClosestWall
  3597  010A36  C0F4  F06C         	movff	?___fltol+1,_angleToClosestWall+1
  3598  010A3A                     l2340:
  3599                           
  3600                           ;main.c: 174: }
  3601                           ;main.c: 175: if (MXK_SwitchTo(eMXK_Motor)) {
  3602  010A3A  0E08               	movlw	8
  3603  010A3C  EC83  F0AF         	call	_MXK_SwitchTo
  3604  010A40  0900               	iorlw	0
  3605  010A42  B4D8               	btfsc	status,2,c
  3606  010A44  D01F               	goto	l2342
  3607                           
  3608                           ;main.c: 176: Motor_Speed(&Stepper, (100));
  3609  010A46  0EAF               	movlw	low _Stepper
  3610  010A48  0100               	movlb	0	; () banked
  3611  010A4A  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3612  010A4C  0E00               	movlw	high _Stepper
  3613  010A4E  0100               	movlb	0	; () banked
  3614  010A50  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3615  010A52  0E00               	movlw	0
  3616  010A54  0100               	movlb	0	; () banked
  3617  010A56  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3618  010A58  0E64               	movlw	100
  3619  010A5A  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3620  010A5C  EC97  F0B1         	call	_Motor_Speed	;wreg free
  3621                           
  3622                           ;main.c: 177: Motor_Move(&Stepper, -1);
  3623  010A60  0EAF               	movlw	low _Stepper
  3624  010A62  0100               	movlb	0	; () banked
  3625  010A64  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3626  010A66  0E00               	movlw	high _Stepper
  3627  010A68  0100               	movlb	0	; () banked
  3628  010A6A  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3629  010A6C  0EFF               	movlw	255
  3630  010A6E  0100               	movlb	0	; () banked
  3631  010A70  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3632  010A72  69BF               	setf	Motor_Move@pDelta& (0+255),b
  3633  010A74  EC9B  F0B0         	call	_Motor_Move	;wreg free
  3634                           
  3635                           ;main.c: 178: if (MXK_Release())
  3636  010A78  ECB1  F0B2         	call	_MXK_Release	;wreg free
  3637  010A7C  0900               	iorlw	0
  3638  010A7E  A4D8               	btfss	status,2,c
  3639                           
  3640                           ;main.c: 179: MXK_Dequeue();
  3641  010A80  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  3642  010A84                     l2342:
  3643                           
  3644                           ;main.c: 180: }
  3645                           ;main.c: 181: TimerX = 10;
  3646  010A84  0E00               	movlw	0
  3647  010A86  0100               	movlb	0	; () banked
  3648  010A88  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3649  010A8A  0E0A               	movlw	10
  3650  010A8C  6FF9               	movwf	_TimerX& (0+255),b
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;main.c: 182: if (TimerX > 0) {
  3654  010A8E  0100               	movlb	0	; () banked
  3655  010A90  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3656  010A92  D063               	goto	u13620
  3657  010A94  0100               	movlb	0	; () banked
  3658  010A96  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3659  010A98  E156               	bnz	l16348
  3660  010A9A  0100               	movlb	0	; () banked
  3661  010A9C  05F9               	decf	_TimerX& (0+255),w,b
  3662  010A9E  B0D8               	btfsc	status,0,c
  3663  010AA0  D052               	goto	l2344
  3664  010AA2  D05B               	goto	u13620
  3665  010AA4                     l16330:
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;main.c: 184: ADC_Start(&ADC_AN0);
  3669  010AA4  0EB5               	movlw	low _ADC_AN0
  3670  010AA6  0100               	movlb	0	; () banked
  3671  010AA8  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3672  010AAA  0E00               	movlw	high _ADC_AN0
  3673  010AAC  0100               	movlb	0	; () banked
  3674  010AAE  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3675  010AB0  EC15  F0A8         	call	_ADC_Start	;wreg free
  3676                           
  3677                           ;main.c: 185: if (MXK_SwitchTo(eMXK_HMI)) {
  3678  010AB4  0E01               	movlw	1
  3679  010AB6  EC83  F0AF         	call	_MXK_SwitchTo
  3680  010ABA  0900               	iorlw	0
  3681  010ABC  B4D8               	btfsc	status,2,c
  3682  010ABE  D00E               	goto	l2347
  3683                           
  3684                           ;main.c: 186: HMI_SetNumber(IRValue);
  3685  010AC0  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3686  010AC4  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3687  010AC8  ECAC  F0B1         	call	_HMI_SetNumber	;wreg free
  3688                           
  3689                           ;main.c: 187: HMI_Render();
  3690  010ACC  ECE4  F0AF         	call	_HMI_Render	;wreg free
  3691                           
  3692                           ;main.c: 188: if (MXK_Release())
  3693  010AD0  ECB1  F0B2         	call	_MXK_Release	;wreg free
  3694  010AD4  0900               	iorlw	0
  3695  010AD6  A4D8               	btfss	status,2,c
  3696                           
  3697                           ;main.c: 189: MXK_Dequeue();
  3698  010AD8  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  3699  010ADC                     l2347:
  3700                           
  3701                           ;main.c: 190: }
  3702                           ;main.c: 191: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3703  010ADC  0EB5               	movlw	low _ADC_AN0
  3704  010ADE  0100               	movlb	0	; () banked
  3705  010AE0  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3706  010AE2  0E00               	movlw	high _ADC_AN0
  3707  010AE4  0100               	movlb	0	; () banked
  3708  010AE6  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3709  010AE8  EC27  F09E         	call	_ADC_Voltage	;wreg free
  3710  010AEC  C0E1  F3F8         	movff	?_ADC_Voltage,_findClosestWall$15599
  3711  010AF0  C0E2  F3F9         	movff	?_ADC_Voltage+1,_findClosestWall$15599+1
  3712  010AF4  C0E3  F3FA         	movff	?_ADC_Voltage+2,_findClosestWall$15599+2
  3713  010AF8  C0E4  F3FB         	movff	?_ADC_Voltage+3,_findClosestWall$15599+3
  3714                           
  3715                           ;main.c: 190: }
  3716                           ;main.c: 191: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3717  010AFC  C3F8  F0BE         	movff	_findClosestWall$15599,___fldiv@a
  3718  010B00  C3F9  F0BF         	movff	_findClosestWall$15599+1,___fldiv@a+1
  3719  010B04  C3FA  F0C0         	movff	_findClosestWall$15599+2,___fldiv@a+2
  3720  010B08  C3FB  F0C1         	movff	_findClosestWall$15599+3,___fldiv@a+3
  3721  010B0C  0E00               	movlw	0
  3722  010B0E  0100               	movlb	0	; () banked
  3723  010B10  6FBA               	movwf	___fldiv@b& (0+255),b
  3724  010B12  0E00               	movlw	0
  3725  010B14  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3726  010B16  0E6C               	movlw	108
  3727  010B18  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3728  010B1A  0E42               	movlw	66
  3729  010B1C  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3730  010B1E  EC54  F088         	call	___fldiv	;wreg free
  3731  010B22  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3732  010B26  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3733  010B2A  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3734  010B2E  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3735  010B32  ECC6  F09B         	call	___fltol	;wreg free
  3736  010B36  C0F3  F06D         	movff	?___fltol,_IRValue
  3737  010B3A  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3738                           
  3739                           ;main.c: 192: TimerX--;
  3740  010B3E  0100               	movlb	0	; () banked
  3741  010B40  07F9               	decf	_TimerX& (0+255),f,b
  3742  010B42  A0D8               	btfss	status,0,c
  3743  010B44  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3744  010B46                     l2344:
  3745  010B46                     l16348:
  3746                           
  3747                           ; BSR set to: 0
  3748  010B46  0100               	movlb	0	; () banked
  3749  010B48  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3750  010B4A  D007               	goto	u13620
  3751  010B4C  0100               	movlb	0	; () banked
  3752  010B4E  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3753  010B50  E1A9               	bnz	l16330
  3754  010B52  0100               	movlb	0	; () banked
  3755  010B54  05F9               	decf	_TimerX& (0+255),w,b
  3756  010B56  B0D8               	btfsc	status,0,c
  3757  010B58  D7A5               	goto	l2345
  3758  010B5A                     u13620:
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;main.c: 193: }
  3762                           ;main.c: 194: }
  3763                           ;main.c: 195: if (MXK_SwitchTo(eMXK_HMI)) {
  3764                           
  3765                           ; BSR set to: 0
  3766                           
  3767                           ; BSR set to: 0
  3768  010B5A  0E01               	movlw	1
  3769  010B5C  EC83  F0AF         	call	_MXK_SwitchTo
  3770  010B60  0900               	iorlw	0
  3771  010B62  B4D8               	btfsc	status,2,c
  3772  010B64  D02D               	goto	l2350
  3773                           
  3774                           ;main.c: 196: printf("%c", (char)35);
  3775  010B66  0EFB               	movlw	low STR_1
  3776  010B68  0100               	movlb	0	; () banked
  3777  010B6A  6FCF               	movwf	printf@f& (0+255),b
  3778  010B6C  0EFF               	movlw	high STR_1
  3779  010B6E  0100               	movlb	0	; () banked
  3780  010B70  6FD0               	movwf	(printf@f+1)& (0+255),b
  3781  010B72  0E00               	movlw	0
  3782  010B74  0100               	movlb	0	; () banked
  3783  010B76  6FD2               	movwf	(?_printf+3)& (0+255),b
  3784  010B78  0E23               	movlw	35
  3785  010B7A  6FD1               	movwf	(?_printf+2)& (0+255),b
  3786  010B7C  EC7F  F092         	call	_printf	;wreg free
  3787                           
  3788                           ;main.c: 197: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3789  010B80  0E59               	movlw	low STR_2
  3790  010B82  0100               	movlb	0	; () banked
  3791  010B84  6FCF               	movwf	printf@f& (0+255),b
  3792  010B86  0EFF               	movlw	high STR_2
  3793  010B88  0100               	movlb	0	; () banked
  3794  010B8A  6FD0               	movwf	(printf@f+1)& (0+255),b
  3795  010B8C  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3796  010B90  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3797  010B94  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3798  010B98  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3799  010B9C  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3800  010BA0  0100               	movlb	0	; () banked
  3801  010BA2  6BD6               	clrf	(?_printf+7)& (0+255),b
  3802  010BA4  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3803  010BA8  0100               	movlb	0	; () banked
  3804  010BAA  6BD8               	clrf	(?_printf+9)& (0+255),b
  3805  010BAC  EC7F  F092         	call	_printf	;wreg free
  3806                           
  3807                           ;main.c: 198: Console_Render();
  3808  010BB0  EC93  F08F         	call	_Console_Render	;wreg free
  3809                           
  3810                           ;main.c: 199: if (MXK_Release())
  3811  010BB4  ECB1  F0B2         	call	_MXK_Release	;wreg free
  3812  010BB8  0900               	iorlw	0
  3813  010BBA  A4D8               	btfss	status,2,c
  3814                           
  3815                           ;main.c: 200: MXK_Dequeue();
  3816  010BBC  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  3817  010BC0                     l2350:
  3818  010BC0  0100               	movlb	0	; () banked
  3819  010BC2  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  3820  010BC4  D007               	goto	u13650
  3821  010BC6  0100               	movlb	0	; () banked
  3822  010BC8  5172               	movf	(_StepRotate+1)& (0+255),w,b
  3823  010BCA  E103               	bnz	u13651
  3824  010BCC  0100               	movlb	0	; () banked
  3825  010BCE  0571               	decf	_StepRotate& (0+255),w,b
  3826  010BD0  B0D8               	btfsc	status,0,c
  3827  010BD2                     u13651:
  3828  010BD2  D69C               	goto	l2337
  3829  010BD4                     u13650:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main.c: 201: }
  3833                           ;main.c: 202: }
  3834                           ;main.c: 203: Motor_Speed(&Stepper, (400));
  3835                           
  3836                           ; BSR set to: 0
  3837  010BD4  0EAF               	movlw	low _Stepper
  3838  010BD6  0100               	movlb	0	; () banked
  3839  010BD8  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3840  010BDA  0E00               	movlw	high _Stepper
  3841  010BDC  0100               	movlb	0	; () banked
  3842  010BDE  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3843  010BE0  0E01               	movlw	1
  3844  010BE2  0100               	movlb	0	; () banked
  3845  010BE4  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3846  010BE6  0E90               	movlw	144
  3847  010BE8  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3848  010BEA  EC97  F0B1         	call	_Motor_Speed	;wreg free
  3849                           
  3850                           ;main.c: 204: Motor_Move(&Stepper, 300);
  3851  010BEE  0EAF               	movlw	low _Stepper
  3852  010BF0  0100               	movlb	0	; () banked
  3853  010BF2  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3854  010BF4  0E00               	movlw	high _Stepper
  3855  010BF6  0100               	movlb	0	; () banked
  3856  010BF8  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3857  010BFA  0E01               	movlw	1
  3858  010BFC  0100               	movlb	0	; () banked
  3859  010BFE  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3860  010C00  0E2C               	movlw	44
  3861  010C02  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  3862  010C04  EC9B  F0B0         	call	_Motor_Move	;wreg free
  3863                           
  3864                           ;main.c: 205: angleToClosestWall = angleToClosestWall + 67;
  3865  010C08  0E43               	movlw	67
  3866  010C0A  0100               	movlb	0	; () banked
  3867  010C0C  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3868  010C0E  0100               	movlb	0	; () banked
  3869  010C10  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3870  010C12  0E00               	movlw	0
  3871  010C14  0100               	movlb	0	; () banked
  3872  010C16  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3873  010C18  0100               	movlb	0	; () banked
  3874  010C1A  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;main.c: 206: if(angleToClosestWall > 270) {
  3878  010C1C  0100               	movlb	0	; () banked
  3879  010C1E  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3880  010C20  D012               	goto	l2352
  3881  010C22  0E0F               	movlw	15
  3882  010C24  0100               	movlb	0	; () banked
  3883  010C26  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  3884  010C28  0E01               	movlw	1
  3885  010C2A  0100               	movlb	0	; () banked
  3886  010C2C  596C               	subwfb	(_angleToClosestWall+1)& (0+255),w,b
  3887  010C2E  A0D8               	btfss	status,0,c
  3888  010C30  D00A               	goto	l2352
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;main.c: 207: angleToClosestWall = angleToClosestWall - 270;
  3892  010C32  0EF2               	movlw	242
  3893  010C34  0100               	movlb	0	; () banked
  3894  010C36  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3895  010C38  0100               	movlb	0	; () banked
  3896  010C3A  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3897  010C3C  0EFE               	movlw	254
  3898  010C3E  0100               	movlb	0	; () banked
  3899  010C40  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3900  010C42  0100               	movlb	0	; () banked
  3901  010C44  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3902  010C46                     l2352:
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;main.c: 208: }
  3906                           ;main.c: 209: angleToClosestWall = 270 - angleToClosestWall;
  3907  010C46  C06B  F3F6         	movff	_angleToClosestWall,??_findClosestWall
  3908  010C4A  C06C  F3F7         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3909  010C4E  0103               	movlb	3	; () banked
  3910  010C50  1FF6               	comf	??_findClosestWall& (0+255),f,b
  3911  010C52  1FF7               	comf	(??_findClosestWall+1)& (0+255),f,b
  3912  010C54  4BF6               	infsnz	??_findClosestWall& (0+255),f,b
  3913  010C56  2BF7               	incf	(??_findClosestWall+1)& (0+255),f,b
  3914  010C58  0E0E               	movlw	14
  3915  010C5A  0103               	movlb	3	; () banked
  3916  010C5C  25F6               	addwf	??_findClosestWall& (0+255),w,b
  3917  010C5E  0100               	movlb	0	; () banked
  3918  010C60  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3919  010C62  0E01               	movlw	1
  3920  010C64  0103               	movlb	3	; () banked
  3921  010C66  21F7               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3922  010C68  0100               	movlb	0	; () banked
  3923  010C6A  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3924                           
  3925                           ;main.c: 210: if(angleToClosestWall < 135){
  3926  010C6C  0100               	movlb	0	; () banked
  3927  010C6E  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3928  010C70  D008               	goto	u13670
  3929  010C72  0100               	movlb	0	; () banked
  3930  010C74  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  3931  010C76  E112               	bnz	l16372
  3932  010C78  0E87               	movlw	135
  3933  010C7A  0100               	movlb	0	; () banked
  3934  010C7C  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  3935  010C7E  B0D8               	btfsc	status,0,c
  3936  010C80  D00D               	goto	l2353
  3937  010C82                     u13670:
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;main.c: 211: irobot_rotate(0, angleToClosestWall, 200);
  3941  010C82  C06B  F0D7         	movff	_angleToClosestWall,irobot_rotate@rotateAngle
  3942  010C86  C06C  F0D8         	movff	_angleToClosestWall+1,irobot_rotate@rotateAngle+1
  3943  010C8A  0E00               	movlw	0
  3944  010C8C  0100               	movlb	0	; () banked
  3945  010C8E  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3946  010C90  0EC8               	movlw	200
  3947  010C92  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3948  010C94  0E00               	movlw	0
  3949  010C96  EC40  F09B         	call	_irobot_rotate
  3950                           
  3951                           ;main.c: 212: }
  3952  010C9A  0012               	return	
  3953  010C9C                     l2353:
  3954  010C9C                     l16372:
  3955                           
  3956                           ;main.c: 213: else{
  3957                           ;main.c: 214: irobot_rotate(0, 270 - angleToClosestWall, -200);
  3958  010C9C  C06B  F3F6         	movff	_angleToClosestWall,??_findClosestWall
  3959  010CA0  C06C  F3F7         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3960  010CA4  0103               	movlb	3	; () banked
  3961  010CA6  1FF6               	comf	??_findClosestWall& (0+255),f,b
  3962  010CA8  1FF7               	comf	(??_findClosestWall+1)& (0+255),f,b
  3963  010CAA  4BF6               	infsnz	??_findClosestWall& (0+255),f,b
  3964  010CAC  2BF7               	incf	(??_findClosestWall+1)& (0+255),f,b
  3965  010CAE  0E0E               	movlw	14
  3966  010CB0  0103               	movlb	3	; () banked
  3967  010CB2  25F6               	addwf	??_findClosestWall& (0+255),w,b
  3968  010CB4  0100               	movlb	0	; () banked
  3969  010CB6  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3970  010CB8  0E01               	movlw	1
  3971  010CBA  0103               	movlb	3	; () banked
  3972  010CBC  21F7               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3973  010CBE  0100               	movlb	0	; () banked
  3974  010CC0  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3975  010CC2  0EFF               	movlw	255
  3976  010CC4  0100               	movlb	0	; () banked
  3977  010CC6  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3978  010CC8  0E38               	movlw	56
  3979  010CCA  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3980  010CCC  0E00               	movlw	0
  3981  010CCE  EC40  F09B         	call	_irobot_rotate
  3982  010CD2  0012               	return	
  3983  010CD4                     __end_of_findClosestWall:
  3984                           	opt stack 0
  3985                           tblptru	equ	0xFF8
  3986                           tblptrh	equ	0xFF7
  3987                           tblptrl	equ	0xFF6
  3988                           tablat	equ	0xFF5
  3989                           postinc0	equ	0xFEE
  3990                           wreg	equ	0xFE8
  3991                           postdec1	equ	0xFE5
  3992                           fsr1h	equ	0xFE2
  3993                           fsr1l	equ	0xFE1
  3994                           status	equ	0xFD8
  3995                           
  3996 ;; *************** function _mode3 *****************
  3997 ;; Defined at:
  3998 ;;		line 313 in file "main.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;		None
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;		None
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  1    wreg      void 
  4005 ;; Registers used:
  4006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;Total ram usage:        0 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:   17
  4019 ;; This function calls:
  4020 ;;		_move_and_rotate
  4021 ;;		_safeToGo
  4022 ;; This function is called by:
  4023 ;;		_main
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text3
  4028  016674                     __ptext3:
  4029                           	opt stack 0
  4030  016674                     _mode3:
  4031                           	opt stack 13
  4032                           
  4033                           ;main.c: 314: safeToGo();
  4034                           
  4035                           ;incstack = 0
  4036  016674  EC42  F0AE         	call	_safeToGo	;wreg free
  4037                           
  4038                           ;main.c: 315: move_and_rotate();
  4039  016678  EC57  F0A8         	call	_move_and_rotate	;wreg free
  4040                           
  4041                           ;main.c: 316: move_and_rotate();
  4042  01667C  EC57  F0A8         	call	_move_and_rotate	;wreg free
  4043                           
  4044                           ;main.c: 317: move_and_rotate();
  4045  016680  EC57  F0A8         	call	_move_and_rotate	;wreg free
  4046                           
  4047                           ;main.c: 318: move_and_rotate();
  4048  016684  EC57  F0A8         	call	_move_and_rotate	;wreg free
  4049  016688  0012               	return		;funcret
  4050  01668A                     __end_of_mode3:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           postdec1	equ	0xFE5
  4059                           fsr1h	equ	0xFE2
  4060                           fsr1l	equ	0xFE1
  4061                           status	equ	0xFD8
  4062                           
  4063 ;; *************** function _move_and_rotate *****************
  4064 ;; Defined at:
  4065 ;;		line 138 in file "main.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;		None
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;		None
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  1    wreg      void 
  4072 ;; Registers used:
  4073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;Total ram usage:        0 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:   12
  4086 ;; This function calls:
  4087 ;;		_delay_ms
  4088 ;;		_irobot_move_straight
  4089 ;;		_irobot_rotate
  4090 ;;		_irobot_stop_motion
  4091 ;;		_update_distance
  4092 ;; This function is called by:
  4093 ;;		_mode3
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text4
  4098  0150AE                     __ptext4:
  4099                           	opt stack 0
  4100  0150AE                     _move_and_rotate:
  4101                           	opt stack 17
  4102                           
  4103                           ;main.c: 139: dist = 0;
  4104                           
  4105                           ;incstack = 0
  4106  0150AE  0E00               	movlw	0
  4107  0150B0  0100               	movlb	0	; () banked
  4108  0150B2  6F6A               	movwf	(_dist+1)& (0+255),b
  4109  0150B4  0E00               	movlw	0
  4110  0150B6  6F69               	movwf	_dist& (0+255),b
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;main.c: 140: irobot_move_straight(100);
  4114  0150B8  0E00               	movlw	0
  4115  0150BA  0100               	movlb	0	; () banked
  4116  0150BC  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4117  0150BE  0E64               	movlw	100
  4118  0150C0  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4119  0150C2  ECDA  F0B2         	call	_irobot_move_straight	;wreg free
  4120                           
  4121                           ;main.c: 141: while (dist < 1000) {
  4122  0150C6  D00A               	goto	l2330
  4123  0150C8                     
  4124                           ;main.c: 142: update_distance();
  4125  0150C8  EC59  F0B3         	call	_update_distance	;wreg free
  4126                           
  4127                           ;main.c: 143: dist += iRDistance;
  4128  0150CC  0100               	movlb	0	; () banked
  4129  0150CE  5179               	movf	_iRDistance& (0+255),w,b
  4130  0150D0  0100               	movlb	0	; () banked
  4131  0150D2  2769               	addwf	_dist& (0+255),f,b
  4132  0150D4  0100               	movlb	0	; () banked
  4133  0150D6  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4134  0150D8  0100               	movlb	0	; () banked
  4135  0150DA  236A               	addwfc	(_dist+1)& (0+255),f,b
  4136  0150DC                     l2330:
  4137                           
  4138                           ; BSR set to: 0
  4139  0150DC  0100               	movlb	0	; () banked
  4140  0150DE  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  4141  0150E0  D7F3               	goto	l2331
  4142  0150E2  0EE8               	movlw	232
  4143  0150E4  0100               	movlb	0	; () banked
  4144  0150E6  5D69               	subwf	_dist& (0+255),w,b
  4145  0150E8  0E03               	movlw	3
  4146  0150EA  0100               	movlb	0	; () banked
  4147  0150EC  596A               	subwfb	(_dist+1)& (0+255),w,b
  4148  0150EE  A0D8               	btfss	status,0,c
  4149  0150F0  D7EB               	goto	l2331
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;main.c: 144: }
  4153                           ;main.c: 145: irobot_stop_motion(0);
  4154                           
  4155                           ; BSR set to: 0
  4156  0150F2  0E00               	movlw	0
  4157  0150F4  ECF8  F0AE         	call	_irobot_stop_motion
  4158                           
  4159                           ;main.c: 146: delay_ms(100);
  4160  0150F8  0E00               	movlw	0
  4161  0150FA  0100               	movlb	0	; () banked
  4162  0150FC  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4163  0150FE  0E64               	movlw	100
  4164  015100  6FBA               	movwf	delay_ms@ms& (0+255),b
  4165  015102  EC8C  F0AB         	call	_delay_ms	;wreg free
  4166                           
  4167                           ;main.c: 147: irobot_rotate(0, 67, 200);
  4168  015106  0E00               	movlw	0
  4169  015108  0100               	movlb	0	; () banked
  4170  01510A  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4171  01510C  0E43               	movlw	67
  4172  01510E  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4173  015110  0E00               	movlw	0
  4174  015112  0100               	movlb	0	; () banked
  4175  015114  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4176  015116  0EC8               	movlw	200
  4177  015118  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4178  01511A  0E00               	movlw	0
  4179  01511C  EC40  F09B         	call	_irobot_rotate
  4180                           
  4181                           ;main.c: 148: delay_ms(100);
  4182  015120  0E00               	movlw	0
  4183  015122  0100               	movlb	0	; () banked
  4184  015124  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4185  015126  0E64               	movlw	100
  4186  015128  6FBA               	movwf	delay_ms@ms& (0+255),b
  4187  01512A  EC8C  F0AB         	call	_delay_ms	;wreg free
  4188  01512E  0012               	return		;funcret
  4189  015130                     __end_of_move_and_rotate:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           postinc0	equ	0xFEE
  4196                           wreg	equ	0xFE8
  4197                           postdec1	equ	0xFE5
  4198                           fsr1h	equ	0xFE2
  4199                           fsr1l	equ	0xFE1
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function _irobot_rotate *****************
  4203 ;; Defined at:
  4204 ;;		line 301 in file "Library/iRobotSerial.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;  isScript        1    wreg     unsigned char 
  4207 ;;  rotateAngle     2   29[BANK0 ] short 
  4208 ;;  rotateSpeed     2   31[BANK0 ] short 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  isScript        1   35[BANK0 ] unsigned char 
  4211 ;;  angleTotal      2   38[BANK0 ] short 
  4212 ;;  rotateDirect    2   36[BANK0 ] short 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4222 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;Total ram usage:       11 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:   11
  4229 ;; This function calls:
  4230 ;;		_irobot_move
  4231 ;;		_irobot_stop_motion
  4232 ;;		_update_angle
  4233 ;; This function is called by:
  4234 ;;		_move_and_rotate
  4235 ;;		_findClosestWall
  4236 ;;		_irobot_rotate_to
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text5
  4241  013680                     __ptext5:
  4242                           	opt stack 0
  4243  013680                     _irobot_rotate:
  4244                           	opt stack 17
  4245                           
  4246                           ;incstack = 0
  4247                           ;irobot_rotate@isScript stored from wreg
  4248  013680  0100               	movlb	0	; () banked
  4249  013682  6FDD               	movwf	irobot_rotate@isScript& (0+255),b
  4250                           
  4251                           ;iRobotSerial.c: 302: INT16 angleTotal = 0;
  4252  013684  0E00               	movlw	0
  4253  013686  0100               	movlb	0	; () banked
  4254  013688  6FE1               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  4255  01368A  0E00               	movlw	0
  4256  01368C  6FE0               	movwf	irobot_rotate@angleTotal& (0+255),b
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;iRobotSerial.c: 303: INT16 rotateDirection;
  4260                           ;iRobotSerial.c: 305: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateAngl
      +                          e = iR_CONST_CW);
  4261  01368E  0100               	movlb	0	; () banked
  4262  013690  BFD8               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  4263  013692  D00D               	goto	l2156
  4264  013694  0100               	movlb	0	; () banked
  4265  013696  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4266  013698  E104               	bnz	u10990
  4267  01369A  0100               	movlb	0	; () banked
  4268  01369C  05D7               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  4269  01369E  A0D8               	btfss	status,0,c
  4270  0136A0  D006               	goto	l2156
  4271  0136A2                     u10990:
  4272                           
  4273                           ; BSR set to: 0
  4274  0136A2  0E00               	movlw	0
  4275  0136A4  0100               	movlb	0	; () banked
  4276  0136A6  6FDF               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4277  0136A8  0E01               	movlw	1
  4278  0136AA  6FDE               	movwf	irobot_rotate@rotateDirection& (0+255),b
  4279  0136AC  D003               	goto	l2158
  4280  0136AE                     l2156:
  4281                           
  4282                           ; BSR set to: 0
  4283  0136AE  0100               	movlb	0	; () banked
  4284  0136B0  69D7               	setf	irobot_rotate@rotateAngle& (0+255),b
  4285  0136B2  69D8               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4286  0136B4                     l2158:
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;iRobotSerial.c: 306: if (isScript) {
  4290                           
  4291                           ; BSR set to: 0
  4292  0136B4  0100               	movlb	0	; () banked
  4293  0136B6  51DD               	movf	irobot_rotate@isScript& (0+255),w,b
  4294  0136B8  0100               	movlb	0	; () banked
  4295  0136BA  B4D8               	btfsc	status,2,c
  4296  0136BC  D00C               	goto	l2159
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;iRobotSerial.c: 307: irobot_move(1, rotateSpeed, rotateDirection);
  4300  0136BE  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4301  0136C2  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4302  0136C6  C0DE  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4303  0136CA  C0DF  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4304  0136CE  0E01               	movlw	1
  4305  0136D0  ECD4  F0A2         	call	_irobot_move
  4306                           
  4307                           ;iRobotSerial.c: 308: } else {
  4308  0136D4  0012               	return	
  4309  0136D6                     l2159:
  4310                           
  4311                           ;iRobotSerial.c: 309: irobot_move(0, rotateSpeed, rotateDirection);
  4312  0136D6  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4313  0136DA  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4314  0136DE  C0DE  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4315  0136E2  C0DF  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4316  0136E6  0E00               	movlw	0
  4317  0136E8  ECD4  F0A2         	call	_irobot_move
  4318                           
  4319                           ;iRobotSerial.c: 310: if (rotateSpeed > 0) {
  4320  0136EC  0100               	movlb	0	; () banked
  4321  0136EE  BFDA               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  4322  0136F0  D022               	goto	u11020
  4323  0136F2  0100               	movlb	0	; () banked
  4324  0136F4  51DA               	movf	(irobot_rotate@rotateSpeed+1)& (0+255),w,b
  4325  0136F6  E10F               	bnz	l14260
  4326  0136F8  0100               	movlb	0	; () banked
  4327  0136FA  05D9               	decf	irobot_rotate@rotateSpeed& (0+255),w,b
  4328  0136FC  B0D8               	btfsc	status,0,c
  4329  0136FE  D00B               	goto	l2162
  4330  013700  D01A               	goto	u11020
  4331  013702                     
  4332                           ; BSR set to: 0
  4333                           ;iRobotSerial.c: 312: update_angle();
  4334                           
  4335                           ; BSR set to: 0
  4336  013702  EC62  F0B3         	call	_update_angle	;wreg free
  4337                           
  4338                           ;iRobotSerial.c: 313: angleTotal += iRAngle;
  4339  013706  0100               	movlb	0	; () banked
  4340  013708  5177               	movf	_iRAngle& (0+255),w,b
  4341  01370A  0100               	movlb	0	; () banked
  4342  01370C  27E0               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4343  01370E  0100               	movlb	0	; () banked
  4344  013710  5178               	movf	(_iRAngle+1)& (0+255),w,b
  4345  013712  0100               	movlb	0	; () banked
  4346  013714  23E1               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4347  013716                     l2162:
  4348  013716                     l14260:
  4349                           
  4350                           ; BSR set to: 0
  4351  013716  0100               	movlb	0	; () banked
  4352  013718  51D7               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4353  01371A  0100               	movlb	0	; () banked
  4354  01371C  5DE0               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4355  01371E  0100               	movlb	0	; () banked
  4356  013720  51E1               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4357  013722  0A80               	xorlw	128
  4358  013724  0100               	movlb	0	; () banked
  4359  013726  6FDB               	movwf	??_irobot_rotate& (0+255),b
  4360  013728  0100               	movlb	0	; () banked
  4361  01372A  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4362  01372C  0A80               	xorlw	128
  4363  01372E  0100               	movlb	0	; () banked
  4364  013730  59DB               	subwfb	??_irobot_rotate& (0+255),w,b
  4365  013732  A0D8               	btfss	status,0,c
  4366  013734  D7E6               	goto	l2163
  4367  013736                     u11020:
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;iRobotSerial.c: 314: }
  4371                           ;iRobotSerial.c: 315: }
  4372                           ;iRobotSerial.c: 316: if (rotateSpeed < 0) {
  4373                           
  4374                           ; BSR set to: 0
  4375                           
  4376                           ; BSR set to: 0
  4377  013736  0100               	movlb	0	; () banked
  4378  013738  BFDA               	btfsc	(irobot_rotate@rotateSpeed+1)& (0+255),7,b
  4379  01373A  D014               	goto	l2166
  4380  01373C  D023               	goto	u11040
  4381  01373E                     
  4382                           ; BSR set to: 0
  4383                           ;iRobotSerial.c: 318: update_angle();
  4384                           
  4385                           ; BSR set to: 0
  4386  01373E  EC62  F0B3         	call	_update_angle	;wreg free
  4387                           
  4388                           ;iRobotSerial.c: 319: angleTotal += -iRAngle;
  4389  013742  C077  F0DB         	movff	_iRAngle,??_irobot_rotate
  4390  013746  C078  F0DC         	movff	_iRAngle+1,??_irobot_rotate+1
  4391  01374A  0100               	movlb	0	; () banked
  4392  01374C  1FDB               	comf	??_irobot_rotate& (0+255),f,b
  4393  01374E  1FDC               	comf	(??_irobot_rotate+1)& (0+255),f,b
  4394  013750  4BDB               	infsnz	??_irobot_rotate& (0+255),f,b
  4395  013752  2BDC               	incf	(??_irobot_rotate+1)& (0+255),f,b
  4396  013754  0100               	movlb	0	; () banked
  4397  013756  51DB               	movf	??_irobot_rotate& (0+255),w,b
  4398  013758  0100               	movlb	0	; () banked
  4399  01375A  27E0               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4400  01375C  0100               	movlb	0	; () banked
  4401  01375E  51DC               	movf	(??_irobot_rotate+1)& (0+255),w,b
  4402  013760  0100               	movlb	0	; () banked
  4403  013762  23E1               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4404  013764                     l2166:
  4405                           
  4406                           ; BSR set to: 0
  4407                           
  4408                           ; BSR set to: 0
  4409  013764  0100               	movlb	0	; () banked
  4410  013766  51D7               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4411  013768  0100               	movlb	0	; () banked
  4412  01376A  5DE0               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4413  01376C  0100               	movlb	0	; () banked
  4414  01376E  51E1               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4415  013770  0A80               	xorlw	128
  4416  013772  0100               	movlb	0	; () banked
  4417  013774  6FDB               	movwf	??_irobot_rotate& (0+255),b
  4418  013776  0100               	movlb	0	; () banked
  4419  013778  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4420  01377A  0A80               	xorlw	128
  4421  01377C  0100               	movlb	0	; () banked
  4422  01377E  59DB               	subwfb	??_irobot_rotate& (0+255),w,b
  4423  013780  A0D8               	btfss	status,0,c
  4424  013782  D7DD               	goto	l2167
  4425  013784                     u11040:
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;iRobotSerial.c: 320: }
  4429                           ;iRobotSerial.c: 321: }
  4430                           ;iRobotSerial.c: 322: irobot_stop_motion(0);
  4431                           
  4432                           ; BSR set to: 0
  4433                           
  4434                           ; BSR set to: 0
  4435  013784  0E00               	movlw	0
  4436  013786  ECF8  F0AE         	call	_irobot_stop_motion
  4437  01378A  0012               	return	
  4438  01378C                     __end_of_irobot_rotate:
  4439                           	opt stack 0
  4440                           tblptru	equ	0xFF8
  4441                           tblptrh	equ	0xFF7
  4442                           tblptrl	equ	0xFF6
  4443                           tablat	equ	0xFF5
  4444                           postinc0	equ	0xFEE
  4445                           wreg	equ	0xFE8
  4446                           postdec1	equ	0xFE5
  4447                           fsr1h	equ	0xFE2
  4448                           fsr1l	equ	0xFE1
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _mode2 *****************
  4452 ;; Defined at:
  4453 ;;		line 289 in file "main.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;		None
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  dist            2   44[BANK0 ] int 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  1    wreg      void 
  4460 ;; Registers used:
  4461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;Total ram usage:        2 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:   17
  4474 ;; This function calls:
  4475 ;;		_Console_Render
  4476 ;;		_MXK_Dequeue
  4477 ;;		_MXK_Release
  4478 ;;		_MXK_SwitchTo
  4479 ;;		_irobot_move_straight
  4480 ;;		_irobot_stop_motion
  4481 ;;		_printf
  4482 ;;		_safeToGo
  4483 ;;		_update_distance
  4484 ;; This function is called by:
  4485 ;;		_main
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text6
  4490  013A88                     __ptext6:
  4491                           	opt stack 0
  4492  013A88                     _mode2:
  4493                           	opt stack 13
  4494                           
  4495                           ;main.c: 290: safeToGo();
  4496                           
  4497                           ;incstack = 0
  4498  013A88  EC42  F0AE         	call	_safeToGo	;wreg free
  4499                           
  4500                           ;main.c: 291: if (MXK_SwitchTo(eMXK_HMI)) {
  4501  013A8C  0E01               	movlw	1
  4502  013A8E  EC83  F0AF         	call	_MXK_SwitchTo
  4503  013A92  0900               	iorlw	0
  4504  013A94  B4D8               	btfsc	status,2,c
  4505  013A96  0012               	return	
  4506                           
  4507                           ;main.c: 292: printf("%c", (char)35);
  4508  013A98  0EFB               	movlw	low STR_1
  4509  013A9A  0100               	movlb	0	; () banked
  4510  013A9C  6FCF               	movwf	printf@f& (0+255),b
  4511  013A9E  0EFF               	movlw	high STR_1
  4512  013AA0  0100               	movlb	0	; () banked
  4513  013AA2  6FD0               	movwf	(printf@f+1)& (0+255),b
  4514  013AA4  0E00               	movlw	0
  4515  013AA6  0100               	movlb	0	; () banked
  4516  013AA8  6FD2               	movwf	(?_printf+3)& (0+255),b
  4517  013AAA  0E23               	movlw	35
  4518  013AAC  6FD1               	movwf	(?_printf+2)& (0+255),b
  4519  013AAE  EC7F  F092         	call	_printf	;wreg free
  4520                           
  4521                           ;main.c: 293: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4522  013AB2  0E95               	movlw	low STR_4
  4523  013AB4  0100               	movlb	0	; () banked
  4524  013AB6  6FCF               	movwf	printf@f& (0+255),b
  4525  013AB8  0EFF               	movlw	high STR_4
  4526  013ABA  0100               	movlb	0	; () banked
  4527  013ABC  6FD0               	movwf	(printf@f+1)& (0+255),b
  4528  013ABE  C075  F0D1         	movff	_distanceTotal,?_printf+2
  4529  013AC2  C076  F0D2         	movff	_distanceTotal+1,?_printf+3
  4530  013AC6  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  4531  013ACA  0100               	movlb	0	; () banked
  4532  013ACC  6BD4               	clrf	(?_printf+5)& (0+255),b
  4533  013ACE  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  4534  013AD2  0100               	movlb	0	; () banked
  4535  013AD4  6BD6               	clrf	(?_printf+7)& (0+255),b
  4536  013AD6  EC7F  F092         	call	_printf	;wreg free
  4537                           
  4538                           ;main.c: 294: Console_Render();
  4539  013ADA  EC93  F08F         	call	_Console_Render	;wreg free
  4540                           
  4541                           ;main.c: 296: int dist = 0;
  4542  013ADE  0E00               	movlw	0
  4543  013AE0  0100               	movlb	0	; () banked
  4544  013AE2  6FE7               	movwf	(mode2@dist+1)& (0+255),b
  4545  013AE4  0E00               	movlw	0
  4546  013AE6  6FE6               	movwf	mode2@dist& (0+255),b
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;main.c: 297: irobot_move_straight(200);
  4550  013AE8  0E00               	movlw	0
  4551  013AEA  0100               	movlb	0	; () banked
  4552  013AEC  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4553  013AEE  0EC8               	movlw	200
  4554  013AF0  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4555  013AF2  ECDA  F0B2         	call	_irobot_move_straight	;wreg free
  4556                           
  4557                           ;main.c: 298: while (dist < 5000) {
  4558  013AF6  D025               	goto	l2385
  4559  013AF8                     
  4560                           ;main.c: 299: update_distance();
  4561  013AF8  EC59  F0B3         	call	_update_distance	;wreg free
  4562                           
  4563                           ;main.c: 300: dist += iRDistance;
  4564  013AFC  0100               	movlb	0	; () banked
  4565  013AFE  5179               	movf	_iRDistance& (0+255),w,b
  4566  013B00  0100               	movlb	0	; () banked
  4567  013B02  27E6               	addwf	mode2@dist& (0+255),f,b
  4568  013B04  0100               	movlb	0	; () banked
  4569  013B06  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4570  013B08  0100               	movlb	0	; () banked
  4571  013B0A  23E7               	addwfc	(mode2@dist+1)& (0+255),f,b
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;main.c: 301: printf("%c", (char)35);
  4575  013B0C  0EFB               	movlw	low STR_1
  4576  013B0E  0100               	movlb	0	; () banked
  4577  013B10  6FCF               	movwf	printf@f& (0+255),b
  4578  013B12  0EFF               	movlw	high STR_1
  4579  013B14  0100               	movlb	0	; () banked
  4580  013B16  6FD0               	movwf	(printf@f+1)& (0+255),b
  4581  013B18  0E00               	movlw	0
  4582  013B1A  0100               	movlb	0	; () banked
  4583  013B1C  6FD2               	movwf	(?_printf+3)& (0+255),b
  4584  013B1E  0E23               	movlw	35
  4585  013B20  6FD1               	movwf	(?_printf+2)& (0+255),b
  4586  013B22  EC7F  F092         	call	_printf	;wreg free
  4587                           
  4588                           ;main.c: 302: printf("Distance: %d\n", dist);
  4589  013B26  0EED               	movlw	low STR_8
  4590  013B28  0100               	movlb	0	; () banked
  4591  013B2A  6FCF               	movwf	printf@f& (0+255),b
  4592  013B2C  0EFF               	movlw	high STR_8
  4593  013B2E  0100               	movlb	0	; () banked
  4594  013B30  6FD0               	movwf	(printf@f+1)& (0+255),b
  4595  013B32  C0E6  F0D1         	movff	mode2@dist,?_printf+2
  4596  013B36  C0E7  F0D2         	movff	mode2@dist+1,?_printf+3
  4597  013B3A  EC7F  F092         	call	_printf	;wreg free
  4598                           
  4599                           ;main.c: 303: Console_Render();
  4600  013B3E  EC93  F08F         	call	_Console_Render	;wreg free
  4601  013B42                     l2385:
  4602  013B42  0100               	movlb	0	; () banked
  4603  013B44  BFE7               	btfsc	(mode2@dist+1)& (0+255),7,b
  4604  013B46  D7D8               	goto	l2386
  4605  013B48  0E88               	movlw	136
  4606  013B4A  0100               	movlb	0	; () banked
  4607  013B4C  5DE6               	subwf	mode2@dist& (0+255),w,b
  4608  013B4E  0E13               	movlw	19
  4609  013B50  0100               	movlb	0	; () banked
  4610  013B52  59E7               	subwfb	(mode2@dist+1)& (0+255),w,b
  4611  013B54  A0D8               	btfss	status,0,c
  4612  013B56  D7D0               	goto	l2386
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;main.c: 304: }
  4616                           ;main.c: 305: irobot_stop_motion(0);
  4617                           
  4618                           ; BSR set to: 0
  4619  013B58  0E00               	movlw	0
  4620  013B5A  ECF8  F0AE         	call	_irobot_stop_motion
  4621                           
  4622                           ;main.c: 307: if (MXK_Release())
  4623  013B5E  ECB1  F0B2         	call	_MXK_Release	;wreg free
  4624  013B62  0900               	iorlw	0
  4625  013B64  B4D8               	btfsc	status,2,c
  4626  013B66  0012               	return	
  4627                           
  4628                           ;main.c: 308: MXK_Dequeue();
  4629  013B68  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  4630  013B6C  0012               	return	
  4631  013B6E                     __end_of_mode2:
  4632                           	opt stack 0
  4633                           tblptru	equ	0xFF8
  4634                           tblptrh	equ	0xFF7
  4635                           tblptrl	equ	0xFF6
  4636                           tablat	equ	0xFF5
  4637                           postinc0	equ	0xFEE
  4638                           wreg	equ	0xFE8
  4639                           postdec1	equ	0xFE5
  4640                           fsr1h	equ	0xFE2
  4641                           fsr1l	equ	0xFE1
  4642                           status	equ	0xFD8
  4643                           
  4644 ;; *************** function _irobot_move_straight *****************
  4645 ;; Defined at:
  4646 ;;		line 346 in file "Library/iRobotSerial.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;  straightSpee    2   25[BANK0 ] short 
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;		None
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  1    wreg      void 
  4653 ;; Registers used:
  4654 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4660 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;Total ram usage:        2 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    9
  4667 ;; This function calls:
  4668 ;;		_irobot_move
  4669 ;; This function is called by:
  4670 ;;		_move_and_rotate
  4671 ;;		_mode2
  4672 ;;		_mode4
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text7
  4677  0165B4                     __ptext7:
  4678                           	opt stack 0
  4679  0165B4                     _irobot_move_straight:
  4680                           	opt stack 20
  4681                           
  4682                           ;iRobotSerial.c: 347: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4683                           
  4684                           ;incstack = 0
  4685  0165B4  C0D3  F0CA         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4686  0165B8  C0D4  F0CB         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4687  0165BC  0E7F               	movlw	127
  4688  0165BE  0100               	movlb	0	; () banked
  4689  0165C0  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4690  0165C2  69CC               	setf	irobot_move@moveTurnRadius& (0+255),b
  4691  0165C4  0E00               	movlw	0
  4692  0165C6  ECD4  F0A2         	call	_irobot_move
  4693  0165CA  0012               	return		;funcret
  4694  0165CC                     __end_of_irobot_move_straight:
  4695                           	opt stack 0
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           postinc0	equ	0xFEE
  4701                           wreg	equ	0xFE8
  4702                           postdec1	equ	0xFE5
  4703                           fsr1h	equ	0xFE2
  4704                           fsr1l	equ	0xFE1
  4705                           status	equ	0xFD8
  4706                           
  4707 ;; *************** function _mode1 *****************
  4708 ;; Defined at:
  4709 ;;		line 219 in file "main.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;		None
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  moveto          2    2[BANK3 ] int 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  1    wreg      void 
  4716 ;; Registers used:
  4717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;Total ram usage:        8 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:   17
  4730 ;; This function calls:
  4731 ;;		_ADC_Start
  4732 ;;		_ADC_Voltage
  4733 ;;		_Console_Render
  4734 ;;		_HMI_Render
  4735 ;;		_HMI_SetNumber
  4736 ;;		_MXK_Dequeue
  4737 ;;		_MXK_Release
  4738 ;;		_MXK_SwitchTo
  4739 ;;		_Motor_Move
  4740 ;;		_Motor_Speed
  4741 ;;		___fldiv
  4742 ;;		___fltol
  4743 ;;		_printf
  4744 ;;		_safeToGo
  4745 ;; This function is called by:
  4746 ;;		_main
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text8
  4751  010CD4                     __ptext8:
  4752                           	opt stack 0
  4753  010CD4                     _mode1:
  4754                           	opt stack 13
  4755                           
  4756                           ;main.c: 220: safeToGo();
  4757                           
  4758                           ;incstack = 0
  4759  010CD4  EC42  F0AE         	call	_safeToGo	;wreg free
  4760                           
  4761                           ;main.c: 221: if (MXK_SwitchTo(eMXK_HMI)) {
  4762  010CD8  0E01               	movlw	1
  4763  010CDA  EC83  F0AF         	call	_MXK_SwitchTo
  4764  010CDE  0900               	iorlw	0
  4765  010CE0  B4D8               	btfsc	status,2,c
  4766  010CE2  D029               	goto	l2359
  4767                           
  4768                           ;main.c: 222: printf("%c", (char)35);
  4769  010CE4  0EFB               	movlw	low STR_1
  4770  010CE6  0100               	movlb	0	; () banked
  4771  010CE8  6FCF               	movwf	printf@f& (0+255),b
  4772  010CEA  0EFF               	movlw	high STR_1
  4773  010CEC  0100               	movlb	0	; () banked
  4774  010CEE  6FD0               	movwf	(printf@f+1)& (0+255),b
  4775  010CF0  0E00               	movlw	0
  4776  010CF2  0100               	movlb	0	; () banked
  4777  010CF4  6FD2               	movwf	(?_printf+3)& (0+255),b
  4778  010CF6  0E23               	movlw	35
  4779  010CF8  6FD1               	movwf	(?_printf+2)& (0+255),b
  4780  010CFA  EC7F  F092         	call	_printf	;wreg free
  4781                           
  4782                           ;main.c: 223: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4783  010CFE  0E95               	movlw	low STR_4
  4784  010D00  0100               	movlb	0	; () banked
  4785  010D02  6FCF               	movwf	printf@f& (0+255),b
  4786  010D04  0EFF               	movlw	high STR_4
  4787  010D06  0100               	movlb	0	; () banked
  4788  010D08  6FD0               	movwf	(printf@f+1)& (0+255),b
  4789  010D0A  C075  F0D1         	movff	_distanceTotal,?_printf+2
  4790  010D0E  C076  F0D2         	movff	_distanceTotal+1,?_printf+3
  4791  010D12  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  4792  010D16  0100               	movlb	0	; () banked
  4793  010D18  6BD4               	clrf	(?_printf+5)& (0+255),b
  4794  010D1A  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  4795  010D1E  0100               	movlb	0	; () banked
  4796  010D20  6BD6               	clrf	(?_printf+7)& (0+255),b
  4797  010D22  EC7F  F092         	call	_printf	;wreg free
  4798                           
  4799                           ;main.c: 224: Console_Render();
  4800  010D26  EC93  F08F         	call	_Console_Render	;wreg free
  4801                           
  4802                           ;main.c: 225: if (MXK_Release())
  4803  010D2A  ECB1  F0B2         	call	_MXK_Release	;wreg free
  4804  010D2E  0900               	iorlw	0
  4805  010D30  A4D8               	btfss	status,2,c
  4806                           
  4807                           ;main.c: 226: MXK_Dequeue();
  4808  010D32  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  4809  010D36                     l2359:
  4810                           
  4811                           ;main.c: 227: }
  4812                           ;main.c: 228: StepRotate = 0;
  4813  010D36  0E00               	movlw	0
  4814  010D38  0100               	movlb	0	; () banked
  4815  010D3A  6F72               	movwf	(_StepRotate+1)& (0+255),b
  4816  010D3C  0E00               	movlw	0
  4817  010D3E  6F71               	movwf	_StepRotate& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;main.c: 229: MinDist = 1000;
  4821  010D40  0E03               	movlw	3
  4822  010D42  0100               	movlb	0	; () banked
  4823  010D44  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4824  010D46  0EE8               	movlw	232
  4825  010D48  6FFB               	movwf	_MinDist& (0+255),b
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;main.c: 230: Stepstomin = 0;
  4829  010D4A  0E00               	movlw	0
  4830  010D4C  0100               	movlb	0	; () banked
  4831  010D4E  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  4832  010D50  0E00               	movlw	0
  4833  010D52  6F6F               	movwf	_Stepstomin& (0+255),b
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;main.c: 231: IRValue = 0;
  4837  010D54  0E00               	movlw	0
  4838  010D56  0100               	movlb	0	; () banked
  4839  010D58  6F6E               	movwf	(_IRValue+1)& (0+255),b
  4840  010D5A  0E00               	movlw	0
  4841  010D5C  6F6D               	movwf	_IRValue& (0+255),b
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;main.c: 232: TimerX = 8;
  4845  010D5E  0E00               	movlw	0
  4846  010D60  0100               	movlb	0	; () banked
  4847  010D62  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4848  010D64  0E08               	movlw	8
  4849  010D66  6FF9               	movwf	_TimerX& (0+255),b
  4850                           
  4851                           ;main.c: 233: while (StepRotate < 400) {
  4852  010D68  D0F9               	goto	u13840
  4853  010D6A                     
  4854                           ; BSR set to: 0
  4855                           ;main.c: 234: StepRotate++;
  4856                           
  4857                           ; BSR set to: 0
  4858  010D6A  0100               	movlb	0	; () banked
  4859  010D6C  4B71               	infsnz	_StepRotate& (0+255),f,b
  4860  010D6E  2B72               	incf	(_StepRotate+1)& (0+255),f,b
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;main.c: 235: ADC_Start(&ADC_AN0);
  4864  010D70  0EB5               	movlw	low _ADC_AN0
  4865  010D72  0100               	movlb	0	; () banked
  4866  010D74  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4867  010D76  0E00               	movlw	high _ADC_AN0
  4868  010D78  0100               	movlb	0	; () banked
  4869  010D7A  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4870  010D7C  EC15  F0A8         	call	_ADC_Start	;wreg free
  4871                           
  4872                           ;main.c: 236: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4873  010D80  0EB5               	movlw	low _ADC_AN0
  4874  010D82  0100               	movlb	0	; () banked
  4875  010D84  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4876  010D86  0E00               	movlw	high _ADC_AN0
  4877  010D88  0100               	movlb	0	; () banked
  4878  010D8A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4879  010D8C  EC27  F09E         	call	_ADC_Voltage	;wreg free
  4880  010D90  C0E1  F3FA         	movff	?_ADC_Voltage,_mode1$15600
  4881  010D94  C0E2  F3FB         	movff	?_ADC_Voltage+1,_mode1$15600+1
  4882  010D98  C0E3  F3FC         	movff	?_ADC_Voltage+2,_mode1$15600+2
  4883  010D9C  C0E4  F3FD         	movff	?_ADC_Voltage+3,_mode1$15600+3
  4884                           
  4885                           ;main.c: 236: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4886  010DA0  C3FA  F0BE         	movff	_mode1$15600,___fldiv@a
  4887  010DA4  C3FB  F0BF         	movff	_mode1$15600+1,___fldiv@a+1
  4888  010DA8  C3FC  F0C0         	movff	_mode1$15600+2,___fldiv@a+2
  4889  010DAC  C3FD  F0C1         	movff	_mode1$15600+3,___fldiv@a+3
  4890  010DB0  0E00               	movlw	0
  4891  010DB2  0100               	movlb	0	; () banked
  4892  010DB4  6FBA               	movwf	___fldiv@b& (0+255),b
  4893  010DB6  0E00               	movlw	0
  4894  010DB8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4895  010DBA  0E6C               	movlw	108
  4896  010DBC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4897  010DBE  0E42               	movlw	66
  4898  010DC0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4899  010DC2  EC54  F088         	call	___fldiv	;wreg free
  4900  010DC6  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4901  010DCA  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4902  010DCE  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4903  010DD2  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4904  010DD6  ECC6  F09B         	call	___fltol	;wreg free
  4905  010DDA  C0F3  F06D         	movff	?___fltol,_IRValue
  4906  010DDE  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4907                           
  4908                           ;main.c: 237: if (MXK_SwitchTo(eMXK_HMI)) {
  4909  010DE2  0E01               	movlw	1
  4910  010DE4  EC83  F0AF         	call	_MXK_SwitchTo
  4911  010DE8  0900               	iorlw	0
  4912  010DEA  B4D8               	btfsc	status,2,c
  4913  010DEC  D00E               	goto	l2363
  4914                           
  4915                           ;main.c: 238: HMI_SetNumber(IRValue);
  4916  010DEE  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4917  010DF2  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4918  010DF6  ECAC  F0B1         	call	_HMI_SetNumber	;wreg free
  4919                           
  4920                           ;main.c: 239: HMI_Render();
  4921  010DFA  ECE4  F0AF         	call	_HMI_Render	;wreg free
  4922                           
  4923                           ;main.c: 240: if (MXK_Release())
  4924  010DFE  ECB1  F0B2         	call	_MXK_Release	;wreg free
  4925  010E02  0900               	iorlw	0
  4926  010E04  A4D8               	btfss	status,2,c
  4927                           
  4928                           ;main.c: 241: MXK_Dequeue();
  4929  010E06  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  4930  010E0A                     l2363:
  4931                           
  4932                           ;main.c: 242: }
  4933                           ;main.c: 243: if (IRValue < MinDist) {
  4934  010E0A  0100               	movlb	0	; () banked
  4935  010E0C  51FB               	movf	_MinDist& (0+255),w,b
  4936  010E0E  0100               	movlb	0	; () banked
  4937  010E10  5D6D               	subwf	_IRValue& (0+255),w,b
  4938  010E12  0100               	movlb	0	; () banked
  4939  010E14  516E               	movf	(_IRValue+1)& (0+255),w,b
  4940  010E16  0A80               	xorlw	128
  4941  010E18  0103               	movlb	3	; () banked
  4942  010E1A  6FF6               	movwf	??_mode1& (0+255),b
  4943  010E1C  0100               	movlb	0	; () banked
  4944  010E1E  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4945  010E20  0A80               	xorlw	128
  4946  010E22  0103               	movlb	3	; () banked
  4947  010E24  59F6               	subwfb	??_mode1& (0+255),w,b
  4948  010E26  B0D8               	btfsc	status,0,c
  4949  010E28  D008               	goto	l2364
  4950                           
  4951                           ; BSR set to: 3
  4952                           ;main.c: 244: MinDist = IRValue;
  4953  010E2A  C06D  F0FB         	movff	_IRValue,_MinDist
  4954  010E2E  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  4955                           
  4956                           ;main.c: 245: Stepstomin = StepRotate;
  4957  010E32  C071  F06F         	movff	_StepRotate,_Stepstomin
  4958  010E36  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  4959  010E3A                     l2364:
  4960                           
  4961                           ; BSR set to: 3
  4962                           ;main.c: 246: }
  4963                           ;main.c: 247: if (MXK_SwitchTo(eMXK_Motor)) {
  4964                           
  4965                           ; BSR set to: 3
  4966  010E3A  0E08               	movlw	8
  4967  010E3C  EC83  F0AF         	call	_MXK_SwitchTo
  4968  010E40  0900               	iorlw	0
  4969  010E42  B4D8               	btfsc	status,2,c
  4970  010E44  D020               	goto	l2366
  4971                           
  4972                           ;main.c: 248: Motor_Speed(&Stepper, (50));
  4973  010E46  0EAF               	movlw	low _Stepper
  4974  010E48  0100               	movlb	0	; () banked
  4975  010E4A  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  4976  010E4C  0E00               	movlw	high _Stepper
  4977  010E4E  0100               	movlb	0	; () banked
  4978  010E50  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4979  010E52  0E00               	movlw	0
  4980  010E54  0100               	movlb	0	; () banked
  4981  010E56  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4982  010E58  0E32               	movlw	50
  4983  010E5A  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  4984  010E5C  EC97  F0B1         	call	_Motor_Speed	;wreg free
  4985                           
  4986                           ;main.c: 249: Motor_Move(&Stepper, 1);
  4987  010E60  0EAF               	movlw	low _Stepper
  4988  010E62  0100               	movlb	0	; () banked
  4989  010E64  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  4990  010E66  0E00               	movlw	high _Stepper
  4991  010E68  0100               	movlb	0	; () banked
  4992  010E6A  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4993  010E6C  0E00               	movlw	0
  4994  010E6E  0100               	movlb	0	; () banked
  4995  010E70  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4996  010E72  0E01               	movlw	1
  4997  010E74  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  4998  010E76  EC9B  F0B0         	call	_Motor_Move	;wreg free
  4999                           
  5000                           ;main.c: 250: if (MXK_Release())
  5001  010E7A  ECB1  F0B2         	call	_MXK_Release	;wreg free
  5002  010E7E  0900               	iorlw	0
  5003  010E80  A4D8               	btfss	status,2,c
  5004                           
  5005                           ;main.c: 251: MXK_Dequeue();
  5006  010E82  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  5007  010E86                     l2366:
  5008                           
  5009                           ;main.c: 252: }
  5010                           ;main.c: 253: TimerX = 10;
  5011  010E86  0E00               	movlw	0
  5012  010E88  0100               	movlb	0	; () banked
  5013  010E8A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  5014  010E8C  0E0A               	movlw	10
  5015  010E8E  6FF9               	movwf	_TimerX& (0+255),b
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;main.c: 254: if (TimerX > 0) {
  5019  010E90  0100               	movlb	0	; () banked
  5020  010E92  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5021  010E94  D063               	goto	u13840
  5022  010E96  0100               	movlb	0	; () banked
  5023  010E98  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5024  010E9A  E156               	bnz	l16494
  5025  010E9C  0100               	movlb	0	; () banked
  5026  010E9E  05F9               	decf	_TimerX& (0+255),w,b
  5027  010EA0  B0D8               	btfsc	status,0,c
  5028  010EA2  D052               	goto	l2368
  5029  010EA4  D05B               	goto	u13840
  5030  010EA6                     l16476:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;main.c: 256: ADC_Start(&ADC_AN0);
  5034  010EA6  0EB5               	movlw	low _ADC_AN0
  5035  010EA8  0100               	movlb	0	; () banked
  5036  010EAA  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5037  010EAC  0E00               	movlw	high _ADC_AN0
  5038  010EAE  0100               	movlb	0	; () banked
  5039  010EB0  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5040  010EB2  EC15  F0A8         	call	_ADC_Start	;wreg free
  5041                           
  5042                           ;main.c: 257: if (MXK_SwitchTo(eMXK_HMI)) {
  5043  010EB6  0E01               	movlw	1
  5044  010EB8  EC83  F0AF         	call	_MXK_SwitchTo
  5045  010EBC  0900               	iorlw	0
  5046  010EBE  B4D8               	btfsc	status,2,c
  5047  010EC0  D00E               	goto	l2371
  5048                           
  5049                           ;main.c: 258: HMI_SetNumber(IRValue);
  5050  010EC2  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5051  010EC6  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5052  010ECA  ECAC  F0B1         	call	_HMI_SetNumber	;wreg free
  5053                           
  5054                           ;main.c: 259: HMI_Render();
  5055  010ECE  ECE4  F0AF         	call	_HMI_Render	;wreg free
  5056                           
  5057                           ;main.c: 260: if (MXK_Release())
  5058  010ED2  ECB1  F0B2         	call	_MXK_Release	;wreg free
  5059  010ED6  0900               	iorlw	0
  5060  010ED8  A4D8               	btfss	status,2,c
  5061                           
  5062                           ;main.c: 261: MXK_Dequeue();
  5063  010EDA  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  5064  010EDE                     l2371:
  5065                           
  5066                           ;main.c: 262: }
  5067                           ;main.c: 263: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5068  010EDE  0EB5               	movlw	low _ADC_AN0
  5069  010EE0  0100               	movlb	0	; () banked
  5070  010EE2  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5071  010EE4  0E00               	movlw	high _ADC_AN0
  5072  010EE6  0100               	movlb	0	; () banked
  5073  010EE8  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5074  010EEA  EC27  F09E         	call	_ADC_Voltage	;wreg free
  5075  010EEE  C0E1  F3FA         	movff	?_ADC_Voltage,_mode1$15600
  5076  010EF2  C0E2  F3FB         	movff	?_ADC_Voltage+1,_mode1$15600+1
  5077  010EF6  C0E3  F3FC         	movff	?_ADC_Voltage+2,_mode1$15600+2
  5078  010EFA  C0E4  F3FD         	movff	?_ADC_Voltage+3,_mode1$15600+3
  5079                           
  5080                           ;main.c: 262: }
  5081                           ;main.c: 263: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5082  010EFE  C3FA  F0BE         	movff	_mode1$15600,___fldiv@a
  5083  010F02  C3FB  F0BF         	movff	_mode1$15600+1,___fldiv@a+1
  5084  010F06  C3FC  F0C0         	movff	_mode1$15600+2,___fldiv@a+2
  5085  010F0A  C3FD  F0C1         	movff	_mode1$15600+3,___fldiv@a+3
  5086  010F0E  0E00               	movlw	0
  5087  010F10  0100               	movlb	0	; () banked
  5088  010F12  6FBA               	movwf	___fldiv@b& (0+255),b
  5089  010F14  0E00               	movlw	0
  5090  010F16  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5091  010F18  0E6C               	movlw	108
  5092  010F1A  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5093  010F1C  0E42               	movlw	66
  5094  010F1E  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5095  010F20  EC54  F088         	call	___fldiv	;wreg free
  5096  010F24  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5097  010F28  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5098  010F2C  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5099  010F30  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5100  010F34  ECC6  F09B         	call	___fltol	;wreg free
  5101  010F38  C0F3  F06D         	movff	?___fltol,_IRValue
  5102  010F3C  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5103                           
  5104                           ;main.c: 264: TimerX--;
  5105  010F40  0100               	movlb	0	; () banked
  5106  010F42  07F9               	decf	_TimerX& (0+255),f,b
  5107  010F44  A0D8               	btfss	status,0,c
  5108  010F46  07FA               	decf	(_TimerX+1)& (0+255),f,b
  5109  010F48                     l2368:
  5110  010F48                     l16494:
  5111                           
  5112                           ; BSR set to: 0
  5113  010F48  0100               	movlb	0	; () banked
  5114  010F4A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5115  010F4C  D007               	goto	u13840
  5116  010F4E  0100               	movlb	0	; () banked
  5117  010F50  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5118  010F52  E1A9               	bnz	l16476
  5119  010F54  0100               	movlb	0	; () banked
  5120  010F56  05F9               	decf	_TimerX& (0+255),w,b
  5121  010F58  B0D8               	btfsc	status,0,c
  5122  010F5A  D7A5               	goto	l2369
  5123  010F5C                     u13840:
  5124                           
  5125                           ; BSR set to: 0
  5126                           
  5127                           ; BSR set to: 0
  5128                           
  5129                           ; BSR set to: 0
  5130                           
  5131                           ; BSR set to: 0
  5132  010F5C  0100               	movlb	0	; () banked
  5133  010F5E  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  5134  010F60  D704               	goto	l2361
  5135  010F62  0E90               	movlw	144
  5136  010F64  0100               	movlb	0	; () banked
  5137  010F66  5D71               	subwf	_StepRotate& (0+255),w,b
  5138  010F68  0E01               	movlw	1
  5139  010F6A  0100               	movlb	0	; () banked
  5140  010F6C  5972               	subwfb	(_StepRotate+1)& (0+255),w,b
  5141  010F6E  A0D8               	btfss	status,0,c
  5142  010F70  D6FC               	goto	l2361
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;main.c: 265: }
  5146                           ;main.c: 266: }
  5147                           ;main.c: 267: }
  5148                           ;main.c: 268: if (MXK_SwitchTo(eMXK_Motor)) {
  5149                           
  5150                           ; BSR set to: 0
  5151  010F72  0E08               	movlw	8
  5152  010F74  EC83  F0AF         	call	_MXK_SwitchTo
  5153  010F78  0900               	iorlw	0
  5154  010F7A  B4D8               	btfsc	status,2,c
  5155  010F7C  D08A               	goto	l2376
  5156                           
  5157                           ;main.c: 269: Motor_Speed(&Stepper, (50));
  5158  010F7E  0EAF               	movlw	low _Stepper
  5159  010F80  0100               	movlb	0	; () banked
  5160  010F82  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  5161  010F84  0E00               	movlw	high _Stepper
  5162  010F86  0100               	movlb	0	; () banked
  5163  010F88  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5164  010F8A  0E00               	movlw	0
  5165  010F8C  0100               	movlb	0	; () banked
  5166  010F8E  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5167  010F90  0E32               	movlw	50
  5168  010F92  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  5169  010F94  EC97  F0B1         	call	_Motor_Speed	;wreg free
  5170                           
  5171                           ;main.c: 270: int moveto = 400 - Stepstomin;
  5172  010F98  C06F  F3F6         	movff	_Stepstomin,??_mode1
  5173  010F9C  C070  F3F7         	movff	_Stepstomin+1,??_mode1+1
  5174  010FA0  0103               	movlb	3	; () banked
  5175  010FA2  1FF6               	comf	??_mode1& (0+255),f,b
  5176  010FA4  1FF7               	comf	(??_mode1+1)& (0+255),f,b
  5177  010FA6  4BF6               	infsnz	??_mode1& (0+255),f,b
  5178  010FA8  2BF7               	incf	(??_mode1+1)& (0+255),f,b
  5179  010FAA  0E90               	movlw	144
  5180  010FAC  0103               	movlb	3	; () banked
  5181  010FAE  25F6               	addwf	??_mode1& (0+255),w,b
  5182  010FB0  0103               	movlb	3	; () banked
  5183  010FB2  6FF8               	movwf	mode1@moveto& (0+255),b
  5184  010FB4  0E01               	movlw	1
  5185  010FB6  0103               	movlb	3	; () banked
  5186  010FB8  21F7               	addwfc	(??_mode1+1)& (0+255),w,b
  5187  010FBA  0103               	movlb	3	; () banked
  5188  010FBC  6FF9               	movwf	(mode1@moveto+1)& (0+255),b
  5189                           
  5190                           ; BSR set to: 3
  5191                           ;main.c: 272: Motor_Move(&Stepper, (-moveto));
  5192  010FBE  0EAF               	movlw	low _Stepper
  5193  010FC0  0100               	movlb	0	; () banked
  5194  010FC2  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  5195  010FC4  0E00               	movlw	high _Stepper
  5196  010FC6  0100               	movlb	0	; () banked
  5197  010FC8  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5198  010FCA  C3F8  F3F6         	movff	mode1@moveto,??_mode1
  5199  010FCE  C3F9  F3F7         	movff	mode1@moveto+1,??_mode1+1
  5200  010FD2  0103               	movlb	3	; () banked
  5201  010FD4  1FF6               	comf	??_mode1& (0+255),f,b
  5202  010FD6  1FF7               	comf	(??_mode1+1)& (0+255),f,b
  5203  010FD8  4BF6               	infsnz	??_mode1& (0+255),f,b
  5204  010FDA  2BF7               	incf	(??_mode1+1)& (0+255),f,b
  5205  010FDC  C3F6  F0BF         	movff	??_mode1,Motor_Move@pDelta
  5206  010FE0  C3F7  F0C0         	movff	??_mode1+1,Motor_Move@pDelta+1
  5207  010FE4  EC9B  F0B0         	call	_Motor_Move	;wreg free
  5208                           
  5209                           ;main.c: 273: if (MXK_Release())
  5210  010FE8  ECB1  F0B2         	call	_MXK_Release	;wreg free
  5211  010FEC  0900               	iorlw	0
  5212  010FEE  B4D8               	btfsc	status,2,c
  5213  010FF0  D050               	goto	l2376
  5214                           
  5215                           ;main.c: 274: MXK_Dequeue();
  5216  010FF2  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  5217                           
  5218                           ;main.c: 275: }
  5219                           ;main.c: 276: while (Stepper.mDelta > 0) {
  5220  010FF6  D04D               	goto	l2376
  5221  010FF8                     l16510:
  5222                           
  5223                           ;main.c: 277: ADC_Start(&ADC_AN0);
  5224  010FF8  0EB5               	movlw	low _ADC_AN0
  5225  010FFA  0100               	movlb	0	; () banked
  5226  010FFC  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5227  010FFE  0E00               	movlw	high _ADC_AN0
  5228  011000  0100               	movlb	0	; () banked
  5229  011002  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5230  011004  EC15  F0A8         	call	_ADC_Start	;wreg free
  5231                           
  5232                           ;main.c: 278: if (MXK_SwitchTo(eMXK_HMI)) {
  5233  011008  0E01               	movlw	1
  5234  01100A  EC83  F0AF         	call	_MXK_SwitchTo
  5235  01100E  0900               	iorlw	0
  5236  011010  B4D8               	btfsc	status,2,c
  5237  011012  D00E               	goto	l2379
  5238                           
  5239                           ;main.c: 279: HMI_SetNumber(IRValue);
  5240  011014  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5241  011018  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5242  01101C  ECAC  F0B1         	call	_HMI_SetNumber	;wreg free
  5243                           
  5244                           ;main.c: 280: HMI_Render();
  5245  011020  ECE4  F0AF         	call	_HMI_Render	;wreg free
  5246                           
  5247                           ;main.c: 281: if (MXK_Release())
  5248  011024  ECB1  F0B2         	call	_MXK_Release	;wreg free
  5249  011028  0900               	iorlw	0
  5250  01102A  A4D8               	btfss	status,2,c
  5251                           
  5252                           ;main.c: 282: MXK_Dequeue();
  5253  01102C  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
  5254  011030                     l2379:
  5255                           
  5256                           ;main.c: 283: }
  5257                           ;main.c: 284: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5258  011030  0EB5               	movlw	low _ADC_AN0
  5259  011032  0100               	movlb	0	; () banked
  5260  011034  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5261  011036  0E00               	movlw	high _ADC_AN0
  5262  011038  0100               	movlb	0	; () banked
  5263  01103A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5264  01103C  EC27  F09E         	call	_ADC_Voltage	;wreg free
  5265  011040  C0E1  F3FA         	movff	?_ADC_Voltage,_mode1$15600
  5266  011044  C0E2  F3FB         	movff	?_ADC_Voltage+1,_mode1$15600+1
  5267  011048  C0E3  F3FC         	movff	?_ADC_Voltage+2,_mode1$15600+2
  5268  01104C  C0E4  F3FD         	movff	?_ADC_Voltage+3,_mode1$15600+3
  5269                           
  5270                           ;main.c: 283: }
  5271                           ;main.c: 284: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5272  011050  C3FA  F0BE         	movff	_mode1$15600,___fldiv@a
  5273  011054  C3FB  F0BF         	movff	_mode1$15600+1,___fldiv@a+1
  5274  011058  C3FC  F0C0         	movff	_mode1$15600+2,___fldiv@a+2
  5275  01105C  C3FD  F0C1         	movff	_mode1$15600+3,___fldiv@a+3
  5276  011060  0E00               	movlw	0
  5277  011062  0100               	movlb	0	; () banked
  5278  011064  6FBA               	movwf	___fldiv@b& (0+255),b
  5279  011066  0E00               	movlw	0
  5280  011068  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5281  01106A  0E6C               	movlw	108
  5282  01106C  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5283  01106E  0E42               	movlw	66
  5284  011070  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5285  011072  EC54  F088         	call	___fldiv	;wreg free
  5286  011076  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5287  01107A  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5288  01107E  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5289  011082  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5290  011086  ECC6  F09B         	call	___fltol	;wreg free
  5291  01108A  C0F3  F06D         	movff	?___fltol,_IRValue
  5292  01108E  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5293  011092                     l2376:
  5294  011092  0100               	movlb	0	; () banked
  5295  011094  BFB0               	btfsc	(_Stepper+1)& (0+255),7,b
  5296  011096  0012               	return	
  5297  011098  0100               	movlb	0	; () banked
  5298  01109A  51B0               	movf	(_Stepper+1)& (0+255),w,b
  5299  01109C  E1AD               	bnz	l16510
  5300  01109E  0100               	movlb	0	; () banked
  5301  0110A0  05AF               	decf	_Stepper& (0+255),w,b
  5302  0110A2  A0D8               	btfss	status,0,c
  5303  0110A4  0012               	return	
  5304  0110A6  D7A8               	goto	l2377
  5305  0110A8                     __end_of_mode1:
  5306                           	opt stack 0
  5307                           tblptru	equ	0xFF8
  5308                           tblptrh	equ	0xFF7
  5309                           tblptrl	equ	0xFF6
  5310                           tablat	equ	0xFF5
  5311                           postinc0	equ	0xFEE
  5312                           wreg	equ	0xFE8
  5313                           postdec1	equ	0xFE5
  5314                           fsr1h	equ	0xFE2
  5315                           fsr1l	equ	0xFE1
  5316                           status	equ	0xFD8
  5317                           
  5318 ;; *************** function _safeToGo *****************
  5319 ;; Defined at:
  5320 ;;		line 123 in file "main.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;		None
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;Total ram usage:        0 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:   16
  5341 ;; This function calls:
  5342 ;;		_HMI_Poll
  5343 ;;		_irobot_song_play
  5344 ;;		_irobot_stop_motion
  5345 ;;		_update_angle
  5346 ;;		_update_bump_and_cliff
  5347 ;;		_update_distance
  5348 ;; This function is called by:
  5349 ;;		_mode1
  5350 ;;		_mode2
  5351 ;;		_mode3
  5352 ;;		_mode4
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text9
  5357  015C84                     __ptext9:
  5358                           	opt stack 0
  5359  015C84                     _safeToGo:
  5360                           	opt stack 13
  5361                           
  5362                           ;main.c: 124: update_bump_and_cliff();
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;incstack = 0
  5366  015C84  EC7E  F0B0         	call	_update_bump_and_cliff	;wreg free
  5367                           
  5368                           ;main.c: 125: update_distance();
  5369  015C88  EC59  F0B3         	call	_update_distance	;wreg free
  5370                           
  5371                           ;main.c: 126: update_angle();
  5372  015C8C  EC62  F0B3         	call	_update_angle	;wreg free
  5373                           
  5374                           ;main.c: 127: if (iRBumpLeft || iRBumpRight) {
  5375  015C90  0100               	movlb	0	; () banked
  5376  015C92  5187               	movf	_iRBumpLeft& (0+255),w,b
  5377  015C94  A4D8               	btfss	status,2,c
  5378  015C96  D004               	goto	u11370
  5379                           
  5380                           ; BSR set to: 0
  5381  015C98  0100               	movlb	0	; () banked
  5382  015C9A  5188               	movf	_iRBumpRight& (0+255),w,b
  5383  015C9C  B4D8               	btfsc	status,2,c
  5384  015C9E  D006               	goto	l2323
  5385  015CA0                     u11370:
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;main.c: 128: irobot_song_play(0);
  5389                           
  5390                           ; BSR set to: 0
  5391  015CA0  0E00               	movlw	0
  5392  015CA2  EC45  F0B3         	call	_irobot_song_play
  5393                           
  5394                           ;main.c: 129: irobot_stop_motion(0);
  5395  015CA6  0E00               	movlw	0
  5396  015CA8  ECF8  F0AE         	call	_irobot_stop_motion
  5397  015CAC                     l2323:
  5398                           
  5399                           ;main.c: 130: }
  5400                           ;main.c: 131: if (angleTotal > 83) {
  5401  015CAC  0100               	movlb	0	; () banked
  5402  015CAE  BF74               	btfsc	(_angleTotal+1)& (0+255),7,b
  5403  015CB0  D00B               	goto	l2326
  5404  015CB2  0100               	movlb	0	; () banked
  5405  015CB4  5174               	movf	(_angleTotal+1)& (0+255),w,b
  5406  015CB6  E105               	bnz	u11380
  5407  015CB8  0E54               	movlw	84
  5408  015CBA  0100               	movlb	0	; () banked
  5409  015CBC  5D73               	subwf	_angleTotal& (0+255),w,b
  5410  015CBE  A0D8               	btfss	status,0,c
  5411  015CC0  D003               	goto	l2326
  5412  015CC2                     u11380:
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;main.c: 132: irobot_stop_motion(0);
  5416  015CC2  0E00               	movlw	0
  5417  015CC4  ECF8  F0AE         	call	_irobot_stop_motion
  5418  015CC8                     l2326:
  5419                           
  5420                           ;main.c: 133: }
  5421                           ;main.c: 134: HMI_Poll();
  5422  015CC8  EC79  F0AA         	call	_HMI_Poll	;wreg free
  5423  015CCC  0012               	return		;funcret
  5424  015CCE                     __end_of_safeToGo:
  5425                           	opt stack 0
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           postinc0	equ	0xFEE
  5431                           wreg	equ	0xFE8
  5432                           postdec1	equ	0xFE5
  5433                           fsr1h	equ	0xFE2
  5434                           fsr1l	equ	0xFE1
  5435                           status	equ	0xFD8
  5436                           
  5437 ;; *************** function _update_distance *****************
  5438 ;; Defined at:
  5439 ;;		line 360 in file "Library/iRobotSerial.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;		None
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  1    wreg      void 
  5446 ;; Registers used:
  5447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;Total ram usage:        0 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:   10
  5460 ;; This function calls:
  5461 ;;		_irobot_query_and_update
  5462 ;; This function is called by:
  5463 ;;		_safeToGo
  5464 ;;		_move_and_rotate
  5465 ;;		_mode2
  5466 ;;		_mode4
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text10
  5471  0166B2                     __ptext10:
  5472                           	opt stack 0
  5473  0166B2                     _update_distance:
  5474                           	opt stack 19
  5475                           
  5476                           ;iRobotSerial.c: 361: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5477                           
  5478                           ;incstack = 0
  5479  0166B2  0E00               	movlw	0
  5480  0166B4  0100               	movlb	0	; () banked
  5481  0166B6  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5482  0166B8  0E13               	movlw	19
  5483  0166BA  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5484  0166BC  0E01               	movlw	1
  5485  0166BE  ECD8  F095         	call	_irobot_query_and_update
  5486  0166C2  0012               	return		;funcret
  5487  0166C4                     __end_of_update_distance:
  5488                           	opt stack 0
  5489                           tblptru	equ	0xFF8
  5490                           tblptrh	equ	0xFF7
  5491                           tblptrl	equ	0xFF6
  5492                           tablat	equ	0xFF5
  5493                           postinc0	equ	0xFEE
  5494                           wreg	equ	0xFE8
  5495                           postdec1	equ	0xFE5
  5496                           fsr1h	equ	0xFE2
  5497                           fsr1l	equ	0xFE1
  5498                           status	equ	0xFD8
  5499                           
  5500 ;; *************** function _update_bump_and_cliff *****************
  5501 ;; Defined at:
  5502 ;;		line 352 in file "Library/iRobotSerial.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;		None
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;		None
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  1    wreg      void 
  5509 ;; Registers used:
  5510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;Total ram usage:        0 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; Hardware stack levels required when called:   10
  5523 ;; This function calls:
  5524 ;;		_irobot_query_and_update
  5525 ;; This function is called by:
  5526 ;;		_safeToGo
  5527 ;;		_mode4
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           	psect	text11
  5532  0160FC                     __ptext11:
  5533                           	opt stack 0
  5534  0160FC                     _update_bump_and_cliff:
  5535                           	opt stack 19
  5536                           
  5537                           ;iRobotSerial.c: 353: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5538                           ;iRobotSerial.c: 354: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5539                           ;iRobotSerial.c: 355: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5540                           
  5541                           ;incstack = 0
  5542  0160FC  0E00               	movlw	0
  5543  0160FE  0100               	movlb	0	; () banked
  5544  016100  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5545  016102  0E07               	movlw	7
  5546  016104  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5547  016106  0E00               	movlw	0
  5548  016108  0100               	movlb	0	; () banked
  5549  01610A  6FC3               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5550  01610C  0E09               	movlw	9
  5551  01610E  6FC2               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5552  016110  0E00               	movlw	0
  5553  016112  0100               	movlb	0	; () banked
  5554  016114  6FC5               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5555  016116  0E0A               	movlw	10
  5556  016118  6FC4               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5557  01611A  0E00               	movlw	0
  5558  01611C  0100               	movlb	0	; () banked
  5559  01611E  6FC7               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5560  016120  0E0B               	movlw	11
  5561  016122  6FC6               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5562  016124  0E00               	movlw	0
  5563  016126  0100               	movlb	0	; () banked
  5564  016128  6FC9               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5565  01612A  0E0C               	movlw	12
  5566  01612C  6FC8               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5567  01612E  0E05               	movlw	5
  5568  016130  ECD8  F095         	call	_irobot_query_and_update
  5569  016134  0012               	return		;funcret
  5570  016136                     __end_of_update_bump_and_cliff:
  5571                           	opt stack 0
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           postinc0	equ	0xFEE
  5577                           wreg	equ	0xFE8
  5578                           postdec1	equ	0xFE5
  5579                           fsr1h	equ	0xFE2
  5580                           fsr1l	equ	0xFE1
  5581                           status	equ	0xFD8
  5582                           
  5583 ;; *************** function _update_angle *****************
  5584 ;; Defined at:
  5585 ;;		line 366 in file "Library/iRobotSerial.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;		None
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      void 
  5592 ;; Registers used:
  5593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5603 ;;Total ram usage:        0 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:   10
  5606 ;; This function calls:
  5607 ;;		_irobot_query_and_update
  5608 ;; This function is called by:
  5609 ;;		_irobot_rotate
  5610 ;;		_safeToGo
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text12
  5615  0166C4                     __ptext12:
  5616                           	opt stack 0
  5617  0166C4                     _update_angle:
  5618                           	opt stack 18
  5619                           
  5620                           ;iRobotSerial.c: 367: irobot_query_and_update(1, iR_PKT_ANGLE);
  5621                           
  5622                           ;incstack = 0
  5623  0166C4  0E00               	movlw	0
  5624  0166C6  0100               	movlb	0	; () banked
  5625  0166C8  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5626  0166CA  0E14               	movlw	20
  5627  0166CC  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5628  0166CE  0E01               	movlw	1
  5629  0166D0  ECD8  F095         	call	_irobot_query_and_update
  5630  0166D4  0012               	return		;funcret
  5631  0166D6                     __end_of_update_angle:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           postinc0	equ	0xFEE
  5638                           wreg	equ	0xFE8
  5639                           postdec1	equ	0xFE5
  5640                           fsr1h	equ	0xFE2
  5641                           fsr1l	equ	0xFE1
  5642                           status	equ	0xFD8
  5643                           
  5644 ;; *************** function _irobot_query_and_update *****************
  5645 ;; Defined at:
  5646 ;;		line 142 in file "Library/iRobotSerial.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  numberOfPack    1    wreg     unsigned char 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5651 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5652 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5653 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5654 ;;		 -> ?_irobot_query_and_update(1), 
  5655 ;;  i               1   28[BANK0 ] unsigned char 
  5656 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5657 ;;  j               1   26[BANK0 ] unsigned char 
  5658 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5659 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5669 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;Total ram usage:      535 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    9
  5676 ;; This function calls:
  5677 ;;		_eusart_getch
  5678 ;;		_eusart_putch
  5679 ;;		_get_packet_size
  5680 ;;		_rx_assign
  5681 ;; This function is called by:
  5682 ;;		_update_bump_and_cliff
  5683 ;;		_update_distance
  5684 ;;		_update_angle
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text13
  5689  012BB0                     __ptext13:
  5690                           	opt stack 0
  5691  012BB0                     _irobot_query_and_update:
  5692                           	opt stack 19
  5693                           
  5694                           ;incstack = 0
  5695                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5696  012BB0  0100               	movlb	0	; () banked
  5697  012BB2  6FD2               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5698                           
  5699                           ;iRobotSerial.c: 143: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5700  012BB4  0E00               	movlw	0
  5701  012BB6  0100               	movlb	0	; () banked
  5702  012BB8  6FD1               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5703  012BBA  0E00               	movlw	0
  5704  012BBC  0100               	movlb	0	; () banked
  5705  012BBE  6FD5               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5706                           
  5707                           ;iRobotSerial.c: 145: va_list packetIDs;
  5708                           ;iRobotSerial.c: 146: *packetIDs = __va_start();
  5709  012BC0  0EC0               	movlw	low ?_irobot_query_and_update
  5710  012BC2  0100               	movlb	0	; () banked
  5711  012BC4  6FCF               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5712  012BC6  0E00               	movlw	high ?_irobot_query_and_update
  5713  012BC8  0100               	movlb	0	; () banked
  5714  012BCA  6FD0               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;iRobotSerial.c: 147: eusart_putch(iR_QUERY_LIST);
  5718  012BCC  0E95               	movlw	149
  5719  012BCE  EC82  F0B3         	call	_eusart_putch
  5720                           
  5721                           ;iRobotSerial.c: 148: eusart_putch(numberOfPacketRequests);
  5722  012BD2  0100               	movlb	0	; () banked
  5723  012BD4  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5724  012BD6  EC82  F0B3         	call	_eusart_putch
  5725                           
  5726                           ;iRobotSerial.c: 149: for (i = 0; i < numberOfPacketRequests; i++) {
  5727  012BDA  0E00               	movlw	0
  5728  012BDC  0100               	movlb	0	; () banked
  5729  012BDE  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5730  012BE0  D023               	goto	l2095
  5731  012BE2                     
  5732                           ; BSR set to: 0
  5733                           ;iRobotSerial.c: 150: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5734                           
  5735                           ; BSR set to: 0
  5736  012BE2  C0CF  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5737  012BE6  C0D0  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5738  012BEA  50DF               	movf	indf2,w,c
  5739  012BEC  0100               	movlb	0	; () banked
  5740  012BEE  6FD3               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5741                           
  5742                           ; BSR set to: 0
  5743  012BF0  0E02               	movlw	2
  5744  012BF2  0100               	movlb	0	; () banked
  5745  012BF4  27CF               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5746  012BF6  0E00               	movlw	0
  5747  012BF8  23D0               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;iRobotSerial.c: 151: streamSize += get_packet_size(packetVariable);
  5751  012BFA  0100               	movlb	0	; () banked
  5752  012BFC  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5753  012BFE  ECF6  F0AB         	call	_get_packet_size
  5754  012C02  0100               	movlb	0	; () banked
  5755  012C04  27D1               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;iRobotSerial.c: 152: TXArray[i] = packetVariable;
  5759  012C06  0100               	movlb	0	; () banked
  5760  012C08  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5761  012C0A  0D01               	mullw	1
  5762  012C0C  0E00               	movlw	low irobot_query_and_update@TXArray
  5763  012C0E  24F3               	addwf	prodl,w,c
  5764  012C10  6ED9               	movwf	fsr2l,c
  5765  012C12  0E02               	movlw	high irobot_query_and_update@TXArray
  5766  012C14  20F4               	addwfc	prodh,w,c
  5767  012C16  6EDA               	movwf	fsr2h,c
  5768  012C18  C0D3  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;iRobotSerial.c: 153: eusart_putch(packetVariable);
  5772  012C1C  0100               	movlb	0	; () banked
  5773  012C1E  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5774  012C20  EC82  F0B3         	call	_eusart_putch
  5775  012C24  0100               	movlb	0	; () banked
  5776  012C26  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5777  012C28                     l2095:
  5778                           
  5779                           ; BSR set to: 0
  5780                           
  5781                           ; BSR set to: 0
  5782  012C28  0100               	movlb	0	; () banked
  5783  012C2A  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5784  012C2C  0100               	movlb	0	; () banked
  5785  012C2E  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5786  012C30  A0D8               	btfss	status,0,c
  5787  012C32  D7D7               	goto	l2096
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;iRobotSerial.c: 154: }
  5791                           ;iRobotSerial.c: 155: ;
  5792                           ;iRobotSerial.c: 157: for (i = 0; i < streamSize; i++) {
  5793                           
  5794                           ; BSR set to: 0
  5795  012C34  0E00               	movlw	0
  5796  012C36  0100               	movlb	0	; () banked
  5797  012C38  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5798  012C3A  D00E               	goto	l2098
  5799  012C3C                     
  5800                           ; BSR set to: 0
  5801                           ;iRobotSerial.c: 158: RXArray[i] = eusart_getch();
  5802                           
  5803                           ; BSR set to: 0
  5804  012C3C  0100               	movlb	0	; () banked
  5805  012C3E  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5806  012C40  0D01               	mullw	1
  5807  012C42  0E00               	movlw	low irobot_query_and_update@RXArray
  5808  012C44  24F3               	addwf	prodl,w,c
  5809  012C46  6ED9               	movwf	fsr2l,c
  5810  012C48  0E01               	movlw	high irobot_query_and_update@RXArray
  5811  012C4A  20F4               	addwfc	prodh,w,c
  5812  012C4C  6EDA               	movwf	fsr2h,c
  5813  012C4E  ECC5  F0B3         	call	_eusart_getch	;wreg free
  5814  012C52  6EDF               	movwf	indf2,c
  5815  012C54  0100               	movlb	0	; () banked
  5816  012C56  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5817  012C58                     l2098:
  5818                           
  5819                           ; BSR set to: 0
  5820                           
  5821                           ; BSR set to: 0
  5822  012C58  0100               	movlb	0	; () banked
  5823  012C5A  51D1               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5824  012C5C  0100               	movlb	0	; () banked
  5825  012C5E  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5826  012C60  A0D8               	btfss	status,0,c
  5827  012C62  D7EC               	goto	l2099
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;iRobotSerial.c: 159: }
  5831                           ;iRobotSerial.c: 161: for (i = 0; i < numberOfPacketRequests; i++) {
  5832                           
  5833                           ; BSR set to: 0
  5834  012C64  0E00               	movlw	0
  5835  012C66  0100               	movlb	0	; () banked
  5836  012C68  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5837  012C6A  D05E               	goto	l2101
  5838  012C6C                     l2102:
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;iRobotSerial.c: 162: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5842  012C6C  C0D5  F0D4         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5843  012C70  D021               	goto	l2103
  5844  012C72                     
  5845                           ; BSR set to: 0
  5846                           ;iRobotSerial.c: 163: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5847                           
  5848                           ; BSR set to: 0
  5849  012C72  0100               	movlb	0	; () banked
  5850  012C74  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5851  012C76  0D01               	mullw	1
  5852  012C78  0E00               	movlw	low irobot_query_and_update@RXArray
  5853  012C7A  24F3               	addwf	prodl,w,c
  5854  012C7C  6ED9               	movwf	fsr2l,c
  5855  012C7E  0E01               	movlw	high irobot_query_and_update@RXArray
  5856  012C80  20F4               	addwfc	prodh,w,c
  5857  012C82  6EDA               	movwf	fsr2h,c
  5858  012C84  50DF               	movf	indf2,w,c
  5859  012C86  0100               	movlb	0	; () banked
  5860  012C88  6FBB               	movwf	rx_assign@packetIDValue& (0+255),b
  5861  012C8A  0100               	movlb	0	; () banked
  5862  012C8C  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5863  012C8E  0800               	sublw	0
  5864  012C90  0100               	movlb	0	; () banked
  5865  012C92  25D4               	addwf	irobot_query_and_update@j& (0+255),w,b
  5866  012C94  0100               	movlb	0	; () banked
  5867  012C96  6FBC               	movwf	rx_assign@byteNumber& (0+255),b
  5868  012C98  0100               	movlb	0	; () banked
  5869  012C9A  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5870  012C9C  0D01               	mullw	1
  5871  012C9E  0E00               	movlw	low irobot_query_and_update@TXArray
  5872  012CA0  24F3               	addwf	prodl,w,c
  5873  012CA2  6ED9               	movwf	fsr2l,c
  5874  012CA4  0E02               	movlw	high irobot_query_and_update@TXArray
  5875  012CA6  20F4               	addwfc	prodh,w,c
  5876  012CA8  6EDA               	movwf	fsr2h,c
  5877  012CAA  50DF               	movf	indf2,w,c
  5878  012CAC  ECCC  F09C         	call	_rx_assign
  5879  012CB0  0100               	movlb	0	; () banked
  5880  012CB2  2BD4               	incf	irobot_query_and_update@j& (0+255),f,b
  5881  012CB4                     l2103:
  5882                           
  5883                           ; BSR set to: 0
  5884                           
  5885                           ; BSR set to: 0
  5886  012CB4  0100               	movlb	0	; () banked
  5887  012CB6  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5888  012CB8  0D01               	mullw	1
  5889  012CBA  0E00               	movlw	low irobot_query_and_update@TXArray
  5890  012CBC  24F3               	addwf	prodl,w,c
  5891  012CBE  6ED9               	movwf	fsr2l,c
  5892  012CC0  0E02               	movlw	high irobot_query_and_update@TXArray
  5893  012CC2  20F4               	addwfc	prodh,w,c
  5894  012CC4  6EDA               	movwf	fsr2h,c
  5895  012CC6  50DF               	movf	indf2,w,c
  5896  012CC8  ECF6  F0AB         	call	_get_packet_size
  5897  012CCC  0100               	movlb	0	; () banked
  5898  012CCE  6FCA               	movwf	??_irobot_query_and_update& (0+255),b
  5899  012CD0  6BCB               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5900  012CD2  0100               	movlb	0	; () banked
  5901  012CD4  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5902  012CD6  0100               	movlb	0	; () banked
  5903  012CD8  27CA               	addwf	??_irobot_query_and_update& (0+255),f,b
  5904  012CDA  0E00               	movlw	0
  5905  012CDC  23CB               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5906  012CDE  0100               	movlb	0	; () banked
  5907  012CE0  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5908  012CE2  0100               	movlb	0	; () banked
  5909  012CE4  6FCC               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5910  012CE6  6BCD               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5911  012CE8  0100               	movlb	0	; () banked
  5912  012CEA  51CA               	movf	??_irobot_query_and_update& (0+255),w,b
  5913  012CEC  0100               	movlb	0	; () banked
  5914  012CEE  5DCC               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5915  012CF0  0100               	movlb	0	; () banked
  5916  012CF2  51CD               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5917  012CF4  0A80               	xorlw	128
  5918  012CF6  0100               	movlb	0	; () banked
  5919  012CF8  6FCE               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5920  012CFA  0100               	movlb	0	; () banked
  5921  012CFC  51CB               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5922  012CFE  0A80               	xorlw	128
  5923  012D00  0100               	movlb	0	; () banked
  5924  012D02  59CE               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5925  012D04  A0D8               	btfss	status,0,c
  5926  012D06  D7B5               	goto	l2104
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;iRobotSerial.c: 164: }
  5930                           ;iRobotSerial.c: 165: startIndex += get_packet_size(TXArray[i]);
  5931                           
  5932                           ; BSR set to: 0
  5933  012D08  0100               	movlb	0	; () banked
  5934  012D0A  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5935  012D0C  0D01               	mullw	1
  5936  012D0E  0E00               	movlw	low irobot_query_and_update@TXArray
  5937  012D10  24F3               	addwf	prodl,w,c
  5938  012D12  6ED9               	movwf	fsr2l,c
  5939  012D14  0E02               	movlw	high irobot_query_and_update@TXArray
  5940  012D16  20F4               	addwfc	prodh,w,c
  5941  012D18  6EDA               	movwf	fsr2h,c
  5942  012D1A  50DF               	movf	indf2,w,c
  5943  012D1C  ECF6  F0AB         	call	_get_packet_size
  5944  012D20  0100               	movlb	0	; () banked
  5945  012D22  27D5               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5946                           
  5947                           ; BSR set to: 0
  5948  012D24  0100               	movlb	0	; () banked
  5949  012D26  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5950  012D28                     l2101:
  5951                           
  5952                           ; BSR set to: 0
  5953                           
  5954                           ; BSR set to: 0
  5955  012D28  0100               	movlb	0	; () banked
  5956  012D2A  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5957  012D2C  0100               	movlb	0	; () banked
  5958  012D2E  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5959  012D30  B0D8               	btfsc	status,0,c
  5960  012D32  0012               	return	
  5961  012D34  D79B               	goto	l2102
  5962  012D36                     __end_of_irobot_query_and_update:
  5963                           	opt stack 0
  5964                           tblptru	equ	0xFF8
  5965                           tblptrh	equ	0xFF7
  5966                           tblptrl	equ	0xFF6
  5967                           tablat	equ	0xFF5
  5968                           prodh	equ	0xFF4
  5969                           prodl	equ	0xFF3
  5970                           postinc0	equ	0xFEE
  5971                           wreg	equ	0xFE8
  5972                           postdec1	equ	0xFE5
  5973                           fsr1h	equ	0xFE2
  5974                           fsr1l	equ	0xFE1
  5975                           indf2	equ	0xFDF
  5976                           fsr2h	equ	0xFDA
  5977                           fsr2l	equ	0xFD9
  5978                           status	equ	0xFD8
  5979                           
  5980 ;; *************** function _rx_assign *****************
  5981 ;; Defined at:
  5982 ;;		line 74 in file "Library/iRobotSerial.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;  packetID        1    wreg     unsigned char 
  5985 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5986 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;  packetID        1    5[BANK0 ] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      void 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0, cstack
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5998 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;Total ram usage:        5 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    8
  6005 ;; This function calls:
  6006 ;;		_sort_iRBumpDrop
  6007 ;; This function is called by:
  6008 ;;		_irobot_query_and_update
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text14
  6013  013998                     __ptext14:
  6014                           	opt stack 0
  6015  013998                     _rx_assign:
  6016                           	opt stack 19
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;incstack = 0
  6020                           ;rx_assign@packetID stored from wreg
  6021  013998  0100               	movlb	0	; () banked
  6022  01399A  6FBF               	movwf	rx_assign@packetID& (0+255),b
  6023                           
  6024                           ;iRobotSerial.c: 75: switch (packetID) {
  6025  01399C  D057               	goto	l2035
  6026  01399E                     l2036:
  6027                           
  6028                           ; BSR set to: 0
  6029  01399E  C0BB  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;iRobotSerial.c: 77: sort_iRBumpDrop();
  6033  0139A2  EC45  F0A7         	call	_sort_iRBumpDrop	;wreg free
  6034                           
  6035                           ;iRobotSerial.c: 78: break;
  6036  0139A6  0012               	return	
  6037  0139A8                     l2038:
  6038                           
  6039                           ; BSR set to: 0
  6040  0139A8  C0BB  F035         	movff	rx_assign@packetIDValue,_iRWall
  6041                           
  6042                           ;iRobotSerial.c: 80: break;
  6043  0139AC  0012               	return	
  6044  0139AE                     l2039:
  6045                           
  6046                           ; BSR set to: 0
  6047  0139AE  C0BB  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  6048                           
  6049                           ;iRobotSerial.c: 82: break;
  6050  0139B2  0012               	return	
  6051  0139B4                     l2040:
  6052                           
  6053                           ; BSR set to: 0
  6054  0139B4  C0BB  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  6055                           
  6056                           ;iRobotSerial.c: 84: break;
  6057  0139B8  0012               	return	
  6058  0139BA                     l2041:
  6059                           
  6060                           ; BSR set to: 0
  6061  0139BA  C0BB  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  6062                           
  6063                           ;iRobotSerial.c: 86: break;
  6064  0139BE  0012               	return	
  6065  0139C0                     l2042:
  6066                           
  6067                           ; BSR set to: 0
  6068  0139C0  C0BB  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  6069                           
  6070                           ;iRobotSerial.c: 88: break;
  6071  0139C4  0012               	return	
  6072  0139C6                     l2043:
  6073                           
  6074                           ; BSR set to: 0
  6075  0139C6  C0BB  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  6076                           
  6077                           ;iRobotSerial.c: 90: break;
  6078  0139CA  0012               	return	
  6079  0139CC                     
  6080                           ; BSR set to: 0
  6081                           ;iRobotSerial.c: 92: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  6082                           ;iRobotSerial.c: 93: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB);
  6083                           
  6084                           ; BSR set to: 0
  6085  0139CC  0100               	movlb	0	; () banked
  6086  0139CE  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  6087  0139D0  0100               	movlb	0	; () banked
  6088  0139D2  A4D8               	btfss	status,2,c
  6089  0139D4  D005               	goto	l2046
  6090                           
  6091                           ; BSR set to: 0
  6092  0139D6  C0BB  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  6093  0139DA  0103               	movlb	3	; () banked
  6094  0139DC  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  6095  0139DE  0012               	return	
  6096  0139E0                     l2046:
  6097                           
  6098                           ; BSR set to: 0
  6099  0139E0  C0BB  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  6100  0139E4  0103               	movlb	3	; () banked
  6101  0139E6  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  6102                           
  6103                           ; BSR set to: 3
  6104  0139E8  0103               	movlb	3	; () banked
  6105  0139EA  5122               	movf	_iRDistanceSS& (0+255),w,b
  6106  0139EC  0100               	movlb	0	; () banked
  6107  0139EE  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  6108  0139F0  6BBD               	clrf	??_rx_assign& (0+255),b
  6109  0139F2  0103               	movlb	3	; () banked
  6110  0139F4  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  6111  0139F6  0100               	movlb	0	; () banked
  6112  0139F8  25BD               	addwf	??_rx_assign& (0+255),w,b
  6113  0139FA  0100               	movlb	0	; () banked
  6114  0139FC  6F79               	movwf	_iRDistance& (0+255),b
  6115  0139FE  0103               	movlb	3	; () banked
  6116  013A00  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  6117  013A02  0100               	movlb	0	; () banked
  6118  013A04  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6119  013A06  0100               	movlb	0	; () banked
  6120  013A08  6F7A               	movwf	(_iRDistance+1)& (0+255),b
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;iRobotSerial.c: 94: break;
  6124  013A0A  0012               	return	
  6125  013A0C                     
  6126                           ; BSR set to: 0
  6127                           ;iRobotSerial.c: 96: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  6128                           ;iRobotSerial.c: 97: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB);
  6129                           
  6130                           ; BSR set to: 0
  6131  013A0C  0100               	movlb	0	; () banked
  6132  013A0E  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  6133  013A10  0100               	movlb	0	; () banked
  6134  013A12  A4D8               	btfss	status,2,c
  6135  013A14  D005               	goto	l2051
  6136                           
  6137                           ; BSR set to: 0
  6138  013A16  C0BB  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  6139  013A1A  0103               	movlb	3	; () banked
  6140  013A1C  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  6141  013A1E  0012               	return	
  6142  013A20                     l2051:
  6143                           
  6144                           ; BSR set to: 0
  6145  013A20  C0BB  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  6146  013A24  0103               	movlb	3	; () banked
  6147  013A26  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  6148                           
  6149                           ; BSR set to: 3
  6150  013A28  0103               	movlb	3	; () banked
  6151  013A2A  511E               	movf	_iRAngleSS& (0+255),w,b
  6152  013A2C  0100               	movlb	0	; () banked
  6153  013A2E  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  6154  013A30  6BBD               	clrf	??_rx_assign& (0+255),b
  6155  013A32  0103               	movlb	3	; () banked
  6156  013A34  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  6157  013A36  0100               	movlb	0	; () banked
  6158  013A38  25BD               	addwf	??_rx_assign& (0+255),w,b
  6159  013A3A  0100               	movlb	0	; () banked
  6160  013A3C  6F77               	movwf	_iRAngle& (0+255),b
  6161  013A3E  0103               	movlb	3	; () banked
  6162  013A40  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  6163  013A42  0100               	movlb	0	; () banked
  6164  013A44  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6165  013A46  0100               	movlb	0	; () banked
  6166  013A48  6F78               	movwf	(_iRAngle+1)& (0+255),b
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;iRobotSerial.c: 99: }
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;iRobotSerial.c: 98: break;
  6173  013A4A  0012               	return	
  6174  013A4C                     l2035:
  6175                           
  6176                           ; BSR set to: 0
  6177  013A4C  0100               	movlb	0	; () banked
  6178  013A4E  51BF               	movf	rx_assign@packetID& (0+255),w,b
  6179                           
  6180                           ; Switch size 1, requested type "space"
  6181                           ; Number of cases is 9, Range of values is 7 to 20
  6182                           ; switch strategies available:
  6183                           ; Name         Instructions Cycles
  6184                           ; simple_byte           28    15 (average)
  6185                           ;	Chosen strategy is simple_byte
  6186  013A50  0A07               	xorlw	7	; case 7
  6187  013A52  B4D8               	btfsc	status,2,c
  6188  013A54  D7A4               	goto	l2036
  6189  013A56  0A0F               	xorlw	15	; case 8
  6190  013A58  B4D8               	btfsc	status,2,c
  6191  013A5A  D7A6               	goto	l2038
  6192  013A5C  0A01               	xorlw	1	; case 9
  6193  013A5E  B4D8               	btfsc	status,2,c
  6194  013A60  D7A6               	goto	l2039
  6195  013A62  0A03               	xorlw	3	; case 10
  6196  013A64  B4D8               	btfsc	status,2,c
  6197  013A66  D7A6               	goto	l2040
  6198  013A68  0A01               	xorlw	1	; case 11
  6199  013A6A  B4D8               	btfsc	status,2,c
  6200  013A6C  D7A6               	goto	l2041
  6201  013A6E  0A07               	xorlw	7	; case 12
  6202  013A70  B4D8               	btfsc	status,2,c
  6203  013A72  D7A6               	goto	l2042
  6204  013A74  0A01               	xorlw	1	; case 13
  6205  013A76  B4D8               	btfsc	status,2,c
  6206  013A78  D7A6               	goto	l2043
  6207  013A7A  0A1E               	xorlw	30	; case 19
  6208  013A7C  B4D8               	btfsc	status,2,c
  6209  013A7E  D7A6               	goto	l2044
  6210  013A80  0A07               	xorlw	7	; case 20
  6211  013A82  A4D8               	btfss	status,2,c
  6212  013A84  0012               	return	
  6213  013A86  D7C2               	goto	l2049
  6214  013A88                     __end_of_rx_assign:
  6215                           	opt stack 0
  6216                           tblptru	equ	0xFF8
  6217                           tblptrh	equ	0xFF7
  6218                           tblptrl	equ	0xFF6
  6219                           tablat	equ	0xFF5
  6220                           prodh	equ	0xFF4
  6221                           prodl	equ	0xFF3
  6222                           postinc0	equ	0xFEE
  6223                           wreg	equ	0xFE8
  6224                           postdec1	equ	0xFE5
  6225                           fsr1h	equ	0xFE2
  6226                           fsr1l	equ	0xFE1
  6227                           indf2	equ	0xFDF
  6228                           fsr2h	equ	0xFDA
  6229                           fsr2l	equ	0xFD9
  6230                           status	equ	0xFD8
  6231                           
  6232 ;; *************** function _sort_iRBumpDrop *****************
  6233 ;; Defined at:
  6234 ;;		line 102 in file "Library/iRobotSerial.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;		None
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      void 
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;Total ram usage:        1 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    7
  6255 ;; This function calls:
  6256 ;;		Nothing
  6257 ;; This function is called by:
  6258 ;;		_rx_assign
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text15
  6263  014E8A                     __ptext15:
  6264                           	opt stack 0
  6265  014E8A                     _sort_iRBumpDrop:
  6266                           	opt stack 19
  6267                           
  6268                           ;iRobotSerial.c: 103: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  6269                           
  6270                           ;incstack = 0
  6271  014E8A  A036               	btfss	_iRBumpDrop,0,c
  6272  014E8C  D002               	goto	l2058
  6273  014E8E  0E01               	movlw	1
  6274  014E90  D001               	goto	L1
  6275  014E92                     l2058:
  6276                           
  6277                           ; BSR set to: 0
  6278  014E92  0E00               	movlw	0
  6279  014E94                     L1:
  6280  014E94  0100               	movlb	0	; () banked
  6281  014E96  6F88               	movwf	_iRBumpRight& (0+255),b
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;iRobotSerial.c: 104: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0
      +                          );
  6285                           
  6286                           ; BSR set to: 0
  6287  014E98  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6288  014E9C  0100               	movlb	0	; () banked
  6289  014E9E  90D8               	bcf	status,0,c
  6290  014EA0  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6291  014EA2  0100               	movlb	0	; () banked
  6292  014EA4  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6293  014EA6  D002               	goto	l2062
  6294                           
  6295                           ; BSR set to: 0
  6296  014EA8  0E01               	movlw	1
  6297  014EAA  D001               	goto	L2
  6298  014EAC                     l2062:
  6299                           
  6300                           ; BSR set to: 0
  6301                           
  6302                           ; BSR set to: 0
  6303  014EAC  0E00               	movlw	0
  6304  014EAE                     L2:
  6305  014EAE  0100               	movlb	0	; () banked
  6306  014EB0  6F87               	movwf	_iRBumpLeft& (0+255),b
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;iRobotSerial.c: 105: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight =
      +                           0);
  6310                           
  6311                           ; BSR set to: 0
  6312  014EB2  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6313  014EB6  0100               	movlb	0	; () banked
  6314  014EB8  90D8               	bcf	status,0,c
  6315  014EBA  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6316  014EBC  0100               	movlb	0	; () banked
  6317  014EBE  90D8               	bcf	status,0,c
  6318  014EC0  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6319  014EC2  0100               	movlb	0	; () banked
  6320  014EC4  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6321  014EC6  D002               	goto	l2066
  6322                           
  6323                           ; BSR set to: 0
  6324  014EC8  0E01               	movlw	1
  6325  014ECA  D001               	goto	L3
  6326  014ECC                     l2066:
  6327                           
  6328                           ; BSR set to: 0
  6329                           
  6330                           ; BSR set to: 0
  6331  014ECC  0E00               	movlw	0
  6332  014ECE                     L3:
  6333  014ECE  0100               	movlb	0	; () banked
  6334  014ED0  6F86               	movwf	_iRDropRight& (0+255),b
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;iRobotSerial.c: 106: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0
      +                          );
  6338                           
  6339                           ; BSR set to: 0
  6340  014ED2  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6341  014ED6  0100               	movlb	0	; () banked
  6342  014ED8  90D8               	bcf	status,0,c
  6343  014EDA  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6344  014EDC  0100               	movlb	0	; () banked
  6345  014EDE  90D8               	bcf	status,0,c
  6346  014EE0  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6347  014EE2  0100               	movlb	0	; () banked
  6348  014EE4  90D8               	bcf	status,0,c
  6349  014EE6  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6350  014EE8  0100               	movlb	0	; () banked
  6351  014EEA  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6352  014EEC  D002               	goto	l2070
  6353                           
  6354                           ; BSR set to: 0
  6355  014EEE  0E01               	movlw	1
  6356  014EF0  D001               	goto	L4
  6357  014EF2                     l2070:
  6358                           
  6359                           ; BSR set to: 0
  6360                           
  6361                           ; BSR set to: 0
  6362  014EF2  0E00               	movlw	0
  6363  014EF4                     L4:
  6364  014EF4  0100               	movlb	0	; () banked
  6365  014EF6  6F85               	movwf	_iRDropLeft& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;iRobotSerial.c: 107: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster
      +                           = 0);
  6369                           
  6370                           ; BSR set to: 0
  6371  014EF8  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6372  014EFC  0100               	movlb	0	; () banked
  6373  014EFE  3BBA               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  6374  014F00  0E0F               	movlw	15
  6375  014F02  17BA               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  6376  014F04  0100               	movlb	0	; () banked
  6377  014F06  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6378  014F08  D003               	goto	l2074
  6379                           
  6380                           ; BSR set to: 0
  6381  014F0A  0E01               	movlw	1
  6382  014F0C  6E2F               	movwf	_iRDropCaster,c
  6383  014F0E  0012               	return	
  6384  014F10                     l2074:
  6385                           
  6386                           ; BSR set to: 0
  6387                           
  6388                           ; BSR set to: 0
  6389  014F10  0E00               	movlw	0
  6390  014F12  6E2F               	movwf	_iRDropCaster,c
  6391  014F14  0012               	return	
  6392  014F16                     __end_of_sort_iRBumpDrop:
  6393                           	opt stack 0
  6394                           tblptru	equ	0xFF8
  6395                           tblptrh	equ	0xFF7
  6396                           tblptrl	equ	0xFF6
  6397                           tablat	equ	0xFF5
  6398                           prodh	equ	0xFF4
  6399                           prodl	equ	0xFF3
  6400                           postinc0	equ	0xFEE
  6401                           wreg	equ	0xFE8
  6402                           postdec1	equ	0xFE5
  6403                           fsr1h	equ	0xFE2
  6404                           fsr1l	equ	0xFE1
  6405                           indf2	equ	0xFDF
  6406                           fsr2h	equ	0xFDA
  6407                           fsr2l	equ	0xFD9
  6408                           status	equ	0xFD8
  6409                           
  6410 ;; *************** function _get_packet_size *****************
  6411 ;; Defined at:
  6412 ;;		line 60 in file "Library/iRobotSerial.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  packetID        1    wreg     unsigned char 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;  packetID        1    0[BANK0 ] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  1    wreg      unsigned char 
  6419 ;; Registers used:
  6420 ;;		wreg, status,2, status,0
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;Total ram usage:        1 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    7
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_irobot_query_and_update
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           	psect	text16
  6441  0157EC                     __ptext16:
  6442                           	opt stack 0
  6443  0157EC                     _get_packet_size:
  6444                           	opt stack 20
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;incstack = 0
  6448                           ;get_packet_size@packetID stored from wreg
  6449  0157EC  0100               	movlb	0	; () banked
  6450  0157EE  6FBA               	movwf	get_packet_size@packetID& (0+255),b
  6451                           
  6452                           ;iRobotSerial.c: 61: switch (packetID) {
  6453  0157F0  D012               	goto	l2021
  6454  0157F2  0E01               	movlw	1
  6455  0157F4  0012               	return	
  6456  0157F6  0E01               	movlw	1
  6457  0157F8  0012               	return	
  6458  0157FA  0E01               	movlw	1
  6459  0157FC  0012               	return	
  6460  0157FE  0E01               	movlw	1
  6461  015800  0012               	return	
  6462  015802  0E01               	movlw	1
  6463  015804  0012               	return	
  6464  015806  0E01               	movlw	1
  6465  015808  0012               	return	
  6466  01580A  0E01               	movlw	1
  6467  01580C  0012               	return	
  6468  01580E  0E02               	movlw	2
  6469  015810  0012               	return	
  6470  015812  0E02               	movlw	2
  6471                           
  6472                           ;iRobotSerial.c: 71: }
  6473  015814  0012               	return	
  6474  015816                     l2021:
  6475  015816  0100               	movlb	0	; () banked
  6476  015818  51BA               	movf	get_packet_size@packetID& (0+255),w,b
  6477                           
  6478                           ; Switch size 1, requested type "space"
  6479                           ; Number of cases is 9, Range of values is 7 to 20
  6480                           ; switch strategies available:
  6481                           ; Name         Instructions Cycles
  6482                           ; simple_byte           28    15 (average)
  6483                           ;	Chosen strategy is simple_byte
  6484  01581A  0A07               	xorlw	7	; case 7
  6485  01581C  B4D8               	btfsc	status,2,c
  6486  01581E  D7E9               	goto	l2022
  6487  015820  0A0F               	xorlw	15	; case 8
  6488  015822  B4D8               	btfsc	status,2,c
  6489  015824  D7E8               	goto	l2024
  6490  015826  0A01               	xorlw	1	; case 9
  6491  015828  B4D8               	btfsc	status,2,c
  6492  01582A  D7E7               	goto	l2025
  6493  01582C  0A03               	xorlw	3	; case 10
  6494  01582E  B4D8               	btfsc	status,2,c
  6495  015830  D7E6               	goto	l2026
  6496  015832  0A01               	xorlw	1	; case 11
  6497  015834  B4D8               	btfsc	status,2,c
  6498  015836  D7E5               	goto	l2027
  6499  015838  0A07               	xorlw	7	; case 12
  6500  01583A  B4D8               	btfsc	status,2,c
  6501  01583C  D7E4               	goto	l2028
  6502  01583E  0A01               	xorlw	1	; case 13
  6503  015840  B4D8               	btfsc	status,2,c
  6504  015842  D7E3               	goto	l2029
  6505  015844  0A1E               	xorlw	30	; case 19
  6506  015846  B4D8               	btfsc	status,2,c
  6507  015848  D7E2               	goto	l2030
  6508  01584A  0A07               	xorlw	7	; case 20
  6509  01584C  A4D8               	btfss	status,2,c
  6510  01584E  0012               	return	
  6511  015850  D7E0               	goto	l2031
  6512  015852                     __end_of_get_packet_size:
  6513                           	opt stack 0
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           postinc0	equ	0xFEE
  6521                           wreg	equ	0xFE8
  6522                           postdec1	equ	0xFE5
  6523                           fsr1h	equ	0xFE2
  6524                           fsr1l	equ	0xFE1
  6525                           indf2	equ	0xFDF
  6526                           fsr2h	equ	0xFDA
  6527                           fsr2l	equ	0xFD9
  6528                           status	equ	0xFD8
  6529                           
  6530 ;; *************** function _eusart_getch *****************
  6531 ;; Defined at:
  6532 ;;		line 136 in file "Library/iRobotSerial.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;		None
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      unsigned char 
  6539 ;; Registers used:
  6540 ;;		wreg, status,2
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;Total ram usage:        0 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    7
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_irobot_query_and_update
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text17
  6561  01678A                     __ptext17:
  6562                           	opt stack 0
  6563  01678A                     _eusart_getch:
  6564                           	opt stack 20
  6565                           
  6566                           ;iRobotSerial.c: 137: while (!PIR1bits.RC1IF) {
  6567                           
  6568                           ;incstack = 0
  6569  01678A  AA9E               	btfss	3998,5,c	;volatile
  6570  01678C  D7FE               	goto	_eusart_getch
  6571                           
  6572                           ;iRobotSerial.c: 138: };
  6573                           ;iRobotSerial.c: 139: return RCREG1;
  6574  01678E  50AF               	movf	4015,w,c	;volatile
  6575  016790  0012               	return	
  6576  016792                     __end_of_eusart_getch:
  6577                           	opt stack 0
  6578                           tblptru	equ	0xFF8
  6579                           tblptrh	equ	0xFF7
  6580                           tblptrl	equ	0xFF6
  6581                           tablat	equ	0xFF5
  6582                           prodh	equ	0xFF4
  6583                           prodl	equ	0xFF3
  6584                           postinc0	equ	0xFEE
  6585                           wreg	equ	0xFE8
  6586                           postdec1	equ	0xFE5
  6587                           fsr1h	equ	0xFE2
  6588                           fsr1l	equ	0xFE1
  6589                           indf2	equ	0xFDF
  6590                           fsr2h	equ	0xFDA
  6591                           fsr2l	equ	0xFD9
  6592                           status	equ	0xFD8
  6593                           
  6594 ;; *************** function _irobot_stop_motion *****************
  6595 ;; Defined at:
  6596 ;;		line 328 in file "Library/iRobotSerial.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;  isScript        1    wreg     unsigned char 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  isScript        1   25[BANK0 ] unsigned char 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  1    wreg      void 
  6603 ;; Registers used:
  6604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;Total ram usage:        1 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    9
  6617 ;; This function calls:
  6618 ;;		_irobot_move
  6619 ;; This function is called by:
  6620 ;;		_irobot_rotate
  6621 ;;		_safeToGo
  6622 ;;		_move_and_rotate
  6623 ;;		_mode2
  6624 ;;		_mode4
  6625 ;;		_irobot_move_to_simple
  6626 ;;		_irobot_rotate_to
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           	psect	text18
  6631  015DF0                     __ptext18:
  6632                           	opt stack 0
  6633  015DF0                     _irobot_stop_motion:
  6634                           	opt stack 19
  6635                           
  6636                           ;incstack = 0
  6637                           ;irobot_stop_motion@isScript stored from wreg
  6638  015DF0  0100               	movlb	0	; () banked
  6639  015DF2  6FD3               	movwf	irobot_stop_motion@isScript& (0+255),b
  6640                           
  6641                           ;iRobotSerial.c: 329: (isScript) ? irobot_move(1, 0, 0) : irobot_move(0, 0, 0);
  6642  015DF4  0100               	movlb	0	; () banked
  6643  015DF6  51D3               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6644  015DF8  0100               	movlb	0	; () banked
  6645  015DFA  B4D8               	btfsc	status,2,c
  6646  015DFC  D00E               	goto	l2173
  6647                           
  6648                           ; BSR set to: 0
  6649  015DFE  0E00               	movlw	0
  6650  015E00  0100               	movlb	0	; () banked
  6651  015E02  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6652  015E04  0E00               	movlw	0
  6653  015E06  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6654  015E08  0E00               	movlw	0
  6655  015E0A  0100               	movlb	0	; () banked
  6656  015E0C  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6657  015E0E  0E00               	movlw	0
  6658  015E10  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6659  015E12  0E01               	movlw	1
  6660  015E14  ECD4  F0A2         	call	_irobot_move
  6661  015E18  0012               	return	
  6662  015E1A                     l2173:
  6663  015E1A  0E00               	movlw	0
  6664  015E1C  0100               	movlb	0	; () banked
  6665  015E1E  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6666  015E20  0E00               	movlw	0
  6667  015E22  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6668  015E24  0E00               	movlw	0
  6669  015E26  0100               	movlb	0	; () banked
  6670  015E28  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6671  015E2A  0E00               	movlw	0
  6672  015E2C  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6673  015E2E  0E00               	movlw	0
  6674  015E30  ECD4  F0A2         	call	_irobot_move
  6675  015E34  0012               	return	
  6676  015E36                     __end_of_irobot_stop_motion:
  6677                           	opt stack 0
  6678                           tblptru	equ	0xFF8
  6679                           tblptrh	equ	0xFF7
  6680                           tblptrl	equ	0xFF6
  6681                           tablat	equ	0xFF5
  6682                           prodh	equ	0xFF4
  6683                           prodl	equ	0xFF3
  6684                           postinc0	equ	0xFEE
  6685                           wreg	equ	0xFE8
  6686                           postdec1	equ	0xFE5
  6687                           fsr1h	equ	0xFE2
  6688                           fsr1l	equ	0xFE1
  6689                           indf2	equ	0xFDF
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _irobot_move *****************
  6695 ;; Defined at:
  6696 ;;		line 240 in file "Library/iRobotSerial.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  isScript        1    wreg     unsigned char 
  6699 ;;  moveSpeed       2   16[BANK0 ] short 
  6700 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  isScript        1   24[BANK0 ] unsigned char 
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  1    wreg      void 
  6705 ;; Registers used:
  6706 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6712 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;Total ram usage:        9 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; Hardware stack levels required when called:    8
  6719 ;; This function calls:
  6720 ;;		_eusart_putch
  6721 ;;		_load_iRScriptStack
  6722 ;;		_twos_complement_of
  6723 ;; This function is called by:
  6724 ;;		_irobot_rotate
  6725 ;;		_irobot_stop_motion
  6726 ;;		_irobot_move_straight
  6727 ;;		_irobot_move_to_simple
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           	psect	text19
  6732  0145A8                     __ptext19:
  6733                           	opt stack 0
  6734  0145A8                     _irobot_move:
  6735                           	opt stack 19
  6736                           
  6737                           ;incstack = 0
  6738                           ;irobot_move@isScript stored from wreg
  6739  0145A8  0100               	movlb	0	; () banked
  6740  0145AA  6FD2               	movwf	irobot_move@isScript& (0+255),b
  6741                           
  6742                           ;iRobotSerial.c: 241: moveSpeed = twos_complement_of(moveSpeed);
  6743  0145AC  C0CA  F0BA         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6744  0145B0  C0CB  F0BB         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6745  0145B4  EC61  F0AF         	call	_twos_complement_of	;wreg free
  6746  0145B8  C0BA  F0CA         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6747  0145BC  C0BB  F0CB         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6748                           
  6749                           ;iRobotSerial.c: 242: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6750  0145C0  C0CC  F0BA         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6751  0145C4  C0CD  F0BB         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6752  0145C8  EC61  F0AF         	call	_twos_complement_of	;wreg free
  6753  0145CC  C0BA  F0CC         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6754  0145D0  C0BB  F0CD         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6755                           
  6756                           ;iRobotSerial.c: 244: if (isScript) {
  6757  0145D4  0100               	movlb	0	; () banked
  6758  0145D6  51D2               	movf	irobot_move@isScript& (0+255),w,b
  6759  0145D8  0100               	movlb	0	; () banked
  6760  0145DA  B4D8               	btfsc	status,2,c
  6761  0145DC  D029               	goto	l2139
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;iRobotSerial.c: 245: load_iRScriptStack(5, iR_DRIVE,
  6765                           ;iRobotSerial.c: 246: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  6766                           ;iRobotSerial.c: 247: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  6767  0145DE  0E00               	movlw	0
  6768  0145E0  0100               	movlb	0	; () banked
  6769  0145E2  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6770  0145E4  0E89               	movlw	137
  6771  0145E6  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
  6772  0145E8  C0CB  F0CE         	movff	irobot_move@moveSpeed+1,??_irobot_move
  6773  0145EC  0100               	movlb	0	; () banked
  6774  0145EE  6BCF               	clrf	(??_irobot_move+1)& (0+255),b
  6775  0145F0  BFCE               	btfsc	??_irobot_move& (0+255),7,b
  6776  0145F2  69CF               	setf	(??_irobot_move+1)& (0+255),b
  6777  0145F4  0100               	movlb	0	; () banked
  6778  0145F6  51CE               	movf	??_irobot_move& (0+255),w,b
  6779  0145F8  0100               	movlb	0	; () banked
  6780  0145FA  6FBC               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  6781  0145FC  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6782  0145FE  0100               	movlb	0	; () banked
  6783  014600  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6784  014602  0100               	movlb	0	; () banked
  6785  014604  6FBE               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  6786  014606  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6787  014608  C0CD  F0D0         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  6788  01460C  0100               	movlb	0	; () banked
  6789  01460E  6BD1               	clrf	(??_irobot_move+3)& (0+255),b
  6790  014610  BFD0               	btfsc	(??_irobot_move+2)& (0+255),7,b
  6791  014612  69D1               	setf	(??_irobot_move+3)& (0+255),b
  6792  014614  0100               	movlb	0	; () banked
  6793  014616  51D0               	movf	(??_irobot_move+2)& (0+255),w,b
  6794  014618  0100               	movlb	0	; () banked
  6795  01461A  6FC0               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  6796  01461C  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6797  01461E  0100               	movlb	0	; () banked
  6798  014620  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6799  014622  0100               	movlb	0	; () banked
  6800  014624  6FC2               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  6801  014626  6BC3               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  6802  014628  0E05               	movlw	5
  6803  01462A  EC57  F0AB         	call	_load_iRScriptStack
  6804                           
  6805                           ;iRobotSerial.c: 248: } else {
  6806  01462E  0012               	return	
  6807  014630                     l2139:
  6808                           
  6809                           ;iRobotSerial.c: 249: eusart_putch(iR_DRIVE);
  6810  014630  0E89               	movlw	137
  6811  014632  EC82  F0B3         	call	_eusart_putch
  6812                           
  6813                           ;iRobotSerial.c: 250: eusart_putch((((moveSpeed)>>8) & 0xFF));
  6814  014636  0100               	movlb	0	; () banked
  6815  014638  51CB               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  6816  01463A  EC82  F0B3         	call	_eusart_putch
  6817                           
  6818                           ;iRobotSerial.c: 251: eusart_putch(((moveSpeed) & 0xFF));
  6819  01463E  0100               	movlb	0	; () banked
  6820  014640  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6821  014642  EC82  F0B3         	call	_eusart_putch
  6822                           
  6823                           ;iRobotSerial.c: 252: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  6824  014646  0100               	movlb	0	; () banked
  6825  014648  51CD               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  6826  01464A  EC82  F0B3         	call	_eusart_putch
  6827                           
  6828                           ;iRobotSerial.c: 253: eusart_putch(((moveTurnRadius) & 0xFF));
  6829  01464E  0100               	movlb	0	; () banked
  6830  014650  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6831  014652  EC82  F0B3         	call	_eusart_putch
  6832  014656  0012               	return	
  6833  014658                     __end_of_irobot_move:
  6834                           	opt stack 0
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           postinc0	equ	0xFEE
  6842                           wreg	equ	0xFE8
  6843                           postdec1	equ	0xFE5
  6844                           fsr1h	equ	0xFE2
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           fsr2h	equ	0xFDA
  6848                           fsr2l	equ	0xFD9
  6849                           status	equ	0xFD8
  6850                           
  6851 ;; *************** function _twos_complement_of *****************
  6852 ;; Defined at:
  6853 ;;		line 181 in file "Library/iRobotSerial.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;  complementVa    2    0[BANK0 ] short 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  2    0[BANK0 ] unsigned short 
  6860 ;; Registers used:
  6861 ;;		wreg, status,2, status,0
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6867 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;Total ram usage:        2 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    7
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_irobot_move
  6878 ;;		_irobot_angle_wait
  6879 ;;		_irobot_distance_wait
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text20
  6884  015EC2                     __ptext20:
  6885                           	opt stack 0
  6886  015EC2                     _twos_complement_of:
  6887                           	opt stack 19
  6888                           
  6889                           ;iRobotSerial.c: 182: if (complementValue < 0) {
  6890                           
  6891                           ;incstack = 0
  6892  015EC2  0100               	movlb	0	; () banked
  6893  015EC4  AFBB               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  6894  015EC6  D01A               	goto	l2110
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;iRobotSerial.c: 183: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  6898  015EC8  0100               	movlb	0	; () banked
  6899  015ECA  BFBB               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  6900  015ECC  D007               	goto	u9370
  6901  015ECE  0100               	movlb	0	; () banked
  6902  015ED0  51BB               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  6903  015ED2  E10A               	bnz	l2112
  6904  015ED4  0100               	movlb	0	; () banked
  6905  015ED6  05BA               	decf	twos_complement_of@complementValue& (0+255),w,b
  6906  015ED8  B0D8               	btfsc	status,0,c
  6907  015EDA  D006               	goto	l2112
  6908  015EDC                     u9370:
  6909                           
  6910                           ; BSR set to: 0
  6911  015EDC  0100               	movlb	0	; () banked
  6912  015EDE  6DBA               	negf	twos_complement_of@complementValue& (0+255),b
  6913  015EE0  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6914  015EE2  B0D8               	btfsc	status,0,c
  6915  015EE4  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6916  015EE6  D004               	goto	l2114
  6917  015EE8                     l2112:
  6918                           
  6919                           ; BSR set to: 0
  6920  015EE8  C0BA  F0BA         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  6921  015EEC  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  6922  015EF0                     l2114:
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;iRobotSerial.c: 184: complementValue = ~complementValue;
  6926                           
  6927                           ; BSR set to: 0
  6928  015EF0  0100               	movlb	0	; () banked
  6929  015EF2  1FBA               	comf	twos_complement_of@complementValue& (0+255),f,b
  6930  015EF4  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6931                           
  6932                           ;iRobotSerial.c: 185: complementValue += 1;
  6933  015EF6  0100               	movlb	0	; () banked
  6934  015EF8  4BBA               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  6935  015EFA  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6936  015EFC                     l2110:
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;iRobotSerial.c: 186: }
  6940                           ;iRobotSerial.c: 187: return complementValue;
  6941                           
  6942                           ; BSR set to: 0
  6943  015EFC  C0BA  F0BA         	movff	twos_complement_of@complementValue,?_twos_complement_of
  6944  015F00  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  6945  015F04  0012               	return	
  6946  015F06                     __end_of_twos_complement_of:
  6947                           	opt stack 0
  6948                           tblptru	equ	0xFF8
  6949                           tblptrh	equ	0xFF7
  6950                           tblptrl	equ	0xFF6
  6951                           tablat	equ	0xFF5
  6952                           prodh	equ	0xFF4
  6953                           prodl	equ	0xFF3
  6954                           postinc0	equ	0xFEE
  6955                           wreg	equ	0xFE8
  6956                           postdec1	equ	0xFE5
  6957                           fsr1h	equ	0xFE2
  6958                           fsr1l	equ	0xFE1
  6959                           indf2	equ	0xFDF
  6960                           fsr2h	equ	0xFDA
  6961                           fsr2l	equ	0xFD9
  6962                           status	equ	0xFD8
  6963                           
  6964 ;; *************** function _irobot_song_play *****************
  6965 ;; Defined at:
  6966 ;;		line 294 in file "Library/iRobotSerial.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;  songNumber      1    wreg     unsigned char 
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6971 ;; Return value:  Size  Location     Type
  6972 ;;                  1    wreg      void 
  6973 ;; Registers used:
  6974 ;;		wreg, status,2, cstack
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;Total ram usage:        1 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    8
  6987 ;; This function calls:
  6988 ;;		_eusart_putch
  6989 ;; This function is called by:
  6990 ;;		_safeToGo
  6991 ;;		_mode4
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text21
  6996  01668A                     __ptext21:
  6997                           	opt stack 0
  6998  01668A                     _irobot_song_play:
  6999                           	opt stack 20
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;incstack = 0
  7003                           ;irobot_song_play@songNumber stored from wreg
  7004  01668A  0100               	movlb	0	; () banked
  7005  01668C  6FBB               	movwf	irobot_song_play@songNumber& (0+255),b
  7006                           
  7007                           ;iRobotSerial.c: 295: eusart_putch(iR_SONG_PLAY);
  7008  01668E  0E8D               	movlw	141
  7009  016690  EC82  F0B3         	call	_eusart_putch
  7010                           
  7011                           ;iRobotSerial.c: 296: eusart_putch(songNumber);
  7012  016694  0100               	movlb	0	; () banked
  7013  016696  51BB               	movf	irobot_song_play@songNumber& (0+255),w,b
  7014  016698  EC82  F0B3         	call	_eusart_putch
  7015  01669C  0012               	return		;funcret
  7016  01669E                     __end_of_irobot_song_play:
  7017                           	opt stack 0
  7018                           tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           postinc0	equ	0xFEE
  7025                           wreg	equ	0xFE8
  7026                           postdec1	equ	0xFE5
  7027                           fsr1h	equ	0xFE2
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function _printf *****************
  7035 ;; Defined at:
  7036 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  7039 ;;		 -> STR_16(21), STR_15(21), STR_14(21), STR_13(21), 
  7040 ;;		 -> STR_12(21), STR_11(3), STR_10(76), STR_9(3), 
  7041 ;;		 -> STR_8(14), STR_7(3), STR_6(46), STR_5(3), 
  7042 ;;		 -> STR_4(46), STR_3(3), STR_2(60), STR_1(3), 
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  tmpval          4    0        struct .
  7045 ;;  cp              3    0        PTR const unsigned char 
  7046 ;;  val             2   38[BANK0 ] unsigned int 
  7047 ;;  ap              2   36[BANK0 ] PTR void [1]
  7048 ;;		 -> ?_printf(2), 
  7049 ;;  len             2    0        unsigned int 
  7050 ;;  c               1   40[BANK0 ] char 
  7051 ;;  flag            1   35[BANK0 ] unsigned char 
  7052 ;;  prec            1   34[BANK0 ] char 
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  2   21[BANK0 ] int 
  7055 ;; Registers used:
  7056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7062 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;Total ram usage:       20 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:   12
  7069 ;; This function calls:
  7070 ;;		___lwdiv
  7071 ;;		___lwmod
  7072 ;;		_putch
  7073 ;; This function is called by:
  7074 ;;		_findClosestWall
  7075 ;;		_mode1
  7076 ;;		_mode2
  7077 ;;		_mode4
  7078 ;;		_main
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text22
  7083  0124FE                     __ptext22:
  7084                           	opt stack 0
  7085  0124FE                     _printf:
  7086                           	opt stack 18
  7087                           
  7088                           ;doprnt.c: 466: va_list ap;
  7089                           ;doprnt.c: 499: signed char c;
  7090                           ;doprnt.c: 506: signed char prec;
  7091                           ;doprnt.c: 508: unsigned char flag;
  7092                           ;doprnt.c: 523: union {
  7093                           ;doprnt.c: 524: unsigned long vd;
  7094                           ;doprnt.c: 525: double integ;
  7095                           ;doprnt.c: 526: } tmpval;
  7096                           ;doprnt.c: 528: unsigned int val;
  7097                           ;doprnt.c: 529: unsigned len;
  7098                           ;doprnt.c: 530: const char * cp;
  7099                           ;doprnt.c: 533: *ap = __va_start();
  7100                           
  7101                           ;incstack = 0
  7102  0124FE  0ED1               	movlw	low (?_printf+2)
  7103  012500  0100               	movlb	0	; () banked
  7104  012502  6FDE               	movwf	printf@ap& (0+255),b
  7105  012504  0E00               	movlw	high (?_printf+2)
  7106  012506  0100               	movlb	0	; () banked
  7107  012508  6FDF               	movwf	(printf@ap+1)& (0+255),b
  7108                           
  7109                           ;doprnt.c: 536: while(c = *f++) {
  7110  01250A  D0C9               	goto	u11120
  7111  01250C                     
  7112                           ; BSR set to: 0
  7113                           ;doprnt.c: 538: if(c != '%')
  7114                           
  7115                           ; BSR set to: 0
  7116  01250C  0E25               	movlw	37
  7117  01250E  0100               	movlb	0	; () banked
  7118  012510  19E2               	xorwf	printf@c& (0+255),w,b
  7119  012512  B4D8               	btfsc	status,2,c
  7120  012514  D005               	goto	l2431
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;doprnt.c: 540: {
  7124                           ;doprnt.c: 541: (putch(c) );
  7125  012516  0100               	movlb	0	; () banked
  7126  012518  51E2               	movf	printf@c& (0+255),w,b
  7127  01251A  EC74  F0B3         	call	_putch
  7128                           
  7129                           ;doprnt.c: 542: continue;
  7130  01251E  D0BF               	goto	u11120
  7131  012520                     l2431:
  7132                           
  7133                           ;doprnt.c: 543: }
  7134                           ;doprnt.c: 548: flag = 0;
  7135  012520  0E00               	movlw	0
  7136  012522  0100               	movlb	0	; () banked
  7137  012524  6FDD               	movwf	printf@flag& (0+255),b
  7138                           
  7139                           ;doprnt.c: 635: switch(c = *f++) {
  7140  012526  D014               	goto	l2432
  7141  012528                     
  7142                           ; BSR set to: 0
  7143                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7144                           
  7145                           ; BSR set to: 0
  7146  012528  C0DE  FFD9         	movff	printf@ap,fsr2l
  7147  01252C  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7148  012530  50DF               	movf	indf2,w,c
  7149  012532  0100               	movlb	0	; () banked
  7150  012534  6FE2               	movwf	printf@c& (0+255),b
  7151                           
  7152                           ; BSR set to: 0
  7153  012536  0E02               	movlw	2
  7154  012538  0100               	movlb	0	; () banked
  7155  01253A  27DE               	addwf	printf@ap& (0+255),f,b
  7156  01253C  0E00               	movlw	0
  7157  01253E  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7158  012540                     
  7159                           ; BSR set to: 0
  7160                           ;doprnt.c: 809: (putch(c) );
  7161                           
  7162                           ; BSR set to: 0
  7163  012540  0100               	movlb	0	; () banked
  7164  012542  51E2               	movf	printf@c& (0+255),w,b
  7165  012544  EC74  F0B3         	call	_putch
  7166                           
  7167                           ;doprnt.c: 810: continue;
  7168  012548  D0AA               	goto	u11120
  7169  01254A                     
  7170                           ;doprnt.c: 818: flag |= 0x40;
  7171  01254A  0100               	movlb	0	; () banked
  7172  01254C  8DDD               	bsf	printf@flag& (0+255),6,b
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;doprnt.c: 822: }
  7176                           
  7177                           ;doprnt.c: 819: break;
  7178  01254E  D01E               	goto	l2437
  7179  012550                     l2432:
  7180                           
  7181                           ; BSR set to: 0
  7182                           
  7183                           ; BSR set to: 0
  7184  012550  C0CF  FFF6         	movff	printf@f,tblptrl
  7185  012554  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7186  012558  0100               	movlb	0	; () banked
  7187  01255A  4BCF               	infsnz	printf@f& (0+255),f,b
  7188  01255C  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7189  01255E                     	if	0	;tblptru may be non-zero
  7190  01255E                     	endif
  7191  01255E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7192  01255E  0E00               	movlw	low (__mediumconst shr (0+16))
  7193  012560  6EF8               	movwf	tblptru,c
  7194  012562                     	endif
  7195  012562  0008               	tblrd		*
  7196  012564  CFF5 F0E2          	movff	tablat,printf@c
  7197  012568  0100               	movlb	0	; () banked
  7198  01256A  51E2               	movf	printf@c& (0+255),w,b
  7199                           
  7200                           ; Switch size 1, requested type "space"
  7201                           ; Number of cases is 5, Range of values is 0 to 117
  7202                           ; switch strategies available:
  7203                           ; Name         Instructions Cycles
  7204                           ; simple_byte           16     9 (average)
  7205                           ;	Chosen strategy is simple_byte
  7206  01256C  0A00               	xorlw	0	; case 0
  7207  01256E  B4D8               	btfsc	status,2,c
  7208  012570  0012               	return	
  7209  012572  0A63               	xorlw	99	; case 99
  7210  012574  B4D8               	btfsc	status,2,c
  7211  012576  D7D8               	goto	l2438
  7212  012578  0A07               	xorlw	7	; case 100
  7213  01257A  B4D8               	btfsc	status,2,c
  7214  01257C  D007               	goto	l2437
  7215  01257E  0A0D               	xorlw	13	; case 105
  7216  012580  B4D8               	btfsc	status,2,c
  7217  012582  D004               	goto	l2437
  7218  012584  0A1C               	xorlw	28	; case 117
  7219  012586  B4D8               	btfsc	status,2,c
  7220  012588  D7E0               	goto	l2440
  7221  01258A  D7DA               	goto	l2439
  7222  01258C                     l2437:
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7226  01258C  0100               	movlb	0	; () banked
  7227  01258E  BDDD               	btfsc	printf@flag& (0+255),6,b
  7228  012590  D019               	goto	l2441
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;doprnt.c: 1253: {
  7232                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7233  012592  C0DE  FFD9         	movff	printf@ap,fsr2l
  7234  012596  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7235  01259A  CFDE F0E0          	movff	postinc2,printf@val
  7236  01259E  CFDD F0E1          	movff	postdec2,printf@val+1
  7237                           
  7238                           ; BSR set to: 0
  7239  0125A2  0E02               	movlw	2
  7240  0125A4  0100               	movlb	0	; () banked
  7241  0125A6  27DE               	addwf	printf@ap& (0+255),f,b
  7242  0125A8  0E00               	movlw	0
  7243  0125AA  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;doprnt.c: 1261: if((int)val < 0) {
  7247  0125AC  0100               	movlb	0	; () banked
  7248  0125AE  AFE1               	btfss	(printf@val+1)& (0+255),7,b
  7249  0125B0  D016               	goto	l2443
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;doprnt.c: 1262: flag |= 0x03;
  7253  0125B2  0E03               	movlw	3
  7254  0125B4  0100               	movlb	0	; () banked
  7255  0125B6  13DD               	iorwf	printf@flag& (0+255),f,b
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;doprnt.c: 1263: val = -val;
  7259  0125B8  0100               	movlb	0	; () banked
  7260  0125BA  6DE0               	negf	printf@val& (0+255),b
  7261  0125BC  1FE1               	comf	(printf@val+1)& (0+255),f,b
  7262  0125BE  B0D8               	btfsc	status,0,c
  7263  0125C0  2BE1               	incf	(printf@val+1)& (0+255),f,b
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;doprnt.c: 1264: }
  7267                           ;doprnt.c: 1266: }
  7268  0125C2  D00D               	goto	l2443
  7269  0125C4                     l2441:
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;doprnt.c: 1268: else
  7273                           ;doprnt.c: 1273: {
  7274                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7275                           
  7276                           ; BSR set to: 0
  7277  0125C4  C0DE  FFD9         	movff	printf@ap,fsr2l
  7278  0125C8  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7279  0125CC  CFDE F0E0          	movff	postinc2,printf@val
  7280  0125D0  CFDD F0E1          	movff	postdec2,printf@val+1
  7281                           
  7282                           ; BSR set to: 0
  7283  0125D4  0E02               	movlw	2
  7284  0125D6  0100               	movlb	0	; () banked
  7285  0125D8  27DE               	addwf	printf@ap& (0+255),f,b
  7286  0125DA  0E00               	movlw	0
  7287  0125DC  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7288  0125DE                     l2443:
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;doprnt.c: 1287: }
  7292                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7293                           
  7294                           ; BSR set to: 0
  7295  0125DE  0E01               	movlw	1
  7296  0125E0  0100               	movlb	0	; () banked
  7297  0125E2  6FE2               	movwf	printf@c& (0+255),b
  7298  0125E4                     l14316:
  7299                           
  7300                           ; BSR set to: 0
  7301  0125E4  0E05               	movlw	5
  7302  0125E6  0100               	movlb	0	; () banked
  7303  0125E8  19E2               	xorwf	printf@c& (0+255),w,b
  7304  0125EA  B4D8               	btfsc	status,2,c
  7305  0125EC  D019               	goto	u11100
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;doprnt.c: 1306: if(val < dpowers[c])
  7309                           
  7310                           ; BSR set to: 0
  7311                           
  7312                           ; BSR set to: 0
  7313  0125EE  0100               	movlb	0	; () banked
  7314  0125F0  51E2               	movf	printf@c& (0+255),w,b
  7315  0125F2  0D02               	mullw	2
  7316  0125F4  0E05               	movlw	low _dpowers
  7317  0125F6  24F3               	addwf	prodl,w,c
  7318  0125F8  6EF6               	movwf	tblptrl,c
  7319  0125FA  0EFD               	movlw	high _dpowers
  7320  0125FC  20F4               	addwfc	prodh,w,c
  7321  0125FE  6EF7               	movwf	tblptrh,c
  7322  012600                     	if	1	;There are 3 active tblptr bytes
  7323  012600  6AF8               	clrf	tblptru,c
  7324  012602  0E00               	movlw	low (__mediumconst shr (0+16))
  7325  012604  22F8               	addwfc	tblptru,f,c
  7326  012606                     	endif
  7327  012606  0009               	tblrd		*+
  7328  012608  50F5               	movf	tablat,w,c
  7329  01260A  0100               	movlb	0	; () banked
  7330  01260C  5DE0               	subwf	printf@val& (0+255),w,b
  7331  01260E  0009               	tblrd		*+
  7332  012610  50F5               	movf	tablat,w,c
  7333  012612  0100               	movlb	0	; () banked
  7334  012614  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7335  012616  A0D8               	btfss	status,0,c
  7336  012618  D003               	goto	u11100
  7337                           
  7338                           ; BSR set to: 0
  7339                           
  7340                           ; BSR set to: 0
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;doprnt.c: 1307: break;
  7344  01261A  0100               	movlb	0	; () banked
  7345  01261C  2BE2               	incf	printf@c& (0+255),f,b
  7346  01261E  D7E2               	goto	l14316
  7347  012620                     u11100:
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;doprnt.c: 1422: {
  7351                           ;doprnt.c: 1438: if(flag & 0x03)
  7352                           
  7353                           ; BSR set to: 0
  7354  012620  C0DD  F0DB         	movff	printf@flag,??_printf
  7355  012624  0E03               	movlw	3
  7356  012626  0100               	movlb	0	; () banked
  7357  012628  17DB               	andwf	??_printf& (0+255),f,b
  7358  01262A  B4D8               	btfsc	status,2,c
  7359  01262C  D003               	goto	l2447
  7360                           
  7361                           ; BSR set to: 0
  7362                           ;doprnt.c: 1439: (putch('-') );
  7363  01262E  0E2D               	movlw	45
  7364  012630  EC74  F0B3         	call	_putch
  7365  012634                     l2447:
  7366                           
  7367                           ;doprnt.c: 1469: }
  7368                           ;doprnt.c: 1472: prec = c;
  7369  012634  C0E2  F0DC         	movff	printf@c,printf@prec
  7370                           
  7371                           ;doprnt.c: 1474: while(prec--) {
  7372  012638  D02C               	goto	l2448
  7373  01263A                     
  7374                           ;doprnt.c: 1478: {
  7375                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7376  01263A  0100               	movlb	0	; () banked
  7377  01263C  51DC               	movf	printf@prec& (0+255),w,b
  7378  01263E  0D02               	mullw	2
  7379  012640  0E05               	movlw	low _dpowers
  7380  012642  24F3               	addwf	prodl,w,c
  7381  012644  6EF6               	movwf	tblptrl,c
  7382  012646  0EFD               	movlw	high _dpowers
  7383  012648  20F4               	addwfc	prodh,w,c
  7384  01264A  6EF7               	movwf	tblptrh,c
  7385  01264C                     	if	1	;There are 3 active tblptr bytes
  7386  01264C  6AF8               	clrf	tblptru,c
  7387  01264E  0E00               	movlw	low (__mediumconst shr (0+16))
  7388  012650  22F8               	addwfc	tblptru,f,c
  7389  012652                     	endif
  7390  012652  0009               	tblrd		*+
  7391  012654  CFF5 F0BC          	movff	tablat,___lwdiv@divisor
  7392  012658  000A               	tblrd		*-
  7393  01265A  CFF5 F0BD          	movff	tablat,___lwdiv@divisor+1
  7394  01265E  C0E0  F0BA         	movff	printf@val,___lwdiv@dividend
  7395  012662  C0E1  F0BB         	movff	printf@val+1,___lwdiv@dividend+1
  7396  012666  EC54  F0A9         	call	___lwdiv	;wreg free
  7397  01266A  C0BA  F0C1         	movff	?___lwdiv,___lwmod@dividend
  7398  01266E  C0BB  F0C2         	movff	?___lwdiv+1,___lwmod@dividend+1
  7399  012672  0E00               	movlw	0
  7400  012674  0100               	movlb	0	; () banked
  7401  012676  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  7402  012678  0E0A               	movlw	10
  7403  01267A  6FC3               	movwf	___lwmod@divisor& (0+255),b
  7404  01267C  ECBF  F0AC         	call	___lwmod	;wreg free
  7405  012680  0100               	movlb	0	; () banked
  7406  012682  51C1               	movf	?___lwmod& (0+255),w,b
  7407  012684  0F30               	addlw	48
  7408  012686  0100               	movlb	0	; () banked
  7409  012688  6FE2               	movwf	printf@c& (0+255),b
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;doprnt.c: 1523: }
  7413                           ;doprnt.c: 1524: (putch(c) );
  7414  01268A  0100               	movlb	0	; () banked
  7415  01268C  51E2               	movf	printf@c& (0+255),w,b
  7416  01268E  EC74  F0B3         	call	_putch
  7417  012692                     l2448:
  7418  012692  0100               	movlb	0	; () banked
  7419  012694  07DC               	decf	printf@prec& (0+255),f,b
  7420  012696  0100               	movlb	0	; () banked
  7421  012698  29DC               	incf	printf@prec& (0+255),w,b
  7422  01269A  A4D8               	btfss	status,2,c
  7423  01269C  D7CE               	goto	l2449
  7424  01269E                     u11120:
  7425                           
  7426                           ; BSR set to: 0
  7427                           
  7428                           ; BSR set to: 0
  7429  01269E  C0CF  FFF6         	movff	printf@f,tblptrl
  7430  0126A2  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7431  0126A6  0100               	movlb	0	; () banked
  7432  0126A8  4BCF               	infsnz	printf@f& (0+255),f,b
  7433  0126AA  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7434  0126AC                     	if	0	;tblptru may be non-zero
  7435  0126AC                     	endif
  7436  0126AC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7437  0126AC  0E00               	movlw	low (__mediumconst shr (0+16))
  7438  0126AE  6EF8               	movwf	tblptru,c
  7439  0126B0                     	endif
  7440  0126B0  0008               	tblrd		*
  7441  0126B2  CFF5 F0E2          	movff	tablat,printf@c
  7442  0126B6  0100               	movlb	0	; () banked
  7443  0126B8  51E2               	movf	printf@c& (0+255),w,b
  7444  0126BA  B4D8               	btfsc	status,2,c
  7445  0126BC  0012               	return	
  7446  0126BE  D726               	goto	l2430
  7447  0126C0                     __end_of_printf:
  7448                           	opt stack 0
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           postinc0	equ	0xFEE
  7456                           wreg	equ	0xFE8
  7457                           postdec1	equ	0xFE5
  7458                           fsr1h	equ	0xFE2
  7459                           fsr1l	equ	0xFE1
  7460                           indf2	equ	0xFDF
  7461                           postinc2	equ	0xFDE
  7462                           postdec2	equ	0xFDD
  7463                           fsr2h	equ	0xFDA
  7464                           fsr2l	equ	0xFD9
  7465                           status	equ	0xFD8
  7466                           
  7467 ;; *************** function _putch *****************
  7468 ;; Defined at:
  7469 ;;		line 454 in file "Library/Console.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;  c               1    wreg     unsigned char 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  c               1   20[BANK0 ] unsigned char 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  1    wreg      void 
  7476 ;; Registers used:
  7477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;Total ram usage:        1 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:   11
  7490 ;; This function calls:
  7491 ;;		_Console_PrintChar
  7492 ;; This function is called by:
  7493 ;;		_printf
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497                           	psect	text23
  7498  0166E8                     __ptext23:
  7499                           	opt stack 0
  7500  0166E8                     _putch:
  7501                           	opt stack 18
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;incstack = 0
  7505                           ;putch@c stored from wreg
  7506  0166E8  0100               	movlb	0	; () banked
  7507  0166EA  6FCE               	movwf	putch@c& (0+255),b
  7508                           
  7509                           ;Console.c: 456: Console_PrintChar(c);
  7510  0166EC  0100               	movlb	0	; () banked
  7511  0166EE  51CE               	movf	putch@c& (0+255),w,b
  7512  0166F0  EC40  F094         	call	_Console_PrintChar
  7513  0166F4  0012               	return		;funcret
  7514  0166F6                     __end_of_putch:
  7515                           	opt stack 0
  7516                           tblptru	equ	0xFF8
  7517                           tblptrh	equ	0xFF7
  7518                           tblptrl	equ	0xFF6
  7519                           tablat	equ	0xFF5
  7520                           prodh	equ	0xFF4
  7521                           prodl	equ	0xFF3
  7522                           postinc0	equ	0xFEE
  7523                           wreg	equ	0xFE8
  7524                           postdec1	equ	0xFE5
  7525                           fsr1h	equ	0xFE2
  7526                           fsr1l	equ	0xFE1
  7527                           indf2	equ	0xFDF
  7528                           postinc2	equ	0xFDE
  7529                           postdec2	equ	0xFDD
  7530                           fsr2h	equ	0xFDA
  7531                           fsr2l	equ	0xFD9
  7532                           status	equ	0xFD8
  7533                           
  7534 ;; *************** function _Console_PrintChar *****************
  7535 ;; Defined at:
  7536 ;;		line 322 in file "Library/Console.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;  pInput          1    wreg     unsigned char 
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;  pInput          1   19[BANK0 ] unsigned char 
  7541 ;; Return value:  Size  Location     Type
  7542 ;;                  1    wreg      void 
  7543 ;; Registers used:
  7544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7554 ;;Total ram usage:        4 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; Hardware stack levels required when called:   10
  7557 ;; This function calls:
  7558 ;;		_Console_Backspace
  7559 ;;		_Console_FormFeed
  7560 ;;		_Console_IncrementCursor
  7561 ;;		_Console_NewLine
  7562 ;;		_Console_ResetCursor
  7563 ;;		_Console_Tab
  7564 ;; This function is called by:
  7565 ;;		_putch
  7566 ;;		_Console_PrintString
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           	psect	text24
  7571  012880                     __ptext24:
  7572                           	opt stack 0
  7573  012880                     _Console_PrintChar:
  7574                           	opt stack 18
  7575                           
  7576                           ;incstack = 0
  7577                           ;Console_PrintChar@pInput stored from wreg
  7578  012880  0100               	movlb	0	; () banked
  7579  012882  6FCD               	movwf	Console_PrintChar@pInput& (0+255),b
  7580                           
  7581                           ;Console.c: 324: switch(pInput)
  7582  012884  D0B1               	goto	l1036
  7583  012886                     
  7584                           ;Console.c: 327: case '\n':
  7585                           ;Console.c: 328: Console_NewLine();
  7586  012886  ECCB  F0A5         	call	_Console_NewLine	;wreg free
  7587                           
  7588                           ;Console.c: 329: return;
  7589  01288A  0012               	return	
  7590  01288C                     
  7591                           ;Console.c: 331: Console_Backspace();
  7592  01288C  ECF0  F0AC         	call	_Console_Backspace	;wreg free
  7593                           
  7594                           ;Console.c: 332: return;
  7595  012890  0012               	return	
  7596  012892                     
  7597                           ;Console.c: 334: Console_FormFeed();
  7598  012892  ECFE  F0A6         	call	_Console_FormFeed	;wreg free
  7599                           
  7600                           ;Console.c: 335: return;
  7601  012896  0012               	return	
  7602  012898                     
  7603                           ;Console.c: 337: Console_Tab();
  7604  012898  EC9E  F0A0         	call	_Console_Tab	;wreg free
  7605                           
  7606                           ;Console.c: 338: return;
  7607  01289C  0012               	return	
  7608  01289E                     
  7609                           ;Console.c: 340: Console_IncrementCursor();
  7610  01289E  EC29  F0AC         	call	_Console_IncrementCursor	;wreg free
  7611                           
  7612                           ;Console.c: 341: return;
  7613  0128A2  0012               	return	
  7614  0128A4                     
  7615                           ;Console.c: 343: Console_ResetCursor();
  7616  0128A4  EC2B  F0B2         	call	_Console_ResetCursor	;wreg free
  7617                           
  7618                           ;Console.c: 344: return;
  7619  0128A8  0012               	return	
  7620  0128AA                     
  7621                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7622                           
  7623                           ;Console.c: 349: default:
  7624  0128AA  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7625  0128AE  0E7F               	movlw	127
  7626  0128B0  0100               	movlb	0	; () banked
  7627  0128B2  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7628  0128B4  0100               	movlb	0	; () banked
  7629  0128B6  518E               	movf	_lBufferY& (0+255),w,b
  7630  0128B8  0D14               	mullw	20
  7631  0128BA  0EAA               	movlw	low _lBuffer
  7632  0128BC  0100               	movlb	0	; () banked
  7633  0128BE  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7634  0128C0  0E04               	movlw	high _lBuffer
  7635  0128C2  0100               	movlb	0	; () banked
  7636  0128C4  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7637  0128C6  50F3               	movf	prodl,w,c
  7638  0128C8  0100               	movlb	0	; () banked
  7639  0128CA  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7640  0128CC  50F4               	movf	prodh,w,c
  7641  0128CE  0100               	movlb	0	; () banked
  7642  0128D0  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7643  0128D2  0100               	movlb	0	; () banked
  7644  0128D4  518F               	movf	_lBufferX& (0+255),w,b
  7645  0128D6  0D01               	mullw	1
  7646  0128D8  50F3               	movf	prodl,w,c
  7647  0128DA  0100               	movlb	0	; () banked
  7648  0128DC  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7649  0128DE  6ED9               	movwf	fsr2l,c
  7650  0128E0  50F4               	movf	prodh,w,c
  7651  0128E2  0100               	movlb	0	; () banked
  7652  0128E4  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7653  0128E6  6EDA               	movwf	fsr2h,c
  7654  0128E8  50DF               	movf	indf2,w,c
  7655  0128EA  0B7F               	andlw	127
  7656  0128EC  0100               	movlb	0	; () banked
  7657  0128EE  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7658  0128F0  B4D8               	btfsc	status,2,c
  7659  0128F2  D02E               	goto	l1047
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;Console.c: 351: {
  7663                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7664  0128F4  0E01               	movlw	1
  7665  0128F6  0100               	movlb	0	; () banked
  7666  0128F8  6FFF               	movwf	_change& (0+255),b
  7667                           
  7668                           ; BSR set to: 0
  7669  0128FA  0100               	movlb	0	; () banked
  7670  0128FC  518E               	movf	_lBufferY& (0+255),w,b
  7671  0128FE  0D14               	mullw	20
  7672  012900  0EAA               	movlw	low _lBuffer
  7673  012902  0100               	movlb	0	; () banked
  7674  012904  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7675  012906  0E04               	movlw	high _lBuffer
  7676  012908  0100               	movlb	0	; () banked
  7677  01290A  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7678  01290C  50F3               	movf	prodl,w,c
  7679  01290E  0100               	movlb	0	; () banked
  7680  012910  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7681  012912  50F4               	movf	prodh,w,c
  7682  012914  0100               	movlb	0	; () banked
  7683  012916  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7684  012918  0100               	movlb	0	; () banked
  7685  01291A  518F               	movf	_lBufferX& (0+255),w,b
  7686  01291C  0D01               	mullw	1
  7687  01291E  50F3               	movf	prodl,w,c
  7688  012920  0100               	movlb	0	; () banked
  7689  012922  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7690  012924  6ED9               	movwf	fsr2l,c
  7691  012926  50F4               	movf	prodh,w,c
  7692  012928  0100               	movlb	0	; () banked
  7693  01292A  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7694  01292C  6EDA               	movwf	fsr2h,c
  7695  01292E  0100               	movlb	0	; () banked
  7696  012930  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7697  012932  0980               	iorlw	128
  7698  012934  6EDF               	movwf	indf2,c
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  7702  012936  0100               	movlb	0	; () banked
  7703  012938  518E               	movf	_lBufferY& (0+255),w,b
  7704  01293A  0D02               	mullw	2
  7705  01293C  0E00               	movlw	low _lCBuffer
  7706  01293E  24F3               	addwf	prodl,w,c
  7707  012940  6ED9               	movwf	fsr2l,c
  7708  012942  0E03               	movlw	high _lCBuffer
  7709  012944  20F4               	addwfc	prodh,w,c
  7710  012946  6EDA               	movwf	fsr2h,c
  7711  012948  C0FD  FFDE         	movff	_gForecolour,postinc2
  7712  01294C  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  7713  012950                     l1047:
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;Console.c: 354: }
  7717                           ;Console.c: 368: if(Console_IncrementCursor())
  7718                           
  7719                           ; BSR set to: 0
  7720  012950  EC29  F0AC         	call	_Console_IncrementCursor	;wreg free
  7721  012954  0900               	iorlw	0
  7722  012956  B4D8               	btfsc	status,2,c
  7723  012958  0012               	return	
  7724                           
  7725                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7726  01295A  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7727  01295E  0E7F               	movlw	127
  7728  012960  0100               	movlb	0	; () banked
  7729  012962  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7730  012964  0100               	movlb	0	; () banked
  7731  012966  518E               	movf	_lBufferY& (0+255),w,b
  7732  012968  0D14               	mullw	20
  7733  01296A  0EAA               	movlw	low _lBuffer
  7734  01296C  0100               	movlb	0	; () banked
  7735  01296E  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7736  012970  0E04               	movlw	high _lBuffer
  7737  012972  0100               	movlb	0	; () banked
  7738  012974  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7739  012976  50F3               	movf	prodl,w,c
  7740  012978  0100               	movlb	0	; () banked
  7741  01297A  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7742  01297C  50F4               	movf	prodh,w,c
  7743  01297E  0100               	movlb	0	; () banked
  7744  012980  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7745  012982  0100               	movlb	0	; () banked
  7746  012984  518F               	movf	_lBufferX& (0+255),w,b
  7747  012986  0D01               	mullw	1
  7748  012988  50F3               	movf	prodl,w,c
  7749  01298A  0100               	movlb	0	; () banked
  7750  01298C  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7751  01298E  6ED9               	movwf	fsr2l,c
  7752  012990  50F4               	movf	prodh,w,c
  7753  012992  0100               	movlb	0	; () banked
  7754  012994  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7755  012996  6EDA               	movwf	fsr2h,c
  7756  012998  50DF               	movf	indf2,w,c
  7757  01299A  0B7F               	andlw	127
  7758  01299C  0100               	movlb	0	; () banked
  7759  01299E  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7760  0129A0  B4D8               	btfsc	status,2,c
  7761  0129A2  0012               	return	
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7765  0129A4  0E01               	movlw	1
  7766  0129A6  0100               	movlb	0	; () banked
  7767  0129A8  6FFF               	movwf	_change& (0+255),b
  7768                           
  7769                           ; BSR set to: 0
  7770  0129AA  0100               	movlb	0	; () banked
  7771  0129AC  518E               	movf	_lBufferY& (0+255),w,b
  7772  0129AE  0D14               	mullw	20
  7773  0129B0  0EAA               	movlw	low _lBuffer
  7774  0129B2  0100               	movlb	0	; () banked
  7775  0129B4  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7776  0129B6  0E04               	movlw	high _lBuffer
  7777  0129B8  0100               	movlb	0	; () banked
  7778  0129BA  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7779  0129BC  50F3               	movf	prodl,w,c
  7780  0129BE  0100               	movlb	0	; () banked
  7781  0129C0  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7782  0129C2  50F4               	movf	prodh,w,c
  7783  0129C4  0100               	movlb	0	; () banked
  7784  0129C6  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7785  0129C8  0100               	movlb	0	; () banked
  7786  0129CA  518F               	movf	_lBufferX& (0+255),w,b
  7787  0129CC  0D01               	mullw	1
  7788  0129CE  50F3               	movf	prodl,w,c
  7789  0129D0  0100               	movlb	0	; () banked
  7790  0129D2  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7791  0129D4  6ED9               	movwf	fsr2l,c
  7792  0129D6  50F4               	movf	prodh,w,c
  7793  0129D8  0100               	movlb	0	; () banked
  7794  0129DA  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7795  0129DC  6EDA               	movwf	fsr2h,c
  7796  0129DE  0100               	movlb	0	; () banked
  7797  0129E0  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7798  0129E2  0980               	iorlw	128
  7799  0129E4  6EDF               	movwf	indf2,c
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;Console.c: 372: };
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;Console.c: 371: return;
  7806                           
  7807                           ; BSR set to: 0
  7808                           
  7809                           ; BSR set to: 0
  7810  0129E6  0012               	return	
  7811  0129E8                     l1036:
  7812                           
  7813                           ; BSR set to: 0
  7814  0129E8  0100               	movlb	0	; () banked
  7815  0129EA  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7816                           
  7817                           ; Switch size 1, requested type "space"
  7818                           ; Number of cases is 8, Range of values is 7 to 35
  7819                           ; switch strategies available:
  7820                           ; Name         Instructions Cycles
  7821                           ; simple_byte           25    13 (average)
  7822                           ;	Chosen strategy is simple_byte
  7823  0129EC  0A07               	xorlw	7	; case 7
  7824  0129EE  B4D8               	btfsc	status,2,c
  7825  0129F0  D756               	goto	l1043
  7826  0129F2  0A0F               	xorlw	15	; case 8
  7827  0129F4  B4D8               	btfsc	status,2,c
  7828  0129F6  D74A               	goto	l1040
  7829  0129F8  0A01               	xorlw	1	; case 9
  7830  0129FA  B4D8               	btfsc	status,2,c
  7831  0129FC  D74D               	goto	l1042
  7832  0129FE  0A03               	xorlw	3	; case 10
  7833  012A00  B4D8               	btfsc	status,2,c
  7834  012A02  D741               	goto	l1037
  7835  012A04  0A06               	xorlw	6	; case 12
  7836  012A06  B4D8               	btfsc	status,2,c
  7837  012A08  D744               	goto	l1041
  7838  012A0A  0A01               	xorlw	1	; case 13
  7839  012A0C  B4D8               	btfsc	status,2,c
  7840  012A0E  D73B               	goto	l1037
  7841  012A10  0A2D               	xorlw	45	; case 32
  7842  012A12  B4D8               	btfsc	status,2,c
  7843  012A14  D74A               	goto	l1045
  7844  012A16  0A03               	xorlw	3	; case 35
  7845  012A18  B4D8               	btfsc	status,2,c
  7846  012A1A  D744               	goto	l1044
  7847  012A1C  D746               	goto	l1045
  7848  012A1E                     __end_of_Console_PrintChar:
  7849                           	opt stack 0
  7850                           tblptru	equ	0xFF8
  7851                           tblptrh	equ	0xFF7
  7852                           tblptrl	equ	0xFF6
  7853                           tablat	equ	0xFF5
  7854                           prodh	equ	0xFF4
  7855                           prodl	equ	0xFF3
  7856                           postinc0	equ	0xFEE
  7857                           wreg	equ	0xFE8
  7858                           postdec1	equ	0xFE5
  7859                           fsr1h	equ	0xFE2
  7860                           fsr1l	equ	0xFE1
  7861                           indf2	equ	0xFDF
  7862                           postinc2	equ	0xFDE
  7863                           postdec2	equ	0xFDD
  7864                           fsr2h	equ	0xFDA
  7865                           fsr2l	equ	0xFD9
  7866                           status	equ	0xFD8
  7867                           
  7868 ;; *************** function _Console_Tab *****************
  7869 ;; Defined at:
  7870 ;;		line 260 in file "Library/Console.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;		None
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;  c               1   15[BANK0 ] unsigned char 
  7875 ;;  i               1   14[BANK0 ] unsigned char 
  7876 ;;  t               1   13[BANK0 ] unsigned char 
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      void 
  7879 ;; Registers used:
  7880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7887 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;Total ram usage:        8 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    9
  7893 ;; This function calls:
  7894 ;;		_Console_ClearCursor
  7895 ;;		_Console_IncrementCursor
  7896 ;;		___awdiv
  7897 ;; This function is called by:
  7898 ;;		_Console_PrintChar
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text25
  7903  01413C                     __ptext25:
  7904                           	opt stack 0
  7905  01413C                     _Console_Tab:
  7906                           	opt stack 18
  7907                           
  7908                           ;Console.c: 262: UINT8 i = 0;
  7909                           
  7910                           ;incstack = 0
  7911  01413C  0E00               	movlw	0
  7912  01413E  0100               	movlb	0	; () banked
  7913  014140  6FC8               	movwf	Console_Tab@i& (0+255),b
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  7917  014142  0EFA               	movlw	250
  7918  014144  2447               	addwf	_gCursor,w,c
  7919  014146  0100               	movlb	0	; () banked
  7920  014148  6FBA               	movwf	___awdiv@dividend& (0+255),b
  7921  01414A  0EFF               	movlw	255
  7922  01414C  2048               	addwfc	_gCursor+1,w,c
  7923  01414E  0100               	movlb	0	; () banked
  7924  014150  6FBB               	movwf	(___awdiv@dividend+1)& (0+255),b
  7925  014152  0E00               	movlw	0
  7926  014154  0100               	movlb	0	; () banked
  7927  014156  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7928  014158  0E06               	movlw	6
  7929  01415A  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7930  01415C  EC5F  F0A1         	call	___awdiv	;wreg free
  7931  014160  0100               	movlb	0	; () banked
  7932  014162  51BA               	movf	?___awdiv& (0+255),w,b
  7933  014164  0100               	movlb	0	; () banked
  7934  014166  6FC9               	movwf	Console_Tab@c& (0+255),b
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;Console.c: 264: UINT8 t = c/4;
  7938  014168  C0C9  F0BA         	movff	Console_Tab@c,___awdiv@dividend
  7939  01416C  0100               	movlb	0	; () banked
  7940  01416E  6BBB               	clrf	(___awdiv@dividend+1)& (0+255),b
  7941  014170  0E00               	movlw	0
  7942  014172  0100               	movlb	0	; () banked
  7943  014174  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7944  014176  0E04               	movlw	4
  7945  014178  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7946  01417A  EC5F  F0A1         	call	___awdiv	;wreg free
  7947  01417E  0100               	movlb	0	; () banked
  7948  014180  51BA               	movf	?___awdiv& (0+255),w,b
  7949  014182  0100               	movlb	0	; () banked
  7950  014184  6FC7               	movwf	Console_Tab@t& (0+255),b
  7951                           
  7952                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  7953  014186  0E00               	movlw	0
  7954  014188  0100               	movlb	0	; () banked
  7955  01418A  6FC8               	movwf	Console_Tab@i& (0+255),b
  7956  01418C  D006               	goto	l1009
  7957  01418E                     
  7958                           ; BSR set to: 0
  7959                           ;Console.c: 266: {
  7960                           ;Console.c: 267: Console_ClearCursor();
  7961                           
  7962                           ; BSR set to: 0
  7963  01418E  ECA4  F0AF         	call	_Console_ClearCursor	;wreg free
  7964                           
  7965                           ;Console.c: 268: Console_IncrementCursor();
  7966  014192  EC29  F0AC         	call	_Console_IncrementCursor	;wreg free
  7967  014196  0100               	movlb	0	; () banked
  7968  014198  2BC8               	incf	Console_Tab@i& (0+255),f,b
  7969  01419A                     l1009:
  7970                           
  7971                           ; BSR set to: 0
  7972                           
  7973                           ; BSR set to: 0
  7974  01419A  0100               	movlb	0	; () banked
  7975  01419C  51C7               	movf	Console_Tab@t& (0+255),w,b
  7976  01419E  0D04               	mullw	4
  7977  0141A0  1EF3               	comf	prodl,f,c
  7978  0141A2  1EF4               	comf	prodh,f,c
  7979  0141A4  4AF3               	infsnz	prodl,f,c
  7980  0141A6  2AF4               	incf	prodh,f,c
  7981  0141A8  0100               	movlb	0	; () banked
  7982  0141AA  51C9               	movf	Console_Tab@c& (0+255),w,b
  7983  0141AC  0100               	movlb	0	; () banked
  7984  0141AE  6FC2               	movwf	??_Console_Tab& (0+255),b
  7985  0141B0  6BC3               	clrf	(??_Console_Tab+1)& (0+255),b
  7986  0141B2  50F3               	movf	prodl,w,c
  7987  0141B4  0100               	movlb	0	; () banked
  7988  0141B6  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7989  0141B8  50F4               	movf	prodh,w,c
  7990  0141BA  0100               	movlb	0	; () banked
  7991  0141BC  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7992  0141BE  0100               	movlb	0	; () banked
  7993  0141C0  1FC2               	comf	??_Console_Tab& (0+255),f,b
  7994  0141C2  1FC3               	comf	(??_Console_Tab+1)& (0+255),f,b
  7995  0141C4  4BC2               	infsnz	??_Console_Tab& (0+255),f,b
  7996  0141C6  2BC3               	incf	(??_Console_Tab+1)& (0+255),f,b
  7997  0141C8  0E04               	movlw	4
  7998  0141CA  0100               	movlb	0	; () banked
  7999  0141CC  27C2               	addwf	??_Console_Tab& (0+255),f,b
  8000  0141CE  0E00               	movlw	0
  8001  0141D0  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  8002  0141D2  0100               	movlb	0	; () banked
  8003  0141D4  51C8               	movf	Console_Tab@i& (0+255),w,b
  8004  0141D6  0100               	movlb	0	; () banked
  8005  0141D8  6FC4               	movwf	(??_Console_Tab+2)& (0+255),b
  8006  0141DA  6BC5               	clrf	(??_Console_Tab+3)& (0+255),b
  8007  0141DC  0100               	movlb	0	; () banked
  8008  0141DE  51C2               	movf	??_Console_Tab& (0+255),w,b
  8009  0141E0  0100               	movlb	0	; () banked
  8010  0141E2  5DC4               	subwf	(??_Console_Tab+2)& (0+255),w,b
  8011  0141E4  0100               	movlb	0	; () banked
  8012  0141E6  51C5               	movf	(??_Console_Tab+3)& (0+255),w,b
  8013  0141E8  0A80               	xorlw	128
  8014  0141EA  0100               	movlb	0	; () banked
  8015  0141EC  6FC6               	movwf	(??_Console_Tab+4)& (0+255),b
  8016  0141EE  0100               	movlb	0	; () banked
  8017  0141F0  51C3               	movf	(??_Console_Tab+1)& (0+255),w,b
  8018  0141F2  0A80               	xorlw	128
  8019  0141F4  0100               	movlb	0	; () banked
  8020  0141F6  59C6               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  8021  0141F8  B0D8               	btfsc	status,0,c
  8022  0141FA  0012               	return	
  8023  0141FC  D7C8               	goto	l1010
  8024  0141FE                     __end_of_Console_Tab:
  8025                           	opt stack 0
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           postinc0	equ	0xFEE
  8033                           wreg	equ	0xFE8
  8034                           postdec1	equ	0xFE5
  8035                           fsr1h	equ	0xFE2
  8036                           fsr1l	equ	0xFE1
  8037                           indf2	equ	0xFDF
  8038                           postinc2	equ	0xFDE
  8039                           postdec2	equ	0xFDD
  8040                           fsr2h	equ	0xFDA
  8041                           fsr2l	equ	0xFD9
  8042                           status	equ	0xFD8
  8043                           
  8044 ;; *************** function ___awdiv *****************
  8045 ;; Defined at:
  8046 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;  dividend        2    0[BANK0 ] int 
  8049 ;;  divisor         2    2[BANK0 ] int 
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;  quotient        2    6[BANK0 ] int 
  8052 ;;  sign            1    5[BANK0 ] unsigned char 
  8053 ;;  counter         1    4[BANK0 ] unsigned char 
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  2    0[BANK0 ] int 
  8056 ;; Registers used:
  8057 ;;		wreg, status,2, status,0
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8063 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;Total ram usage:        8 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; Hardware stack levels required when called:    7
  8070 ;; This function calls:
  8071 ;;		Nothing
  8072 ;; This function is called by:
  8073 ;;		_Console_Tab
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           	psect	text26
  8078  0142BE                     __ptext26:
  8079                           	opt stack 0
  8080  0142BE                     ___awdiv:
  8081                           	opt stack 19
  8082                           
  8083                           ; BSR set to: 0
  8084                           ;incstack = 0
  8085  0142BE  0E00               	movlw	0
  8086  0142C0  0100               	movlb	0	; () banked
  8087  0142C2  6FBF               	movwf	___awdiv@sign& (0+255),b
  8088                           
  8089                           ; BSR set to: 0
  8090  0142C4  0100               	movlb	0	; () banked
  8091  0142C6  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8092  0142C8  D008               	goto	l2620
  8093                           
  8094                           ; BSR set to: 0
  8095  0142CA  0100               	movlb	0	; () banked
  8096  0142CC  6DBC               	negf	___awdiv@divisor& (0+255),b
  8097  0142CE  1FBD               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8098  0142D0  B0D8               	btfsc	status,0,c
  8099  0142D2  2BBD               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8100                           
  8101                           ; BSR set to: 0
  8102  0142D4  0E01               	movlw	1
  8103  0142D6  0100               	movlb	0	; () banked
  8104  0142D8  6FBF               	movwf	___awdiv@sign& (0+255),b
  8105  0142DA                     l2620:
  8106                           
  8107                           ; BSR set to: 0
  8108                           
  8109                           ; BSR set to: 0
  8110  0142DA  0100               	movlb	0	; () banked
  8111  0142DC  AFBB               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8112  0142DE  D008               	goto	l2621
  8113                           
  8114                           ; BSR set to: 0
  8115  0142E0  0100               	movlb	0	; () banked
  8116  0142E2  6DBA               	negf	___awdiv@dividend& (0+255),b
  8117  0142E4  1FBB               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8118  0142E6  B0D8               	btfsc	status,0,c
  8119  0142E8  2BBB               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8120                           
  8121                           ; BSR set to: 0
  8122  0142EA  0E01               	movlw	1
  8123  0142EC  0100               	movlb	0	; () banked
  8124  0142EE  1BBF               	xorwf	___awdiv@sign& (0+255),f,b
  8125  0142F0                     l2621:
  8126                           
  8127                           ; BSR set to: 0
  8128                           
  8129                           ; BSR set to: 0
  8130  0142F0  0E00               	movlw	0
  8131  0142F2  0100               	movlb	0	; () banked
  8132  0142F4  6FC1               	movwf	(___awdiv@quotient+1)& (0+255),b
  8133  0142F6  0E00               	movlw	0
  8134  0142F8  6FC0               	movwf	___awdiv@quotient& (0+255),b
  8135                           
  8136                           ; BSR set to: 0
  8137  0142FA  0100               	movlb	0	; () banked
  8138  0142FC  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8139  0142FE  0100               	movlb	0	; () banked
  8140  014300  11BD               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8141  014302  B4D8               	btfsc	status,2,c
  8142  014304  D02C               	goto	l2628
  8143                           
  8144                           ; BSR set to: 0
  8145  014306  0E01               	movlw	1
  8146  014308  0100               	movlb	0	; () banked
  8147  01430A  6FBE               	movwf	___awdiv@counter& (0+255),b
  8148  01430C  D006               	goto	l2623
  8149  01430E                     
  8150                           ; BSR set to: 0
  8151                           
  8152                           ; BSR set to: 0
  8153  01430E  0100               	movlb	0	; () banked
  8154  014310  90D8               	bcf	status,0,c
  8155  014312  37BC               	rlcf	___awdiv@divisor& (0+255),f,b
  8156  014314  37BD               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8157  014316  0100               	movlb	0	; () banked
  8158  014318  2BBE               	incf	___awdiv@counter& (0+255),f,b
  8159  01431A                     l2623:
  8160                           
  8161                           ; BSR set to: 0
  8162                           
  8163                           ; BSR set to: 0
  8164  01431A  0100               	movlb	0	; () banked
  8165  01431C  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8166  01431E  D7F7               	goto	l2624
  8167  014320                     u9190:
  8168                           
  8169                           ; BSR set to: 0
  8170                           
  8171                           ; BSR set to: 0
  8172                           
  8173                           ; BSR set to: 0
  8174  014320  0100               	movlb	0	; () banked
  8175  014322  90D8               	bcf	status,0,c
  8176  014324  37C0               	rlcf	___awdiv@quotient& (0+255),f,b
  8177  014326  37C1               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8178                           
  8179                           ; BSR set to: 0
  8180  014328  0100               	movlb	0	; () banked
  8181  01432A  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8182  01432C  0100               	movlb	0	; () banked
  8183  01432E  5DBA               	subwf	___awdiv@dividend& (0+255),w,b
  8184  014330  0100               	movlb	0	; () banked
  8185  014332  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8186  014334  0100               	movlb	0	; () banked
  8187  014336  59BB               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8188  014338  A0D8               	btfss	status,0,c
  8189  01433A  D00A               	goto	l2627
  8190                           
  8191                           ; BSR set to: 0
  8192  01433C  0100               	movlb	0	; () banked
  8193  01433E  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8194  014340  0100               	movlb	0	; () banked
  8195  014342  5FBA               	subwf	___awdiv@dividend& (0+255),f,b
  8196  014344  0100               	movlb	0	; () banked
  8197  014346  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8198  014348  0100               	movlb	0	; () banked
  8199  01434A  5BBB               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8200                           
  8201                           ; BSR set to: 0
  8202  01434C  0100               	movlb	0	; () banked
  8203  01434E  81C0               	bsf	___awdiv@quotient& (0+255),0,b
  8204  014350                     l2627:
  8205                           
  8206                           ; BSR set to: 0
  8207                           
  8208                           ; BSR set to: 0
  8209  014350  0100               	movlb	0	; () banked
  8210  014352  90D8               	bcf	status,0,c
  8211  014354  33BD               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8212  014356  33BC               	rrcf	___awdiv@divisor& (0+255),f,b
  8213                           
  8214                           ; BSR set to: 0
  8215  014358  0100               	movlb	0	; () banked
  8216  01435A  2FBE               	decfsz	___awdiv@counter& (0+255),f,b
  8217  01435C  D7E1               	goto	u9190
  8218  01435E                     l2628:
  8219                           
  8220                           ; BSR set to: 0
  8221                           
  8222                           ; BSR set to: 0
  8223                           
  8224                           ; BSR set to: 0
  8225  01435E  0100               	movlb	0	; () banked
  8226  014360  51BF               	movf	___awdiv@sign& (0+255),w,b
  8227  014362  0100               	movlb	0	; () banked
  8228  014364  B4D8               	btfsc	status,2,c
  8229  014366  D005               	goto	l2629
  8230                           
  8231                           ; BSR set to: 0
  8232  014368  0100               	movlb	0	; () banked
  8233  01436A  6DC0               	negf	___awdiv@quotient& (0+255),b
  8234  01436C  1FC1               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8235  01436E  B0D8               	btfsc	status,0,c
  8236  014370  2BC1               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8237  014372                     l2629:
  8238                           
  8239                           ; BSR set to: 0
  8240                           
  8241                           ; BSR set to: 0
  8242  014372  C0C0  F0BA         	movff	___awdiv@quotient,?___awdiv
  8243  014376  C0C1  F0BB         	movff	___awdiv@quotient+1,?___awdiv+1
  8244  01437A  0012               	return	
  8245  01437C                     __end_of___awdiv:
  8246                           	opt stack 0
  8247                           tblptru	equ	0xFF8
  8248                           tblptrh	equ	0xFF7
  8249                           tblptrl	equ	0xFF6
  8250                           tablat	equ	0xFF5
  8251                           prodh	equ	0xFF4
  8252                           prodl	equ	0xFF3
  8253                           postinc0	equ	0xFEE
  8254                           wreg	equ	0xFE8
  8255                           postdec1	equ	0xFE5
  8256                           fsr1h	equ	0xFE2
  8257                           fsr1l	equ	0xFE1
  8258                           indf2	equ	0xFDF
  8259                           postinc2	equ	0xFDE
  8260                           postdec2	equ	0xFDD
  8261                           fsr2h	equ	0xFDA
  8262                           fsr2l	equ	0xFD9
  8263                           status	equ	0xFD8
  8264                           
  8265 ;; *************** function _Console_IncrementCursor *****************
  8266 ;; Defined at:
  8267 ;;		line 243 in file "Library/Console.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;		None
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;		None
  8272 ;; Return value:  Size  Location     Type
  8273 ;;                  1    wreg      unsigned char 
  8274 ;; Registers used:
  8275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8276 ;; Tracked objects:
  8277 ;;		On entry : 0/0
  8278 ;;		On exit  : 0/0
  8279 ;;		Unchanged: 0/0
  8280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8285 ;;Total ram usage:        2 bytes
  8286 ;; Hardware stack levels used:    1
  8287 ;; Hardware stack levels required when called:    8
  8288 ;; This function calls:
  8289 ;;		_Console_FormFeed
  8290 ;;		_Console_NewLine
  8291 ;; This function is called by:
  8292 ;;		_Console_Tab
  8293 ;;		_Console_PrintChar
  8294 ;; This function uses a non-reentrant model
  8295 ;;
  8296                           
  8297                           	psect	text27
  8298  015852                     __ptext27:
  8299                           	opt stack 0
  8300  015852                     _Console_IncrementCursor:
  8301                           	opt stack 18
  8302                           
  8303                           ;Console.c: 246: lBufferX += 1;
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;incstack = 0
  8307  015852  0100               	movlb	0	; () banked
  8308  015854  2B8F               	incf	_lBufferX& (0+255),f,b
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;Console.c: 248: gCursor.x += 6;
  8312  015856  0E06               	movlw	6
  8313  015858  2647               	addwf	_gCursor,f,c
  8314  01585A  0E00               	movlw	0
  8315  01585C  2248               	addwfc	_gCursor+1,f,c
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  8319  01585E  0E06               	movlw	6
  8320  015860  2447               	addwf	_gCursor,w,c
  8321  015862  0100               	movlb	0	; () banked
  8322  015864  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8323  015866  0E00               	movlw	0
  8324  015868  2048               	addwfc	_gCursor+1,w,c
  8325  01586A  0100               	movlb	0	; () banked
  8326  01586C  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8327  01586E  0100               	movlb	0	; () banked
  8328  015870  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8329  015872  D009               	goto	l1004
  8330  015874  0100               	movlb	0	; () banked
  8331  015876  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8332  015878  E104               	bnz	u9050
  8333  01587A  0E80               	movlw	128
  8334  01587C  0100               	movlb	0	; () banked
  8335  01587E  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8336  015880  B0D8               	btfsc	status,0,c
  8337  015882                     u9050:
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;Console.c: 250: Console_NewLine();
  8341  015882  ECCB  F0A5         	call	_Console_NewLine	;wreg free
  8342  015886                     l1004:
  8343                           
  8344                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  8345  015886  0E08               	movlw	8
  8346  015888  2449               	addwf	_gCursor+2,w,c
  8347  01588A  0100               	movlb	0	; () banked
  8348  01588C  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8349  01588E  0E00               	movlw	0
  8350  015890  204A               	addwfc	_gCursor+3,w,c
  8351  015892  0100               	movlb	0	; () banked
  8352  015894  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8353  015896  0100               	movlb	0	; () banked
  8354  015898  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8355  01589A  D00C               	goto	l1005
  8356  01589C  0100               	movlb	0	; () banked
  8357  01589E  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8358  0158A0  E105               	bnz	u9060
  8359  0158A2  0E80               	movlw	128
  8360  0158A4  0100               	movlb	0	; () banked
  8361  0158A6  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8362  0158A8  A0D8               	btfss	status,0,c
  8363  0158AA  D004               	goto	l1005
  8364  0158AC                     u9060:
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;Console.c: 252: {
  8368                           ;Console.c: 253: Console_FormFeed();
  8369  0158AC  ECFE  F0A6         	call	_Console_FormFeed	;wreg free
  8370                           
  8371                           ;Console.c: 254: return 1;
  8372  0158B0  0E01               	movlw	1
  8373  0158B2  0012               	return	
  8374  0158B4                     l1005:
  8375                           
  8376                           ;Console.c: 255: }
  8377                           ;Console.c: 257: return 0;
  8378  0158B4  0E00               	movlw	0
  8379  0158B6  0012               	return	
  8380  0158B8                     __end_of_Console_IncrementCursor:
  8381                           	opt stack 0
  8382                           tblptru	equ	0xFF8
  8383                           tblptrh	equ	0xFF7
  8384                           tblptrl	equ	0xFF6
  8385                           tablat	equ	0xFF5
  8386                           prodh	equ	0xFF4
  8387                           prodl	equ	0xFF3
  8388                           postinc0	equ	0xFEE
  8389                           wreg	equ	0xFE8
  8390                           postdec1	equ	0xFE5
  8391                           fsr1h	equ	0xFE2
  8392                           fsr1l	equ	0xFE1
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _Console_NewLine *****************
  8401 ;; Defined at:
  8402 ;;		line 175 in file "Library/Console.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;		None
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  1    wreg      void 
  8409 ;; Registers used:
  8410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;Total ram usage:        2 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    7
  8423 ;; This function calls:
  8424 ;;		Nothing
  8425 ;; This function is called by:
  8426 ;;		_Console_IncrementCursor
  8427 ;;		_Console_PrintChar
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text28
  8432  014B96                     __ptext28:
  8433                           	opt stack 0
  8434  014B96                     _Console_NewLine:
  8435                           	opt stack 18
  8436                           
  8437                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  8438                           
  8439                           ;incstack = 0
  8440  014B96  D03E               	goto	l983
  8441  014B98                     
  8442                           ;Console.c: 179: {
  8443                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  8444  014B98  0100               	movlb	0	; () banked
  8445  014B9A  518E               	movf	_lBufferY& (0+255),w,b
  8446  014B9C  0D14               	mullw	20
  8447  014B9E  0EAA               	movlw	low _lBuffer
  8448  014BA0  0100               	movlb	0	; () banked
  8449  014BA2  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8450  014BA4  0E04               	movlw	high _lBuffer
  8451  014BA6  0100               	movlb	0	; () banked
  8452  014BA8  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8453  014BAA  50F3               	movf	prodl,w,c
  8454  014BAC  0100               	movlb	0	; () banked
  8455  014BAE  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8456  014BB0  50F4               	movf	prodh,w,c
  8457  014BB2  0100               	movlb	0	; () banked
  8458  014BB4  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8459  014BB6  0100               	movlb	0	; () banked
  8460  014BB8  518F               	movf	_lBufferX& (0+255),w,b
  8461  014BBA  0D01               	mullw	1
  8462  014BBC  50F3               	movf	prodl,w,c
  8463  014BBE  0100               	movlb	0	; () banked
  8464  014BC0  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8465  014BC2  6ED9               	movwf	fsr2l,c
  8466  014BC4  50F4               	movf	prodh,w,c
  8467  014BC6  0100               	movlb	0	; () banked
  8468  014BC8  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8469  014BCA  6EDA               	movwf	fsr2h,c
  8470  014BCC  50DF               	movf	indf2,w,c
  8471  014BCE  B4D8               	btfsc	status,2,c
  8472  014BD0  D01F               	goto	l985
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  8476  014BD2  0E01               	movlw	1
  8477  014BD4  0100               	movlb	0	; () banked
  8478  014BD6  6FFF               	movwf	_change& (0+255),b
  8479                           
  8480                           ; BSR set to: 0
  8481  014BD8  0100               	movlb	0	; () banked
  8482  014BDA  518E               	movf	_lBufferY& (0+255),w,b
  8483  014BDC  0D14               	mullw	20
  8484  014BDE  0EAA               	movlw	low _lBuffer
  8485  014BE0  0100               	movlb	0	; () banked
  8486  014BE2  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8487  014BE4  0E04               	movlw	high _lBuffer
  8488  014BE6  0100               	movlb	0	; () banked
  8489  014BE8  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8490  014BEA  50F3               	movf	prodl,w,c
  8491  014BEC  0100               	movlb	0	; () banked
  8492  014BEE  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8493  014BF0  50F4               	movf	prodh,w,c
  8494  014BF2  0100               	movlb	0	; () banked
  8495  014BF4  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8496  014BF6  0100               	movlb	0	; () banked
  8497  014BF8  518F               	movf	_lBufferX& (0+255),w,b
  8498  014BFA  0D01               	mullw	1
  8499  014BFC  50F3               	movf	prodl,w,c
  8500  014BFE  0100               	movlb	0	; () banked
  8501  014C00  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8502  014C02  6ED9               	movwf	fsr2l,c
  8503  014C04  50F4               	movf	prodh,w,c
  8504  014C06  0100               	movlb	0	; () banked
  8505  014C08  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8506  014C0A  6EDA               	movwf	fsr2h,c
  8507  014C0C  0E80               	movlw	128
  8508  014C0E  6EDF               	movwf	indf2,c
  8509  014C10                     l985:
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;Console.c: 182: lBufferX ++;
  8513                           
  8514                           ; BSR set to: 0
  8515  014C10  0100               	movlb	0	; () banked
  8516  014C12  2B8F               	incf	_lBufferX& (0+255),f,b
  8517  014C14                     l983:
  8518                           
  8519                           ; BSR set to: 0
  8520  014C14  0E13               	movlw	19
  8521  014C16  0100               	movlb	0	; () banked
  8522  014C18  658F               	cpfsgt	_lBufferX& (0+255),b
  8523  014C1A  D7BE               	goto	l984
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;Console.c: 183: }
  8527                           ;Console.c: 185: lBufferX = 0;
  8528                           
  8529                           ; BSR set to: 0
  8530  014C1C  0E00               	movlw	0
  8531  014C1E  0100               	movlb	0	; () banked
  8532  014C20  6F8F               	movwf	_lBufferX& (0+255),b
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;Console.c: 186: lBufferY ++;
  8536  014C22  0100               	movlb	0	; () banked
  8537  014C24  2B8E               	incf	_lBufferY& (0+255),f,b
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;Console.c: 188: gCursor.y += 8;
  8541  014C26  0E08               	movlw	8
  8542  014C28  2649               	addwf	_gCursor+2,f,c
  8543  014C2A  0E00               	movlw	0
  8544  014C2C  224A               	addwfc	_gCursor+3,f,c
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;Console.c: 189: gCursor.x = 6;
  8548  014C2E  0E00               	movlw	0
  8549  014C30  6E48               	movwf	_gCursor+1,c
  8550  014C32  0E06               	movlw	6
  8551  014C34  6E47               	movwf	_gCursor,c
  8552                           
  8553                           ; BSR set to: 0
  8554  014C36  0012               	return		;funcret
  8555  014C38                     __end_of_Console_NewLine:
  8556                           	opt stack 0
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           postinc0	equ	0xFEE
  8564                           wreg	equ	0xFE8
  8565                           postdec1	equ	0xFE5
  8566                           fsr1h	equ	0xFE2
  8567                           fsr1l	equ	0xFE1
  8568                           indf2	equ	0xFDF
  8569                           postinc2	equ	0xFDE
  8570                           postdec2	equ	0xFDD
  8571                           fsr2h	equ	0xFDA
  8572                           fsr2l	equ	0xFD9
  8573                           status	equ	0xFD8
  8574                           
  8575 ;; *************** function _Console_FormFeed *****************
  8576 ;; Defined at:
  8577 ;;		line 192 in file "Library/Console.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;		None
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;  y               1    3[BANK0 ] unsigned char 
  8582 ;;  x               1    2[BANK0 ] unsigned char 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;                  1    wreg      void 
  8585 ;; Registers used:
  8586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8593 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;Total ram usage:        4 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; Hardware stack levels required when called:    7
  8599 ;; This function calls:
  8600 ;;		Nothing
  8601 ;; This function is called by:
  8602 ;;		_Console_IncrementCursor
  8603 ;;		_Console_PrintChar
  8604 ;; This function uses a non-reentrant model
  8605 ;;
  8606                           
  8607                           	psect	text29
  8608  014DFC                     __ptext29:
  8609                           	opt stack 0
  8610  014DFC                     _Console_FormFeed:
  8611                           	opt stack 18
  8612                           
  8613                           ;Console.c: 195: lBufferX = 0;
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;incstack = 0
  8617  014DFC  0E00               	movlw	0
  8618  014DFE  0100               	movlb	0	; () banked
  8619  014E00  6F8F               	movwf	_lBufferX& (0+255),b
  8620                           
  8621                           ;Console.c: 196: lBufferY = 0;
  8622  014E02  0E00               	movlw	0
  8623  014E04  0100               	movlb	0	; () banked
  8624  014E06  6F8E               	movwf	_lBufferY& (0+255),b
  8625                           
  8626                           ;Console.c: 197: UINT8 x, y;
  8627                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  8628  014E08  0E00               	movlw	0
  8629  014E0A  0100               	movlb	0	; () banked
  8630  014E0C  6FBD               	movwf	Console_FormFeed@y& (0+255),b
  8631  014E0E                     l12248:
  8632                           
  8633                           ; BSR set to: 0
  8634  014E0E  0E0E               	movlw	14
  8635  014E10  0100               	movlb	0	; () banked
  8636  014E12  65BD               	cpfsgt	Console_FormFeed@y& (0+255),b
  8637  014E14  D001               	goto	l990
  8638  014E16  D02D               	goto	u8910
  8639  014E18                     l990:
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  8643                           
  8644                           ; BSR set to: 0
  8645  014E18  0E00               	movlw	0
  8646  014E1A  0100               	movlb	0	; () banked
  8647  014E1C  6FBC               	movwf	Console_FormFeed@x& (0+255),b
  8648  014E1E                     l12254:
  8649                           
  8650                           ; BSR set to: 0
  8651  014E1E  0E13               	movlw	19
  8652  014E20  0100               	movlb	0	; () banked
  8653  014E22  65BC               	cpfsgt	Console_FormFeed@x& (0+255),b
  8654  014E24  D001               	goto	l992
  8655  014E26  D022               	goto	u8900
  8656  014E28                     l992:
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  8660                           
  8661                           ; BSR set to: 0
  8662  014E28  0E01               	movlw	1
  8663  014E2A  0100               	movlb	0	; () banked
  8664  014E2C  6FFF               	movwf	_change& (0+255),b
  8665                           
  8666                           ; BSR set to: 0
  8667  014E2E  0100               	movlb	0	; () banked
  8668  014E30  51BD               	movf	Console_FormFeed@y& (0+255),w,b
  8669  014E32  0D14               	mullw	20
  8670  014E34  0EAA               	movlw	low _lBuffer
  8671  014E36  0100               	movlb	0	; () banked
  8672  014E38  6FBA               	movwf	??_Console_FormFeed& (0+255),b
  8673  014E3A  0E04               	movlw	high _lBuffer
  8674  014E3C  0100               	movlb	0	; () banked
  8675  014E3E  6FBB               	movwf	(??_Console_FormFeed+1)& (0+255),b
  8676  014E40  50F3               	movf	prodl,w,c
  8677  014E42  0100               	movlb	0	; () banked
  8678  014E44  27BA               	addwf	??_Console_FormFeed& (0+255),f,b
  8679  014E46  50F4               	movf	prodh,w,c
  8680  014E48  0100               	movlb	0	; () banked
  8681  014E4A  23BB               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  8682  014E4C  0100               	movlb	0	; () banked
  8683  014E4E  51BC               	movf	Console_FormFeed@x& (0+255),w,b
  8684  014E50  0D01               	mullw	1
  8685  014E52  50F3               	movf	prodl,w,c
  8686  014E54  0100               	movlb	0	; () banked
  8687  014E56  25BA               	addwf	??_Console_FormFeed& (0+255),w,b
  8688  014E58  6ED9               	movwf	fsr2l,c
  8689  014E5A  50F4               	movf	prodh,w,c
  8690  014E5C  0100               	movlb	0	; () banked
  8691  014E5E  21BB               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  8692  014E60  6EDA               	movwf	fsr2h,c
  8693  014E62  0E80               	movlw	128
  8694  014E64  6EDF               	movwf	indf2,c
  8695                           
  8696                           ; BSR set to: 0
  8697  014E66  0100               	movlb	0	; () banked
  8698  014E68  2BBC               	incf	Console_FormFeed@x& (0+255),f,b
  8699  014E6A  D7D9               	goto	l12254
  8700  014E6C                     u8900:
  8701                           
  8702                           ; BSR set to: 0
  8703                           
  8704                           ; BSR set to: 0
  8705  014E6C  0100               	movlb	0	; () banked
  8706  014E6E  2BBD               	incf	Console_FormFeed@y& (0+255),f,b
  8707  014E70  D7CE               	goto	l12248
  8708  014E72                     u8910:
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;Console.c: 204: clearall = 1;
  8712                           
  8713                           ; BSR set to: 0
  8714  014E72  0E01               	movlw	1
  8715  014E74  0100               	movlb	0	; () banked
  8716  014E76  6F90               	movwf	_clearall& (0+255),b
  8717                           
  8718                           ;Console.c: 205: gCursor.x = 6;
  8719  014E78  0E00               	movlw	0
  8720  014E7A  6E48               	movwf	_gCursor+1,c
  8721  014E7C  0E06               	movlw	6
  8722  014E7E  6E47               	movwf	_gCursor,c
  8723                           
  8724                           ;Console.c: 206: gCursor.y = 6;
  8725  014E80  0E00               	movlw	0
  8726  014E82  6E4A               	movwf	_gCursor+3,c
  8727  014E84  0E06               	movlw	6
  8728  014E86  6E49               	movwf	_gCursor+2,c
  8729                           
  8730                           ; BSR set to: 0
  8731  014E88  0012               	return		;funcret
  8732  014E8A                     __end_of_Console_FormFeed:
  8733                           	opt stack 0
  8734                           tblptru	equ	0xFF8
  8735                           tblptrh	equ	0xFF7
  8736                           tblptrl	equ	0xFF6
  8737                           tablat	equ	0xFF5
  8738                           prodh	equ	0xFF4
  8739                           prodl	equ	0xFF3
  8740                           postinc0	equ	0xFEE
  8741                           wreg	equ	0xFE8
  8742                           postdec1	equ	0xFE5
  8743                           fsr1h	equ	0xFE2
  8744                           fsr1l	equ	0xFE1
  8745                           indf2	equ	0xFDF
  8746                           postinc2	equ	0xFDE
  8747                           postdec2	equ	0xFDD
  8748                           fsr2h	equ	0xFDA
  8749                           fsr2l	equ	0xFD9
  8750                           status	equ	0xFD8
  8751                           
  8752 ;; *************** function _Console_ResetCursor *****************
  8753 ;; Defined at:
  8754 ;;		line 297 in file "Library/Console.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;		None
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;		None
  8759 ;; Return value:  Size  Location     Type
  8760 ;;                  1    wreg      void 
  8761 ;; Registers used:
  8762 ;;		wreg, status,2
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;Total ram usage:        0 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; Hardware stack levels required when called:    7
  8775 ;; This function calls:
  8776 ;;		Nothing
  8777 ;; This function is called by:
  8778 ;;		_Console_PrintChar
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text30
  8783  016456                     __ptext30:
  8784                           	opt stack 0
  8785  016456                     _Console_ResetCursor:
  8786                           	opt stack 20
  8787                           
  8788                           ;Console.c: 299: gCursor.x = 6;
  8789                           
  8790                           ; BSR set to: 0
  8791                           ;incstack = 0
  8792  016456  0E00               	movlw	0
  8793  016458  6E48               	movwf	_gCursor+1,c
  8794  01645A  0E06               	movlw	6
  8795  01645C  6E47               	movwf	_gCursor,c
  8796                           
  8797                           ;Console.c: 300: gCursor.y = 6;
  8798  01645E  0E00               	movlw	0
  8799  016460  6E4A               	movwf	_gCursor+3,c
  8800  016462  0E06               	movlw	6
  8801  016464  6E49               	movwf	_gCursor+2,c
  8802                           
  8803                           ;Console.c: 303: lBufferX = 0;
  8804  016466  0E00               	movlw	0
  8805  016468  0100               	movlb	0	; () banked
  8806  01646A  6F8F               	movwf	_lBufferX& (0+255),b
  8807                           
  8808                           ;Console.c: 304: lBufferY = 0;
  8809  01646C  0E00               	movlw	0
  8810  01646E  0100               	movlb	0	; () banked
  8811  016470  6F8E               	movwf	_lBufferY& (0+255),b
  8812                           
  8813                           ; BSR set to: 0
  8814  016472  0012               	return		;funcret
  8815  016474                     __end_of_Console_ResetCursor:
  8816                           	opt stack 0
  8817                           tblptru	equ	0xFF8
  8818                           tblptrh	equ	0xFF7
  8819                           tblptrl	equ	0xFF6
  8820                           tablat	equ	0xFF5
  8821                           prodh	equ	0xFF4
  8822                           prodl	equ	0xFF3
  8823                           postinc0	equ	0xFEE
  8824                           wreg	equ	0xFE8
  8825                           postdec1	equ	0xFE5
  8826                           fsr1h	equ	0xFE2
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           postinc2	equ	0xFDE
  8830                           postdec2	equ	0xFDD
  8831                           fsr2h	equ	0xFDA
  8832                           fsr2l	equ	0xFD9
  8833                           status	equ	0xFD8
  8834                           
  8835 ;; *************** function _Console_Backspace *****************
  8836 ;; Defined at:
  8837 ;;		line 209 in file "Library/Console.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;		None
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;		None
  8842 ;; Return value:  Size  Location     Type
  8843 ;;                  1    wreg      void 
  8844 ;; Registers used:
  8845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;Total ram usage:        0 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:    8
  8858 ;; This function calls:
  8859 ;;		_Console_ClearCursor
  8860 ;; This function is called by:
  8861 ;;		_Console_PrintChar
  8862 ;; This function uses a non-reentrant model
  8863 ;;
  8864                           
  8865                           	psect	text31
  8866  0159E0                     __ptext31:
  8867                           	opt stack 0
  8868  0159E0                     _Console_Backspace:
  8869                           	opt stack 19
  8870                           
  8871                           ;Console.c: 211: if (lBufferX > 0)
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;incstack = 0
  8875  0159E0  0100               	movlb	0	; () banked
  8876  0159E2  518F               	movf	_lBufferX& (0+255),w,b
  8877  0159E4  B4D8               	btfsc	status,2,c
  8878  0159E6  D007               	goto	l997
  8879                           
  8880                           ; BSR set to: 0
  8881                           ;Console.c: 212: {
  8882                           ;Console.c: 213: gCursor.x -= 6;
  8883  0159E8  0EFA               	movlw	250
  8884  0159EA  2647               	addwf	_gCursor,f,c
  8885  0159EC  0EFF               	movlw	255
  8886  0159EE  2248               	addwfc	_gCursor+1,f,c
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;Console.c: 216: lBufferX --;
  8890  0159F0  0100               	movlb	0	; () banked
  8891  0159F2  078F               	decf	_lBufferX& (0+255),f,b
  8892                           
  8893                           ;Console.c: 218: }
  8894  0159F4  D020               	goto	l1000
  8895  0159F6                     l997:
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;Console.c: 219: else if (lBufferY > 0)
  8899                           
  8900                           ; BSR set to: 0
  8901  0159F6  0100               	movlb	0	; () banked
  8902  0159F8  518E               	movf	_lBufferY& (0+255),w,b
  8903  0159FA  B4D8               	btfsc	status,2,c
  8904  0159FC  D00E               	goto	l999
  8905                           
  8906                           ; BSR set to: 0
  8907                           ;Console.c: 220: {
  8908                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  8909  0159FE  0E00               	movlw	0
  8910  015A00  6E48               	movwf	_gCursor+1,c
  8911  015A02  0E72               	movlw	114
  8912  015A04  6E47               	movwf	_gCursor,c
  8913                           
  8914                           ; BSR set to: 0
  8915                           ;Console.c: 222: gCursor.y -= 8;
  8916  015A06  0EF8               	movlw	248
  8917  015A08  2649               	addwf	_gCursor+2,f,c
  8918  015A0A  0EFF               	movlw	255
  8919  015A0C  224A               	addwfc	_gCursor+3,f,c
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  8923  015A0E  0E13               	movlw	19
  8924  015A10  0100               	movlb	0	; () banked
  8925  015A12  6F8F               	movwf	_lBufferX& (0+255),b
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;Console.c: 226: lBufferY --;
  8929  015A14  0100               	movlb	0	; () banked
  8930  015A16  078E               	decf	_lBufferY& (0+255),f,b
  8931                           
  8932                           ;Console.c: 228: }
  8933  015A18  D00E               	goto	l1000
  8934  015A1A                     l999:
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;Console.c: 229: else
  8938                           ;Console.c: 230: {
  8939                           ;Console.c: 231: gCursor.x = 6;
  8940                           
  8941                           ; BSR set to: 0
  8942  015A1A  0E00               	movlw	0
  8943  015A1C  6E48               	movwf	_gCursor+1,c
  8944  015A1E  0E06               	movlw	6
  8945  015A20  6E47               	movwf	_gCursor,c
  8946                           
  8947                           ;Console.c: 232: gCursor.y = 6;
  8948  015A22  0E00               	movlw	0
  8949  015A24  6E4A               	movwf	_gCursor+3,c
  8950  015A26  0E06               	movlw	6
  8951  015A28  6E49               	movwf	_gCursor+2,c
  8952                           
  8953                           ;Console.c: 235: lBufferX = 0;
  8954  015A2A  0E00               	movlw	0
  8955  015A2C  0100               	movlb	0	; () banked
  8956  015A2E  6F8F               	movwf	_lBufferX& (0+255),b
  8957                           
  8958                           ;Console.c: 236: lBufferY = 0;
  8959  015A30  0E00               	movlw	0
  8960  015A32  0100               	movlb	0	; () banked
  8961  015A34  6F8E               	movwf	_lBufferY& (0+255),b
  8962  015A36                     l1000:
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;Console.c: 238: }
  8966                           ;Console.c: 240: Console_ClearCursor();
  8967                           
  8968                           ; BSR set to: 0
  8969                           
  8970                           ; BSR set to: 0
  8971  015A36  ECA4  F0AF         	call	_Console_ClearCursor	;wreg free
  8972  015A3A  0012               	return		;funcret
  8973  015A3C                     __end_of_Console_Backspace:
  8974                           	opt stack 0
  8975                           tblptru	equ	0xFF8
  8976                           tblptrh	equ	0xFF7
  8977                           tblptrl	equ	0xFF6
  8978                           tablat	equ	0xFF5
  8979                           prodh	equ	0xFF4
  8980                           prodl	equ	0xFF3
  8981                           postinc0	equ	0xFEE
  8982                           wreg	equ	0xFE8
  8983                           postdec1	equ	0xFE5
  8984                           fsr1h	equ	0xFE2
  8985                           fsr1l	equ	0xFE1
  8986                           indf2	equ	0xFDF
  8987                           postinc2	equ	0xFDE
  8988                           postdec2	equ	0xFDD
  8989                           fsr2h	equ	0xFDA
  8990                           fsr2l	equ	0xFD9
  8991                           status	equ	0xFD8
  8992                           
  8993 ;; *************** function _Console_ClearCursor *****************
  8994 ;; Defined at:
  8995 ;;		line 308 in file "Library/Console.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;		None
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;		None
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      void 
  9002 ;; Registers used:
  9003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;Total ram usage:        2 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    7
  9016 ;; This function calls:
  9017 ;;		Nothing
  9018 ;; This function is called by:
  9019 ;;		_Console_Backspace
  9020 ;;		_Console_Tab
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           	psect	text32
  9025  015F48                     __ptext32:
  9026                           	opt stack 0
  9027  015F48                     _Console_ClearCursor:
  9028                           	opt stack 19
  9029                           
  9030                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  9031                           
  9032                           ;incstack = 0
  9033  015F48  0E01               	movlw	1
  9034  015F4A  0100               	movlb	0	; () banked
  9035  015F4C  6FFF               	movwf	_change& (0+255),b
  9036                           
  9037                           ; BSR set to: 0
  9038  015F4E  0100               	movlb	0	; () banked
  9039  015F50  518E               	movf	_lBufferY& (0+255),w,b
  9040  015F52  0D14               	mullw	20
  9041  015F54  0EAA               	movlw	low _lBuffer
  9042  015F56  0100               	movlb	0	; () banked
  9043  015F58  6FBA               	movwf	??_Console_ClearCursor& (0+255),b
  9044  015F5A  0E04               	movlw	high _lBuffer
  9045  015F5C  0100               	movlb	0	; () banked
  9046  015F5E  6FBB               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  9047  015F60  50F3               	movf	prodl,w,c
  9048  015F62  0100               	movlb	0	; () banked
  9049  015F64  27BA               	addwf	??_Console_ClearCursor& (0+255),f,b
  9050  015F66  50F4               	movf	prodh,w,c
  9051  015F68  0100               	movlb	0	; () banked
  9052  015F6A  23BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  9053  015F6C  0100               	movlb	0	; () banked
  9054  015F6E  518F               	movf	_lBufferX& (0+255),w,b
  9055  015F70  0D01               	mullw	1
  9056  015F72  50F3               	movf	prodl,w,c
  9057  015F74  0100               	movlb	0	; () banked
  9058  015F76  25BA               	addwf	??_Console_ClearCursor& (0+255),w,b
  9059  015F78  6ED9               	movwf	fsr2l,c
  9060  015F7A  50F4               	movf	prodh,w,c
  9061  015F7C  0100               	movlb	0	; () banked
  9062  015F7E  21BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  9063  015F80  6EDA               	movwf	fsr2h,c
  9064  015F82  0E80               	movlw	128
  9065  015F84  6EDF               	movwf	indf2,c
  9066                           
  9067                           ; BSR set to: 0
  9068  015F86  0012               	return		;funcret
  9069  015F88                     __end_of_Console_ClearCursor:
  9070                           	opt stack 0
  9071                           tblptru	equ	0xFF8
  9072                           tblptrh	equ	0xFF7
  9073                           tblptrl	equ	0xFF6
  9074                           tablat	equ	0xFF5
  9075                           prodh	equ	0xFF4
  9076                           prodl	equ	0xFF3
  9077                           postinc0	equ	0xFEE
  9078                           wreg	equ	0xFE8
  9079                           postdec1	equ	0xFE5
  9080                           fsr1h	equ	0xFE2
  9081                           fsr1l	equ	0xFE1
  9082                           indf2	equ	0xFDF
  9083                           postinc2	equ	0xFDE
  9084                           postdec2	equ	0xFDD
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function ___fltol *****************
  9090 ;; Defined at:
  9091 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  f1              4   57[BANK0 ] void 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  exp1            1   62[BANK0 ] unsigned char 
  9096 ;;  sign1           1   61[BANK0 ] unsigned char 
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  4   57[BANK0 ] long 
  9099 ;; Registers used:
  9100 ;;		wreg, status,2, status,0
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9106 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9110 ;;Total ram usage:       10 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    7
  9113 ;; This function calls:
  9114 ;;		Nothing
  9115 ;; This function is called by:
  9116 ;;		_findClosestWall
  9117 ;;		_mode1
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           	psect	text33
  9122  01378C                     __ptext33:
  9123                           	opt stack 0
  9124  01378C                     ___fltol:
  9125                           	opt stack 21
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;incstack = 0
  9129  01378C  0100               	movlb	0	; () banked
  9130  01378E  35F5               	rlcf	(___fltol@f1+2)& (0+255),w,b
  9131  013790  35F6               	rlcf	(___fltol@f1+3)& (0+255),w,b
  9132  013792  0100               	movlb	0	; () banked
  9133  013794  6FF8               	movwf	___fltol@exp1& (0+255),b
  9134  013796  0100               	movlb	0	; () banked
  9135  013798  51F8               	movf	___fltol@exp1& (0+255),w,b
  9136  01379A  A4D8               	btfss	status,2,c
  9137  01379C  D00A               	goto	l2682
  9138                           
  9139                           ; BSR set to: 0
  9140  01379E  0E00               	movlw	0
  9141  0137A0  0100               	movlb	0	; () banked
  9142  0137A2  6FF3               	movwf	?___fltol& (0+255),b
  9143  0137A4  0E00               	movlw	0
  9144  0137A6  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9145  0137A8  0E00               	movlw	0
  9146  0137AA  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9147  0137AC  0E00               	movlw	0
  9148  0137AE  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9149                           
  9150                           ; BSR set to: 0
  9151  0137B0  0012               	return	
  9152  0137B2                     l2682:
  9153                           
  9154                           ; BSR set to: 0
  9155                           
  9156                           ; BSR set to: 0
  9157  0137B2  C0F3  F100         	movff	___fltol@f1,??___fltol
  9158  0137B6  C0F4  F101         	movff	___fltol@f1+1,??___fltol+1
  9159  0137BA  C0F5  F102         	movff	___fltol@f1+2,??___fltol+2
  9160  0137BE  C0F6  F103         	movff	___fltol@f1+3,??___fltol+3
  9161  0137C2  0E20               	movlw	32
  9162  0137C4  D006               	goto	u11150
  9163  0137C6                     u11155:
  9164  0137C6  0101               	movlb	1	; () banked
  9165  0137C8  90D8               	bcf	status,0,c
  9166  0137CA  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  9167  0137CC  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  9168  0137CE  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  9169  0137D0  3300               	rrcf	??___fltol& (0+255),f,b
  9170  0137D2                     u11150:
  9171  0137D2  2EE8               	decfsz	wreg,f,c
  9172  0137D4  D7F8               	goto	u11155
  9173  0137D6  0101               	movlb	1	; () banked
  9174  0137D8  5100               	movf	??___fltol& (0+255),w,b
  9175  0137DA  0100               	movlb	0	; () banked
  9176  0137DC  6FF7               	movwf	___fltol@sign1& (0+255),b
  9177                           
  9178                           ; BSR set to: 0
  9179  0137DE  0100               	movlb	0	; () banked
  9180  0137E0  8FF5               	bsf	(___fltol@f1+2)& (0+255),7,b
  9181                           
  9182                           ; BSR set to: 0
  9183  0137E2  0EFF               	movlw	255
  9184  0137E4  0100               	movlb	0	; () banked
  9185  0137E6  17F3               	andwf	___fltol@f1& (0+255),f,b
  9186  0137E8  0EFF               	movlw	255
  9187  0137EA  17F4               	andwf	(___fltol@f1+1)& (0+255),f,b
  9188  0137EC  0EFF               	movlw	255
  9189  0137EE  17F5               	andwf	(___fltol@f1+2)& (0+255),f,b
  9190  0137F0  0E00               	movlw	0
  9191  0137F2  17F6               	andwf	(___fltol@f1+3)& (0+255),f,b
  9192                           
  9193                           ; BSR set to: 0
  9194  0137F4  0E96               	movlw	150
  9195  0137F6  0100               	movlb	0	; () banked
  9196  0137F8  5FF8               	subwf	___fltol@exp1& (0+255),f,b
  9197                           
  9198                           ; BSR set to: 0
  9199  0137FA  0100               	movlb	0	; () banked
  9200  0137FC  AFF8               	btfss	___fltol@exp1& (0+255),7,b
  9201  0137FE  D01A               	goto	l2684
  9202                           
  9203                           ; BSR set to: 0
  9204  013800  0100               	movlb	0	; () banked
  9205  013802  51F8               	movf	___fltol@exp1& (0+255),w,b
  9206  013804  0A80               	xorlw	128
  9207  013806  0F97               	addlw	151
  9208  013808  B0D8               	btfsc	status,0,c
  9209  01380A  D00A               	goto	l2685
  9210                           
  9211                           ; BSR set to: 0
  9212  01380C  0E00               	movlw	0
  9213  01380E  0100               	movlb	0	; () banked
  9214  013810  6FF3               	movwf	?___fltol& (0+255),b
  9215  013812  0E00               	movlw	0
  9216  013814  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9217  013816  0E00               	movlw	0
  9218  013818  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9219  01381A  0E00               	movlw	0
  9220  01381C  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9221                           
  9222                           ; BSR set to: 0
  9223  01381E  0012               	return	
  9224  013820                     l2685:
  9225                           
  9226                           ; BSR set to: 0
  9227                           
  9228                           ; BSR set to: 0
  9229                           
  9230                           ; BSR set to: 0
  9231  013820  0100               	movlb	0	; () banked
  9232  013822  90D8               	bcf	status,0,c
  9233  013824  33F6               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9234  013826  33F5               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9235  013828  33F4               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9236  01382A  33F3               	rrcf	___fltol@f1& (0+255),f,b
  9237                           
  9238                           ; BSR set to: 0
  9239  01382C  0100               	movlb	0	; () banked
  9240  01382E  3FF8               	incfsz	___fltol@exp1& (0+255),f,b
  9241  013830  D7F7               	goto	l2685
  9242                           
  9243                           ; BSR set to: 0
  9244  013832  D01B               	goto	u11190
  9245  013834                     l2684:
  9246                           
  9247                           ; BSR set to: 0
  9248                           
  9249                           ; BSR set to: 0
  9250  013834  0E1F               	movlw	31
  9251  013836  0100               	movlb	0	; () banked
  9252  013838  65F8               	cpfsgt	___fltol@exp1& (0+255),b
  9253  01383A  D012               	goto	l2690
  9254                           
  9255                           ; BSR set to: 0
  9256  01383C  0E00               	movlw	0
  9257  01383E  0100               	movlb	0	; () banked
  9258  013840  6FF3               	movwf	?___fltol& (0+255),b
  9259  013842  0E00               	movlw	0
  9260  013844  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9261  013846  0E00               	movlw	0
  9262  013848  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9263  01384A  0E00               	movlw	0
  9264  01384C  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9265                           
  9266                           ; BSR set to: 0
  9267  01384E  0012               	return	
  9268  013850                     
  9269                           ; BSR set to: 0
  9270                           
  9271                           ; BSR set to: 0
  9272  013850  0100               	movlb	0	; () banked
  9273  013852  90D8               	bcf	status,0,c
  9274  013854  37F3               	rlcf	___fltol@f1& (0+255),f,b
  9275  013856  37F4               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9276  013858  37F5               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9277  01385A  37F6               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9278  01385C  0100               	movlb	0	; () banked
  9279  01385E  07F8               	decf	___fltol@exp1& (0+255),f,b
  9280  013860                     l2690:
  9281                           
  9282                           ; BSR set to: 0
  9283                           
  9284                           ; BSR set to: 0
  9285  013860  0100               	movlb	0	; () banked
  9286  013862  51F8               	movf	___fltol@exp1& (0+255),w,b
  9287  013864  0100               	movlb	0	; () banked
  9288  013866  A4D8               	btfss	status,2,c
  9289  013868  D7F3               	goto	l2691
  9290  01386A                     u11190:
  9291                           
  9292                           ; BSR set to: 0
  9293                           
  9294                           ; BSR set to: 0
  9295                           
  9296                           ; BSR set to: 0
  9297  01386A  0100               	movlb	0	; () banked
  9298  01386C  51F7               	movf	___fltol@sign1& (0+255),w,b
  9299  01386E  0100               	movlb	0	; () banked
  9300  013870  B4D8               	btfsc	status,2,c
  9301  013872  D009               	goto	l2693
  9302                           
  9303                           ; BSR set to: 0
  9304  013874  0100               	movlb	0	; () banked
  9305  013876  1FF6               	comf	(___fltol@f1+3)& (0+255),f,b
  9306  013878  1FF5               	comf	(___fltol@f1+2)& (0+255),f,b
  9307  01387A  1FF4               	comf	(___fltol@f1+1)& (0+255),f,b
  9308  01387C  6DF3               	negf	___fltol@f1& (0+255),b
  9309  01387E  0E00               	movlw	0
  9310  013880  23F4               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9311  013882  23F5               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9312  013884  23F6               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9313  013886                     l2693:
  9314                           
  9315                           ; BSR set to: 0
  9316                           
  9317                           ; BSR set to: 0
  9318  013886  C0F3  F0F3         	movff	___fltol@f1,?___fltol
  9319  01388A  C0F4  F0F4         	movff	___fltol@f1+1,?___fltol+1
  9320  01388E  C0F5  F0F5         	movff	___fltol@f1+2,?___fltol+2
  9321  013892  C0F6  F0F6         	movff	___fltol@f1+3,?___fltol+3
  9322  013896  0012               	return	
  9323  013898                     __end_of___fltol:
  9324                           	opt stack 0
  9325                           tblptru	equ	0xFF8
  9326                           tblptrh	equ	0xFF7
  9327                           tblptrl	equ	0xFF6
  9328                           tablat	equ	0xFF5
  9329                           prodh	equ	0xFF4
  9330                           prodl	equ	0xFF3
  9331                           postinc0	equ	0xFEE
  9332                           wreg	equ	0xFE8
  9333                           postdec1	equ	0xFE5
  9334                           fsr1h	equ	0xFE2
  9335                           fsr1l	equ	0xFE1
  9336                           indf2	equ	0xFDF
  9337                           postinc2	equ	0xFDE
  9338                           postdec2	equ	0xFDD
  9339                           fsr2h	equ	0xFDA
  9340                           fsr2l	equ	0xFD9
  9341                           status	equ	0xFD8
  9342                           
  9343 ;; *************** function _Motor_Speed *****************
  9344 ;; Defined at:
  9345 ;;		line 117 in file "Library/Motor.c"
  9346 ;; Parameters:    Size  Location     Type
  9347 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  9348 ;;		 -> Stepper(6), 
  9349 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;		None
  9352 ;; Return value:  Size  Location     Type
  9353 ;;                  1    wreg      unsigned char 
  9354 ;; Registers used:
  9355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9361 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;Total ram usage:        4 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    9
  9368 ;; This function calls:
  9369 ;;		_Timer0_Init
  9370 ;; This function is called by:
  9371 ;;		_findClosestWall
  9372 ;;		_mode1
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376                           	psect	text34
  9377  01632E                     __ptext34:
  9378                           	opt stack 0
  9379  01632E                     _Motor_Speed:
  9380                           	opt stack 19
  9381                           
  9382                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  9383                           
  9384                           ; BSR set to: 0
  9385                           ;incstack = 0
  9386  01632E  0100               	movlb	0	; () banked
  9387  016330  EE20 F002          	lfsr	2,2
  9388  016334  51D5               	movf	Motor_Speed@pMotor& (0+255),w,b
  9389  016336  26D9               	addwf	fsr2l,f,c
  9390  016338  51D6               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  9391  01633A  22DA               	addwfc	fsr2h,f,c
  9392  01633C  C0D7  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  9393  016340  C0D8  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  9394                           
  9395                           ; BSR set to: 0
  9396                           ;Motor.c: 120: Timer0_Init(pFrequency);
  9397  016344  C0D7  F0C7         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  9398  016348  C0D8  F0C8         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  9399  01634C  0100               	movlb	0	; () banked
  9400  01634E  6BC9               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9401  016350  6BCA               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9402  016352  ECC7  F098         	call	_Timer0_Init	;wreg free
  9403  016356  0012               	return	
  9404  016358                     __end_of_Motor_Speed:
  9405                           	opt stack 0
  9406                           tblptru	equ	0xFF8
  9407                           tblptrh	equ	0xFF7
  9408                           tblptrl	equ	0xFF6
  9409                           tablat	equ	0xFF5
  9410                           prodh	equ	0xFF4
  9411                           prodl	equ	0xFF3
  9412                           postinc0	equ	0xFEE
  9413                           wreg	equ	0xFE8
  9414                           postdec1	equ	0xFE5
  9415                           fsr1h	equ	0xFE2
  9416                           fsr1l	equ	0xFE1
  9417                           indf2	equ	0xFDF
  9418                           postinc2	equ	0xFDE
  9419                           postdec2	equ	0xFDD
  9420                           fsr2h	equ	0xFDA
  9421                           fsr2l	equ	0xFD9
  9422                           status	equ	0xFD8
  9423                           
  9424 ;; *************** function _Motor_Move *****************
  9425 ;; Defined at:
  9426 ;;		line 51 in file "Library/Motor.c"
  9427 ;; Parameters:    Size  Location     Type
  9428 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9429 ;;		 -> Stepper(6), 
  9430 ;;  pDelta          2    5[BANK0 ] short 
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;		None
  9433 ;; Return value:  Size  Location     Type
  9434 ;;                  1    wreg      unsigned char 
  9435 ;; Registers used:
  9436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9442 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9444 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9445 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9446 ;;Total ram usage:        6 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    8
  9449 ;; This function calls:
  9450 ;;		_Timer0_Start
  9451 ;; This function is called by:
  9452 ;;		_findClosestWall
  9453 ;;		_mode1
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           	psect	text35
  9458  016136                     __ptext35:
  9459                           	opt stack 0
  9460  016136                     _Motor_Move:
  9461                           	opt stack 20
  9462                           
  9463                           ;Motor.c: 54: lMotor = pMotor;
  9464                           
  9465                           ;incstack = 0
  9466  016136  C0BD  F07F         	movff	Motor_Move@pMotor,_lMotor
  9467  01613A  C0BE  F080         	movff	Motor_Move@pMotor+1,_lMotor+1
  9468                           
  9469                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9470  01613E  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9471  016142  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9472  016146  50DE               	movf	postinc2,w,c
  9473  016148  10DE               	iorwf	postinc2,w,c
  9474  01614A  A4D8               	btfss	status,2,c
  9475  01614C  0012               	return	
  9476                           
  9477                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9478                           
  9479                           ;Motor.c: 59: return 0;
  9480                           ;	Return value of _Motor_Move is never used
  9481  01614E  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9482  016152  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9483  016156  C0BF  FFDE         	movff	Motor_Move@pDelta,postinc2
  9484  01615A  C0C0  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9485                           
  9486                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9487  01615E  C066  F0BA         	movff	_lStepFunction,Timer0_Start@pFunction
  9488  016162  C067  F0BB         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9489  016166  C068  F0BC         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9490  01616A  ECD5  F0B1         	call	_Timer0_Start	;wreg free
  9491  01616E  0012               	return	
  9492  016170                     __end_of_Motor_Move:
  9493                           	opt stack 0
  9494                           tblptru	equ	0xFF8
  9495                           tblptrh	equ	0xFF7
  9496                           tblptrl	equ	0xFF6
  9497                           tablat	equ	0xFF5
  9498                           prodh	equ	0xFF4
  9499                           prodl	equ	0xFF3
  9500                           postinc0	equ	0xFEE
  9501                           wreg	equ	0xFE8
  9502                           postdec1	equ	0xFE5
  9503                           fsr1h	equ	0xFE2
  9504                           fsr1l	equ	0xFE1
  9505                           indf2	equ	0xFDF
  9506                           postinc2	equ	0xFDE
  9507                           postdec2	equ	0xFDD
  9508                           fsr2h	equ	0xFDA
  9509                           fsr2l	equ	0xFD9
  9510                           status	equ	0xFD8
  9511                           
  9512 ;; *************** function _Timer0_Start *****************
  9513 ;; Defined at:
  9514 ;;		line 75 in file "Library/Timer0.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9517 ;;		 -> Absolute function(1), Motor_Step(1), 
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;		None
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      void 
  9522 ;; Registers used:
  9523 ;;		wreg, status,2, status,0
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9529 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;Total ram usage:        3 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    7
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_Motor_Move
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           	psect	text36
  9544  0163AA                     __ptext36:
  9545                           	opt stack 0
  9546  0163AA                     _Timer0_Start:
  9547                           	opt stack 20
  9548                           
  9549                           ;Timer0.c: 77: gISR = pFunction;
  9550                           
  9551                           ;incstack = 0
  9552  0163AA  C0BA  F060         	movff	Timer0_Start@pFunction,_gISR
  9553  0163AE  C0BB  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
  9554  0163B2  C0BC  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
  9555                           
  9556                           ;Timer0.c: 78: TMR0 = COUNTER;
  9557  0163B6  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9558  0163BA  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9559                           
  9560                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9561  0163BE  50D5               	movf	4053,w,c	;volatile
  9562  0163C0  0100               	movlb	0	; () banked
  9563  0163C2  198D               	xorwf	_INDEX& (0+255),w,b
  9564  0163C4  0BF8               	andlw	-8
  9565  0163C6  198D               	xorwf	_INDEX& (0+255),w,b
  9566  0163C8  6ED5               	movwf	4053,c	;volatile
  9567                           
  9568                           ; BSR set to: 0
  9569                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9570  0163CA  94F2               	bcf	intcon,2,c	;volatile
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9574  0163CC  8AF2               	bsf	intcon,5,c	;volatile
  9575                           
  9576                           ; BSR set to: 0
  9577  0163CE  0012               	return		;funcret
  9578  0163D0                     __end_of_Timer0_Start:
  9579                           	opt stack 0
  9580                           tblptru	equ	0xFF8
  9581                           tblptrh	equ	0xFF7
  9582                           tblptrl	equ	0xFF6
  9583                           tablat	equ	0xFF5
  9584                           prodh	equ	0xFF4
  9585                           prodl	equ	0xFF3
  9586                           intcon	equ	0xFF2
  9587                           postinc0	equ	0xFEE
  9588                           wreg	equ	0xFE8
  9589                           postdec1	equ	0xFE5
  9590                           fsr1h	equ	0xFE2
  9591                           fsr1l	equ	0xFE1
  9592                           indf2	equ	0xFDF
  9593                           postinc2	equ	0xFDE
  9594                           postdec2	equ	0xFDD
  9595                           fsr2h	equ	0xFDA
  9596                           fsr2l	equ	0xFD9
  9597                           status	equ	0xFD8
  9598                           
  9599 ;; *************** function _HMI_Render *****************
  9600 ;; Defined at:
  9601 ;;		line 138 in file "HMI.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;  a               2    8[BANK0 ] unsigned short 
  9606 ;; Return value:  Size  Location     Type
  9607 ;;                  1    wreg      void 
  9608 ;; Registers used:
  9609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9616 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9618 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;Total ram usage:        2 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; Hardware stack levels required when called:    9
  9622 ;; This function calls:
  9623 ;;		_OutSeg
  9624 ;; This function is called by:
  9625 ;;		_findClosestWall
  9626 ;;		_mode1
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           	psect	text37
  9631  015FC8                     __ptext37:
  9632                           	opt stack 0
  9633  015FC8                     _HMI_Render:
  9634                           	opt stack 19
  9635                           
  9636                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;incstack = 0
  9640  015FC8  0E00               	movlw	0
  9641  015FCA  0100               	movlb	0	; () banked
  9642  015FCC  6FC3               	movwf	(HMI_Render@a+1)& (0+255),b
  9643  015FCE  0E00               	movlw	0
  9644  015FD0  6FC2               	movwf	HMI_Render@a& (0+255),b
  9645  015FD2                     l14098:
  9646                           
  9647                           ; BSR set to: 0
  9648  015FD2  0100               	movlb	0	; () banked
  9649  015FD4  51C3               	movf	(HMI_Render@a+1)& (0+255),w,b
  9650  015FD6  E116               	bnz	l1158
  9651  015FD8  0E08               	movlw	8
  9652  015FDA  0100               	movlb	0	; () banked
  9653  015FDC  5DC2               	subwf	HMI_Render@a& (0+255),w,b
  9654  015FDE  B0D8               	btfsc	status,0,c
  9655  015FE0  0012               	return	
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9659                           
  9660                           ; BSR set to: 0
  9661                           
  9662                           ; BSR set to: 0
  9663  015FE2  C0C2  F0BD         	movff	HMI_Render@a,OutSeg@pSegment
  9664  015FE6  0E40               	movlw	low _HMIBoard
  9665  015FE8  0100               	movlb	0	; () banked
  9666  015FEA  25C2               	addwf	HMI_Render@a& (0+255),w,b
  9667  015FEC  6ED9               	movwf	fsr2l,c
  9668  015FEE  0E03               	movlw	high _HMIBoard
  9669  015FF0  0100               	movlb	0	; () banked
  9670  015FF2  21C3               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9671  015FF4  6EDA               	movwf	fsr2h,c
  9672  015FF6  50DF               	movf	indf2,w,c
  9673  015FF8  EC98  F0A8         	call	_OutSeg
  9674  015FFC  0100               	movlb	0	; () banked
  9675  015FFE  4BC2               	infsnz	HMI_Render@a& (0+255),f,b
  9676  016000  2BC3               	incf	(HMI_Render@a+1)& (0+255),f,b
  9677  016002  D7E7               	goto	l14098
  9678  016004                     l1158:
  9679                           
  9680                           ; BSR set to: 0
  9681  016004  0012               	return		;funcret
  9682  016006                     __end_of_HMI_Render:
  9683                           	opt stack 0
  9684                           tblptru	equ	0xFF8
  9685                           tblptrh	equ	0xFF7
  9686                           tblptrl	equ	0xFF6
  9687                           tablat	equ	0xFF5
  9688                           prodh	equ	0xFF4
  9689                           prodl	equ	0xFF3
  9690                           intcon	equ	0xFF2
  9691                           postinc0	equ	0xFEE
  9692                           wreg	equ	0xFE8
  9693                           postdec1	equ	0xFE5
  9694                           fsr1h	equ	0xFE2
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           postdec2	equ	0xFDD
  9699                           fsr2h	equ	0xFDA
  9700                           fsr2l	equ	0xFD9
  9701                           status	equ	0xFD8
  9702                           
  9703 ;; *************** function _OutSeg *****************
  9704 ;; Defined at:
  9705 ;;		line 54 in file "HMI.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;  pInput          1    wreg     unsigned char 
  9708 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;  pInput          1    6[BANK0 ] unsigned char 
  9711 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9712 ;; Return value:  Size  Location     Type
  9713 ;;                  1    wreg      void 
  9714 ;; Registers used:
  9715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9716 ;; Tracked objects:
  9717 ;;		On entry : 0/0
  9718 ;;		On exit  : 0/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9721 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9722 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9723 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;Total ram usage:        5 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:    8
  9728 ;; This function calls:
  9729 ;;		_SPI_Send
  9730 ;; This function is called by:
  9731 ;;		_HMI_Render
  9732 ;;		_HMI_GRender
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           	psect	text38
  9737  015130                     __ptext38:
  9738                           	opt stack 0
  9739  015130                     _OutSeg:
  9740                           	opt stack 19
  9741                           
  9742                           ; BSR set to: 0
  9743                           ;incstack = 0
  9744                           ;OutSeg@pInput stored from wreg
  9745  015130  0100               	movlb	0	; () banked
  9746  015132  6FC0               	movwf	OutSeg@pInput& (0+255),b
  9747                           
  9748                           ;HMI.c: 58: static UINT8 cur;
  9749                           ;HMI.c: 59: volatile UINT8 out;
  9750                           ;HMI.c: 60: static UINT8 segset;
  9751                           ;HMI.c: 61: static UINT8 a;
  9752                           ;HMI.c: 83: if (pSegment <= 8)
  9753  015134  0E09               	movlw	9
  9754  015136  0100               	movlb	0	; () banked
  9755  015138  61BD               	cpfslt	OutSeg@pSegment& (0+255),b
  9756  01513A  0012               	return	
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;HMI.c: 84: {
  9760                           ;HMI.c: 85: cur = pInput;
  9761  01513C  C0C0  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9762                           
  9763                           ; BSR set to: 0
  9764                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9765  015140  0E00               	movlw	0
  9766  015142  6E3D               	movwf	OutSeg@a,c
  9767  015144                     l13488:
  9768                           
  9769                           ; BSR set to: 0
  9770  015144  0E07               	movlw	7
  9771  015146  643D               	cpfsgt	OutSeg@a,c
  9772  015148  D001               	goto	l1146
  9773  01514A  D027               	goto	u10000
  9774  01514C                     l1146:
  9775                           
  9776                           ;HMI.c: 87: {
  9777                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9778                           
  9779                           ; BSR set to: 0
  9780  01514C  C03F  F0BE         	movff	OutSeg@cur,??_OutSeg
  9781  015150  0E01               	movlw	1
  9782  015152  0100               	movlb	0	; () banked
  9783  015154  17BE               	andwf	??_OutSeg& (0+255),f,b
  9784  015156  0E06               	movlw	6
  9785  015158  0100               	movlb	0	; () banked
  9786  01515A  6FBF               	movwf	(??_OutSeg+1)& (0+255),b
  9787  01515C                     u9995:
  9788  01515C  0100               	movlb	0	; () banked
  9789  01515E  90D8               	bcf	status,0,c
  9790  015160  37BE               	rlcf	??_OutSeg& (0+255),f,b
  9791  015162  0100               	movlb	0	; () banked
  9792  015164  2FBF               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9793  015166  D7FA               	goto	u9995
  9794  015168  0100               	movlb	0	; () banked
  9795  01516A  51BE               	movf	??_OutSeg& (0+255),w,b
  9796  01516C  6E3E               	movwf	OutSeg@segset,c
  9797                           
  9798                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9799  01516E  0100               	movlb	0	; () banked
  9800  015170  39BD               	swapf	OutSeg@pSegment& (0+255),w,b
  9801  015172  42E8               	rrncf	wreg,f,c
  9802  015174  0BF8               	andlw	248
  9803  015176  103D               	iorwf	OutSeg@a,w,c
  9804  015178  103E               	iorwf	OutSeg@segset,w,c
  9805  01517A  0100               	movlb	0	; () banked
  9806  01517C  6FC1               	movwf	OutSeg@out& (0+255),b	;volatile
  9807                           
  9808                           ;HMI.c: 90: cur >>= 1;
  9809  01517E  90D8               	bcf	status,0,c
  9810  015180  323F               	rrcf	OutSeg@cur,f,c
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9814  015182  0E7A               	movlw	low _SPI1
  9815  015184  0100               	movlb	0	; () banked
  9816  015186  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9817  015188  0E03               	movlw	high _SPI1
  9818  01518A  0100               	movlb	0	; () banked
  9819  01518C  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9820  01518E  C0C1  F0BC         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9821  015192  ECEB  F0AA         	call	_SPI_Send	;wreg free
  9822  015196  2A3D               	incf	OutSeg@a,f,c
  9823  015198  D7D5               	goto	l13488
  9824  01519A                     u10000:
  9825                           
  9826                           ;HMI.c: 96: }
  9827                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9828  01519A  0E7A               	movlw	low _SPI1
  9829  01519C  0100               	movlb	0	; () banked
  9830  01519E  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9831  0151A0  0E03               	movlw	high _SPI1
  9832  0151A2  0100               	movlb	0	; () banked
  9833  0151A4  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9834  0151A6  0E00               	movlw	0
  9835  0151A8  0100               	movlb	0	; () banked
  9836  0151AA  6FBC               	movwf	SPI_Send@pData& (0+255),b
  9837  0151AC  ECEB  F0AA         	call	_SPI_Send	;wreg free
  9838  0151B0  0012               	return	
  9839  0151B2                     __end_of_OutSeg:
  9840                           	opt stack 0
  9841                           tblptru	equ	0xFF8
  9842                           tblptrh	equ	0xFF7
  9843                           tblptrl	equ	0xFF6
  9844                           tablat	equ	0xFF5
  9845                           prodh	equ	0xFF4
  9846                           prodl	equ	0xFF3
  9847                           intcon	equ	0xFF2
  9848                           postinc0	equ	0xFEE
  9849                           wreg	equ	0xFE8
  9850                           postdec1	equ	0xFE5
  9851                           fsr1h	equ	0xFE2
  9852                           fsr1l	equ	0xFE1
  9853                           indf2	equ	0xFDF
  9854                           postinc2	equ	0xFDE
  9855                           postdec2	equ	0xFDD
  9856                           fsr2h	equ	0xFDA
  9857                           fsr2l	equ	0xFD9
  9858                           status	equ	0xFD8
  9859                           
  9860 ;; *************** function _Console_Render *****************
  9861 ;; Defined at:
  9862 ;;		line 377 in file "Library/Console.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;		None
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;  lCursor         4   38[BANK0 ] struct Point
  9867 ;;  y               1   43[BANK0 ] unsigned char 
  9868 ;;  x               1   42[BANK0 ] unsigned char 
  9869 ;;  temp            1   37[BANK0 ] unsigned char 
  9870 ;;  Temp            2    0        unsigned short 
  9871 ;; Return value:  Size  Location     Type
  9872 ;;                  1    wreg      void 
  9873 ;; Registers used:
  9874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9875 ;; Tracked objects:
  9876 ;;		On entry : 0/0
  9877 ;;		On exit  : 0/0
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9881 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;Total ram usage:        9 bytes
  9885 ;; Hardware stack levels used:    1
  9886 ;; Hardware stack levels required when called:   11
  9887 ;; This function calls:
  9888 ;;		_Console_MakeField
  9889 ;;		_LCD_DrawField
  9890 ;;		_LCD_FillRectangle
  9891 ;; This function is called by:
  9892 ;;		_findClosestWall
  9893 ;;		_mode1
  9894 ;;		_mode2
  9895 ;;		_mode4
  9896 ;;		_main
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900                           	psect	text39
  9901  011F26                     __ptext39:
  9902                           	opt stack 0
  9903  011F26                     _Console_Render:
  9904                           	opt stack 17
  9905                           
  9906                           ;Console.c: 379: Colour Temp;
  9907                           ;Console.c: 380: if (change)
  9908                           
  9909                           ;incstack = 0
  9910  011F26  0100               	movlb	0	; () banked
  9911  011F28  51FF               	movf	_change& (0+255),w,b
  9912  011F2A  B4D8               	btfsc	status,2,c
  9913  011F2C  0012               	return	
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;Console.c: 381: {
  9917                           ;Console.c: 382: UINT8 x, y, temp;
  9918                           ;Console.c: 383: Point lCursor = {6,6};
  9919  011F2E  C3EA  F0E0         	movff	Console_Render@F6956,Console_Render@lCursor
  9920  011F32  C3EB  F0E1         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9921  011F36  C3EC  F0E2         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9922  011F3A  C3ED  F0E3         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;Console.c: 385: if (clearall)
  9926  011F3E  0100               	movlb	0	; () banked
  9927  011F40  5190               	movf	_clearall& (0+255),w,b
  9928  011F42  B4D8               	btfsc	status,2,c
  9929  011F44  D005               	goto	l1056
  9930                           
  9931                           ; BSR set to: 0
  9932                           ;Console.c: 386: {
  9933                           ;Console.c: 389: temp = lBufferY;
  9934  011F46  C08E  F0DF         	movff	_lBufferY,Console_Render@temp
  9935                           
  9936                           ; BSR set to: 0
  9937                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9938  011F4A  0E0F               	movlw	15
  9939  011F4C  0100               	movlb	0	; () banked
  9940  011F4E  6F8E               	movwf	_lBufferY& (0+255),b
  9941  011F50                     l1056:
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;Console.c: 391: }
  9945                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9946  011F50  0E00               	movlw	0
  9947  011F52  0100               	movlb	0	; () banked
  9948  011F54  6FE5               	movwf	Console_Render@y& (0+255),b
  9949  011F56  D0DF               	goto	l1057
  9950  011F58                     
  9951                           ; BSR set to: 0
  9952                           ;Console.c: 394: {
  9953                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9954                           
  9955                           ; BSR set to: 0
  9956  011F58  0100               	movlb	0	; () banked
  9957  011F5A  51E5               	movf	Console_Render@y& (0+255),w,b
  9958  011F5C  0D02               	mullw	2
  9959  011F5E  0E00               	movlw	low _lCBuffer
  9960  011F60  24F3               	addwf	prodl,w,c
  9961  011F62  6ED9               	movwf	fsr2l,c
  9962  011F64  0E03               	movlw	high _lCBuffer
  9963  011F66  20F4               	addwfc	prodh,w,c
  9964  011F68  6EDA               	movwf	fsr2h,c
  9965  011F6A  CFDE F0FD          	movff	postinc2,_gForecolour
  9966  011F6E  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9967                           
  9968                           ; BSR set to: 0
  9969                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9970  011F72  0E00               	movlw	0
  9971  011F74  0100               	movlb	0	; () banked
  9972  011F76  6FE4               	movwf	Console_Render@x& (0+255),b
  9973  011F78                     l14062:
  9974                           
  9975                           ; BSR set to: 0
  9976  011F78  0E13               	movlw	19
  9977  011F7A  0100               	movlb	0	; () banked
  9978  011F7C  65E4               	cpfsgt	Console_Render@x& (0+255),b
  9979  011F7E  D001               	goto	l1059
  9980  011F80  D0BE               	goto	u10800
  9981  011F82                     l1059:
  9982                           
  9983                           ; BSR set to: 0
  9984                           ;Console.c: 397: {
  9985                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9986                           
  9987                           ; BSR set to: 0
  9988  011F82  0100               	movlb	0	; () banked
  9989  011F84  51E5               	movf	Console_Render@y& (0+255),w,b
  9990  011F86  0D14               	mullw	20
  9991  011F88  0EAA               	movlw	low _lBuffer
  9992  011F8A  0100               	movlb	0	; () banked
  9993  011F8C  6FDD               	movwf	??_Console_Render& (0+255),b
  9994  011F8E  0E04               	movlw	high _lBuffer
  9995  011F90  0100               	movlb	0	; () banked
  9996  011F92  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9997  011F94  50F3               	movf	prodl,w,c
  9998  011F96  0100               	movlb	0	; () banked
  9999  011F98  27DD               	addwf	??_Console_Render& (0+255),f,b
 10000  011F9A  50F4               	movf	prodh,w,c
 10001  011F9C  0100               	movlb	0	; () banked
 10002  011F9E  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10003  011FA0  0100               	movlb	0	; () banked
 10004  011FA2  51E4               	movf	Console_Render@x& (0+255),w,b
 10005  011FA4  0D01               	mullw	1
 10006  011FA6  50F3               	movf	prodl,w,c
 10007  011FA8  0100               	movlb	0	; () banked
 10008  011FAA  25DD               	addwf	??_Console_Render& (0+255),w,b
 10009  011FAC  6ED9               	movwf	fsr2l,c
 10010  011FAE  50F4               	movf	prodh,w,c
 10011  011FB0  0100               	movlb	0	; () banked
 10012  011FB2  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10013  011FB4  6EDA               	movwf	fsr2h,c
 10014  011FB6  AEDF               	btfss	indf2,7,c
 10015  011FB8  D09A               	goto	l1063
 10016                           
 10017                           ; BSR set to: 0
 10018                           ;Console.c: 399: {
 10019                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 10020  011FBA  0100               	movlb	0	; () banked
 10021  011FBC  51E5               	movf	Console_Render@y& (0+255),w,b
 10022  011FBE  0D14               	mullw	20
 10023  011FC0  0EAA               	movlw	low _lBuffer
 10024  011FC2  0100               	movlb	0	; () banked
 10025  011FC4  6FDD               	movwf	??_Console_Render& (0+255),b
 10026  011FC6  0E04               	movlw	high _lBuffer
 10027  011FC8  0100               	movlb	0	; () banked
 10028  011FCA  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10029  011FCC  50F3               	movf	prodl,w,c
 10030  011FCE  0100               	movlb	0	; () banked
 10031  011FD0  27DD               	addwf	??_Console_Render& (0+255),f,b
 10032  011FD2  50F4               	movf	prodh,w,c
 10033  011FD4  0100               	movlb	0	; () banked
 10034  011FD6  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10035  011FD8  0100               	movlb	0	; () banked
 10036  011FDA  51E4               	movf	Console_Render@x& (0+255),w,b
 10037  011FDC  0D01               	mullw	1
 10038  011FDE  50F3               	movf	prodl,w,c
 10039  011FE0  0100               	movlb	0	; () banked
 10040  011FE2  25DD               	addwf	??_Console_Render& (0+255),w,b
 10041  011FE4  6ED9               	movwf	fsr2l,c
 10042  011FE6  50F4               	movf	prodh,w,c
 10043  011FE8  0100               	movlb	0	; () banked
 10044  011FEA  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10045  011FEC  6EDA               	movwf	fsr2h,c
 10046  011FEE  0E7F               	movlw	127
 10047  011FF0  16DF               	andwf	indf2,f,c
 10048                           
 10049                           ;Console.c: 401: if (lBuffer[y][x])
 10050  011FF2  0100               	movlb	0	; () banked
 10051  011FF4  51E5               	movf	Console_Render@y& (0+255),w,b
 10052  011FF6  0D14               	mullw	20
 10053  011FF8  0EAA               	movlw	low _lBuffer
 10054  011FFA  0100               	movlb	0	; () banked
 10055  011FFC  6FDD               	movwf	??_Console_Render& (0+255),b
 10056  011FFE  0E04               	movlw	high _lBuffer
 10057  012000  0100               	movlb	0	; () banked
 10058  012002  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10059  012004  50F3               	movf	prodl,w,c
 10060  012006  0100               	movlb	0	; () banked
 10061  012008  27DD               	addwf	??_Console_Render& (0+255),f,b
 10062  01200A  50F4               	movf	prodh,w,c
 10063  01200C  0100               	movlb	0	; () banked
 10064  01200E  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10065  012010  0100               	movlb	0	; () banked
 10066  012012  51E4               	movf	Console_Render@x& (0+255),w,b
 10067  012014  0D01               	mullw	1
 10068  012016  50F3               	movf	prodl,w,c
 10069  012018  0100               	movlb	0	; () banked
 10070  01201A  25DD               	addwf	??_Console_Render& (0+255),w,b
 10071  01201C  6ED9               	movwf	fsr2l,c
 10072  01201E  50F4               	movf	prodh,w,c
 10073  012020  0100               	movlb	0	; () banked
 10074  012022  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10075  012024  6EDA               	movwf	fsr2h,c
 10076  012026  50DF               	movf	indf2,w,c
 10077  012028  B4D8               	btfsc	status,2,c
 10078  01202A  D04A               	goto	l1062
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;Console.c: 402: {
 10082                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 10083  01202C  C083  F0C3         	movff	_gBackcolour,LCD_FillRectangle@pColour
 10084  012030  C084  F0C4         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 10085  012034  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10086  012038  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10087  01203C  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10088  012040  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10089  012044  C3F2  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 10090  012048  C3F3  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10091  01204C  C3F4  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10092  012050  C3F5  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10093  012054  ECCB  F0A9         	call	_LCD_FillRectangle	;wreg free
 10094                           
 10095                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 10096  012058  0100               	movlb	0	; () banked
 10097  01205A  51E5               	movf	Console_Render@y& (0+255),w,b
 10098  01205C  0D14               	mullw	20
 10099  01205E  0EAA               	movlw	low _lBuffer
 10100  012060  0100               	movlb	0	; () banked
 10101  012062  6FDD               	movwf	??_Console_Render& (0+255),b
 10102  012064  0E04               	movlw	high _lBuffer
 10103  012066  0100               	movlb	0	; () banked
 10104  012068  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10105  01206A  50F3               	movf	prodl,w,c
 10106  01206C  0100               	movlb	0	; () banked
 10107  01206E  27DD               	addwf	??_Console_Render& (0+255),f,b
 10108  012070  50F4               	movf	prodh,w,c
 10109  012072  0100               	movlb	0	; () banked
 10110  012074  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10111  012076  0100               	movlb	0	; () banked
 10112  012078  51E4               	movf	Console_Render@x& (0+255),w,b
 10113  01207A  0D01               	mullw	1
 10114  01207C  50F3               	movf	prodl,w,c
 10115  01207E  0100               	movlb	0	; () banked
 10116  012080  25DD               	addwf	??_Console_Render& (0+255),w,b
 10117  012082  6ED9               	movwf	fsr2l,c
 10118  012084  50F4               	movf	prodh,w,c
 10119  012086  0100               	movlb	0	; () banked
 10120  012088  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10121  01208A  6EDA               	movwf	fsr2h,c
 10122  01208C  50DF               	movf	indf2,w,c
 10123  01208E  ECD4  F09F         	call	_Console_MakeField
 10124  012092  C0BF  F0CC         	movff	?_Console_MakeField,LCD_DrawField@pField
 10125  012096  C0C0  F0CD         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 10126  01209A  C0E0  F0CE         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 10127  01209E  C0E1  F0CF         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 10128  0120A2  C0E2  F0D0         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 10129  0120A6  C0E3  F0D1         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 10130  0120AA  C3F2  F0D2         	movff	_gCharSize,LCD_DrawField@pSize
 10131  0120AE  C3F3  F0D3         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 10132  0120B2  C3F4  F0D4         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 10133  0120B6  C3F5  F0D5         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 10134  0120BA  EC79  F0A5         	call	_LCD_DrawField	;wreg free
 10135                           
 10136                           ;Console.c: 405: }
 10137  0120BE  D017               	goto	l1063
 10138  0120C0                     l1062:
 10139                           
 10140                           ;Console.c: 406: else
 10141                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10142  0120C0  0E00               	movlw	0
 10143  0120C2  0100               	movlb	0	; () banked
 10144  0120C4  6FC4               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10145  0120C6  0E00               	movlw	0
 10146  0120C8  6FC3               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10147  0120CA  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10148  0120CE  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10149  0120D2  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10150  0120D6  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10151  0120DA  C3F2  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 10152  0120DE  C3F3  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10153  0120E2  C3F4  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10154  0120E6  C3F5  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10155  0120EA  ECCB  F0A9         	call	_LCD_FillRectangle	;wreg free
 10156  0120EE                     l1063:
 10157                           
 10158                           ;Console.c: 408: }
 10159                           ;Console.c: 409: lCursor.x += (5 + 1);
 10160  0120EE  0E06               	movlw	6
 10161  0120F0  0100               	movlb	0	; () banked
 10162  0120F2  27E0               	addwf	Console_Render@lCursor& (0+255),f,b
 10163  0120F4  0E00               	movlw	0
 10164  0120F6  23E1               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10165                           
 10166                           ; BSR set to: 0
 10167  0120F8  0100               	movlb	0	; () banked
 10168  0120FA  2BE4               	incf	Console_Render@x& (0+255),f,b
 10169  0120FC  D73D               	goto	l14062
 10170  0120FE                     u10800:
 10171                           
 10172                           ; BSR set to: 0
 10173                           ;Console.c: 410: }
 10174                           ;Console.c: 411: lCursor.y += (7 + 1);
 10175                           
 10176                           ; BSR set to: 0
 10177  0120FE  0E08               	movlw	8
 10178  012100  0100               	movlb	0	; () banked
 10179  012102  27E2               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10180  012104  0E00               	movlw	0
 10181  012106  23E3               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10182                           
 10183                           ; BSR set to: 0
 10184                           ;Console.c: 412: lCursor.x = 6;
 10185  012108  0E00               	movlw	0
 10186  01210A  0100               	movlb	0	; () banked
 10187  01210C  6FE1               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10188  01210E  0E06               	movlw	6
 10189  012110  6FE0               	movwf	Console_Render@lCursor& (0+255),b
 10190                           
 10191                           ; BSR set to: 0
 10192  012112  0100               	movlb	0	; () banked
 10193  012114  2BE5               	incf	Console_Render@y& (0+255),f,b
 10194  012116                     l1057:
 10195                           
 10196                           ; BSR set to: 0
 10197                           
 10198                           ; BSR set to: 0
 10199  012116  0100               	movlb	0	; () banked
 10200  012118  51E5               	movf	Console_Render@y& (0+255),w,b
 10201  01211A  0100               	movlb	0	; () banked
 10202  01211C  5D8E               	subwf	_lBufferY& (0+255),w,b
 10203  01211E  B0D8               	btfsc	status,0,c
 10204  012120  D71B               	goto	l1058
 10205                           
 10206                           ; BSR set to: 0
 10207                           ;Console.c: 413: }
 10208                           ;Console.c: 415: if (clearall)
 10209                           
 10210                           ; BSR set to: 0
 10211  012122  0100               	movlb	0	; () banked
 10212  012124  5190               	movf	_clearall& (0+255),w,b
 10213  012126  B4D8               	btfsc	status,2,c
 10214  012128  0012               	return	
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;Console.c: 416: {
 10218                           ;Console.c: 417: clearall = 0;
 10219  01212A  0E00               	movlw	0
 10220  01212C  0100               	movlb	0	; () banked
 10221  01212E  6F90               	movwf	_clearall& (0+255),b
 10222                           
 10223                           ; BSR set to: 0
 10224                           ;Console.c: 418: lBufferY = temp;
 10225  012130  C0DF  F08E         	movff	Console_Render@temp,_lBufferY
 10226                           
 10227                           ; BSR set to: 0
 10228  012134  0012               	return	
 10229  012136                     __end_of_Console_Render:
 10230                           	opt stack 0
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           prodh	equ	0xFF4
 10236                           prodl	equ	0xFF3
 10237                           intcon	equ	0xFF2
 10238                           postinc0	equ	0xFEE
 10239                           wreg	equ	0xFE8
 10240                           postdec1	equ	0xFE5
 10241                           fsr1h	equ	0xFE2
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           fsr2h	equ	0xFDA
 10247                           fsr2l	equ	0xFD9
 10248                           status	equ	0xFD8
 10249                           
 10250 ;; *************** function _LCD_FillRectangle *****************
 10251 ;; Defined at:
 10252 ;;		line 318 in file "Library/LCD.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;  pColour         2    9[BANK0 ] unsigned short 
 10255 ;;  pPoint          4   11[BANK0 ] struct Point
 10256 ;;  pSize           4   15[BANK0 ] struct Point
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;  j               1   22[BANK0 ] unsigned char 
 10259 ;;  i               1   21[BANK0 ] unsigned char 
 10260 ;; Return value:  Size  Location     Type
 10261 ;;                  1    wreg      void 
 10262 ;; Registers used:
 10263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10269 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10273 ;;Total ram usage:       14 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:   10
 10276 ;; This function calls:
 10277 ;;		_LCD_Word_Write
 10278 ;;		_Set_Addr_Window
 10279 ;; This function is called by:
 10280 ;;		_Console_Render
 10281 ;;		_Console_ClearLine
 10282 ;; This function uses a non-reentrant model
 10283 ;;
 10284                           
 10285                           	psect	text40
 10286  015396                     __ptext40:
 10287                           	opt stack 0
 10288  015396                     _LCD_FillRectangle:
 10289                           	opt stack 17
 10290                           
 10291                           ;LCD.c: 320: UINT8 i = 0x00;
 10292                           
 10293                           ; BSR set to: 0
 10294                           ;incstack = 0
 10295  015396  0E00               	movlw	0
 10296  015398  0100               	movlb	0	; () banked
 10297  01539A  6FCF               	movwf	LCD_FillRectangle@i& (0+255),b
 10298                           
 10299                           ;LCD.c: 321: UINT8 j = 0x00;
 10300  01539C  0E00               	movlw	0
 10301  01539E  0100               	movlb	0	; () banked
 10302  0153A0  6FD0               	movwf	LCD_FillRectangle@j& (0+255),b
 10303                           
 10304                           ; BSR set to: 0
 10305                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10306  0153A2  C0C7  F0BF         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10307  0153A6  0100               	movlb	0	; () banked
 10308  0153A8  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10309  0153AA  0100               	movlb	0	; () banked
 10310  0153AC  25C9               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10311  0153AE  0100               	movlb	0	; () banked
 10312  0153B0  6FCD               	movwf	??_LCD_FillRectangle& (0+255),b
 10313  0153B2  0100               	movlb	0	; () banked
 10314  0153B4  05CD               	decf	??_LCD_FillRectangle& (0+255),w,b
 10315  0153B6  0100               	movlb	0	; () banked
 10316  0153B8  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10317  0153BA  0100               	movlb	0	; () banked
 10318  0153BC  51C7               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10319  0153BE  0100               	movlb	0	; () banked
 10320  0153C0  25CB               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10321  0153C2  0100               	movlb	0	; () banked
 10322  0153C4  6FCE               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10323  0153C6  0100               	movlb	0	; () banked
 10324  0153C8  05CE               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10325  0153CA  0100               	movlb	0	; () banked
 10326  0153CC  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10327  0153CE  0100               	movlb	0	; () banked
 10328  0153D0  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10329  0153D2  EC83  F0A3         	call	_Set_Addr_Window
 10330                           
 10331                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10332  0153D6  C0CB  F0D0         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10333  0153DA                     l13224:
 10334  0153DA  0100               	movlb	0	; () banked
 10335  0153DC  51D0               	movf	LCD_FillRectangle@j& (0+255),w,b
 10336  0153DE  0100               	movlb	0	; () banked
 10337  0153E0  B4D8               	btfsc	status,2,c
 10338  0153E2  0012               	return	
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10342                           
 10343                           ; BSR set to: 0
 10344  0153E4  C0C9  F0CF         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10345  0153E8                     l13228:
 10346                           
 10347                           ; BSR set to: 0
 10348  0153E8  0100               	movlb	0	; () banked
 10349  0153EA  51CF               	movf	LCD_FillRectangle@i& (0+255),w,b
 10350  0153EC  0100               	movlb	0	; () banked
 10351  0153EE  B4D8               	btfsc	status,2,c
 10352  0153F0  D009               	goto	u9770
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10356                           
 10357                           ; BSR set to: 0
 10358                           
 10359                           ; BSR set to: 0
 10360  0153F2  C0C3  F0BF         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10361  0153F6  C0C4  F0C0         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10362  0153FA  EC49  F0B2         	call	_LCD_Word_Write	;wreg free
 10363  0153FE  0100               	movlb	0	; () banked
 10364  015400  07CF               	decf	LCD_FillRectangle@i& (0+255),f,b
 10365  015402  D7F2               	goto	l13228
 10366  015404                     u9770:
 10367                           
 10368                           ; BSR set to: 0
 10369                           
 10370                           ; BSR set to: 0
 10371  015404  0100               	movlb	0	; () banked
 10372  015406  07D0               	decf	LCD_FillRectangle@j& (0+255),f,b
 10373  015408  D7E8               	goto	l13224
 10374  01540A                     __end_of_LCD_FillRectangle:
 10375                           	opt stack 0
 10376                           tblptru	equ	0xFF8
 10377                           tblptrh	equ	0xFF7
 10378                           tblptrl	equ	0xFF6
 10379                           tablat	equ	0xFF5
 10380                           prodh	equ	0xFF4
 10381                           prodl	equ	0xFF3
 10382                           intcon	equ	0xFF2
 10383                           postinc0	equ	0xFEE
 10384                           wreg	equ	0xFE8
 10385                           postdec1	equ	0xFE5
 10386                           fsr1h	equ	0xFE2
 10387                           fsr1l	equ	0xFE1
 10388                           indf2	equ	0xFDF
 10389                           postinc2	equ	0xFDE
 10390                           postdec2	equ	0xFDD
 10391                           fsr2h	equ	0xFDA
 10392                           fsr2l	equ	0xFD9
 10393                           status	equ	0xFD8
 10394                           
 10395 ;; *************** function _LCD_DrawField *****************
 10396 ;; Defined at:
 10397 ;;		line 393 in file "Library/LCD.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10400 ;;		 -> Console_MakeField@Fill(70), 
 10401 ;;  pPoint          4   20[BANK0 ] struct Point
 10402 ;;  pSize           4   24[BANK0 ] struct Point
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;  count           2   30[BANK0 ] unsigned short 
 10405 ;;  i               1   34[BANK0 ] unsigned char 
 10406 ;;  ymax            1   33[BANK0 ] unsigned char 
 10407 ;;  xmax            1   32[BANK0 ] unsigned char 
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  1    wreg      void 
 10410 ;; Registers used:
 10411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10417 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10418 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10420 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10421 ;;Total ram usage:       17 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:   10
 10424 ;; This function calls:
 10425 ;;		_LCD_Word_Write
 10426 ;;		_Set_Addr_Window
 10427 ;;		___wmul
 10428 ;; This function is called by:
 10429 ;;		_Console_Render
 10430 ;; This function uses a non-reentrant model
 10431 ;;
 10432                           
 10433                           	psect	text41
 10434  014AF2                     __ptext41:
 10435                           	opt stack 0
 10436  014AF2                     _LCD_DrawField:
 10437                           	opt stack 17
 10438                           
 10439                           ;LCD.c: 396: UINT8 i = 0x00;
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;incstack = 0
 10443  014AF2  0E00               	movlw	0
 10444  014AF4  0100               	movlb	0	; () banked
 10445  014AF6  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10446                           
 10447                           ; BSR set to: 0
 10448                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10449  014AF8  0100               	movlb	0	; () banked
 10450  014AFA  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10451  014AFC  0100               	movlb	0	; () banked
 10452  014AFE  25D2               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10453  014B00  0100               	movlb	0	; () banked
 10454  014B02  6FDA               	movwf	LCD_DrawField@xmax& (0+255),b
 10455                           
 10456                           ; BSR set to: 0
 10457                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10458  014B04  0100               	movlb	0	; () banked
 10459  014B06  51D0               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10460  014B08  0100               	movlb	0	; () banked
 10461  014B0A  25D4               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10462  014B0C  0100               	movlb	0	; () banked
 10463  014B0E  6FDB               	movwf	LCD_DrawField@ymax& (0+255),b
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10467  014B10  C0D4  F0BA         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10468  014B14  C0D5  F0BB         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10469  014B18  C0D2  F0BC         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10470  014B1C  C0D3  F0BD         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10471  014B20  ECB8  F0B0         	call	___wmul	;wreg free
 10472  014B24  C0BA  F0D8         	movff	?___wmul,LCD_DrawField@count
 10473  014B28  C0BB  F0D9         	movff	?___wmul+1,LCD_DrawField@count+1
 10474                           
 10475                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10476  014B2C  C0D0  F0BF         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10477  014B30  0100               	movlb	0	; () banked
 10478  014B32  05DA               	decf	LCD_DrawField@xmax& (0+255),w,b
 10479  014B34  0100               	movlb	0	; () banked
 10480  014B36  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10481  014B38  0100               	movlb	0	; () banked
 10482  014B3A  05DB               	decf	LCD_DrawField@ymax& (0+255),w,b
 10483  014B3C  0100               	movlb	0	; () banked
 10484  014B3E  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10485  014B40  0100               	movlb	0	; () banked
 10486  014B42  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10487  014B44  EC83  F0A3         	call	_Set_Addr_Window
 10488                           
 10489                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10490  014B48  0E00               	movlw	0
 10491  014B4A  0100               	movlb	0	; () banked
 10492  014B4C  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10493  014B4E  D013               	goto	l183
 10494  014B50                     
 10495                           ; BSR set to: 0
 10496                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10497                           
 10498                           ; BSR set to: 0
 10499  014B50  0100               	movlb	0	; () banked
 10500  014B52  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10501  014B54  0D02               	mullw	2
 10502  014B56  50F3               	movf	prodl,w,c
 10503  014B58  0100               	movlb	0	; () banked
 10504  014B5A  25CC               	addwf	LCD_DrawField@pField& (0+255),w,b
 10505  014B5C  6ED9               	movwf	fsr2l,c
 10506  014B5E  50F4               	movf	prodh,w,c
 10507  014B60  0100               	movlb	0	; () banked
 10508  014B62  21CD               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10509  014B64  6EDA               	movwf	fsr2h,c
 10510  014B66  CFDE F0BF          	movff	postinc2,LCD_Word_Write@value
 10511  014B6A  CFDD F0C0          	movff	postdec2,LCD_Word_Write@value+1
 10512  014B6E  EC49  F0B2         	call	_LCD_Word_Write	;wreg free
 10513  014B72  0100               	movlb	0	; () banked
 10514  014B74  2BDC               	incf	LCD_DrawField@i& (0+255),f,b
 10515  014B76                     l183:
 10516                           
 10517                           ; BSR set to: 0
 10518                           
 10519                           ; BSR set to: 0
 10520  014B76  0100               	movlb	0	; () banked
 10521  014B78  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10522  014B7A  0100               	movlb	0	; () banked
 10523  014B7C  6FD6               	movwf	??_LCD_DrawField& (0+255),b
 10524  014B7E  6BD7               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10525  014B80  0100               	movlb	0	; () banked
 10526  014B82  51D8               	movf	LCD_DrawField@count& (0+255),w,b
 10527  014B84  0100               	movlb	0	; () banked
 10528  014B86  5DD6               	subwf	??_LCD_DrawField& (0+255),w,b
 10529  014B88  0100               	movlb	0	; () banked
 10530  014B8A  51D9               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10531  014B8C  0100               	movlb	0	; () banked
 10532  014B8E  59D7               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10533  014B90  B0D8               	btfsc	status,0,c
 10534  014B92  0012               	return	
 10535  014B94  D7DD               	goto	l184
 10536  014B96                     __end_of_LCD_DrawField:
 10537                           	opt stack 0
 10538                           tblptru	equ	0xFF8
 10539                           tblptrh	equ	0xFF7
 10540                           tblptrl	equ	0xFF6
 10541                           tablat	equ	0xFF5
 10542                           prodh	equ	0xFF4
 10543                           prodl	equ	0xFF3
 10544                           intcon	equ	0xFF2
 10545                           postinc0	equ	0xFEE
 10546                           wreg	equ	0xFE8
 10547                           postdec1	equ	0xFE5
 10548                           fsr1h	equ	0xFE2
 10549                           fsr1l	equ	0xFE1
 10550                           indf2	equ	0xFDF
 10551                           postinc2	equ	0xFDE
 10552                           postdec2	equ	0xFDD
 10553                           fsr2h	equ	0xFDA
 10554                           fsr2l	equ	0xFD9
 10555                           status	equ	0xFD8
 10556                           
 10557 ;; *************** function ___wmul *****************
 10558 ;; Defined at:
 10559 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10560 ;; Parameters:    Size  Location     Type
 10561 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10562 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;  product         2    4[BANK0 ] unsigned int 
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  2    0[BANK0 ] unsigned int 
 10567 ;; Registers used:
 10568 ;;		wreg, status,2, status,0, prodl, prodh
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10574 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;Total ram usage:        6 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:    7
 10581 ;; This function calls:
 10582 ;;		Nothing
 10583 ;; This function is called by:
 10584 ;;		_LCD_DrawField
 10585 ;; This function uses a non-reentrant model
 10586 ;;
 10587                           
 10588                           	psect	text42
 10589  016170                     __ptext42:
 10590                           	opt stack 0
 10591  016170                     ___wmul:
 10592                           	opt stack 19
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;incstack = 0
 10596  016170  0100               	movlb	0	; () banked
 10597  016172  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10598  016174  0100               	movlb	0	; () banked
 10599  016176  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10600  016178  CFF3 F0BE          	movff	prodl,___wmul@product
 10601  01617C  CFF4 F0BF          	movff	prodh,___wmul@product+1
 10602  016180  0100               	movlb	0	; () banked
 10603  016182  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10604  016184  0100               	movlb	0	; () banked
 10605  016186  03BD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10606  016188  50F3               	movf	prodl,w,c
 10607  01618A  0100               	movlb	0	; () banked
 10608  01618C  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10609  01618E  0100               	movlb	0	; () banked
 10610  016190  51BB               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10611  016192  0100               	movlb	0	; () banked
 10612  016194  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10613  016196  50F3               	movf	prodl,w,c
 10614  016198  0100               	movlb	0	; () banked
 10615  01619A  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10616                           
 10617                           ; BSR set to: 0
 10618  01619C  C0BE  F0BA         	movff	___wmul@product,?___wmul
 10619  0161A0  C0BF  F0BB         	movff	___wmul@product+1,?___wmul+1
 10620  0161A4  0012               	return	
 10621  0161A6                     __end_of___wmul:
 10622                           	opt stack 0
 10623                           tblptru	equ	0xFF8
 10624                           tblptrh	equ	0xFF7
 10625                           tblptrl	equ	0xFF6
 10626                           tablat	equ	0xFF5
 10627                           prodh	equ	0xFF4
 10628                           prodl	equ	0xFF3
 10629                           intcon	equ	0xFF2
 10630                           postinc0	equ	0xFEE
 10631                           wreg	equ	0xFE8
 10632                           postdec1	equ	0xFE5
 10633                           fsr1h	equ	0xFE2
 10634                           fsr1l	equ	0xFE1
 10635                           indf2	equ	0xFDF
 10636                           postinc2	equ	0xFDE
 10637                           postdec2	equ	0xFDD
 10638                           fsr2h	equ	0xFDA
 10639                           fsr2l	equ	0xFD9
 10640                           status	equ	0xFD8
 10641                           
 10642 ;; *************** function _Console_MakeField *****************
 10643 ;; Defined at:
 10644 ;;		line 435 in file "Library/Console.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;  pInput          1    wreg     unsigned char 
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;  pInput          1   11[BANK0 ] unsigned char 
 10649 ;;  y               1   17[BANK0 ] unsigned char 
 10650 ;;  x               1   16[BANK0 ] unsigned char 
 10651 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10652 ;;		 -> Font5x7(480), 
 10653 ;;  Index           2    9[BANK0 ] unsigned short 
 10654 ;; Return value:  Size  Location     Type
 10655 ;;                  2    5[BANK0 ] PTR unsigned short 
 10656 ;; Registers used:
 10657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10658 ;; Tracked objects:
 10659 ;;		On entry : 0/0
 10660 ;;		On exit  : 0/0
 10661 ;;		Unchanged: 0/0
 10662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10663 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10664 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10665 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10666 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10667 ;;Total ram usage:       13 bytes
 10668 ;; Hardware stack levels used:    1
 10669 ;; Hardware stack levels required when called:    8
 10670 ;; This function calls:
 10671 ;;		_Byte_GetBit
 10672 ;; This function is called by:
 10673 ;;		_Console_Render
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           	psect	text43
 10678  013FA8                     __ptext43:
 10679                           	opt stack 0
 10680  013FA8                     _Console_MakeField:
 10681                           	opt stack 19
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;incstack = 0
 10685                           ;Console_MakeField@pInput stored from wreg
 10686  013FA8  0100               	movlb	0	; () banked
 10687  013FAA  6FC5               	movwf	Console_MakeField@pInput& (0+255),b
 10688                           
 10689                           ;Console.c: 437: static Colour Fill[7][5];
 10690                           ;Console.c: 438: pInput -= 32;
 10691  013FAC  0E20               	movlw	32
 10692  013FAE  0100               	movlb	0	; () banked
 10693  013FB0  5FC5               	subwf	Console_MakeField@pInput& (0+255),f,b
 10694                           
 10695                           ; BSR set to: 0
 10696                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10697  013FB2  0100               	movlb	0	; () banked
 10698  013FB4  51C5               	movf	Console_MakeField@pInput& (0+255),w,b
 10699  013FB6  0D05               	mullw	5
 10700  013FB8  CFF3 F0C3          	movff	prodl,Console_MakeField@Index
 10701  013FBC  CFF4 F0C4          	movff	prodh,Console_MakeField@Index+1
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10705  013FC0  0E1F               	movlw	low _Font5x7
 10706  013FC2  0100               	movlb	0	; () banked
 10707  013FC4  25C3               	addwf	Console_MakeField@Index& (0+255),w,b
 10708  013FC6  0100               	movlb	0	; () banked
 10709  013FC8  6FC6               	movwf	Console_MakeField@Column& (0+255),b
 10710  013FCA  0EFD               	movlw	high _Font5x7
 10711  013FCC  0100               	movlb	0	; () banked
 10712  013FCE  21C4               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10713  013FD0  0100               	movlb	0	; () banked
 10714  013FD2  6FC7               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10718  013FD4  0E00               	movlw	0
 10719  013FD6  0100               	movlb	0	; () banked
 10720  013FD8  6FCA               	movwf	Console_MakeField@x& (0+255),b
 10721  013FDA                     l13450:
 10722                           
 10723                           ; BSR set to: 0
 10724  013FDA  0E04               	movlw	4
 10725  013FDC  0100               	movlb	0	; () banked
 10726  013FDE  65CA               	cpfsgt	Console_MakeField@x& (0+255),b
 10727  013FE0  D001               	goto	l1077
 10728  013FE2  D043               	goto	u9960
 10729  013FE4                     l1077:
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;Console.c: 444: {
 10733                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10734                           
 10735                           ; BSR set to: 0
 10736  013FE4  0E00               	movlw	0
 10737  013FE6  0100               	movlb	0	; () banked
 10738  013FE8  6FCB               	movwf	Console_MakeField@y& (0+255),b
 10739  013FEA                     l13456:
 10740                           
 10741                           ; BSR set to: 0
 10742  013FEA  0E06               	movlw	6
 10743  013FEC  0100               	movlb	0	; () banked
 10744  013FEE  65CB               	cpfsgt	Console_MakeField@y& (0+255),b
 10745  013FF0  D001               	goto	l1079
 10746  013FF2  D035               	goto	u9950
 10747  013FF4                     l1079:
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10751                           
 10752                           ; BSR set to: 0
 10753  013FF4  C0C6  F0BA         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10754  013FF8  C0C7  F0BB         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10755  013FFC  C0CB  F0BC         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10756  014000  ECEE  F0B0         	call	_Byte_GetBit	;wreg free
 10757  014004  0900               	iorlw	0
 10758  014006  A4D8               	btfss	status,2,c
 10759  014008  D005               	goto	l1082
 10760  01400A  C083  F0C8         	movff	_gBackcolour,_Console_MakeField$10974
 10761  01400E  C084  F0C9         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10762  014012  D004               	goto	l1084
 10763  014014                     l1082:
 10764  014014  C0FD  F0C8         	movff	_gForecolour,_Console_MakeField$10974
 10765  014018  C0FE  F0C9         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10766  01401C                     l1084:
 10767  01401C  0100               	movlb	0	; () banked
 10768  01401E  51CB               	movf	Console_MakeField@y& (0+255),w,b
 10769  014020  0D0A               	mullw	10
 10770  014022  0E64               	movlw	low Console_MakeField@Fill
 10771  014024  0100               	movlb	0	; () banked
 10772  014026  6FC1               	movwf	??_Console_MakeField& (0+255),b
 10773  014028  0E04               	movlw	high Console_MakeField@Fill
 10774  01402A  0100               	movlb	0	; () banked
 10775  01402C  6FC2               	movwf	(??_Console_MakeField+1)& (0+255),b
 10776  01402E  50F3               	movf	prodl,w,c
 10777  014030  0100               	movlb	0	; () banked
 10778  014032  27C1               	addwf	??_Console_MakeField& (0+255),f,b
 10779  014034  50F4               	movf	prodh,w,c
 10780  014036  0100               	movlb	0	; () banked
 10781  014038  23C2               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10782  01403A  0100               	movlb	0	; () banked
 10783  01403C  51CA               	movf	Console_MakeField@x& (0+255),w,b
 10784  01403E  0D02               	mullw	2
 10785  014040  50F3               	movf	prodl,w,c
 10786  014042  0100               	movlb	0	; () banked
 10787  014044  25C1               	addwf	??_Console_MakeField& (0+255),w,b
 10788  014046  6ED9               	movwf	fsr2l,c
 10789  014048  50F4               	movf	prodh,w,c
 10790  01404A  0100               	movlb	0	; () banked
 10791  01404C  21C2               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10792  01404E  6EDA               	movwf	fsr2h,c
 10793  014050  C0C8  FFDE         	movff	_Console_MakeField$10974,postinc2
 10794  014054  C0C9  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10795                           
 10796                           ; BSR set to: 0
 10797  014058  0100               	movlb	0	; () banked
 10798  01405A  2BCB               	incf	Console_MakeField@y& (0+255),f,b
 10799  01405C  D7C6               	goto	l13456
 10800  01405E                     u9950:
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;Console.c: 447: Column += 1;
 10804                           
 10805                           ; BSR set to: 0
 10806  01405E  0100               	movlb	0	; () banked
 10807  014060  4BC6               	infsnz	Console_MakeField@Column& (0+255),f,b
 10808  014062  2BC7               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10809  014064  0100               	movlb	0	; () banked
 10810  014066  2BCA               	incf	Console_MakeField@x& (0+255),f,b
 10811  014068  D7B8               	goto	l13450
 10812  01406A                     u9960:
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;Console.c: 448: }
 10816                           ;Console.c: 449: return (ColourPtr)Fill;
 10817                           
 10818                           ; BSR set to: 0
 10819  01406A  0E64               	movlw	low Console_MakeField@Fill
 10820  01406C  0100               	movlb	0	; () banked
 10821  01406E  6FBF               	movwf	?_Console_MakeField& (0+255),b
 10822  014070  0E04               	movlw	high Console_MakeField@Fill
 10823  014072  0100               	movlb	0	; () banked
 10824  014074  6FC0               	movwf	(?_Console_MakeField+1)& (0+255),b
 10825  014076  0012               	return	
 10826  014078                     __end_of_Console_MakeField:
 10827                           	opt stack 0
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon	equ	0xFF2
 10835                           postinc0	equ	0xFEE
 10836                           wreg	equ	0xFE8
 10837                           postdec1	equ	0xFE5
 10838                           fsr1h	equ	0xFE2
 10839                           fsr1l	equ	0xFE1
 10840                           indf2	equ	0xFDF
 10841                           postinc2	equ	0xFDE
 10842                           postdec2	equ	0xFDD
 10843                           fsr2h	equ	0xFDA
 10844                           fsr2l	equ	0xFD9
 10845                           status	equ	0xFD8
 10846                           
 10847 ;; *************** function _Byte_GetBit *****************
 10848 ;; Defined at:
 10849 ;;		line 38 in file "Library/Types.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10852 ;;		 -> Font5x7(480), 
 10853 ;;  pBit            1    2[BANK0 ] unsigned char 
 10854 ;; Auto vars:     Size  Location     Type
 10855 ;;  Output          1    4[BANK0 ] unsigned char 
 10856 ;; Return value:  Size  Location     Type
 10857 ;;                  1    wreg      unsigned char 
 10858 ;; Registers used:
 10859 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : 0/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10865 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;Total ram usage:        5 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:    7
 10872 ;; This function calls:
 10873 ;;		Nothing
 10874 ;; This function is called by:
 10875 ;;		_Console_MakeField
 10876 ;;		_Word_GetBit
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           	psect	text44
 10881  0161DC                     __ptext44:
 10882                           	opt stack 0
 10883  0161DC                     _Byte_GetBit:
 10884                           	opt stack 19
 10885                           
 10886                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;incstack = 0
 10890  0161DC  C0BA  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10891  0161E0  C0BB  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10892  0161E4                     	if	0	;tblptru may be non-zero
 10893  0161E4                     	endif
 10894  0161E4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10895  0161E4  0E00               	movlw	low (__mediumconst shr (0+16))
 10896  0161E6  6EF8               	movwf	tblptru,c
 10897  0161E8                     	endif
 10898  0161E8  0008               	tblrd		*
 10899  0161EA  CFF5 F0BE          	movff	tablat,Byte_GetBit@Output
 10900                           
 10901                           ;Types.c: 42: Output >>= pBit;
 10902  0161EE  0100               	movlb	0	; () banked
 10903  0161F0  29BC               	incf	Byte_GetBit@pBit& (0+255),w,b
 10904  0161F2  0100               	movlb	0	; () banked
 10905  0161F4  6FBD               	movwf	??_Byte_GetBit& (0+255),b
 10906  0161F6  D003               	goto	u9560
 10907  0161F8                     u9565:
 10908  0161F8  0100               	movlb	0	; () banked
 10909  0161FA  90D8               	bcf	status,0,c
 10910  0161FC  33BE               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10911  0161FE                     u9560:
 10912  0161FE  0100               	movlb	0	; () banked
 10913  016200  2FBD               	decfsz	??_Byte_GetBit& (0+255),f,b
 10914  016202  D7FA               	goto	u9565
 10915                           
 10916                           ;Types.c: 43: Output &= 1;
 10917  016204  0E01               	movlw	1
 10918  016206  0100               	movlb	0	; () banked
 10919  016208  17BE               	andwf	Byte_GetBit@Output& (0+255),f,b
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;Types.c: 44: return Output;
 10923  01620A  0100               	movlb	0	; () banked
 10924  01620C  51BE               	movf	Byte_GetBit@Output& (0+255),w,b
 10925  01620E  0012               	return	
 10926  016210                     __end_of_Byte_GetBit:
 10927                           	opt stack 0
 10928                           tblptru	equ	0xFF8
 10929                           tblptrh	equ	0xFF7
 10930                           tblptrl	equ	0xFF6
 10931                           tablat	equ	0xFF5
 10932                           prodh	equ	0xFF4
 10933                           prodl	equ	0xFF3
 10934                           intcon	equ	0xFF2
 10935                           postinc0	equ	0xFEE
 10936                           wreg	equ	0xFE8
 10937                           postdec1	equ	0xFE5
 10938                           fsr1h	equ	0xFE2
 10939                           fsr1l	equ	0xFE1
 10940                           indf2	equ	0xFDF
 10941                           postinc2	equ	0xFDE
 10942                           postdec2	equ	0xFDD
 10943                           fsr2h	equ	0xFDA
 10944                           fsr2l	equ	0xFD9
 10945                           status	equ	0xFD8
 10946                           
 10947 ;; *************** function _ADC_Voltage *****************
 10948 ;; Defined at:
 10949 ;;		line 259 in file "Library/ADC.c"
 10950 ;; Parameters:    Size  Location     Type
 10951 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 10952 ;;		 -> ADC_AN0(5), 
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;  output          4   53[BANK0 ] float 
 10955 ;;  ref             4   49[BANK0 ] const float 
 10956 ;;  max             4   45[BANK0 ] const float 
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  4   39[BANK0 ] float 
 10959 ;; Registers used:
 10960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10966 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10967 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;Total ram usage:       18 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; Hardware stack levels required when called:    8
 10973 ;; This function calls:
 10974 ;;		___fldiv
 10975 ;;		___flmul
 10976 ;;		___xxtofl
 10977 ;; This function is called by:
 10978 ;;		_findClosestWall
 10979 ;;		_mode1
 10980 ;; This function uses a non-reentrant model
 10981 ;;
 10982                           
 10983                           	psect	text45
 10984  013C4E                     __ptext45:
 10985                           	opt stack 0
 10986  013C4E                     _ADC_Voltage:
 10987                           	opt stack 20
 10988                           
 10989                           ;ADC.c: 261: const float max = 1024;
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;incstack = 0
 10993  013C4E  0E00               	movlw	0
 10994  013C50  0100               	movlb	0	; () banked
 10995  013C52  6FE7               	movwf	ADC_Voltage@max& (0+255),b
 10996  013C54  0E00               	movlw	0
 10997  013C56  6FE8               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10998  013C58  0E80               	movlw	128
 10999  013C5A  6FE9               	movwf	(ADC_Voltage@max+2)& (0+255),b
 11000  013C5C  0E44               	movlw	68
 11001  013C5E  6FEA               	movwf	(ADC_Voltage@max+3)& (0+255),b
 11002                           
 11003                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 11004  013C60  0E33               	movlw	51
 11005  013C62  0100               	movlb	0	; () banked
 11006  013C64  6FEB               	movwf	ADC_Voltage@ref& (0+255),b
 11007  013C66  0E33               	movlw	51
 11008  013C68  6FEC               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 11009  013C6A  0E53               	movlw	83
 11010  013C6C  6FED               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 11011  013C6E  0E40               	movlw	64
 11012  013C70  6FEE               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;ADC.c: 263: float output = pInput->mValue;
 11016  013C72  0100               	movlb	0	; () banked
 11017  013C74  EE20 F001          	lfsr	2,1
 11018  013C78  51E1               	movf	ADC_Voltage@pInput& (0+255),w,b
 11019  013C7A  26D9               	addwf	fsr2l,f,c
 11020  013C7C  51E2               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 11021  013C7E  22DA               	addwfc	fsr2h,f,c
 11022  013C80  CFDE F0E5          	movff	postinc2,??_ADC_Voltage
 11023  013C84  CFDD F0E6          	movff	postdec2,??_ADC_Voltage+1
 11024  013C88  C0E5  F0BA         	movff	??_ADC_Voltage,___xxtofl@val
 11025  013C8C  C0E6  F0BB         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 11026  013C90  0100               	movlb	0	; () banked
 11027  013C92  6BBC               	clrf	(___xxtofl@val+2)& (0+255),b
 11028  013C94  6BBD               	clrf	(___xxtofl@val+3)& (0+255),b
 11029  013C96  0E00               	movlw	0
 11030  013C98  EC98  F091         	call	___xxtofl
 11031  013C9C  C0BA  F0EF         	movff	?___xxtofl,ADC_Voltage@output
 11032  013CA0  C0BB  F0F0         	movff	?___xxtofl+1,ADC_Voltage@output+1
 11033  013CA4  C0BC  F0F1         	movff	?___xxtofl+2,ADC_Voltage@output+2
 11034  013CA8  C0BD  F0F2         	movff	?___xxtofl+3,ADC_Voltage@output+3
 11035                           
 11036                           ;ADC.c: 265: output /= max;
 11037  013CAC  C0EF  F0BA         	movff	ADC_Voltage@output,___fldiv@b
 11038  013CB0  C0F0  F0BB         	movff	ADC_Voltage@output+1,___fldiv@b+1
 11039  013CB4  C0F1  F0BC         	movff	ADC_Voltage@output+2,___fldiv@b+2
 11040  013CB8  C0F2  F0BD         	movff	ADC_Voltage@output+3,___fldiv@b+3
 11041  013CBC  C0E7  F0BE         	movff	ADC_Voltage@max,___fldiv@a
 11042  013CC0  C0E8  F0BF         	movff	ADC_Voltage@max+1,___fldiv@a+1
 11043  013CC4  C0E9  F0C0         	movff	ADC_Voltage@max+2,___fldiv@a+2
 11044  013CC8  C0EA  F0C1         	movff	ADC_Voltage@max+3,___fldiv@a+3
 11045  013CCC  EC54  F088         	call	___fldiv	;wreg free
 11046  013CD0  C0BA  F0EF         	movff	?___fldiv,ADC_Voltage@output
 11047  013CD4  C0BB  F0F0         	movff	?___fldiv+1,ADC_Voltage@output+1
 11048  013CD8  C0BC  F0F1         	movff	?___fldiv+2,ADC_Voltage@output+2
 11049  013CDC  C0BD  F0F2         	movff	?___fldiv+3,ADC_Voltage@output+3
 11050                           
 11051                           ;ADC.c: 266: output *= ref;
 11052  013CE0  C0EF  F0C8         	movff	ADC_Voltage@output,___flmul@b
 11053  013CE4  C0F0  F0C9         	movff	ADC_Voltage@output+1,___flmul@b+1
 11054  013CE8  C0F1  F0CA         	movff	ADC_Voltage@output+2,___flmul@b+2
 11055  013CEC  C0F2  F0CB         	movff	ADC_Voltage@output+3,___flmul@b+3
 11056  013CF0  C0EB  F0CC         	movff	ADC_Voltage@ref,___flmul@a
 11057  013CF4  C0EC  F0CD         	movff	ADC_Voltage@ref+1,___flmul@a+1
 11058  013CF8  C0ED  F0CE         	movff	ADC_Voltage@ref+2,___flmul@a+2
 11059  013CFC  C0EE  F0CF         	movff	ADC_Voltage@ref+3,___flmul@a+3
 11060  013D00  EC00  F080         	call	___flmul	;wreg free
 11061  013D04  C0C8  F0EF         	movff	?___flmul,ADC_Voltage@output
 11062  013D08  C0C9  F0F0         	movff	?___flmul+1,ADC_Voltage@output+1
 11063  013D0C  C0CA  F0F1         	movff	?___flmul+2,ADC_Voltage@output+2
 11064  013D10  C0CB  F0F2         	movff	?___flmul+3,ADC_Voltage@output+3
 11065                           
 11066                           ;ADC.c: 268: return output + (float)0.000;
 11067  013D14  C0EF  F0E1         	movff	ADC_Voltage@output,?_ADC_Voltage
 11068  013D18  C0F0  F0E2         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 11069  013D1C  C0F1  F0E3         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 11070  013D20  C0F2  F0E4         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 11071  013D24  0012               	return	
 11072  013D26                     __end_of_ADC_Voltage:
 11073                           	opt stack 0
 11074                           tblptru	equ	0xFF8
 11075                           tblptrh	equ	0xFF7
 11076                           tblptrl	equ	0xFF6
 11077                           tablat	equ	0xFF5
 11078                           prodh	equ	0xFF4
 11079                           prodl	equ	0xFF3
 11080                           intcon	equ	0xFF2
 11081                           postinc0	equ	0xFEE
 11082                           wreg	equ	0xFE8
 11083                           postdec1	equ	0xFE5
 11084                           fsr1h	equ	0xFE2
 11085                           fsr1l	equ	0xFE1
 11086                           indf2	equ	0xFDF
 11087                           postinc2	equ	0xFDE
 11088                           postdec2	equ	0xFDD
 11089                           fsr2h	equ	0xFDA
 11090                           fsr2l	equ	0xFD9
 11091                           status	equ	0xFD8
 11092                           
 11093 ;; *************** function ___xxtofl *****************
 11094 ;; Defined at:
 11095 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;  sign            1    wreg     unsigned char 
 11098 ;;  val             4    0[BANK0 ] long 
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;  sign            1    8[BANK0 ] unsigned char 
 11101 ;;  arg             4   10[BANK0 ] unsigned long 
 11102 ;;  exp             1    9[BANK0 ] unsigned char 
 11103 ;; Return value:  Size  Location     Type
 11104 ;;                  4    0[BANK0 ] unsigned char 
 11105 ;; Registers used:
 11106 ;;		wreg, status,2, status,0
 11107 ;; Tracked objects:
 11108 ;;		On entry : 0/0
 11109 ;;		On exit  : 0/0
 11110 ;;		Unchanged: 0/0
 11111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11112 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11113 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;Total ram usage:       14 bytes
 11117 ;; Hardware stack levels used:    1
 11118 ;; Hardware stack levels required when called:    7
 11119 ;; This function calls:
 11120 ;;		Nothing
 11121 ;; This function is called by:
 11122 ;;		_ADC_Voltage
 11123 ;;		_findClosestWall
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           	psect	text46
 11128  012330                     __ptext46:
 11129                           	opt stack 0
 11130  012330                     ___xxtofl:
 11131                           	opt stack 21
 11132                           
 11133                           ;incstack = 0
 11134                           ;___xxtofl@sign stored from wreg
 11135  012330  0100               	movlb	0	; () banked
 11136  012332  6FC2               	movwf	___xxtofl@sign& (0+255),b
 11137  012334  0100               	movlb	0	; () banked
 11138  012336  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11139  012338  0100               	movlb	0	; () banked
 11140  01233A  B4D8               	btfsc	status,2,c
 11141  01233C  D01E               	goto	l3006
 11142                           
 11143                           ; BSR set to: 0
 11144  01233E  0100               	movlb	0	; () banked
 11145  012340  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11146  012342  D01B               	goto	l3006
 11147                           
 11148                           ; BSR set to: 0
 11149  012344  C0BA  F0BE         	movff	___xxtofl@val,??___xxtofl
 11150  012348  C0BB  F0BF         	movff	___xxtofl@val+1,??___xxtofl+1
 11151  01234C  C0BC  F0C0         	movff	___xxtofl@val+2,??___xxtofl+2
 11152  012350  C0BD  F0C1         	movff	___xxtofl@val+3,??___xxtofl+3
 11153  012354  0100               	movlb	0	; () banked
 11154  012356  1FBE               	comf	??___xxtofl& (0+255),f,b
 11155  012358  1FBF               	comf	(??___xxtofl+1)& (0+255),f,b
 11156  01235A  1FC0               	comf	(??___xxtofl+2)& (0+255),f,b
 11157  01235C  1FC1               	comf	(??___xxtofl+3)& (0+255),f,b
 11158  01235E  2BBE               	incf	??___xxtofl& (0+255),f,b
 11159  012360  0E00               	movlw	0
 11160  012362  23BF               	addwfc	(??___xxtofl+1)& (0+255),f,b
 11161  012364  23C0               	addwfc	(??___xxtofl+2)& (0+255),f,b
 11162  012366  23C1               	addwfc	(??___xxtofl+3)& (0+255),f,b
 11163  012368  C0BE  F0C4         	movff	??___xxtofl,___xxtofl@arg
 11164  01236C  C0BF  F0C5         	movff	??___xxtofl+1,___xxtofl@arg+1
 11165  012370  C0C0  F0C6         	movff	??___xxtofl+2,___xxtofl@arg+2
 11166  012374  C0C1  F0C7         	movff	??___xxtofl+3,___xxtofl@arg+3
 11167  012378  D008               	goto	l3007
 11168  01237A                     l3006:
 11169                           
 11170                           ; BSR set to: 0
 11171  01237A  C0BA  F0C4         	movff	___xxtofl@val,___xxtofl@arg
 11172  01237E  C0BB  F0C5         	movff	___xxtofl@val+1,___xxtofl@arg+1
 11173  012382  C0BC  F0C6         	movff	___xxtofl@val+2,___xxtofl@arg+2
 11174  012386  C0BD  F0C7         	movff	___xxtofl@val+3,___xxtofl@arg+3
 11175  01238A                     l3007:
 11176                           
 11177                           ; BSR set to: 0
 11178                           
 11179                           ; BSR set to: 0
 11180  01238A  0100               	movlb	0	; () banked
 11181  01238C  51BA               	movf	___xxtofl@val& (0+255),w,b
 11182  01238E  0100               	movlb	0	; () banked
 11183  012390  11BB               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 11184  012392  0100               	movlb	0	; () banked
 11185  012394  11BC               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 11186  012396  0100               	movlb	0	; () banked
 11187  012398  11BD               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 11188  01239A  A4D8               	btfss	status,2,c
 11189  01239C  D00A               	goto	l3008
 11190                           
 11191                           ; BSR set to: 0
 11192  01239E  0E00               	movlw	0
 11193  0123A0  0100               	movlb	0	; () banked
 11194  0123A2  6FBA               	movwf	?___xxtofl& (0+255),b
 11195  0123A4  0E00               	movlw	0
 11196  0123A6  6FBB               	movwf	(?___xxtofl+1)& (0+255),b
 11197  0123A8  0E00               	movlw	0
 11198  0123AA  6FBC               	movwf	(?___xxtofl+2)& (0+255),b
 11199  0123AC  0E00               	movlw	0
 11200  0123AE  6FBD               	movwf	(?___xxtofl+3)& (0+255),b
 11201                           
 11202                           ; BSR set to: 0
 11203  0123B0  0012               	return	
 11204  0123B2                     l3008:
 11205                           
 11206                           ; BSR set to: 0
 11207                           
 11208                           ; BSR set to: 0
 11209  0123B2  0E96               	movlw	150
 11210  0123B4  0100               	movlb	0	; () banked
 11211  0123B6  6FC3               	movwf	___xxtofl@exp& (0+255),b
 11212  0123B8  D008               	goto	l3010
 11213  0123BA                     
 11214                           ; BSR set to: 0
 11215                           
 11216                           ; BSR set to: 0
 11217  0123BA  0100               	movlb	0	; () banked
 11218  0123BC  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11219  0123BE  0100               	movlb	0	; () banked
 11220  0123C0  90D8               	bcf	status,0,c
 11221  0123C2  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11222  0123C4  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11223  0123C6  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11224  0123C8  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11225  0123CA                     l3010:
 11226                           
 11227                           ; BSR set to: 0
 11228                           
 11229                           ; BSR set to: 0
 11230  0123CA  0E00               	movlw	0
 11231  0123CC  0100               	movlb	0	; () banked
 11232  0123CE  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11233  0123D0  0100               	movlb	0	; () banked
 11234  0123D2  6FBE               	movwf	??___xxtofl& (0+255),b
 11235  0123D4  0E00               	movlw	0
 11236  0123D6  0100               	movlb	0	; () banked
 11237  0123D8  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11238  0123DA  0100               	movlb	0	; () banked
 11239  0123DC  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11240  0123DE  0E00               	movlw	0
 11241  0123E0  0100               	movlb	0	; () banked
 11242  0123E2  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11243  0123E4  0100               	movlb	0	; () banked
 11244  0123E6  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11245  0123E8  0EFE               	movlw	254
 11246  0123EA  0100               	movlb	0	; () banked
 11247  0123EC  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11248  0123EE  0100               	movlb	0	; () banked
 11249  0123F0  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11250  0123F2  0100               	movlb	0	; () banked
 11251  0123F4  51BE               	movf	??___xxtofl& (0+255),w,b
 11252  0123F6  0100               	movlb	0	; () banked
 11253  0123F8  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11254  0123FA  0100               	movlb	0	; () banked
 11255  0123FC  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11256  0123FE  0100               	movlb	0	; () banked
 11257  012400  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11258  012402  B4D8               	btfsc	status,2,c
 11259  012404  D010               	goto	l3013
 11260  012406  D7D9               	goto	l3011
 11261  012408                     
 11262                           ; BSR set to: 0
 11263                           
 11264                           ; BSR set to: 0
 11265  012408  0100               	movlb	0	; () banked
 11266  01240A  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11267                           
 11268                           ; BSR set to: 0
 11269  01240C  0E01               	movlw	1
 11270  01240E  0100               	movlb	0	; () banked
 11271  012410  27C4               	addwf	___xxtofl@arg& (0+255),f,b
 11272  012412  0E00               	movlw	0
 11273  012414  23C5               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 11274  012416  23C6               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 11275  012418  23C7               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 11276                           
 11277                           ; BSR set to: 0
 11278  01241A  0100               	movlb	0	; () banked
 11279  01241C  90D8               	bcf	status,0,c
 11280  01241E  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11281  012420  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11282  012422  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11283  012424  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11284  012426                     l3013:
 11285                           
 11286                           ; BSR set to: 0
 11287  012426  0E00               	movlw	0
 11288  012428  0100               	movlb	0	; () banked
 11289  01242A  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11290  01242C  0100               	movlb	0	; () banked
 11291  01242E  6FBE               	movwf	??___xxtofl& (0+255),b
 11292  012430  0E00               	movlw	0
 11293  012432  0100               	movlb	0	; () banked
 11294  012434  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11295  012436  0100               	movlb	0	; () banked
 11296  012438  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11297  01243A  0E00               	movlw	0
 11298  01243C  0100               	movlb	0	; () banked
 11299  01243E  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11300  012440  0100               	movlb	0	; () banked
 11301  012442  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11302  012444  0EFF               	movlw	255
 11303  012446  0100               	movlb	0	; () banked
 11304  012448  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11305  01244A  0100               	movlb	0	; () banked
 11306  01244C  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11307  01244E  0100               	movlb	0	; () banked
 11308  012450  51BE               	movf	??___xxtofl& (0+255),w,b
 11309  012452  0100               	movlb	0	; () banked
 11310  012454  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11311  012456  0100               	movlb	0	; () banked
 11312  012458  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11313  01245A  0100               	movlb	0	; () banked
 11314  01245C  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11315  01245E  B4D8               	btfsc	status,2,c
 11316  012460  D009               	goto	l3016
 11317  012462  D7D2               	goto	l3014
 11318  012464                     
 11319                           ; BSR set to: 0
 11320                           
 11321                           ; BSR set to: 0
 11322  012464  0100               	movlb	0	; () banked
 11323  012466  07C3               	decf	___xxtofl@exp& (0+255),f,b
 11324  012468  0100               	movlb	0	; () banked
 11325  01246A  90D8               	bcf	status,0,c
 11326  01246C  37C4               	rlcf	___xxtofl@arg& (0+255),f,b
 11327  01246E  37C5               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 11328  012470  37C6               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 11329  012472  37C7               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 11330  012474                     l3016:
 11331                           
 11332                           ; BSR set to: 0
 11333                           
 11334                           ; BSR set to: 0
 11335  012474  0100               	movlb	0	; () banked
 11336  012476  BFC6               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 11337  012478  D004               	goto	u10590
 11338                           
 11339                           ; BSR set to: 0
 11340  01247A  0E02               	movlw	2
 11341  01247C  0100               	movlb	0	; () banked
 11342  01247E  61C3               	cpfslt	___xxtofl@exp& (0+255),b
 11343  012480  D7F1               	goto	l3017
 11344  012482                     u10590:
 11345                           
 11346                           ; BSR set to: 0
 11347                           
 11348                           ; BSR set to: 0
 11349  012482  0100               	movlb	0	; () banked
 11350  012484  B1C3               	btfsc	___xxtofl@exp& (0+255),0,b
 11351  012486  D009               	goto	l3021
 11352                           
 11353                           ; BSR set to: 0
 11354  012488  0EFF               	movlw	255
 11355  01248A  0100               	movlb	0	; () banked
 11356  01248C  17C4               	andwf	___xxtofl@arg& (0+255),f,b
 11357  01248E  0EFF               	movlw	255
 11358  012490  17C5               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 11359  012492  0E7F               	movlw	127
 11360  012494  17C6               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 11361  012496  0EFF               	movlw	255
 11362  012498  17C7               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 11363  01249A                     l3021:
 11364                           
 11365                           ; BSR set to: 0
 11366  01249A  0100               	movlb	0	; () banked
 11367  01249C  90D8               	bcf	status,0,c
 11368  01249E  33C3               	rrcf	___xxtofl@exp& (0+255),f,b
 11369  0124A0  C0C3  F0BE         	movff	___xxtofl@exp,??___xxtofl
 11370  0124A4  0100               	movlb	0	; () banked
 11371  0124A6  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11372  0124A8  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11373  0124AA  6BC1               	clrf	(??___xxtofl+3)& (0+255),b
 11374  0124AC  C0BE  F0C1         	movff	??___xxtofl,??___xxtofl+3
 11375  0124B0  0100               	movlb	0	; () banked
 11376  0124B2  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11377  0124B4  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11378  0124B6  6BBE               	clrf	??___xxtofl& (0+255),b
 11379  0124B8  0100               	movlb	0	; () banked
 11380  0124BA  51BE               	movf	??___xxtofl& (0+255),w,b
 11381  0124BC  0100               	movlb	0	; () banked
 11382  0124BE  13C4               	iorwf	___xxtofl@arg& (0+255),f,b
 11383  0124C0  0100               	movlb	0	; () banked
 11384  0124C2  51BF               	movf	(??___xxtofl+1)& (0+255),w,b
 11385  0124C4  0100               	movlb	0	; () banked
 11386  0124C6  13C5               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 11387  0124C8  0100               	movlb	0	; () banked
 11388  0124CA  51C0               	movf	(??___xxtofl+2)& (0+255),w,b
 11389  0124CC  0100               	movlb	0	; () banked
 11390  0124CE  13C6               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 11391  0124D0  0100               	movlb	0	; () banked
 11392  0124D2  51C1               	movf	(??___xxtofl+3)& (0+255),w,b
 11393  0124D4  0100               	movlb	0	; () banked
 11394  0124D6  13C7               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 11395                           
 11396                           ; BSR set to: 0
 11397  0124D8  0100               	movlb	0	; () banked
 11398  0124DA  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11399  0124DC  0100               	movlb	0	; () banked
 11400  0124DE  B4D8               	btfsc	status,2,c
 11401  0124E0  D005               	goto	l3022
 11402                           
 11403                           ; BSR set to: 0
 11404  0124E2  0100               	movlb	0	; () banked
 11405  0124E4  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11406  0124E6  D002               	goto	l3022
 11407                           
 11408                           ; BSR set to: 0
 11409  0124E8  0100               	movlb	0	; () banked
 11410  0124EA  8FC7               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 11411  0124EC                     l3022:
 11412                           
 11413                           ; BSR set to: 0
 11414                           
 11415                           ; BSR set to: 0
 11416  0124EC  C0C4  F0BA         	movff	___xxtofl@arg,?___xxtofl
 11417  0124F0  C0C5  F0BB         	movff	___xxtofl@arg+1,?___xxtofl+1
 11418  0124F4  C0C6  F0BC         	movff	___xxtofl@arg+2,?___xxtofl+2
 11419  0124F8  C0C7  F0BD         	movff	___xxtofl@arg+3,?___xxtofl+3
 11420  0124FC  0012               	return	
 11421  0124FE                     __end_of___xxtofl:
 11422                           	opt stack 0
 11423                           tblptru	equ	0xFF8
 11424                           tblptrh	equ	0xFF7
 11425                           tblptrl	equ	0xFF6
 11426                           tablat	equ	0xFF5
 11427                           prodh	equ	0xFF4
 11428                           prodl	equ	0xFF3
 11429                           intcon	equ	0xFF2
 11430                           postinc0	equ	0xFEE
 11431                           wreg	equ	0xFE8
 11432                           postdec1	equ	0xFE5
 11433                           fsr1h	equ	0xFE2
 11434                           fsr1l	equ	0xFE1
 11435                           indf2	equ	0xFDF
 11436                           postinc2	equ	0xFDE
 11437                           postdec2	equ	0xFDD
 11438                           fsr2h	equ	0xFDA
 11439                           fsr2l	equ	0xFD9
 11440                           status	equ	0xFD8
 11441                           
 11442 ;; *************** function ___flmul *****************
 11443 ;; Defined at:
 11444 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11445 ;; Parameters:    Size  Location     Type
 11446 ;;  b               4   14[BANK0 ] unsigned char 
 11447 ;;  a               4   18[BANK0 ] unsigned char 
 11448 ;; Auto vars:     Size  Location     Type
 11449 ;;  prod            4   33[BANK0 ] struct .
 11450 ;;  grs             4   28[BANK0 ] unsigned long 
 11451 ;;  temp            2   37[BANK0 ] struct .
 11452 ;;  bexp            1   32[BANK0 ] unsigned char 
 11453 ;;  aexp            1   27[BANK0 ] unsigned char 
 11454 ;;  sign            1   26[BANK0 ] unsigned char 
 11455 ;; Return value:  Size  Location     Type
 11456 ;;                  4   14[BANK0 ] unsigned char 
 11457 ;; Registers used:
 11458 ;;		wreg, status,2, status,0, prodl, prodh
 11459 ;; Tracked objects:
 11460 ;;		On entry : 0/0
 11461 ;;		On exit  : 0/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11464 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11465 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11466 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11467 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11468 ;;Total ram usage:       25 bytes
 11469 ;; Hardware stack levels used:    1
 11470 ;; Hardware stack levels required when called:    7
 11471 ;; This function calls:
 11472 ;;		Nothing
 11473 ;; This function is called by:
 11474 ;;		_ADC_Voltage
 11475 ;;		_findClosestWall
 11476 ;; This function uses a non-reentrant model
 11477 ;;
 11478                           
 11479                           	psect	text47
 11480  010000                     __ptext47:
 11481                           	opt stack 0
 11482  010000                     ___flmul:
 11483                           	opt stack 21
 11484                           
 11485                           ; BSR set to: 0
 11486                           ;incstack = 0
 11487  010000  0100               	movlb	0	; () banked
 11488  010002  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11489  010004  0B80               	andlw	128
 11490  010006  0100               	movlb	0	; () banked
 11491  010008  6FD4               	movwf	___flmul@sign& (0+255),b
 11492  01000A  0100               	movlb	0	; () banked
 11493  01000C  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11494  01000E  25CB               	addwf	(___flmul@b+3)& (0+255),w,b
 11495  010010  0100               	movlb	0	; () banked
 11496  010012  6FDA               	movwf	___flmul@bexp& (0+255),b
 11497                           
 11498                           ; BSR set to: 0
 11499  010014  0100               	movlb	0	; () banked
 11500  010016  AFCA               	btfss	(___flmul@b+2)& (0+255),7,b
 11501  010018  D002               	goto	l2977
 11502                           
 11503                           ; BSR set to: 0
 11504  01001A  0100               	movlb	0	; () banked
 11505  01001C  81DA               	bsf	___flmul@bexp& (0+255),0,b
 11506  01001E                     l2977:
 11507                           
 11508                           ; BSR set to: 0
 11509                           
 11510                           ; BSR set to: 0
 11511  01001E  0100               	movlb	0	; () banked
 11512  010020  51DA               	movf	___flmul@bexp& (0+255),w,b
 11513  010022  0100               	movlb	0	; () banked
 11514  010024  B4D8               	btfsc	status,2,c
 11515  010026  D010               	goto	l2978
 11516                           
 11517                           ; BSR set to: 0
 11518  010028  0100               	movlb	0	; () banked
 11519  01002A  29DA               	incf	___flmul@bexp& (0+255),w,b
 11520  01002C  A4D8               	btfss	status,2,c
 11521  01002E  D009               	goto	l2979
 11522                           
 11523                           ; BSR set to: 0
 11524  010030  0E00               	movlw	0
 11525  010032  0100               	movlb	0	; () banked
 11526  010034  6FC8               	movwf	___flmul@b& (0+255),b
 11527  010036  0E00               	movlw	0
 11528  010038  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11529  01003A  0E00               	movlw	0
 11530  01003C  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11531  01003E  0E00               	movlw	0
 11532  010040  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11533  010042                     l2979:
 11534                           
 11535                           ; BSR set to: 0
 11536                           
 11537                           ; BSR set to: 0
 11538  010042  0100               	movlb	0	; () banked
 11539  010044  8FCA               	bsf	(___flmul@b+2)& (0+255),7,b
 11540  010046  D009               	goto	l2980
 11541  010048                     l2978:
 11542                           
 11543                           ; BSR set to: 0
 11544                           
 11545                           ; BSR set to: 0
 11546  010048  0E00               	movlw	0
 11547  01004A  0100               	movlb	0	; () banked
 11548  01004C  6FC8               	movwf	___flmul@b& (0+255),b
 11549  01004E  0E00               	movlw	0
 11550  010050  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11551  010052  0E00               	movlw	0
 11552  010054  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11553  010056  0E00               	movlw	0
 11554  010058  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11555  01005A                     l2980:
 11556                           
 11557                           ; BSR set to: 0
 11558                           
 11559                           ; BSR set to: 0
 11560  01005A  0100               	movlb	0	; () banked
 11561  01005C  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11562  01005E  0B80               	andlw	128
 11563  010060  0100               	movlb	0	; () banked
 11564  010062  1BD4               	xorwf	___flmul@sign& (0+255),f,b
 11565                           
 11566                           ; BSR set to: 0
 11567  010064  0100               	movlb	0	; () banked
 11568  010066  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11569  010068  25CF               	addwf	(___flmul@a+3)& (0+255),w,b
 11570  01006A  0100               	movlb	0	; () banked
 11571  01006C  6FD5               	movwf	___flmul@aexp& (0+255),b
 11572                           
 11573                           ; BSR set to: 0
 11574  01006E  0100               	movlb	0	; () banked
 11575  010070  AFCE               	btfss	(___flmul@a+2)& (0+255),7,b
 11576  010072  D002               	goto	l2981
 11577                           
 11578                           ; BSR set to: 0
 11579  010074  0100               	movlb	0	; () banked
 11580  010076  81D5               	bsf	___flmul@aexp& (0+255),0,b
 11581  010078                     l2981:
 11582                           
 11583                           ; BSR set to: 0
 11584                           
 11585                           ; BSR set to: 0
 11586  010078  0100               	movlb	0	; () banked
 11587  01007A  51D5               	movf	___flmul@aexp& (0+255),w,b
 11588  01007C  0100               	movlb	0	; () banked
 11589  01007E  B4D8               	btfsc	status,2,c
 11590  010080  D010               	goto	l2982
 11591                           
 11592                           ; BSR set to: 0
 11593  010082  0100               	movlb	0	; () banked
 11594  010084  29D5               	incf	___flmul@aexp& (0+255),w,b
 11595  010086  A4D8               	btfss	status,2,c
 11596  010088  D009               	goto	l2983
 11597                           
 11598                           ; BSR set to: 0
 11599  01008A  0E00               	movlw	0
 11600  01008C  0100               	movlb	0	; () banked
 11601  01008E  6FCC               	movwf	___flmul@a& (0+255),b
 11602  010090  0E00               	movlw	0
 11603  010092  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11604  010094  0E00               	movlw	0
 11605  010096  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11606  010098  0E00               	movlw	0
 11607  01009A  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11608  01009C                     l2983:
 11609                           
 11610                           ; BSR set to: 0
 11611                           
 11612                           ; BSR set to: 0
 11613  01009C  0100               	movlb	0	; () banked
 11614  01009E  8FCE               	bsf	(___flmul@a+2)& (0+255),7,b
 11615  0100A0  D009               	goto	l2984
 11616  0100A2                     l2982:
 11617                           
 11618                           ; BSR set to: 0
 11619                           
 11620                           ; BSR set to: 0
 11621  0100A2  0E00               	movlw	0
 11622  0100A4  0100               	movlb	0	; () banked
 11623  0100A6  6FCC               	movwf	___flmul@a& (0+255),b
 11624  0100A8  0E00               	movlw	0
 11625  0100AA  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11626  0100AC  0E00               	movlw	0
 11627  0100AE  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11628  0100B0  0E00               	movlw	0
 11629  0100B2  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11630  0100B4                     l2984:
 11631                           
 11632                           ; BSR set to: 0
 11633  0100B4  0100               	movlb	0	; () banked
 11634  0100B6  51D5               	movf	___flmul@aexp& (0+255),w,b
 11635  0100B8  0100               	movlb	0	; () banked
 11636  0100BA  B4D8               	btfsc	status,2,c
 11637  0100BC  D005               	goto	u10410
 11638                           
 11639                           ; BSR set to: 0
 11640  0100BE  0100               	movlb	0	; () banked
 11641  0100C0  51DA               	movf	___flmul@bexp& (0+255),w,b
 11642  0100C2  0100               	movlb	0	; () banked
 11643  0100C4  A4D8               	btfss	status,2,c
 11644  0100C6  D00A               	goto	l2985
 11645  0100C8                     u10410:
 11646                           
 11647                           ; BSR set to: 0
 11648                           
 11649                           ; BSR set to: 0
 11650  0100C8  0E00               	movlw	0
 11651  0100CA  0100               	movlb	0	; () banked
 11652  0100CC  6FC8               	movwf	?___flmul& (0+255),b
 11653  0100CE  0E00               	movlw	0
 11654  0100D0  6FC9               	movwf	(?___flmul+1)& (0+255),b
 11655  0100D2  0E00               	movlw	0
 11656  0100D4  6FCA               	movwf	(?___flmul+2)& (0+255),b
 11657  0100D6  0E00               	movlw	0
 11658  0100D8  6FCB               	movwf	(?___flmul+3)& (0+255),b
 11659                           
 11660                           ; BSR set to: 0
 11661  0100DA  0012               	return	
 11662  0100DC                     l2985:
 11663                           
 11664                           ; BSR set to: 0
 11665                           
 11666                           ; BSR set to: 0
 11667  0100DC  0100               	movlb	0	; () banked
 11668  0100DE  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11669  0100E0  0100               	movlb	0	; () banked
 11670  0100E2  03C8               	mulwf	___flmul@b& (0+255),b
 11671  0100E4  CFF3 F0DF          	movff	prodl,___flmul@temp
 11672  0100E8  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11673                           
 11674                           ; BSR set to: 0
 11675  0100EC  0100               	movlb	0	; () banked
 11676  0100EE  51DF               	movf	___flmul@temp& (0+255),w,b
 11677  0100F0  0100               	movlb	0	; () banked
 11678  0100F2  6FD6               	movwf	___flmul@grs& (0+255),b
 11679  0100F4  6BD7               	clrf	(___flmul@grs+1)& (0+255),b
 11680  0100F6  6BD8               	clrf	(___flmul@grs+2)& (0+255),b
 11681  0100F8  6BD9               	clrf	(___flmul@grs+3)& (0+255),b
 11682                           
 11683                           ; BSR set to: 0
 11684  0100FA  0100               	movlb	0	; () banked
 11685  0100FC  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11686  0100FE  0100               	movlb	0	; () banked
 11687  010100  6FDB               	movwf	___flmul@prod& (0+255),b
 11688  010102  6BDC               	clrf	(___flmul@prod+1)& (0+255),b
 11689  010104  6BDD               	clrf	(___flmul@prod+2)& (0+255),b
 11690  010106  6BDE               	clrf	(___flmul@prod+3)& (0+255),b
 11691  010108  0100               	movlb	0	; () banked
 11692  01010A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11693  01010C  0100               	movlb	0	; () banked
 11694  01010E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11695  010110  CFF3 F0DF          	movff	prodl,___flmul@temp
 11696  010114  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11697                           
 11698                           ; BSR set to: 0
 11699  010118  0100               	movlb	0	; () banked
 11700  01011A  51DF               	movf	___flmul@temp& (0+255),w,b
 11701  01011C  0100               	movlb	0	; () banked
 11702  01011E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11703  010120  0E00               	movlw	0
 11704  010122  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11705  010124  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11706  010126  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11707                           
 11708                           ; BSR set to: 0
 11709  010128  0100               	movlb	0	; () banked
 11710  01012A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11711  01012C  0100               	movlb	0	; () banked
 11712  01012E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11713  010130  0E00               	movlw	0
 11714  010132  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11715  010134  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11716  010136  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11717  010138  0100               	movlb	0	; () banked
 11718  01013A  51CC               	movf	___flmul@a& (0+255),w,b
 11719  01013C  0100               	movlb	0	; () banked
 11720  01013E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11721  010140  CFF3 F0DF          	movff	prodl,___flmul@temp
 11722  010144  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11723                           
 11724                           ; BSR set to: 0
 11725  010148  0100               	movlb	0	; () banked
 11726  01014A  51DF               	movf	___flmul@temp& (0+255),w,b
 11727  01014C  0100               	movlb	0	; () banked
 11728  01014E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11729  010150  0E00               	movlw	0
 11730  010152  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11731  010154  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11732  010156  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11733                           
 11734                           ; BSR set to: 0
 11735  010158  0100               	movlb	0	; () banked
 11736  01015A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11737  01015C  0100               	movlb	0	; () banked
 11738  01015E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11739  010160  0E00               	movlw	0
 11740  010162  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11741  010164  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11742  010166  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11743                           
 11744                           ; BSR set to: 0
 11745  010168  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11746  01016C  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11747  010170  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11748  010174  0100               	movlb	0	; () banked
 11749  010176  6BD6               	clrf	___flmul@grs& (0+255),b
 11750                           
 11751                           ; BSR set to: 0
 11752  010178  0100               	movlb	0	; () banked
 11753  01017A  51CC               	movf	___flmul@a& (0+255),w,b
 11754  01017C  0100               	movlb	0	; () banked
 11755  01017E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11756  010180  CFF3 F0DF          	movff	prodl,___flmul@temp
 11757  010184  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11758                           
 11759                           ; BSR set to: 0
 11760  010188  0100               	movlb	0	; () banked
 11761  01018A  51DF               	movf	___flmul@temp& (0+255),w,b
 11762  01018C  0100               	movlb	0	; () banked
 11763  01018E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11764  010190  0100               	movlb	0	; () banked
 11765  010192  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11766  010194  0100               	movlb	0	; () banked
 11767  010196  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11768  010198  0E00               	movlw	0
 11769  01019A  0100               	movlb	0	; () banked
 11770  01019C  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11771  01019E  0E00               	movlw	0
 11772  0101A0  0100               	movlb	0	; () banked
 11773  0101A2  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11774                           
 11775                           ; BSR set to: 0
 11776  0101A4  0100               	movlb	0	; () banked
 11777  0101A6  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11778  0101A8  0100               	movlb	0	; () banked
 11779  0101AA  03C8               	mulwf	___flmul@b& (0+255),b
 11780  0101AC  CFF3 F0DF          	movff	prodl,___flmul@temp
 11781  0101B0  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11782                           
 11783                           ; BSR set to: 0
 11784  0101B4  0100               	movlb	0	; () banked
 11785  0101B6  51DF               	movf	___flmul@temp& (0+255),w,b
 11786  0101B8  0100               	movlb	0	; () banked
 11787  0101BA  27D6               	addwf	___flmul@grs& (0+255),f,b
 11788  0101BC  0100               	movlb	0	; () banked
 11789  0101BE  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11790  0101C0  0100               	movlb	0	; () banked
 11791  0101C2  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11792  0101C4  0E00               	movlw	0
 11793  0101C6  0100               	movlb	0	; () banked
 11794  0101C8  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11795  0101CA  0E00               	movlw	0
 11796  0101CC  0100               	movlb	0	; () banked
 11797  0101CE  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11798                           
 11799                           ; BSR set to: 0
 11800  0101D0  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11801  0101D4  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11802  0101D8  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11803  0101DC  0100               	movlb	0	; () banked
 11804  0101DE  6BD6               	clrf	___flmul@grs& (0+255),b
 11805  0101E0  0100               	movlb	0	; () banked
 11806  0101E2  51CC               	movf	___flmul@a& (0+255),w,b
 11807  0101E4  0100               	movlb	0	; () banked
 11808  0101E6  03C8               	mulwf	___flmul@b& (0+255),b
 11809  0101E8  CFF3 F0DF          	movff	prodl,___flmul@temp
 11810  0101EC  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11811                           
 11812                           ; BSR set to: 0
 11813  0101F0  0100               	movlb	0	; () banked
 11814  0101F2  51DF               	movf	___flmul@temp& (0+255),w,b
 11815  0101F4  0100               	movlb	0	; () banked
 11816  0101F6  27D6               	addwf	___flmul@grs& (0+255),f,b
 11817  0101F8  0100               	movlb	0	; () banked
 11818  0101FA  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11819  0101FC  0100               	movlb	0	; () banked
 11820  0101FE  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11821  010200  0E00               	movlw	0
 11822  010202  0100               	movlb	0	; () banked
 11823  010204  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11824  010206  0E00               	movlw	0
 11825  010208  0100               	movlb	0	; () banked
 11826  01020A  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11827                           
 11828                           ; BSR set to: 0
 11829  01020C  0100               	movlb	0	; () banked
 11830  01020E  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11831  010210  0100               	movlb	0	; () banked
 11832  010212  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11833  010214  CFF3 F0DF          	movff	prodl,___flmul@temp
 11834  010218  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11835  01021C  0100               	movlb	0	; () banked
 11836  01021E  51DF               	movf	___flmul@temp& (0+255),w,b
 11837  010220  0100               	movlb	0	; () banked
 11838  010222  27DB               	addwf	___flmul@prod& (0+255),f,b
 11839  010224  0100               	movlb	0	; () banked
 11840  010226  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11841  010228  0100               	movlb	0	; () banked
 11842  01022A  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11843  01022C  0E00               	movlw	0
 11844  01022E  0100               	movlb	0	; () banked
 11845  010230  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11846  010232  0E00               	movlw	0
 11847  010234  0100               	movlb	0	; () banked
 11848  010236  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11849                           
 11850                           ; BSR set to: 0
 11851  010238  0100               	movlb	0	; () banked
 11852  01023A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11853  01023C  0100               	movlb	0	; () banked
 11854  01023E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11855  010240  CFF3 F0DF          	movff	prodl,___flmul@temp
 11856  010244  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11857                           
 11858                           ; BSR set to: 0
 11859  010248  0100               	movlb	0	; () banked
 11860  01024A  51DF               	movf	___flmul@temp& (0+255),w,b
 11861  01024C  0100               	movlb	0	; () banked
 11862  01024E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11863  010250  0100               	movlb	0	; () banked
 11864  010252  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11865  010254  0100               	movlb	0	; () banked
 11866  010256  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11867  010258  0E00               	movlw	0
 11868  01025A  0100               	movlb	0	; () banked
 11869  01025C  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11870  01025E  0E00               	movlw	0
 11871  010260  0100               	movlb	0	; () banked
 11872  010262  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11873  010264  0100               	movlb	0	; () banked
 11874  010266  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11875  010268  0100               	movlb	0	; () banked
 11876  01026A  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11877  01026C  CFF3 F0DF          	movff	prodl,___flmul@temp
 11878  010270  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11879                           
 11880                           ; BSR set to: 0
 11881  010274  0100               	movlb	0	; () banked
 11882  010276  51DF               	movf	___flmul@temp& (0+255),w,b
 11883  010278  0100               	movlb	0	; () banked
 11884  01027A  6FD0               	movwf	??___flmul& (0+255),b
 11885  01027C  0100               	movlb	0	; () banked
 11886  01027E  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11887  010280  0100               	movlb	0	; () banked
 11888  010282  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11889  010284  0100               	movlb	0	; () banked
 11890  010286  6BD2               	clrf	(??___flmul+2)& (0+255),b
 11891  010288  0100               	movlb	0	; () banked
 11892  01028A  6BD3               	clrf	(??___flmul+3)& (0+255),b
 11893  01028C  C0D2  F0D3         	movff	??___flmul+2,??___flmul+3
 11894  010290  C0D1  F0D2         	movff	??___flmul+1,??___flmul+2
 11895  010294  C0D0  F0D1         	movff	??___flmul,??___flmul+1
 11896  010298  0100               	movlb	0	; () banked
 11897  01029A  6BD0               	clrf	??___flmul& (0+255),b
 11898  01029C  0100               	movlb	0	; () banked
 11899  01029E  51D0               	movf	??___flmul& (0+255),w,b
 11900  0102A0  0100               	movlb	0	; () banked
 11901  0102A2  27DB               	addwf	___flmul@prod& (0+255),f,b
 11902  0102A4  0100               	movlb	0	; () banked
 11903  0102A6  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11904  0102A8  0100               	movlb	0	; () banked
 11905  0102AA  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11906  0102AC  0100               	movlb	0	; () banked
 11907  0102AE  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11908  0102B0  0100               	movlb	0	; () banked
 11909  0102B2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11910  0102B4  0100               	movlb	0	; () banked
 11911  0102B6  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11912  0102B8  0100               	movlb	0	; () banked
 11913  0102BA  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11914                           
 11915                           ; BSR set to: 0
 11916  0102BC  C0D6  F0D0         	movff	___flmul@grs,??___flmul
 11917  0102C0  C0D7  F0D1         	movff	___flmul@grs+1,??___flmul+1
 11918  0102C4  C0D8  F0D2         	movff	___flmul@grs+2,??___flmul+2
 11919  0102C8  C0D9  F0D3         	movff	___flmul@grs+3,??___flmul+3
 11920  0102CC  0E19               	movlw	25
 11921  0102CE  D006               	goto	u10420
 11922  0102D0                     u10425:
 11923  0102D0  0100               	movlb	0	; () banked
 11924  0102D2  90D8               	bcf	status,0,c
 11925  0102D4  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11926  0102D6  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11927  0102D8  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11928  0102DA  33D0               	rrcf	??___flmul& (0+255),f,b
 11929  0102DC                     u10420:
 11930  0102DC  2EE8               	decfsz	wreg,f,c
 11931  0102DE  D7F8               	goto	u10425
 11932  0102E0  0100               	movlb	0	; () banked
 11933  0102E2  51D0               	movf	??___flmul& (0+255),w,b
 11934  0102E4  0100               	movlb	0	; () banked
 11935  0102E6  27DB               	addwf	___flmul@prod& (0+255),f,b
 11936  0102E8  0100               	movlb	0	; () banked
 11937  0102EA  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11938  0102EC  0100               	movlb	0	; () banked
 11939  0102EE  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11940  0102F0  0100               	movlb	0	; () banked
 11941  0102F2  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11942  0102F4  0100               	movlb	0	; () banked
 11943  0102F6  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11944  0102F8  0100               	movlb	0	; () banked
 11945  0102FA  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11946  0102FC  0100               	movlb	0	; () banked
 11947  0102FE  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11948                           
 11949                           ; BSR set to: 0
 11950  010300  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11951  010304  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11952  010308  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11953  01030C  0100               	movlb	0	; () banked
 11954  01030E  6BD6               	clrf	___flmul@grs& (0+255),b
 11955                           
 11956                           ; BSR set to: 0
 11957  010310  0100               	movlb	0	; () banked
 11958  010312  51D5               	movf	___flmul@aexp& (0+255),w,b
 11959  010314  C0DA  F0D0         	movff	___flmul@bexp,??___flmul
 11960  010318  0100               	movlb	0	; () banked
 11961  01031A  6BD1               	clrf	(??___flmul+1)& (0+255),b
 11962  01031C  0100               	movlb	0	; () banked
 11963  01031E  27D0               	addwf	??___flmul& (0+255),f,b
 11964  010320  0E00               	movlw	0
 11965  010322  23D1               	addwfc	(??___flmul+1)& (0+255),f,b
 11966  010324  0E82               	movlw	130
 11967  010326  0100               	movlb	0	; () banked
 11968  010328  25D0               	addwf	??___flmul& (0+255),w,b
 11969  01032A  0100               	movlb	0	; () banked
 11970  01032C  6FDF               	movwf	___flmul@temp& (0+255),b
 11971  01032E  0EFF               	movlw	255
 11972  010330  0100               	movlb	0	; () banked
 11973  010332  21D1               	addwfc	(??___flmul+1)& (0+255),w,b
 11974  010334  0100               	movlb	0	; () banked
 11975  010336  6FE0               	movwf	(___flmul@temp+1)& (0+255),b
 11976  010338  D015               	goto	l2989
 11977  01033A                     
 11978                           ; BSR set to: 0
 11979                           
 11980                           ; BSR set to: 0
 11981  01033A  0100               	movlb	0	; () banked
 11982  01033C  90D8               	bcf	status,0,c
 11983  01033E  37DB               	rlcf	___flmul@prod& (0+255),f,b
 11984  010340  37DC               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11985  010342  37DD               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11986  010344  37DE               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11987                           
 11988                           ; BSR set to: 0
 11989  010346  0100               	movlb	0	; () banked
 11990  010348  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11991  01034A  D002               	goto	l2991
 11992                           
 11993                           ; BSR set to: 0
 11994  01034C  0100               	movlb	0	; () banked
 11995  01034E  81DB               	bsf	___flmul@prod& (0+255),0,b
 11996  010350                     l2991:
 11997                           
 11998                           ; BSR set to: 0
 11999  010350  0100               	movlb	0	; () banked
 12000  010352  90D8               	bcf	status,0,c
 12001  010354  37D6               	rlcf	___flmul@grs& (0+255),f,b
 12002  010356  37D7               	rlcf	(___flmul@grs+1)& (0+255),f,b
 12003  010358  37D8               	rlcf	(___flmul@grs+2)& (0+255),f,b
 12004  01035A  37D9               	rlcf	(___flmul@grs+3)& (0+255),f,b
 12005  01035C  0100               	movlb	0	; () banked
 12006  01035E  07DF               	decf	___flmul@temp& (0+255),f,b
 12007  010360  A0D8               	btfss	status,0,c
 12008  010362  07E0               	decf	(___flmul@temp+1)& (0+255),f,b
 12009  010364                     l2989:
 12010                           
 12011                           ; BSR set to: 0
 12012                           
 12013                           ; BSR set to: 0
 12014  010364  0100               	movlb	0	; () banked
 12015  010366  AFDD               	btfss	(___flmul@prod+2)& (0+255),7,b
 12016  010368  D7E8               	goto	l2990
 12017                           
 12018                           ; BSR set to: 0
 12019                           
 12020                           ; BSR set to: 0
 12021  01036A  0E00               	movlw	0
 12022  01036C  0100               	movlb	0	; () banked
 12023  01036E  6FD5               	movwf	___flmul@aexp& (0+255),b
 12024                           
 12025                           ; BSR set to: 0
 12026  010370  0100               	movlb	0	; () banked
 12027  010372  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 12028  010374  D024               	goto	l2996
 12029                           
 12030                           ; BSR set to: 0
 12031  010376  0EFF               	movlw	255
 12032  010378  0100               	movlb	0	; () banked
 12033  01037A  15D6               	andwf	___flmul@grs& (0+255),w,b
 12034  01037C  0100               	movlb	0	; () banked
 12035  01037E  6FD0               	movwf	??___flmul& (0+255),b
 12036  010380  0EFF               	movlw	255
 12037  010382  0100               	movlb	0	; () banked
 12038  010384  15D7               	andwf	(___flmul@grs+1)& (0+255),w,b
 12039  010386  0100               	movlb	0	; () banked
 12040  010388  6FD1               	movwf	(??___flmul+1)& (0+255),b
 12041  01038A  0EFF               	movlw	255
 12042  01038C  0100               	movlb	0	; () banked
 12043  01038E  15D8               	andwf	(___flmul@grs+2)& (0+255),w,b
 12044  010390  0100               	movlb	0	; () banked
 12045  010392  6FD2               	movwf	(??___flmul+2)& (0+255),b
 12046  010394  0E7F               	movlw	127
 12047  010396  0100               	movlb	0	; () banked
 12048  010398  15D9               	andwf	(___flmul@grs+3)& (0+255),w,b
 12049  01039A  0100               	movlb	0	; () banked
 12050  01039C  6FD3               	movwf	(??___flmul+3)& (0+255),b
 12051  01039E  0100               	movlb	0	; () banked
 12052  0103A0  51D0               	movf	??___flmul& (0+255),w,b
 12053  0103A2  0100               	movlb	0	; () banked
 12054  0103A4  11D1               	iorwf	(??___flmul+1)& (0+255),w,b
 12055  0103A6  0100               	movlb	0	; () banked
 12056  0103A8  11D2               	iorwf	(??___flmul+2)& (0+255),w,b
 12057  0103AA  0100               	movlb	0	; () banked
 12058  0103AC  11D3               	iorwf	(??___flmul+3)& (0+255),w,b
 12059  0103AE  A4D8               	btfss	status,2,c
 12060  0103B0  D003               	goto	u10470
 12061                           
 12062                           ; BSR set to: 0
 12063                           
 12064                           ; BSR set to: 0
 12065  0103B2  0100               	movlb	0	; () banked
 12066  0103B4  A1DB               	btfss	___flmul@prod& (0+255),0,b
 12067  0103B6  D003               	goto	l2996
 12068  0103B8                     u10470:
 12069                           
 12070                           ; BSR set to: 0
 12071  0103B8  0E01               	movlw	1
 12072  0103BA  0100               	movlb	0	; () banked
 12073  0103BC  6FD5               	movwf	___flmul@aexp& (0+255),b
 12074  0103BE                     l2996:
 12075                           
 12076                           ; BSR set to: 0
 12077                           
 12078                           ; BSR set to: 0
 12079                           
 12080                           ; BSR set to: 0
 12081  0103BE  0100               	movlb	0	; () banked
 12082  0103C0  51D5               	movf	___flmul@aexp& (0+255),w,b
 12083  0103C2  0100               	movlb	0	; () banked
 12084  0103C4  B4D8               	btfsc	status,2,c
 12085  0103C6  D023               	goto	l2998
 12086                           
 12087                           ; BSR set to: 0
 12088  0103C8  0E01               	movlw	1
 12089  0103CA  0100               	movlb	0	; () banked
 12090  0103CC  27DB               	addwf	___flmul@prod& (0+255),f,b
 12091  0103CE  0E00               	movlw	0
 12092  0103D0  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12093  0103D2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12094  0103D4  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12095                           
 12096                           ; BSR set to: 0
 12097  0103D6  0100               	movlb	0	; () banked
 12098  0103D8  A1DE               	btfss	(___flmul@prod+3)& (0+255),0,b
 12099  0103DA  D019               	goto	l2998
 12100                           
 12101                           ; BSR set to: 0
 12102  0103DC  C0DB  F0D0         	movff	___flmul@prod,??___flmul
 12103  0103E0  C0DC  F0D1         	movff	___flmul@prod+1,??___flmul+1
 12104  0103E4  C0DD  F0D2         	movff	___flmul@prod+2,??___flmul+2
 12105  0103E8  C0DE  F0D3         	movff	___flmul@prod+3,??___flmul+3
 12106  0103EC  0100               	movlb	0	; () banked
 12107  0103EE  35D3               	rlcf	(??___flmul+3)& (0+255),w,b
 12108  0103F0  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 12109  0103F2  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 12110  0103F4  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 12111  0103F6  33D0               	rrcf	??___flmul& (0+255),f,b
 12112  0103F8  C0D0  F0DB         	movff	??___flmul,___flmul@prod
 12113  0103FC  C0D1  F0DC         	movff	??___flmul+1,___flmul@prod+1
 12114  010400  C0D2  F0DD         	movff	??___flmul+2,___flmul@prod+2
 12115  010404  C0D3  F0DE         	movff	??___flmul+3,___flmul@prod+3
 12116                           
 12117                           ; BSR set to: 0
 12118  010408  0100               	movlb	0	; () banked
 12119  01040A  4BDF               	infsnz	___flmul@temp& (0+255),f,b
 12120  01040C  2BE0               	incf	(___flmul@temp+1)& (0+255),f,b
 12121  01040E                     l2998:
 12122                           
 12123                           ; BSR set to: 0
 12124                           
 12125                           ; BSR set to: 0
 12126                           
 12127                           ; BSR set to: 0
 12128  01040E  0100               	movlb	0	; () banked
 12129  010410  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 12130  010412  D010               	goto	l2999
 12131  010414  0100               	movlb	0	; () banked
 12132  010416  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12133  010418  E104               	bnz	u10500
 12134  01041A  0100               	movlb	0	; () banked
 12135  01041C  29DF               	incf	___flmul@temp& (0+255),w,b
 12136  01041E  A0D8               	btfss	status,0,c
 12137  010420  D009               	goto	l2999
 12138  010422                     u10500:
 12139                           
 12140                           ; BSR set to: 0
 12141  010422  0E00               	movlw	0
 12142  010424  0100               	movlb	0	; () banked
 12143  010426  6FDB               	movwf	___flmul@prod& (0+255),b
 12144  010428  0E00               	movlw	0
 12145  01042A  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12146  01042C  0E80               	movlw	128
 12147  01042E  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12148  010430  0E7F               	movlw	127
 12149  010432  D02B               	goto	L5
 12150  010434                     l2999:
 12151                           
 12152                           ; BSR set to: 0
 12153                           
 12154                           ; BSR set to: 0
 12155  010434  0100               	movlb	0	; () banked
 12156  010436  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 12157  010438  D007               	goto	u10510
 12158  01043A  0100               	movlb	0	; () banked
 12159  01043C  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12160  01043E  E111               	bnz	l3001
 12161  010440  0100               	movlb	0	; () banked
 12162  010442  05DF               	decf	___flmul@temp& (0+255),w,b
 12163  010444  B0D8               	btfsc	status,0,c
 12164  010446  D00D               	goto	l3001
 12165  010448                     u10510:
 12166                           
 12167                           ; BSR set to: 0
 12168  010448  0E00               	movlw	0
 12169  01044A  0100               	movlb	0	; () banked
 12170  01044C  6FDB               	movwf	___flmul@prod& (0+255),b
 12171  01044E  0E00               	movlw	0
 12172  010450  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12173  010452  0E00               	movlw	0
 12174  010454  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12175  010456  0E00               	movlw	0
 12176  010458  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12177  01045A  0E00               	movlw	0
 12178  01045C  0100               	movlb	0	; () banked
 12179  01045E  6FD4               	movwf	___flmul@sign& (0+255),b
 12180  010460  D015               	goto	l3002
 12181  010462                     l3001:
 12182                           
 12183                           ; BSR set to: 0
 12184  010462  C0DF  F0DA         	movff	___flmul@temp,___flmul@bexp
 12185                           
 12186                           ; BSR set to: 0
 12187  010466  0EFF               	movlw	255
 12188  010468  0100               	movlb	0	; () banked
 12189  01046A  17DB               	andwf	___flmul@prod& (0+255),f,b
 12190  01046C  0EFF               	movlw	255
 12191  01046E  17DC               	andwf	(___flmul@prod+1)& (0+255),f,b
 12192  010470  0E7F               	movlw	127
 12193  010472  17DD               	andwf	(___flmul@prod+2)& (0+255),f,b
 12194  010474  0E00               	movlw	0
 12195  010476  17DE               	andwf	(___flmul@prod+3)& (0+255),f,b
 12196                           
 12197                           ; BSR set to: 0
 12198  010478  0100               	movlb	0	; () banked
 12199  01047A  A1DA               	btfss	___flmul@bexp& (0+255),0,b
 12200  01047C  D002               	goto	l3003
 12201                           
 12202                           ; BSR set to: 0
 12203  01047E  0100               	movlb	0	; () banked
 12204  010480  8FDD               	bsf	(___flmul@prod+2)& (0+255),7,b
 12205  010482                     l3003:
 12206                           
 12207                           ; BSR set to: 0
 12208                           
 12209                           ; BSR set to: 0
 12210  010482  0100               	movlb	0	; () banked
 12211  010484  90D8               	bcf	status,0,c
 12212  010486  31DA               	rrcf	___flmul@bexp& (0+255),w,b
 12213  010488  0100               	movlb	0	; () banked
 12214  01048A                     L5:
 12215  01048A  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12216  01048C                     l3002:
 12217                           
 12218                           ; BSR set to: 0
 12219                           
 12220                           ; BSR set to: 0
 12221                           
 12222                           ; BSR set to: 0
 12223  01048C  0100               	movlb	0	; () banked
 12224  01048E  51D4               	movf	___flmul@sign& (0+255),w,b
 12225  010490  0100               	movlb	0	; () banked
 12226  010492  13DE               	iorwf	(___flmul@prod+3)& (0+255),f,b
 12227                           
 12228                           ; BSR set to: 0
 12229  010494  C0DB  F0C8         	movff	___flmul@prod,?___flmul
 12230  010498  C0DC  F0C9         	movff	___flmul@prod+1,?___flmul+1
 12231  01049C  C0DD  F0CA         	movff	___flmul@prod+2,?___flmul+2
 12232  0104A0  C0DE  F0CB         	movff	___flmul@prod+3,?___flmul+3
 12233  0104A4  0012               	return	
 12234  0104A6                     __end_of___flmul:
 12235                           	opt stack 0
 12236                           tblptru	equ	0xFF8
 12237                           tblptrh	equ	0xFF7
 12238                           tblptrl	equ	0xFF6
 12239                           tablat	equ	0xFF5
 12240                           prodh	equ	0xFF4
 12241                           prodl	equ	0xFF3
 12242                           intcon	equ	0xFF2
 12243                           postinc0	equ	0xFEE
 12244                           wreg	equ	0xFE8
 12245                           postdec1	equ	0xFE5
 12246                           fsr1h	equ	0xFE2
 12247                           fsr1l	equ	0xFE1
 12248                           indf2	equ	0xFDF
 12249                           postinc2	equ	0xFDE
 12250                           postdec2	equ	0xFDD
 12251                           fsr2h	equ	0xFDA
 12252                           fsr2l	equ	0xFD9
 12253                           status	equ	0xFD8
 12254                           
 12255 ;; *************** function ___fldiv *****************
 12256 ;; Defined at:
 12257 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;  b               4    0[BANK0 ] unsigned char 
 12260 ;;  a               4    4[BANK0 ] unsigned char 
 12261 ;; Auto vars:     Size  Location     Type
 12262 ;;  grs             4   19[BANK0 ] unsigned long 
 12263 ;;  rem             4   13[BANK0 ] unsigned long 
 12264 ;;  new_exp         2   17[BANK0 ] int 
 12265 ;;  aexp            1   24[BANK0 ] unsigned char 
 12266 ;;  bexp            1   23[BANK0 ] unsigned char 
 12267 ;;  sign            1   12[BANK0 ] unsigned char 
 12268 ;; Return value:  Size  Location     Type
 12269 ;;                  4    0[BANK0 ] unsigned char 
 12270 ;; Registers used:
 12271 ;;		wreg, status,2, status,0
 12272 ;; Tracked objects:
 12273 ;;		On entry : 0/0
 12274 ;;		On exit  : 0/0
 12275 ;;		Unchanged: 0/0
 12276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12277 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12278 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12279 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12280 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12281 ;;Total ram usage:       25 bytes
 12282 ;; Hardware stack levels used:    1
 12283 ;; Hardware stack levels required when called:    7
 12284 ;; This function calls:
 12285 ;;		Nothing
 12286 ;; This function is called by:
 12287 ;;		_ADC_Voltage
 12288 ;;		_findClosestWall
 12289 ;;		_mode1
 12290 ;; This function uses a non-reentrant model
 12291 ;;
 12292                           
 12293                           	psect	text48
 12294  0110A8                     __ptext48:
 12295                           	opt stack 0
 12296  0110A8                     ___fldiv:
 12297                           	opt stack 21
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;incstack = 0
 12301  0110A8  0100               	movlb	0	; () banked
 12302  0110AA  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12303  0110AC  0B80               	andlw	128
 12304  0110AE  0100               	movlb	0	; () banked
 12305  0110B0  6FC6               	movwf	___fldiv@sign& (0+255),b
 12306  0110B2  0100               	movlb	0	; () banked
 12307  0110B4  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12308  0110B6  25BD               	addwf	(___fldiv@b+3)& (0+255),w,b
 12309  0110B8  0100               	movlb	0	; () banked
 12310  0110BA  6FD1               	movwf	___fldiv@bexp& (0+255),b
 12311                           
 12312                           ; BSR set to: 0
 12313  0110BC  0100               	movlb	0	; () banked
 12314  0110BE  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12315  0110C0  D002               	goto	l2943
 12316                           
 12317                           ; BSR set to: 0
 12318  0110C2  0100               	movlb	0	; () banked
 12319  0110C4  81D1               	bsf	___fldiv@bexp& (0+255),0,b
 12320  0110C6                     l2943:
 12321                           
 12322                           ; BSR set to: 0
 12323                           
 12324                           ; BSR set to: 0
 12325  0110C6  0100               	movlb	0	; () banked
 12326  0110C8  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12327  0110CA  0100               	movlb	0	; () banked
 12328  0110CC  B4D8               	btfsc	status,2,c
 12329  0110CE  D012               	goto	l2944
 12330                           
 12331                           ; BSR set to: 0
 12332  0110D0  0100               	movlb	0	; () banked
 12333  0110D2  29D1               	incf	___fldiv@bexp& (0+255),w,b
 12334  0110D4  A4D8               	btfss	status,2,c
 12335  0110D6  D009               	goto	l2945
 12336                           
 12337                           ; BSR set to: 0
 12338  0110D8  0E00               	movlw	0
 12339  0110DA  0100               	movlb	0	; () banked
 12340  0110DC  6FBA               	movwf	___fldiv@b& (0+255),b
 12341  0110DE  0E00               	movlw	0
 12342  0110E0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12343  0110E2  0E00               	movlw	0
 12344  0110E4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12345  0110E6  0E00               	movlw	0
 12346  0110E8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12347  0110EA                     l2945:
 12348                           
 12349                           ; BSR set to: 0
 12350                           
 12351                           ; BSR set to: 0
 12352  0110EA  0100               	movlb	0	; () banked
 12353  0110EC  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12354                           
 12355                           ; BSR set to: 0
 12356  0110EE  0E00               	movlw	0
 12357  0110F0  0100               	movlb	0	; () banked
 12358  0110F2  D008               	goto	L6
 12359  0110F4                     l2944:
 12360                           
 12361                           ; BSR set to: 0
 12362                           
 12363                           ; BSR set to: 0
 12364  0110F4  0E00               	movlw	0
 12365  0110F6  0100               	movlb	0	; () banked
 12366  0110F8  6FBA               	movwf	___fldiv@b& (0+255),b
 12367  0110FA  0E00               	movlw	0
 12368  0110FC  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12369  0110FE  0E00               	movlw	0
 12370  011100  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12371  011102  0E00               	movlw	0
 12372  011104                     L6:
 12373  011104  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12374                           
 12375                           ; BSR set to: 0
 12376                           
 12377                           ; BSR set to: 0
 12378  011106  0100               	movlb	0	; () banked
 12379  011108  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12380  01110A  0B80               	andlw	128
 12381  01110C  0100               	movlb	0	; () banked
 12382  01110E  1BC6               	xorwf	___fldiv@sign& (0+255),f,b
 12383                           
 12384                           ; BSR set to: 0
 12385  011110  0100               	movlb	0	; () banked
 12386  011112  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12387  011114  25C1               	addwf	(___fldiv@a+3)& (0+255),w,b
 12388  011116  0100               	movlb	0	; () banked
 12389  011118  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12390                           
 12391                           ; BSR set to: 0
 12392  01111A  0100               	movlb	0	; () banked
 12393  01111C  AFC0               	btfss	(___fldiv@a+2)& (0+255),7,b
 12394  01111E  D002               	goto	l2947
 12395                           
 12396                           ; BSR set to: 0
 12397  011120  0100               	movlb	0	; () banked
 12398  011122  81D2               	bsf	___fldiv@aexp& (0+255),0,b
 12399  011124                     l2947:
 12400                           
 12401                           ; BSR set to: 0
 12402                           
 12403                           ; BSR set to: 0
 12404  011124  0100               	movlb	0	; () banked
 12405  011126  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12406  011128  0100               	movlb	0	; () banked
 12407  01112A  B4D8               	btfsc	status,2,c
 12408  01112C  D012               	goto	l2948
 12409                           
 12410                           ; BSR set to: 0
 12411  01112E  0100               	movlb	0	; () banked
 12412  011130  29D2               	incf	___fldiv@aexp& (0+255),w,b
 12413  011132  A4D8               	btfss	status,2,c
 12414  011134  D009               	goto	l2949
 12415                           
 12416                           ; BSR set to: 0
 12417  011136  0E00               	movlw	0
 12418  011138  0100               	movlb	0	; () banked
 12419  01113A  6FBE               	movwf	___fldiv@a& (0+255),b
 12420  01113C  0E00               	movlw	0
 12421  01113E  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12422  011140  0E00               	movlw	0
 12423  011142  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12424  011144  0E00               	movlw	0
 12425  011146  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12426  011148                     l2949:
 12427                           
 12428                           ; BSR set to: 0
 12429                           
 12430                           ; BSR set to: 0
 12431  011148  0100               	movlb	0	; () banked
 12432  01114A  8FC0               	bsf	(___fldiv@a+2)& (0+255),7,b
 12433                           
 12434                           ; BSR set to: 0
 12435  01114C  0E00               	movlw	0
 12436  01114E  0100               	movlb	0	; () banked
 12437  011150  D008               	goto	L7
 12438  011152                     l2948:
 12439                           
 12440                           ; BSR set to: 0
 12441                           
 12442                           ; BSR set to: 0
 12443  011152  0E00               	movlw	0
 12444  011154  0100               	movlb	0	; () banked
 12445  011156  6FBE               	movwf	___fldiv@a& (0+255),b
 12446  011158  0E00               	movlw	0
 12447  01115A  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12448  01115C  0E00               	movlw	0
 12449  01115E  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12450  011160  0E00               	movlw	0
 12451  011162                     L7:
 12452  011162  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12453                           
 12454                           ; BSR set to: 0
 12455                           
 12456                           ; BSR set to: 0
 12457  011164  0100               	movlb	0	; () banked
 12458  011166  51BE               	movf	___fldiv@a& (0+255),w,b
 12459  011168  0100               	movlb	0	; () banked
 12460  01116A  11BF               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12461  01116C  0100               	movlb	0	; () banked
 12462  01116E  11C0               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12463  011170  0100               	movlb	0	; () banked
 12464  011172  11C1               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12465  011174  A4D8               	btfss	status,2,c
 12466  011176  D017               	goto	l2951
 12467                           
 12468                           ; BSR set to: 0
 12469  011178  0E00               	movlw	0
 12470  01117A  0100               	movlb	0	; () banked
 12471  01117C  6FBA               	movwf	___fldiv@b& (0+255),b
 12472  01117E  0E00               	movlw	0
 12473  011180  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12474  011182  0E00               	movlw	0
 12475  011184  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12476  011186  0E00               	movlw	0
 12477  011188  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12478                           
 12479                           ; BSR set to: 0
 12480  01118A  0100               	movlb	0	; () banked
 12481  01118C  0E80               	movlw	128
 12482  01118E  13BC               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12483  011190  0E7F               	movlw	127
 12484  011192  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12485                           
 12486                           ; BSR set to: 0
 12487  011194  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12488  011198  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12489  01119C  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12490  0111A0  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12491                           
 12492                           ; BSR set to: 0
 12493  0111A4  0012               	return	
 12494  0111A6                     l2951:
 12495                           
 12496                           ; BSR set to: 0
 12497                           
 12498                           ; BSR set to: 0
 12499  0111A6  0100               	movlb	0	; () banked
 12500  0111A8  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12501  0111AA  0100               	movlb	0	; () banked
 12502  0111AC  A4D8               	btfss	status,2,c
 12503  0111AE  D012               	goto	l2953
 12504                           
 12505                           ; BSR set to: 0
 12506  0111B0  0E00               	movlw	0
 12507  0111B2  0100               	movlb	0	; () banked
 12508  0111B4  6FBA               	movwf	___fldiv@b& (0+255),b
 12509  0111B6  0E00               	movlw	0
 12510  0111B8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12511  0111BA  0E00               	movlw	0
 12512  0111BC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12513  0111BE  0E00               	movlw	0
 12514  0111C0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12515                           
 12516                           ; BSR set to: 0
 12517  0111C2  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12518  0111C6  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12519  0111CA  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12520  0111CE  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12521                           
 12522                           ; BSR set to: 0
 12523  0111D2  0012               	return	
 12524  0111D4                     l2953:
 12525                           
 12526                           ; BSR set to: 0
 12527                           
 12528                           ; BSR set to: 0
 12529  0111D4  0100               	movlb	0	; () banked
 12530  0111D6  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12531  0111D8  0100               	movlb	0	; () banked
 12532  0111DA  6FC2               	movwf	??___fldiv& (0+255),b
 12533  0111DC  6BC3               	clrf	(??___fldiv+1)& (0+255),b
 12534  0111DE  0100               	movlb	0	; () banked
 12535  0111E0  1FC2               	comf	??___fldiv& (0+255),f,b
 12536  0111E2  1FC3               	comf	(??___fldiv+1)& (0+255),f,b
 12537  0111E4  4BC2               	infsnz	??___fldiv& (0+255),f,b
 12538  0111E6  2BC3               	incf	(??___fldiv+1)& (0+255),f,b
 12539  0111E8  0100               	movlb	0	; () banked
 12540  0111EA  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12541  0111EC  0100               	movlb	0	; () banked
 12542  0111EE  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12543  0111F0  6BC5               	clrf	(??___fldiv+3)& (0+255),b
 12544  0111F2  0100               	movlb	0	; () banked
 12545  0111F4  51C2               	movf	??___fldiv& (0+255),w,b
 12546  0111F6  0100               	movlb	0	; () banked
 12547  0111F8  27C4               	addwf	(??___fldiv+2)& (0+255),f,b
 12548  0111FA  0100               	movlb	0	; () banked
 12549  0111FC  51C3               	movf	(??___fldiv+1)& (0+255),w,b
 12550  0111FE  0100               	movlb	0	; () banked
 12551  011200  23C5               	addwfc	(??___fldiv+3)& (0+255),f,b
 12552  011202  0E7F               	movlw	127
 12553  011204  0100               	movlb	0	; () banked
 12554  011206  25C4               	addwf	(??___fldiv+2)& (0+255),w,b
 12555  011208  0100               	movlb	0	; () banked
 12556  01120A  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12557  01120C  0E00               	movlw	0
 12558  01120E  0100               	movlb	0	; () banked
 12559  011210  21C5               	addwfc	(??___fldiv+3)& (0+255),w,b
 12560  011212  0100               	movlb	0	; () banked
 12561  011214  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12562                           
 12563                           ; BSR set to: 0
 12564  011216  C0BA  F0C7         	movff	___fldiv@b,___fldiv@rem
 12565  01121A  C0BB  F0C8         	movff	___fldiv@b+1,___fldiv@rem+1
 12566  01121E  C0BC  F0C9         	movff	___fldiv@b+2,___fldiv@rem+2
 12567  011222  C0BD  F0CA         	movff	___fldiv@b+3,___fldiv@rem+3
 12568                           
 12569                           ; BSR set to: 0
 12570  011226  0E00               	movlw	0
 12571  011228  0100               	movlb	0	; () banked
 12572  01122A  6FBA               	movwf	___fldiv@b& (0+255),b
 12573  01122C  0E00               	movlw	0
 12574  01122E  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12575  011230  0E00               	movlw	0
 12576  011232  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12577  011234  0E00               	movlw	0
 12578  011236  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12579                           
 12580                           ; BSR set to: 0
 12581  011238  0E00               	movlw	0
 12582  01123A  0100               	movlb	0	; () banked
 12583  01123C  6FCD               	movwf	___fldiv@grs& (0+255),b
 12584  01123E  0E00               	movlw	0
 12585  011240  6FCE               	movwf	(___fldiv@grs+1)& (0+255),b
 12586  011242  0E00               	movlw	0
 12587  011244  6FCF               	movwf	(___fldiv@grs+2)& (0+255),b
 12588  011246  0E00               	movlw	0
 12589  011248  6FD0               	movwf	(___fldiv@grs+3)& (0+255),b
 12590                           
 12591                           ; BSR set to: 0
 12592  01124A  0E00               	movlw	0
 12593  01124C  0100               	movlb	0	; () banked
 12594  01124E  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12595  011250  D042               	goto	l2954
 12596  011252                     
 12597                           ; BSR set to: 0
 12598                           
 12599                           ; BSR set to: 0
 12600  011252  0100               	movlb	0	; () banked
 12601  011254  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12602  011256  0100               	movlb	0	; () banked
 12603  011258  B4D8               	btfsc	status,2,c
 12604  01125A  D017               	goto	l2956
 12605                           
 12606                           ; BSR set to: 0
 12607  01125C  0100               	movlb	0	; () banked
 12608  01125E  90D8               	bcf	status,0,c
 12609  011260  37C7               	rlcf	___fldiv@rem& (0+255),f,b
 12610  011262  37C8               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12611  011264  37C9               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12612  011266  37CA               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12613  011268  0100               	movlb	0	; () banked
 12614  01126A  90D8               	bcf	status,0,c
 12615  01126C  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12616  01126E  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12617  011270  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12618  011272  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12619                           
 12620                           ; BSR set to: 0
 12621  011274  0100               	movlb	0	; () banked
 12622  011276  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12623  011278  D002               	goto	l2957
 12624                           
 12625                           ; BSR set to: 0
 12626  01127A  0100               	movlb	0	; () banked
 12627  01127C  81BA               	bsf	___fldiv@b& (0+255),0,b
 12628  01127E                     l2957:
 12629                           
 12630                           ; BSR set to: 0
 12631  01127E  0100               	movlb	0	; () banked
 12632  011280  90D8               	bcf	status,0,c
 12633  011282  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12634  011284  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12635  011286  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12636  011288  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12637  01128A                     l2956:
 12638                           
 12639                           ; BSR set to: 0
 12640                           
 12641                           ; BSR set to: 0
 12642  01128A  0100               	movlb	0	; () banked
 12643  01128C  51BE               	movf	___fldiv@a& (0+255),w,b
 12644  01128E  0100               	movlb	0	; () banked
 12645  011290  5DC7               	subwf	___fldiv@rem& (0+255),w,b
 12646  011292  0100               	movlb	0	; () banked
 12647  011294  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12648  011296  0100               	movlb	0	; () banked
 12649  011298  59C8               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12650  01129A  0100               	movlb	0	; () banked
 12651  01129C  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12652  01129E  0100               	movlb	0	; () banked
 12653  0112A0  59C9               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12654  0112A2  0100               	movlb	0	; () banked
 12655  0112A4  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12656  0112A6  0100               	movlb	0	; () banked
 12657  0112A8  59CA               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12658  0112AA  A0D8               	btfss	status,0,c
 12659  0112AC  D012               	goto	l2958
 12660                           
 12661                           ; BSR set to: 0
 12662  0112AE  0100               	movlb	0	; () banked
 12663  0112B0  8DD0               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12664                           
 12665                           ; BSR set to: 0
 12666  0112B2  0100               	movlb	0	; () banked
 12667  0112B4  51BE               	movf	___fldiv@a& (0+255),w,b
 12668  0112B6  0100               	movlb	0	; () banked
 12669  0112B8  5FC7               	subwf	___fldiv@rem& (0+255),f,b
 12670  0112BA  0100               	movlb	0	; () banked
 12671  0112BC  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12672  0112BE  0100               	movlb	0	; () banked
 12673  0112C0  5BC8               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12674  0112C2  0100               	movlb	0	; () banked
 12675  0112C4  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12676  0112C6  0100               	movlb	0	; () banked
 12677  0112C8  5BC9               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12678  0112CA  0100               	movlb	0	; () banked
 12679  0112CC  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12680  0112CE  0100               	movlb	0	; () banked
 12681  0112D0  5BCA               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12682  0112D2                     l2958:
 12683                           
 12684                           ; BSR set to: 0
 12685                           
 12686                           ; BSR set to: 0
 12687  0112D2  0100               	movlb	0	; () banked
 12688  0112D4  2BD2               	incf	___fldiv@aexp& (0+255),f,b
 12689  0112D6                     l2954:
 12690                           
 12691                           ; BSR set to: 0
 12692  0112D6  0E19               	movlw	25
 12693  0112D8  0100               	movlb	0	; () banked
 12694  0112DA  65D2               	cpfsgt	___fldiv@aexp& (0+255),b
 12695  0112DC  D7BA               	goto	l2955
 12696                           
 12697                           ; BSR set to: 0
 12698                           
 12699                           ; BSR set to: 0
 12700  0112DE  0100               	movlb	0	; () banked
 12701  0112E0  51C7               	movf	___fldiv@rem& (0+255),w,b
 12702  0112E2  0100               	movlb	0	; () banked
 12703  0112E4  11C8               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12704  0112E6  0100               	movlb	0	; () banked
 12705  0112E8  11C9               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12706  0112EA  0100               	movlb	0	; () banked
 12707  0112EC  11CA               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12708  0112EE  B4D8               	btfsc	status,2,c
 12709  0112F0  D018               	goto	l2961
 12710                           
 12711                           ; BSR set to: 0
 12712  0112F2  0100               	movlb	0	; () banked
 12713  0112F4  81CD               	bsf	___fldiv@grs& (0+255),0,b
 12714                           
 12715                           ; BSR set to: 0
 12716  0112F6  D015               	goto	l2961
 12717  0112F8                     
 12718                           ; BSR set to: 0
 12719                           
 12720                           ; BSR set to: 0
 12721  0112F8  0100               	movlb	0	; () banked
 12722  0112FA  90D8               	bcf	status,0,c
 12723  0112FC  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12724  0112FE  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12725  011300  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12726  011302  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12727                           
 12728                           ; BSR set to: 0
 12729  011304  0100               	movlb	0	; () banked
 12730  011306  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12731  011308  D002               	goto	l2963
 12732                           
 12733                           ; BSR set to: 0
 12734  01130A  0100               	movlb	0	; () banked
 12735  01130C  81BA               	bsf	___fldiv@b& (0+255),0,b
 12736  01130E                     l2963:
 12737                           
 12738                           ; BSR set to: 0
 12739  01130E  0100               	movlb	0	; () banked
 12740  011310  90D8               	bcf	status,0,c
 12741  011312  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12742  011314  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12743  011316  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12744  011318  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12745  01131A  0100               	movlb	0	; () banked
 12746  01131C  07CB               	decf	___fldiv@new_exp& (0+255),f,b
 12747  01131E  A0D8               	btfss	status,0,c
 12748  011320  07CC               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12749  011322                     l2961:
 12750                           
 12751                           ; BSR set to: 0
 12752                           
 12753                           ; BSR set to: 0
 12754  011322  0100               	movlb	0	; () banked
 12755  011324  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12756  011326  D7E8               	goto	l2962
 12757                           
 12758                           ; BSR set to: 0
 12759                           
 12760                           ; BSR set to: 0
 12761  011328  0E00               	movlw	0
 12762  01132A  0100               	movlb	0	; () banked
 12763  01132C  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12764                           
 12765                           ; BSR set to: 0
 12766  01132E  0100               	movlb	0	; () banked
 12767  011330  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12768  011332  D024               	goto	l2968
 12769                           
 12770                           ; BSR set to: 0
 12771  011334  0EFF               	movlw	255
 12772  011336  0100               	movlb	0	; () banked
 12773  011338  15CD               	andwf	___fldiv@grs& (0+255),w,b
 12774  01133A  0100               	movlb	0	; () banked
 12775  01133C  6FC2               	movwf	??___fldiv& (0+255),b
 12776  01133E  0EFF               	movlw	255
 12777  011340  0100               	movlb	0	; () banked
 12778  011342  15CE               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12779  011344  0100               	movlb	0	; () banked
 12780  011346  6FC3               	movwf	(??___fldiv+1)& (0+255),b
 12781  011348  0EFF               	movlw	255
 12782  01134A  0100               	movlb	0	; () banked
 12783  01134C  15CF               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12784  01134E  0100               	movlb	0	; () banked
 12785  011350  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12786  011352  0E7F               	movlw	127
 12787  011354  0100               	movlb	0	; () banked
 12788  011356  15D0               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12789  011358  0100               	movlb	0	; () banked
 12790  01135A  6FC5               	movwf	(??___fldiv+3)& (0+255),b
 12791  01135C  0100               	movlb	0	; () banked
 12792  01135E  51C2               	movf	??___fldiv& (0+255),w,b
 12793  011360  0100               	movlb	0	; () banked
 12794  011362  11C3               	iorwf	(??___fldiv+1)& (0+255),w,b
 12795  011364  0100               	movlb	0	; () banked
 12796  011366  11C4               	iorwf	(??___fldiv+2)& (0+255),w,b
 12797  011368  0100               	movlb	0	; () banked
 12798  01136A  11C5               	iorwf	(??___fldiv+3)& (0+255),w,b
 12799  01136C  A4D8               	btfss	status,2,c
 12800  01136E  D003               	goto	u10280
 12801                           
 12802                           ; BSR set to: 0
 12803                           
 12804                           ; BSR set to: 0
 12805  011370  0100               	movlb	0	; () banked
 12806  011372  A1BA               	btfss	___fldiv@b& (0+255),0,b
 12807  011374  D003               	goto	l2968
 12808  011376                     u10280:
 12809                           
 12810                           ; BSR set to: 0
 12811  011376  0E01               	movlw	1
 12812  011378  0100               	movlb	0	; () banked
 12813  01137A  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12814  01137C                     l2968:
 12815                           
 12816                           ; BSR set to: 0
 12817                           
 12818                           ; BSR set to: 0
 12819                           
 12820                           ; BSR set to: 0
 12821  01137C  0100               	movlb	0	; () banked
 12822  01137E  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12823  011380  0100               	movlb	0	; () banked
 12824  011382  B4D8               	btfsc	status,2,c
 12825  011384  D023               	goto	l2970
 12826                           
 12827                           ; BSR set to: 0
 12828  011386  0E01               	movlw	1
 12829  011388  0100               	movlb	0	; () banked
 12830  01138A  27BA               	addwf	___fldiv@b& (0+255),f,b
 12831  01138C  0E00               	movlw	0
 12832  01138E  23BB               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12833  011390  23BC               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12834  011392  23BD               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12835                           
 12836                           ; BSR set to: 0
 12837  011394  0100               	movlb	0	; () banked
 12838  011396  A1BD               	btfss	(___fldiv@b+3)& (0+255),0,b
 12839  011398  D019               	goto	l2970
 12840                           
 12841                           ; BSR set to: 0
 12842  01139A  C0BA  F0C2         	movff	___fldiv@b,??___fldiv
 12843  01139E  C0BB  F0C3         	movff	___fldiv@b+1,??___fldiv+1
 12844  0113A2  C0BC  F0C4         	movff	___fldiv@b+2,??___fldiv+2
 12845  0113A6  C0BD  F0C5         	movff	___fldiv@b+3,??___fldiv+3
 12846  0113AA  0100               	movlb	0	; () banked
 12847  0113AC  35C5               	rlcf	(??___fldiv+3)& (0+255),w,b
 12848  0113AE  33C5               	rrcf	(??___fldiv+3)& (0+255),f,b
 12849  0113B0  33C4               	rrcf	(??___fldiv+2)& (0+255),f,b
 12850  0113B2  33C3               	rrcf	(??___fldiv+1)& (0+255),f,b
 12851  0113B4  33C2               	rrcf	??___fldiv& (0+255),f,b
 12852  0113B6  C0C2  F0BA         	movff	??___fldiv,___fldiv@b
 12853  0113BA  C0C3  F0BB         	movff	??___fldiv+1,___fldiv@b+1
 12854  0113BE  C0C4  F0BC         	movff	??___fldiv+2,___fldiv@b+2
 12855  0113C2  C0C5  F0BD         	movff	??___fldiv+3,___fldiv@b+3
 12856                           
 12857                           ; BSR set to: 0
 12858  0113C6  0100               	movlb	0	; () banked
 12859  0113C8  4BCB               	infsnz	___fldiv@new_exp& (0+255),f,b
 12860  0113CA  2BCC               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12861  0113CC                     l2970:
 12862                           
 12863                           ; BSR set to: 0
 12864                           
 12865                           ; BSR set to: 0
 12866                           
 12867                           ; BSR set to: 0
 12868  0113CC  0100               	movlb	0	; () banked
 12869  0113CE  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12870  0113D0  D014               	goto	l2971
 12871  0113D2  0100               	movlb	0	; () banked
 12872  0113D4  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12873  0113D6  E104               	bnz	u10310
 12874  0113D8  0100               	movlb	0	; () banked
 12875  0113DA  29CB               	incf	___fldiv@new_exp& (0+255),w,b
 12876  0113DC  A0D8               	btfss	status,0,c
 12877  0113DE  D00D               	goto	l2971
 12878  0113E0                     u10310:
 12879                           
 12880                           ; BSR set to: 0
 12881  0113E0  0E00               	movlw	0
 12882  0113E2  0100               	movlb	0	; () banked
 12883  0113E4  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12884  0113E6  69CB               	setf	___fldiv@new_exp& (0+255),b
 12885  0113E8  0E00               	movlw	0
 12886  0113EA  0100               	movlb	0	; () banked
 12887  0113EC  6FBA               	movwf	___fldiv@b& (0+255),b
 12888  0113EE  0E00               	movlw	0
 12889  0113F0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12890  0113F2  0E00               	movlw	0
 12891  0113F4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12892  0113F6  0E00               	movlw	0
 12893  0113F8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12894  0113FA                     l2971:
 12895                           
 12896                           ; BSR set to: 0
 12897                           
 12898                           ; BSR set to: 0
 12899  0113FA  0100               	movlb	0	; () banked
 12900  0113FC  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12901  0113FE  D007               	goto	u10320
 12902  011400  0100               	movlb	0	; () banked
 12903  011402  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12904  011404  E115               	bnz	l13716
 12905  011406  0100               	movlb	0	; () banked
 12906  011408  05CB               	decf	___fldiv@new_exp& (0+255),w,b
 12907  01140A  B0D8               	btfsc	status,0,c
 12908  01140C  D011               	goto	l2972
 12909  01140E                     u10320:
 12910                           
 12911                           ; BSR set to: 0
 12912  01140E  0E00               	movlw	0
 12913  011410  0100               	movlb	0	; () banked
 12914  011412  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12915  011414  0E00               	movlw	0
 12916  011416  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12917  011418  0E00               	movlw	0
 12918  01141A  0100               	movlb	0	; () banked
 12919  01141C  6FBA               	movwf	___fldiv@b& (0+255),b
 12920  01141E  0E00               	movlw	0
 12921  011420  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12922  011422  0E00               	movlw	0
 12923  011424  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12924  011426  0E00               	movlw	0
 12925  011428  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12926  01142A  0E00               	movlw	0
 12927  01142C  0100               	movlb	0	; () banked
 12928  01142E  6FC6               	movwf	___fldiv@sign& (0+255),b
 12929  011430                     l2972:
 12930  011430                     l13716:
 12931                           
 12932                           ; BSR set to: 0
 12933  011430  C0CB  F0D1         	movff	___fldiv@new_exp,___fldiv@bexp
 12934                           
 12935                           ; BSR set to: 0
 12936  011434  0100               	movlb	0	; () banked
 12937  011436  A1D1               	btfss	___fldiv@bexp& (0+255),0,b
 12938  011438  D003               	goto	l2973
 12939                           
 12940                           ; BSR set to: 0
 12941  01143A  0100               	movlb	0	; () banked
 12942  01143C  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12943  01143E  D002               	goto	l2974
 12944  011440                     l2973:
 12945                           
 12946                           ; BSR set to: 0
 12947                           
 12948                           ; BSR set to: 0
 12949  011440  0100               	movlb	0	; () banked
 12950  011442  9FBC               	bcf	(___fldiv@b+2)& (0+255),7,b
 12951  011444                     l2974:
 12952                           
 12953                           ; BSR set to: 0
 12954                           
 12955                           ; BSR set to: 0
 12956  011444  0100               	movlb	0	; () banked
 12957  011446  90D8               	bcf	status,0,c
 12958  011448  31D1               	rrcf	___fldiv@bexp& (0+255),w,b
 12959  01144A  0100               	movlb	0	; () banked
 12960  01144C  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12961                           
 12962                           ; BSR set to: 0
 12963  01144E  0100               	movlb	0	; () banked
 12964  011450  51C6               	movf	___fldiv@sign& (0+255),w,b
 12965  011452  0100               	movlb	0	; () banked
 12966  011454  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12967                           
 12968                           ; BSR set to: 0
 12969  011456  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12970  01145A  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12971  01145E  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12972  011462  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12973  011466  0012               	return	
 12974  011468                     __end_of___fldiv:
 12975                           	opt stack 0
 12976                           tblptru	equ	0xFF8
 12977                           tblptrh	equ	0xFF7
 12978                           tblptrl	equ	0xFF6
 12979                           tablat	equ	0xFF5
 12980                           prodh	equ	0xFF4
 12981                           prodl	equ	0xFF3
 12982                           intcon	equ	0xFF2
 12983                           postinc0	equ	0xFEE
 12984                           wreg	equ	0xFE8
 12985                           postdec1	equ	0xFE5
 12986                           fsr1h	equ	0xFE2
 12987                           fsr1l	equ	0xFE1
 12988                           indf2	equ	0xFDF
 12989                           postinc2	equ	0xFDE
 12990                           postdec2	equ	0xFDD
 12991                           fsr2h	equ	0xFDA
 12992                           fsr2l	equ	0xFD9
 12993                           status	equ	0xFD8
 12994                           
 12995 ;; *************** function _init *****************
 12996 ;; Defined at:
 12997 ;;		line 66 in file "main.c"
 12998 ;; Parameters:    Size  Location     Type
 12999 ;;		None
 13000 ;; Auto vars:     Size  Location     Type
 13001 ;;		None
 13002 ;; Return value:  Size  Location     Type
 13003 ;;                  1    wreg      void 
 13004 ;; Registers used:
 13005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13006 ;; Tracked objects:
 13007 ;;		On entry : 0/0
 13008 ;;		On exit  : 0/0
 13009 ;;		Unchanged: 0/0
 13010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;Total ram usage:        0 bytes
 13016 ;; Hardware stack levels used:    1
 13017 ;; Hardware stack levels required when called:   17
 13018 ;; This function calls:
 13019 ;;		_ADC_Init
 13020 ;;		_ADC_Start
 13021 ;;		_Console_Init
 13022 ;;		_HMI_Init
 13023 ;;		_ISR_Enable
 13024 ;;		_LCD_Init
 13025 ;;		_MXK_BlockSwitchTo
 13026 ;;		_MXK_Dequeue
 13027 ;;		_MXK_Init
 13028 ;;		_MXK_Release
 13029 ;;		_Motor_Init
 13030 ;;		_delay_ms
 13031 ;;		_eusart_init
 13032 ;;		_irobot_init
 13033 ;;		_irobot_init_song_0
 13034 ;;		_irobot_led_power_on
 13035 ;; This function is called by:
 13036 ;;		_main
 13037 ;; This function uses a non-reentrant model
 13038 ;;
 13039                           
 13040                           	psect	text49
 13041  01485A                     __ptext49:
 13042                           	opt stack 0
 13043  01485A                     _init:
 13044                           	opt stack 13
 13045                           
 13046                           ;main.c: 68: MXK_Init();
 13047                           
 13048                           ; BSR set to: 0
 13049                           ;incstack = 0
 13050  01485A  EC9B  F096         	call	_MXK_Init	;wreg free
 13051                           
 13052                           ;main.c: 71: ISR_Enable();
 13053  01485E  ECBB  F0B3         	call	_ISR_Enable	;wreg free
 13054                           
 13055                           ;main.c: 74: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 13056  014862  0E01               	movlw	1
 13057  014864  EC22  F0B0         	call	_MXK_BlockSwitchTo
 13058  014868  0900               	iorlw	0
 13059  01486A  B4D8               	btfsc	status,2,c
 13060  01486C  D00C               	goto	l2308
 13061                           
 13062                           ;main.c: 75: Console_Init();
 13063  01486E  EC8B  F0A7         	call	_Console_Init	;wreg free
 13064                           
 13065                           ;main.c: 76: HMI_Init();
 13066  014872  EC9B  F090         	call	_HMI_Init	;wreg free
 13067                           
 13068                           ;main.c: 77: LCD_Init();
 13069  014876  EC5B  F097         	call	_LCD_Init	;wreg free
 13070                           
 13071                           ;main.c: 78: if (MXK_Release())
 13072  01487A  ECB1  F0B2         	call	_MXK_Release	;wreg free
 13073  01487E  0900               	iorlw	0
 13074  014880  A4D8               	btfss	status,2,c
 13075                           
 13076                           ;main.c: 79: MXK_Dequeue();
 13077  014882  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
 13078  014886                     l2308:
 13079                           
 13080                           ;main.c: 80: }
 13081                           ;main.c: 83: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 13082  014886  0E08               	movlw	8
 13083  014888  EC22  F0B0         	call	_MXK_BlockSwitchTo
 13084  01488C  0900               	iorlw	0
 13085  01488E  B4D8               	btfsc	status,2,c
 13086  014890  D013               	goto	l2310
 13087                           
 13088                           ;main.c: 84: Motor_Init(&Stepper, 0b1000);
 13089  014892  0EAF               	movlw	low _Stepper
 13090  014894  0100               	movlb	0	; () banked
 13091  014896  6FE7               	movwf	Motor_Init@pMotor& (0+255),b
 13092  014898  0E00               	movlw	high _Stepper
 13093  01489A  0100               	movlb	0	; () banked
 13094  01489C  6FE8               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 13095  01489E  0E00               	movlw	0
 13096  0148A0  0100               	movlb	0	; () banked
 13097  0148A2  6FEA               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 13098  0148A4  0E08               	movlw	8
 13099  0148A6  6FE9               	movwf	Motor_Init@pAddress& (0+255),b
 13100  0148A8  ECFF  F09E         	call	_Motor_Init	;wreg free
 13101                           
 13102                           ;main.c: 85: if (MXK_Release())
 13103  0148AC  ECB1  F0B2         	call	_MXK_Release	;wreg free
 13104  0148B0  0900               	iorlw	0
 13105  0148B2  A4D8               	btfss	status,2,c
 13106                           
 13107                           ;main.c: 86: MXK_Dequeue();
 13108  0148B4  EC03  F0B0         	call	_MXK_Dequeue	;wreg free
 13109  0148B8                     l2310:
 13110                           
 13111                           ;main.c: 87: }
 13112                           ;main.c: 90: ADC_Init(&ADC_AN0, eADC_Ch0);
 13113  0148B8  0EB5               	movlw	low _ADC_AN0
 13114  0148BA  0100               	movlb	0	; () banked
 13115  0148BC  6FBE               	movwf	ADC_Init@pInput& (0+255),b
 13116  0148BE  0E00               	movlw	high _ADC_AN0
 13117  0148C0  0100               	movlb	0	; () banked
 13118  0148C2  6FBF               	movwf	(ADC_Init@pInput+1)& (0+255),b
 13119  0148C4  0E00               	movlw	0
 13120  0148C6  0100               	movlb	0	; () banked
 13121  0148C8  6FC0               	movwf	ADC_Init@pChannel& (0+255),b
 13122  0148CA  EC17  F0A9         	call	_ADC_Init	;wreg free
 13123                           
 13124                           ;main.c: 91: float ADC_Voltage(ADCPtr plnput);
 13125                           ;main.c: 92: ADC_Start(&ADC_AN0);
 13126  0148CE  0EB5               	movlw	low _ADC_AN0
 13127  0148D0  0100               	movlb	0	; () banked
 13128  0148D2  6FBC               	movwf	ADC_Start@pInput& (0+255),b
 13129  0148D4  0E00               	movlw	high _ADC_AN0
 13130  0148D6  0100               	movlb	0	; () banked
 13131  0148D8  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
 13132  0148DA  EC15  F0A8         	call	_ADC_Start	;wreg free
 13133                           
 13134                           ;main.c: 94: eusart_init();
 13135  0148DE  EC3A  F0B2         	call	_eusart_init	;wreg free
 13136                           
 13137                           ;main.c: 95: irobot_init();
 13138  0148E2  EC7B  F0B3         	call	_irobot_init	;wreg free
 13139                           
 13140                           ;main.c: 97: irobot_led_power_on(0xA);
 13141  0148E6  0E0A               	movlw	10
 13142  0148E8  ECA3  F0B2         	call	_irobot_led_power_on
 13143                           
 13144                           ;main.c: 98: irobot_init_song_0();
 13145  0148EC  EC1B  F0B2         	call	_irobot_init_song_0	;wreg free
 13146                           
 13147                           ;main.c: 99: delay_ms(20);
 13148  0148F0  0E00               	movlw	0
 13149  0148F2  0100               	movlb	0	; () banked
 13150  0148F4  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 13151  0148F6  0E14               	movlw	20
 13152  0148F8  6FBA               	movwf	delay_ms@ms& (0+255),b
 13153  0148FA  EC8C  F0AB         	call	_delay_ms	;wreg free
 13154  0148FE  0012               	return		;funcret
 13155  014900                     __end_of_init:
 13156                           	opt stack 0
 13157                           tblptru	equ	0xFF8
 13158                           tblptrh	equ	0xFF7
 13159                           tblptrl	equ	0xFF6
 13160                           tablat	equ	0xFF5
 13161                           prodh	equ	0xFF4
 13162                           prodl	equ	0xFF3
 13163                           intcon	equ	0xFF2
 13164                           postinc0	equ	0xFEE
 13165                           wreg	equ	0xFE8
 13166                           postdec1	equ	0xFE5
 13167                           fsr1h	equ	0xFE2
 13168                           fsr1l	equ	0xFE1
 13169                           indf2	equ	0xFDF
 13170                           postinc2	equ	0xFDE
 13171                           postdec2	equ	0xFDD
 13172                           fsr2h	equ	0xFDA
 13173                           fsr2l	equ	0xFD9
 13174                           status	equ	0xFD8
 13175                           
 13176 ;; *************** function _irobot_led_power_on *****************
 13177 ;; Defined at:
 13178 ;;		line 334 in file "Library/iRobotSerial.c"
 13179 ;; Parameters:    Size  Location     Type
 13180 ;;  powerOnColou    1    wreg     unsigned char 
 13181 ;; Auto vars:     Size  Location     Type
 13182 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 13183 ;; Return value:  Size  Location     Type
 13184 ;;                  1    wreg      void 
 13185 ;; Registers used:
 13186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13187 ;; Tracked objects:
 13188 ;;		On entry : 0/0
 13189 ;;		On exit  : 0/0
 13190 ;;		Unchanged: 0/0
 13191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13195 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13196 ;;Total ram usage:        1 bytes
 13197 ;; Hardware stack levels used:    1
 13198 ;; Hardware stack levels required when called:    9
 13199 ;; This function calls:
 13200 ;;		_irobot_leds
 13201 ;; This function is called by:
 13202 ;;		_init
 13203 ;; This function uses a non-reentrant model
 13204 ;;
 13205                           
 13206                           	psect	text50
 13207  016546                     __ptext50:
 13208                           	opt stack 0
 13209  016546                     _irobot_led_power_on:
 13210                           	opt stack 20
 13211                           
 13212                           ;incstack = 0
 13213                           ;irobot_led_power_on@powerOnColour stored from wreg
 13214  016546  0100               	movlb	0	; () banked
 13215  016548  6FCE               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 13216                           
 13217                           ;iRobotSerial.c: 335: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 13218  01654A  0E00               	movlw	0
 13219  01654C  0100               	movlb	0	; () banked
 13220  01654E  6FCA               	movwf	irobot_leds@LEDBit& (0+255),b
 13221  016550  C0CE  F0CB         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 13222  016554  0EFF               	movlw	255
 13223  016556  0100               	movlb	0	; () banked
 13224  016558  6FCC               	movwf	irobot_leds@powerLuminosity& (0+255),b
 13225  01655A  0E00               	movlw	0
 13226  01655C  EC4B  F0AD         	call	_irobot_leds
 13227  016560  0012               	return		;funcret
 13228  016562                     __end_of_irobot_led_power_on:
 13229                           	opt stack 0
 13230                           tblptru	equ	0xFF8
 13231                           tblptrh	equ	0xFF7
 13232                           tblptrl	equ	0xFF6
 13233                           tablat	equ	0xFF5
 13234                           prodh	equ	0xFF4
 13235                           prodl	equ	0xFF3
 13236                           intcon	equ	0xFF2
 13237                           postinc0	equ	0xFEE
 13238                           wreg	equ	0xFE8
 13239                           postdec1	equ	0xFE5
 13240                           fsr1h	equ	0xFE2
 13241                           fsr1l	equ	0xFE1
 13242                           indf2	equ	0xFDF
 13243                           postinc2	equ	0xFDE
 13244                           postdec2	equ	0xFDD
 13245                           fsr2h	equ	0xFDA
 13246                           fsr2l	equ	0xFD9
 13247                           status	equ	0xFD8
 13248                           
 13249 ;; *************** function _irobot_leds *****************
 13250 ;; Defined at:
 13251 ;;		line 259 in file "Library/iRobotSerial.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;  isScript        1    wreg     unsigned char 
 13254 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 13255 ;;  powerColour     1   17[BANK0 ] unsigned char 
 13256 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;  isScript        1   19[BANK0 ] unsigned char 
 13259 ;; Return value:  Size  Location     Type
 13260 ;;                  1    wreg      void 
 13261 ;; Registers used:
 13262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13263 ;; Tracked objects:
 13264 ;;		On entry : 0/0
 13265 ;;		On exit  : 0/0
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13268 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;Total ram usage:        4 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; Hardware stack levels required when called:    8
 13275 ;; This function calls:
 13276 ;;		_eusart_putch
 13277 ;;		_load_iRScriptStack
 13278 ;; This function is called by:
 13279 ;;		_irobot_led_power_on
 13280 ;;		_irobot_led_power_off
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           	psect	text51
 13285  015A96                     __ptext51:
 13286                           	opt stack 0
 13287  015A96                     _irobot_leds:
 13288                           	opt stack 20
 13289                           
 13290                           ;incstack = 0
 13291                           ;irobot_leds@isScript stored from wreg
 13292  015A96  0100               	movlb	0	; () banked
 13293  015A98  6FCD               	movwf	irobot_leds@isScript& (0+255),b
 13294                           
 13295                           ;iRobotSerial.c: 260: if (isScript) {
 13296  015A9A  0100               	movlb	0	; () banked
 13297  015A9C  51CD               	movf	irobot_leds@isScript& (0+255),w,b
 13298  015A9E  0100               	movlb	0	; () banked
 13299  015AA0  B4D8               	btfsc	status,2,c
 13300  015AA2  D015               	goto	l2144
 13301                           
 13302                           ; BSR set to: 0
 13303                           ;iRobotSerial.c: 261: load_iRScriptStack(4, iR_LEDS,
 13304                           ;iRobotSerial.c: 262: LEDBit, powerColour, powerLuminosity);
 13305  015AA4  0E00               	movlw	0
 13306  015AA6  0100               	movlb	0	; () banked
 13307  015AA8  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 13308  015AAA  0E8B               	movlw	139
 13309  015AAC  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
 13310  015AAE  C0CA  F0BC         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 13311  015AB2  0100               	movlb	0	; () banked
 13312  015AB4  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 13313  015AB6  C0CB  F0BE         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 13314  015ABA  0100               	movlb	0	; () banked
 13315  015ABC  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 13316  015ABE  C0CC  F0C0         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 13317  015AC2  0100               	movlb	0	; () banked
 13318  015AC4  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 13319  015AC6  0E04               	movlw	4
 13320  015AC8  EC57  F0AB         	call	_load_iRScriptStack
 13321                           
 13322                           ;iRobotSerial.c: 263: } else {
 13323  015ACC  0012               	return	
 13324  015ACE                     l2144:
 13325                           
 13326                           ;iRobotSerial.c: 264: eusart_putch(iR_LEDS);
 13327  015ACE  0E8B               	movlw	139
 13328  015AD0  EC82  F0B3         	call	_eusart_putch
 13329                           
 13330                           ;iRobotSerial.c: 265: eusart_putch(LEDBit);
 13331  015AD4  0100               	movlb	0	; () banked
 13332  015AD6  51CA               	movf	irobot_leds@LEDBit& (0+255),w,b
 13333  015AD8  EC82  F0B3         	call	_eusart_putch
 13334                           
 13335                           ;iRobotSerial.c: 266: eusart_putch(powerColour);
 13336  015ADC  0100               	movlb	0	; () banked
 13337  015ADE  51CB               	movf	irobot_leds@powerColour& (0+255),w,b
 13338  015AE0  EC82  F0B3         	call	_eusart_putch
 13339                           
 13340                           ;iRobotSerial.c: 267: eusart_putch(powerLuminosity);
 13341  015AE4  0100               	movlb	0	; () banked
 13342  015AE6  51CC               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 13343  015AE8  EC82  F0B3         	call	_eusart_putch
 13344  015AEC  0012               	return	
 13345  015AEE                     __end_of_irobot_leds:
 13346                           	opt stack 0
 13347                           tblptru	equ	0xFF8
 13348                           tblptrh	equ	0xFF7
 13349                           tblptrl	equ	0xFF6
 13350                           tablat	equ	0xFF5
 13351                           prodh	equ	0xFF4
 13352                           prodl	equ	0xFF3
 13353                           intcon	equ	0xFF2
 13354                           postinc0	equ	0xFEE
 13355                           wreg	equ	0xFE8
 13356                           postdec1	equ	0xFE5
 13357                           fsr1h	equ	0xFE2
 13358                           fsr1l	equ	0xFE1
 13359                           indf2	equ	0xFDF
 13360                           postinc2	equ	0xFDE
 13361                           postdec2	equ	0xFDD
 13362                           fsr2h	equ	0xFDA
 13363                           fsr2l	equ	0xFD9
 13364                           status	equ	0xFD8
 13365                           
 13366 ;; *************** function _load_iRScriptStack *****************
 13367 ;; Defined at:
 13368 ;;		line 190 in file "Library/iRobotSerial.c"
 13369 ;; Parameters:    Size  Location     Type
 13370 ;;  bytesToLoad     1    wreg     unsigned char 
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 13373 ;;  i               1   15[BANK0 ] unsigned char 
 13374 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 13375 ;;		 -> ?_load_iRScriptStack(1), 
 13376 ;; Return value:  Size  Location     Type
 13377 ;;                  1    wreg      void 
 13378 ;; Registers used:
 13379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13380 ;; Tracked objects:
 13381 ;;		On entry : 0/0
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13385 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13386 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13388 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13389 ;;Total ram usage:       16 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    7
 13392 ;; This function calls:
 13393 ;;		Nothing
 13394 ;; This function is called by:
 13395 ;;		_irobot_move
 13396 ;;		_irobot_leds
 13397 ;;		_irobot_angle_wait
 13398 ;;		_irobot_distance_wait
 13399 ;; This function uses a non-reentrant model
 13400 ;;
 13401                           
 13402                           	psect	text52
 13403  0156AE                     __ptext52:
 13404                           	opt stack 0
 13405  0156AE                     _load_iRScriptStack:
 13406                           	opt stack 19
 13407                           
 13408                           ;incstack = 0
 13409                           ;load_iRScriptStack@bytesToLoad stored from wreg
 13410  0156AE  0100               	movlb	0	; () banked
 13411  0156B0  6FC8               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 13412                           
 13413                           ;iRobotSerial.c: 191: va_list loadByte;
 13414                           ;iRobotSerial.c: 192: *loadByte = __va_start();
 13415  0156B2  0EBA               	movlw	low ?_load_iRScriptStack
 13416  0156B4  0100               	movlb	0	; () banked
 13417  0156B6  6FC6               	movwf	load_iRScriptStack@loadByte& (0+255),b
 13418  0156B8  0E00               	movlw	high ?_load_iRScriptStack
 13419  0156BA  0100               	movlb	0	; () banked
 13420  0156BC  6FC7               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 13421                           
 13422                           ;iRobotSerial.c: 193: for (UINT8 i = 0; i < bytesToLoad; i++) {
 13423  0156BE  0E00               	movlw	0
 13424  0156C0  0100               	movlb	0	; () banked
 13425  0156C2  6FC9               	movwf	load_iRScriptStack@i& (0+255),b
 13426  0156C4  D01F               	goto	l2118
 13427  0156C6                     
 13428                           ; BSR set to: 0
 13429                           ;iRobotSerial.c: 194: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 13430                           
 13431                           ; BSR set to: 0
 13432  0156C6  C0C6  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 13433  0156CA  C0C7  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 13434  0156CE  0100               	movlb	0	; () banked
 13435  0156D0  51C9               	movf	load_iRScriptStack@i& (0+255),w,b
 13436  0156D2  C037  F0C4         	movff	_iRScriptIndex,??_load_iRScriptStack
 13437  0156D6  0100               	movlb	0	; () banked
 13438  0156D8  6BC5               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 13439  0156DA  0100               	movlb	0	; () banked
 13440  0156DC  27C4               	addwf	??_load_iRScriptStack& (0+255),f,b
 13441  0156DE  0E00               	movlw	0
 13442  0156E0  23C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 13443  0156E2  0E00               	movlw	low _iRScriptStack
 13444  0156E4  0100               	movlb	0	; () banked
 13445  0156E6  25C4               	addwf	??_load_iRScriptStack& (0+255),w,b
 13446  0156E8  6EE1               	movwf	fsr1l,c
 13447  0156EA  0E04               	movlw	high _iRScriptStack
 13448  0156EC  0100               	movlb	0	; () banked
 13449  0156EE  21C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 13450  0156F0  6EE2               	movwf	fsr1h,c
 13451  0156F2  CFDF FFE7          	movff	indf2,indf1
 13452                           
 13453                           ; BSR set to: 0
 13454  0156F6  0E02               	movlw	2
 13455  0156F8  0100               	movlb	0	; () banked
 13456  0156FA  27C6               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 13457  0156FC  0E00               	movlw	0
 13458  0156FE  23C7               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 13459                           
 13460                           ; BSR set to: 0
 13461  015700  0100               	movlb	0	; () banked
 13462  015702  2BC9               	incf	load_iRScriptStack@i& (0+255),f,b
 13463  015704                     l2118:
 13464                           
 13465                           ; BSR set to: 0
 13466                           
 13467                           ; BSR set to: 0
 13468  015704  0100               	movlb	0	; () banked
 13469  015706  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13470  015708  0100               	movlb	0	; () banked
 13471  01570A  5DC9               	subwf	load_iRScriptStack@i& (0+255),w,b
 13472  01570C  A0D8               	btfss	status,0,c
 13473  01570E  D7DB               	goto	l2119
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;iRobotSerial.c: 195: }
 13477                           ;iRobotSerial.c: 196: ;
 13478                           ;iRobotSerial.c: 197: iRScriptIndex += bytesToLoad;
 13479                           
 13480                           ; BSR set to: 0
 13481  015710  0100               	movlb	0	; () banked
 13482  015712  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13483  015714  2637               	addwf	_iRScriptIndex,f,c
 13484                           
 13485                           ; BSR set to: 0
 13486  015716  0012               	return		;funcret
 13487  015718                     __end_of_load_iRScriptStack:
 13488                           	opt stack 0
 13489                           tblptru	equ	0xFF8
 13490                           tblptrh	equ	0xFF7
 13491                           tblptrl	equ	0xFF6
 13492                           tablat	equ	0xFF5
 13493                           prodh	equ	0xFF4
 13494                           prodl	equ	0xFF3
 13495                           intcon	equ	0xFF2
 13496                           postinc0	equ	0xFEE
 13497                           wreg	equ	0xFE8
 13498                           indf1	equ	0xFE7
 13499                           postdec1	equ	0xFE5
 13500                           fsr1h	equ	0xFE2
 13501                           fsr1l	equ	0xFE1
 13502                           indf2	equ	0xFDF
 13503                           postinc2	equ	0xFDE
 13504                           postdec2	equ	0xFDD
 13505                           fsr2h	equ	0xFDA
 13506                           fsr2l	equ	0xFD9
 13507                           status	equ	0xFD8
 13508                           
 13509 ;; *************** function _irobot_init_song_0 *****************
 13510 ;; Defined at:
 13511 ;;		line 271 in file "Library/iRobotSerial.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;		None
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;		None
 13516 ;; Return value:  Size  Location     Type
 13517 ;;                  1    wreg      void 
 13518 ;; Registers used:
 13519 ;;		wreg, cstack
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13529 ;;Total ram usage:        0 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:    8
 13532 ;; This function calls:
 13533 ;;		_eusart_putch
 13534 ;; This function is called by:
 13535 ;;		_init
 13536 ;; This function uses a non-reentrant model
 13537 ;;
 13538                           
 13539                           	psect	text53
 13540  016436                     __ptext53:
 13541                           	opt stack 0
 13542  016436                     _irobot_init_song_0:
 13543                           	opt stack 21
 13544                           
 13545                           ;iRobotSerial.c: 272: eusart_putch(iR_SONG_INIT);
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;incstack = 0
 13549  016436  0E8C               	movlw	140
 13550  016438  EC82  F0B3         	call	_eusart_putch
 13551                           
 13552                           ;iRobotSerial.c: 273: eusart_putch(0);
 13553  01643C  0E00               	movlw	0
 13554  01643E  EC82  F0B3         	call	_eusart_putch
 13555                           
 13556                           ;iRobotSerial.c: 274: eusart_putch(1);
 13557  016442  0E01               	movlw	1
 13558  016444  EC82  F0B3         	call	_eusart_putch
 13559                           
 13560                           ;iRobotSerial.c: 275: eusart_putch(60);
 13561  016448  0E3C               	movlw	60
 13562  01644A  EC82  F0B3         	call	_eusart_putch
 13563                           
 13564                           ;iRobotSerial.c: 276: eusart_putch(4);
 13565  01644E  0E04               	movlw	4
 13566  016450  EC82  F0B3         	call	_eusart_putch
 13567  016454  0012               	return		;funcret
 13568  016456                     __end_of_irobot_init_song_0:
 13569                           	opt stack 0
 13570                           tblptru	equ	0xFF8
 13571                           tblptrh	equ	0xFF7
 13572                           tblptrl	equ	0xFF6
 13573                           tablat	equ	0xFF5
 13574                           prodh	equ	0xFF4
 13575                           prodl	equ	0xFF3
 13576                           intcon	equ	0xFF2
 13577                           postinc0	equ	0xFEE
 13578                           wreg	equ	0xFE8
 13579                           indf1	equ	0xFE7
 13580                           postdec1	equ	0xFE5
 13581                           fsr1h	equ	0xFE2
 13582                           fsr1l	equ	0xFE1
 13583                           indf2	equ	0xFDF
 13584                           postinc2	equ	0xFDE
 13585                           postdec2	equ	0xFDD
 13586                           fsr2h	equ	0xFDA
 13587                           fsr2l	equ	0xFD9
 13588                           status	equ	0xFD8
 13589                           
 13590 ;; *************** function _irobot_init *****************
 13591 ;; Defined at:
 13592 ;;		line 215 in file "Library/iRobotSerial.c"
 13593 ;; Parameters:    Size  Location     Type
 13594 ;;		None
 13595 ;; Auto vars:     Size  Location     Type
 13596 ;;		None
 13597 ;; Return value:  Size  Location     Type
 13598 ;;                  1    wreg      void 
 13599 ;; Registers used:
 13600 ;;		wreg, cstack
 13601 ;; Tracked objects:
 13602 ;;		On entry : 0/0
 13603 ;;		On exit  : 0/0
 13604 ;;		Unchanged: 0/0
 13605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13610 ;;Total ram usage:        0 bytes
 13611 ;; Hardware stack levels used:    1
 13612 ;; Hardware stack levels required when called:    8
 13613 ;; This function calls:
 13614 ;;		_eusart_putch
 13615 ;; This function is called by:
 13616 ;;		_init
 13617 ;; This function uses a non-reentrant model
 13618 ;;
 13619                           
 13620                           	psect	text54
 13621  0166F6                     __ptext54:
 13622                           	opt stack 0
 13623  0166F6                     _irobot_init:
 13624                           	opt stack 21
 13625                           
 13626                           ;iRobotSerial.c: 216: eusart_putch(iR_START);
 13627                           
 13628                           ;incstack = 0
 13629  0166F6  0E80               	movlw	128
 13630  0166F8  EC82  F0B3         	call	_eusart_putch
 13631                           
 13632                           ;iRobotSerial.c: 217: eusart_putch(iR_FULL_MODE);
 13633  0166FC  0E84               	movlw	132
 13634  0166FE  EC82  F0B3         	call	_eusart_putch
 13635  016702  0012               	return		;funcret
 13636  016704                     __end_of_irobot_init:
 13637                           	opt stack 0
 13638                           tblptru	equ	0xFF8
 13639                           tblptrh	equ	0xFF7
 13640                           tblptrl	equ	0xFF6
 13641                           tablat	equ	0xFF5
 13642                           prodh	equ	0xFF4
 13643                           prodl	equ	0xFF3
 13644                           intcon	equ	0xFF2
 13645                           postinc0	equ	0xFEE
 13646                           wreg	equ	0xFE8
 13647                           indf1	equ	0xFE7
 13648                           postdec1	equ	0xFE5
 13649                           fsr1h	equ	0xFE2
 13650                           fsr1l	equ	0xFE1
 13651                           indf2	equ	0xFDF
 13652                           postinc2	equ	0xFDE
 13653                           postdec2	equ	0xFDD
 13654                           fsr2h	equ	0xFDA
 13655                           fsr2l	equ	0xFD9
 13656                           status	equ	0xFD8
 13657                           
 13658 ;; *************** function _eusart_putch *****************
 13659 ;; Defined at:
 13660 ;;		line 130 in file "Library/iRobotSerial.c"
 13661 ;; Parameters:    Size  Location     Type
 13662 ;;  eusartSendCh    1    wreg     unsigned char 
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13665 ;; Return value:  Size  Location     Type
 13666 ;;                  1    wreg      void 
 13667 ;; Registers used:
 13668 ;;		wreg
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;Total ram usage:        1 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:    7
 13681 ;; This function calls:
 13682 ;;		Nothing
 13683 ;; This function is called by:
 13684 ;;		_irobot_query_and_update
 13685 ;;		_irobot_init
 13686 ;;		_irobot_move
 13687 ;;		_irobot_leds
 13688 ;;		_irobot_init_song_0
 13689 ;;		_irobot_song_play
 13690 ;;		_irobot_script_play
 13691 ;; This function uses a non-reentrant model
 13692 ;;
 13693                           
 13694                           	psect	text55
 13695  016704                     __ptext55:
 13696                           	opt stack 0
 13697  016704                     _eusart_putch:
 13698                           	opt stack 20
 13699                           
 13700                           ;incstack = 0
 13701                           ;eusart_putch@eusartSendChar stored from wreg
 13702  016704  0100               	movlb	0	; () banked
 13703  016706  6FBA               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13704  016708                     
 13705                           ;iRobotSerial.c: 131: while (!TXSTA1bits.TRMT) {
 13706  016708  A2AD               	btfss	4013,1,c	;volatile
 13707  01670A  D7FE               	goto	l12688
 13708                           
 13709                           ;iRobotSerial.c: 132: };
 13710                           ;iRobotSerial.c: 133: TXREG1 = eusartSendChar;
 13711  01670C  C0BA  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13712  016710  0012               	return		;funcret
 13713  016712                     __end_of_eusart_putch:
 13714                           	opt stack 0
 13715                           tblptru	equ	0xFF8
 13716                           tblptrh	equ	0xFF7
 13717                           tblptrl	equ	0xFF6
 13718                           tablat	equ	0xFF5
 13719                           prodh	equ	0xFF4
 13720                           prodl	equ	0xFF3
 13721                           intcon	equ	0xFF2
 13722                           postinc0	equ	0xFEE
 13723                           wreg	equ	0xFE8
 13724                           indf1	equ	0xFE7
 13725                           postdec1	equ	0xFE5
 13726                           fsr1h	equ	0xFE2
 13727                           fsr1l	equ	0xFE1
 13728                           indf2	equ	0xFDF
 13729                           postinc2	equ	0xFDE
 13730                           postdec2	equ	0xFDD
 13731                           fsr2h	equ	0xFDA
 13732                           fsr2l	equ	0xFD9
 13733                           status	equ	0xFD8
 13734                           
 13735 ;; *************** function _eusart_init *****************
 13736 ;; Defined at:
 13737 ;;		line 113 in file "Library/iRobotSerial.c"
 13738 ;; Parameters:    Size  Location     Type
 13739 ;;		None
 13740 ;; Auto vars:     Size  Location     Type
 13741 ;;		None
 13742 ;; Return value:  Size  Location     Type
 13743 ;;                  1    wreg      void 
 13744 ;; Registers used:
 13745 ;;		wreg, status,2
 13746 ;; Tracked objects:
 13747 ;;		On entry : 0/0
 13748 ;;		On exit  : 0/0
 13749 ;;		Unchanged: 0/0
 13750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13755 ;;Total ram usage:        0 bytes
 13756 ;; Hardware stack levels used:    1
 13757 ;; Hardware stack levels required when called:    7
 13758 ;; This function calls:
 13759 ;;		Nothing
 13760 ;; This function is called by:
 13761 ;;		_init
 13762 ;; This function uses a non-reentrant model
 13763 ;;
 13764                           
 13765                           	psect	text56
 13766  016474                     __ptext56:
 13767                           	opt stack 0
 13768  016474                     _eusart_init:
 13769                           	opt stack 22
 13770                           
 13771                           ;iRobotSerial.c: 114: TRISCbits.TRISC6 = 0;
 13772                           
 13773                           ;incstack = 0
 13774  016474  9C94               	bcf	3988,6,c	;volatile
 13775                           
 13776                           ;iRobotSerial.c: 115: TRISCbits.TRISC7 = 1;
 13777  016476  8E94               	bsf	3988,7,c	;volatile
 13778                           
 13779                           ;iRobotSerial.c: 117: TXSTA1 = 0b00100100;
 13780  016478  0E24               	movlw	36
 13781  01647A  6EAD               	movwf	4013,c	;volatile
 13782                           
 13783                           ;iRobotSerial.c: 118: RCSTA1 = 0b10011000;
 13784  01647C  0E98               	movlw	152
 13785  01647E  6EAC               	movwf	4012,c	;volatile
 13786                           
 13787                           ;iRobotSerial.c: 120: BAUDCON1bits.DTRXP = 0;
 13788  016480  9A7E               	bcf	3966,5,c	;volatile
 13789                           
 13790                           ;iRobotSerial.c: 121: BAUDCON1bits.SCKP = 0;
 13791  016482  987E               	bcf	3966,4,c	;volatile
 13792                           
 13793                           ;iRobotSerial.c: 122: BAUDCON1bits.WUE = 0;
 13794  016484  927E               	bcf	3966,1,c	;volatile
 13795                           
 13796                           ;iRobotSerial.c: 123: BAUDCON1bits.ABDEN = 0;
 13797  016486  907E               	bcf	3966,0,c	;volatile
 13798                           
 13799                           ;iRobotSerial.c: 125: TXSTA1bits.BRGH = 1;
 13800  016488  84AD               	bsf	4013,2,c	;volatile
 13801                           
 13802                           ;iRobotSerial.c: 126: BAUDCON1bits.BRG16 = 0;
 13803  01648A  967E               	bcf	3966,3,c	;volatile
 13804                           
 13805                           ;iRobotSerial.c: 127: SPBRG1 = 51;
 13806  01648C  0E33               	movlw	51
 13807  01648E  6EB0               	movwf	4016,c	;volatile
 13808  016490  0012               	return		;funcret
 13809  016492                     __end_of_eusart_init:
 13810                           	opt stack 0
 13811                           tblptru	equ	0xFF8
 13812                           tblptrh	equ	0xFF7
 13813                           tblptrl	equ	0xFF6
 13814                           tablat	equ	0xFF5
 13815                           prodh	equ	0xFF4
 13816                           prodl	equ	0xFF3
 13817                           intcon	equ	0xFF2
 13818                           postinc0	equ	0xFEE
 13819                           wreg	equ	0xFE8
 13820                           indf1	equ	0xFE7
 13821                           postdec1	equ	0xFE5
 13822                           fsr1h	equ	0xFE2
 13823                           fsr1l	equ	0xFE1
 13824                           indf2	equ	0xFDF
 13825                           postinc2	equ	0xFDE
 13826                           postdec2	equ	0xFDD
 13827                           fsr2h	equ	0xFDA
 13828                           fsr2l	equ	0xFD9
 13829                           status	equ	0xFD8
 13830                           
 13831 ;; *************** function _Motor_Init *****************
 13832 ;; Defined at:
 13833 ;;		line 26 in file "Library/Motor.c"
 13834 ;; Parameters:    Size  Location     Type
 13835 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 13836 ;;		 -> Stepper(6), 
 13837 ;;  pAddress        2   47[BANK0 ] unsigned short 
 13838 ;; Auto vars:     Size  Location     Type
 13839 ;;		None
 13840 ;; Return value:  Size  Location     Type
 13841 ;;                  1    wreg      void 
 13842 ;; Registers used:
 13843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13844 ;; Tracked objects:
 13845 ;;		On entry : 0/0
 13846 ;;		On exit  : 0/0
 13847 ;;		Unchanged: 0/0
 13848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13849 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13852 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;Total ram usage:        4 bytes
 13854 ;; Hardware stack levels used:    1
 13855 ;; Hardware stack levels required when called:   12
 13856 ;; This function calls:
 13857 ;;		_Port_SetPin
 13858 ;;		_Port_SetPinType
 13859 ;;		_Timer0_Init
 13860 ;; This function is called by:
 13861 ;;		_init
 13862 ;; This function uses a non-reentrant model
 13863 ;;
 13864                           
 13865                           	psect	text57
 13866  013DFE                     __ptext57:
 13867                           	opt stack 0
 13868  013DFE                     _Motor_Init:
 13869                           	opt stack 17
 13870                           
 13871                           ;Motor.c: 28: pMotor->mDelta = 0;
 13872                           
 13873                           ;incstack = 0
 13874  013DFE  C0E7  FFD9         	movff	Motor_Init@pMotor,fsr2l
 13875  013E02  C0E8  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 13876  013E06  0E00               	movlw	0
 13877  013E08  6EDE               	movwf	postinc2,c
 13878  013E0A  0E00               	movlw	0
 13879  013E0C  6EDD               	movwf	postdec2,c
 13880                           
 13881                           ;Motor.c: 29: pMotor->mFrequency = 0;
 13882  013E0E  0100               	movlb	0	; () banked
 13883  013E10  EE20 F002          	lfsr	2,2
 13884  013E14  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13885  013E16  26D9               	addwf	fsr2l,f,c
 13886  013E18  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13887  013E1A  22DA               	addwfc	fsr2h,f,c
 13888  013E1C  0E00               	movlw	0
 13889  013E1E  6EDE               	movwf	postinc2,c
 13890  013E20  0E00               	movlw	0
 13891  013E22  6EDD               	movwf	postdec2,c
 13892                           
 13893                           ; BSR set to: 0
 13894                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 13895  013E24  0100               	movlb	0	; () banked
 13896  013E26  EE20 F004          	lfsr	2,4
 13897  013E2A  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13898  013E2C  26D9               	addwf	fsr2l,f,c
 13899  013E2E  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13900  013E30  22DA               	addwfc	fsr2h,f,c
 13901  013E32  C0E9  FFDE         	movff	Motor_Init@pAddress,postinc2
 13902  013E36  C0EA  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 13903                           
 13904                           ; BSR set to: 0
 13905                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 13906  013E3A  0E91               	movlw	low _PortE
 13907  013E3C  0100               	movlb	0	; () banked
 13908  013E3E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13909  013E40  0E00               	movlw	high _PortE
 13910  013E42  0100               	movlb	0	; () banked
 13911  013E44  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13912  013E46  0E00               	movlw	0
 13913  013E48  0100               	movlb	0	; () banked
 13914  013E4A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13915  013E4C  0E03               	movlw	3
 13916  013E4E  0100               	movlb	0	; () banked
 13917  013E50  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13918  013E52  EC60  F093         	call	_Port_SetPinType	;wreg free
 13919                           
 13920                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 13921  013E56  0E91               	movlw	low _PortE
 13922  013E58  0100               	movlb	0	; () banked
 13923  013E5A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13924  013E5C  0E00               	movlw	high _PortE
 13925  013E5E  0100               	movlb	0	; () banked
 13926  013E60  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13927  013E62  0E01               	movlw	1
 13928  013E64  0100               	movlb	0	; () banked
 13929  013E66  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13930  013E68  0E03               	movlw	3
 13931  013E6A  0100               	movlb	0	; () banked
 13932  013E6C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13933  013E6E  EC60  F093         	call	_Port_SetPinType	;wreg free
 13934                           
 13935                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 13936  013E72  0E91               	movlw	low _PortE
 13937  013E74  0100               	movlb	0	; () banked
 13938  013E76  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13939  013E78  0E00               	movlw	high _PortE
 13940  013E7A  0100               	movlb	0	; () banked
 13941  013E7C  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13942  013E7E  0E00               	movlw	0
 13943  013E80  0100               	movlb	0	; () banked
 13944  013E82  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13945  013E84  0E00               	movlw	0
 13946  013E86  0100               	movlb	0	; () banked
 13947  013E88  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13948  013E8A  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 13949                           
 13950                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 13951  013E8E  0E91               	movlw	low _PortE
 13952  013E90  0100               	movlb	0	; () banked
 13953  013E92  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13954  013E94  0E00               	movlw	high _PortE
 13955  013E96  0100               	movlb	0	; () banked
 13956  013E98  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13957  013E9A  0E01               	movlw	1
 13958  013E9C  0100               	movlb	0	; () banked
 13959  013E9E  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13960  013EA0  0E00               	movlw	0
 13961  013EA2  0100               	movlb	0	; () banked
 13962  013EA4  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13963  013EA6  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 13964                           
 13965                           ;Motor.c: 38: lStepFunction = Motor_Step;
 13966  013EAA  0E4E               	movlw	low _Motor_Step
 13967  013EAC  0100               	movlb	0	; () banked
 13968  013EAE  6F66               	movwf	_lStepFunction& (0+255),b
 13969  013EB0  0E34               	movlw	high _Motor_Step
 13970  013EB2  0100               	movlb	0	; () banked
 13971  013EB4  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 13972  013EB6  0E01               	movlw	low (_Motor_Step shr (0+16))
 13973  013EB8  0100               	movlb	0	; () banked
 13974  013EBA  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 13975                           
 13976                           ; BSR set to: 0
 13977                           ;Motor.c: 39: Timer0_Init(1000);
 13978  013EBC  0EE8               	movlw	232
 13979  013EBE  0100               	movlb	0	; () banked
 13980  013EC0  6FC7               	movwf	Timer0_Init@pFrequency& (0+255),b
 13981  013EC2  0E03               	movlw	3
 13982  013EC4  6FC8               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 13983  013EC6  0E00               	movlw	0
 13984  013EC8  6FC9               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 13985  013ECA  0E00               	movlw	0
 13986  013ECC  6FCA               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 13987  013ECE  ECC7  F098         	call	_Timer0_Init	;wreg free
 13988  013ED2  0012               	return		;funcret
 13989  013ED4                     __end_of_Motor_Init:
 13990                           	opt stack 0
 13991                           tblptru	equ	0xFF8
 13992                           tblptrh	equ	0xFF7
 13993                           tblptrl	equ	0xFF6
 13994                           tablat	equ	0xFF5
 13995                           prodh	equ	0xFF4
 13996                           prodl	equ	0xFF3
 13997                           intcon	equ	0xFF2
 13998                           postinc0	equ	0xFEE
 13999                           wreg	equ	0xFE8
 14000                           indf1	equ	0xFE7
 14001                           postdec1	equ	0xFE5
 14002                           fsr1h	equ	0xFE2
 14003                           fsr1l	equ	0xFE1
 14004                           indf2	equ	0xFDF
 14005                           postinc2	equ	0xFDE
 14006                           postdec2	equ	0xFDD
 14007                           fsr2h	equ	0xFDA
 14008                           fsr2l	equ	0xFD9
 14009                           status	equ	0xFD8
 14010                           
 14011 ;; *************** function _Timer0_Init *****************
 14012 ;; Defined at:
 14013 ;;		line 25 in file "Library/Timer0.c"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 14016 ;; Auto vars:     Size  Location     Type
 14017 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 14018 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 14019 ;; Return value:  Size  Location     Type
 14020 ;;                  1    wreg      void 
 14021 ;; Registers used:
 14022 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14023 ;; Tracked objects:
 14024 ;;		On entry : 0/0
 14025 ;;		On exit  : 0/0
 14026 ;;		Unchanged: 0/0
 14027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14028 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14029 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14032 ;;Total ram usage:       14 bytes
 14033 ;; Hardware stack levels used:    1
 14034 ;; Hardware stack levels required when called:    8
 14035 ;; This function calls:
 14036 ;;		_Timer0_Clear
 14037 ;;		___lldiv
 14038 ;; This function is called by:
 14039 ;;		_Motor_Init
 14040 ;;		_Motor_Speed
 14041 ;; This function uses a non-reentrant model
 14042 ;;
 14043                           
 14044                           	psect	text58
 14045  01318E                     __ptext58:
 14046                           	opt stack 0
 14047  01318E                     _Timer0_Init:
 14048                           	opt stack 19
 14049                           
 14050                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 14051                           
 14052                           ;incstack = 0
 14053  01318E  0E80               	movlw	128
 14054  013190  0100               	movlb	0	; () banked
 14055  013192  6FCD               	movwf	Timer0_Init@pCPUClock& (0+255),b
 14056  013194  0E8D               	movlw	141
 14057  013196  6FCE               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 14058  013198  0E5B               	movlw	91
 14059  01319A  6FCF               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 14060  01319C  0E00               	movlw	0
 14061  01319E  6FD0               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 14065                           ;Timer0.c: 31: static UINT8 PRE = 0;
 14066                           ;Timer0.c: 32: static UINT32 DIV = 0;
 14067                           ;Timer0.c: 34: UINT32 DIVIDE;
 14068                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 14069  0131A0  9ED5               	bcf	4053,7,c	;volatile
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;Timer0.c: 38: if (pFrequency == 0)
 14073  0131A2  0100               	movlb	0	; () banked
 14074  0131A4  51C7               	movf	Timer0_Init@pFrequency& (0+255),w,b
 14075  0131A6  0100               	movlb	0	; () banked
 14076  0131A8  11C8               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 14077  0131AA  0100               	movlb	0	; () banked
 14078  0131AC  11C9               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 14079  0131AE  0100               	movlb	0	; () banked
 14080  0131B0  11CA               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 14081  0131B2  B4D8               	btfsc	status,2,c
 14082  0131B4  0012               	return	
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 14086                           
 14087                           ; BSR set to: 0
 14088                           ;Timer0.c: 39: return;
 14089  0131B6  96D5               	bcf	4053,3,c	;volatile
 14090                           
 14091                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 14092  0131B8  9CD5               	bcf	4053,6,c	;volatile
 14093                           
 14094                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 14095  0131BA  9AD5               	bcf	4053,5,c	;volatile
 14096                           
 14097                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 14098  0131BC  98D5               	bcf	4053,4,c	;volatile
 14099                           
 14100                           ; BSR set to: 0
 14101                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 14102  0131BE  C0CD  F0BA         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 14103  0131C2  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 14104  0131C6  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 14105  0131CA  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 14106  0131CE  C0C7  F0BE         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 14107  0131D2  C0C8  F0BF         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 14108  0131D6  C0C9  F0C0         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 14109  0131DA  C0CA  F0C1         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 14110  0131DE  ECBE  F0A1         	call	___lldiv	;wreg free
 14111  0131E2  C0BA  F0D1         	movff	?___lldiv,Timer0_Init@DIVIDE
 14112  0131E6  C0BB  F0D2         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 14113  0131EA  C0BC  F0D3         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 14114  0131EE  C0BD  F0D4         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 14115                           
 14116                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 14117  0131F2  D00C               	goto	l1787
 14118  0131F4                     l13518:
 14119                           
 14120                           ;Timer0.c: 50: {
 14121                           ;Timer0.c: 51: INDEX ++;
 14122  0131F4  0100               	movlb	0	; () banked
 14123  0131F6  2B8D               	incf	_INDEX& (0+255),f,b
 14124                           
 14125                           ; BSR set to: 0
 14126                           ;Timer0.c: 52: if (INDEX >= 3)
 14127  0131F8  0E02               	movlw	2
 14128  0131FA  0100               	movlb	0	; () banked
 14129  0131FC  658D               	cpfsgt	_INDEX& (0+255),b
 14130  0131FE  D001               	goto	l1785
 14131  013200  D02F               	goto	u10040
 14132  013202                     l1785:
 14133                           
 14134                           ; BSR set to: 0
 14135                           ;Timer0.c: 56: if (INDEX >= 8)
 14136                           
 14137                           ; BSR set to: 0
 14138  013202  0E07               	movlw	7
 14139  013204  0100               	movlb	0	; () banked
 14140  013206  658D               	cpfsgt	_INDEX& (0+255),b
 14141  013208  D001               	goto	l1787
 14142  01320A  0012               	return	
 14143  01320C                     l1787:
 14144                           
 14145                           ; BSR set to: 0
 14146                           
 14147                           ; BSR set to: 0
 14148  01320C  C0D1  F0BA         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 14149  013210  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 14150  013214  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 14151  013218  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 14152  01321C  0100               	movlb	0	; () banked
 14153  01321E  518D               	movf	_INDEX& (0+255),w,b
 14154  013220  0D02               	mullw	2
 14155  013222  0EE5               	movlw	low Timer0_Init@PRESCALE
 14156  013224  24F3               	addwf	prodl,w,c
 14157  013226  6EF6               	movwf	tblptrl,c
 14158  013228  0EFC               	movlw	high Timer0_Init@PRESCALE
 14159  01322A  20F4               	addwfc	prodh,w,c
 14160  01322C  6EF7               	movwf	tblptrh,c
 14161  01322E                     	if	1	;There are 3 active tblptr bytes
 14162  01322E  6AF8               	clrf	tblptru,c
 14163  013230  0E00               	movlw	low (__mediumconst shr (0+16))
 14164  013232  22F8               	addwfc	tblptru,f,c
 14165  013234                     	endif
 14166  013234  0009               	tblrd		*+
 14167  013236  CFF5 F0CB          	movff	tablat,??_Timer0_Init
 14168  01323A  0009               	tblrd		*+
 14169  01323C  CFF5 F0CC          	movff	tablat,??_Timer0_Init+1
 14170  013240  C0CB  F0BE         	movff	??_Timer0_Init,___lldiv@divisor
 14171  013244  C0CC  F0BF         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 14172  013248  0100               	movlb	0	; () banked
 14173  01324A  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14174  01324C  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14175  01324E  ECBE  F0A1         	call	___lldiv	;wreg free
 14176  013252  0100               	movlb	0	; () banked
 14177  013254  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 14178  013256  E1CE               	bnz	l13518
 14179  013258  0100               	movlb	0	; () banked
 14180  01325A  05BC               	decf	(?___lldiv+2)& (0+255),w,b
 14181  01325C  B0D8               	btfsc	status,0,c
 14182  01325E  D7CA               	goto	l1784
 14183  013260                     u10040:
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;Timer0.c: 58: }
 14187                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 14188                           
 14189                           ; BSR set to: 0
 14190  013260  0100               	movlb	0	; () banked
 14191  013262  518D               	movf	_INDEX& (0+255),w,b
 14192  013264  0D02               	mullw	2
 14193  013266  0EE5               	movlw	low Timer0_Init@PRESCALE
 14194  013268  24F3               	addwf	prodl,w,c
 14195  01326A  6EF6               	movwf	tblptrl,c
 14196  01326C  0EFC               	movlw	high Timer0_Init@PRESCALE
 14197  01326E  20F4               	addwfc	prodh,w,c
 14198  013270  6EF7               	movwf	tblptrh,c
 14199  013272                     	if	1	;There are 3 active tblptr bytes
 14200  013272  6AF8               	clrf	tblptru,c
 14201  013274  0E00               	movlw	low (__mediumconst shr (0+16))
 14202  013276  22F8               	addwfc	tblptru,f,c
 14203  013278                     	endif
 14204  013278  0008               	tblrd		*
 14205  01327A  CFF5 F08C          	movff	tablat,Timer0_Init@PRE
 14206                           
 14207                           ; BSR set to: 0
 14208                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 14209  01327E  0EFF               	movlw	255
 14210  013280  0100               	movlb	0	; () banked
 14211  013282  25D1               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 14212  013284  0103               	movlb	3	; () banked
 14213  013286  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 14214  013288  0EFF               	movlw	255
 14215  01328A  0100               	movlb	0	; () banked
 14216  01328C  21D2               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 14217  01328E  0103               	movlb	3	; () banked
 14218  013290  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 14219  013292  0EFF               	movlw	255
 14220  013294  0100               	movlb	0	; () banked
 14221  013296  21D3               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 14222  013298  0103               	movlb	3	; () banked
 14223  01329A  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 14224  01329C  0EFF               	movlw	255
 14225  01329E  0100               	movlb	0	; () banked
 14226  0132A0  21D4               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 14227  0132A2  0103               	movlb	3	; () banked
 14228  0132A4  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 14229                           
 14230                           ; BSR set to: 3
 14231                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 14232  0132A6  C32A  F0BA         	movff	Timer0_Init@DIV,___lldiv@dividend
 14233  0132AA  C32B  F0BB         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 14234  0132AE  C32C  F0BC         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 14235  0132B2  C32D  F0BD         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 14236  0132B6  0100               	movlb	0	; () banked
 14237  0132B8  518C               	movf	Timer0_Init@PRE& (0+255),w,b
 14238  0132BA  0100               	movlb	0	; () banked
 14239  0132BC  6FBE               	movwf	___lldiv@divisor& (0+255),b
 14240  0132BE  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 14241  0132C0  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14242  0132C2  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14243  0132C4  ECBE  F0A1         	call	___lldiv	;wreg free
 14244  0132C8  0100               	movlb	0	; () banked
 14245  0132CA  1FBA               	comf	?___lldiv& (0+255),f,b
 14246  0132CC  0100               	movlb	0	; () banked
 14247  0132CE  1FBB               	comf	(?___lldiv+1)& (0+255),f,b
 14248  0132D0  0100               	movlb	0	; () banked
 14249  0132D2  4BBA               	infsnz	?___lldiv& (0+255),f,b
 14250  0132D4  2BBB               	incf	(?___lldiv+1)& (0+255),f,b
 14251  0132D6  0EFF               	movlw	255
 14252  0132D8  0100               	movlb	0	; () banked
 14253  0132DA  25BA               	addwf	?___lldiv& (0+255),w,b
 14254  0132DC  6E29               	movwf	_COUNTER,c
 14255  0132DE  0EFF               	movlw	255
 14256  0132E0  0100               	movlb	0	; () banked
 14257  0132E2  21BB               	addwfc	(?___lldiv+1)& (0+255),w,b
 14258  0132E4  6E2A               	movwf	_COUNTER+1,c
 14259                           
 14260                           ; BSR set to: 0
 14261                           ;Timer0.c: 68: Timer0_Clear();
 14262  0132E6  ECA4  F0B3         	call	_Timer0_Clear	;wreg free
 14263                           
 14264                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 14265  0132EA  8ED5               	bsf	4053,7,c	;volatile
 14266  0132EC  0012               	return		;funcret
 14267  0132EE                     __end_of_Timer0_Init:
 14268                           	opt stack 0
 14269                           tblptru	equ	0xFF8
 14270                           tblptrh	equ	0xFF7
 14271                           tblptrl	equ	0xFF6
 14272                           tablat	equ	0xFF5
 14273                           prodh	equ	0xFF4
 14274                           prodl	equ	0xFF3
 14275                           intcon	equ	0xFF2
 14276                           postinc0	equ	0xFEE
 14277                           wreg	equ	0xFE8
 14278                           indf1	equ	0xFE7
 14279                           postdec1	equ	0xFE5
 14280                           fsr1h	equ	0xFE2
 14281                           fsr1l	equ	0xFE1
 14282                           indf2	equ	0xFDF
 14283                           postinc2	equ	0xFDE
 14284                           postdec2	equ	0xFDD
 14285                           fsr2h	equ	0xFDA
 14286                           fsr2l	equ	0xFD9
 14287                           status	equ	0xFD8
 14288                           
 14289 ;; *************** function _Timer0_Clear *****************
 14290 ;; Defined at:
 14291 ;;		line 20 in file "Library/Timer0.c"
 14292 ;; Parameters:    Size  Location     Type
 14293 ;;		None
 14294 ;; Auto vars:     Size  Location     Type
 14295 ;;		None
 14296 ;; Return value:  Size  Location     Type
 14297 ;;                  1    wreg      void 
 14298 ;; Registers used:
 14299 ;;		None
 14300 ;; Tracked objects:
 14301 ;;		On entry : 0/0
 14302 ;;		On exit  : 0/0
 14303 ;;		Unchanged: 0/0
 14304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14309 ;;Total ram usage:        0 bytes
 14310 ;; Hardware stack levels used:    1
 14311 ;; Hardware stack levels required when called:    7
 14312 ;; This function calls:
 14313 ;;		Nothing
 14314 ;; This function is called by:
 14315 ;;		_Timer0_Init
 14316 ;; This function uses a non-reentrant model
 14317 ;;
 14318                           
 14319                           	psect	text59
 14320  016748                     __ptext59:
 14321                           	opt stack 0
 14322  016748                     _Timer0_Clear:
 14323                           	opt stack 19
 14324                           
 14325                           ;Timer0.c: 22: TMR0 = COUNTER;
 14326                           
 14327                           ;incstack = 0
 14328  016748  C029  FFD6         	movff	_COUNTER,4054	;volatile
 14329  01674C  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 14330                           
 14331                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 14332  016750  94F2               	bcf	intcon,2,c	;volatile
 14333  016752  0012               	return		;funcret
 14334  016754                     __end_of_Timer0_Clear:
 14335                           	opt stack 0
 14336                           tblptru	equ	0xFF8
 14337                           tblptrh	equ	0xFF7
 14338                           tblptrl	equ	0xFF6
 14339                           tablat	equ	0xFF5
 14340                           prodh	equ	0xFF4
 14341                           prodl	equ	0xFF3
 14342                           intcon	equ	0xFF2
 14343                           postinc0	equ	0xFEE
 14344                           wreg	equ	0xFE8
 14345                           indf1	equ	0xFE7
 14346                           postdec1	equ	0xFE5
 14347                           fsr1h	equ	0xFE2
 14348                           fsr1l	equ	0xFE1
 14349                           indf2	equ	0xFDF
 14350                           postinc2	equ	0xFDE
 14351                           postdec2	equ	0xFDD
 14352                           fsr2h	equ	0xFDA
 14353                           fsr2l	equ	0xFD9
 14354                           status	equ	0xFD8
 14355                           
 14356 ;; *************** function _MXK_Init *****************
 14357 ;; Defined at:
 14358 ;;		line 33 in file "Library/MXK.c"
 14359 ;; Parameters:    Size  Location     Type
 14360 ;;		None
 14361 ;; Auto vars:     Size  Location     Type
 14362 ;;		None
 14363 ;; Return value:  Size  Location     Type
 14364 ;;                  1    wreg      void 
 14365 ;; Registers used:
 14366 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14367 ;; Tracked objects:
 14368 ;;		On entry : 0/0
 14369 ;;		On exit  : 0/0
 14370 ;;		Unchanged: 0/0
 14371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14376 ;;Total ram usage:        0 bytes
 14377 ;; Hardware stack levels used:    1
 14378 ;; Hardware stack levels required when called:   16
 14379 ;; This function calls:
 14380 ;;		_LED_Init
 14381 ;;		_Port_Init
 14382 ;;		_Port_SetPin
 14383 ;;		_Port_SetPinType
 14384 ;;		_Port_SetQuadType
 14385 ;;		_Port_SetType
 14386 ;;		_delay_ms
 14387 ;; This function is called by:
 14388 ;;		_init
 14389 ;; This function uses a non-reentrant model
 14390 ;;
 14391                           
 14392                           	psect	text60
 14393  012D36                     __ptext60:
 14394                           	opt stack 0
 14395  012D36                     _MXK_Init:
 14396                           	opt stack 13
 14397                           
 14398                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 14399                           
 14400                           ;incstack = 0
 14401  012D36  0E01               	movlw	1
 14402  012D38  6E4B               	movwf	_Bus_State,c
 14403                           
 14404                           ;MXK.c: 36: lQueue = (Function)0;
 14405  012D3A  0E00               	movlw	0
 14406  012D3C  0100               	movlb	0	; () banked
 14407  012D3E  6F63               	movwf	_lQueue& (0+255),b	;volatile
 14408  012D40  0E00               	movlw	0
 14409  012D42  0100               	movlb	0	; () banked
 14410  012D44  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14411  012D46  0E00               	movlw	0
 14412  012D48  0100               	movlb	0	; () banked
 14413  012D4A  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14414                           
 14415                           ; BSR set to: 0
 14416                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 14417  012D4C  0EB8               	movlw	low _PortA
 14418  012D4E  0101               	movlb	1	; () banked
 14419  012D50  6F01               	movwf	Port_Init@pInput& (0+255),b
 14420  012D52  0E03               	movlw	high _PortA
 14421  012D54  0101               	movlb	1	; () banked
 14422  012D56  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14423  012D58  0E00               	movlw	0
 14424  012D5A  0101               	movlb	1	; () banked
 14425  012D5C  6F03               	movwf	Port_Init@pPort& (0+255),b
 14426  012D5E  EC0F  F095         	call	_Port_Init	;wreg free
 14427                           
 14428                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 14429  012D62  0EAE               	movlw	low _PortB
 14430  012D64  0101               	movlb	1	; () banked
 14431  012D66  6F01               	movwf	Port_Init@pInput& (0+255),b
 14432  012D68  0E03               	movlw	high _PortB
 14433  012D6A  0101               	movlb	1	; () banked
 14434  012D6C  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14435  012D6E  0E01               	movlw	1
 14436  012D70  0101               	movlb	1	; () banked
 14437  012D72  6F03               	movwf	Port_Init@pPort& (0+255),b
 14438  012D74  EC0F  F095         	call	_Port_Init	;wreg free
 14439                           
 14440                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 14441  012D78  0EA5               	movlw	low _PortC
 14442  012D7A  0101               	movlb	1	; () banked
 14443  012D7C  6F01               	movwf	Port_Init@pInput& (0+255),b
 14444  012D7E  0E00               	movlw	high _PortC
 14445  012D80  0101               	movlb	1	; () banked
 14446  012D82  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14447  012D84  0E02               	movlw	2
 14448  012D86  0101               	movlb	1	; () banked
 14449  012D88  6F03               	movwf	Port_Init@pPort& (0+255),b
 14450  012D8A  EC0F  F095         	call	_Port_Init	;wreg free
 14451                           
 14452                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 14453  012D8E  0E9B               	movlw	low _PortD
 14454  012D90  0101               	movlb	1	; () banked
 14455  012D92  6F01               	movwf	Port_Init@pInput& (0+255),b
 14456  012D94  0E00               	movlw	high _PortD
 14457  012D96  0101               	movlb	1	; () banked
 14458  012D98  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14459  012D9A  0E03               	movlw	3
 14460  012D9C  0101               	movlb	1	; () banked
 14461  012D9E  6F03               	movwf	Port_Init@pPort& (0+255),b
 14462  012DA0  EC0F  F095         	call	_Port_Init	;wreg free
 14463                           
 14464                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 14465  012DA4  0E91               	movlw	low _PortE
 14466  012DA6  0101               	movlb	1	; () banked
 14467  012DA8  6F01               	movwf	Port_Init@pInput& (0+255),b
 14468  012DAA  0E00               	movlw	high _PortE
 14469  012DAC  0101               	movlb	1	; () banked
 14470  012DAE  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14471  012DB0  0E04               	movlw	4
 14472  012DB2  0101               	movlb	1	; () banked
 14473  012DB4  6F03               	movwf	Port_Init@pPort& (0+255),b
 14474  012DB6  EC0F  F095         	call	_Port_Init	;wreg free
 14475                           
 14476                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 14477  012DBA  0EC2               	movlw	low _PortF
 14478  012DBC  0101               	movlb	1	; () banked
 14479  012DBE  6F01               	movwf	Port_Init@pInput& (0+255),b
 14480  012DC0  0E03               	movlw	high _PortF
 14481  012DC2  0101               	movlb	1	; () banked
 14482  012DC4  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14483  012DC6  0E05               	movlw	5
 14484  012DC8  0101               	movlb	1	; () banked
 14485  012DCA  6F03               	movwf	Port_Init@pPort& (0+255),b
 14486  012DCC  EC0F  F095         	call	_Port_Init	;wreg free
 14487                           
 14488                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 14489  012DD0  0EA4               	movlw	low _PortG
 14490  012DD2  0101               	movlb	1	; () banked
 14491  012DD4  6F01               	movwf	Port_Init@pInput& (0+255),b
 14492  012DD6  0E03               	movlw	high _PortG
 14493  012DD8  0101               	movlb	1	; () banked
 14494  012DDA  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14495  012DDC  0E06               	movlw	6
 14496  012DDE  0101               	movlb	1	; () banked
 14497  012DE0  6F03               	movwf	Port_Init@pPort& (0+255),b
 14498  012DE2  EC0F  F095         	call	_Port_Init	;wreg free
 14499                           
 14500                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 14501  012DE6  0EC2               	movlw	low _PortF
 14502  012DE8  0100               	movlb	0	; () banked
 14503  012DEA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14504  012DEC  0E03               	movlw	high _PortF
 14505  012DEE  0100               	movlb	0	; () banked
 14506  012DF0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14507  012DF2  0E05               	movlw	5
 14508  012DF4  0100               	movlb	0	; () banked
 14509  012DF6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14510  012DF8  0E00               	movlw	0
 14511  012DFA  0100               	movlb	0	; () banked
 14512  012DFC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14513  012DFE  EC60  F093         	call	_Port_SetPinType	;wreg free
 14514                           
 14515                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 14516  012E02  0EAE               	movlw	low _PortB
 14517  012E04  0100               	movlb	0	; () banked
 14518  012E06  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 14519  012E08  0E03               	movlw	high _PortB
 14520  012E0A  0100               	movlb	0	; () banked
 14521  012E0C  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14522  012E0E  0E00               	movlw	0
 14523  012E10  0100               	movlb	0	; () banked
 14524  012E12  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14525  012E14  0E00               	movlw	0
 14526  012E16  0100               	movlb	0	; () banked
 14527  012E18  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 14528  012E1A  EC53  F08D         	call	_Port_SetQuadType	;wreg free
 14529                           
 14530                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 14531  012E1E  0EC2               	movlw	low _PortF
 14532  012E20  0100               	movlb	0	; () banked
 14533  012E22  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14534  012E24  0E03               	movlw	high _PortF
 14535  012E26  0100               	movlb	0	; () banked
 14536  012E28  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14537  012E2A  0E06               	movlw	6
 14538  012E2C  0100               	movlb	0	; () banked
 14539  012E2E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14540  012E30  0E03               	movlw	3
 14541  012E32  0100               	movlb	0	; () banked
 14542  012E34  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14543  012E36  EC60  F093         	call	_Port_SetPinType	;wreg free
 14544                           
 14545                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 14546  012E3A  0EA4               	movlw	low _PortG
 14547  012E3C  0100               	movlb	0	; () banked
 14548  012E3E  6FF4               	movwf	Port_SetType@pInput& (0+255),b
 14549  012E40  0E03               	movlw	high _PortG
 14550  012E42  0100               	movlb	0	; () banked
 14551  012E44  6FF5               	movwf	(Port_SetType@pInput+1)& (0+255),b
 14552  012E46  0E03               	movlw	3
 14553  012E48  0100               	movlb	0	; () banked
 14554  012E4A  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14555  012E4C  EC7E  F08E         	call	_Port_SetType	;wreg free
 14556                           
 14557                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 14558  012E50  0EA4               	movlw	low _PortG
 14559  012E52  0100               	movlb	0	; () banked
 14560  012E54  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14561  012E56  0E03               	movlw	high _PortG
 14562  012E58  0100               	movlb	0	; () banked
 14563  012E5A  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14564  012E5C  0E04               	movlw	4
 14565  012E5E  0100               	movlb	0	; () banked
 14566  012E60  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14567  012E62  0E00               	movlw	0
 14568  012E64  0100               	movlb	0	; () banked
 14569  012E66  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14570  012E68  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 14571                           
 14572                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14573  012E6C  0EC2               	movlw	low _PortF
 14574  012E6E  0100               	movlb	0	; () banked
 14575  012E70  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14576  012E72  0E03               	movlw	high _PortF
 14577  012E74  0100               	movlb	0	; () banked
 14578  012E76  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14579  012E78  0E06               	movlw	6
 14580  012E7A  0100               	movlb	0	; () banked
 14581  012E7C  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14582  012E7E  0E01               	movlw	1
 14583  012E80  0100               	movlb	0	; () banked
 14584  012E82  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14585  012E84  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 14586                           
 14587                           ;MXK.c: 55: LED_Init(eLED1);
 14588  012E88  0E00               	movlw	0
 14589  012E8A  EC8E  F0AC         	call	_LED_Init
 14590                           
 14591                           ;MXK.c: 56: LED_Init(eLED2);
 14592  012E8E  0E01               	movlw	1
 14593  012E90  EC8E  F0AC         	call	_LED_Init
 14594                           
 14595                           ;MXK.c: 58: PIR1 = 0;
 14596  012E94  0E00               	movlw	0
 14597  012E96  6E9E               	movwf	3998,c	;volatile
 14598                           
 14599                           ;MXK.c: 59: PIR2 = 0;
 14600  012E98  0E00               	movlw	0
 14601  012E9A  6EA1               	movwf	4001,c	;volatile
 14602                           
 14603                           ;MXK.c: 60: PIR3 = 0;
 14604  012E9C  0E00               	movlw	0
 14605  012E9E  6EA4               	movwf	4004,c	;volatile
 14606                           
 14607                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14608  012EA0  8E9B               	bsf	3995,7,c	;volatile
 14609                           
 14610                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14611  012EA2  8C9B               	bsf	3995,6,c	;volatile
 14612                           
 14613                           ;MXK.c: 66: delay_ms(100);
 14614  012EA4  0E00               	movlw	0
 14615  012EA6  0100               	movlb	0	; () banked
 14616  012EA8  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 14617  012EAA  0E64               	movlw	100
 14618  012EAC  6FBA               	movwf	delay_ms@ms& (0+255),b
 14619  012EAE  EC8C  F0AB         	call	_delay_ms	;wreg free
 14620                           
 14621                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14622  012EB2  8ED0               	bsf	4048,7,c	;volatile
 14623  012EB4  0012               	return		;funcret
 14624  012EB6                     __end_of_MXK_Init:
 14625                           	opt stack 0
 14626                           tblptru	equ	0xFF8
 14627                           tblptrh	equ	0xFF7
 14628                           tblptrl	equ	0xFF6
 14629                           tablat	equ	0xFF5
 14630                           prodh	equ	0xFF4
 14631                           prodl	equ	0xFF3
 14632                           intcon	equ	0xFF2
 14633                           postinc0	equ	0xFEE
 14634                           wreg	equ	0xFE8
 14635                           indf1	equ	0xFE7
 14636                           postdec1	equ	0xFE5
 14637                           fsr1h	equ	0xFE2
 14638                           fsr1l	equ	0xFE1
 14639                           indf2	equ	0xFDF
 14640                           postinc2	equ	0xFDE
 14641                           postdec2	equ	0xFDD
 14642                           fsr2h	equ	0xFDA
 14643                           fsr2l	equ	0xFD9
 14644                           status	equ	0xFD8
 14645                           
 14646 ;; *************** function _Port_Init *****************
 14647 ;; Defined at:
 14648 ;;		line 150 in file "Library/Port.c"
 14649 ;; Parameters:    Size  Location     Type
 14650 ;;  pInput          2    1[BANK1 ] const PTR struct Port
 14651 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14652 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14653 ;;  pPort           1    3[BANK1 ] enum E6786
 14654 ;; Auto vars:     Size  Location     Type
 14655 ;;  i               1    6[BANK1 ] unsigned char 
 14656 ;; Return value:  Size  Location     Type
 14657 ;;                  1    wreg      void 
 14658 ;; Registers used:
 14659 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14660 ;; Tracked objects:
 14661 ;;		On entry : 0/0
 14662 ;;		On exit  : 0/0
 14663 ;;		Unchanged: 0/0
 14664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14665 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14666 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14667 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14668 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14669 ;;Total ram usage:        6 bytes
 14670 ;; Hardware stack levels used:    1
 14671 ;; Hardware stack levels required when called:   15
 14672 ;; This function calls:
 14673 ;;		_GetPortPORT
 14674 ;;		_GetPortProperties
 14675 ;;		_GetPortTRIS
 14676 ;;		_Port_Set
 14677 ;;		_Port_SetPinType
 14678 ;;		_Port_SetType
 14679 ;;		_Word_GetPair
 14680 ;; This function is called by:
 14681 ;;		_MXK_Init
 14682 ;; This function uses a non-reentrant model
 14683 ;;
 14684                           
 14685                           	psect	text61
 14686  012A1E                     __ptext61:
 14687                           	opt stack 0
 14688  012A1E                     _Port_Init:
 14689                           	opt stack 13
 14690                           
 14691                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14692                           
 14693                           ;incstack = 0
 14694  012A1E  0101               	movlb	1	; () banked
 14695  012A20  5103               	movf	Port_Init@pPort& (0+255),w,b
 14696  012A22  ECD3  F0A4         	call	_GetPortProperties
 14697  012A26  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14698  012A2A  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14699  012A2E  0100               	movlb	0	; () banked
 14700  012A30  C0BA  FFDE         	movff	?_GetPortProperties,postinc2
 14701  012A34  0100               	movlb	0	; () banked
 14702  012A36  C0BB  FFDD         	movff	?_GetPortProperties+1,postdec2
 14703                           
 14704                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14705  012A3A  0101               	movlb	1	; () banked
 14706  012A3C  5103               	movf	Port_Init@pPort& (0+255),w,b
 14707  012A3E  EC26  F0A5         	call	_GetPortPORT
 14708  012A42  0101               	movlb	1	; () banked
 14709  012A44  EE20 F006          	lfsr	2,6
 14710  012A48  5101               	movf	Port_Init@pInput& (0+255),w,b
 14711  012A4A  26D9               	addwf	fsr2l,f,c
 14712  012A4C  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14713  012A4E  22DA               	addwfc	fsr2h,f,c
 14714  012A50  0100               	movlb	0	; () banked
 14715  012A52  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14716  012A56  0100               	movlb	0	; () banked
 14717  012A58  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14718                           
 14719                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14720  012A5C  0101               	movlb	1	; () banked
 14721  012A5E  5103               	movf	Port_Init@pPort& (0+255),w,b
 14722  012A60  EC26  F0A5         	call	_GetPortPORT
 14723  012A64  0101               	movlb	1	; () banked
 14724  012A66  EE20 F004          	lfsr	2,4
 14725  012A6A  5101               	movf	Port_Init@pInput& (0+255),w,b
 14726  012A6C  26D9               	addwf	fsr2l,f,c
 14727  012A6E  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14728  012A70  22DA               	addwfc	fsr2h,f,c
 14729  012A72  0100               	movlb	0	; () banked
 14730  012A74  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14731  012A78  0100               	movlb	0	; () banked
 14732  012A7A  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14733                           
 14734                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14735  012A7E  0101               	movlb	1	; () banked
 14736  012A80  5103               	movf	Port_Init@pPort& (0+255),w,b
 14737  012A82  EC80  F0A4         	call	_GetPortTRIS
 14738  012A86  0101               	movlb	1	; () banked
 14739  012A88  EE20 F002          	lfsr	2,2
 14740  012A8C  5101               	movf	Port_Init@pInput& (0+255),w,b
 14741  012A8E  26D9               	addwf	fsr2l,f,c
 14742  012A90  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14743  012A92  22DA               	addwfc	fsr2h,f,c
 14744  012A94  0100               	movlb	0	; () banked
 14745  012A96  C0BA  FFDE         	movff	?_GetPortTRIS,postinc2
 14746  012A9A  0100               	movlb	0	; () banked
 14747  012A9C  C0BB  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14748                           
 14749                           ; BSR set to: 0
 14750                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14751  012AA0  0101               	movlb	1	; () banked
 14752  012AA2  EE20 F004          	lfsr	2,4
 14753  012AA6  5101               	movf	Port_Init@pInput& (0+255),w,b
 14754  012AA8  26D9               	addwf	fsr2l,f,c
 14755  012AAA  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14756  012AAC  22DA               	addwfc	fsr2h,f,c
 14757  012AAE  CFDE F104          	movff	postinc2,??_Port_Init
 14758  012AB2  CFDD F105          	movff	postdec2,??_Port_Init+1
 14759  012AB6  C104  FFD9         	movff	??_Port_Init,fsr2l
 14760  012ABA  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14761  012ABE  0E00               	movlw	0
 14762  012AC0  6EDF               	movwf	indf2,c
 14763                           
 14764                           ; BSR set to: 1
 14765                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 14766  012AC2  0101               	movlb	1	; () banked
 14767  012AC4  EE20 F002          	lfsr	2,2
 14768  012AC8  5101               	movf	Port_Init@pInput& (0+255),w,b
 14769  012ACA  26D9               	addwf	fsr2l,f,c
 14770  012ACC  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14771  012ACE  22DA               	addwfc	fsr2h,f,c
 14772  012AD0  CFDE F104          	movff	postinc2,??_Port_Init
 14773  012AD4  CFDD F105          	movff	postdec2,??_Port_Init+1
 14774  012AD8  C104  FFD9         	movff	??_Port_Init,fsr2l
 14775  012ADC  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14776  012AE0  0EFF               	movlw	255
 14777  012AE2  6EDF               	movwf	indf2,c
 14778                           
 14779                           ; BSR set to: 1
 14780                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 14781  012AE4  C101  F0F4         	movff	Port_Init@pInput,Port_SetType@pInput
 14782  012AE8  C102  F0F5         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 14783  012AEC  0E00               	movlw	0
 14784  012AEE  0100               	movlb	0	; () banked
 14785  012AF0  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14786  012AF2  EC7E  F08E         	call	_Port_SetType	;wreg free
 14787                           
 14788                           ;Port.c: 166: UINT8 i;
 14789                           ;Port.c: 167: for (i=0; i<8; i++)
 14790  012AF6  0E00               	movlw	0
 14791  012AF8  0101               	movlb	1	; () banked
 14792  012AFA  6F06               	movwf	Port_Init@i& (0+255),b
 14793  012AFC                     l14020:
 14794                           
 14795                           ; BSR set to: 1
 14796  012AFC  0E07               	movlw	7
 14797  012AFE  0101               	movlb	1	; () banked
 14798  012B00  6506               	cpfsgt	Port_Init@i& (0+255),b
 14799  012B02  D031               	goto	l403
 14800  012B04  D04B               	goto	u10740
 14801  012B06                     
 14802                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14803                           
 14804                           ; BSR set to: 1
 14805  012B06  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14806  012B0A  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14807  012B0E  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14808  012B12  0E03               	movlw	3
 14809  012B14  0100               	movlb	0	; () banked
 14810  012B16  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14811  012B18  EC60  F093         	call	_Port_SetPinType	;wreg free
 14812                           
 14813                           ;Port.c: 173: break;
 14814  012B1C  D03C               	goto	l405
 14815  012B1E                     
 14816                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14817  012B1E  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14818  012B22  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14819  012B26  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14820  012B2A  0E02               	movlw	2
 14821  012B2C  0100               	movlb	0	; () banked
 14822  012B2E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14823  012B30  EC60  F093         	call	_Port_SetPinType	;wreg free
 14824                           
 14825                           ;Port.c: 176: break;
 14826  012B34  D030               	goto	l405
 14827  012B36                     
 14828                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14829  012B36  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14830  012B3A  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14831  012B3E  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14832  012B42  0E01               	movlw	1
 14833  012B44  0100               	movlb	0	; () banked
 14834  012B46  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14835  012B48  EC60  F093         	call	_Port_SetPinType	;wreg free
 14836                           
 14837                           ;Port.c: 179: break;
 14838  012B4C  D024               	goto	l405
 14839  012B4E                     
 14840                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14841  012B4E  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14842  012B52  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14843  012B56  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14844  012B5A  0E00               	movlw	0
 14845  012B5C  0100               	movlb	0	; () banked
 14846  012B5E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14847  012B60  EC60  F093         	call	_Port_SetPinType	;wreg free
 14848                           
 14849                           ;Port.c: 183: }
 14850                           
 14851                           ;Port.c: 182: break;
 14852  012B64  D018               	goto	l405
 14853  012B66                     l403:
 14854  012B66  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14855  012B6A  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14856  012B6E  CFDE F0C6          	movff	postinc2,Word_GetPair@pInput
 14857  012B72  CFDD F0C7          	movff	postdec2,Word_GetPair@pInput+1
 14858  012B76  C106  F0C8         	movff	Port_Init@i,Word_GetPair@pPair
 14859  012B7A  EC41  F0B0         	call	_Word_GetPair	;wreg free
 14860                           
 14861                           ; Switch size 1, requested type "space"
 14862                           ; Number of cases is 4, Range of values is 0 to 3
 14863                           ; switch strategies available:
 14864                           ; Name         Instructions Cycles
 14865                           ; simple_byte           13     7 (average)
 14866                           ;	Chosen strategy is simple_byte
 14867  012B7E  0A00               	xorlw	0	; case 0
 14868  012B80  B4D8               	btfsc	status,2,c
 14869  012B82  D7C1               	goto	l404
 14870  012B84  0A01               	xorlw	1	; case 1
 14871  012B86  B4D8               	btfsc	status,2,c
 14872  012B88  D7D6               	goto	l407
 14873  012B8A  0A03               	xorlw	3	; case 2
 14874  012B8C  B4D8               	btfsc	status,2,c
 14875  012B8E  D7C7               	goto	l406
 14876  012B90  0A01               	xorlw	1	; case 3
 14877  012B92  B4D8               	btfsc	status,2,c
 14878  012B94  D7DC               	goto	l408
 14879  012B96                     l405:
 14880  012B96  0101               	movlb	1	; () banked
 14881  012B98  2B06               	incf	Port_Init@i& (0+255),f,b
 14882  012B9A  D7B0               	goto	l14020
 14883  012B9C                     u10740:
 14884                           
 14885                           ; BSR set to: 1
 14886                           ;Port.c: 184: }
 14887                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14888                           
 14889                           ; BSR set to: 1
 14890  012B9C  C101  F0C9         	movff	Port_Init@pInput,Port_Set@pInput
 14891  012BA0  C102  F0CA         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14892  012BA4  0E00               	movlw	0
 14893  012BA6  0100               	movlb	0	; () banked
 14894  012BA8  6FCB               	movwf	Port_Set@pValue& (0+255),b
 14895  012BAA  EC34  F08A         	call	_Port_Set	;wreg free
 14896  012BAE  0012               	return		;funcret
 14897  012BB0                     __end_of_Port_Init:
 14898                           	opt stack 0
 14899                           tblptru	equ	0xFF8
 14900                           tblptrh	equ	0xFF7
 14901                           tblptrl	equ	0xFF6
 14902                           tablat	equ	0xFF5
 14903                           prodh	equ	0xFF4
 14904                           prodl	equ	0xFF3
 14905                           intcon	equ	0xFF2
 14906                           postinc0	equ	0xFEE
 14907                           wreg	equ	0xFE8
 14908                           indf1	equ	0xFE7
 14909                           postdec1	equ	0xFE5
 14910                           fsr1h	equ	0xFE2
 14911                           fsr1l	equ	0xFE1
 14912                           indf2	equ	0xFDF
 14913                           postinc2	equ	0xFDE
 14914                           postdec2	equ	0xFDD
 14915                           fsr2h	equ	0xFDA
 14916                           fsr2l	equ	0xFD9
 14917                           status	equ	0xFD8
 14918                           
 14919 ;; *************** function _Port_SetType *****************
 14920 ;; Defined at:
 14921 ;;		line 513 in file "Library/Port.c"
 14922 ;; Parameters:    Size  Location     Type
 14923 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14924 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14925 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14926 ;;  pType           1   60[BANK0 ] enum E6795
 14927 ;; Auto vars:     Size  Location     Type
 14928 ;;  Output          1    0[BANK1 ] enum E6475
 14929 ;; Return value:  Size  Location     Type
 14930 ;;                  1    wreg      enum E6475
 14931 ;; Registers used:
 14932 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14933 ;; Tracked objects:
 14934 ;;		On entry : 0/0
 14935 ;;		On exit  : 0/0
 14936 ;;		Unchanged: 0/0
 14937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14938 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14939 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14940 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14941 ;;      Totals:         0       5       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14942 ;;Total ram usage:        6 bytes
 14943 ;; Hardware stack levels used:    1
 14944 ;; Hardware stack levels required when called:   14
 14945 ;; This function calls:
 14946 ;;		_Port_CheckPortType
 14947 ;;		_Word_SetPair
 14948 ;; This function is called by:
 14949 ;;		_Port_Init
 14950 ;;		_MXK_Init
 14951 ;; This function uses a non-reentrant model
 14952 ;;
 14953                           
 14954                           	psect	text62
 14955  011CFC                     __ptext62:
 14956                           	opt stack 0
 14957  011CFC                     _Port_SetType:
 14958                           	opt stack 14
 14959                           
 14960                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14961                           
 14962                           ;incstack = 0
 14963  011CFC  0E05               	movlw	5
 14964  011CFE  0101               	movlb	1	; () banked
 14965  011D00  6F00               	movwf	Port_SetType@Output& (0+255),b
 14966                           
 14967                           ;Port.c: 517: switch (pType)
 14968  011D02  D07A               	goto	l509
 14969  011D04                     
 14970                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14971                           
 14972                           ; BSR set to: 1
 14973  011D04  0100               	movlb	0	; () banked
 14974  011D06  EE20 F002          	lfsr	2,2
 14975  011D0A  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14976  011D0C  26D9               	addwf	fsr2l,f,c
 14977  011D0E  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14978  011D10  22DA               	addwfc	fsr2h,f,c
 14979  011D12  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14980  011D16  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14981  011D1A  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14982  011D1E  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14983  011D22  0EFF               	movlw	255
 14984  011D24  D067               	goto	L10
 14985  011D26                     
 14986                           ; BSR set to: 0
 14987                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14988                           
 14989                           ; BSR set to: 0
 14990  011D26  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14991  011D2A  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14992  011D2E  0E01               	movlw	1
 14993  011D30  0100               	movlb	0	; () banked
 14994  011D32  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14995  011D34  EC8C  F0AE         	call	_Port_CheckPortType	;wreg free
 14996  011D38  0101               	movlb	1	; () banked
 14997  011D3A  6F00               	movwf	Port_SetType@Output& (0+255),b
 14998  011D3C  0101               	movlb	1	; () banked
 14999  011D3E  5100               	movf	Port_SetType@Output& (0+255),w,b
 15000  011D40  A4D8               	btfss	status,2,c
 15001  011D42  0012               	return	
 15002                           
 15003                           ; BSR set to: 1
 15004                           ;Port.c: 527: {
 15005                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 15006  011D44  0100               	movlb	0	; () banked
 15007  011D46  EE20 F002          	lfsr	2,2
 15008  011D4A  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15009  011D4C  26D9               	addwf	fsr2l,f,c
 15010  011D4E  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15011  011D50  22DA               	addwfc	fsr2h,f,c
 15012  011D52  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15013  011D56  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15014  011D5A  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15015  011D5E  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15016  011D62  0E00               	movlw	0
 15017  011D64  6EDF               	movwf	indf2,c
 15018                           
 15019                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 15020  011D66  0100               	movlb	0	; () banked
 15021  011D68  EE20 F004          	lfsr	2,4
 15022  011D6C  D036               	goto	L21
 15023  011D6E                     
 15024                           ; BSR set to: 0
 15025                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 15026                           
 15027                           ; BSR set to: 0
 15028  011D6E  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15029  011D72  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15030  011D76  0E02               	movlw	2
 15031  011D78  0100               	movlb	0	; () banked
 15032  011D7A  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15033  011D7C  EC8C  F0AE         	call	_Port_CheckPortType	;wreg free
 15034  011D80  0101               	movlb	1	; () banked
 15035  011D82  6F00               	movwf	Port_SetType@Output& (0+255),b
 15036  011D84  0101               	movlb	1	; () banked
 15037  011D86  5100               	movf	Port_SetType@Output& (0+255),w,b
 15038  011D88  A4D8               	btfss	status,2,c
 15039  011D8A  0012               	return	
 15040                           
 15041                           ; BSR set to: 1
 15042                           ;Port.c: 538: {
 15043                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 15044  011D8C  0100               	movlb	0	; () banked
 15045  011D8E  EE20 F002          	lfsr	2,2
 15046  011D92  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15047  011D94  26D9               	addwf	fsr2l,f,c
 15048  011D96  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15049  011D98  22DA               	addwfc	fsr2h,f,c
 15050  011D9A  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15051  011D9E  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15052  011DA2  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15053  011DA6  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15054  011DAA  0EFF               	movlw	255
 15055  011DAC  6EDF               	movwf	indf2,c
 15056                           
 15057                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 15058  011DAE  0100               	movlb	0	; () banked
 15059  011DB0  EE20 F004          	lfsr	2,4
 15060  011DB4  D7AA               	goto	L11
 15061  011DB6                     
 15062                           ; BSR set to: 0
 15063                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 15064                           
 15065                           ; BSR set to: 0
 15066  011DB6  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15067  011DBA  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15068  011DBE  0E00               	movlw	0
 15069  011DC0  0100               	movlb	0	; () banked
 15070  011DC2  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15071  011DC4  EC8C  F0AE         	call	_Port_CheckPortType	;wreg free
 15072  011DC8  0101               	movlb	1	; () banked
 15073  011DCA  6F00               	movwf	Port_SetType@Output& (0+255),b
 15074  011DCC  0101               	movlb	1	; () banked
 15075  011DCE  5100               	movf	Port_SetType@Output& (0+255),w,b
 15076  011DD0  A4D8               	btfss	status,2,c
 15077  011DD2  0012               	return	
 15078                           
 15079                           ; BSR set to: 1
 15080                           ;Port.c: 549: {
 15081                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 15082  011DD4  0100               	movlb	0	; () banked
 15083  011DD6  EE20 F002          	lfsr	2,2
 15084  011DDA                     L21:
 15085  011DDA  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15086  011DDC  26D9               	addwf	fsr2l,f,c
 15087  011DDE  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15088  011DE0  22DA               	addwfc	fsr2h,f,c
 15089  011DE2  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15090  011DE6  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15091  011DEA  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15092  011DEE  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15093  011DF2  0E00               	movlw	0
 15094  011DF4                     L10:
 15095  011DF4  6EDF               	movwf	indf2,c
 15096                           
 15097                           ;Port.c: 552: }
 15098  011DF6  D00E               	goto	l511
 15099  011DF8                     l509:
 15100                           
 15101                           ; BSR set to: 0
 15102  011DF8  0100               	movlb	0	; () banked
 15103  011DFA  51F6               	movf	Port_SetType@pType& (0+255),w,b
 15104                           
 15105                           ; Switch size 1, requested type "space"
 15106                           ; Number of cases is 4, Range of values is 0 to 3
 15107                           ; switch strategies available:
 15108                           ; Name         Instructions Cycles
 15109                           ; simple_byte           13     7 (average)
 15110                           ;	Chosen strategy is simple_byte
 15111  011DFC  0A00               	xorlw	0	; case 0
 15112  011DFE  B4D8               	btfsc	status,2,c
 15113  011E00  D781               	goto	l510
 15114  011E02  0A01               	xorlw	1	; case 1
 15115  011E04  B4D8               	btfsc	status,2,c
 15116  011E06  D78F               	goto	l512
 15117  011E08  0A03               	xorlw	3	; case 2
 15118  011E0A  B4D8               	btfsc	status,2,c
 15119  011E0C  D7B0               	goto	l516
 15120  011E0E  0A01               	xorlw	1	; case 3
 15121  011E10  B4D8               	btfsc	status,2,c
 15122  011E12  D7D1               	goto	l519
 15123  011E14                     l511:
 15124                           
 15125                           ; BSR set to: 0
 15126                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 15127                           
 15128                           ; BSR set to: 0
 15129  011E14  0E08               	movlw	8
 15130  011E16  0100               	movlb	0	; () banked
 15131  011E18  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15132  011E1A  0100               	movlb	0	; () banked
 15133  011E1C  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15134  011E1E  0E00               	movlw	0
 15135  011E20  0100               	movlb	0	; () banked
 15136  011E22  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15137  011E24  0100               	movlb	0	; () banked
 15138  011E26  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15139  011E28  0E00               	movlw	0
 15140  011E2A  0100               	movlb	0	; () banked
 15141  011E2C  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15142  011E2E  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15143  011E32  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 15144                           
 15145                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 15146  011E36  0E08               	movlw	8
 15147  011E38  0100               	movlb	0	; () banked
 15148  011E3A  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15149  011E3C  0100               	movlb	0	; () banked
 15150  011E3E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15151  011E40  0E00               	movlw	0
 15152  011E42  0100               	movlb	0	; () banked
 15153  011E44  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15154  011E46  0100               	movlb	0	; () banked
 15155  011E48  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15156  011E4A  0E01               	movlw	1
 15157  011E4C  0100               	movlb	0	; () banked
 15158  011E4E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15159  011E50  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15160  011E54  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 15161                           
 15162                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 15163  011E58  0E08               	movlw	8
 15164  011E5A  0100               	movlb	0	; () banked
 15165  011E5C  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15166  011E5E  0100               	movlb	0	; () banked
 15167  011E60  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15168  011E62  0E00               	movlw	0
 15169  011E64  0100               	movlb	0	; () banked
 15170  011E66  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15171  011E68  0100               	movlb	0	; () banked
 15172  011E6A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15173  011E6C  0E02               	movlw	2
 15174  011E6E  0100               	movlb	0	; () banked
 15175  011E70  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15176  011E72  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15177  011E76  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 15178                           
 15179                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 15180  011E7A  0E08               	movlw	8
 15181  011E7C  0100               	movlb	0	; () banked
 15182  011E7E  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15183  011E80  0100               	movlb	0	; () banked
 15184  011E82  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15185  011E84  0E00               	movlw	0
 15186  011E86  0100               	movlb	0	; () banked
 15187  011E88  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15188  011E8A  0100               	movlb	0	; () banked
 15189  011E8C  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15190  011E8E  0E03               	movlw	3
 15191  011E90  0100               	movlb	0	; () banked
 15192  011E92  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15193  011E94  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15194  011E98  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 15195                           
 15196                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 15197  011E9C  0E08               	movlw	8
 15198  011E9E  0100               	movlb	0	; () banked
 15199  011EA0  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15200  011EA2  0100               	movlb	0	; () banked
 15201  011EA4  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15202  011EA6  0E00               	movlw	0
 15203  011EA8  0100               	movlb	0	; () banked
 15204  011EAA  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15205  011EAC  0100               	movlb	0	; () banked
 15206  011EAE  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15207  011EB0  0E04               	movlw	4
 15208  011EB2  0100               	movlb	0	; () banked
 15209  011EB4  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15210  011EB6  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15211  011EBA  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 15212                           
 15213                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 15214  011EBE  0E08               	movlw	8
 15215  011EC0  0100               	movlb	0	; () banked
 15216  011EC2  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15217  011EC4  0100               	movlb	0	; () banked
 15218  011EC6  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15219  011EC8  0E00               	movlw	0
 15220  011ECA  0100               	movlb	0	; () banked
 15221  011ECC  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15222  011ECE  0100               	movlb	0	; () banked
 15223  011ED0  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15224  011ED2  0E05               	movlw	5
 15225  011ED4  0100               	movlb	0	; () banked
 15226  011ED6  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15227  011ED8  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15228  011EDC  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 15229                           
 15230                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 15231  011EE0  0E08               	movlw	8
 15232  011EE2  0100               	movlb	0	; () banked
 15233  011EE4  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15234  011EE6  0100               	movlb	0	; () banked
 15235  011EE8  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15236  011EEA  0E00               	movlw	0
 15237  011EEC  0100               	movlb	0	; () banked
 15238  011EEE  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15239  011EF0  0100               	movlb	0	; () banked
 15240  011EF2  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15241  011EF4  0E06               	movlw	6
 15242  011EF6  0100               	movlb	0	; () banked
 15243  011EF8  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15244  011EFA  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15245  011EFE  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 15246                           
 15247                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 15248  011F02  0E08               	movlw	8
 15249  011F04  0100               	movlb	0	; () banked
 15250  011F06  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15251  011F08  0100               	movlb	0	; () banked
 15252  011F0A  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15253  011F0C  0E00               	movlw	0
 15254  011F0E  0100               	movlb	0	; () banked
 15255  011F10  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15256  011F12  0100               	movlb	0	; () banked
 15257  011F14  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15258  011F16  0E07               	movlw	7
 15259  011F18  0100               	movlb	0	; () banked
 15260  011F1A  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15261  011F1C  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15262  011F20  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 15263  011F24  0012               	return	
 15264  011F26                     __end_of_Port_SetType:
 15265                           	opt stack 0
 15266                           tblptru	equ	0xFF8
 15267                           tblptrh	equ	0xFF7
 15268                           tblptrl	equ	0xFF6
 15269                           tablat	equ	0xFF5
 15270                           prodh	equ	0xFF4
 15271                           prodl	equ	0xFF3
 15272                           intcon	equ	0xFF2
 15273                           postinc0	equ	0xFEE
 15274                           wreg	equ	0xFE8
 15275                           indf1	equ	0xFE7
 15276                           postdec1	equ	0xFE5
 15277                           fsr1h	equ	0xFE2
 15278                           fsr1l	equ	0xFE1
 15279                           indf2	equ	0xFDF
 15280                           postinc2	equ	0xFDE
 15281                           postdec2	equ	0xFDD
 15282                           fsr2h	equ	0xFDA
 15283                           fsr2l	equ	0xFD9
 15284                           status	equ	0xFD8
 15285                           
 15286 ;; *************** function _Port_CheckPortType *****************
 15287 ;; Defined at:
 15288 ;;		line 138 in file "Library/Port.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15291 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15292 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15293 ;;  pDrive          1   56[BANK0 ] enum E6469
 15294 ;; Auto vars:     Size  Location     Type
 15295 ;;  Output          1   57[BANK0 ] enum E6475
 15296 ;; Return value:  Size  Location     Type
 15297 ;;                  1    wreg      enum E6475
 15298 ;; Registers used:
 15299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15300 ;; Tracked objects:
 15301 ;;		On entry : 0/0
 15302 ;;		On exit  : 0/0
 15303 ;;		Unchanged: 0/0
 15304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15305 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15308 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15309 ;;Total ram usage:        4 bytes
 15310 ;; Hardware stack levels used:    1
 15311 ;; Hardware stack levels required when called:   13
 15312 ;; This function calls:
 15313 ;;		_Port_CheckQuadType
 15314 ;; This function is called by:
 15315 ;;		_Port_SetType
 15316 ;; This function uses a non-reentrant model
 15317 ;;
 15318                           
 15319                           	psect	text63
 15320  015D18                     __ptext63:
 15321                           	opt stack 0
 15322  015D18                     _Port_CheckPortType:
 15323                           	opt stack 14
 15324                           
 15325                           ;Port.c: 140: ePinError Output = ePinErrorState;
 15326                           
 15327                           ;incstack = 0
 15328  015D18  0E05               	movlw	5
 15329  015D1A  0100               	movlb	0	; () banked
 15330  015D1C  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15331                           
 15332                           ; BSR set to: 0
 15333                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 15334  015D1E  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15335  015D22  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15336  015D26  0E00               	movlw	0
 15337  015D28  0100               	movlb	0	; () banked
 15338  015D2A  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15339  015D2C  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15340  015D30  EC1E  F0AD         	call	_Port_CheckQuadType	;wreg free
 15341  015D34  0100               	movlb	0	; () banked
 15342  015D36  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15343  015D38  0100               	movlb	0	; () banked
 15344  015D3A  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15345  015D3C  A4D8               	btfss	status,2,c
 15346  015D3E  D00D               	goto	l397
 15347                           
 15348                           ; BSR set to: 0
 15349                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 15350  015D40  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15351  015D44  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15352  015D48  0E01               	movlw	1
 15353  015D4A  0100               	movlb	0	; () banked
 15354  015D4C  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15355  015D4E  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15356  015D52  EC1E  F0AD         	call	_Port_CheckQuadType	;wreg free
 15357  015D56  0100               	movlb	0	; () banked
 15358  015D58  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15359  015D5A                     l397:
 15360                           
 15361                           ; BSR set to: 0
 15362                           ;Port.c: 146: return Output;
 15363                           
 15364                           ; BSR set to: 0
 15365  015D5A  0100               	movlb	0	; () banked
 15366  015D5C  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15367  015D5E  0012               	return	
 15368  015D60                     __end_of_Port_CheckPortType:
 15369                           	opt stack 0
 15370                           tblptru	equ	0xFF8
 15371                           tblptrh	equ	0xFF7
 15372                           tblptrl	equ	0xFF6
 15373                           tablat	equ	0xFF5
 15374                           prodh	equ	0xFF4
 15375                           prodl	equ	0xFF3
 15376                           intcon	equ	0xFF2
 15377                           postinc0	equ	0xFEE
 15378                           wreg	equ	0xFE8
 15379                           indf1	equ	0xFE7
 15380                           postdec1	equ	0xFE5
 15381                           fsr1h	equ	0xFE2
 15382                           fsr1l	equ	0xFE1
 15383                           indf2	equ	0xFDF
 15384                           postinc2	equ	0xFDE
 15385                           postdec2	equ	0xFDD
 15386                           fsr2h	equ	0xFDA
 15387                           fsr2l	equ	0xFD9
 15388                           status	equ	0xFD8
 15389                           
 15390 ;; *************** function _Port_Set *****************
 15391 ;; Defined at:
 15392 ;;		line 570 in file "Library/Port.c"
 15393 ;; Parameters:    Size  Location     Type
 15394 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15395 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15396 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15397 ;;  pValue          1   17[BANK0 ] unsigned char 
 15398 ;; Auto vars:     Size  Location     Type
 15399 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 15400 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 15401 ;;  Type            1   38[BANK0 ] enum E6795
 15402 ;; Return value:  Size  Location     Type
 15403 ;;                  1    wreg      void 
 15404 ;; Registers used:
 15405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15406 ;; Tracked objects:
 15407 ;;		On entry : 0/0
 15408 ;;		On exit  : 0/0
 15409 ;;		Unchanged: 0/0
 15410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15411 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15412 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15413 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15414 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15415 ;;Total ram usage:       24 bytes
 15416 ;; Hardware stack levels used:    1
 15417 ;; Hardware stack levels required when called:   10
 15418 ;; This function calls:
 15419 ;;		_Byte_SetByte
 15420 ;;		_Word_GetPair
 15421 ;; This function is called by:
 15422 ;;		_Port_Init
 15423 ;;		_Port_Toggle
 15424 ;; This function uses a non-reentrant model
 15425 ;;
 15426                           
 15427                           	psect	text64
 15428  011468                     __ptext64:
 15429                           	opt stack 0
 15430  011468                     _Port_Set:
 15431                           	opt stack 17
 15432                           
 15433                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 15434                           
 15435                           ; BSR set to: 0
 15436                           ;incstack = 0
 15437  011468  0E08               	movlw	8
 15438  01146A  0100               	movlb	0	; () banked
 15439  01146C  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15440  01146E  0100               	movlb	0	; () banked
 15441  011470  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15442  011472  0E00               	movlw	0
 15443  011474  0100               	movlb	0	; () banked
 15444  011476  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15445  011478  0100               	movlb	0	; () banked
 15446  01147A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15447  01147C  0E00               	movlw	0
 15448  01147E  0100               	movlb	0	; () banked
 15449  011480  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15450  011482  EC41  F0B0         	call	_Word_GetPair	;wreg free
 15451  011486  0100               	movlb	0	; () banked
 15452  011488  6FE0               	movwf	Port_Set@Type& (0+255),b
 15453                           
 15454                           ; BSR set to: 0
 15455                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 15456  01148A  0100               	movlb	0	; () banked
 15457  01148C  51E0               	movf	Port_Set@Type& (0+255),w,b
 15458  01148E  0100               	movlb	0	; () banked
 15459  011490  6FCC               	movwf	??_Port_Set& (0+255),b
 15460  011492  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15461  011494  0E0E               	movlw	14
 15462  011496                     u9835:
 15463  011496  90D8               	bcf	status,0,c
 15464  011498  0100               	movlb	0	; () banked
 15465  01149A  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15466  01149C  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15467  01149E  2EE8               	decfsz	wreg,f,c
 15468  0114A0  D7FA               	goto	u9835
 15469  0114A2  0100               	movlb	0	; () banked
 15470  0114A4  51E0               	movf	Port_Set@Type& (0+255),w,b
 15471  0114A6  0100               	movlb	0	; () banked
 15472  0114A8  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15473  0114AA  6BCF               	clrf	(??_Port_Set+3)& (0+255),b
 15474  0114AC  0E0C               	movlw	12
 15475  0114AE                     u9845:
 15476  0114AE  90D8               	bcf	status,0,c
 15477  0114B0  0100               	movlb	0	; () banked
 15478  0114B2  37CE               	rlcf	(??_Port_Set+2)& (0+255),f,b
 15479  0114B4  37CF               	rlcf	(??_Port_Set+3)& (0+255),f,b
 15480  0114B6  2EE8               	decfsz	wreg,f,c
 15481  0114B8  D7FA               	goto	u9845
 15482  0114BA  0100               	movlb	0	; () banked
 15483  0114BC  51E0               	movf	Port_Set@Type& (0+255),w,b
 15484  0114BE  0100               	movlb	0	; () banked
 15485  0114C0  6FD0               	movwf	(??_Port_Set+4)& (0+255),b
 15486  0114C2  6BD1               	clrf	(??_Port_Set+5)& (0+255),b
 15487  0114C4  0E0A               	movlw	10
 15488  0114C6                     u9855:
 15489  0114C6  90D8               	bcf	status,0,c
 15490  0114C8  0100               	movlb	0	; () banked
 15491  0114CA  37D0               	rlcf	(??_Port_Set+4)& (0+255),f,b
 15492  0114CC  37D1               	rlcf	(??_Port_Set+5)& (0+255),f,b
 15493  0114CE  2EE8               	decfsz	wreg,f,c
 15494  0114D0  D7FA               	goto	u9855
 15495  0114D2  0100               	movlb	0	; () banked
 15496  0114D4  51E0               	movf	Port_Set@Type& (0+255),w,b
 15497  0114D6  0100               	movlb	0	; () banked
 15498  0114D8  6FD3               	movwf	(??_Port_Set+7)& (0+255),b
 15499  0114DA  6BD2               	clrf	(??_Port_Set+6)& (0+255),b
 15500  0114DC  0100               	movlb	0	; () banked
 15501  0114DE  51E0               	movf	Port_Set@Type& (0+255),w,b
 15502  0114E0  0100               	movlb	0	; () banked
 15503  0114E2  6FD4               	movwf	(??_Port_Set+8)& (0+255),b
 15504  0114E4  6BD5               	clrf	(??_Port_Set+9)& (0+255),b
 15505  0114E6  0E06               	movlw	6
 15506  0114E8                     u9865:
 15507  0114E8  90D8               	bcf	status,0,c
 15508  0114EA  0100               	movlb	0	; () banked
 15509  0114EC  37D4               	rlcf	(??_Port_Set+8)& (0+255),f,b
 15510  0114EE  37D5               	rlcf	(??_Port_Set+9)& (0+255),f,b
 15511  0114F0  2EE8               	decfsz	wreg,f,c
 15512  0114F2  D7FA               	goto	u9865
 15513  0114F4  0100               	movlb	0	; () banked
 15514  0114F6  51E0               	movf	Port_Set@Type& (0+255),w,b
 15515  0114F8  0100               	movlb	0	; () banked
 15516  0114FA  6FD6               	movwf	(??_Port_Set+10)& (0+255),b
 15517  0114FC  6BD7               	clrf	(??_Port_Set+11)& (0+255),b
 15518  0114FE  0100               	movlb	0	; () banked
 15519  011500  3BD6               	swapf	(??_Port_Set+10)& (0+255),f,b
 15520  011502  3BD7               	swapf	(??_Port_Set+11)& (0+255),f,b
 15521  011504  0EF0               	movlw	240
 15522  011506  17D7               	andwf	(??_Port_Set+11)& (0+255),f,b
 15523  011508  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15524  01150A  0B0F               	andlw	15
 15525  01150C  13D7               	iorwf	(??_Port_Set+11)& (0+255),f,b
 15526  01150E  0EF0               	movlw	240
 15527  011510  17D6               	andwf	(??_Port_Set+10)& (0+255),f,b
 15528  011512  0100               	movlb	0	; () banked
 15529  011514  51E0               	movf	Port_Set@Type& (0+255),w,b
 15530  011516  0100               	movlb	0	; () banked
 15531  011518  6FD8               	movwf	(??_Port_Set+12)& (0+255),b
 15532  01151A  6BD9               	clrf	(??_Port_Set+13)& (0+255),b
 15533  01151C  0100               	movlb	0	; () banked
 15534  01151E  90D8               	bcf	status,0,c
 15535  011520  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15536  011522  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15537  011524  0100               	movlb	0	; () banked
 15538  011526  90D8               	bcf	status,0,c
 15539  011528  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15540  01152A  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15541  01152C  0100               	movlb	0	; () banked
 15542  01152E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15543  011530  0100               	movlb	0	; () banked
 15544  011532  6FDA               	movwf	(??_Port_Set+14)& (0+255),b
 15545  011534  6BDB               	clrf	(??_Port_Set+15)& (0+255),b
 15546  011536  0100               	movlb	0	; () banked
 15547  011538  51D8               	movf	(??_Port_Set+12)& (0+255),w,b
 15548  01153A  0100               	movlb	0	; () banked
 15549  01153C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15550  01153E  0100               	movlb	0	; () banked
 15551  011540  51D9               	movf	(??_Port_Set+13)& (0+255),w,b
 15552  011542  0100               	movlb	0	; () banked
 15553  011544  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15554  011546  0100               	movlb	0	; () banked
 15555  011548  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15556  01154A  0100               	movlb	0	; () banked
 15557  01154C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15558  01154E  0100               	movlb	0	; () banked
 15559  011550  51D7               	movf	(??_Port_Set+11)& (0+255),w,b
 15560  011552  0100               	movlb	0	; () banked
 15561  011554  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15562  011556  0100               	movlb	0	; () banked
 15563  011558  51D4               	movf	(??_Port_Set+8)& (0+255),w,b
 15564  01155A  0100               	movlb	0	; () banked
 15565  01155C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15566  01155E  0100               	movlb	0	; () banked
 15567  011560  51D5               	movf	(??_Port_Set+9)& (0+255),w,b
 15568  011562  0100               	movlb	0	; () banked
 15569  011564  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15570  011566  0100               	movlb	0	; () banked
 15571  011568  51D2               	movf	(??_Port_Set+6)& (0+255),w,b
 15572  01156A  0100               	movlb	0	; () banked
 15573  01156C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15574  01156E  0100               	movlb	0	; () banked
 15575  011570  51D3               	movf	(??_Port_Set+7)& (0+255),w,b
 15576  011572  0100               	movlb	0	; () banked
 15577  011574  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15578  011576  0100               	movlb	0	; () banked
 15579  011578  51D0               	movf	(??_Port_Set+4)& (0+255),w,b
 15580  01157A  0100               	movlb	0	; () banked
 15581  01157C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15582  01157E  0100               	movlb	0	; () banked
 15583  011580  51D1               	movf	(??_Port_Set+5)& (0+255),w,b
 15584  011582  0100               	movlb	0	; () banked
 15585  011584  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15586  011586  0100               	movlb	0	; () banked
 15587  011588  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15588  01158A  0100               	movlb	0	; () banked
 15589  01158C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15590  01158E  0100               	movlb	0	; () banked
 15591  011590  51CF               	movf	(??_Port_Set+3)& (0+255),w,b
 15592  011592  0100               	movlb	0	; () banked
 15593  011594  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15594  011596  0100               	movlb	0	; () banked
 15595  011598  51CC               	movf	??_Port_Set& (0+255),w,b
 15596  01159A  0100               	movlb	0	; () banked
 15597  01159C  11DA               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15598  01159E  0100               	movlb	0	; () banked
 15599  0115A0  6FDC               	movwf	Port_Set@TypeRequired& (0+255),b
 15600  0115A2  0100               	movlb	0	; () banked
 15601  0115A4  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15602  0115A6  0100               	movlb	0	; () banked
 15603  0115A8  11DB               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15604  0115AA  0100               	movlb	0	; () banked
 15605  0115AC  6FDD               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15606                           
 15607                           ; BSR set to: 0
 15608                           ;Port.c: 574: UINT16 TypeActual = Type;
 15609  0115AE  C0E0  F0DE         	movff	Port_Set@Type,Port_Set@TypeActual
 15610  0115B2  0100               	movlb	0	; () banked
 15611  0115B4  6BDF               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15615  0115B6  0E08               	movlw	8
 15616  0115B8  0100               	movlb	0	; () banked
 15617  0115BA  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15618  0115BC  0100               	movlb	0	; () banked
 15619  0115BE  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15620  0115C0  0E00               	movlw	0
 15621  0115C2  0100               	movlb	0	; () banked
 15622  0115C4  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15623  0115C6  0100               	movlb	0	; () banked
 15624  0115C8  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15625  0115CA  0E01               	movlw	1
 15626  0115CC  0100               	movlb	0	; () banked
 15627  0115CE  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15628  0115D0  EC41  F0B0         	call	_Word_GetPair	;wreg free
 15629  0115D4  0100               	movlb	0	; () banked
 15630  0115D6  6FCC               	movwf	??_Port_Set& (0+255),b
 15631  0115D8  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15632  0115DA  0100               	movlb	0	; () banked
 15633  0115DC  90D8               	bcf	status,0,c
 15634  0115DE  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15635  0115E0  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15636  0115E2  0100               	movlb	0	; () banked
 15637  0115E4  90D8               	bcf	status,0,c
 15638  0115E6  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15639  0115E8  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15640  0115EA  0100               	movlb	0	; () banked
 15641  0115EC  51CC               	movf	??_Port_Set& (0+255),w,b
 15642  0115EE  0100               	movlb	0	; () banked
 15643  0115F0  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15644  0115F2  0100               	movlb	0	; () banked
 15645  0115F4  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15646  0115F6  0100               	movlb	0	; () banked
 15647  0115F8  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15648                           
 15649                           ; BSR set to: 0
 15650                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15651  0115FA  0E08               	movlw	8
 15652  0115FC  0100               	movlb	0	; () banked
 15653  0115FE  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15654  011600  0100               	movlb	0	; () banked
 15655  011602  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15656  011604  0E00               	movlw	0
 15657  011606  0100               	movlb	0	; () banked
 15658  011608  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15659  01160A  0100               	movlb	0	; () banked
 15660  01160C  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15661  01160E  0E02               	movlw	2
 15662  011610  0100               	movlb	0	; () banked
 15663  011612  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15664  011614  EC41  F0B0         	call	_Word_GetPair	;wreg free
 15665  011618  0100               	movlb	0	; () banked
 15666  01161A  6FCC               	movwf	??_Port_Set& (0+255),b
 15667  01161C  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15668  01161E  0100               	movlb	0	; () banked
 15669  011620  3BCC               	swapf	??_Port_Set& (0+255),f,b
 15670  011622  3BCD               	swapf	(??_Port_Set+1)& (0+255),f,b
 15671  011624  0EF0               	movlw	240
 15672  011626  17CD               	andwf	(??_Port_Set+1)& (0+255),f,b
 15673  011628  51CC               	movf	??_Port_Set& (0+255),w,b
 15674  01162A  0B0F               	andlw	15
 15675  01162C  13CD               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15676  01162E  0EF0               	movlw	240
 15677  011630  17CC               	andwf	??_Port_Set& (0+255),f,b
 15678  011632  0100               	movlb	0	; () banked
 15679  011634  51CC               	movf	??_Port_Set& (0+255),w,b
 15680  011636  0100               	movlb	0	; () banked
 15681  011638  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15682  01163A  0100               	movlb	0	; () banked
 15683  01163C  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15684  01163E  0100               	movlb	0	; () banked
 15685  011640  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15686                           
 15687                           ; BSR set to: 0
 15688                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15689  011642  0E08               	movlw	8
 15690  011644  0100               	movlb	0	; () banked
 15691  011646  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15692  011648  0100               	movlb	0	; () banked
 15693  01164A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15694  01164C  0E00               	movlw	0
 15695  01164E  0100               	movlb	0	; () banked
 15696  011650  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15697  011652  0100               	movlb	0	; () banked
 15698  011654  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15699  011656  0E03               	movlw	3
 15700  011658  0100               	movlb	0	; () banked
 15701  01165A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15702  01165C  EC41  F0B0         	call	_Word_GetPair	;wreg free
 15703  011660  0100               	movlb	0	; () banked
 15704  011662  6FCC               	movwf	??_Port_Set& (0+255),b
 15705  011664  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15706  011666  0E06               	movlw	6
 15707  011668                     u9875:
 15708  011668  90D8               	bcf	status,0,c
 15709  01166A  0100               	movlb	0	; () banked
 15710  01166C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15711  01166E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15712  011670  2EE8               	decfsz	wreg,f,c
 15713  011672  D7FA               	goto	u9875
 15714  011674  0100               	movlb	0	; () banked
 15715  011676  51CC               	movf	??_Port_Set& (0+255),w,b
 15716  011678  0100               	movlb	0	; () banked
 15717  01167A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15718  01167C  0100               	movlb	0	; () banked
 15719  01167E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15720  011680  0100               	movlb	0	; () banked
 15721  011682  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15722                           
 15723                           ; BSR set to: 0
 15724                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15725  011684  0E08               	movlw	8
 15726  011686  0100               	movlb	0	; () banked
 15727  011688  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15728  01168A  0100               	movlb	0	; () banked
 15729  01168C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15730  01168E  0E00               	movlw	0
 15731  011690  0100               	movlb	0	; () banked
 15732  011692  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15733  011694  0100               	movlb	0	; () banked
 15734  011696  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15735  011698  0E04               	movlw	4
 15736  01169A  0100               	movlb	0	; () banked
 15737  01169C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15738  01169E  EC41  F0B0         	call	_Word_GetPair	;wreg free
 15739  0116A2  0100               	movlb	0	; () banked
 15740  0116A4  6FCC               	movwf	??_Port_Set& (0+255),b
 15741  0116A6  0100               	movlb	0	; () banked
 15742  0116A8  51CC               	movf	??_Port_Set& (0+255),w,b
 15743  0116AA  0100               	movlb	0	; () banked
 15744  0116AC  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15745  0116AE  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15746  0116B0  0100               	movlb	0	; () banked
 15747  0116B2  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15748  0116B4  0100               	movlb	0	; () banked
 15749  0116B6  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15750  0116B8  0100               	movlb	0	; () banked
 15751  0116BA  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15752  0116BC  0100               	movlb	0	; () banked
 15753  0116BE  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15754                           
 15755                           ; BSR set to: 0
 15756                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 15757  0116C0  0E08               	movlw	8
 15758  0116C2  0100               	movlb	0	; () banked
 15759  0116C4  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15760  0116C6  0100               	movlb	0	; () banked
 15761  0116C8  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15762  0116CA  0E00               	movlw	0
 15763  0116CC  0100               	movlb	0	; () banked
 15764  0116CE  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15765  0116D0  0100               	movlb	0	; () banked
 15766  0116D2  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15767  0116D4  0E05               	movlw	5
 15768  0116D6  0100               	movlb	0	; () banked
 15769  0116D8  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15770  0116DA  EC41  F0B0         	call	_Word_GetPair	;wreg free
 15771  0116DE  0100               	movlb	0	; () banked
 15772  0116E0  6FCC               	movwf	??_Port_Set& (0+255),b
 15773  0116E2  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15774  0116E4  0E0A               	movlw	10
 15775  0116E6                     u9885:
 15776  0116E6  90D8               	bcf	status,0,c
 15777  0116E8  0100               	movlb	0	; () banked
 15778  0116EA  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15779  0116EC  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15780  0116EE  2EE8               	decfsz	wreg,f,c
 15781  0116F0  D7FA               	goto	u9885
 15782  0116F2  0100               	movlb	0	; () banked
 15783  0116F4  51CC               	movf	??_Port_Set& (0+255),w,b
 15784  0116F6  0100               	movlb	0	; () banked
 15785  0116F8  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15786  0116FA  0100               	movlb	0	; () banked
 15787  0116FC  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15788  0116FE  0100               	movlb	0	; () banked
 15789  011700  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15790                           
 15791                           ; BSR set to: 0
 15792                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 15793  011702  0E08               	movlw	8
 15794  011704  0100               	movlb	0	; () banked
 15795  011706  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15796  011708  0100               	movlb	0	; () banked
 15797  01170A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15798  01170C  0E00               	movlw	0
 15799  01170E  0100               	movlb	0	; () banked
 15800  011710  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15801  011712  0100               	movlb	0	; () banked
 15802  011714  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15803  011716  0E06               	movlw	6
 15804  011718  0100               	movlb	0	; () banked
 15805  01171A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15806  01171C  EC41  F0B0         	call	_Word_GetPair	;wreg free
 15807  011720  0100               	movlb	0	; () banked
 15808  011722  6FCC               	movwf	??_Port_Set& (0+255),b
 15809  011724  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15810  011726  0E0C               	movlw	12
 15811  011728                     u9895:
 15812  011728  90D8               	bcf	status,0,c
 15813  01172A  0100               	movlb	0	; () banked
 15814  01172C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15815  01172E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15816  011730  2EE8               	decfsz	wreg,f,c
 15817  011732  D7FA               	goto	u9895
 15818  011734  0100               	movlb	0	; () banked
 15819  011736  51CC               	movf	??_Port_Set& (0+255),w,b
 15820  011738  0100               	movlb	0	; () banked
 15821  01173A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15822  01173C  0100               	movlb	0	; () banked
 15823  01173E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15824  011740  0100               	movlb	0	; () banked
 15825  011742  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15826                           
 15827                           ; BSR set to: 0
 15828                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 15829  011744  0E08               	movlw	8
 15830  011746  0100               	movlb	0	; () banked
 15831  011748  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15832  01174A  0100               	movlb	0	; () banked
 15833  01174C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15834  01174E  0E00               	movlw	0
 15835  011750  0100               	movlb	0	; () banked
 15836  011752  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15837  011754  0100               	movlb	0	; () banked
 15838  011756  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15839  011758  0E07               	movlw	7
 15840  01175A  0100               	movlb	0	; () banked
 15841  01175C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15842  01175E  EC41  F0B0         	call	_Word_GetPair	;wreg free
 15843  011762  0100               	movlb	0	; () banked
 15844  011764  6FCC               	movwf	??_Port_Set& (0+255),b
 15845  011766  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15846  011768  0E0E               	movlw	14
 15847  01176A                     u9905:
 15848  01176A  90D8               	bcf	status,0,c
 15849  01176C  0100               	movlb	0	; () banked
 15850  01176E  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15851  011770  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15852  011772  2EE8               	decfsz	wreg,f,c
 15853  011774  D7FA               	goto	u9905
 15854  011776  0100               	movlb	0	; () banked
 15855  011778  51CC               	movf	??_Port_Set& (0+255),w,b
 15856  01177A  0100               	movlb	0	; () banked
 15857  01177C  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15858  01177E  0100               	movlb	0	; () banked
 15859  011780  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15860  011782  0100               	movlb	0	; () banked
 15861  011784  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15862                           
 15863                           ;Port.c: 584: if (TypeRequired == TypeActual)
 15864  011786  0100               	movlb	0	; () banked
 15865  011788  51DE               	movf	Port_Set@TypeActual& (0+255),w,b
 15866  01178A  0100               	movlb	0	; () banked
 15867  01178C  19DC               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 15868  01178E  E148               	bnz	l528
 15869  011790  0100               	movlb	0	; () banked
 15870  011792  51DF               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 15871  011794  0100               	movlb	0	; () banked
 15872  011796  19DD               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 15873  011798  A4D8               	btfss	status,2,c
 15874  01179A  0012               	return	
 15875  01179C  D032               	goto	l526
 15876  01179E                     
 15877                           ; BSR set to: 0
 15878                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 15879                           
 15880                           ; BSR set to: 0
 15881  01179E  0100               	movlb	0	; () banked
 15882  0117A0  EE20 F002          	lfsr	2,2
 15883  0117A4  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15884  0117A6  26D9               	addwf	fsr2l,f,c
 15885  0117A8  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15886  0117AA  22DA               	addwfc	fsr2h,f,c
 15887  0117AC  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15888  0117B0  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15889  0117B4  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15890  0117B8  EC89  F0B3         	call	_Byte_SetByte	;wreg free
 15891                           
 15892                           ;Port.c: 594: break;
 15893  0117BC  0012               	return	
 15894  0117BE                     
 15895                           ;Port.c: 597: pValue = ~pValue;
 15896  0117BE  0100               	movlb	0	; () banked
 15897  0117C0  1FCB               	comf	Port_Set@pValue& (0+255),f,b
 15898                           
 15899                           ; BSR set to: 0
 15900                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 15901  0117C2  0100               	movlb	0	; () banked
 15902  0117C4  EE20 F002          	lfsr	2,2
 15903  0117C8  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15904  0117CA  26D9               	addwf	fsr2l,f,c
 15905  0117CC  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15906  0117CE  22DA               	addwfc	fsr2h,f,c
 15907  0117D0  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15908  0117D4  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15909  0117D8  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15910  0117DC  EC89  F0B3         	call	_Byte_SetByte	;wreg free
 15911                           
 15912                           ;Port.c: 599: break;
 15913  0117E0  0012               	return	
 15914  0117E2                     
 15915                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 15916  0117E2  0100               	movlb	0	; () banked
 15917  0117E4  EE20 F004          	lfsr	2,4
 15918  0117E8  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15919  0117EA  26D9               	addwf	fsr2l,f,c
 15920  0117EC  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15921  0117EE  22DA               	addwfc	fsr2h,f,c
 15922  0117F0  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15923  0117F4  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15924  0117F8  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15925  0117FC  EC89  F0B3         	call	_Byte_SetByte	;wreg free
 15926                           
 15927                           ;Port.c: 606: }
 15928                           
 15929                           ;Port.c: 605: break;
 15930                           
 15931                           ;Port.c: 604: default:
 15932                           
 15933                           ;Port.c: 603: break;
 15934  011800  0012               	return	
 15935  011802                     l526:
 15936  011802  0100               	movlb	0	; () banked
 15937  011804  51E0               	movf	Port_Set@Type& (0+255),w,b
 15938                           
 15939                           ; Switch size 1, requested type "space"
 15940                           ; Number of cases is 4, Range of values is 0 to 3
 15941                           ; switch strategies available:
 15942                           ; Name         Instructions Cycles
 15943                           ; simple_byte           13     7 (average)
 15944                           ;	Chosen strategy is simple_byte
 15945  011806  0A00               	xorlw	0	; case 0
 15946  011808  B4D8               	btfsc	status,2,c
 15947  01180A  0012               	return	
 15948  01180C  0A01               	xorlw	1	; case 1
 15949  01180E  B4D8               	btfsc	status,2,c
 15950  011810  D7C6               	goto	l529
 15951  011812  0A03               	xorlw	3	; case 2
 15952  011814  B4D8               	btfsc	status,2,c
 15953  011816  D7D3               	goto	l531
 15954  011818  0A01               	xorlw	1	; case 3
 15955  01181A  A4D8               	btfss	status,2,c
 15956                           
 15957                           ; BSR set to: 0
 15958                           
 15959                           ; BSR set to: 0
 15960                           ;Port.c: 607: }
 15961  01181C  0012               	return	
 15962  01181E  D7E1               	goto	l532
 15963  011820                     l528:
 15964  011820  0012               	return		;funcret
 15965  011822                     __end_of_Port_Set:
 15966                           	opt stack 0
 15967                           tblptru	equ	0xFF8
 15968                           tblptrh	equ	0xFF7
 15969                           tblptrl	equ	0xFF6
 15970                           tablat	equ	0xFF5
 15971                           prodh	equ	0xFF4
 15972                           prodl	equ	0xFF3
 15973                           intcon	equ	0xFF2
 15974                           postinc0	equ	0xFEE
 15975                           wreg	equ	0xFE8
 15976                           indf1	equ	0xFE7
 15977                           postdec1	equ	0xFE5
 15978                           fsr1h	equ	0xFE2
 15979                           fsr1l	equ	0xFE1
 15980                           indf2	equ	0xFDF
 15981                           postinc2	equ	0xFDE
 15982                           postdec2	equ	0xFDD
 15983                           fsr2h	equ	0xFDA
 15984                           fsr2l	equ	0xFD9
 15985                           status	equ	0xFD8
 15986                           
 15987 ;; *************** function _Byte_SetByte *****************
 15988 ;; Defined at:
 15989 ;;		line 110 in file "Library/Types.c"
 15990 ;; Parameters:    Size  Location     Type
 15991 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15992 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15993 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15994 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15995 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15996 ;;		 -> NULL(0), 
 15997 ;;  pValue          1    2[BANK0 ] unsigned char 
 15998 ;; Auto vars:     Size  Location     Type
 15999 ;;		None
 16000 ;; Return value:  Size  Location     Type
 16001 ;;                  1    wreg      void 
 16002 ;; Registers used:
 16003 ;;		fsr2l, fsr2h
 16004 ;; Tracked objects:
 16005 ;;		On entry : 0/0
 16006 ;;		On exit  : 0/0
 16007 ;;		Unchanged: 0/0
 16008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16009 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16012 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16013 ;;Total ram usage:        3 bytes
 16014 ;; Hardware stack levels used:    1
 16015 ;; Hardware stack levels required when called:    7
 16016 ;; This function calls:
 16017 ;;		Nothing
 16018 ;; This function is called by:
 16019 ;;		_Port_Set
 16020 ;;		_I2C_Init
 16021 ;; This function uses a non-reentrant model
 16022 ;;
 16023                           
 16024                           	psect	text65
 16025  016712                     __ptext65:
 16026                           	opt stack 0
 16027  016712                     _Byte_SetByte:
 16028                           	opt stack 19
 16029                           
 16030                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 16031                           
 16032                           ;incstack = 0
 16033  016712  C0BA  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 16034  016716  C0BB  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 16035  01671A  C0BC  FFDF         	movff	Byte_SetByte@pValue,indf2
 16036  01671E  0012               	return		;funcret
 16037  016720                     __end_of_Byte_SetByte:
 16038                           	opt stack 0
 16039                           tblptru	equ	0xFF8
 16040                           tblptrh	equ	0xFF7
 16041                           tblptrl	equ	0xFF6
 16042                           tablat	equ	0xFF5
 16043                           prodh	equ	0xFF4
 16044                           prodl	equ	0xFF3
 16045                           intcon	equ	0xFF2
 16046                           postinc0	equ	0xFEE
 16047                           wreg	equ	0xFE8
 16048                           indf1	equ	0xFE7
 16049                           postdec1	equ	0xFE5
 16050                           fsr1h	equ	0xFE2
 16051                           fsr1l	equ	0xFE1
 16052                           indf2	equ	0xFDF
 16053                           postinc2	equ	0xFDE
 16054                           postdec2	equ	0xFDD
 16055                           fsr2h	equ	0xFDA
 16056                           fsr2l	equ	0xFD9
 16057                           status	equ	0xFD8
 16058                           
 16059 ;; *************** function _GetPortTRIS *****************
 16060 ;; Defined at:
 16061 ;;		line 67 in file "Library/Port.c"
 16062 ;; Parameters:    Size  Location     Type
 16063 ;;  pInput          1    wreg     enum E6786
 16064 ;; Auto vars:     Size  Location     Type
 16065 ;;  pInput          1    2[BANK0 ] enum E6786
 16066 ;; Return value:  Size  Location     Type
 16067 ;;                  2    0[BANK0 ] PTR struct Byte
 16068 ;; Registers used:
 16069 ;;		wreg, status,2, status,0
 16070 ;; Tracked objects:
 16071 ;;		On entry : 0/0
 16072 ;;		On exit  : 0/0
 16073 ;;		Unchanged: 0/0
 16074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16075 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16078 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16079 ;;Total ram usage:        3 bytes
 16080 ;; Hardware stack levels used:    1
 16081 ;; Hardware stack levels required when called:    7
 16082 ;; This function calls:
 16083 ;;		Nothing
 16084 ;; This function is called by:
 16085 ;;		_Port_Init
 16086 ;; This function uses a non-reentrant model
 16087 ;;
 16088                           
 16089                           	psect	text66
 16090  014900                     __ptext66:
 16091                           	opt stack 0
 16092  014900                     _GetPortTRIS:
 16093                           	opt stack 20
 16094                           
 16095                           ;incstack = 0
 16096                           ;GetPortTRIS@pInput stored from wreg
 16097  014900  0100               	movlb	0	; () banked
 16098  014902  6FBC               	movwf	GetPortTRIS@pInput& (0+255),b
 16099                           
 16100                           ;Port.c: 69: switch (pInput)
 16101  014904  D038               	goto	l363
 16102  014906                     
 16103                           ;Port.c: 72: return (BytePtr)&TRISA;
 16104  014906  0E92               	movlw	146
 16105  014908  0100               	movlb	0	; () banked
 16106  01490A  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16107  01490C  0E0F               	movlw	15
 16108  01490E  0100               	movlb	0	; () banked
 16109  014910  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16110                           
 16111                           ; BSR set to: 0
 16112  014912  0012               	return	
 16113  014914                     
 16114                           ; BSR set to: 0
 16115                           ;Port.c: 74: return (BytePtr)&TRISB;
 16116                           
 16117                           ; BSR set to: 0
 16118  014914  0E93               	movlw	147
 16119  014916  0100               	movlb	0	; () banked
 16120  014918  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16121  01491A  0E0F               	movlw	15
 16122  01491C  0100               	movlb	0	; () banked
 16123  01491E  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16124                           
 16125                           ; BSR set to: 0
 16126  014920  0012               	return	
 16127  014922                     
 16128                           ; BSR set to: 0
 16129                           ;Port.c: 76: return (BytePtr)&TRISC;
 16130                           
 16131                           ; BSR set to: 0
 16132  014922  0E94               	movlw	148
 16133  014924  0100               	movlb	0	; () banked
 16134  014926  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16135  014928  0E0F               	movlw	15
 16136  01492A  0100               	movlb	0	; () banked
 16137  01492C  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16138                           
 16139                           ; BSR set to: 0
 16140  01492E  0012               	return	
 16141  014930                     
 16142                           ; BSR set to: 0
 16143                           ;Port.c: 78: return (BytePtr)&TRISD;
 16144                           
 16145                           ; BSR set to: 0
 16146  014930  0E95               	movlw	149
 16147  014932  0100               	movlb	0	; () banked
 16148  014934  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16149  014936  0E0F               	movlw	15
 16150  014938  0100               	movlb	0	; () banked
 16151  01493A  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16152                           
 16153                           ; BSR set to: 0
 16154  01493C  0012               	return	
 16155  01493E                     
 16156                           ; BSR set to: 0
 16157                           ;Port.c: 80: return (BytePtr)&TRISE;
 16158                           
 16159                           ; BSR set to: 0
 16160  01493E  0E96               	movlw	150
 16161  014940  0100               	movlb	0	; () banked
 16162  014942  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16163  014944  0E0F               	movlw	15
 16164  014946  0100               	movlb	0	; () banked
 16165  014948  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16166                           
 16167                           ; BSR set to: 0
 16168  01494A  0012               	return	
 16169  01494C                     
 16170                           ; BSR set to: 0
 16171                           ;Port.c: 82: return (BytePtr)&TRISF;
 16172                           
 16173                           ; BSR set to: 0
 16174  01494C  0E97               	movlw	151
 16175  01494E  0100               	movlb	0	; () banked
 16176  014950  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16177  014952  0E0F               	movlw	15
 16178  014954  0100               	movlb	0	; () banked
 16179  014956  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16180                           
 16181                           ; BSR set to: 0
 16182  014958  0012               	return	
 16183  01495A                     
 16184                           ; BSR set to: 0
 16185                           ;Port.c: 84: return (BytePtr)&TRISG;
 16186                           
 16187                           ; BSR set to: 0
 16188  01495A  0E98               	movlw	152
 16189  01495C  0100               	movlb	0	; () banked
 16190  01495E  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16191  014960  0E0F               	movlw	15
 16192  014962  0100               	movlb	0	; () banked
 16193  014964  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16194                           
 16195                           ; BSR set to: 0
 16196  014966  0012               	return	
 16197  014968                     
 16198                           ; BSR set to: 0
 16199                           ;Port.c: 86: return (void*)0;
 16200                           
 16201                           ; BSR set to: 0
 16202  014968  0E00               	movlw	0
 16203  01496A  0100               	movlb	0	; () banked
 16204  01496C  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16205  01496E  0E00               	movlw	0
 16206  014970  0100               	movlb	0	; () banked
 16207  014972  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16208                           
 16209                           ; BSR set to: 0
 16210                           ;Port.c: 87: }
 16211                           
 16212                           ; BSR set to: 0
 16213  014974  0012               	return	
 16214  014976                     l363:
 16215                           
 16216                           ; BSR set to: 0
 16217  014976  0100               	movlb	0	; () banked
 16218  014978  51BC               	movf	GetPortTRIS@pInput& (0+255),w,b
 16219                           
 16220                           ; Switch size 1, requested type "space"
 16221                           ; Number of cases is 7, Range of values is 0 to 6
 16222                           ; switch strategies available:
 16223                           ; Name         Instructions Cycles
 16224                           ; simple_byte           22    12 (average)
 16225                           ;	Chosen strategy is simple_byte
 16226  01497A  0A00               	xorlw	0	; case 0
 16227  01497C  B4D8               	btfsc	status,2,c
 16228  01497E  D7C3               	goto	l364
 16229  014980  0A01               	xorlw	1	; case 1
 16230  014982  B4D8               	btfsc	status,2,c
 16231  014984  D7C7               	goto	l366
 16232  014986  0A03               	xorlw	3	; case 2
 16233  014988  B4D8               	btfsc	status,2,c
 16234  01498A  D7CB               	goto	l367
 16235  01498C  0A01               	xorlw	1	; case 3
 16236  01498E  B4D8               	btfsc	status,2,c
 16237  014990  D7CF               	goto	l368
 16238  014992  0A07               	xorlw	7	; case 4
 16239  014994  B4D8               	btfsc	status,2,c
 16240  014996  D7D3               	goto	l369
 16241  014998  0A01               	xorlw	1	; case 5
 16242  01499A  B4D8               	btfsc	status,2,c
 16243  01499C  D7D7               	goto	l370
 16244  01499E  0A03               	xorlw	3	; case 6
 16245  0149A0  B4D8               	btfsc	status,2,c
 16246  0149A2  D7DB               	goto	l371
 16247  0149A4  D7E1               	goto	l372
 16248  0149A6                     __end_of_GetPortTRIS:
 16249                           	opt stack 0
 16250                           tblptru	equ	0xFF8
 16251                           tblptrh	equ	0xFF7
 16252                           tblptrl	equ	0xFF6
 16253                           tablat	equ	0xFF5
 16254                           prodh	equ	0xFF4
 16255                           prodl	equ	0xFF3
 16256                           intcon	equ	0xFF2
 16257                           postinc0	equ	0xFEE
 16258                           wreg	equ	0xFE8
 16259                           indf1	equ	0xFE7
 16260                           postdec1	equ	0xFE5
 16261                           fsr1h	equ	0xFE2
 16262                           fsr1l	equ	0xFE1
 16263                           indf2	equ	0xFDF
 16264                           postinc2	equ	0xFDE
 16265                           postdec2	equ	0xFDD
 16266                           fsr2h	equ	0xFDA
 16267                           fsr2l	equ	0xFD9
 16268                           status	equ	0xFD8
 16269                           
 16270 ;; *************** function _GetPortProperties *****************
 16271 ;; Defined at:
 16272 ;;		line 21 in file "Library/Port.c"
 16273 ;; Parameters:    Size  Location     Type
 16274 ;;  pInput          1    wreg     enum E6786
 16275 ;; Auto vars:     Size  Location     Type
 16276 ;;  pInput          1    2[BANK0 ] enum E6786
 16277 ;; Return value:  Size  Location     Type
 16278 ;;                  2    0[BANK0 ] PTR struct PortProperty
 16279 ;; Registers used:
 16280 ;;		wreg, status,2, status,0
 16281 ;; Tracked objects:
 16282 ;;		On entry : 0/0
 16283 ;;		On exit  : 0/0
 16284 ;;		Unchanged: 0/0
 16285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16286 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16289 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16290 ;;Total ram usage:        3 bytes
 16291 ;; Hardware stack levels used:    1
 16292 ;; Hardware stack levels required when called:    7
 16293 ;; This function calls:
 16294 ;;		Nothing
 16295 ;; This function is called by:
 16296 ;;		_Port_Init
 16297 ;; This function uses a non-reentrant model
 16298 ;;
 16299                           
 16300                           	psect	text67
 16301  0149A6                     __ptext67:
 16302                           	opt stack 0
 16303  0149A6                     _GetPortProperties:
 16304                           	opt stack 20
 16305                           
 16306                           ; BSR set to: 0
 16307                           ;incstack = 0
 16308                           ;GetPortProperties@pInput stored from wreg
 16309  0149A6  0100               	movlb	0	; () banked
 16310  0149A8  6FBC               	movwf	GetPortProperties@pInput& (0+255),b
 16311                           
 16312                           ;Port.c: 23: switch (pInput)
 16313  0149AA  D038               	goto	l337
 16314  0149AC                     
 16315                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 16316  0149AC  0E0B               	movlw	low _PortA_Property
 16317  0149AE  0100               	movlb	0	; () banked
 16318  0149B0  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16319  0149B2  0EFF               	movlw	high _PortA_Property
 16320  0149B4  0100               	movlb	0	; () banked
 16321  0149B6  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16322                           
 16323                           ; BSR set to: 0
 16324  0149B8  0012               	return	
 16325  0149BA                     
 16326                           ; BSR set to: 0
 16327                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 16328                           
 16329                           ; BSR set to: 0
 16330  0149BA  0E09               	movlw	low _PortB_Property
 16331  0149BC  0100               	movlb	0	; () banked
 16332  0149BE  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16333  0149C0  0EFF               	movlw	high _PortB_Property
 16334  0149C2  0100               	movlb	0	; () banked
 16335  0149C4  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16336                           
 16337                           ; BSR set to: 0
 16338  0149C6  0012               	return	
 16339  0149C8                     
 16340                           ; BSR set to: 0
 16341                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 16342                           
 16343                           ; BSR set to: 0
 16344  0149C8  0E07               	movlw	low _PortC_Property
 16345  0149CA  0100               	movlb	0	; () banked
 16346  0149CC  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16347  0149CE  0EFF               	movlw	high _PortC_Property
 16348  0149D0  0100               	movlb	0	; () banked
 16349  0149D2  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16350                           
 16351                           ; BSR set to: 0
 16352  0149D4  0012               	return	
 16353  0149D6                     
 16354                           ; BSR set to: 0
 16355                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 16356                           
 16357                           ; BSR set to: 0
 16358  0149D6  0E05               	movlw	low _PortD_Property
 16359  0149D8  0100               	movlb	0	; () banked
 16360  0149DA  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16361  0149DC  0EFF               	movlw	high _PortD_Property
 16362  0149DE  0100               	movlb	0	; () banked
 16363  0149E0  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16364                           
 16365                           ; BSR set to: 0
 16366  0149E2  0012               	return	
 16367  0149E4                     
 16368                           ; BSR set to: 0
 16369                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 16370                           
 16371                           ; BSR set to: 0
 16372  0149E4  0E03               	movlw	low _PortE_Property
 16373  0149E6  0100               	movlb	0	; () banked
 16374  0149E8  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16375  0149EA  0EFF               	movlw	high _PortE_Property
 16376  0149EC  0100               	movlb	0	; () banked
 16377  0149EE  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16378                           
 16379                           ; BSR set to: 0
 16380  0149F0  0012               	return	
 16381  0149F2                     
 16382                           ; BSR set to: 0
 16383                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 16384                           
 16385                           ; BSR set to: 0
 16386  0149F2  0E01               	movlw	low _PortF_Property
 16387  0149F4  0100               	movlb	0	; () banked
 16388  0149F6  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16389  0149F8  0EFF               	movlw	high _PortF_Property
 16390  0149FA  0100               	movlb	0	; () banked
 16391  0149FC  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16392                           
 16393                           ; BSR set to: 0
 16394  0149FE  0012               	return	
 16395  014A00                     
 16396                           ; BSR set to: 0
 16397                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 16398                           
 16399                           ; BSR set to: 0
 16400  014A00  0EFF               	movlw	low _PortG_Property
 16401  014A02  0100               	movlb	0	; () banked
 16402  014A04  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16403  014A06  0EFE               	movlw	high _PortG_Property
 16404  014A08  0100               	movlb	0	; () banked
 16405  014A0A  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16406                           
 16407                           ; BSR set to: 0
 16408  014A0C  0012               	return	
 16409  014A0E                     
 16410                           ; BSR set to: 0
 16411                           ;Port.c: 40: return (void*)0;
 16412                           
 16413                           ; BSR set to: 0
 16414  014A0E  0E00               	movlw	0
 16415  014A10  0100               	movlb	0	; () banked
 16416  014A12  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16417  014A14  0E00               	movlw	0
 16418  014A16  0100               	movlb	0	; () banked
 16419  014A18  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16420                           
 16421                           ; BSR set to: 0
 16422                           ;Port.c: 41: }
 16423                           
 16424                           ; BSR set to: 0
 16425  014A1A  0012               	return	
 16426  014A1C                     l337:
 16427                           
 16428                           ; BSR set to: 0
 16429  014A1C  0100               	movlb	0	; () banked
 16430  014A1E  51BC               	movf	GetPortProperties@pInput& (0+255),w,b
 16431                           
 16432                           ; Switch size 1, requested type "space"
 16433                           ; Number of cases is 7, Range of values is 0 to 6
 16434                           ; switch strategies available:
 16435                           ; Name         Instructions Cycles
 16436                           ; simple_byte           22    12 (average)
 16437                           ;	Chosen strategy is simple_byte
 16438  014A20  0A00               	xorlw	0	; case 0
 16439  014A22  B4D8               	btfsc	status,2,c
 16440  014A24  D7C3               	goto	l338
 16441  014A26  0A01               	xorlw	1	; case 1
 16442  014A28  B4D8               	btfsc	status,2,c
 16443  014A2A  D7C7               	goto	l340
 16444  014A2C  0A03               	xorlw	3	; case 2
 16445  014A2E  B4D8               	btfsc	status,2,c
 16446  014A30  D7CB               	goto	l341
 16447  014A32  0A01               	xorlw	1	; case 3
 16448  014A34  B4D8               	btfsc	status,2,c
 16449  014A36  D7CF               	goto	l342
 16450  014A38  0A07               	xorlw	7	; case 4
 16451  014A3A  B4D8               	btfsc	status,2,c
 16452  014A3C  D7D3               	goto	l343
 16453  014A3E  0A01               	xorlw	1	; case 5
 16454  014A40  B4D8               	btfsc	status,2,c
 16455  014A42  D7D7               	goto	l344
 16456  014A44  0A03               	xorlw	3	; case 6
 16457  014A46  B4D8               	btfsc	status,2,c
 16458  014A48  D7DB               	goto	l345
 16459  014A4A  D7E1               	goto	l346
 16460  014A4C                     __end_of_GetPortProperties:
 16461                           	opt stack 0
 16462                           tblptru	equ	0xFF8
 16463                           tblptrh	equ	0xFF7
 16464                           tblptrl	equ	0xFF6
 16465                           tablat	equ	0xFF5
 16466                           prodh	equ	0xFF4
 16467                           prodl	equ	0xFF3
 16468                           intcon	equ	0xFF2
 16469                           postinc0	equ	0xFEE
 16470                           wreg	equ	0xFE8
 16471                           indf1	equ	0xFE7
 16472                           postdec1	equ	0xFE5
 16473                           fsr1h	equ	0xFE2
 16474                           fsr1l	equ	0xFE1
 16475                           indf2	equ	0xFDF
 16476                           postinc2	equ	0xFDE
 16477                           postdec2	equ	0xFDD
 16478                           fsr2h	equ	0xFDA
 16479                           fsr2l	equ	0xFD9
 16480                           status	equ	0xFD8
 16481                           
 16482 ;; *************** function _GetPortPORT *****************
 16483 ;; Defined at:
 16484 ;;		line 44 in file "Library/Port.c"
 16485 ;; Parameters:    Size  Location     Type
 16486 ;;  pInput          1    wreg     enum E6786
 16487 ;; Auto vars:     Size  Location     Type
 16488 ;;  pInput          1    2[BANK0 ] enum E6786
 16489 ;; Return value:  Size  Location     Type
 16490 ;;                  2    0[BANK0 ] PTR struct Byte
 16491 ;; Registers used:
 16492 ;;		wreg, status,2, status,0
 16493 ;; Tracked objects:
 16494 ;;		On entry : 0/0
 16495 ;;		On exit  : 0/0
 16496 ;;		Unchanged: 0/0
 16497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16498 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16501 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16502 ;;Total ram usage:        3 bytes
 16503 ;; Hardware stack levels used:    1
 16504 ;; Hardware stack levels required when called:    7
 16505 ;; This function calls:
 16506 ;;		Nothing
 16507 ;; This function is called by:
 16508 ;;		_Port_Init
 16509 ;; This function uses a non-reentrant model
 16510 ;;
 16511                           
 16512                           	psect	text68
 16513  014A4C                     __ptext68:
 16514                           	opt stack 0
 16515  014A4C                     _GetPortPORT:
 16516                           	opt stack 20
 16517                           
 16518                           ; BSR set to: 0
 16519                           ;incstack = 0
 16520                           ;GetPortPORT@pInput stored from wreg
 16521  014A4C  0100               	movlb	0	; () banked
 16522  014A4E  6FBC               	movwf	GetPortPORT@pInput& (0+255),b
 16523                           
 16524                           ;Port.c: 46: switch (pInput)
 16525  014A50  D038               	goto	l350
 16526  014A52                     
 16527                           ;Port.c: 49: return (BytePtr)&PORTA;
 16528  014A52  0E80               	movlw	128
 16529  014A54  0100               	movlb	0	; () banked
 16530  014A56  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16531  014A58  0E0F               	movlw	15
 16532  014A5A  0100               	movlb	0	; () banked
 16533  014A5C  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16534                           
 16535                           ; BSR set to: 0
 16536  014A5E  0012               	return	
 16537  014A60                     
 16538                           ; BSR set to: 0
 16539                           ;Port.c: 51: return (BytePtr)&PORTB;
 16540                           
 16541                           ; BSR set to: 0
 16542  014A60  0E81               	movlw	129
 16543  014A62  0100               	movlb	0	; () banked
 16544  014A64  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16545  014A66  0E0F               	movlw	15
 16546  014A68  0100               	movlb	0	; () banked
 16547  014A6A  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16548                           
 16549                           ; BSR set to: 0
 16550  014A6C  0012               	return	
 16551  014A6E                     
 16552                           ; BSR set to: 0
 16553                           ;Port.c: 53: return (BytePtr)&PORTC;
 16554                           
 16555                           ; BSR set to: 0
 16556  014A6E  0E82               	movlw	130
 16557  014A70  0100               	movlb	0	; () banked
 16558  014A72  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16559  014A74  0E0F               	movlw	15
 16560  014A76  0100               	movlb	0	; () banked
 16561  014A78  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16562                           
 16563                           ; BSR set to: 0
 16564  014A7A  0012               	return	
 16565  014A7C                     
 16566                           ; BSR set to: 0
 16567                           ;Port.c: 55: return (BytePtr)&PORTD;
 16568                           
 16569                           ; BSR set to: 0
 16570  014A7C  0E83               	movlw	131
 16571  014A7E  0100               	movlb	0	; () banked
 16572  014A80  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16573  014A82  0E0F               	movlw	15
 16574  014A84  0100               	movlb	0	; () banked
 16575  014A86  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16576                           
 16577                           ; BSR set to: 0
 16578  014A88  0012               	return	
 16579  014A8A                     
 16580                           ; BSR set to: 0
 16581                           ;Port.c: 57: return (BytePtr)&PORTE;
 16582                           
 16583                           ; BSR set to: 0
 16584  014A8A  0E84               	movlw	132
 16585  014A8C  0100               	movlb	0	; () banked
 16586  014A8E  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16587  014A90  0E0F               	movlw	15
 16588  014A92  0100               	movlb	0	; () banked
 16589  014A94  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16590                           
 16591                           ; BSR set to: 0
 16592  014A96  0012               	return	
 16593  014A98                     
 16594                           ; BSR set to: 0
 16595                           ;Port.c: 59: return (BytePtr)&PORTF;
 16596                           
 16597                           ; BSR set to: 0
 16598  014A98  0E85               	movlw	133
 16599  014A9A  0100               	movlb	0	; () banked
 16600  014A9C  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16601  014A9E  0E0F               	movlw	15
 16602  014AA0  0100               	movlb	0	; () banked
 16603  014AA2  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16604                           
 16605                           ; BSR set to: 0
 16606  014AA4  0012               	return	
 16607  014AA6                     
 16608                           ; BSR set to: 0
 16609                           ;Port.c: 61: return (BytePtr)&PORTG;
 16610                           
 16611                           ; BSR set to: 0
 16612  014AA6  0E86               	movlw	134
 16613  014AA8  0100               	movlb	0	; () banked
 16614  014AAA  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16615  014AAC  0E0F               	movlw	15
 16616  014AAE  0100               	movlb	0	; () banked
 16617  014AB0  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16618                           
 16619                           ; BSR set to: 0
 16620  014AB2  0012               	return	
 16621  014AB4                     
 16622                           ; BSR set to: 0
 16623                           ;Port.c: 63: return (void*)0;
 16624                           
 16625                           ; BSR set to: 0
 16626  014AB4  0E00               	movlw	0
 16627  014AB6  0100               	movlb	0	; () banked
 16628  014AB8  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16629  014ABA  0E00               	movlw	0
 16630  014ABC  0100               	movlb	0	; () banked
 16631  014ABE  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16632                           
 16633                           ; BSR set to: 0
 16634                           ;Port.c: 64: }
 16635                           
 16636                           ; BSR set to: 0
 16637  014AC0  0012               	return	
 16638  014AC2                     l350:
 16639                           
 16640                           ; BSR set to: 0
 16641  014AC2  0100               	movlb	0	; () banked
 16642  014AC4  51BC               	movf	GetPortPORT@pInput& (0+255),w,b
 16643                           
 16644                           ; Switch size 1, requested type "space"
 16645                           ; Number of cases is 7, Range of values is 0 to 6
 16646                           ; switch strategies available:
 16647                           ; Name         Instructions Cycles
 16648                           ; simple_byte           22    12 (average)
 16649                           ;	Chosen strategy is simple_byte
 16650  014AC6  0A00               	xorlw	0	; case 0
 16651  014AC8  B4D8               	btfsc	status,2,c
 16652  014ACA  D7C3               	goto	l351
 16653  014ACC  0A01               	xorlw	1	; case 1
 16654  014ACE  B4D8               	btfsc	status,2,c
 16655  014AD0  D7C7               	goto	l353
 16656  014AD2  0A03               	xorlw	3	; case 2
 16657  014AD4  B4D8               	btfsc	status,2,c
 16658  014AD6  D7CB               	goto	l354
 16659  014AD8  0A01               	xorlw	1	; case 3
 16660  014ADA  B4D8               	btfsc	status,2,c
 16661  014ADC  D7CF               	goto	l355
 16662  014ADE  0A07               	xorlw	7	; case 4
 16663  014AE0  B4D8               	btfsc	status,2,c
 16664  014AE2  D7D3               	goto	l356
 16665  014AE4  0A01               	xorlw	1	; case 5
 16666  014AE6  B4D8               	btfsc	status,2,c
 16667  014AE8  D7D7               	goto	l357
 16668  014AEA  0A03               	xorlw	3	; case 6
 16669  014AEC  B4D8               	btfsc	status,2,c
 16670  014AEE  D7DB               	goto	l358
 16671  014AF0  D7E1               	goto	l359
 16672  014AF2                     __end_of_GetPortPORT:
 16673                           	opt stack 0
 16674                           tblptru	equ	0xFF8
 16675                           tblptrh	equ	0xFF7
 16676                           tblptrl	equ	0xFF6
 16677                           tablat	equ	0xFF5
 16678                           prodh	equ	0xFF4
 16679                           prodl	equ	0xFF3
 16680                           intcon	equ	0xFF2
 16681                           postinc0	equ	0xFEE
 16682                           wreg	equ	0xFE8
 16683                           indf1	equ	0xFE7
 16684                           postdec1	equ	0xFE5
 16685                           fsr1h	equ	0xFE2
 16686                           fsr1l	equ	0xFE1
 16687                           indf2	equ	0xFDF
 16688                           postinc2	equ	0xFDE
 16689                           postdec2	equ	0xFDD
 16690                           fsr2h	equ	0xFDA
 16691                           fsr2l	equ	0xFD9
 16692                           status	equ	0xFD8
 16693                           
 16694 ;; *************** function _LED_Init *****************
 16695 ;; Defined at:
 16696 ;;		line 15 in file "Library/LED.c"
 16697 ;; Parameters:    Size  Location     Type
 16698 ;;  pLED            1    wreg     enum E6739
 16699 ;; Auto vars:     Size  Location     Type
 16700 ;;  pLED            1   45[BANK0 ] enum E6739
 16701 ;; Return value:  Size  Location     Type
 16702 ;;                  1    wreg      void 
 16703 ;; Registers used:
 16704 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16705 ;; Tracked objects:
 16706 ;;		On entry : 0/0
 16707 ;;		On exit  : 0/0
 16708 ;;		Unchanged: 0/0
 16709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16713 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16714 ;;Total ram usage:        1 bytes
 16715 ;; Hardware stack levels used:    1
 16716 ;; Hardware stack levels required when called:   12
 16717 ;; This function calls:
 16718 ;;		_LED_Set
 16719 ;;		_Port_SetPinType
 16720 ;; This function is called by:
 16721 ;;		_MXK_Init
 16722 ;; This function uses a non-reentrant model
 16723 ;;
 16724                           
 16725                           	psect	text69
 16726  01591C                     __ptext69:
 16727                           	opt stack 0
 16728  01591C                     _LED_Init:
 16729                           	opt stack 16
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;incstack = 0
 16733                           ;LED_Init@pLED stored from wreg
 16734  01591C  0100               	movlb	0	; () banked
 16735  01591E  6FE7               	movwf	LED_Init@pLED& (0+255),b
 16736                           
 16737                           ;LED.c: 17: switch (pLED)
 16738  015920  D01E               	goto	l220
 16739  015922                     
 16740                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16741  015922  0EA5               	movlw	low _PortC
 16742  015924  0100               	movlb	0	; () banked
 16743  015926  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16744  015928  0E00               	movlw	high _PortC
 16745  01592A  0100               	movlb	0	; () banked
 16746  01592C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16747  01592E  0E00               	movlw	0
 16748  015930  0100               	movlb	0	; () banked
 16749  015932  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16750  015934  0E03               	movlw	3
 16751  015936  0100               	movlb	0	; () banked
 16752  015938  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16753  01593A  EC60  F093         	call	_Port_SetPinType	;wreg free
 16754                           
 16755                           ;LED.c: 21: break;
 16756  01593E  D017               	goto	l222
 16757  015940                     
 16758                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 16759  015940  0EA5               	movlw	low _PortC
 16760  015942  0100               	movlb	0	; () banked
 16761  015944  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16762  015946  0E00               	movlw	high _PortC
 16763  015948  0100               	movlb	0	; () banked
 16764  01594A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16765  01594C  0E01               	movlw	1
 16766  01594E  0100               	movlb	0	; () banked
 16767  015950  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16768  015952  0E03               	movlw	3
 16769  015954  0100               	movlb	0	; () banked
 16770  015956  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16771  015958  EC60  F093         	call	_Port_SetPinType	;wreg free
 16772                           
 16773                           ;LED.c: 25: }
 16774                           
 16775                           ;LED.c: 24: break;
 16776  01595C  D008               	goto	l222
 16777  01595E                     l220:
 16778  01595E  0100               	movlb	0	; () banked
 16779  015960  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16780                           
 16781                           ; Switch size 1, requested type "space"
 16782                           ; Number of cases is 2, Range of values is 0 to 1
 16783                           ; switch strategies available:
 16784                           ; Name         Instructions Cycles
 16785                           ; simple_byte            7     4 (average)
 16786                           ;	Chosen strategy is simple_byte
 16787  015962  0A00               	xorlw	0	; case 0
 16788  015964  B4D8               	btfsc	status,2,c
 16789  015966  D7DD               	goto	l221
 16790  015968  0A01               	xorlw	1	; case 1
 16791  01596A  B4D8               	btfsc	status,2,c
 16792  01596C  D7E9               	goto	l223
 16793  01596E                     l222:
 16794                           
 16795                           ;LED.c: 26: LED_Set(pLED, 0);
 16796                           
 16797                           ; BSR set to: 0
 16798  01596E  0E00               	movlw	0
 16799  015970  0100               	movlb	0	; () banked
 16800  015972  6FCE               	movwf	LED_Set@pValue& (0+255),b
 16801  015974  0100               	movlb	0	; () banked
 16802  015976  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16803  015978  ECCC  F0AD         	call	_LED_Set
 16804  01597C  0012               	return		;funcret
 16805  01597E                     __end_of_LED_Init:
 16806                           	opt stack 0
 16807                           tblptru	equ	0xFF8
 16808                           tblptrh	equ	0xFF7
 16809                           tblptrl	equ	0xFF6
 16810                           tablat	equ	0xFF5
 16811                           prodh	equ	0xFF4
 16812                           prodl	equ	0xFF3
 16813                           intcon	equ	0xFF2
 16814                           postinc0	equ	0xFEE
 16815                           wreg	equ	0xFE8
 16816                           indf1	equ	0xFE7
 16817                           postdec1	equ	0xFE5
 16818                           fsr1h	equ	0xFE2
 16819                           fsr1l	equ	0xFE1
 16820                           indf2	equ	0xFDF
 16821                           postinc2	equ	0xFDE
 16822                           postdec2	equ	0xFDD
 16823                           fsr2h	equ	0xFDA
 16824                           fsr2l	equ	0xFD9
 16825                           status	equ	0xFD8
 16826                           
 16827 ;; *************** function _LED_Set *****************
 16828 ;; Defined at:
 16829 ;;		line 33 in file "Library/LED.c"
 16830 ;; Parameters:    Size  Location     Type
 16831 ;;  pLED            1    wreg     enum E6739
 16832 ;;  pValue          1   20[BANK0 ] unsigned char 
 16833 ;; Auto vars:     Size  Location     Type
 16834 ;;  pLED            1   21[BANK0 ] enum E6739
 16835 ;; Return value:  Size  Location     Type
 16836 ;;                  1    wreg      void 
 16837 ;; Registers used:
 16838 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16839 ;; Tracked objects:
 16840 ;;		On entry : 0/0
 16841 ;;		On exit  : 0/0
 16842 ;;		Unchanged: 0/0
 16843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16844 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16845 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16847 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16848 ;;Total ram usage:        2 bytes
 16849 ;; Hardware stack levels used:    1
 16850 ;; Hardware stack levels required when called:   11
 16851 ;; This function calls:
 16852 ;;		_Port_SetPin
 16853 ;; This function is called by:
 16854 ;;		_LED_Init
 16855 ;;		_SYSTEM_Initialize
 16856 ;; This function uses a non-reentrant model
 16857 ;;
 16858                           
 16859                           	psect	text70
 16860  015B98                     __ptext70:
 16861                           	opt stack 0
 16862  015B98                     _LED_Set:
 16863                           	opt stack 16
 16864                           
 16865                           ;incstack = 0
 16866                           ;LED_Set@pLED stored from wreg
 16867  015B98  0100               	movlb	0	; () banked
 16868  015B9A  6FCF               	movwf	LED_Set@pLED& (0+255),b
 16869                           
 16870                           ;LED.c: 35: switch (pLED)
 16871  015B9C  D01C               	goto	l227
 16872  015B9E                     
 16873                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 16874  015B9E  0EA5               	movlw	low _PortC
 16875  015BA0  0100               	movlb	0	; () banked
 16876  015BA2  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16877  015BA4  0E00               	movlw	high _PortC
 16878  015BA6  0100               	movlb	0	; () banked
 16879  015BA8  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16880  015BAA  0E00               	movlw	0
 16881  015BAC  0100               	movlb	0	; () banked
 16882  015BAE  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16883  015BB0  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16884  015BB4  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 16885                           
 16886                           ;LED.c: 39: break;
 16887  015BB8  0012               	return	
 16888  015BBA                     
 16889                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 16890  015BBA  0EA5               	movlw	low _PortC
 16891  015BBC  0100               	movlb	0	; () banked
 16892  015BBE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16893  015BC0  0E00               	movlw	high _PortC
 16894  015BC2  0100               	movlb	0	; () banked
 16895  015BC4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16896  015BC6  0E01               	movlw	1
 16897  015BC8  0100               	movlb	0	; () banked
 16898  015BCA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16899  015BCC  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16900  015BD0  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 16901                           
 16902                           ;LED.c: 43: }
 16903                           
 16904                           ;LED.c: 42: break;
 16905  015BD4  0012               	return	
 16906  015BD6                     l227:
 16907  015BD6  0100               	movlb	0	; () banked
 16908  015BD8  51CF               	movf	LED_Set@pLED& (0+255),w,b
 16909                           
 16910                           ; Switch size 1, requested type "space"
 16911                           ; Number of cases is 2, Range of values is 0 to 1
 16912                           ; switch strategies available:
 16913                           ; Name         Instructions Cycles
 16914                           ; simple_byte            7     4 (average)
 16915                           ;	Chosen strategy is simple_byte
 16916  015BDA  0A00               	xorlw	0	; case 0
 16917  015BDC  B4D8               	btfsc	status,2,c
 16918  015BDE  D7DF               	goto	l228
 16919  015BE0  0A01               	xorlw	1	; case 1
 16920  015BE2  A4D8               	btfss	status,2,c
 16921  015BE4  0012               	return	
 16922  015BE6  D7E9               	goto	l230
 16923  015BE8                     __end_of_LED_Set:
 16924                           	opt stack 0
 16925                           tblptru	equ	0xFF8
 16926                           tblptrh	equ	0xFF7
 16927                           tblptrl	equ	0xFF6
 16928                           tablat	equ	0xFF5
 16929                           prodh	equ	0xFF4
 16930                           prodl	equ	0xFF3
 16931                           intcon	equ	0xFF2
 16932                           postinc0	equ	0xFEE
 16933                           wreg	equ	0xFE8
 16934                           indf1	equ	0xFE7
 16935                           postdec1	equ	0xFE5
 16936                           fsr1h	equ	0xFE2
 16937                           fsr1l	equ	0xFE1
 16938                           indf2	equ	0xFDF
 16939                           postinc2	equ	0xFDE
 16940                           postdec2	equ	0xFDD
 16941                           fsr2h	equ	0xFDA
 16942                           fsr2l	equ	0xFD9
 16943                           status	equ	0xFD8
 16944                           
 16945 ;; *************** function _MXK_Dequeue *****************
 16946 ;; Defined at:
 16947 ;;		line 153 in file "Library/MXK.c"
 16948 ;; Parameters:    Size  Location     Type
 16949 ;;		None
 16950 ;; Auto vars:     Size  Location     Type
 16951 ;;		None
 16952 ;; Return value:  Size  Location     Type
 16953 ;;                  1    wreg      void 
 16954 ;; Registers used:
 16955 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16956 ;; Tracked objects:
 16957 ;;		On entry : 0/0
 16958 ;;		On exit  : 0/0
 16959 ;;		Unchanged: 0/0
 16960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16965 ;;Total ram usage:        0 bytes
 16966 ;; Hardware stack levels used:    1
 16967 ;; Hardware stack levels required when called:   12
 16968 ;; This function calls:
 16969 ;;		Absolute function
 16970 ;;		_Motor_Step
 16971 ;; This function is called by:
 16972 ;;		_init
 16973 ;;		_findClosestWall
 16974 ;;		_mode1
 16975 ;;		_mode2
 16976 ;;		_mode4
 16977 ;;		_main
 16978 ;; This function uses a non-reentrant model
 16979 ;;
 16980                           
 16981                           	psect	text71
 16982  016006                     __ptext71:
 16983                           	opt stack 0
 16984  016006                     _MXK_Dequeue:
 16985                           	opt stack 16
 16986                           
 16987                           ;MXK.c: 155: if (lQueue)
 16988                           
 16989                           ;incstack = 0
 16990  016006  0100               	movlb	0	; () banked
 16991  016008  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16992  01600A  0100               	movlb	0	; () banked
 16993  01600C  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 16994  01600E  0100               	movlb	0	; () banked
 16995  016010  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 16996  016012  B4D8               	btfsc	status,2,c
 16997  016014  D00D               	goto	u13539
 16998                           
 16999                           ; BSR set to: 0
 17000                           ;MXK.c: 156: lQueue();
 17001  016016  D801               	call	u13538
 17002  016018  D00B               	goto	u13539
 17003  01601A                     u13538:
 17004  01601A  0005               	push	
 17005  01601C  6EFA               	movwf	pclath,c
 17006  01601E  0100               	movlb	0	; () banked
 17007  016020  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17008  016022  6EFD               	movwf	tosl,c
 17009  016024  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 17010  016026  6EFE               	movwf	tosh,c
 17011  016028  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 17012  01602A  6EFF               	movwf	tosu,c
 17013  01602C  50FA               	movf	pclath,w,c
 17014  01602E  0012               	return		;indir
 17015  016030                     u13539:
 17016                           
 17017                           ;MXK.c: 157: lQueue = 0;
 17018  016030  0E00               	movlw	0
 17019  016032  0100               	movlb	0	; () banked
 17020  016034  6F63               	movwf	_lQueue& (0+255),b	;volatile
 17021  016036  0E00               	movlw	0
 17022  016038  0100               	movlb	0	; () banked
 17023  01603A  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 17024  01603C  0E00               	movlw	0
 17025  01603E  0100               	movlb	0	; () banked
 17026  016040  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 17027                           
 17028                           ; BSR set to: 0
 17029  016042  0012               	return		;funcret
 17030  016044                     __end_of_MXK_Dequeue:
 17031                           	opt stack 0
 17032                           tosu	equ	0xFFF
 17033                           tosh	equ	0xFFE
 17034                           tosl	equ	0xFFD
 17035                           pclath	equ	0xFFA
 17036                           tblptru	equ	0xFF8
 17037                           tblptrh	equ	0xFF7
 17038                           tblptrl	equ	0xFF6
 17039                           tablat	equ	0xFF5
 17040                           prodh	equ	0xFF4
 17041                           prodl	equ	0xFF3
 17042                           intcon	equ	0xFF2
 17043                           postinc0	equ	0xFEE
 17044                           wreg	equ	0xFE8
 17045                           indf1	equ	0xFE7
 17046                           postdec1	equ	0xFE5
 17047                           fsr1h	equ	0xFE2
 17048                           fsr1l	equ	0xFE1
 17049                           indf2	equ	0xFDF
 17050                           postinc2	equ	0xFDE
 17051                           postdec2	equ	0xFDD
 17052                           fsr2h	equ	0xFDA
 17053                           fsr2l	equ	0xFD9
 17054                           status	equ	0xFD8
 17055                           
 17056 ;; *************** function _Motor_Step *****************
 17057 ;; Defined at:
 17058 ;;		line 75 in file "Library/Motor.c"
 17059 ;; Parameters:    Size  Location     Type
 17060 ;;		None
 17061 ;; Auto vars:     Size  Location     Type
 17062 ;;		None
 17063 ;; Return value:  Size  Location     Type
 17064 ;;                  1    wreg      void 
 17065 ;; Registers used:
 17066 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17067 ;; Tracked objects:
 17068 ;;		On entry : 0/0
 17069 ;;		On exit  : 0/0
 17070 ;;		Unchanged: 0/0
 17071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17075 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17076 ;;Total ram usage:        2 bytes
 17077 ;; Hardware stack levels used:    1
 17078 ;; Hardware stack levels required when called:   11
 17079 ;; This function calls:
 17080 ;;		_MXK_Queue
 17081 ;;		_MXK_Release
 17082 ;;		_MXK_SwitchTo
 17083 ;;		_Port_SetPin
 17084 ;;		_Timer0_Restart
 17085 ;;		_Timer0_Stop
 17086 ;; This function is called by:
 17087 ;;		_Motor_Init
 17088 ;;		_MXK_Dequeue
 17089 ;;		_Timer0_ISR
 17090 ;; This function uses a non-reentrant model
 17091 ;;
 17092                           
 17093                           	psect	text72
 17094  01344E                     __ptext72:
 17095                           	opt stack 0
 17096  01344E                     _Motor_Step:
 17097                           	opt stack 0
 17098                           
 17099                           ; BSR set to: 0
 17100                           ;Skip over the trampoline to the duplicate function for level 2
 17101  01344E  B251               	btfsc	btemp,1,c
 17102  013450  EF4C  F09C         	goto	i2_Motor_Step
 17103  013454                     _Motor_Step$intlevel0:
 17104                           	opt stack 16
 17105                           
 17106                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 17107                           
 17108                           ;incstack = 0
 17109  013454  0100               	movlb	0	; () banked
 17110  013456  EE20 F004          	lfsr	2,4
 17111  01345A  517F               	movf	_lMotor& (0+255),w,b
 17112  01345C  26D9               	addwf	fsr2l,f,c
 17113  01345E  5180               	movf	(_lMotor+1)& (0+255),w,b
 17114  013460  22DA               	addwfc	fsr2h,f,c
 17115  013462  50DF               	movf	indf2,w,c
 17116  013464  EC83  F0AF         	call	_MXK_SwitchTo
 17117  013468  0900               	iorlw	0
 17118  01346A  B4D8               	btfsc	status,2,c
 17119  01346C  D07A               	goto	l1627
 17120                           
 17121                           ;Motor.c: 78: {
 17122                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 17123  01346E  C07F  FFD9         	movff	_lMotor,fsr2l
 17124  013472  C080  FFDA         	movff	_lMotor+1,fsr2h
 17125  013476  50DE               	movf	postinc2,w,c
 17126  013478  10DE               	iorwf	postinc2,w,c
 17127  01347A  B4D8               	btfsc	status,2,c
 17128  01347C  D06D               	goto	l1628
 17129                           
 17130                           ;Motor.c: 80: {
 17131                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 17132  01347E  C07F  FFD9         	movff	_lMotor,fsr2l
 17133  013482  C080  FFDA         	movff	_lMotor+1,fsr2h
 17134  013486  0E01               	movlw	1
 17135  013488  BEDB               	btfsc	plusw2,7,c
 17136  01348A  D026               	goto	l1629
 17137  01348C  0E01               	movlw	1
 17138  01348E  50DB               	movf	plusw2,w,c
 17139  013490  E103               	bnz	u10070
 17140  013492  04DE               	decf	postinc2,w,c
 17141  013494  A0D8               	btfss	status,0,c
 17142  013496  D020               	goto	l1629
 17143  013498                     u10070:
 17144                           
 17145                           ;Motor.c: 83: {
 17146                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 17147  013498  C07F  FFD9         	movff	_lMotor,fsr2l
 17148  01349C  C080  FFDA         	movff	_lMotor+1,fsr2h
 17149  0134A0  28DE               	incf	postinc2,w,c
 17150  0134A2  E104               	bnz	u10080
 17151  0134A4  0E7F               	movlw	127
 17152  0134A6  18DE               	xorwf	postinc2,w,c
 17153  0134A8  B4D8               	btfsc	status,2,c
 17154  0134AA  D007               	goto	l1630
 17155  0134AC                     u10080:
 17156                           
 17157                           ;Motor.c: 85: lMotor->mDelta --;
 17158  0134AC  C07F  FFD9         	movff	_lMotor,fsr2l
 17159  0134B0  C080  FFDA         	movff	_lMotor+1,fsr2h
 17160  0134B4  06DE               	decf	postinc2,f,c
 17161  0134B6  0E00               	movlw	0
 17162  0134B8  5ADD               	subwfb	postdec2,f,c
 17163  0134BA                     l1630:
 17164                           
 17165                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 17166  0134BA  0E91               	movlw	low _PortE
 17167  0134BC  0100               	movlb	0	; () banked
 17168  0134BE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17169  0134C0  0E00               	movlw	high _PortE
 17170  0134C2  0100               	movlb	0	; () banked
 17171  0134C4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17172  0134C6  0E00               	movlw	0
 17173  0134C8  0100               	movlb	0	; () banked
 17174  0134CA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17175  0134CC  0E01               	movlw	1
 17176  0134CE  0100               	movlb	0	; () banked
 17177  0134D0  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17178  0134D2  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 17179                           
 17180                           ;Motor.c: 88: }
 17181  0134D6  D01F               	goto	l1631
 17182  0134D8                     l1629:
 17183                           
 17184                           ;Motor.c: 89: else
 17185                           ;Motor.c: 90: {
 17186                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 17187  0134D8  C07F  FFD9         	movff	_lMotor,fsr2l
 17188  0134DC  C080  FFDA         	movff	_lMotor+1,fsr2h
 17189  0134E0  04DE               	decf	postinc2,w,c
 17190  0134E2  E104               	bnz	u10090
 17191  0134E4  0E80               	movlw	128
 17192  0134E6  18DE               	xorwf	postinc2,w,c
 17193  0134E8  B4D8               	btfsc	status,2,c
 17194  0134EA  D007               	goto	l1632
 17195  0134EC                     u10090:
 17196                           
 17197                           ;Motor.c: 92: lMotor->mDelta ++;
 17198  0134EC  C07F  FFD9         	movff	_lMotor,fsr2l
 17199  0134F0  C080  FFDA         	movff	_lMotor+1,fsr2h
 17200  0134F4  2ADE               	incf	postinc2,f,c
 17201  0134F6  0E00               	movlw	0
 17202  0134F8  22DD               	addwfc	postdec2,f,c
 17203  0134FA                     l1632:
 17204                           
 17205                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 17206  0134FA  0E91               	movlw	low _PortE
 17207  0134FC  0100               	movlb	0	; () banked
 17208  0134FE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17209  013500  0E00               	movlw	high _PortE
 17210  013502  0100               	movlb	0	; () banked
 17211  013504  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17212  013506  0E00               	movlw	0
 17213  013508  0100               	movlb	0	; () banked
 17214  01350A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17215  01350C  0E00               	movlw	0
 17216  01350E  0100               	movlb	0	; () banked
 17217  013510  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17218  013512  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 17219  013516                     l1631:
 17220                           
 17221                           ;Motor.c: 95: }
 17222                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 17223  013516  0E91               	movlw	low _PortE
 17224  013518  0100               	movlb	0	; () banked
 17225  01351A  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17226  01351C  0E00               	movlw	high _PortE
 17227  01351E  0100               	movlb	0	; () banked
 17228  013520  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17229  013522  0E01               	movlw	1
 17230  013524  0100               	movlb	0	; () banked
 17231  013526  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17232  013528  0E01               	movlw	1
 17233  01352A  0100               	movlb	0	; () banked
 17234  01352C  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17235  01352E  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 17236                           
 17237                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 17238  013532  0E91               	movlw	low _PortE
 17239  013534  0100               	movlb	0	; () banked
 17240  013536  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17241  013538  0E00               	movlw	high _PortE
 17242  01353A  0100               	movlb	0	; () banked
 17243  01353C  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17244  01353E  0E01               	movlw	1
 17245  013540  0100               	movlb	0	; () banked
 17246  013542  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17247  013544  0E00               	movlw	0
 17248  013546  0100               	movlb	0	; () banked
 17249  013548  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17250  01354A  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 17251                           
 17252                           ;Motor.c: 101: MXK_Release();
 17253  01354E  ECB1  F0B2         	call	_MXK_Release	;wreg free
 17254                           
 17255                           ;Motor.c: 102: Timer0_Restart();
 17256  013552  ECAA  F0B3         	call	_Timer0_Restart	;wreg free
 17257                           
 17258                           ;Motor.c: 103: return;
 17259  013556  0012               	return	
 17260  013558                     l1628:
 17261                           
 17262                           ;Motor.c: 104: }
 17263                           ;Motor.c: 105: MXK_Release();
 17264  013558  ECB1  F0B2         	call	_MXK_Release	;wreg free
 17265                           
 17266                           ;Motor.c: 106: Timer0_Stop();
 17267  01355C  ECD5  F0B3         	call	_Timer0_Stop	;wreg free
 17268                           
 17269                           ;Motor.c: 107: return;
 17270  013560  0012               	return	
 17271  013562                     l1627:
 17272                           
 17273                           ;Motor.c: 108: }
 17274                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 17275  013562  C066  F0BA         	movff	_lStepFunction,MXK_Queue@pCallback
 17276  013566  C067  F0BB         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 17277  01356A  C068  F0BC         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 17278  01356E  EC90  F0B3         	call	_MXK_Queue	;wreg free
 17279  013572  0012               	return		;funcret
 17280  013574                     __end_of_Motor_Step:
 17281                           	opt stack 0
 17282                           tosu	equ	0xFFF
 17283                           tosh	equ	0xFFE
 17284                           tosl	equ	0xFFD
 17285                           pclath	equ	0xFFA
 17286                           tblptru	equ	0xFF8
 17287                           tblptrh	equ	0xFF7
 17288                           tblptrl	equ	0xFF6
 17289                           tablat	equ	0xFF5
 17290                           prodh	equ	0xFF4
 17291                           prodl	equ	0xFF3
 17292                           intcon	equ	0xFF2
 17293                           postinc0	equ	0xFEE
 17294                           wreg	equ	0xFE8
 17295                           indf1	equ	0xFE7
 17296                           postdec1	equ	0xFE5
 17297                           fsr1h	equ	0xFE2
 17298                           fsr1l	equ	0xFE1
 17299                           indf2	equ	0xFDF
 17300                           postinc2	equ	0xFDE
 17301                           postdec2	equ	0xFDD
 17302                           plusw2	equ	0xFDB
 17303                           fsr2h	equ	0xFDA
 17304                           fsr2l	equ	0xFD9
 17305                           status	equ	0xFD8
 17306                           
 17307 ;; *************** function _Timer0_Stop *****************
 17308 ;; Defined at:
 17309 ;;		line 89 in file "Library/Timer0.c"
 17310 ;; Parameters:    Size  Location     Type
 17311 ;;		None
 17312 ;; Auto vars:     Size  Location     Type
 17313 ;;		None
 17314 ;; Return value:  Size  Location     Type
 17315 ;;                  1    wreg      void 
 17316 ;; Registers used:
 17317 ;;		None
 17318 ;; Tracked objects:
 17319 ;;		On entry : 0/0
 17320 ;;		On exit  : 0/0
 17321 ;;		Unchanged: 0/0
 17322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17327 ;;Total ram usage:        0 bytes
 17328 ;; Hardware stack levels used:    1
 17329 ;; Hardware stack levels required when called:    7
 17330 ;; This function calls:
 17331 ;;		Nothing
 17332 ;; This function is called by:
 17333 ;;		_Motor_Step
 17334 ;; This function uses a non-reentrant model
 17335 ;;
 17336                           
 17337                           	psect	text73
 17338  0167AA                     __ptext73:
 17339                           	opt stack 0
 17340  0167AA                     _Timer0_Stop:
 17341                           	opt stack 19
 17342                           
 17343                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 17344                           
 17345                           ;incstack = 0
 17346  0167AA  9AF2               	bcf	intcon,5,c	;volatile
 17347                           
 17348                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 17349  0167AC  94F2               	bcf	intcon,2,c	;volatile
 17350  0167AE  0012               	return		;funcret
 17351  0167B0                     __end_of_Timer0_Stop:
 17352                           	opt stack 0
 17353                           tosu	equ	0xFFF
 17354                           tosh	equ	0xFFE
 17355                           tosl	equ	0xFFD
 17356                           pclath	equ	0xFFA
 17357                           tblptru	equ	0xFF8
 17358                           tblptrh	equ	0xFF7
 17359                           tblptrl	equ	0xFF6
 17360                           tablat	equ	0xFF5
 17361                           prodh	equ	0xFF4
 17362                           prodl	equ	0xFF3
 17363                           intcon	equ	0xFF2
 17364                           postinc0	equ	0xFEE
 17365                           wreg	equ	0xFE8
 17366                           indf1	equ	0xFE7
 17367                           postdec1	equ	0xFE5
 17368                           fsr1h	equ	0xFE2
 17369                           fsr1l	equ	0xFE1
 17370                           indf2	equ	0xFDF
 17371                           postinc2	equ	0xFDE
 17372                           postdec2	equ	0xFDD
 17373                           plusw2	equ	0xFDB
 17374                           fsr2h	equ	0xFDA
 17375                           fsr2l	equ	0xFD9
 17376                           status	equ	0xFD8
 17377                           
 17378 ;; *************** function _Timer0_Restart *****************
 17379 ;; Defined at:
 17380 ;;		line 83 in file "Library/Timer0.c"
 17381 ;; Parameters:    Size  Location     Type
 17382 ;;		None
 17383 ;; Auto vars:     Size  Location     Type
 17384 ;;		None
 17385 ;; Return value:  Size  Location     Type
 17386 ;;                  1    wreg      void 
 17387 ;; Registers used:
 17388 ;;		None
 17389 ;; Tracked objects:
 17390 ;;		On entry : 0/0
 17391 ;;		On exit  : 0/0
 17392 ;;		Unchanged: 0/0
 17393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17398 ;;Total ram usage:        0 bytes
 17399 ;; Hardware stack levels used:    1
 17400 ;; Hardware stack levels required when called:    7
 17401 ;; This function calls:
 17402 ;;		Nothing
 17403 ;; This function is called by:
 17404 ;;		_Motor_Step
 17405 ;; This function uses a non-reentrant model
 17406 ;;
 17407                           
 17408                           	psect	text74
 17409  016754                     __ptext74:
 17410                           	opt stack 0
 17411  016754                     _Timer0_Restart:
 17412                           	opt stack 19
 17413                           
 17414                           ;Timer0.c: 85: TMR0 = COUNTER;
 17415                           
 17416                           ;incstack = 0
 17417  016754  C029  FFD6         	movff	_COUNTER,4054	;volatile
 17418  016758  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 17419                           
 17420                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 17421  01675C  8AF2               	bsf	intcon,5,c	;volatile
 17422  01675E  0012               	return		;funcret
 17423  016760                     __end_of_Timer0_Restart:
 17424                           	opt stack 0
 17425                           tosu	equ	0xFFF
 17426                           tosh	equ	0xFFE
 17427                           tosl	equ	0xFFD
 17428                           pclath	equ	0xFFA
 17429                           tblptru	equ	0xFF8
 17430                           tblptrh	equ	0xFF7
 17431                           tblptrl	equ	0xFF6
 17432                           tablat	equ	0xFF5
 17433                           prodh	equ	0xFF4
 17434                           prodl	equ	0xFF3
 17435                           intcon	equ	0xFF2
 17436                           postinc0	equ	0xFEE
 17437                           wreg	equ	0xFE8
 17438                           indf1	equ	0xFE7
 17439                           postdec1	equ	0xFE5
 17440                           fsr1h	equ	0xFE2
 17441                           fsr1l	equ	0xFE1
 17442                           indf2	equ	0xFDF
 17443                           postinc2	equ	0xFDE
 17444                           postdec2	equ	0xFDD
 17445                           plusw2	equ	0xFDB
 17446                           fsr2h	equ	0xFDA
 17447                           fsr2l	equ	0xFD9
 17448                           status	equ	0xFD8
 17449                           
 17450 ;; *************** function _MXK_SwitchTo *****************
 17451 ;; Defined at:
 17452 ;;		line 105 in file "Library/MXK.c"
 17453 ;; Parameters:    Size  Location     Type
 17454 ;;  pModule         1    wreg     enum E6927
 17455 ;; Auto vars:     Size  Location     Type
 17456 ;;  pModule         1    7[BANK0 ] enum E6927
 17457 ;;  CUR             1    6[BANK0 ] unsigned char 
 17458 ;; Return value:  Size  Location     Type
 17459 ;;                  1    wreg      unsigned char 
 17460 ;; Registers used:
 17461 ;;		wreg, status,2, status,0, cstack
 17462 ;; Tracked objects:
 17463 ;;		On entry : 0/0
 17464 ;;		On exit  : 0/0
 17465 ;;		Unchanged: 0/0
 17466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17468 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17471 ;;Total ram usage:        2 bytes
 17472 ;; Hardware stack levels used:    1
 17473 ;; Hardware stack levels required when called:    8
 17474 ;; This function calls:
 17475 ;;		_delay_us
 17476 ;; This function is called by:
 17477 ;;		_Motor_Step
 17478 ;;		_findClosestWall
 17479 ;;		_mode1
 17480 ;;		_mode2
 17481 ;;		_mode4
 17482 ;;		_main
 17483 ;; This function uses a non-reentrant model
 17484 ;;
 17485                           
 17486                           	psect	text75
 17487  015F06                     __ptext75:
 17488                           	opt stack 0
 17489  015F06                     _MXK_SwitchTo:
 17490                           	opt stack 20
 17491                           
 17492                           ;incstack = 0
 17493                           ;MXK_SwitchTo@pModule stored from wreg
 17494  015F06  0100               	movlb	0	; () banked
 17495  015F08  6FC1               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17496                           
 17497                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17498  015F0A  5086               	movf	3974,w,c	;volatile
 17499  015F0C  0B0F               	andlw	15
 17500  015F0E  0100               	movlb	0	; () banked
 17501  015F10  6FC0               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17502                           
 17503                           ; BSR set to: 0
 17504                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17505  015F12  504B               	movf	_Bus_State,w,c
 17506  015F14  A4D8               	btfss	status,2,c
 17507  015F16  D002               	goto	l1730
 17508                           
 17509                           ; BSR set to: 0
 17510                           ;MXK.c: 110: return 0;
 17511  015F18  0E00               	movlw	0
 17512                           
 17513                           ; BSR set to: 0
 17514  015F1A  0012               	return	
 17515  015F1C                     l1730:
 17516                           
 17517                           ; BSR set to: 0
 17518                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17519                           
 17520                           ; BSR set to: 0
 17521  015F1C  0E00               	movlw	0
 17522  015F1E  6E4B               	movwf	_Bus_State,c
 17523                           
 17524                           ; BSR set to: 0
 17525                           ;MXK.c: 114: if (CUR != pModule)
 17526  015F20  0100               	movlb	0	; () banked
 17527  015F22  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17528  015F24  0100               	movlb	0	; () banked
 17529  015F26  19C0               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17530  015F28  B4D8               	btfsc	status,2,c
 17531  015F2A  D00C               	goto	l1732
 17532                           
 17533                           ; BSR set to: 0
 17534                           ;MXK.c: 115: {
 17535                           ;MXK.c: 116: PORTG &= ~(0xF);
 17536  015F2C  0EF0               	movlw	240
 17537  015F2E  1686               	andwf	3974,f,c	;volatile
 17538                           
 17539                           ;MXK.c: 117: PORTG |= pModule;
 17540  015F30  0100               	movlb	0	; () banked
 17541  015F32  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17542  015F34  1286               	iorwf	3974,f,c	;volatile
 17543                           
 17544                           ; BSR set to: 0
 17545                           ;MXK.c: 120: delay_us(10);
 17546  015F36  0E00               	movlw	0
 17547  015F38  0100               	movlb	0	; () banked
 17548  015F3A  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17549  015F3C  0E0A               	movlw	10
 17550  015F3E  6FBA               	movwf	delay_us@us& (0+255),b
 17551  015F40  ECA3  F0AD         	call	_delay_us	;wreg free
 17552  015F44                     l1732:
 17553                           
 17554                           ;MXK.c: 121: }
 17555                           ;MXK.c: 122: return 1;
 17556  015F44  0E01               	movlw	1
 17557  015F46  0012               	return	
 17558  015F48                     __end_of_MXK_SwitchTo:
 17559                           	opt stack 0
 17560                           tosu	equ	0xFFF
 17561                           tosh	equ	0xFFE
 17562                           tosl	equ	0xFFD
 17563                           pclath	equ	0xFFA
 17564                           tblptru	equ	0xFF8
 17565                           tblptrh	equ	0xFF7
 17566                           tblptrl	equ	0xFF6
 17567                           tablat	equ	0xFF5
 17568                           prodh	equ	0xFF4
 17569                           prodl	equ	0xFF3
 17570                           intcon	equ	0xFF2
 17571                           postinc0	equ	0xFEE
 17572                           wreg	equ	0xFE8
 17573                           indf1	equ	0xFE7
 17574                           postdec1	equ	0xFE5
 17575                           fsr1h	equ	0xFE2
 17576                           fsr1l	equ	0xFE1
 17577                           indf2	equ	0xFDF
 17578                           postinc2	equ	0xFDE
 17579                           postdec2	equ	0xFDD
 17580                           plusw2	equ	0xFDB
 17581                           fsr2h	equ	0xFDA
 17582                           fsr2l	equ	0xFD9
 17583                           status	equ	0xFD8
 17584                           
 17585 ;; *************** function _MXK_Release *****************
 17586 ;; Defined at:
 17587 ;;		line 130 in file "Library/MXK.c"
 17588 ;; Parameters:    Size  Location     Type
 17589 ;;		None
 17590 ;; Auto vars:     Size  Location     Type
 17591 ;;		None
 17592 ;; Return value:  Size  Location     Type
 17593 ;;                  1    wreg      unsigned char 
 17594 ;; Registers used:
 17595 ;;		wreg, status,2, status,0
 17596 ;; Tracked objects:
 17597 ;;		On entry : 0/0
 17598 ;;		On exit  : 0/0
 17599 ;;		Unchanged: 0/0
 17600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17605 ;;Total ram usage:        0 bytes
 17606 ;; Hardware stack levels used:    1
 17607 ;; Hardware stack levels required when called:    7
 17608 ;; This function calls:
 17609 ;;		Nothing
 17610 ;; This function is called by:
 17611 ;;		_Motor_Step
 17612 ;;		_init
 17613 ;;		_findClosestWall
 17614 ;;		_mode1
 17615 ;;		_mode2
 17616 ;;		_mode4
 17617 ;;		_main
 17618 ;; This function uses a non-reentrant model
 17619 ;;
 17620                           
 17621                           	psect	text76
 17622  016562                     __ptext76:
 17623                           	opt stack 0
 17624  016562                     _MXK_Release:
 17625                           	opt stack 21
 17626                           
 17627                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17628                           
 17629                           ;incstack = 0
 17630  016562  0E01               	movlw	1
 17631  016564  6E4B               	movwf	_Bus_State,c
 17632                           
 17633                           ;MXK.c: 134: if (lQueue != 0)
 17634  016566  0100               	movlb	0	; () banked
 17635  016568  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17636  01656A  0100               	movlb	0	; () banked
 17637  01656C  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17638  01656E  0100               	movlb	0	; () banked
 17639  016570  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17640  016572  B4D8               	btfsc	status,2,c
 17641  016574  D002               	goto	l1735
 17642                           
 17643                           ; BSR set to: 0
 17644                           ;MXK.c: 135: return 1;
 17645  016576  0E01               	movlw	1
 17646                           
 17647                           ; BSR set to: 0
 17648  016578  0012               	return	
 17649  01657A                     l1735:
 17650                           
 17651                           ; BSR set to: 0
 17652                           ;MXK.c: 137: return 0;
 17653                           
 17654                           ; BSR set to: 0
 17655  01657A  0E00               	movlw	0
 17656  01657C  0012               	return	
 17657  01657E                     __end_of_MXK_Release:
 17658                           	opt stack 0
 17659                           tosu	equ	0xFFF
 17660                           tosh	equ	0xFFE
 17661                           tosl	equ	0xFFD
 17662                           pclath	equ	0xFFA
 17663                           tblptru	equ	0xFF8
 17664                           tblptrh	equ	0xFF7
 17665                           tblptrl	equ	0xFF6
 17666                           tablat	equ	0xFF5
 17667                           prodh	equ	0xFF4
 17668                           prodl	equ	0xFF3
 17669                           intcon	equ	0xFF2
 17670                           postinc0	equ	0xFEE
 17671                           wreg	equ	0xFE8
 17672                           indf1	equ	0xFE7
 17673                           postdec1	equ	0xFE5
 17674                           fsr1h	equ	0xFE2
 17675                           fsr1l	equ	0xFE1
 17676                           indf2	equ	0xFDF
 17677                           postinc2	equ	0xFDE
 17678                           postdec2	equ	0xFDD
 17679                           plusw2	equ	0xFDB
 17680                           fsr2h	equ	0xFDA
 17681                           fsr2l	equ	0xFD9
 17682                           status	equ	0xFD8
 17683                           
 17684 ;; *************** function _MXK_Queue *****************
 17685 ;; Defined at:
 17686 ;;		line 144 in file "Library/MXK.c"
 17687 ;; Parameters:    Size  Location     Type
 17688 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17689 ;;		 -> Absolute function(1), Motor_Step(1), 
 17690 ;; Auto vars:     Size  Location     Type
 17691 ;;		None
 17692 ;; Return value:  Size  Location     Type
 17693 ;;                  1    wreg      void 
 17694 ;; Registers used:
 17695 ;;		wreg, status,2, status,0
 17696 ;; Tracked objects:
 17697 ;;		On entry : 0/0
 17698 ;;		On exit  : 0/0
 17699 ;;		Unchanged: 0/0
 17700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17701 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17704 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17705 ;;Total ram usage:        3 bytes
 17706 ;; Hardware stack levels used:    1
 17707 ;; Hardware stack levels required when called:    7
 17708 ;; This function calls:
 17709 ;;		Nothing
 17710 ;; This function is called by:
 17711 ;;		_Motor_Step
 17712 ;; This function uses a non-reentrant model
 17713 ;;
 17714                           
 17715                           	psect	text77
 17716  016720                     __ptext77:
 17717                           	opt stack 0
 17718  016720                     _MXK_Queue:
 17719                           	opt stack 19
 17720                           
 17721                           ;MXK.c: 146: lQueue = pCallback;
 17722                           
 17723                           ; BSR set to: 0
 17724                           ;incstack = 0
 17725  016720  C0BA  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17726  016724  C0BB  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17727  016728  C0BC  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17728  01672C  0012               	return		;funcret
 17729  01672E                     __end_of_MXK_Queue:
 17730                           	opt stack 0
 17731                           tosu	equ	0xFFF
 17732                           tosh	equ	0xFFE
 17733                           tosl	equ	0xFFD
 17734                           pclath	equ	0xFFA
 17735                           tblptru	equ	0xFF8
 17736                           tblptrh	equ	0xFF7
 17737                           tblptrl	equ	0xFF6
 17738                           tablat	equ	0xFF5
 17739                           prodh	equ	0xFF4
 17740                           prodl	equ	0xFF3
 17741                           intcon	equ	0xFF2
 17742                           postinc0	equ	0xFEE
 17743                           wreg	equ	0xFE8
 17744                           indf1	equ	0xFE7
 17745                           postdec1	equ	0xFE5
 17746                           fsr1h	equ	0xFE2
 17747                           fsr1l	equ	0xFE1
 17748                           indf2	equ	0xFDF
 17749                           postinc2	equ	0xFDE
 17750                           postdec2	equ	0xFDD
 17751                           plusw2	equ	0xFDB
 17752                           fsr2h	equ	0xFDA
 17753                           fsr2l	equ	0xFD9
 17754                           status	equ	0xFD8
 17755                           
 17756 ;; *************** function _MXK_BlockSwitchTo *****************
 17757 ;; Defined at:
 17758 ;;		line 82 in file "Library/MXK.c"
 17759 ;; Parameters:    Size  Location     Type
 17760 ;;  pModule         1    wreg     enum E6927
 17761 ;; Auto vars:     Size  Location     Type
 17762 ;;  pModule         1    7[BANK0 ] enum E6927
 17763 ;;  CUR             1    6[BANK0 ] unsigned char 
 17764 ;; Return value:  Size  Location     Type
 17765 ;;                  1    wreg      unsigned char 
 17766 ;; Registers used:
 17767 ;;		wreg, status,2, status,0, cstack
 17768 ;; Tracked objects:
 17769 ;;		On entry : 0/0
 17770 ;;		On exit  : 0/0
 17771 ;;		Unchanged: 0/0
 17772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17774 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17776 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17777 ;;Total ram usage:        2 bytes
 17778 ;; Hardware stack levels used:    1
 17779 ;; Hardware stack levels required when called:    8
 17780 ;; This function calls:
 17781 ;;		_delay_us
 17782 ;; This function is called by:
 17783 ;;		_init
 17784 ;; This function uses a non-reentrant model
 17785 ;;
 17786                           
 17787                           	psect	text78
 17788  016044                     __ptext78:
 17789                           	opt stack 0
 17790  016044                     _MXK_BlockSwitchTo:
 17791                           	opt stack 21
 17792                           
 17793                           ;incstack = 0
 17794                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17795  016044  0100               	movlb	0	; () banked
 17796  016046  6FC1               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17797                           
 17798                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17799  016048  5086               	movf	3974,w,c	;volatile
 17800  01604A  0B0F               	andlw	15
 17801  01604C  0100               	movlb	0	; () banked
 17802  01604E  6FC0               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17803  016050                     
 17804                           ; BSR set to: 0
 17805                           
 17806                           ; BSR set to: 0
 17807  016050  504B               	movf	_Bus_State,w,c
 17808  016052  B4D8               	btfsc	status,2,c
 17809  016054  D7FD               	goto	l1724
 17810                           
 17811                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17812  016056  0E00               	movlw	0
 17813  016058  6E4B               	movwf	_Bus_State,c
 17814                           
 17815                           ;MXK.c: 90: if (CUR != pModule)
 17816  01605A  0100               	movlb	0	; () banked
 17817  01605C  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17818  01605E  0100               	movlb	0	; () banked
 17819  016060  19C0               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17820  016062  B4D8               	btfsc	status,2,c
 17821  016064  D00C               	goto	l1726
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;MXK.c: 91: {
 17825                           ;MXK.c: 92: PORTG &= ~(0xF);
 17826  016066  0EF0               	movlw	240
 17827  016068  1686               	andwf	3974,f,c	;volatile
 17828                           
 17829                           ;MXK.c: 93: PORTG |= pModule;
 17830  01606A  0100               	movlb	0	; () banked
 17831  01606C  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17832  01606E  1286               	iorwf	3974,f,c	;volatile
 17833                           
 17834                           ; BSR set to: 0
 17835                           ;MXK.c: 96: delay_us(10);
 17836  016070  0E00               	movlw	0
 17837  016072  0100               	movlb	0	; () banked
 17838  016074  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17839  016076  0E0A               	movlw	10
 17840  016078  6FBA               	movwf	delay_us@us& (0+255),b
 17841  01607A  ECA3  F0AD         	call	_delay_us	;wreg free
 17842  01607E                     l1726:
 17843                           
 17844                           ;MXK.c: 97: }
 17845                           ;MXK.c: 98: return 1;
 17846  01607E  0E01               	movlw	1
 17847  016080  0012               	return	
 17848  016082                     __end_of_MXK_BlockSwitchTo:
 17849                           	opt stack 0
 17850                           tosu	equ	0xFFF
 17851                           tosh	equ	0xFFE
 17852                           tosl	equ	0xFFD
 17853                           pclath	equ	0xFFA
 17854                           tblptru	equ	0xFF8
 17855                           tblptrh	equ	0xFF7
 17856                           tblptrl	equ	0xFF6
 17857                           tablat	equ	0xFF5
 17858                           prodh	equ	0xFF4
 17859                           prodl	equ	0xFF3
 17860                           intcon	equ	0xFF2
 17861                           postinc0	equ	0xFEE
 17862                           wreg	equ	0xFE8
 17863                           indf1	equ	0xFE7
 17864                           postdec1	equ	0xFE5
 17865                           fsr1h	equ	0xFE2
 17866                           fsr1l	equ	0xFE1
 17867                           indf2	equ	0xFDF
 17868                           postinc2	equ	0xFDE
 17869                           postdec2	equ	0xFDD
 17870                           plusw2	equ	0xFDB
 17871                           fsr2h	equ	0xFDA
 17872                           fsr2l	equ	0xFD9
 17873                           status	equ	0xFD8
 17874                           
 17875 ;; *************** function _delay_us *****************
 17876 ;; Defined at:
 17877 ;;		line 255 in file "Library/Types.c"
 17878 ;; Parameters:    Size  Location     Type
 17879 ;;  us              2    0[BANK0 ] unsigned short 
 17880 ;; Auto vars:     Size  Location     Type
 17881 ;;  u               4    2[BANK0 ] unsigned long 
 17882 ;; Return value:  Size  Location     Type
 17883 ;;                  1    wreg      void 
 17884 ;; Registers used:
 17885 ;;		wreg, status,2, status,0
 17886 ;; Tracked objects:
 17887 ;;		On entry : 0/0
 17888 ;;		On exit  : 0/0
 17889 ;;		Unchanged: 0/0
 17890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17891 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17892 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17894 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17895 ;;Total ram usage:        6 bytes
 17896 ;; Hardware stack levels used:    1
 17897 ;; Hardware stack levels required when called:    7
 17898 ;; This function calls:
 17899 ;;		Nothing
 17900 ;; This function is called by:
 17901 ;;		_MXK_BlockSwitchTo
 17902 ;;		_MXK_SwitchTo
 17903 ;; This function uses a non-reentrant model
 17904 ;;
 17905                           
 17906                           	psect	text79
 17907  015B46                     __ptext79:
 17908                           	opt stack 0
 17909  015B46                     _delay_us:
 17910                           	opt stack 20
 17911                           
 17912                           ;Types.c: 256: unsigned long u;
 17913                           ;Types.c: 257: while (us--) {
 17914                           
 17915                           ;incstack = 0
 17916  015B46  D01C               	goto	u9260
 17917  015B48                     l12558:
 17918                           
 17919                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17920  015B48  0E00               	movlw	0
 17921  015B4A  0100               	movlb	0	; () banked
 17922  015B4C  6FBC               	movwf	delay_us@u& (0+255),b
 17923  015B4E  0E00               	movlw	0
 17924  015B50  6FBD               	movwf	(delay_us@u+1)& (0+255),b
 17925  015B52  0E00               	movlw	0
 17926  015B54  6FBE               	movwf	(delay_us@u+2)& (0+255),b
 17927  015B56  0E00               	movlw	0
 17928  015B58  6FBF               	movwf	(delay_us@u+3)& (0+255),b
 17929  015B5A                     l12560:
 17930                           
 17931                           ; BSR set to: 0
 17932  015B5A  0100               	movlb	0	; () banked
 17933  015B5C  51BC               	movf	delay_us@u& (0+255),w,b
 17934  015B5E  0100               	movlb	0	; () banked
 17935  015B60  11BD               	iorwf	(delay_us@u+1)& (0+255),w,b
 17936  015B62  0100               	movlb	0	; () banked
 17937  015B64  11BE               	iorwf	(delay_us@u+2)& (0+255),w,b
 17938  015B66  0100               	movlb	0	; () banked
 17939  015B68  11BF               	iorwf	(delay_us@u+3)& (0+255),w,b
 17940  015B6A  A4D8               	btfss	status,2,c
 17941  015B6C  D009               	goto	u9260
 17942                           
 17943                           ; BSR set to: 0
 17944                           
 17945                           ; BSR set to: 0
 17946  015B6E  F000               	nop		; ;# 
 17947  015B70  0E01               	movlw	1
 17948  015B72  0100               	movlb	0	; () banked
 17949  015B74  27BC               	addwf	delay_us@u& (0+255),f,b
 17950  015B76  0E00               	movlw	0
 17951  015B78  23BD               	addwfc	(delay_us@u+1)& (0+255),f,b
 17952  015B7A  23BE               	addwfc	(delay_us@u+2)& (0+255),f,b
 17953  015B7C  23BF               	addwfc	(delay_us@u+3)& (0+255),f,b
 17954  015B7E  D7ED               	goto	l12560
 17955  015B80                     u9260:
 17956                           
 17957                           ; BSR set to: 0
 17958                           
 17959                           ; BSR set to: 0
 17960  015B80  0100               	movlb	0	; () banked
 17961  015B82  07BA               	decf	delay_us@us& (0+255),f,b
 17962  015B84  A0D8               	btfss	status,0,c
 17963  015B86  07BB               	decf	(delay_us@us+1)& (0+255),f,b
 17964  015B88  0100               	movlb	0	; () banked
 17965  015B8A  29BA               	incf	delay_us@us& (0+255),w,b
 17966  015B8C  E1DD               	bnz	l12558
 17967  015B8E  0100               	movlb	0	; () banked
 17968  015B90  29BB               	incf	(delay_us@us+1)& (0+255),w,b
 17969  015B92  B4D8               	btfsc	status,2,c
 17970  015B94  0012               	return	
 17971  015B96  D7D8               	goto	l832
 17972  015B98                     __end_of_delay_us:
 17973                           	opt stack 0
 17974                           tosu	equ	0xFFF
 17975                           tosh	equ	0xFFE
 17976                           tosl	equ	0xFFD
 17977                           pclath	equ	0xFFA
 17978                           tblptru	equ	0xFF8
 17979                           tblptrh	equ	0xFF7
 17980                           tblptrl	equ	0xFF6
 17981                           tablat	equ	0xFF5
 17982                           prodh	equ	0xFF4
 17983                           prodl	equ	0xFF3
 17984                           intcon	equ	0xFF2
 17985                           postinc0	equ	0xFEE
 17986                           wreg	equ	0xFE8
 17987                           indf1	equ	0xFE7
 17988                           postdec1	equ	0xFE5
 17989                           fsr1h	equ	0xFE2
 17990                           fsr1l	equ	0xFE1
 17991                           indf2	equ	0xFDF
 17992                           postinc2	equ	0xFDE
 17993                           postdec2	equ	0xFDD
 17994                           plusw2	equ	0xFDB
 17995                           fsr2h	equ	0xFDA
 17996                           fsr2l	equ	0xFD9
 17997                           status	equ	0xFD8
 17998                           
 17999 ;; *************** function _LCD_Init *****************
 18000 ;; Defined at:
 18001 ;;		line 172 in file "Library/LCD.c"
 18002 ;; Parameters:    Size  Location     Type
 18003 ;;		None
 18004 ;; Auto vars:     Size  Location     Type
 18005 ;;  i               2   55[BANK0 ] unsigned short 
 18006 ;; Return value:  Size  Location     Type
 18007 ;;                  1    wreg      void 
 18008 ;; Registers used:
 18009 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18010 ;; Tracked objects:
 18011 ;;		On entry : 0/0
 18012 ;;		On exit  : 0/0
 18013 ;;		Unchanged: 0/0
 18014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18016 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18018 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18019 ;;Total ram usage:        4 bytes
 18020 ;; Hardware stack levels used:    1
 18021 ;; Hardware stack levels required when called:   15
 18022 ;; This function calls:
 18023 ;;		_Configure_GPIOs
 18024 ;;		_LCD_Fill
 18025 ;;		_LCD_Write
 18026 ;;		_Set_Rotation
 18027 ;;		_delay_ms
 18028 ;; This function is called by:
 18029 ;;		_init
 18030 ;; This function uses a non-reentrant model
 18031 ;;
 18032                           
 18033                           	psect	text80
 18034  012EB6                     __ptext80:
 18035                           	opt stack 0
 18036  012EB6                     _LCD_Init:
 18037                           	opt stack 14
 18038                           
 18039                           ;LCD.c: 174: UINT16 i;
 18040                           ;LCD.c: 175: Configure_GPIOs();
 18041                           
 18042                           ; BSR set to: 0
 18043                           ;incstack = 0
 18044  012EB6  ECB3  F0AA         	call	_Configure_GPIOs	;wreg free
 18045                           
 18046                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 18047  012EBA  0E00               	movlw	0
 18048  012EBC  0100               	movlb	0	; () banked
 18049  012EBE  6FF2               	movwf	(LCD_Init@i+1)& (0+255),b
 18050  012EC0  0E00               	movlw	0
 18051  012EC2  6FF1               	movwf	LCD_Init@i& (0+255),b
 18052                           
 18053                           ; BSR set to: 0
 18054  012EC4  0100               	movlb	0	; () banked
 18055  012EC6  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18056  012EC8  E106               	bnz	u11210
 18057  012ECA  0E59               	movlw	89
 18058  012ECC  0100               	movlb	0	; () banked
 18059  012ECE  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 18060  012ED0  B0D8               	btfsc	status,0,c
 18061  012ED2  D08B               	goto	u11250
 18062  012ED4  D001               	goto	l85
 18063  012ED6                     u11210:
 18064                           
 18065                           ; BSR set to: 0
 18066  012ED6  D089               	goto	u11250
 18067  012ED8                     l85:
 18068                           
 18069                           ; BSR set to: 0
 18070                           ;LCD.c: 178: {
 18071                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 18072                           
 18073                           ; BSR set to: 0
 18074  012ED8  90D8               	bcf	status,0,c
 18075  012EDA  0100               	movlb	0	; () banked
 18076  012EDC  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18077  012EDE  6EF6               	movwf	tblptrl,c
 18078  012EE0  0100               	movlb	0	; () banked
 18079  012EE2  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18080  012EE4  6EF7               	movwf	tblptrh,c
 18081  012EE6  0E33               	movlw	low _InitList
 18082  012EE8  26F6               	addwf	tblptrl,f,c
 18083  012EEA  0EFC               	movlw	high _InitList
 18084  012EEC  22F7               	addwfc	tblptrh,f,c
 18085  012EEE                     	if	1	;There are 3 active tblptr bytes
 18086  012EEE  6AF8               	clrf	tblptru,c
 18087  012EF0  0E00               	movlw	low (__mediumconst shr (0+16))
 18088  012EF2  22F8               	addwfc	tblptru,f,c
 18089  012EF4                     	endif
 18090  012EF4  0009               	tblrd		*+
 18091  012EF6  0E80               	movlw	128
 18092  012EF8  18F5               	xorwf	tablat,w,c
 18093  012EFA  0009               	tblrd		*+
 18094  012EFC  10F5               	iorwf	tablat,w,c
 18095  012EFE  A4D8               	btfss	status,2,c
 18096  012F00  D022               	goto	l87
 18097                           
 18098                           ; BSR set to: 0
 18099  012F02  0100               	movlb	0	; () banked
 18100  012F04  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18101  012F06  E11F               	bnz	l14400
 18102  012F08  0E58               	movlw	88
 18103  012F0A  0100               	movlb	0	; () banked
 18104  012F0C  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 18105  012F0E  B0D8               	btfsc	status,0,c
 18106  012F10  D01A               	goto	l87
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;LCD.c: 180: delay_ms(InitList[++i]);
 18110  012F12  0100               	movlb	0	; () banked
 18111  012F14  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 18112  012F16  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 18113  012F18  90D8               	bcf	status,0,c
 18114  012F1A  0100               	movlb	0	; () banked
 18115  012F1C  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18116  012F1E  6EF6               	movwf	tblptrl,c
 18117  012F20  0100               	movlb	0	; () banked
 18118  012F22  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18119  012F24  6EF7               	movwf	tblptrh,c
 18120  012F26  0E33               	movlw	low _InitList
 18121  012F28  26F6               	addwf	tblptrl,f,c
 18122  012F2A  0EFC               	movlw	high _InitList
 18123  012F2C  22F7               	addwfc	tblptrh,f,c
 18124  012F2E                     	if	1	;There are 3 active tblptr bytes
 18125  012F2E  6AF8               	clrf	tblptru,c
 18126  012F30  0E00               	movlw	low (__mediumconst shr (0+16))
 18127  012F32  22F8               	addwfc	tblptru,f,c
 18128  012F34                     	endif
 18129  012F34  0009               	tblrd		*+
 18130  012F36  CFF5 F0BA          	movff	tablat,delay_ms@ms
 18131  012F3A  000A               	tblrd		*-
 18132  012F3C  CFF5 F0BB          	movff	tablat,delay_ms@ms+1
 18133  012F40  EC8C  F0AB         	call	_delay_ms	;wreg free
 18134  012F44  D04B               	goto	l90
 18135  012F46                     l87:
 18136  012F46                     l14400:
 18137                           
 18138                           ;LCD.c: 181: else
 18139                           ;LCD.c: 182: {
 18140                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 18141  012F46  90D8               	bcf	status,0,c
 18142  012F48  0100               	movlb	0	; () banked
 18143  012F4A  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18144  012F4C  6EF6               	movwf	tblptrl,c
 18145  012F4E  0100               	movlb	0	; () banked
 18146  012F50  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18147  012F52  6EF7               	movwf	tblptrh,c
 18148  012F54  0E33               	movlw	low _InitList
 18149  012F56  26F6               	addwf	tblptrl,f,c
 18150  012F58  0EFC               	movlw	high _InitList
 18151  012F5A  22F7               	addwfc	tblptrh,f,c
 18152  012F5C                     	if	1	;There are 3 active tblptr bytes
 18153  012F5C  6AF8               	clrf	tblptru,c
 18154  012F5E  0E00               	movlw	low (__mediumconst shr (0+16))
 18155  012F60  22F8               	addwfc	tblptru,f,c
 18156  012F62                     	endif
 18157  012F62  0009               	tblrd		*+
 18158  012F64  0E00               	movlw	0
 18159  012F66  5EF5               	subwf	tablat,f,c
 18160  012F68  0009               	tblrd		*+
 18161  012F6A  0E01               	movlw	1
 18162  012F6C  5AF5               	subwfb	tablat,f,c
 18163  012F6E  A0D8               	btfss	status,0,c
 18164  012F70  D020               	goto	l89
 18165                           
 18166                           ; BSR set to: 0
 18167  012F72  0E00               	movlw	0
 18168  012F74  0100               	movlb	0	; () banked
 18169  012F76  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18170  012F78  90D8               	bcf	status,0,c
 18171  012F7A  0100               	movlb	0	; () banked
 18172  012F7C  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18173  012F7E  6EF6               	movwf	tblptrl,c
 18174  012F80  0100               	movlb	0	; () banked
 18175  012F82  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18176  012F84  6EF7               	movwf	tblptrh,c
 18177  012F86  0E33               	movlw	low _InitList
 18178  012F88  26F6               	addwf	tblptrl,f,c
 18179  012F8A  0EFC               	movlw	high _InitList
 18180  012F8C  22F7               	addwfc	tblptrh,f,c
 18181  012F8E                     	if	1	;There are 3 active tblptr bytes
 18182  012F8E  6AF8               	clrf	tblptru,c
 18183  012F90  0E00               	movlw	low (__mediumconst shr (0+16))
 18184  012F92  22F8               	addwfc	tblptru,f,c
 18185  012F94                     	endif
 18186  012F94  0009               	tblrd		*+
 18187  012F96  CFF5 F0EF          	movff	tablat,??_LCD_Init
 18188  012F9A  0009               	tblrd		*+
 18189  012F9C  CFF5 F0F0          	movff	tablat,??_LCD_Init+1
 18190  012FA0  C0F0  F0EF         	movff	??_LCD_Init+1,??_LCD_Init
 18191  012FA4  0100               	movlb	0	; () banked
 18192  012FA6  6BF0               	clrf	(??_LCD_Init+1)& (0+255),b
 18193  012FA8  0100               	movlb	0	; () banked
 18194  012FAA  51EF               	movf	??_LCD_Init& (0+255),w,b
 18195  012FAC  ECE8  F0B1         	call	_LCD_Write
 18196  012FB0  D015               	goto	l90
 18197  012FB2                     l89:
 18198                           
 18199                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 18200  012FB2  0E01               	movlw	1
 18201  012FB4  0100               	movlb	0	; () banked
 18202  012FB6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18203  012FB8  90D8               	bcf	status,0,c
 18204  012FBA  0100               	movlb	0	; () banked
 18205  012FBC  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18206  012FBE  6EF6               	movwf	tblptrl,c
 18207  012FC0  0100               	movlb	0	; () banked
 18208  012FC2  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18209  012FC4  6EF7               	movwf	tblptrh,c
 18210  012FC6  0E33               	movlw	low _InitList
 18211  012FC8  26F6               	addwf	tblptrl,f,c
 18212  012FCA  0EFC               	movlw	high _InitList
 18213  012FCC  22F7               	addwfc	tblptrh,f,c
 18214  012FCE                     	if	1	;There are 3 active tblptr bytes
 18215  012FCE  6AF8               	clrf	tblptru,c
 18216  012FD0  0E00               	movlw	low (__mediumconst shr (0+16))
 18217  012FD2  22F8               	addwfc	tblptru,f,c
 18218  012FD4                     	endif
 18219  012FD4  0008               	tblrd		*
 18220  012FD6  50F5               	movf	tablat,w,c
 18221  012FD8  ECE8  F0B1         	call	_LCD_Write
 18222  012FDC                     l90:
 18223  012FDC  0100               	movlb	0	; () banked
 18224  012FDE  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 18225  012FE0  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 18226                           
 18227                           ; BSR set to: 0
 18228  012FE2  0100               	movlb	0	; () banked
 18229  012FE4  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18230  012FE6  E101               	bnz	l14410
 18231  012FE8  D770               	goto	L12
 18232  012FEA                     u11250:
 18233  012FEA                     l14410:
 18234                           
 18235                           ; BSR set to: 0
 18236                           ;LCD.c: 185: }
 18237                           ;LCD.c: 186: }
 18238                           ;LCD.c: 187: delay_ms(100);
 18239  012FEA  0E00               	movlw	0
 18240  012FEC  0100               	movlb	0	; () banked
 18241  012FEE  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18242  012FF0  0E64               	movlw	100
 18243  012FF2  6FBA               	movwf	delay_ms@ms& (0+255),b
 18244  012FF4  EC8C  F0AB         	call	_delay_ms	;wreg free
 18245                           
 18246                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 18247  012FF8  0E00               	movlw	0
 18248  012FFA  0100               	movlb	0	; () banked
 18249  012FFC  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18250  012FFE  0E29               	movlw	41
 18251  013000  ECE8  F0B1         	call	_LCD_Write
 18252                           
 18253                           ;LCD.c: 189: Set_Rotation(1);
 18254  013004  0E01               	movlw	1
 18255  013006  EC6A  F0A6         	call	_Set_Rotation
 18256                           
 18257                           ;LCD.c: 191: delay_ms(100);
 18258  01300A  0E00               	movlw	0
 18259  01300C  0100               	movlb	0	; () banked
 18260  01300E  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18261  013010  0E64               	movlw	100
 18262  013012  6FBA               	movwf	delay_ms@ms& (0+255),b
 18263  013014  EC8C  F0AB         	call	_delay_ms	;wreg free
 18264                           
 18265                           ;LCD.c: 192: LCD_Fill(0x0000);
 18266  013018  0E00               	movlw	0
 18267  01301A  0100               	movlb	0	; () banked
 18268  01301C  6FC4               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 18269  01301E  0E00               	movlw	0
 18270  013020  6FC3               	movwf	LCD_Fill@pColour& (0+255),b
 18271  013022  EC77  F0AD         	call	_LCD_Fill	;wreg free
 18272  013026  0012               	return		;funcret
 18273  013028                     __end_of_LCD_Init:
 18274                           	opt stack 0
 18275                           tosu	equ	0xFFF
 18276                           tosh	equ	0xFFE
 18277                           tosl	equ	0xFFD
 18278                           pclath	equ	0xFFA
 18279                           tblptru	equ	0xFF8
 18280                           tblptrh	equ	0xFF7
 18281                           tblptrl	equ	0xFF6
 18282                           tablat	equ	0xFF5
 18283                           prodh	equ	0xFF4
 18284                           prodl	equ	0xFF3
 18285                           intcon	equ	0xFF2
 18286                           postinc0	equ	0xFEE
 18287                           wreg	equ	0xFE8
 18288                           indf1	equ	0xFE7
 18289                           postdec1	equ	0xFE5
 18290                           fsr1h	equ	0xFE2
 18291                           fsr1l	equ	0xFE1
 18292                           indf2	equ	0xFDF
 18293                           postinc2	equ	0xFDE
 18294                           postdec2	equ	0xFDD
 18295                           plusw2	equ	0xFDB
 18296                           fsr2h	equ	0xFDA
 18297                           fsr2l	equ	0xFD9
 18298                           status	equ	0xFD8
 18299                           
 18300 ;; *************** function _Set_Rotation *****************
 18301 ;; Defined at:
 18302 ;;		line 248 in file "Library/LCD.c"
 18303 ;; Parameters:    Size  Location     Type
 18304 ;;  m               1    wreg     unsigned char 
 18305 ;; Auto vars:     Size  Location     Type
 18306 ;;  m               1    5[BANK0 ] unsigned char 
 18307 ;;  rotation        1    6[BANK0 ] unsigned char 
 18308 ;; Return value:  Size  Location     Type
 18309 ;;                  1    wreg      void 
 18310 ;; Registers used:
 18311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18312 ;; Tracked objects:
 18313 ;;		On entry : 0/0
 18314 ;;		On exit  : 0/0
 18315 ;;		Unchanged: 0/0
 18316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18321 ;;Total ram usage:        2 bytes
 18322 ;; Hardware stack levels used:    1
 18323 ;; Hardware stack levels required when called:    9
 18324 ;; This function calls:
 18325 ;;		_LCD_Write
 18326 ;; This function is called by:
 18327 ;;		_LCD_Init
 18328 ;; This function uses a non-reentrant model
 18329 ;;
 18330                           
 18331                           	psect	text81
 18332  014CD4                     __ptext81:
 18333                           	opt stack 0
 18334  014CD4                     _Set_Rotation:
 18335                           	opt stack 19
 18336                           
 18337                           ;incstack = 0
 18338                           ;Set_Rotation@m stored from wreg
 18339  014CD4  0100               	movlb	0	; () banked
 18340  014CD6  6FBF               	movwf	Set_Rotation@m& (0+255),b
 18341                           
 18342                           ;LCD.c: 250: UINT8 rotation = 0x00;
 18343  014CD8  0E00               	movlw	0
 18344  014CDA  0100               	movlb	0	; () banked
 18345  014CDC  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18346                           
 18347                           ; BSR set to: 0
 18348                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 18349  014CDE  0E00               	movlw	0
 18350  014CE0  0100               	movlb	0	; () banked
 18351  014CE2  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18352  014CE4  0E36               	movlw	54
 18353  014CE6  ECE8  F0B1         	call	_LCD_Write
 18354                           
 18355                           ;LCD.c: 253: rotation = (m % 4);
 18356  014CEA  0100               	movlb	0	; () banked
 18357  014CEC  51BF               	movf	Set_Rotation@m& (0+255),w,b
 18358  014CEE  0B03               	andlw	3
 18359  014CF0  0100               	movlb	0	; () banked
 18360  014CF2  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18361                           
 18362                           ;LCD.c: 255: switch(rotation)
 18363  014CF4  D02C               	goto	l117
 18364  014CF6                     
 18365                           ; BSR set to: 0
 18366                           ;LCD.c: 258: {
 18367                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 18368                           
 18369                           ; BSR set to: 0
 18370  014CF6  0E01               	movlw	1
 18371  014CF8  0100               	movlb	0	; () banked
 18372  014CFA  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18373  014CFC  0EC8               	movlw	200
 18374  014CFE  ECE8  F0B1         	call	_LCD_Write
 18375                           
 18376                           ;LCD.c: 260: w = 128;
 18377  014D02  0E80               	movlw	128
 18378  014D04  6E50               	movwf	_w,c
 18379                           
 18380                           ;LCD.c: 261: l = 128;
 18381  014D06  0E80               	movlw	128
 18382  014D08  6E4F               	movwf	_l,c
 18383                           
 18384                           ;LCD.c: 262: break;
 18385  014D0A  0012               	return	
 18386  014D0C                     
 18387                           ;LCD.c: 265: {
 18388                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 18389  014D0C  0E01               	movlw	1
 18390  014D0E  0100               	movlb	0	; () banked
 18391  014D10  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18392  014D12  0EA8               	movlw	168
 18393  014D14  ECE8  F0B1         	call	_LCD_Write
 18394                           
 18395                           ;LCD.c: 267: w = 128;
 18396  014D18  0E80               	movlw	128
 18397  014D1A  6E50               	movwf	_w,c
 18398                           
 18399                           ;LCD.c: 268: l = 128;
 18400  014D1C  0E80               	movlw	128
 18401  014D1E  6E4F               	movwf	_l,c
 18402                           
 18403                           ;LCD.c: 269: break;
 18404  014D20  0012               	return	
 18405  014D22                     
 18406                           ;LCD.c: 272: {
 18407                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 18408  014D22  0E01               	movlw	1
 18409  014D24  0100               	movlb	0	; () banked
 18410  014D26  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18411  014D28  0E08               	movlw	8
 18412  014D2A  ECE8  F0B1         	call	_LCD_Write
 18413                           
 18414                           ;LCD.c: 274: w = 128;
 18415  014D2E  0E80               	movlw	128
 18416  014D30  6E50               	movwf	_w,c
 18417                           
 18418                           ;LCD.c: 275: l = 128;
 18419  014D32  0E80               	movlw	128
 18420  014D34  6E4F               	movwf	_l,c
 18421                           
 18422                           ;LCD.c: 276: break;
 18423  014D36  0012               	return	
 18424  014D38                     
 18425                           ;LCD.c: 279: {
 18426                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 18427  014D38  0E01               	movlw	1
 18428  014D3A  0100               	movlb	0	; () banked
 18429  014D3C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18430  014D3E  0E68               	movlw	104
 18431  014D40  ECE8  F0B1         	call	_LCD_Write
 18432                           
 18433                           ;LCD.c: 281: w = 128;
 18434  014D44  0E80               	movlw	128
 18435  014D46  6E50               	movwf	_w,c
 18436                           
 18437                           ;LCD.c: 282: l = 128;
 18438  014D48  0E80               	movlw	128
 18439  014D4A  6E4F               	movwf	_l,c
 18440                           
 18441                           ;LCD.c: 284: }
 18442                           ;LCD.c: 285: }
 18443                           
 18444                           ;LCD.c: 283: break;
 18445  014D4C  0012               	return	
 18446  014D4E                     l117:
 18447  014D4E  0100               	movlb	0	; () banked
 18448  014D50  51C0               	movf	Set_Rotation@rotation& (0+255),w,b
 18449                           
 18450                           ; Switch size 1, requested type "space"
 18451                           ; Number of cases is 4, Range of values is 0 to 3
 18452                           ; switch strategies available:
 18453                           ; Name         Instructions Cycles
 18454                           ; simple_byte           13     7 (average)
 18455                           ;	Chosen strategy is simple_byte
 18456  014D52  0A00               	xorlw	0	; case 0
 18457  014D54  B4D8               	btfsc	status,2,c
 18458  014D56  D7CF               	goto	l118
 18459  014D58  0A01               	xorlw	1	; case 1
 18460  014D5A  B4D8               	btfsc	status,2,c
 18461  014D5C  D7D7               	goto	l120
 18462  014D5E  0A03               	xorlw	3	; case 2
 18463  014D60  B4D8               	btfsc	status,2,c
 18464  014D62  D7DF               	goto	l121
 18465  014D64  0A01               	xorlw	1	; case 3
 18466  014D66  A4D8               	btfss	status,2,c
 18467  014D68  0012               	return	
 18468  014D6A  D7E6               	goto	l122
 18469  014D6C                     __end_of_Set_Rotation:
 18470                           	opt stack 0
 18471                           tosu	equ	0xFFF
 18472                           tosh	equ	0xFFE
 18473                           tosl	equ	0xFFD
 18474                           pclath	equ	0xFFA
 18475                           tblptru	equ	0xFF8
 18476                           tblptrh	equ	0xFF7
 18477                           tblptrl	equ	0xFF6
 18478                           tablat	equ	0xFF5
 18479                           prodh	equ	0xFF4
 18480                           prodl	equ	0xFF3
 18481                           intcon	equ	0xFF2
 18482                           postinc0	equ	0xFEE
 18483                           wreg	equ	0xFE8
 18484                           indf1	equ	0xFE7
 18485                           postdec1	equ	0xFE5
 18486                           fsr1h	equ	0xFE2
 18487                           fsr1l	equ	0xFE1
 18488                           indf2	equ	0xFDF
 18489                           postinc2	equ	0xFDE
 18490                           postdec2	equ	0xFDD
 18491                           plusw2	equ	0xFDB
 18492                           fsr2h	equ	0xFDA
 18493                           fsr2l	equ	0xFD9
 18494                           status	equ	0xFD8
 18495                           
 18496 ;; *************** function _LCD_Fill *****************
 18497 ;; Defined at:
 18498 ;;		line 287 in file "Library/LCD.c"
 18499 ;; Parameters:    Size  Location     Type
 18500 ;;  pColour         2    9[BANK0 ] unsigned short 
 18501 ;; Auto vars:     Size  Location     Type
 18502 ;;  j               1   12[BANK0 ] unsigned char 
 18503 ;;  i               1   11[BANK0 ] unsigned char 
 18504 ;; Return value:  Size  Location     Type
 18505 ;;                  1    wreg      void 
 18506 ;; Registers used:
 18507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18508 ;; Tracked objects:
 18509 ;;		On entry : 0/0
 18510 ;;		On exit  : 0/0
 18511 ;;		Unchanged: 0/0
 18512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18513 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18517 ;;Total ram usage:        4 bytes
 18518 ;; Hardware stack levels used:    1
 18519 ;; Hardware stack levels required when called:   10
 18520 ;; This function calls:
 18521 ;;		_LCD_Word_Write
 18522 ;;		_Set_Addr_Window
 18523 ;; This function is called by:
 18524 ;;		_LCD_Init
 18525 ;; This function uses a non-reentrant model
 18526 ;;
 18527                           
 18528                           	psect	text82
 18529  015AEE                     __ptext82:
 18530                           	opt stack 0
 18531  015AEE                     _LCD_Fill:
 18532                           	opt stack 18
 18533                           
 18534                           ;LCD.c: 296: UINT8 i = 0x00;
 18535                           
 18536                           ;incstack = 0
 18537  015AEE  0E00               	movlw	0
 18538  015AF0  0100               	movlb	0	; () banked
 18539  015AF2  6FC5               	movwf	LCD_Fill@i& (0+255),b
 18540                           
 18541                           ;LCD.c: 297: UINT8 j = 0x00;
 18542  015AF4  0E00               	movlw	0
 18543  015AF6  0100               	movlb	0	; () banked
 18544  015AF8  6FC6               	movwf	LCD_Fill@j& (0+255),b
 18545                           
 18546                           ; BSR set to: 0
 18547                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 18548  015AFA  0E00               	movlw	0
 18549  015AFC  0100               	movlb	0	; () banked
 18550  015AFE  6FBF               	movwf	Set_Addr_Window@ys& (0+255),b
 18551  015B00  0450               	decf	_w,w,c
 18552  015B02  0100               	movlb	0	; () banked
 18553  015B04  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 18554  015B06  044F               	decf	_l,w,c
 18555  015B08  0100               	movlb	0	; () banked
 18556  015B0A  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 18557  015B0C  0E00               	movlw	0
 18558  015B0E  EC83  F0A3         	call	_Set_Addr_Window
 18559                           
 18560                           ;LCD.c: 299: for (j = l; j > 0; j--)
 18561  015B12  C04F  F0C6         	movff	_l,LCD_Fill@j
 18562  015B16                     l13980:
 18563  015B16  0100               	movlb	0	; () banked
 18564  015B18  51C6               	movf	LCD_Fill@j& (0+255),w,b
 18565  015B1A  0100               	movlb	0	; () banked
 18566  015B1C  B4D8               	btfsc	status,2,c
 18567  015B1E  0012               	return	
 18568                           
 18569                           ; BSR set to: 0
 18570                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18571                           
 18572                           ; BSR set to: 0
 18573  015B20  C050  F0C5         	movff	_w,LCD_Fill@i
 18574  015B24                     l13984:
 18575                           
 18576                           ; BSR set to: 0
 18577  015B24  0100               	movlb	0	; () banked
 18578  015B26  51C5               	movf	LCD_Fill@i& (0+255),w,b
 18579  015B28  0100               	movlb	0	; () banked
 18580  015B2A  B4D8               	btfsc	status,2,c
 18581  015B2C  D009               	goto	u10710
 18582                           
 18583                           ; BSR set to: 0
 18584                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18585                           
 18586                           ; BSR set to: 0
 18587                           
 18588                           ; BSR set to: 0
 18589  015B2E  C0C3  F0BF         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18590  015B32  C0C4  F0C0         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18591  015B36  EC49  F0B2         	call	_LCD_Word_Write	;wreg free
 18592  015B3A  0100               	movlb	0	; () banked
 18593  015B3C  07C5               	decf	LCD_Fill@i& (0+255),f,b
 18594  015B3E  D7F2               	goto	l13984
 18595  015B40                     u10710:
 18596                           
 18597                           ; BSR set to: 0
 18598                           
 18599                           ; BSR set to: 0
 18600  015B40  0100               	movlb	0	; () banked
 18601  015B42  07C6               	decf	LCD_Fill@j& (0+255),f,b
 18602  015B44  D7E8               	goto	l13980
 18603  015B46                     __end_of_LCD_Fill:
 18604                           	opt stack 0
 18605                           tosu	equ	0xFFF
 18606                           tosh	equ	0xFFE
 18607                           tosl	equ	0xFFD
 18608                           pclath	equ	0xFFA
 18609                           tblptru	equ	0xFF8
 18610                           tblptrh	equ	0xFF7
 18611                           tblptrl	equ	0xFF6
 18612                           tablat	equ	0xFF5
 18613                           prodh	equ	0xFF4
 18614                           prodl	equ	0xFF3
 18615                           intcon	equ	0xFF2
 18616                           postinc0	equ	0xFEE
 18617                           wreg	equ	0xFE8
 18618                           indf1	equ	0xFE7
 18619                           postdec1	equ	0xFE5
 18620                           fsr1h	equ	0xFE2
 18621                           fsr1l	equ	0xFE1
 18622                           indf2	equ	0xFDF
 18623                           postinc2	equ	0xFDE
 18624                           postdec2	equ	0xFDD
 18625                           plusw2	equ	0xFDB
 18626                           fsr2h	equ	0xFDA
 18627                           fsr2l	equ	0xFD9
 18628                           status	equ	0xFD8
 18629                           
 18630 ;; *************** function _Set_Addr_Window *****************
 18631 ;; Defined at:
 18632 ;;		line 214 in file "Library/LCD.c"
 18633 ;; Parameters:    Size  Location     Type
 18634 ;;  xs              1    wreg     unsigned char 
 18635 ;;  ys              1    5[BANK0 ] unsigned char 
 18636 ;;  xe              1    6[BANK0 ] unsigned char 
 18637 ;;  ye              1    7[BANK0 ] unsigned char 
 18638 ;; Auto vars:     Size  Location     Type
 18639 ;;  xs              1    8[BANK0 ] unsigned char 
 18640 ;; Return value:  Size  Location     Type
 18641 ;;                  1    wreg      void 
 18642 ;; Registers used:
 18643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18644 ;; Tracked objects:
 18645 ;;		On entry : 0/0
 18646 ;;		On exit  : 0/0
 18647 ;;		Unchanged: 0/0
 18648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18649 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18652 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18653 ;;Total ram usage:        4 bytes
 18654 ;; Hardware stack levels used:    1
 18655 ;; Hardware stack levels required when called:    9
 18656 ;; This function calls:
 18657 ;;		_LCD_Write
 18658 ;; This function is called by:
 18659 ;;		_LCD_Fill
 18660 ;;		_LCD_FillRectangle
 18661 ;;		_LCD_DrawField
 18662 ;;		_RAM_Address_Set
 18663 ;;		_LCD_DrawPixel
 18664 ;; This function uses a non-reentrant model
 18665 ;;
 18666                           
 18667                           	psect	text83
 18668  014706                     __ptext83:
 18669                           	opt stack 0
 18670  014706                     _Set_Addr_Window:
 18671                           	opt stack 17
 18672                           
 18673                           ; BSR set to: 0
 18674                           ;incstack = 0
 18675                           ;Set_Addr_Window@xs stored from wreg
 18676  014706  0100               	movlb	0	; () banked
 18677  014708  6FC2               	movwf	Set_Addr_Window@xs& (0+255),b
 18678                           
 18679                           ;LCD.c: 216: ys+=2;
 18680  01470A  0E02               	movlw	2
 18681  01470C  0100               	movlb	0	; () banked
 18682  01470E  27BF               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18683                           
 18684                           ;LCD.c: 217: ye+=2;
 18685  014710  0E02               	movlw	2
 18686  014712  0100               	movlb	0	; () banked
 18687  014714  27C1               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18688                           
 18689                           ;LCD.c: 218: xs+=3;
 18690  014716  0E03               	movlw	3
 18691  014718  0100               	movlb	0	; () banked
 18692  01471A  27C2               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18693                           
 18694                           ;LCD.c: 219: xe+=3;
 18695  01471C  0E03               	movlw	3
 18696  01471E  0100               	movlb	0	; () banked
 18697  014720  27C0               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18698                           
 18699                           ; BSR set to: 0
 18700                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18701  014722  0E00               	movlw	0
 18702  014724  0100               	movlb	0	; () banked
 18703  014726  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18704  014728  0E2A               	movlw	42
 18705  01472A  ECE8  F0B1         	call	_LCD_Write
 18706                           
 18707                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18708  01472E  0E01               	movlw	1
 18709  014730  0100               	movlb	0	; () banked
 18710  014732  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18711  014734  0E00               	movlw	0
 18712  014736  ECE8  F0B1         	call	_LCD_Write
 18713                           
 18714                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18715  01473A  0E01               	movlw	1
 18716  01473C  0100               	movlb	0	; () banked
 18717  01473E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18718  014740  0100               	movlb	0	; () banked
 18719  014742  51C2               	movf	Set_Addr_Window@xs& (0+255),w,b
 18720  014744  ECE8  F0B1         	call	_LCD_Write
 18721                           
 18722                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18723  014748  0E01               	movlw	1
 18724  01474A  0100               	movlb	0	; () banked
 18725  01474C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18726  01474E  0E00               	movlw	0
 18727  014750  ECE8  F0B1         	call	_LCD_Write
 18728                           
 18729                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18730  014754  0E01               	movlw	1
 18731  014756  0100               	movlb	0	; () banked
 18732  014758  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18733  01475A  0100               	movlb	0	; () banked
 18734  01475C  51C0               	movf	Set_Addr_Window@xe& (0+255),w,b
 18735  01475E  ECE8  F0B1         	call	_LCD_Write
 18736                           
 18737                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18738  014762  0E00               	movlw	0
 18739  014764  0100               	movlb	0	; () banked
 18740  014766  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18741  014768  0E2B               	movlw	43
 18742  01476A  ECE8  F0B1         	call	_LCD_Write
 18743                           
 18744                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18745  01476E  0E01               	movlw	1
 18746  014770  0100               	movlb	0	; () banked
 18747  014772  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18748  014774  0E00               	movlw	0
 18749  014776  ECE8  F0B1         	call	_LCD_Write
 18750                           
 18751                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18752  01477A  0E01               	movlw	1
 18753  01477C  0100               	movlb	0	; () banked
 18754  01477E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18755  014780  0100               	movlb	0	; () banked
 18756  014782  51BF               	movf	Set_Addr_Window@ys& (0+255),w,b
 18757  014784  ECE8  F0B1         	call	_LCD_Write
 18758                           
 18759                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18760  014788  0E01               	movlw	1
 18761  01478A  0100               	movlb	0	; () banked
 18762  01478C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18763  01478E  0E00               	movlw	0
 18764  014790  ECE8  F0B1         	call	_LCD_Write
 18765                           
 18766                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18767  014794  0E01               	movlw	1
 18768  014796  0100               	movlb	0	; () banked
 18769  014798  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18770  01479A  0100               	movlb	0	; () banked
 18771  01479C  51C1               	movf	Set_Addr_Window@ye& (0+255),w,b
 18772  01479E  ECE8  F0B1         	call	_LCD_Write
 18773                           
 18774                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18775  0147A2  0E00               	movlw	0
 18776  0147A4  0100               	movlb	0	; () banked
 18777  0147A6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18778  0147A8  0E2C               	movlw	44
 18779  0147AA  ECE8  F0B1         	call	_LCD_Write
 18780  0147AE  0012               	return		;funcret
 18781  0147B0                     __end_of_Set_Addr_Window:
 18782                           	opt stack 0
 18783                           tosu	equ	0xFFF
 18784                           tosh	equ	0xFFE
 18785                           tosl	equ	0xFFD
 18786                           pclath	equ	0xFFA
 18787                           tblptru	equ	0xFF8
 18788                           tblptrh	equ	0xFF7
 18789                           tblptrl	equ	0xFF6
 18790                           tablat	equ	0xFF5
 18791                           prodh	equ	0xFF4
 18792                           prodl	equ	0xFF3
 18793                           intcon	equ	0xFF2
 18794                           postinc0	equ	0xFEE
 18795                           wreg	equ	0xFE8
 18796                           indf1	equ	0xFE7
 18797                           postdec1	equ	0xFE5
 18798                           fsr1h	equ	0xFE2
 18799                           fsr1l	equ	0xFE1
 18800                           indf2	equ	0xFDF
 18801                           postinc2	equ	0xFDE
 18802                           postdec2	equ	0xFDD
 18803                           plusw2	equ	0xFDB
 18804                           fsr2h	equ	0xFDA
 18805                           fsr2l	equ	0xFD9
 18806                           status	equ	0xFD8
 18807                           
 18808 ;; *************** function _LCD_Word_Write *****************
 18809 ;; Defined at:
 18810 ;;		line 198 in file "Library/LCD.c"
 18811 ;; Parameters:    Size  Location     Type
 18812 ;;  value           2    5[BANK0 ] unsigned short 
 18813 ;; Auto vars:     Size  Location     Type
 18814 ;;		None
 18815 ;; Return value:  Size  Location     Type
 18816 ;;                  1    wreg      void 
 18817 ;; Registers used:
 18818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18819 ;; Tracked objects:
 18820 ;;		On entry : 0/0
 18821 ;;		On exit  : 0/0
 18822 ;;		Unchanged: 0/0
 18823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18824 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18828 ;;Total ram usage:        2 bytes
 18829 ;; Hardware stack levels used:    1
 18830 ;; Hardware stack levels required when called:    9
 18831 ;; This function calls:
 18832 ;;		_LCD_Write
 18833 ;; This function is called by:
 18834 ;;		_LCD_Fill
 18835 ;;		_LCD_FillRectangle
 18836 ;;		_LCD_DrawField
 18837 ;;		_LCD_DrawPixel
 18838 ;; This function uses a non-reentrant model
 18839 ;;
 18840                           
 18841                           	psect	text84
 18842  016492                     __ptext84:
 18843                           	opt stack 0
 18844  016492                     _LCD_Word_Write:
 18845                           	opt stack 17
 18846                           
 18847                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18848                           
 18849                           ;incstack = 0
 18850  016492  0E01               	movlw	1
 18851  016494  0100               	movlb	0	; () banked
 18852  016496  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18853  016498  0100               	movlb	0	; () banked
 18854  01649A  51C0               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18855  01649C  ECE8  F0B1         	call	_LCD_Write
 18856                           
 18857                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18858  0164A0  0E01               	movlw	1
 18859  0164A2  0100               	movlb	0	; () banked
 18860  0164A4  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18861  0164A6  0100               	movlb	0	; () banked
 18862  0164A8  51BF               	movf	LCD_Word_Write@value& (0+255),w,b
 18863  0164AA  ECE8  F0B1         	call	_LCD_Write
 18864  0164AE  0012               	return		;funcret
 18865  0164B0                     __end_of_LCD_Word_Write:
 18866                           	opt stack 0
 18867                           tosu	equ	0xFFF
 18868                           tosh	equ	0xFFE
 18869                           tosl	equ	0xFFD
 18870                           pclath	equ	0xFFA
 18871                           tblptru	equ	0xFF8
 18872                           tblptrh	equ	0xFF7
 18873                           tblptrl	equ	0xFF6
 18874                           tablat	equ	0xFF5
 18875                           prodh	equ	0xFF4
 18876                           prodl	equ	0xFF3
 18877                           intcon	equ	0xFF2
 18878                           postinc0	equ	0xFEE
 18879                           wreg	equ	0xFE8
 18880                           indf1	equ	0xFE7
 18881                           postdec1	equ	0xFE5
 18882                           fsr1h	equ	0xFE2
 18883                           fsr1l	equ	0xFE1
 18884                           indf2	equ	0xFDF
 18885                           postinc2	equ	0xFDE
 18886                           postdec2	equ	0xFDD
 18887                           plusw2	equ	0xFDB
 18888                           fsr2h	equ	0xFDA
 18889                           fsr2l	equ	0xFD9
 18890                           status	equ	0xFD8
 18891                           
 18892 ;; *************** function _LCD_Write *****************
 18893 ;; Defined at:
 18894 ;;		line 67 in file "Library/LCD.c"
 18895 ;; Parameters:    Size  Location     Type
 18896 ;;  value           1    wreg     unsigned char 
 18897 ;;  mode            1    3[BANK0 ] enum E6761
 18898 ;; Auto vars:     Size  Location     Type
 18899 ;;  value           1    4[BANK0 ] unsigned char 
 18900 ;; Return value:  Size  Location     Type
 18901 ;;                  1    wreg      void 
 18902 ;; Registers used:
 18903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18904 ;; Tracked objects:
 18905 ;;		On entry : 0/0
 18906 ;;		On exit  : 0/0
 18907 ;;		Unchanged: 0/0
 18908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18909 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18912 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18913 ;;Total ram usage:        2 bytes
 18914 ;; Hardware stack levels used:    1
 18915 ;; Hardware stack levels required when called:    8
 18916 ;; This function calls:
 18917 ;;		_Mode_Set
 18918 ;;		_SPI_Send
 18919 ;; This function is called by:
 18920 ;;		_LCD_Init
 18921 ;;		_LCD_Word_Write
 18922 ;;		_Set_Addr_Window
 18923 ;;		_Set_Rotation
 18924 ;;		_LCD_WriteCMD
 18925 ;;		_LCD_WriteData
 18926 ;;		_LCD_Data_Write
 18927 ;;		_LCD_Data_Write_4k
 18928 ;;		_Invert_Display
 18929 ;; This function uses a non-reentrant model
 18930 ;;
 18931                           
 18932                           	psect	text85
 18933  0163D0                     __ptext85:
 18934                           	opt stack 0
 18935  0163D0                     _LCD_Write:
 18936                           	opt stack 17
 18937                           
 18938                           ;incstack = 0
 18939                           ;LCD_Write@value stored from wreg
 18940  0163D0  0100               	movlb	0	; () banked
 18941  0163D2  6FBE               	movwf	LCD_Write@value& (0+255),b
 18942                           
 18943                           ;LCD.c: 89: Mode_Set(mode);
 18944  0163D4  0100               	movlb	0	; () banked
 18945  0163D6  51BD               	movf	LCD_Write@mode& (0+255),w,b
 18946  0163D8  EC6B  F0B3         	call	_Mode_Set
 18947                           
 18948                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18949  0163DC  0E85               	movlw	low _SPI2
 18950  0163DE  0100               	movlb	0	; () banked
 18951  0163E0  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 18952  0163E2  0E03               	movlw	high _SPI2
 18953  0163E4  0100               	movlb	0	; () banked
 18954  0163E6  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18955  0163E8  C0BE  F0BC         	movff	LCD_Write@value,SPI_Send@pData
 18956  0163EC  ECEB  F0AA         	call	_SPI_Send	;wreg free
 18957  0163F0  0012               	return		;funcret
 18958  0163F2                     __end_of_LCD_Write:
 18959                           	opt stack 0
 18960                           tosu	equ	0xFFF
 18961                           tosh	equ	0xFFE
 18962                           tosl	equ	0xFFD
 18963                           pclath	equ	0xFFA
 18964                           tblptru	equ	0xFF8
 18965                           tblptrh	equ	0xFF7
 18966                           tblptrl	equ	0xFF6
 18967                           tablat	equ	0xFF5
 18968                           prodh	equ	0xFF4
 18969                           prodl	equ	0xFF3
 18970                           intcon	equ	0xFF2
 18971                           postinc0	equ	0xFEE
 18972                           wreg	equ	0xFE8
 18973                           indf1	equ	0xFE7
 18974                           postdec1	equ	0xFE5
 18975                           fsr1h	equ	0xFE2
 18976                           fsr1l	equ	0xFE1
 18977                           indf2	equ	0xFDF
 18978                           postinc2	equ	0xFDE
 18979                           postdec2	equ	0xFDD
 18980                           plusw2	equ	0xFDB
 18981                           fsr2h	equ	0xFDA
 18982                           fsr2l	equ	0xFD9
 18983                           status	equ	0xFD8
 18984                           
 18985 ;; *************** function _SPI_Send *****************
 18986 ;; Defined at:
 18987 ;;		line 226 in file "Library/SPI.c"
 18988 ;; Parameters:    Size  Location     Type
 18989 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18990 ;;		 -> SPI1(11), SPI2(11), 
 18991 ;;  pData           1    2[BANK0 ] unsigned char 
 18992 ;; Auto vars:     Size  Location     Type
 18993 ;;		None
 18994 ;; Return value:  Size  Location     Type
 18995 ;;                  1    wreg      unsigned char 
 18996 ;; Registers used:
 18997 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18998 ;; Tracked objects:
 18999 ;;		On entry : 0/0
 19000 ;;		On exit  : 0/0
 19001 ;;		Unchanged: 0/0
 19002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19003 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19006 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19007 ;;Total ram usage:        3 bytes
 19008 ;; Hardware stack levels used:    1
 19009 ;; Hardware stack levels required when called:    7
 19010 ;; This function calls:
 19011 ;;		Nothing
 19012 ;; This function is called by:
 19013 ;;		_LCD_Write
 19014 ;;		_OutSeg
 19015 ;; This function uses a non-reentrant model
 19016 ;;
 19017                           
 19018                           	psect	text86
 19019  0155D6                     __ptext86:
 19020                           	opt stack 0
 19021  0155D6                     _SPI_Send:
 19022                           	opt stack 19
 19023                           
 19024                           ;SPI.c: 253: switch (pInput->mChannel)
 19025                           
 19026                           ;incstack = 0
 19027  0155D6  D026               	goto	l678
 19028  0155D8                     
 19029                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 19030  0155D8  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19031  0155DC  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19032  0155E0  0100               	movlb	0	; () banked
 19033  0155E2  94DF               	bcf	indf2,2,c
 19034                           
 19035                           ; BSR set to: 0
 19036                           ;SPI.c: 257: SSP1BUF = pData;
 19037  0155E4  C0BC  FFC9         	movff	SPI_Send@pData,4041	;volatile
 19038  0155E8                     
 19039                           ; BSR set to: 0
 19040  0155E8  A0C7               	btfss	4039,0,c	;volatile
 19041  0155EA  D7FE               	goto	l681
 19042                           
 19043                           ;SPI.c: 259: pData = SSP1BUF;
 19044  0155EC  CFC9 F0BC          	movff	4041,SPI_Send@pData	;volatile
 19045                           
 19046                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 19047  0155F0  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19048  0155F4  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19049  0155F8  0100               	movlb	0	; () banked
 19050  0155FA  84DF               	bsf	indf2,2,c
 19051                           
 19052                           ; BSR set to: 0
 19053                           ;SPI.c: 261: return pData;
 19054                           ;	Return value of _SPI_Send is never used
 19055  0155FC  0012               	return	
 19056  0155FE                     
 19057                           ; BSR set to: 0
 19058                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 19059                           
 19060                           ; BSR set to: 0
 19061  0155FE  C09F  FFD9         	movff	_PortD+4,fsr2l
 19062  015602  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19063  015606  0100               	movlb	0	; () banked
 19064  015608  9EDF               	bcf	indf2,7,c
 19065                           
 19066                           ; BSR set to: 0
 19067                           ;SPI.c: 264: SSP2BUF = pData;
 19068  01560A  C0BC  FF6F         	movff	SPI_Send@pData,3951	;volatile
 19069  01560E                     
 19070                           ; BSR set to: 0
 19071  01560E  A06D               	btfss	3949,0,c	;volatile
 19072  015610  D7FE               	goto	l686
 19073                           
 19074                           ;SPI.c: 266: pData = SSP2BUF;
 19075  015612  CF6F F0BC          	movff	3951,SPI_Send@pData	;volatile
 19076                           
 19077                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 19078  015616  C09F  FFD9         	movff	_PortD+4,fsr2l
 19079  01561A  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19080  01561E  0100               	movlb	0	; () banked
 19081  015620  8EDF               	bsf	indf2,7,c
 19082                           
 19083                           ; BSR set to: 0
 19084                           ;SPI.c: 269: };
 19085                           
 19086                           ; BSR set to: 0
 19087                           ;SPI.c: 268: return pData;
 19088                           ;	Return value of _SPI_Send is never used
 19089  015622  0012               	return	
 19090  015624                     l678:
 19091                           
 19092                           ; BSR set to: 0
 19093  015624  0100               	movlb	0	; () banked
 19094  015626  EE20 F002          	lfsr	2,2
 19095  01562A  51BA               	movf	SPI_Send@pInput& (0+255),w,b
 19096  01562C  26D9               	addwf	fsr2l,f,c
 19097  01562E  51BB               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 19098  015630  22DA               	addwfc	fsr2h,f,c
 19099  015632  50DF               	movf	indf2,w,c
 19100                           
 19101                           ; Switch size 1, requested type "space"
 19102                           ; Number of cases is 2, Range of values is 0 to 1
 19103                           ; switch strategies available:
 19104                           ; Name         Instructions Cycles
 19105                           ; simple_byte            7     4 (average)
 19106                           ;	Chosen strategy is simple_byte
 19107  015634  0A00               	xorlw	0	; case 0
 19108  015636  B4D8               	btfsc	status,2,c
 19109  015638  D7CF               	goto	l679
 19110  01563A  0A01               	xorlw	1	; case 1
 19111  01563C  A4D8               	btfss	status,2,c
 19112  01563E  0012               	return	
 19113  015640  D7DE               	goto	l684
 19114  015642                     __end_of_SPI_Send:
 19115                           	opt stack 0
 19116                           tosu	equ	0xFFF
 19117                           tosh	equ	0xFFE
 19118                           tosl	equ	0xFFD
 19119                           pclath	equ	0xFFA
 19120                           tblptru	equ	0xFF8
 19121                           tblptrh	equ	0xFF7
 19122                           tblptrl	equ	0xFF6
 19123                           tablat	equ	0xFF5
 19124                           prodh	equ	0xFF4
 19125                           prodl	equ	0xFF3
 19126                           intcon	equ	0xFF2
 19127                           postinc0	equ	0xFEE
 19128                           wreg	equ	0xFE8
 19129                           indf1	equ	0xFE7
 19130                           postdec1	equ	0xFE5
 19131                           fsr1h	equ	0xFE2
 19132                           fsr1l	equ	0xFE1
 19133                           indf2	equ	0xFDF
 19134                           postinc2	equ	0xFDE
 19135                           postdec2	equ	0xFDD
 19136                           plusw2	equ	0xFDB
 19137                           fsr2h	equ	0xFDA
 19138                           fsr2l	equ	0xFD9
 19139                           status	equ	0xFD8
 19140                           
 19141 ;; *************** function _Mode_Set *****************
 19142 ;; Defined at:
 19143 ;;		line 40 in file "Library/LCD.c"
 19144 ;; Parameters:    Size  Location     Type
 19145 ;;  pMode           1    wreg     enum E6761
 19146 ;; Auto vars:     Size  Location     Type
 19147 ;;  pMode           1    0[BANK0 ] enum E6761
 19148 ;; Return value:  Size  Location     Type
 19149 ;;                  1    wreg      void 
 19150 ;; Registers used:
 19151 ;;		wreg
 19152 ;; Tracked objects:
 19153 ;;		On entry : 0/0
 19154 ;;		On exit  : 0/0
 19155 ;;		Unchanged: 0/0
 19156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19160 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19161 ;;Total ram usage:        1 bytes
 19162 ;; Hardware stack levels used:    1
 19163 ;; Hardware stack levels required when called:    7
 19164 ;; This function calls:
 19165 ;;		Nothing
 19166 ;; This function is called by:
 19167 ;;		_LCD_Write
 19168 ;; This function uses a non-reentrant model
 19169 ;;
 19170                           
 19171                           	psect	text87
 19172  0166D6                     __ptext87:
 19173                           	opt stack 0
 19174  0166D6                     _Mode_Set:
 19175                           	opt stack 17
 19176                           
 19177                           ; BSR set to: 0
 19178                           ;incstack = 0
 19179                           ;Mode_Set@pMode stored from wreg
 19180  0166D6  0100               	movlb	0	; () banked
 19181  0166D8  6FBA               	movwf	Mode_Set@pMode& (0+255),b
 19182                           
 19183                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 19184  0166DA  0100               	movlb	0	; () banked
 19185  0166DC  B1BA               	btfsc	Mode_Set@pMode& (0+255),0,b
 19186  0166DE  D002               	bra	u8985
 19187  0166E0  9E85               	bcf	3973,7,c	;volatile
 19188  0166E2  D001               	bra	u8986
 19189  0166E4                     u8985:
 19190  0166E4  8E85               	bsf	3973,7,c	;volatile
 19191  0166E6                     u8986:
 19192  0166E6  0012               	return		;funcret
 19193  0166E8                     __end_of_Mode_Set:
 19194                           	opt stack 0
 19195                           tosu	equ	0xFFF
 19196                           tosh	equ	0xFFE
 19197                           tosl	equ	0xFFD
 19198                           pclath	equ	0xFFA
 19199                           tblptru	equ	0xFF8
 19200                           tblptrh	equ	0xFF7
 19201                           tblptrl	equ	0xFF6
 19202                           tablat	equ	0xFF5
 19203                           prodh	equ	0xFF4
 19204                           prodl	equ	0xFF3
 19205                           intcon	equ	0xFF2
 19206                           postinc0	equ	0xFEE
 19207                           wreg	equ	0xFE8
 19208                           indf1	equ	0xFE7
 19209                           postdec1	equ	0xFE5
 19210                           fsr1h	equ	0xFE2
 19211                           fsr1l	equ	0xFE1
 19212                           indf2	equ	0xFDF
 19213                           postinc2	equ	0xFDE
 19214                           postdec2	equ	0xFDD
 19215                           plusw2	equ	0xFDB
 19216                           fsr2h	equ	0xFDA
 19217                           fsr2l	equ	0xFD9
 19218                           status	equ	0xFD8
 19219                           
 19220 ;; *************** function _Configure_GPIOs *****************
 19221 ;; Defined at:
 19222 ;;		line 46 in file "Library/LCD.c"
 19223 ;; Parameters:    Size  Location     Type
 19224 ;;		None
 19225 ;; Auto vars:     Size  Location     Type
 19226 ;;		None
 19227 ;; Return value:  Size  Location     Type
 19228 ;;                  1    wreg      void 
 19229 ;; Registers used:
 19230 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19231 ;; Tracked objects:
 19232 ;;		On entry : 0/0
 19233 ;;		On exit  : 0/0
 19234 ;;		Unchanged: 0/0
 19235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19240 ;;Total ram usage:        0 bytes
 19241 ;; Hardware stack levels used:    1
 19242 ;; Hardware stack levels required when called:   14
 19243 ;; This function calls:
 19244 ;;		_LCD_Reset
 19245 ;;		_Port_SetPinType
 19246 ;;		_SPI_Init
 19247 ;;		_SPI_MaxSpeed
 19248 ;; This function is called by:
 19249 ;;		_LCD_Init
 19250 ;; This function uses a non-reentrant model
 19251 ;;
 19252                           
 19253                           	psect	text88
 19254  015566                     __ptext88:
 19255                           	opt stack 0
 19256  015566                     _Configure_GPIOs:
 19257                           	opt stack 14
 19258                           
 19259                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 19260                           
 19261                           ;incstack = 0
 19262  015566  0EC2               	movlw	low _PortF
 19263  015568  0100               	movlb	0	; () banked
 19264  01556A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19265  01556C  0E03               	movlw	high _PortF
 19266  01556E  0100               	movlb	0	; () banked
 19267  015570  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19268  015572  0E07               	movlw	7
 19269  015574  0100               	movlb	0	; () banked
 19270  015576  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19271  015578  0E03               	movlw	3
 19272  01557A  0100               	movlb	0	; () banked
 19273  01557C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19274  01557E  EC60  F093         	call	_Port_SetPinType	;wreg free
 19275                           
 19276                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 19277  015582  0EC2               	movlw	low _PortF
 19278  015584  0100               	movlb	0	; () banked
 19279  015586  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19280  015588  0E03               	movlw	high _PortF
 19281  01558A  0100               	movlb	0	; () banked
 19282  01558C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19283  01558E  0E06               	movlw	6
 19284  015590  0100               	movlb	0	; () banked
 19285  015592  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19286  015594  0E03               	movlw	3
 19287  015596  0100               	movlb	0	; () banked
 19288  015598  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19289  01559A  EC60  F093         	call	_Port_SetPinType	;wreg free
 19290                           
 19291                           ;LCD.c: 55: LCD_Reset();
 19292  01559E  ECF4  F0AD         	call	_LCD_Reset	;wreg free
 19293                           
 19294                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 19295  0155A2  0EC0               	movlw	192
 19296  0155A4  0100               	movlb	0	; () banked
 19297  0155A6  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 19298  0155A8  0EC6               	movlw	198
 19299  0155AA  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19300  0155AC  0E2D               	movlw	45
 19301  0155AE  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19302  0155B0  0E00               	movlw	0
 19303  0155B2  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19304  0155B4  0E01               	movlw	1
 19305  0155B6  0100               	movlb	0	; () banked
 19306  0155B8  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 19307  0155BA  0E01               	movlw	1
 19308  0155BC  0100               	movlb	0	; () banked
 19309  0155BE  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 19310  0155C0  EC53  F082         	call	_SPI_Init	;wreg free
 19311                           
 19312                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 19313  0155C4  0E85               	movlw	low _SPI2
 19314  0155C6  0100               	movlb	0	; () banked
 19315  0155C8  6FC9               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 19316  0155CA  0E03               	movlw	high _SPI2
 19317  0155CC  0100               	movlb	0	; () banked
 19318  0155CE  6FCA               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 19319  0155D0  EC05  F0AA         	call	_SPI_MaxSpeed	;wreg free
 19320  0155D4  0012               	return		;funcret
 19321  0155D6                     __end_of_Configure_GPIOs:
 19322                           	opt stack 0
 19323                           tosu	equ	0xFFF
 19324                           tosh	equ	0xFFE
 19325                           tosl	equ	0xFFD
 19326                           pclath	equ	0xFFA
 19327                           tblptru	equ	0xFF8
 19328                           tblptrh	equ	0xFF7
 19329                           tblptrl	equ	0xFF6
 19330                           tablat	equ	0xFF5
 19331                           prodh	equ	0xFF4
 19332                           prodl	equ	0xFF3
 19333                           intcon	equ	0xFF2
 19334                           postinc0	equ	0xFEE
 19335                           wreg	equ	0xFE8
 19336                           indf1	equ	0xFE7
 19337                           postdec1	equ	0xFE5
 19338                           fsr1h	equ	0xFE2
 19339                           fsr1l	equ	0xFE1
 19340                           indf2	equ	0xFDF
 19341                           postinc2	equ	0xFDE
 19342                           postdec2	equ	0xFDD
 19343                           plusw2	equ	0xFDB
 19344                           fsr2h	equ	0xFDA
 19345                           fsr2l	equ	0xFD9
 19346                           status	equ	0xFD8
 19347                           
 19348 ;; *************** function _SPI_MaxSpeed *****************
 19349 ;; Defined at:
 19350 ;;		line 201 in file "Library/SPI.c"
 19351 ;; Parameters:    Size  Location     Type
 19352 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19353 ;;		 -> SPI2(11), 
 19354 ;; Auto vars:     Size  Location     Type
 19355 ;;		None
 19356 ;; Return value:  Size  Location     Type
 19357 ;;                  1    wreg      void 
 19358 ;; Registers used:
 19359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19360 ;; Tracked objects:
 19361 ;;		On entry : 0/0
 19362 ;;		On exit  : 0/0
 19363 ;;		Unchanged: 0/0
 19364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19365 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19369 ;;Total ram usage:        2 bytes
 19370 ;; Hardware stack levels used:    1
 19371 ;; Hardware stack levels required when called:    9
 19372 ;; This function calls:
 19373 ;;		_Byte_SetBit
 19374 ;;		_Byte_SetQuad
 19375 ;; This function is called by:
 19376 ;;		_Configure_GPIOs
 19377 ;; This function uses a non-reentrant model
 19378 ;;
 19379                           
 19380                           	psect	text89
 19381  01540A                     __ptext89:
 19382                           	opt stack 0
 19383  01540A                     _SPI_MaxSpeed:
 19384                           	opt stack 18
 19385                           
 19386                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19387                           
 19388                           ;incstack = 0
 19389  01540A  0100               	movlb	0	; () banked
 19390  01540C  EE20 F006          	lfsr	2,6
 19391  015410  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19392  015412  26D9               	addwf	fsr2l,f,c
 19393  015414  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19394  015416  22DA               	addwfc	fsr2h,f,c
 19395  015418  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19396  01541C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19397  015420  0E05               	movlw	5
 19398  015422  0100               	movlb	0	; () banked
 19399  015424  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19400  015426  0E00               	movlw	0
 19401  015428  0100               	movlb	0	; () banked
 19402  01542A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19403  01542C  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 19404                           
 19405                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 19406  015430  0100               	movlb	0	; () banked
 19407  015432  EE20 F006          	lfsr	2,6
 19408  015436  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19409  015438  26D9               	addwf	fsr2l,f,c
 19410  01543A  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19411  01543C  22DA               	addwfc	fsr2h,f,c
 19412  01543E  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 19413  015442  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 19414  015446  0E00               	movlw	0
 19415  015448  0100               	movlb	0	; () banked
 19416  01544A  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19417  01544C  0E00               	movlw	0
 19418  01544E  0100               	movlb	0	; () banked
 19419  015450  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 19420  015452  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 19421                           
 19422                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19423  015456  0100               	movlb	0	; () banked
 19424  015458  EE20 F006          	lfsr	2,6
 19425  01545C  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19426  01545E  26D9               	addwf	fsr2l,f,c
 19427  015460  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19428  015462  22DA               	addwfc	fsr2h,f,c
 19429  015464  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19430  015468  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19431  01546C  0E05               	movlw	5
 19432  01546E  0100               	movlb	0	; () banked
 19433  015470  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19434  015472  0E01               	movlw	1
 19435  015474  0100               	movlb	0	; () banked
 19436  015476  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19437  015478  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 19438  01547C  0012               	return		;funcret
 19439  01547E                     __end_of_SPI_MaxSpeed:
 19440                           	opt stack 0
 19441                           tosu	equ	0xFFF
 19442                           tosh	equ	0xFFE
 19443                           tosl	equ	0xFFD
 19444                           pclath	equ	0xFFA
 19445                           tblptru	equ	0xFF8
 19446                           tblptrh	equ	0xFF7
 19447                           tblptrl	equ	0xFF6
 19448                           tablat	equ	0xFF5
 19449                           prodh	equ	0xFF4
 19450                           prodl	equ	0xFF3
 19451                           intcon	equ	0xFF2
 19452                           postinc0	equ	0xFEE
 19453                           wreg	equ	0xFE8
 19454                           indf1	equ	0xFE7
 19455                           postdec1	equ	0xFE5
 19456                           fsr1h	equ	0xFE2
 19457                           fsr1l	equ	0xFE1
 19458                           indf2	equ	0xFDF
 19459                           postinc2	equ	0xFDE
 19460                           postdec2	equ	0xFDD
 19461                           plusw2	equ	0xFDB
 19462                           fsr2h	equ	0xFDA
 19463                           fsr2l	equ	0xFD9
 19464                           status	equ	0xFD8
 19465                           
 19466 ;; *************** function _LCD_Reset *****************
 19467 ;; Defined at:
 19468 ;;		line 95 in file "Library/LCD.c"
 19469 ;; Parameters:    Size  Location     Type
 19470 ;;		None
 19471 ;; Auto vars:     Size  Location     Type
 19472 ;;		None
 19473 ;; Return value:  Size  Location     Type
 19474 ;;                  1    wreg      void 
 19475 ;; Registers used:
 19476 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19477 ;; Tracked objects:
 19478 ;;		On entry : 0/0
 19479 ;;		On exit  : 0/0
 19480 ;;		Unchanged: 0/0
 19481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19486 ;;Total ram usage:        0 bytes
 19487 ;; Hardware stack levels used:    1
 19488 ;; Hardware stack levels required when called:   13
 19489 ;; This function calls:
 19490 ;;		_LED_Toggle
 19491 ;;		_Reset_High
 19492 ;;		_Reset_Low
 19493 ;;		_delay_ms
 19494 ;; This function is called by:
 19495 ;;		_Configure_GPIOs
 19496 ;; This function uses a non-reentrant model
 19497 ;;
 19498                           
 19499                           	psect	text90
 19500  015BE8                     __ptext90:
 19501                           	opt stack 0
 19502  015BE8                     _LCD_Reset:
 19503                           	opt stack 14
 19504                           
 19505                           ;LCD.c: 97: Reset_High();
 19506                           
 19507                           ;incstack = 0
 19508  015BE8  EC67  F0B2         	call	_Reset_High	;wreg free
 19509                           
 19510                           ;LCD.c: 98: LED_Toggle(eLED2);
 19511  015BEC  0E01               	movlw	1
 19512  015BEE  ECD4  F0AE         	call	_LED_Toggle
 19513                           
 19514                           ;LCD.c: 99: delay_ms(0x80);
 19515  015BF2  0E00               	movlw	0
 19516  015BF4  0100               	movlb	0	; () banked
 19517  015BF6  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19518  015BF8  0E80               	movlw	128
 19519  015BFA  6FBA               	movwf	delay_ms@ms& (0+255),b
 19520  015BFC  EC8C  F0AB         	call	_delay_ms	;wreg free
 19521                           
 19522                           ;LCD.c: 100: LED_Toggle(eLED2);
 19523  015C00  0E01               	movlw	1
 19524  015C02  ECD4  F0AE         	call	_LED_Toggle
 19525                           
 19526                           ;LCD.c: 101: Reset_Low();
 19527  015C06  EC58  F0B2         	call	_Reset_Low	;wreg free
 19528                           
 19529                           ;LCD.c: 102: delay_ms(0x80);
 19530  015C0A  0E00               	movlw	0
 19531  015C0C  0100               	movlb	0	; () banked
 19532  015C0E  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19533  015C10  0E80               	movlw	128
 19534  015C12  6FBA               	movwf	delay_ms@ms& (0+255),b
 19535  015C14  EC8C  F0AB         	call	_delay_ms	;wreg free
 19536                           
 19537                           ;LCD.c: 103: LED_Toggle(eLED2);
 19538  015C18  0E01               	movlw	1
 19539  015C1A  ECD4  F0AE         	call	_LED_Toggle
 19540                           
 19541                           ;LCD.c: 104: Reset_High();
 19542  015C1E  EC67  F0B2         	call	_Reset_High	;wreg free
 19543                           
 19544                           ;LCD.c: 105: delay_ms(0x80);
 19545  015C22  0E00               	movlw	0
 19546  015C24  0100               	movlb	0	; () banked
 19547  015C26  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19548  015C28  0E80               	movlw	128
 19549  015C2A  6FBA               	movwf	delay_ms@ms& (0+255),b
 19550  015C2C  EC8C  F0AB         	call	_delay_ms	;wreg free
 19551                           
 19552                           ;LCD.c: 106: LED_Toggle(eLED2);
 19553  015C30  0E01               	movlw	1
 19554  015C32  ECD4  F0AE         	call	_LED_Toggle
 19555  015C36  0012               	return		;funcret
 19556  015C38                     __end_of_LCD_Reset:
 19557                           	opt stack 0
 19558                           tosu	equ	0xFFF
 19559                           tosh	equ	0xFFE
 19560                           tosl	equ	0xFFD
 19561                           pclath	equ	0xFFA
 19562                           tblptru	equ	0xFF8
 19563                           tblptrh	equ	0xFF7
 19564                           tblptrl	equ	0xFF6
 19565                           tablat	equ	0xFF5
 19566                           prodh	equ	0xFF4
 19567                           prodl	equ	0xFF3
 19568                           intcon	equ	0xFF2
 19569                           postinc0	equ	0xFEE
 19570                           wreg	equ	0xFE8
 19571                           indf1	equ	0xFE7
 19572                           postdec1	equ	0xFE5
 19573                           fsr1h	equ	0xFE2
 19574                           fsr1l	equ	0xFE1
 19575                           indf2	equ	0xFDF
 19576                           postinc2	equ	0xFDE
 19577                           postdec2	equ	0xFDD
 19578                           plusw2	equ	0xFDB
 19579                           fsr2h	equ	0xFDA
 19580                           fsr2l	equ	0xFD9
 19581                           status	equ	0xFD8
 19582                           
 19583 ;; *************** function _delay_ms *****************
 19584 ;; Defined at:
 19585 ;;		line 240 in file "Library/Types.c"
 19586 ;; Parameters:    Size  Location     Type
 19587 ;;  ms              2    0[BANK0 ] unsigned short 
 19588 ;; Auto vars:     Size  Location     Type
 19589 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19590 ;; Return value:  Size  Location     Type
 19591 ;;                  1    wreg      void 
 19592 ;; Registers used:
 19593 ;;		wreg, status,2, status,0
 19594 ;; Tracked objects:
 19595 ;;		On entry : 0/0
 19596 ;;		On exit  : 0/0
 19597 ;;		Unchanged: 0/0
 19598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19599 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19600 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19602 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19603 ;;Total ram usage:        6 bytes
 19604 ;; Hardware stack levels used:    1
 19605 ;; Hardware stack levels required when called:    7
 19606 ;; This function calls:
 19607 ;;		Nothing
 19608 ;; This function is called by:
 19609 ;;		_LCD_Reset
 19610 ;;		_LCD_Init
 19611 ;;		_MXK_Init
 19612 ;;		_init
 19613 ;;		_move_and_rotate
 19614 ;;		_mode4
 19615 ;; This function uses a non-reentrant model
 19616 ;;
 19617                           
 19618                           	psect	text91
 19619  015718                     __ptext91:
 19620                           	opt stack 0
 19621  015718                     _delay_ms:
 19622                           	opt stack 22
 19623                           
 19624                           ;Types.c: 242: volatile unsigned long u;
 19625                           ;Types.c: 243: while (ms--)
 19626                           
 19627                           ;incstack = 0
 19628  015718  D01F               	goto	u9460
 19629  01571A                     l12780:
 19630                           
 19631                           ;Types.c: 244: {
 19632                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19633  01571A  0E00               	movlw	0
 19634  01571C  0100               	movlb	0	; () banked
 19635  01571E  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19636  015720  0E00               	movlw	0
 19637  015722  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19638  015724  0E00               	movlw	0
 19639  015726  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19640  015728  0E00               	movlw	0
 19641  01572A  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19642  01572C                     l12782:
 19643                           
 19644                           ; BSR set to: 0
 19645  01572C  0100               	movlb	0	; () banked
 19646  01572E  51BF               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19647  015730  0100               	movlb	0	; () banked
 19648  015732  11BE               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19649  015734  E111               	bnz	l12788
 19650  015736  0EB0               	movlw	176
 19651  015738  0100               	movlb	0	; () banked
 19652  01573A  5DBC               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19653  01573C  0E04               	movlw	4
 19654  01573E  0100               	movlb	0	; () banked
 19655  015740  59BD               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19656  015742  B0D8               	btfsc	status,0,c
 19657  015744  D009               	goto	u9460
 19658                           
 19659                           ; BSR set to: 0
 19660                           
 19661                           ; BSR set to: 0
 19662  015746  F000               	nop		; ;# 
 19663  015748  0E01               	movlw	1
 19664  01574A  0100               	movlb	0	; () banked
 19665  01574C  27BC               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19666  01574E  0E00               	movlw	0
 19667  015750  23BD               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19668  015752  23BE               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19669  015754  23BF               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19670  015756  D7EA               	goto	l12782
 19671  015758                     u9460:
 19672  015758                     l12788:
 19673  015758  0100               	movlb	0	; () banked
 19674  01575A  07BA               	decf	delay_ms@ms& (0+255),f,b
 19675  01575C  A0D8               	btfss	status,0,c
 19676  01575E  07BB               	decf	(delay_ms@ms+1)& (0+255),f,b
 19677  015760  0100               	movlb	0	; () banked
 19678  015762  29BA               	incf	delay_ms@ms& (0+255),w,b
 19679  015764  E1DA               	bnz	l12780
 19680  015766  0100               	movlb	0	; () banked
 19681  015768  29BB               	incf	(delay_ms@ms+1)& (0+255),w,b
 19682  01576A  A4D8               	btfss	status,2,c
 19683  01576C  D7D6               	goto	l824
 19684                           
 19685                           ; BSR set to: 0
 19686                           ;Types.c: 251: }
 19687                           ;Types.c: 252: }
 19688                           ;Types.c: 253: u = 0x8008;
 19689                           
 19690                           ; BSR set to: 0
 19691  01576E  0E08               	movlw	8
 19692  015770  0100               	movlb	0	; () banked
 19693  015772  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19694  015774  0E80               	movlw	128
 19695  015776  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19696  015778  0E00               	movlw	0
 19697  01577A  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19698  01577C  0E00               	movlw	0
 19699  01577E  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19700                           
 19701                           ; BSR set to: 0
 19702  015780  0012               	return		;funcret
 19703  015782                     __end_of_delay_ms:
 19704                           	opt stack 0
 19705                           tosu	equ	0xFFF
 19706                           tosh	equ	0xFFE
 19707                           tosl	equ	0xFFD
 19708                           pclath	equ	0xFFA
 19709                           tblptru	equ	0xFF8
 19710                           tblptrh	equ	0xFF7
 19711                           tblptrl	equ	0xFF6
 19712                           tablat	equ	0xFF5
 19713                           prodh	equ	0xFF4
 19714                           prodl	equ	0xFF3
 19715                           intcon	equ	0xFF2
 19716                           postinc0	equ	0xFEE
 19717                           wreg	equ	0xFE8
 19718                           indf1	equ	0xFE7
 19719                           postdec1	equ	0xFE5
 19720                           fsr1h	equ	0xFE2
 19721                           fsr1l	equ	0xFE1
 19722                           indf2	equ	0xFDF
 19723                           postinc2	equ	0xFDE
 19724                           postdec2	equ	0xFDD
 19725                           plusw2	equ	0xFDB
 19726                           fsr2h	equ	0xFDA
 19727                           fsr2l	equ	0xFD9
 19728                           status	equ	0xFD8
 19729                           
 19730 ;; *************** function _Reset_Low *****************
 19731 ;; Defined at:
 19732 ;;		line 32 in file "Library/LCD.c"
 19733 ;; Parameters:    Size  Location     Type
 19734 ;;		None
 19735 ;; Auto vars:     Size  Location     Type
 19736 ;;		None
 19737 ;; Return value:  Size  Location     Type
 19738 ;;                  1    wreg      void 
 19739 ;; Registers used:
 19740 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19741 ;; Tracked objects:
 19742 ;;		On entry : 0/0
 19743 ;;		On exit  : 0/0
 19744 ;;		Unchanged: 0/0
 19745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19750 ;;Total ram usage:        0 bytes
 19751 ;; Hardware stack levels used:    1
 19752 ;; Hardware stack levels required when called:   11
 19753 ;; This function calls:
 19754 ;;		_Port_SetPin
 19755 ;; This function is called by:
 19756 ;;		_LCD_Reset
 19757 ;; This function uses a non-reentrant model
 19758 ;;
 19759                           
 19760                           	psect	text92
 19761  0164B0                     __ptext92:
 19762                           	opt stack 0
 19763  0164B0                     _Reset_Low:
 19764                           	opt stack 15
 19765                           
 19766                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 19767                           
 19768                           ; BSR set to: 0
 19769                           ;incstack = 0
 19770  0164B0  0EC2               	movlw	low _PortF
 19771  0164B2  0100               	movlb	0	; () banked
 19772  0164B4  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19773  0164B6  0E03               	movlw	high _PortF
 19774  0164B8  0100               	movlb	0	; () banked
 19775  0164BA  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19776  0164BC  0E06               	movlw	6
 19777  0164BE  0100               	movlb	0	; () banked
 19778  0164C0  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19779  0164C2  0E01               	movlw	1
 19780  0164C4  0100               	movlb	0	; () banked
 19781  0164C6  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19782  0164C8  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 19783  0164CC  0012               	return		;funcret
 19784  0164CE                     __end_of_Reset_Low:
 19785                           	opt stack 0
 19786                           tosu	equ	0xFFF
 19787                           tosh	equ	0xFFE
 19788                           tosl	equ	0xFFD
 19789                           pclath	equ	0xFFA
 19790                           tblptru	equ	0xFF8
 19791                           tblptrh	equ	0xFF7
 19792                           tblptrl	equ	0xFF6
 19793                           tablat	equ	0xFF5
 19794                           prodh	equ	0xFF4
 19795                           prodl	equ	0xFF3
 19796                           intcon	equ	0xFF2
 19797                           postinc0	equ	0xFEE
 19798                           wreg	equ	0xFE8
 19799                           indf1	equ	0xFE7
 19800                           postdec1	equ	0xFE5
 19801                           fsr1h	equ	0xFE2
 19802                           fsr1l	equ	0xFE1
 19803                           indf2	equ	0xFDF
 19804                           postinc2	equ	0xFDE
 19805                           postdec2	equ	0xFDD
 19806                           plusw2	equ	0xFDB
 19807                           fsr2h	equ	0xFDA
 19808                           fsr2l	equ	0xFD9
 19809                           status	equ	0xFD8
 19810                           
 19811 ;; *************** function _Reset_High *****************
 19812 ;; Defined at:
 19813 ;;		line 36 in file "Library/LCD.c"
 19814 ;; Parameters:    Size  Location     Type
 19815 ;;		None
 19816 ;; Auto vars:     Size  Location     Type
 19817 ;;		None
 19818 ;; Return value:  Size  Location     Type
 19819 ;;                  1    wreg      void 
 19820 ;; Registers used:
 19821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19822 ;; Tracked objects:
 19823 ;;		On entry : 0/0
 19824 ;;		On exit  : 0/0
 19825 ;;		Unchanged: 0/0
 19826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19831 ;;Total ram usage:        0 bytes
 19832 ;; Hardware stack levels used:    1
 19833 ;; Hardware stack levels required when called:   11
 19834 ;; This function calls:
 19835 ;;		_Port_SetPin
 19836 ;; This function is called by:
 19837 ;;		_LCD_Reset
 19838 ;; This function uses a non-reentrant model
 19839 ;;
 19840                           
 19841                           	psect	text93
 19842  0164CE                     __ptext93:
 19843                           	opt stack 0
 19844  0164CE                     _Reset_High:
 19845                           	opt stack 15
 19846                           
 19847                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 19848                           
 19849                           ;incstack = 0
 19850  0164CE  0EC2               	movlw	low _PortF
 19851  0164D0  0100               	movlb	0	; () banked
 19852  0164D2  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19853  0164D4  0E03               	movlw	high _PortF
 19854  0164D6  0100               	movlb	0	; () banked
 19855  0164D8  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19856  0164DA  0E06               	movlw	6
 19857  0164DC  0100               	movlb	0	; () banked
 19858  0164DE  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19859  0164E0  0E00               	movlw	0
 19860  0164E2  0100               	movlb	0	; () banked
 19861  0164E4  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19862  0164E6  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 19863  0164EA  0012               	return		;funcret
 19864  0164EC                     __end_of_Reset_High:
 19865                           	opt stack 0
 19866                           tosu	equ	0xFFF
 19867                           tosh	equ	0xFFE
 19868                           tosl	equ	0xFFD
 19869                           pclath	equ	0xFFA
 19870                           tblptru	equ	0xFF8
 19871                           tblptrh	equ	0xFF7
 19872                           tblptrl	equ	0xFF6
 19873                           tablat	equ	0xFF5
 19874                           prodh	equ	0xFF4
 19875                           prodl	equ	0xFF3
 19876                           intcon	equ	0xFF2
 19877                           postinc0	equ	0xFEE
 19878                           wreg	equ	0xFE8
 19879                           indf1	equ	0xFE7
 19880                           postdec1	equ	0xFE5
 19881                           fsr1h	equ	0xFE2
 19882                           fsr1l	equ	0xFE1
 19883                           indf2	equ	0xFDF
 19884                           postinc2	equ	0xFDE
 19885                           postdec2	equ	0xFDD
 19886                           plusw2	equ	0xFDB
 19887                           fsr2h	equ	0xFDA
 19888                           fsr2l	equ	0xFD9
 19889                           status	equ	0xFD8
 19890                           
 19891 ;; *************** function _ISR_Enable *****************
 19892 ;; Defined at:
 19893 ;;		line 27 in file "Library/ISR.c"
 19894 ;; Parameters:    Size  Location     Type
 19895 ;;		None
 19896 ;; Auto vars:     Size  Location     Type
 19897 ;;		None
 19898 ;; Return value:  Size  Location     Type
 19899 ;;                  1    wreg      void 
 19900 ;; Registers used:
 19901 ;;		None
 19902 ;; Tracked objects:
 19903 ;;		On entry : 0/0
 19904 ;;		On exit  : 0/0
 19905 ;;		Unchanged: 0/0
 19906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;Total ram usage:        0 bytes
 19912 ;; Hardware stack levels used:    1
 19913 ;; Hardware stack levels required when called:    7
 19914 ;; This function calls:
 19915 ;;		Nothing
 19916 ;; This function is called by:
 19917 ;;		_init
 19918 ;; This function uses a non-reentrant model
 19919 ;;
 19920                           
 19921                           	psect	text94
 19922  016776                     __ptext94:
 19923                           	opt stack 0
 19924  016776                     _ISR_Enable:
 19925                           	opt stack 22
 19926                           
 19927                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19928                           
 19929                           ;incstack = 0
 19930  016776  8CF2               	bsf	intcon,6,c	;volatile
 19931                           
 19932                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19933  016778  8EF2               	bsf	intcon,7,c	;volatile
 19934                           
 19935                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19936  01677A  88F2               	bsf	intcon,4,c	;volatile
 19937                           
 19938                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19939  01677C  92F2               	bcf	intcon,1,c	;volatile
 19940  01677E  0012               	return		;funcret
 19941  016780                     __end_of_ISR_Enable:
 19942                           	opt stack 0
 19943                           tosu	equ	0xFFF
 19944                           tosh	equ	0xFFE
 19945                           tosl	equ	0xFFD
 19946                           pclath	equ	0xFFA
 19947                           tblptru	equ	0xFF8
 19948                           tblptrh	equ	0xFF7
 19949                           tblptrl	equ	0xFF6
 19950                           tablat	equ	0xFF5
 19951                           prodh	equ	0xFF4
 19952                           prodl	equ	0xFF3
 19953                           intcon	equ	0xFF2
 19954                           postinc0	equ	0xFEE
 19955                           wreg	equ	0xFE8
 19956                           indf1	equ	0xFE7
 19957                           postdec1	equ	0xFE5
 19958                           fsr1h	equ	0xFE2
 19959                           fsr1l	equ	0xFE1
 19960                           indf2	equ	0xFDF
 19961                           postinc2	equ	0xFDE
 19962                           postdec2	equ	0xFDD
 19963                           plusw2	equ	0xFDB
 19964                           fsr2h	equ	0xFDA
 19965                           fsr2l	equ	0xFD9
 19966                           status	equ	0xFD8
 19967                           
 19968 ;; *************** function _HMI_Init *****************
 19969 ;; Defined at:
 19970 ;;		line 104 in file "HMI.c"
 19971 ;; Parameters:    Size  Location     Type
 19972 ;;		None
 19973 ;; Auto vars:     Size  Location     Type
 19974 ;;  in              2   59[BANK0 ] unsigned short 
 19975 ;; Return value:  Size  Location     Type
 19976 ;;                  1    wreg      void 
 19977 ;; Registers used:
 19978 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19979 ;; Tracked objects:
 19980 ;;		On entry : 0/0
 19981 ;;		On exit  : 0/0
 19982 ;;		Unchanged: 0/0
 19983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19985 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19988 ;;Total ram usage:        2 bytes
 19989 ;; Hardware stack levels used:    1
 19990 ;; Hardware stack levels required when called:   16
 19991 ;; This function calls:
 19992 ;;		_Button_Init
 19993 ;;		_SPI_Init
 19994 ;;		_SPI_MinSpeed
 19995 ;; This function is called by:
 19996 ;;		_init
 19997 ;; This function uses a non-reentrant model
 19998 ;;
 19999                           
 20000                           	psect	text95
 20001  012136                     __ptext95:
 20002                           	opt stack 0
 20003  012136                     _HMI_Init:
 20004                           	opt stack 13
 20005                           
 20006                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 20007                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 20008                           
 20009                           ;incstack = 0
 20010  012136  0E70               	movlw	low (_HMIBoard+48)
 20011  012138  0101               	movlb	1	; () banked
 20012  01213A  6F00               	movwf	Button_Init@pInput& (0+255),b
 20013  01213C  0E03               	movlw	high (_HMIBoard+48)
 20014  01213E  0101               	movlb	1	; () banked
 20015  012140  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20016  012142  0E00               	movlw	0
 20017  012144  0101               	movlb	1	; () banked
 20018  012146  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20019  012148  0E02               	movlw	2
 20020  01214A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20021  01214C  0EB0               	movlw	low _HMI_InitButtons
 20022  01214E  0101               	movlb	1	; () banked
 20023  012150  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20024  012152  0E67               	movlw	high _HMI_InitButtons
 20025  012154  0101               	movlb	1	; () banked
 20026  012156  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20027  012158  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20028  01215A  0101               	movlb	1	; () banked
 20029  01215C  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20030  01215E  0EE4               	movlw	low _HMI_DIPSwitch
 20031  012160  0101               	movlb	1	; () banked
 20032  012162  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20033  012164  0E65               	movlw	high _HMI_DIPSwitch
 20034  012166  0101               	movlb	1	; () banked
 20035  012168  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20036  01216A  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 20037  01216C  0101               	movlb	1	; () banked
 20038  01216E  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20039  012170  0E04               	movlw	low _Event_NULL
 20040  012172  0101               	movlb	1	; () banked
 20041  012174  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20042  012176  0E14               	movlw	high _Event_NULL
 20043  012178  0101               	movlb	1	; () banked
 20044  01217A  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20045  01217C  0E00               	movlw	low (_Event_NULL shr (0+16))
 20046  01217E  0101               	movlb	1	; () banked
 20047  012180  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20048  012182  EC6A  F09F         	call	_Button_Init	;wreg free
 20049                           
 20050                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 20051                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 20052  012186  0E52               	movlw	low (_HMIBoard+18)
 20053  012188  0101               	movlb	1	; () banked
 20054  01218A  6F00               	movwf	Button_Init@pInput& (0+255),b
 20055  01218C  0E03               	movlw	high (_HMIBoard+18)
 20056  01218E  0101               	movlb	1	; () banked
 20057  012190  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20058  012192  0E00               	movlw	0
 20059  012194  0101               	movlb	1	; () banked
 20060  012196  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20061  012198  0E02               	movlw	2
 20062  01219A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20063  01219C  0EB0               	movlw	low _HMI_InitButtons
 20064  01219E  0101               	movlb	1	; () banked
 20065  0121A0  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20066  0121A2  0E67               	movlw	high _HMI_InitButtons
 20067  0121A4  0101               	movlb	1	; () banked
 20068  0121A6  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20069  0121A8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20070  0121AA  0101               	movlb	1	; () banked
 20071  0121AC  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20072  0121AE  0E44               	movlw	low _HMI_LeftSwitch
 20073  0121B0  0101               	movlb	1	; () banked
 20074  0121B2  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20075  0121B4  0E66               	movlw	high _HMI_LeftSwitch
 20076  0121B6  0101               	movlb	1	; () banked
 20077  0121B8  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20078  0121BA  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 20079  0121BC  0101               	movlb	1	; () banked
 20080  0121BE  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20081  0121C0  0E04               	movlw	low _Event_NULL
 20082  0121C2  0101               	movlb	1	; () banked
 20083  0121C4  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20084  0121C6  0E14               	movlw	high _Event_NULL
 20085  0121C8  0101               	movlb	1	; () banked
 20086  0121CA  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20087  0121CC  0E00               	movlw	low (_Event_NULL shr (0+16))
 20088  0121CE  0101               	movlb	1	; () banked
 20089  0121D0  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20090  0121D2  EC6A  F09F         	call	_Button_Init	;wreg free
 20091                           
 20092                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 20093                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 20094  0121D6  0E48               	movlw	low (_HMIBoard+8)
 20095  0121D8  0101               	movlb	1	; () banked
 20096  0121DA  6F00               	movwf	Button_Init@pInput& (0+255),b
 20097  0121DC  0E03               	movlw	high (_HMIBoard+8)
 20098  0121DE  0101               	movlb	1	; () banked
 20099  0121E0  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20100  0121E2  0E00               	movlw	0
 20101  0121E4  0101               	movlb	1	; () banked
 20102  0121E6  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20103  0121E8  0E02               	movlw	2
 20104  0121EA  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20105  0121EC  0EB0               	movlw	low _HMI_InitButtons
 20106  0121EE  0101               	movlb	1	; () banked
 20107  0121F0  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20108  0121F2  0E67               	movlw	high _HMI_InitButtons
 20109  0121F4  0101               	movlb	1	; () banked
 20110  0121F6  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20111  0121F8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20112  0121FA  0101               	movlb	1	; () banked
 20113  0121FC  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20114  0121FE  0E2C               	movlw	low _HMI_RightSwitch
 20115  012200  0101               	movlb	1	; () banked
 20116  012202  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20117  012204  0E66               	movlw	high _HMI_RightSwitch
 20118  012206  0101               	movlb	1	; () banked
 20119  012208  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20120  01220A  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 20121  01220C  0101               	movlb	1	; () banked
 20122  01220E  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20123  012210  0E04               	movlw	low _Event_NULL
 20124  012212  0101               	movlb	1	; () banked
 20125  012214  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20126  012216  0E14               	movlw	high _Event_NULL
 20127  012218  0101               	movlb	1	; () banked
 20128  01221A  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20129  01221C  0E00               	movlw	low (_Event_NULL shr (0+16))
 20130  01221E  0101               	movlb	1	; () banked
 20131  012220  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20132  012222  EC6A  F09F         	call	_Button_Init	;wreg free
 20133                           
 20134                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 20135                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 20136  012226  0E5C               	movlw	low (_HMIBoard+28)
 20137  012228  0101               	movlb	1	; () banked
 20138  01222A  6F00               	movwf	Button_Init@pInput& (0+255),b
 20139  01222C  0E03               	movlw	high (_HMIBoard+28)
 20140  01222E  0101               	movlb	1	; () banked
 20141  012230  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20142  012232  0E00               	movlw	0
 20143  012234  0101               	movlb	1	; () banked
 20144  012236  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20145  012238  0E02               	movlw	2
 20146  01223A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20147  01223C  0EB0               	movlw	low _HMI_InitButtons
 20148  01223E  0101               	movlb	1	; () banked
 20149  012240  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20150  012242  0E67               	movlw	high _HMI_InitButtons
 20151  012244  0101               	movlb	1	; () banked
 20152  012246  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20153  012248  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20154  01224A  0101               	movlb	1	; () banked
 20155  01224C  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20156  01224E  0E14               	movlw	low _HMI_UpSwitch
 20157  012250  0101               	movlb	1	; () banked
 20158  012252  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20159  012254  0E66               	movlw	high _HMI_UpSwitch
 20160  012256  0101               	movlb	1	; () banked
 20161  012258  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20162  01225A  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 20163  01225C  0101               	movlb	1	; () banked
 20164  01225E  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20165  012260  0E04               	movlw	low _Event_NULL
 20166  012262  0101               	movlb	1	; () banked
 20167  012264  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20168  012266  0E14               	movlw	high _Event_NULL
 20169  012268  0101               	movlb	1	; () banked
 20170  01226A  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20171  01226C  0E00               	movlw	low (_Event_NULL shr (0+16))
 20172  01226E  0101               	movlb	1	; () banked
 20173  012270  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20174  012272  EC6A  F09F         	call	_Button_Init	;wreg free
 20175                           
 20176                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 20177                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 20178  012276  0E66               	movlw	low (_HMIBoard+38)
 20179  012278  0101               	movlb	1	; () banked
 20180  01227A  6F00               	movwf	Button_Init@pInput& (0+255),b
 20181  01227C  0E03               	movlw	high (_HMIBoard+38)
 20182  01227E  0101               	movlb	1	; () banked
 20183  012280  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20184  012282  0E00               	movlw	0
 20185  012284  0101               	movlb	1	; () banked
 20186  012286  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20187  012288  0E02               	movlw	2
 20188  01228A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20189  01228C  0EB0               	movlw	low _HMI_InitButtons
 20190  01228E  0101               	movlb	1	; () banked
 20191  012290  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20192  012292  0E67               	movlw	high _HMI_InitButtons
 20193  012294  0101               	movlb	1	; () banked
 20194  012296  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20195  012298  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20196  01229A  0101               	movlb	1	; () banked
 20197  01229C  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20198  01229E  0EFC               	movlw	low _HMI_DownSwitch
 20199  0122A0  0101               	movlb	1	; () banked
 20200  0122A2  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20201  0122A4  0E65               	movlw	high _HMI_DownSwitch
 20202  0122A6  0101               	movlb	1	; () banked
 20203  0122A8  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20204  0122AA  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 20205  0122AC  0101               	movlb	1	; () banked
 20206  0122AE  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20207  0122B0  0E04               	movlw	low _Event_NULL
 20208  0122B2  0101               	movlb	1	; () banked
 20209  0122B4  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20210  0122B6  0E14               	movlw	high _Event_NULL
 20211  0122B8  0101               	movlb	1	; () banked
 20212  0122BA  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20213  0122BC  0E00               	movlw	low (_Event_NULL shr (0+16))
 20214  0122BE  0101               	movlb	1	; () banked
 20215  0122C0  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20216  0122C2  EC6A  F09F         	call	_Button_Init	;wreg free
 20217                           
 20218                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 20219  0122C6  0EA0               	movlw	160
 20220  0122C8  0100               	movlb	0	; () banked
 20221  0122CA  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 20222  0122CC  0E86               	movlw	134
 20223  0122CE  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20224  0122D0  0E01               	movlw	1
 20225  0122D2  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20226  0122D4  0E00               	movlw	0
 20227  0122D6  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20228  0122D8  0E00               	movlw	0
 20229  0122DA  0100               	movlb	0	; () banked
 20230  0122DC  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 20231  0122DE  0E02               	movlw	2
 20232  0122E0  0100               	movlb	0	; () banked
 20233  0122E2  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 20234  0122E4  EC53  F082         	call	_SPI_Init	;wreg free
 20235                           
 20236                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 20237  0122E8  0E7A               	movlw	low _SPI1
 20238  0122EA  0100               	movlb	0	; () banked
 20239  0122EC  6FC9               	movwf	SPI_MinSpeed@pInput& (0+255),b
 20240  0122EE  0E03               	movlw	high _SPI1
 20241  0122F0  0100               	movlb	0	; () banked
 20242  0122F2  6FCA               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 20243  0122F4  EC3F  F0AA         	call	_SPI_MinSpeed	;wreg free
 20244                           
 20245                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 20246  0122F8  0E00               	movlw	0
 20247  0122FA  0100               	movlb	0	; () banked
 20248  0122FC  6FF6               	movwf	(HMI_Init@in+1)& (0+255),b
 20249  0122FE  0E00               	movlw	0
 20250  012300  6FF5               	movwf	HMI_Init@in& (0+255),b
 20251  012302                     l14450:
 20252                           
 20253                           ; BSR set to: 0
 20254  012302  0100               	movlb	0	; () banked
 20255  012304  51F6               	movf	(HMI_Init@in+1)& (0+255),w,b
 20256  012306  E113               	bnz	l1153
 20257  012308  0E08               	movlw	8
 20258  01230A  0100               	movlb	0	; () banked
 20259  01230C  5DF5               	subwf	HMI_Init@in& (0+255),w,b
 20260  01230E  B0D8               	btfsc	status,0,c
 20261  012310  0012               	return	
 20262                           
 20263                           ; BSR set to: 0
 20264                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 20265                           
 20266                           ; BSR set to: 0
 20267                           
 20268                           ; BSR set to: 0
 20269  012312  0E40               	movlw	low _HMIBoard
 20270  012314  0100               	movlb	0	; () banked
 20271  012316  25F5               	addwf	HMI_Init@in& (0+255),w,b
 20272  012318  6ED9               	movwf	fsr2l,c
 20273  01231A  0E03               	movlw	high _HMIBoard
 20274  01231C  0100               	movlb	0	; () banked
 20275  01231E  21F6               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 20276  012320  6EDA               	movwf	fsr2h,c
 20277  012322  0E00               	movlw	0
 20278  012324  6EDF               	movwf	indf2,c
 20279                           
 20280                           ; BSR set to: 0
 20281  012326  0100               	movlb	0	; () banked
 20282  012328  4BF5               	infsnz	HMI_Init@in& (0+255),f,b
 20283  01232A  2BF6               	incf	(HMI_Init@in+1)& (0+255),f,b
 20284  01232C  D7EA               	goto	l14450
 20285  01232E                     l1153:
 20286                           
 20287                           ; BSR set to: 0
 20288  01232E  0012               	return		;funcret
 20289  012330                     __end_of_HMI_Init:
 20290                           	opt stack 0
 20291                           tosu	equ	0xFFF
 20292                           tosh	equ	0xFFE
 20293                           tosl	equ	0xFFD
 20294                           pclath	equ	0xFFA
 20295                           tblptru	equ	0xFF8
 20296                           tblptrh	equ	0xFF7
 20297                           tblptrl	equ	0xFF6
 20298                           tablat	equ	0xFF5
 20299                           prodh	equ	0xFF4
 20300                           prodl	equ	0xFF3
 20301                           intcon	equ	0xFF2
 20302                           postinc0	equ	0xFEE
 20303                           wreg	equ	0xFE8
 20304                           indf1	equ	0xFE7
 20305                           postdec1	equ	0xFE5
 20306                           fsr1h	equ	0xFE2
 20307                           fsr1l	equ	0xFE1
 20308                           indf2	equ	0xFDF
 20309                           postinc2	equ	0xFDE
 20310                           postdec2	equ	0xFDD
 20311                           plusw2	equ	0xFDB
 20312                           fsr2h	equ	0xFDA
 20313                           fsr2l	equ	0xFD9
 20314                           status	equ	0xFD8
 20315                           
 20316 ;; *************** function _SPI_MinSpeed *****************
 20317 ;; Defined at:
 20318 ;;		line 190 in file "Library/SPI.c"
 20319 ;; Parameters:    Size  Location     Type
 20320 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20321 ;;		 -> SPI1(11), 
 20322 ;; Auto vars:     Size  Location     Type
 20323 ;;		None
 20324 ;; Return value:  Size  Location     Type
 20325 ;;                  1    wreg      void 
 20326 ;; Registers used:
 20327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20328 ;; Tracked objects:
 20329 ;;		On entry : 0/0
 20330 ;;		On exit  : 0/0
 20331 ;;		Unchanged: 0/0
 20332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20336 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20337 ;;Total ram usage:        2 bytes
 20338 ;; Hardware stack levels used:    1
 20339 ;; Hardware stack levels required when called:    9
 20340 ;; This function calls:
 20341 ;;		_Byte_SetBit
 20342 ;;		_Byte_SetQuad
 20343 ;; This function is called by:
 20344 ;;		_HMI_Init
 20345 ;; This function uses a non-reentrant model
 20346 ;;
 20347                           
 20348                           	psect	text96
 20349  01547E                     __ptext96:
 20350                           	opt stack 0
 20351  01547E                     _SPI_MinSpeed:
 20352                           	opt stack 19
 20353                           
 20354                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20355                           
 20356                           ; BSR set to: 0
 20357                           ;incstack = 0
 20358  01547E  0100               	movlb	0	; () banked
 20359  015480  EE20 F006          	lfsr	2,6
 20360  015484  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20361  015486  26D9               	addwf	fsr2l,f,c
 20362  015488  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20363  01548A  22DA               	addwfc	fsr2h,f,c
 20364  01548C  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20365  015490  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20366  015494  0E05               	movlw	5
 20367  015496  0100               	movlb	0	; () banked
 20368  015498  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20369  01549A  0E00               	movlw	0
 20370  01549C  0100               	movlb	0	; () banked
 20371  01549E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20372  0154A0  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20373                           
 20374                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 20375  0154A4  0100               	movlb	0	; () banked
 20376  0154A6  EE20 F006          	lfsr	2,6
 20377  0154AA  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20378  0154AC  26D9               	addwf	fsr2l,f,c
 20379  0154AE  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20380  0154B0  22DA               	addwfc	fsr2h,f,c
 20381  0154B2  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20382  0154B6  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20383  0154BA  0E00               	movlw	0
 20384  0154BC  0100               	movlb	0	; () banked
 20385  0154BE  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20386  0154C0  0E02               	movlw	2
 20387  0154C2  0100               	movlb	0	; () banked
 20388  0154C4  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20389  0154C6  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 20390                           
 20391                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20392  0154CA  0100               	movlb	0	; () banked
 20393  0154CC  EE20 F006          	lfsr	2,6
 20394  0154D0  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20395  0154D2  26D9               	addwf	fsr2l,f,c
 20396  0154D4  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20397  0154D6  22DA               	addwfc	fsr2h,f,c
 20398  0154D8  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20399  0154DC  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20400  0154E0  0E05               	movlw	5
 20401  0154E2  0100               	movlb	0	; () banked
 20402  0154E4  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20403  0154E6  0E01               	movlw	1
 20404  0154E8  0100               	movlb	0	; () banked
 20405  0154EA  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20406  0154EC  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20407  0154F0  0012               	return		;funcret
 20408  0154F2                     __end_of_SPI_MinSpeed:
 20409                           	opt stack 0
 20410                           tosu	equ	0xFFF
 20411                           tosh	equ	0xFFE
 20412                           tosl	equ	0xFFD
 20413                           pclath	equ	0xFFA
 20414                           tblptru	equ	0xFF8
 20415                           tblptrh	equ	0xFF7
 20416                           tblptrl	equ	0xFF6
 20417                           tablat	equ	0xFF5
 20418                           prodh	equ	0xFF4
 20419                           prodl	equ	0xFF3
 20420                           intcon	equ	0xFF2
 20421                           postinc0	equ	0xFEE
 20422                           wreg	equ	0xFE8
 20423                           indf1	equ	0xFE7
 20424                           postdec1	equ	0xFE5
 20425                           fsr1h	equ	0xFE2
 20426                           fsr1l	equ	0xFE1
 20427                           indf2	equ	0xFDF
 20428                           postinc2	equ	0xFDE
 20429                           postdec2	equ	0xFDD
 20430                           plusw2	equ	0xFDB
 20431                           fsr2h	equ	0xFDA
 20432                           fsr2l	equ	0xFD9
 20433                           status	equ	0xFD8
 20434                           
 20435 ;; *************** function _SPI_Init *****************
 20436 ;; Defined at:
 20437 ;;		line 12 in file "Library/SPI.c"
 20438 ;; Parameters:    Size  Location     Type
 20439 ;;  pClock          4   45[BANK0 ] unsigned long 
 20440 ;;  pChannel        1   49[BANK0 ] enum E6744
 20441 ;;  pMode           1   50[BANK0 ] enum E6748
 20442 ;; Auto vars:     Size  Location     Type
 20443 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 20444 ;;		 -> SPI1(11), SPI2(11), 
 20445 ;; Return value:  Size  Location     Type
 20446 ;;                  1    wreg      void 
 20447 ;; Registers used:
 20448 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20449 ;; Tracked objects:
 20450 ;;		On entry : 0/0
 20451 ;;		On exit  : 0/0
 20452 ;;		Unchanged: 0/0
 20453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20454 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20457 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20458 ;;Total ram usage:        8 bytes
 20459 ;; Hardware stack levels used:    1
 20460 ;; Hardware stack levels required when called:   12
 20461 ;; This function calls:
 20462 ;;		_Byte_SetBit
 20463 ;;		_Byte_SetQuad
 20464 ;;		_Port_SetPinType
 20465 ;;		_SPI_DCS
 20466 ;;		_SPI_DisableISR
 20467 ;;		_Timer2_Init
 20468 ;; This function is called by:
 20469 ;;		_Configure_GPIOs
 20470 ;;		_HMI_Init
 20471 ;; This function uses a non-reentrant model
 20472 ;;
 20473                           
 20474                           	psect	text97
 20475  0104A6                     __ptext97:
 20476                           	opt stack 0
 20477  0104A6                     _SPI_Init:
 20478                           	opt stack 15
 20479                           
 20480                           ;SPI.c: 14: SPIPtr pInput;
 20481                           ;SPI.c: 16: switch (pChannel)
 20482                           
 20483                           ;incstack = 0
 20484  0104A6  D00C               	goto	l597
 20485  0104A8                     
 20486                           ;SPI.c: 19: pInput = &SPI1;
 20487  0104A8  0E7A               	movlw	low _SPI1
 20488  0104AA  0100               	movlb	0	; () banked
 20489  0104AC  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20490  0104AE  0E03               	movlw	high _SPI1
 20491  0104B0  D004               	goto	L13
 20492  0104B2                     
 20493                           ; BSR set to: 0
 20494                           ;SPI.c: 22: pInput = &SPI2;
 20495                           
 20496                           ; BSR set to: 0
 20497  0104B2  0E85               	movlw	low _SPI2
 20498  0104B4  0100               	movlb	0	; () banked
 20499  0104B6  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20500  0104B8  0E03               	movlw	high _SPI2
 20501  0104BA                     L13:
 20502  0104BA  0100               	movlb	0	; () banked
 20503  0104BC  6FEE               	movwf	(SPI_Init@pInput+1)& (0+255),b
 20504                           
 20505                           ; BSR set to: 0
 20506                           ;SPI.c: 24: };
 20507                           
 20508                           ;SPI.c: 23: break;
 20509  0104BE  D008               	goto	l599
 20510  0104C0                     l597:
 20511                           
 20512                           ; BSR set to: 0
 20513  0104C0  0100               	movlb	0	; () banked
 20514  0104C2  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20515                           
 20516                           ; Switch size 1, requested type "space"
 20517                           ; Number of cases is 2, Range of values is 0 to 1
 20518                           ; switch strategies available:
 20519                           ; Name         Instructions Cycles
 20520                           ; simple_byte            7     4 (average)
 20521                           ;	Chosen strategy is simple_byte
 20522  0104C4  0A00               	xorlw	0	; case 0
 20523  0104C6  B4D8               	btfsc	status,2,c
 20524  0104C8  D7EF               	goto	l598
 20525  0104CA  0A01               	xorlw	1	; case 1
 20526  0104CC  B4D8               	btfsc	status,2,c
 20527  0104CE  D7F1               	goto	l600
 20528  0104D0                     l599:
 20529                           
 20530                           ; BSR set to: 0
 20531                           ;SPI.c: 26: pInput->mChannel = pChannel;
 20532                           
 20533                           ; BSR set to: 0
 20534  0104D0  0100               	movlb	0	; () banked
 20535  0104D2  EE20 F002          	lfsr	2,2
 20536  0104D6  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20537  0104D8  26D9               	addwf	fsr2l,f,c
 20538  0104DA  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20539  0104DC  22DA               	addwfc	fsr2h,f,c
 20540  0104DE  C0EB  FFDF         	movff	SPI_Init@pChannel,indf2
 20541                           
 20542                           ;SPI.c: 35: switch (pChannel)
 20543  0104E2  D0B1               	goto	l601
 20544  0104E4                     
 20545                           ; BSR set to: 0
 20546                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 20547                           
 20548                           ; BSR set to: 0
 20549  0104E4  0EA5               	movlw	low _PortC
 20550  0104E6  0100               	movlb	0	; () banked
 20551  0104E8  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20552  0104EA  0E00               	movlw	high _PortC
 20553  0104EC  0100               	movlb	0	; () banked
 20554  0104EE  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20555  0104F0  0E02               	movlw	2
 20556  0104F2  0100               	movlb	0	; () banked
 20557  0104F4  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20558  0104F6  0E03               	movlw	3
 20559  0104F8  0100               	movlb	0	; () banked
 20560  0104FA  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20561  0104FC  EC60  F093         	call	_Port_SetPinType	;wreg free
 20562                           
 20563                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20564  010500  0EA5               	movlw	low _PortC
 20565  010502  0100               	movlb	0	; () banked
 20566  010504  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20567  010506  0E00               	movlw	high _PortC
 20568  010508  0100               	movlb	0	; () banked
 20569  01050A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20570  01050C  0E03               	movlw	3
 20571  01050E  0100               	movlb	0	; () banked
 20572  010510  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20573  010512  0E03               	movlw	3
 20574  010514  0100               	movlb	0	; () banked
 20575  010516  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20576  010518  EC60  F093         	call	_Port_SetPinType	;wreg free
 20577                           
 20578                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20579  01051C  0EA5               	movlw	low _PortC
 20580  01051E  0100               	movlb	0	; () banked
 20581  010520  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20582  010522  0E00               	movlw	high _PortC
 20583  010524  0100               	movlb	0	; () banked
 20584  010526  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20585  010528  0E05               	movlw	5
 20586  01052A  0100               	movlb	0	; () banked
 20587  01052C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20588  01052E  0E03               	movlw	3
 20589  010530  0100               	movlb	0	; () banked
 20590  010532  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20591  010534  EC60  F093         	call	_Port_SetPinType	;wreg free
 20592                           
 20593                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20594  010538  0EA5               	movlw	low _PortC
 20595  01053A  0100               	movlb	0	; () banked
 20596  01053C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20597  01053E  0E00               	movlw	high _PortC
 20598  010540  0100               	movlb	0	; () banked
 20599  010542  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20600  010544  0E04               	movlw	4
 20601  010546  0100               	movlb	0	; () banked
 20602  010548  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20603  01054A  0E00               	movlw	0
 20604  01054C  0100               	movlb	0	; () banked
 20605  01054E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20606  010550  EC60  F093         	call	_Port_SetPinType	;wreg free
 20607                           
 20608                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20609  010554  0100               	movlb	0	; () banked
 20610  010556  EE20 F003          	lfsr	2,3
 20611  01055A  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20612  01055C  26D9               	addwf	fsr2l,f,c
 20613  01055E  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20614  010560  22DA               	addwfc	fsr2h,f,c
 20615  010562  0EC7               	movlw	199
 20616  010564  6EDE               	movwf	postinc2,c
 20617  010566  0E0F               	movlw	15
 20618  010568  6EDD               	movwf	postdec2,c
 20619                           
 20620                           ; BSR set to: 0
 20621                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20622  01056A  0100               	movlb	0	; () banked
 20623  01056C  EE20 F006          	lfsr	2,6
 20624  010570  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20625  010572  26D9               	addwf	fsr2l,f,c
 20626  010574  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20627  010576  22DA               	addwfc	fsr2h,f,c
 20628  010578  0EC6               	movlw	198
 20629  01057A  6EDE               	movwf	postinc2,c
 20630  01057C  0E0F               	movlw	15
 20631  01057E  6EDD               	movwf	postdec2,c
 20632                           
 20633                           ; BSR set to: 0
 20634                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20635  010580  0100               	movlb	0	; () banked
 20636  010582  EE20 F009          	lfsr	2,9
 20637  010586  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20638  010588  26D9               	addwf	fsr2l,f,c
 20639  01058A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20640  01058C  22DA               	addwfc	fsr2h,f,c
 20641  01058E  0EC9               	movlw	201
 20642  010590  D056               	goto	L14
 20643  010592                     
 20644                           ; BSR set to: 0
 20645                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20646                           
 20647                           ; BSR set to: 0
 20648  010592  0E9B               	movlw	low _PortD
 20649  010594  0100               	movlb	0	; () banked
 20650  010596  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20651  010598  0E00               	movlw	high _PortD
 20652  01059A  0100               	movlb	0	; () banked
 20653  01059C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20654  01059E  0E07               	movlw	7
 20655  0105A0  0100               	movlb	0	; () banked
 20656  0105A2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20657  0105A4  0E03               	movlw	3
 20658  0105A6  0100               	movlb	0	; () banked
 20659  0105A8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20660  0105AA  EC60  F093         	call	_Port_SetPinType	;wreg free
 20661                           
 20662                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20663  0105AE  0E9B               	movlw	low _PortD
 20664  0105B0  0100               	movlb	0	; () banked
 20665  0105B2  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20666  0105B4  0E00               	movlw	high _PortD
 20667  0105B6  0100               	movlb	0	; () banked
 20668  0105B8  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20669  0105BA  0E06               	movlw	6
 20670  0105BC  0100               	movlb	0	; () banked
 20671  0105BE  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20672  0105C0  0E03               	movlw	3
 20673  0105C2  0100               	movlb	0	; () banked
 20674  0105C4  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20675  0105C6  EC60  F093         	call	_Port_SetPinType	;wreg free
 20676                           
 20677                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20678  0105CA  0E9B               	movlw	low _PortD
 20679  0105CC  0100               	movlb	0	; () banked
 20680  0105CE  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20681  0105D0  0E00               	movlw	high _PortD
 20682  0105D2  0100               	movlb	0	; () banked
 20683  0105D4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20684  0105D6  0E04               	movlw	4
 20685  0105D8  0100               	movlb	0	; () banked
 20686  0105DA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20687  0105DC  0E03               	movlw	3
 20688  0105DE  0100               	movlb	0	; () banked
 20689  0105E0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20690  0105E2  EC60  F093         	call	_Port_SetPinType	;wreg free
 20691                           
 20692                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20693  0105E6  0E9B               	movlw	low _PortD
 20694  0105E8  0100               	movlb	0	; () banked
 20695  0105EA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20696  0105EC  0E00               	movlw	high _PortD
 20697  0105EE  0100               	movlb	0	; () banked
 20698  0105F0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20699  0105F2  0E05               	movlw	5
 20700  0105F4  0100               	movlb	0	; () banked
 20701  0105F6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20702  0105F8  0E00               	movlw	0
 20703  0105FA  0100               	movlb	0	; () banked
 20704  0105FC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20705  0105FE  EC60  F093         	call	_Port_SetPinType	;wreg free
 20706                           
 20707                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20708  010602  0100               	movlb	0	; () banked
 20709  010604  EE20 F003          	lfsr	2,3
 20710  010608  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20711  01060A  26D9               	addwf	fsr2l,f,c
 20712  01060C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20713  01060E  22DA               	addwfc	fsr2h,f,c
 20714  010610  0E6D               	movlw	109
 20715  010612  6EDE               	movwf	postinc2,c
 20716  010614  0E0F               	movlw	15
 20717  010616  6EDD               	movwf	postdec2,c
 20718                           
 20719                           ; BSR set to: 0
 20720                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20721  010618  0100               	movlb	0	; () banked
 20722  01061A  EE20 F006          	lfsr	2,6
 20723  01061E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20724  010620  26D9               	addwf	fsr2l,f,c
 20725  010622  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20726  010624  22DA               	addwfc	fsr2h,f,c
 20727  010626  0E6C               	movlw	108
 20728  010628  6EDE               	movwf	postinc2,c
 20729  01062A  0E0F               	movlw	15
 20730  01062C  6EDD               	movwf	postdec2,c
 20731                           
 20732                           ; BSR set to: 0
 20733                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20734  01062E  0100               	movlb	0	; () banked
 20735  010630  EE20 F009          	lfsr	2,9
 20736  010634  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20737  010636  26D9               	addwf	fsr2l,f,c
 20738  010638  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20739  01063A  22DA               	addwfc	fsr2h,f,c
 20740  01063C  0E6F               	movlw	111
 20741  01063E                     L14:
 20742  01063E  6EDE               	movwf	postinc2,c
 20743  010640  0E0F               	movlw	15
 20744  010642  6EDD               	movwf	postdec2,c
 20745                           
 20746                           ;SPI.c: 68: break;
 20747  010644  D009               	goto	l603
 20748  010646                     l601:
 20749                           
 20750                           ; BSR set to: 0
 20751                           
 20752                           ; BSR set to: 0
 20753  010646  0100               	movlb	0	; () banked
 20754  010648  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20755                           
 20756                           ; Switch size 1, requested type "space"
 20757                           ; Number of cases is 2, Range of values is 0 to 1
 20758                           ; switch strategies available:
 20759                           ; Name         Instructions Cycles
 20760                           ; simple_byte            7     4 (average)
 20761                           ;	Chosen strategy is simple_byte
 20762  01064A  0A00               	xorlw	0	; case 0
 20763  01064C  B4D8               	btfsc	status,2,c
 20764  01064E  D74A               	goto	l602
 20765  010650  0A01               	xorlw	1	; case 1
 20766  010652  A4D8               	btfss	status,2,c
 20767  010654  0012               	return	
 20768  010656  D79D               	goto	l604
 20769  010658                     l603:
 20770                           
 20771                           ; BSR set to: 0
 20772                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20773                           
 20774                           ; BSR set to: 0
 20775  010658  0100               	movlb	0	; () banked
 20776  01065A  EE20 F006          	lfsr	2,6
 20777  01065E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20778  010660  26D9               	addwf	fsr2l,f,c
 20779  010662  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20780  010664  22DA               	addwfc	fsr2h,f,c
 20781  010666  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20782  01066A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20783  01066E  0E05               	movlw	5
 20784  010670  0100               	movlb	0	; () banked
 20785  010672  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20786  010674  0E00               	movlw	0
 20787  010676  0100               	movlb	0	; () banked
 20788  010678  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20789  01067A  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20790                           
 20791                           ;SPI.c: 77: switch(pMode)
 20792  01067E  D09C               	goto	l607
 20793  010680                     
 20794                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20795  010680  0100               	movlb	0	; () banked
 20796  010682  EE20 F006          	lfsr	2,6
 20797  010686  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20798  010688  26D9               	addwf	fsr2l,f,c
 20799  01068A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20800  01068C  22DA               	addwfc	fsr2h,f,c
 20801  01068E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20802  010692  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20803  010696  0E04               	movlw	4
 20804  010698  0100               	movlb	0	; () banked
 20805  01069A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20806  01069C  0E00               	movlw	0
 20807  01069E  0100               	movlb	0	; () banked
 20808  0106A0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20809  0106A2  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20810                           
 20811                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20812  0106A6  0100               	movlb	0	; () banked
 20813  0106A8  EE20 F003          	lfsr	2,3
 20814  0106AC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20815  0106AE  26D9               	addwf	fsr2l,f,c
 20816  0106B0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20817  0106B2  22DA               	addwfc	fsr2h,f,c
 20818  0106B4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20819  0106B8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20820  0106BC  0E06               	movlw	6
 20821  0106BE  0100               	movlb	0	; () banked
 20822  0106C0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20823  0106C2  0E00               	movlw	0
 20824  0106C4  0100               	movlb	0	; () banked
 20825  0106C6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20826  0106C8  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20827                           
 20828                           ;SPI.c: 82: break;
 20829  0106CC  D084               	goto	l609
 20830  0106CE                     
 20831                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20832  0106CE  0100               	movlb	0	; () banked
 20833  0106D0  EE20 F006          	lfsr	2,6
 20834  0106D4  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20835  0106D6  26D9               	addwf	fsr2l,f,c
 20836  0106D8  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20837  0106DA  22DA               	addwfc	fsr2h,f,c
 20838  0106DC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20839  0106E0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20840  0106E4  0E04               	movlw	4
 20841  0106E6  0100               	movlb	0	; () banked
 20842  0106E8  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20843  0106EA  0E00               	movlw	0
 20844  0106EC  0100               	movlb	0	; () banked
 20845  0106EE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20846  0106F0  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20847                           
 20848                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20849  0106F4  0100               	movlb	0	; () banked
 20850  0106F6  EE20 F003          	lfsr	2,3
 20851  0106FA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20852  0106FC  26D9               	addwf	fsr2l,f,c
 20853  0106FE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20854  010700  22DA               	addwfc	fsr2h,f,c
 20855  010702  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20856  010706  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20857  01070A  0E06               	movlw	6
 20858  01070C  0100               	movlb	0	; () banked
 20859  01070E  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20860  010710  0E01               	movlw	1
 20861  010712  0100               	movlb	0	; () banked
 20862  010714  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20863  010716  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20864                           
 20865                           ;SPI.c: 86: break;
 20866  01071A  D05D               	goto	l609
 20867  01071C                     
 20868                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20869  01071C  0100               	movlb	0	; () banked
 20870  01071E  EE20 F006          	lfsr	2,6
 20871  010722  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20872  010724  26D9               	addwf	fsr2l,f,c
 20873  010726  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20874  010728  22DA               	addwfc	fsr2h,f,c
 20875  01072A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20876  01072E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20877  010732  0E04               	movlw	4
 20878  010734  0100               	movlb	0	; () banked
 20879  010736  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20880  010738  0E01               	movlw	1
 20881  01073A  0100               	movlb	0	; () banked
 20882  01073C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20883  01073E  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20884                           
 20885                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20886  010742  0100               	movlb	0	; () banked
 20887  010744  EE20 F003          	lfsr	2,3
 20888  010748  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20889  01074A  26D9               	addwf	fsr2l,f,c
 20890  01074C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20891  01074E  22DA               	addwfc	fsr2h,f,c
 20892  010750  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20893  010754  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20894  010758  0E06               	movlw	6
 20895  01075A  0100               	movlb	0	; () banked
 20896  01075C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20897  01075E  0E00               	movlw	0
 20898  010760  0100               	movlb	0	; () banked
 20899  010762  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20900  010764  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20901                           
 20902                           ;SPI.c: 90: break;
 20903  010768  D036               	goto	l609
 20904  01076A                     
 20905                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20906  01076A  0100               	movlb	0	; () banked
 20907  01076C  EE20 F006          	lfsr	2,6
 20908  010770  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20909  010772  26D9               	addwf	fsr2l,f,c
 20910  010774  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20911  010776  22DA               	addwfc	fsr2h,f,c
 20912  010778  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20913  01077C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20914  010780  0E04               	movlw	4
 20915  010782  0100               	movlb	0	; () banked
 20916  010784  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20917  010786  0E01               	movlw	1
 20918  010788  0100               	movlb	0	; () banked
 20919  01078A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20920  01078C  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20921                           
 20922                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20923  010790  0100               	movlb	0	; () banked
 20924  010792  EE20 F003          	lfsr	2,3
 20925  010796  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20926  010798  26D9               	addwf	fsr2l,f,c
 20927  01079A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20928  01079C  22DA               	addwfc	fsr2h,f,c
 20929  01079E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20930  0107A2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20931  0107A6  0E06               	movlw	6
 20932  0107A8  0100               	movlb	0	; () banked
 20933  0107AA  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20934  0107AC  0E01               	movlw	1
 20935  0107AE  0100               	movlb	0	; () banked
 20936  0107B0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20937  0107B2  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20938                           
 20939                           ;SPI.c: 94: break;
 20940  0107B6  D00F               	goto	l609
 20941  0107B8                     l607:
 20942  0107B8  0100               	movlb	0	; () banked
 20943  0107BA  51EC               	movf	SPI_Init@pMode& (0+255),w,b
 20944                           
 20945                           ; Switch size 1, requested type "space"
 20946                           ; Number of cases is 4, Range of values is 0 to 3
 20947                           ; switch strategies available:
 20948                           ; Name         Instructions Cycles
 20949                           ; simple_byte           13     7 (average)
 20950                           ;	Chosen strategy is simple_byte
 20951  0107BC  0A00               	xorlw	0	; case 0
 20952  0107BE  B4D8               	btfsc	status,2,c
 20953  0107C0  D75F               	goto	l608
 20954  0107C2  0A01               	xorlw	1	; case 1
 20955  0107C4  B4D8               	btfsc	status,2,c
 20956  0107C6  D783               	goto	l610
 20957  0107C8  0A03               	xorlw	3	; case 2
 20958  0107CA  B4D8               	btfsc	status,2,c
 20959  0107CC  D7A7               	goto	l611
 20960  0107CE  0A01               	xorlw	1	; case 3
 20961  0107D0  A4D8               	btfss	status,2,c
 20962  0107D2  0012               	return	
 20963  0107D4  D7CA               	goto	l612
 20964  0107D6                     l609:
 20965                           
 20966                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 20967                           
 20968                           ; BSR set to: 0
 20969  0107D6  0100               	movlb	0	; () banked
 20970  0107D8  EE20 F006          	lfsr	2,6
 20971  0107DC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20972  0107DE  26D9               	addwf	fsr2l,f,c
 20973  0107E0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20974  0107E2  22DA               	addwfc	fsr2h,f,c
 20975  0107E4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20976  0107E8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20977  0107EC  0E07               	movlw	7
 20978  0107EE  0100               	movlb	0	; () banked
 20979  0107F0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20980  0107F2  0E00               	movlw	0
 20981  0107F4  0100               	movlb	0	; () banked
 20982  0107F6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20983  0107F8  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 20984                           
 20985                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 20986  0107FC  0100               	movlb	0	; () banked
 20987  0107FE  EE20 F006          	lfsr	2,6
 20988  010802  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20989  010804  26D9               	addwf	fsr2l,f,c
 20990  010806  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20991  010808  22DA               	addwfc	fsr2h,f,c
 20992  01080A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20993  01080E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20994  010812  0E06               	movlw	6
 20995  010814  0100               	movlb	0	; () banked
 20996  010816  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20997  010818  0E00               	movlw	0
 20998  01081A  0100               	movlb	0	; () banked
 20999  01081C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21000  01081E  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 21001                           
 21002                           ;SPI.c: 106: Timer2_Init(pClock);
 21003  010822  C0E7  F0C7         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 21004  010826  C0E8  F0C8         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 21005  01082A  C0E9  F0C9         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 21006  01082E  C0EA  F0CA         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 21007  010832  EC77  F099         	call	_Timer2_Init	;wreg free
 21008                           
 21009                           ;SPI.c: 112: SPI_DisableISR(pInput);
 21010  010836  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 21011  01083A  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 21012  01083E  ECC1  F0B1         	call	_SPI_DisableISR	;wreg free
 21013                           
 21014                           ;SPI.c: 116: switch (pChannel)
 21015  010842  D004               	goto	l614
 21016  010844                     l615:
 21017                           
 21018                           ; BSR set to: 0
 21019  010844  869F               	bsf	3999,3,c	;volatile
 21020  010846  D00B               	goto	l616
 21021  010848                     l617:
 21022                           
 21023                           ; BSR set to: 0
 21024  010848  8EA5               	bsf	4005,7,c	;volatile
 21025  01084A  D009               	goto	l616
 21026  01084C                     l614:
 21027                           
 21028                           ; BSR set to: 0
 21029  01084C  0100               	movlb	0	; () banked
 21030  01084E  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 21031                           
 21032                           ; Switch size 1, requested type "space"
 21033                           ; Number of cases is 2, Range of values is 0 to 1
 21034                           ; switch strategies available:
 21035                           ; Name         Instructions Cycles
 21036                           ; simple_byte            7     4 (average)
 21037                           ;	Chosen strategy is simple_byte
 21038  010850  0A00               	xorlw	0	; case 0
 21039  010852  B4D8               	btfsc	status,2,c
 21040  010854  D7F7               	goto	l615
 21041  010856  0A01               	xorlw	1	; case 1
 21042  010858  A4D8               	btfss	status,2,c
 21043  01085A  0012               	return	
 21044  01085C  D7F5               	goto	l617
 21045  01085E                     l616:
 21046                           
 21047                           ; BSR set to: 0
 21048                           ;SPI.c: 124: SPI_DCS(pInput);
 21049                           
 21050                           ; BSR set to: 0
 21051  01085E  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DCS@pInput
 21052  010862  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 21053  010866  EC21  F0B1         	call	_SPI_DCS	;wreg free
 21054                           
 21055                           ;SPI.c: 126: pInput->mBusy = 0;
 21056  01086A  C0ED  FFD9         	movff	SPI_Init@pInput,fsr2l
 21057  01086E  C0EE  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 21058  010872  0E00               	movlw	0
 21059  010874  6EDF               	movwf	indf2,c
 21060                           
 21061                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 21062  010876  0100               	movlb	0	; () banked
 21063  010878  EE20 F006          	lfsr	2,6
 21064  01087C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21065  01087E  26D9               	addwf	fsr2l,f,c
 21066  010880  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21067  010882  22DA               	addwfc	fsr2h,f,c
 21068  010884  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 21069  010888  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 21070  01088C  0E00               	movlw	0
 21071  01088E  0100               	movlb	0	; () banked
 21072  010890  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21073  010892  0E03               	movlw	3
 21074  010894  0100               	movlb	0	; () banked
 21075  010896  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 21076  010898  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 21077                           
 21078                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21079  01089C  0100               	movlb	0	; () banked
 21080  01089E  EE20 F006          	lfsr	2,6
 21081  0108A2  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21082  0108A4  26D9               	addwf	fsr2l,f,c
 21083  0108A6  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21084  0108A8  22DA               	addwfc	fsr2h,f,c
 21085  0108AA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21086  0108AE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21087  0108B2  0E05               	movlw	5
 21088  0108B4  0100               	movlb	0	; () banked
 21089  0108B6  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21090  0108B8  0E01               	movlw	1
 21091  0108BA  0100               	movlb	0	; () banked
 21092  0108BC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21093  0108BE  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 21094  0108C2  0012               	return		;funcret
 21095  0108C4                     __end_of_SPI_Init:
 21096                           	opt stack 0
 21097                           tosu	equ	0xFFF
 21098                           tosh	equ	0xFFE
 21099                           tosl	equ	0xFFD
 21100                           pclath	equ	0xFFA
 21101                           tblptru	equ	0xFF8
 21102                           tblptrh	equ	0xFF7
 21103                           tblptrl	equ	0xFF6
 21104                           tablat	equ	0xFF5
 21105                           prodh	equ	0xFF4
 21106                           prodl	equ	0xFF3
 21107                           intcon	equ	0xFF2
 21108                           postinc0	equ	0xFEE
 21109                           wreg	equ	0xFE8
 21110                           indf1	equ	0xFE7
 21111                           postdec1	equ	0xFE5
 21112                           fsr1h	equ	0xFE2
 21113                           fsr1l	equ	0xFE1
 21114                           indf2	equ	0xFDF
 21115                           postinc2	equ	0xFDE
 21116                           postdec2	equ	0xFDD
 21117                           plusw2	equ	0xFDB
 21118                           fsr2h	equ	0xFDA
 21119                           fsr2l	equ	0xFD9
 21120                           status	equ	0xFD8
 21121                           
 21122 ;; *************** function _Timer2_Init *****************
 21123 ;; Defined at:
 21124 ;;		line 10 in file "Library/Timer2.c"
 21125 ;; Parameters:    Size  Location     Type
 21126 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 21127 ;; Auto vars:     Size  Location     Type
 21128 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 21129 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 21130 ;;  RDIV            4   18[BANK0 ] unsigned long 
 21131 ;; Return value:  Size  Location     Type
 21132 ;;                  1    wreg      void 
 21133 ;; Registers used:
 21134 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21135 ;; Tracked objects:
 21136 ;;		On entry : 0/0
 21137 ;;		On exit  : 0/0
 21138 ;;		Unchanged: 0/0
 21139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21140 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21141 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21143 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21144 ;;Total ram usage:       17 bytes
 21145 ;; Hardware stack levels used:    1
 21146 ;; Hardware stack levels required when called:    8
 21147 ;; This function calls:
 21148 ;;		_Timer2_Clear
 21149 ;;		___lldiv
 21150 ;; This function is called by:
 21151 ;;		_SPI_Init
 21152 ;; This function uses a non-reentrant model
 21153 ;;
 21154                           
 21155                           	psect	text98
 21156  0132EE                     __ptext98:
 21157                           	opt stack 0
 21158  0132EE                     _Timer2_Init:
 21159                           	opt stack 18
 21160                           
 21161                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 21162                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 21163                           ;Timer2.c: 14: static UINT8 PRE = 0;
 21164                           ;Timer2.c: 15: static UINT32 DIV = 0;
 21165                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 21166                           
 21167                           ;incstack = 0
 21168  0132EE  0E00               	movlw	0
 21169  0132F0  0100               	movlb	0	; () banked
 21170  0132F2  6FD0               	movwf	Timer2_Init@pCPUClock& (0+255),b
 21171  0132F4  0E6C               	movlw	108
 21172  0132F6  6FD1               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 21173  0132F8  0EDC               	movlw	220
 21174  0132FA  6FD2               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 21175  0132FC  0E02               	movlw	2
 21176  0132FE  6FD3               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 21177                           
 21178                           ; BSR set to: 0
 21179                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 21180                           ;Timer2.c: 20: pFrequency *= 2;
 21181  013300  0100               	movlb	0	; () banked
 21182  013302  90D8               	bcf	status,0,c
 21183  013304  37C7               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 21184  013306  37C8               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 21185  013308  37C9               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 21186  01330A  37CA               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 21187                           
 21188                           ; BSR set to: 0
 21189                           ;Timer2.c: 23: pCPUClock /= 4;
 21190  01330C  0E02               	movlw	2
 21191  01330E  0100               	movlb	0	; () banked
 21192  013310  6FCB               	movwf	??_Timer2_Init& (0+255),b
 21193  013312                     u9525:
 21194  013312  90D8               	bcf	status,0,c
 21195  013314  0100               	movlb	0	; () banked
 21196  013316  33D3               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 21197  013318  33D2               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 21198  01331A  33D1               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 21199  01331C  33D0               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 21200  01331E  0100               	movlb	0	; () banked
 21201  013320  2FCB               	decfsz	??_Timer2_Init& (0+255),f,b
 21202  013322  D7F7               	goto	u9525
 21203                           
 21204                           ; BSR set to: 0
 21205                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 21206  013324  C0D0  F0BA         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 21207  013328  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 21208  01332C  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 21209  013330  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 21210  013334  C0C7  F0BE         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 21211  013338  C0C8  F0BF         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 21212  01333C  C0C9  F0C0         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 21213  013340  C0CA  F0C1         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 21214  013344  ECBE  F0A1         	call	___lldiv	;wreg free
 21215  013348  C0BA  F0D4         	movff	?___lldiv,Timer2_Init@DIVIDE
 21216  01334C  C0BB  F0D5         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 21217  013350  C0BC  F0D6         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 21218  013354  C0BD  F0D7         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 21219                           
 21220                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 21221  013358  D010               	goto	l1828
 21222  01335A                     l12862:
 21223                           
 21224                           ;Timer2.c: 28: {
 21225                           ;Timer2.c: 29: RDIV = 0;
 21226  01335A  0E00               	movlw	0
 21227  01335C  0100               	movlb	0	; () banked
 21228  01335E  6FCC               	movwf	Timer2_Init@RDIV& (0+255),b
 21229  013360  0E00               	movlw	0
 21230  013362  6FCD               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 21231  013364  0E00               	movlw	0
 21232  013366  6FCE               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 21233  013368  0E00               	movlw	0
 21234  01336A  6FCF               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 21235                           
 21236                           ; BSR set to: 0
 21237                           ;Timer2.c: 30: INDEX ++;
 21238  01336C  0100               	movlb	0	; () banked
 21239  01336E  2B8B               	incf	Timer2_Init@INDEX& (0+255),f,b
 21240                           
 21241                           ; BSR set to: 0
 21242                           ;Timer2.c: 31: if (INDEX >= 3)
 21243  013370  0E02               	movlw	2
 21244  013372  0100               	movlb	0	; () banked
 21245  013374  658B               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 21246  013376  D001               	goto	l1828
 21247  013378  D026               	goto	u9540
 21248  01337A                     l1828:
 21249                           
 21250                           ; BSR set to: 0
 21251                           
 21252                           ; BSR set to: 0
 21253  01337A  C0D4  F0BA         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 21254  01337E  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 21255  013382  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 21256  013386  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 21257  01338A  0100               	movlb	0	; () banked
 21258  01338C  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21259  01338E  0D01               	mullw	1
 21260  013390  0E1C               	movlw	low Timer2_Init@PRESCALE
 21261  013392  24F3               	addwf	prodl,w,c
 21262  013394  6EF6               	movwf	tblptrl,c
 21263  013396  0EFD               	movlw	high Timer2_Init@PRESCALE
 21264  013398  20F4               	addwfc	prodh,w,c
 21265  01339A  6EF7               	movwf	tblptrh,c
 21266  01339C                     	if	1	;There are 3 active tblptr bytes
 21267  01339C  6AF8               	clrf	tblptru,c
 21268  01339E  0E00               	movlw	low (__mediumconst shr (0+16))
 21269  0133A0  22F8               	addwfc	tblptru,f,c
 21270  0133A2                     	endif
 21271  0133A2  0008               	tblrd		*
 21272  0133A4  50F5               	movf	tablat,w,c
 21273  0133A6  0100               	movlb	0	; () banked
 21274  0133A8  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21275  0133AA  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21276  0133AC  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21277  0133AE  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21278  0133B0  ECBE  F0A1         	call	___lldiv	;wreg free
 21279  0133B4  0100               	movlb	0	; () banked
 21280  0133B6  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 21281  0133B8  0100               	movlb	0	; () banked
 21282  0133BA  11BC               	iorwf	(?___lldiv+2)& (0+255),w,b
 21283  0133BC  E1CE               	bnz	l12862
 21284  0133BE  0100               	movlb	0	; () banked
 21285  0133C0  05BB               	decf	(?___lldiv+1)& (0+255),w,b
 21286  0133C2  B0D8               	btfsc	status,0,c
 21287  0133C4  D7CA               	goto	l1827
 21288  0133C6                     u9540:
 21289                           
 21290                           ; BSR set to: 0
 21291                           ;Timer2.c: 33: }
 21292                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 21293                           
 21294                           ; BSR set to: 0
 21295  0133C6  50CA               	movf	4042,w,c	;volatile
 21296  0133C8  0100               	movlb	0	; () banked
 21297  0133CA  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21298  0133CC  0BFC               	andlw	-4
 21299  0133CE  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21300  0133D0  6ECA               	movwf	4042,c	;volatile
 21301                           
 21302                           ; BSR set to: 0
 21303                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 21304  0133D2  84CA               	bsf	4042,2,c	;volatile
 21305                           
 21306                           ; BSR set to: 0
 21307                           ;Timer2.c: 44: Timer2_Clear();
 21308  0133D4  ECC9  F0B3         	call	_Timer2_Clear	;wreg free
 21309                           
 21310                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 21311  0133D8  0100               	movlb	0	; () banked
 21312  0133DA  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21313  0133DC  0D01               	mullw	1
 21314  0133DE  0E1C               	movlw	low Timer2_Init@PRESCALE
 21315  0133E0  24F3               	addwf	prodl,w,c
 21316  0133E2  6EF6               	movwf	tblptrl,c
 21317  0133E4  0EFD               	movlw	high Timer2_Init@PRESCALE
 21318  0133E6  20F4               	addwfc	prodh,w,c
 21319  0133E8  6EF7               	movwf	tblptrh,c
 21320  0133EA                     	if	1	;There are 3 active tblptr bytes
 21321  0133EA  6AF8               	clrf	tblptru,c
 21322  0133EC  0E00               	movlw	low (__mediumconst shr (0+16))
 21323  0133EE  22F8               	addwfc	tblptru,f,c
 21324  0133F0                     	endif
 21325  0133F0  0008               	tblrd		*
 21326  0133F2  CFF5 F08A          	movff	tablat,Timer2_Init@PRE
 21327                           
 21328                           ; BSR set to: 0
 21329                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 21330  0133F6  0EFF               	movlw	255
 21331  0133F8  0100               	movlb	0	; () banked
 21332  0133FA  25D4               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 21333  0133FC  0103               	movlb	3	; () banked
 21334  0133FE  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 21335  013400  0EFF               	movlw	255
 21336  013402  0100               	movlb	0	; () banked
 21337  013404  21D5               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 21338  013406  0103               	movlb	3	; () banked
 21339  013408  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 21340  01340A  0EFF               	movlw	255
 21341  01340C  0100               	movlb	0	; () banked
 21342  01340E  21D6               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 21343  013410  0103               	movlb	3	; () banked
 21344  013412  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 21345  013414  0EFF               	movlw	255
 21346  013416  0100               	movlb	0	; () banked
 21347  013418  21D7               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 21348  01341A  0103               	movlb	3	; () banked
 21349  01341C  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 21350                           
 21351                           ; BSR set to: 3
 21352                           ;Timer2.c: 48: INDEX = DIV/PRE;
 21353  01341E  C326  F0BA         	movff	Timer2_Init@DIV,___lldiv@dividend
 21354  013422  C327  F0BB         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 21355  013426  C328  F0BC         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 21356  01342A  C329  F0BD         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 21357  01342E  0100               	movlb	0	; () banked
 21358  013430  518A               	movf	Timer2_Init@PRE& (0+255),w,b
 21359  013432  0100               	movlb	0	; () banked
 21360  013434  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21361  013436  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21362  013438  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21363  01343A  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21364  01343C  ECBE  F0A1         	call	___lldiv	;wreg free
 21365  013440  0100               	movlb	0	; () banked
 21366  013442  51BA               	movf	?___lldiv& (0+255),w,b
 21367  013444  0100               	movlb	0	; () banked
 21368  013446  6F8B               	movwf	Timer2_Init@INDEX& (0+255),b
 21369                           
 21370                           ; BSR set to: 0
 21371                           ;Timer2.c: 49: PR2 = INDEX;
 21372  013448  C08B  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 21373                           
 21374                           ; BSR set to: 0
 21375  01344C  0012               	return		;funcret
 21376  01344E                     __end_of_Timer2_Init:
 21377                           	opt stack 0
 21378                           tosu	equ	0xFFF
 21379                           tosh	equ	0xFFE
 21380                           tosl	equ	0xFFD
 21381                           pclath	equ	0xFFA
 21382                           tblptru	equ	0xFF8
 21383                           tblptrh	equ	0xFF7
 21384                           tblptrl	equ	0xFF6
 21385                           tablat	equ	0xFF5
 21386                           prodh	equ	0xFF4
 21387                           prodl	equ	0xFF3
 21388                           intcon	equ	0xFF2
 21389                           postinc0	equ	0xFEE
 21390                           wreg	equ	0xFE8
 21391                           indf1	equ	0xFE7
 21392                           postdec1	equ	0xFE5
 21393                           fsr1h	equ	0xFE2
 21394                           fsr1l	equ	0xFE1
 21395                           indf2	equ	0xFDF
 21396                           postinc2	equ	0xFDE
 21397                           postdec2	equ	0xFDD
 21398                           plusw2	equ	0xFDB
 21399                           fsr2h	equ	0xFDA
 21400                           fsr2l	equ	0xFD9
 21401                           status	equ	0xFD8
 21402                           
 21403 ;; *************** function ___lldiv *****************
 21404 ;; Defined at:
 21405 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 21406 ;; Parameters:    Size  Location     Type
 21407 ;;  dividend        4    0[BANK0 ] unsigned long 
 21408 ;;  divisor         4    4[BANK0 ] unsigned long 
 21409 ;; Auto vars:     Size  Location     Type
 21410 ;;  quotient        4    8[BANK0 ] unsigned long 
 21411 ;;  counter         1   12[BANK0 ] unsigned char 
 21412 ;; Return value:  Size  Location     Type
 21413 ;;                  4    0[BANK0 ] unsigned long 
 21414 ;; Registers used:
 21415 ;;		wreg, status,2, status,0
 21416 ;; Tracked objects:
 21417 ;;		On entry : 0/0
 21418 ;;		On exit  : 0/0
 21419 ;;		Unchanged: 0/0
 21420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21421 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21422 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21424 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21425 ;;Total ram usage:       13 bytes
 21426 ;; Hardware stack levels used:    1
 21427 ;; Hardware stack levels required when called:    7
 21428 ;; This function calls:
 21429 ;;		Nothing
 21430 ;; This function is called by:
 21431 ;;		_Timer0_Init
 21432 ;;		_Timer2_Init
 21433 ;;		_rand_between
 21434 ;;		_I2C_Init
 21435 ;; This function uses a non-reentrant model
 21436 ;;
 21437                           
 21438                           	psect	text99
 21439  01437C                     __ptext99:
 21440                           	opt stack 0
 21441  01437C                     ___lldiv:
 21442                           	opt stack 19
 21443                           
 21444                           ; BSR set to: 0
 21445                           ;incstack = 0
 21446  01437C  0E00               	movlw	0
 21447  01437E  0100               	movlb	0	; () banked
 21448  014380  6FC2               	movwf	___lldiv@quotient& (0+255),b
 21449  014382  0E00               	movlw	0
 21450  014384  6FC3               	movwf	(___lldiv@quotient+1)& (0+255),b
 21451  014386  0E00               	movlw	0
 21452  014388  6FC4               	movwf	(___lldiv@quotient+2)& (0+255),b
 21453  01438A  0E00               	movlw	0
 21454  01438C  6FC5               	movwf	(___lldiv@quotient+3)& (0+255),b
 21455                           
 21456                           ; BSR set to: 0
 21457  01438E  0100               	movlb	0	; () banked
 21458  014390  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21459  014392  0100               	movlb	0	; () banked
 21460  014394  11BF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 21461  014396  0100               	movlb	0	; () banked
 21462  014398  11C0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 21463  01439A  0100               	movlb	0	; () banked
 21464  01439C  11C1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 21465  01439E  B4D8               	btfsc	status,2,c
 21466  0143A0  D042               	goto	l2808
 21467                           
 21468                           ; BSR set to: 0
 21469  0143A2  0E01               	movlw	1
 21470  0143A4  0100               	movlb	0	; () banked
 21471  0143A6  6FC6               	movwf	___lldiv@counter& (0+255),b
 21472  0143A8  D008               	goto	l2803
 21473  0143AA                     
 21474                           ; BSR set to: 0
 21475                           
 21476                           ; BSR set to: 0
 21477  0143AA  0100               	movlb	0	; () banked
 21478  0143AC  90D8               	bcf	status,0,c
 21479  0143AE  37BE               	rlcf	___lldiv@divisor& (0+255),f,b
 21480  0143B0  37BF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 21481  0143B2  37C0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 21482  0143B4  37C1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 21483  0143B6  0100               	movlb	0	; () banked
 21484  0143B8  2BC6               	incf	___lldiv@counter& (0+255),f,b
 21485  0143BA                     l2803:
 21486                           
 21487                           ; BSR set to: 0
 21488                           
 21489                           ; BSR set to: 0
 21490  0143BA  0100               	movlb	0	; () banked
 21491  0143BC  AFC1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 21492  0143BE  D7F5               	goto	l2804
 21493  0143C0                     u9400:
 21494                           
 21495                           ; BSR set to: 0
 21496                           
 21497                           ; BSR set to: 0
 21498                           
 21499                           ; BSR set to: 0
 21500  0143C0  0100               	movlb	0	; () banked
 21501  0143C2  90D8               	bcf	status,0,c
 21502  0143C4  37C2               	rlcf	___lldiv@quotient& (0+255),f,b
 21503  0143C6  37C3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 21504  0143C8  37C4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 21505  0143CA  37C5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 21506                           
 21507                           ; BSR set to: 0
 21508  0143CC  0100               	movlb	0	; () banked
 21509  0143CE  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21510  0143D0  0100               	movlb	0	; () banked
 21511  0143D2  5DBA               	subwf	___lldiv@dividend& (0+255),w,b
 21512  0143D4  0100               	movlb	0	; () banked
 21513  0143D6  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21514  0143D8  0100               	movlb	0	; () banked
 21515  0143DA  59BB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 21516  0143DC  0100               	movlb	0	; () banked
 21517  0143DE  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21518  0143E0  0100               	movlb	0	; () banked
 21519  0143E2  59BC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 21520  0143E4  0100               	movlb	0	; () banked
 21521  0143E6  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21522  0143E8  0100               	movlb	0	; () banked
 21523  0143EA  59BD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 21524  0143EC  A0D8               	btfss	status,0,c
 21525  0143EE  D012               	goto	l2807
 21526                           
 21527                           ; BSR set to: 0
 21528  0143F0  0100               	movlb	0	; () banked
 21529  0143F2  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21530  0143F4  0100               	movlb	0	; () banked
 21531  0143F6  5FBA               	subwf	___lldiv@dividend& (0+255),f,b
 21532  0143F8  0100               	movlb	0	; () banked
 21533  0143FA  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21534  0143FC  0100               	movlb	0	; () banked
 21535  0143FE  5BBB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 21536  014400  0100               	movlb	0	; () banked
 21537  014402  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21538  014404  0100               	movlb	0	; () banked
 21539  014406  5BBC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 21540  014408  0100               	movlb	0	; () banked
 21541  01440A  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21542  01440C  0100               	movlb	0	; () banked
 21543  01440E  5BBD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 21544                           
 21545                           ; BSR set to: 0
 21546  014410  0100               	movlb	0	; () banked
 21547  014412  81C2               	bsf	___lldiv@quotient& (0+255),0,b
 21548  014414                     l2807:
 21549                           
 21550                           ; BSR set to: 0
 21551                           
 21552                           ; BSR set to: 0
 21553  014414  0100               	movlb	0	; () banked
 21554  014416  90D8               	bcf	status,0,c
 21555  014418  33C1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 21556  01441A  33C0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 21557  01441C  33BF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 21558  01441E  33BE               	rrcf	___lldiv@divisor& (0+255),f,b
 21559                           
 21560                           ; BSR set to: 0
 21561  014420  0100               	movlb	0	; () banked
 21562  014422  2FC6               	decfsz	___lldiv@counter& (0+255),f,b
 21563  014424  D7CD               	goto	u9400
 21564  014426                     l2808:
 21565                           
 21566                           ; BSR set to: 0
 21567                           
 21568                           ; BSR set to: 0
 21569  014426  C0C2  F0BA         	movff	___lldiv@quotient,?___lldiv
 21570  01442A  C0C3  F0BB         	movff	___lldiv@quotient+1,?___lldiv+1
 21571  01442E  C0C4  F0BC         	movff	___lldiv@quotient+2,?___lldiv+2
 21572  014432  C0C5  F0BD         	movff	___lldiv@quotient+3,?___lldiv+3
 21573                           
 21574                           ; BSR set to: 0
 21575  014436  0012               	return		;funcret
 21576  014438                     __end_of___lldiv:
 21577                           	opt stack 0
 21578                           tosu	equ	0xFFF
 21579                           tosh	equ	0xFFE
 21580                           tosl	equ	0xFFD
 21581                           pclath	equ	0xFFA
 21582                           tblptru	equ	0xFF8
 21583                           tblptrh	equ	0xFF7
 21584                           tblptrl	equ	0xFF6
 21585                           tablat	equ	0xFF5
 21586                           prodh	equ	0xFF4
 21587                           prodl	equ	0xFF3
 21588                           intcon	equ	0xFF2
 21589                           postinc0	equ	0xFEE
 21590                           wreg	equ	0xFE8
 21591                           indf1	equ	0xFE7
 21592                           postdec1	equ	0xFE5
 21593                           fsr1h	equ	0xFE2
 21594                           fsr1l	equ	0xFE1
 21595                           indf2	equ	0xFDF
 21596                           postinc2	equ	0xFDE
 21597                           postdec2	equ	0xFDD
 21598                           plusw2	equ	0xFDB
 21599                           fsr2h	equ	0xFDA
 21600                           fsr2l	equ	0xFD9
 21601                           status	equ	0xFD8
 21602                           
 21603 ;; *************** function _Timer2_Clear *****************
 21604 ;; Defined at:
 21605 ;;		line 3 in file "Library/Timer2.c"
 21606 ;; Parameters:    Size  Location     Type
 21607 ;;		None
 21608 ;; Auto vars:     Size  Location     Type
 21609 ;;		None
 21610 ;; Return value:  Size  Location     Type
 21611 ;;                  1    wreg      void 
 21612 ;; Registers used:
 21613 ;;		None
 21614 ;; Tracked objects:
 21615 ;;		On entry : 0/0
 21616 ;;		On exit  : 0/0
 21617 ;;		Unchanged: 0/0
 21618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21623 ;;Total ram usage:        0 bytes
 21624 ;; Hardware stack levels used:    1
 21625 ;; Hardware stack levels required when called:    7
 21626 ;; This function calls:
 21627 ;;		Nothing
 21628 ;; This function is called by:
 21629 ;;		_Timer2_Init
 21630 ;; This function uses a non-reentrant model
 21631 ;;
 21632                           
 21633                           	psect	text100
 21634  016792                     __ptext100:
 21635                           	opt stack 0
 21636  016792                     _Timer2_Clear:
 21637                           	opt stack 18
 21638                           
 21639                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21640                           
 21641                           ; BSR set to: 0
 21642                           ;incstack = 0
 21643  016792  929E               	bcf	3998,1,c	;volatile
 21644                           
 21645                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21646  016794  929D               	bcf	3997,1,c	;volatile
 21647                           
 21648                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21649  016796  929F               	bcf	3999,1,c	;volatile
 21650  016798  0012               	return		;funcret
 21651  01679A                     __end_of_Timer2_Clear:
 21652                           	opt stack 0
 21653                           tosu	equ	0xFFF
 21654                           tosh	equ	0xFFE
 21655                           tosl	equ	0xFFD
 21656                           pclath	equ	0xFFA
 21657                           tblptru	equ	0xFF8
 21658                           tblptrh	equ	0xFF7
 21659                           tblptrl	equ	0xFF6
 21660                           tablat	equ	0xFF5
 21661                           prodh	equ	0xFF4
 21662                           prodl	equ	0xFF3
 21663                           intcon	equ	0xFF2
 21664                           postinc0	equ	0xFEE
 21665                           wreg	equ	0xFE8
 21666                           indf1	equ	0xFE7
 21667                           postdec1	equ	0xFE5
 21668                           fsr1h	equ	0xFE2
 21669                           fsr1l	equ	0xFE1
 21670                           indf2	equ	0xFDF
 21671                           postinc2	equ	0xFDE
 21672                           postdec2	equ	0xFDD
 21673                           plusw2	equ	0xFDB
 21674                           fsr2h	equ	0xFDA
 21675                           fsr2l	equ	0xFD9
 21676                           status	equ	0xFD8
 21677                           
 21678 ;; *************** function _SPI_DisableISR *****************
 21679 ;; Defined at:
 21680 ;;		line 181 in file "Library/SPI.c"
 21681 ;; Parameters:    Size  Location     Type
 21682 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21683 ;;		 -> SPI1(11), SPI2(11), 
 21684 ;; Auto vars:     Size  Location     Type
 21685 ;;		None
 21686 ;; Return value:  Size  Location     Type
 21687 ;;                  1    wreg      void 
 21688 ;; Registers used:
 21689 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21690 ;; Tracked objects:
 21691 ;;		On entry : 0/0
 21692 ;;		On exit  : 0/0
 21693 ;;		Unchanged: 0/0
 21694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21695 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21699 ;;Total ram usage:        2 bytes
 21700 ;; Hardware stack levels used:    1
 21701 ;; Hardware stack levels required when called:    7
 21702 ;; This function calls:
 21703 ;;		Nothing
 21704 ;; This function is called by:
 21705 ;;		_SPI_Init
 21706 ;; This function uses a non-reentrant model
 21707 ;;
 21708                           
 21709                           	psect	text101
 21710  016382                     __ptext101:
 21711                           	opt stack 0
 21712  016382                     _SPI_DisableISR:
 21713                           	opt stack 19
 21714                           
 21715                           ;SPI.c: 183: switch (pInput->mChannel)
 21716                           
 21717                           ;incstack = 0
 21718  016382  D004               	goto	l654
 21719  016384                     l655:
 21720                           
 21721                           ; BSR set to: 0
 21722  016384  969D               	bcf	3997,3,c	;volatile
 21723  016386  0012               	return	
 21724  016388                     l657:
 21725                           
 21726                           ; BSR set to: 0
 21727  016388  9EA3               	bcf	4003,7,c	;volatile
 21728                           
 21729                           ; BSR set to: 0
 21730                           ;SPI.c: 188: };
 21731                           
 21732                           ; BSR set to: 0
 21733                           
 21734                           ;SPI.c: 187: default: return;
 21735  01638A  0012               	return	
 21736  01638C                     l654:
 21737                           
 21738                           ; BSR set to: 0
 21739  01638C  0100               	movlb	0	; () banked
 21740  01638E  EE20 F002          	lfsr	2,2
 21741  016392  51BA               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21742  016394  26D9               	addwf	fsr2l,f,c
 21743  016396  51BB               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21744  016398  22DA               	addwfc	fsr2h,f,c
 21745  01639A  50DF               	movf	indf2,w,c
 21746                           
 21747                           ; Switch size 1, requested type "space"
 21748                           ; Number of cases is 2, Range of values is 0 to 1
 21749                           ; switch strategies available:
 21750                           ; Name         Instructions Cycles
 21751                           ; simple_byte            7     4 (average)
 21752                           ;	Chosen strategy is simple_byte
 21753  01639C  0A00               	xorlw	0	; case 0
 21754  01639E  B4D8               	btfsc	status,2,c
 21755  0163A0  D7F1               	goto	l655
 21756  0163A2  0A01               	xorlw	1	; case 1
 21757  0163A4  A4D8               	btfss	status,2,c
 21758  0163A6  0012               	return	
 21759  0163A8  D7EF               	goto	l657
 21760  0163AA                     __end_of_SPI_DisableISR:
 21761                           	opt stack 0
 21762                           tosu	equ	0xFFF
 21763                           tosh	equ	0xFFE
 21764                           tosl	equ	0xFFD
 21765                           pclath	equ	0xFFA
 21766                           tblptru	equ	0xFF8
 21767                           tblptrh	equ	0xFF7
 21768                           tblptrl	equ	0xFF6
 21769                           tablat	equ	0xFF5
 21770                           prodh	equ	0xFF4
 21771                           prodl	equ	0xFF3
 21772                           intcon	equ	0xFF2
 21773                           postinc0	equ	0xFEE
 21774                           wreg	equ	0xFE8
 21775                           indf1	equ	0xFE7
 21776                           postdec1	equ	0xFE5
 21777                           fsr1h	equ	0xFE2
 21778                           fsr1l	equ	0xFE1
 21779                           indf2	equ	0xFDF
 21780                           postinc2	equ	0xFDE
 21781                           postdec2	equ	0xFDD
 21782                           plusw2	equ	0xFDB
 21783                           fsr2h	equ	0xFDA
 21784                           fsr2l	equ	0xFD9
 21785                           status	equ	0xFD8
 21786                           
 21787 ;; *************** function _SPI_DCS *****************
 21788 ;; Defined at:
 21789 ;;		line 219 in file "Library/SPI.c"
 21790 ;; Parameters:    Size  Location     Type
 21791 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21792 ;;		 -> SPI1(11), SPI2(11), 
 21793 ;; Auto vars:     Size  Location     Type
 21794 ;;		None
 21795 ;; Return value:  Size  Location     Type
 21796 ;;                  1    wreg      void 
 21797 ;; Registers used:
 21798 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21799 ;; Tracked objects:
 21800 ;;		On entry : 0/0
 21801 ;;		On exit  : 0/0
 21802 ;;		Unchanged: 0/0
 21803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21804 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21808 ;;Total ram usage:        2 bytes
 21809 ;; Hardware stack levels used:    1
 21810 ;; Hardware stack levels required when called:    7
 21811 ;; This function calls:
 21812 ;;		Nothing
 21813 ;; This function is called by:
 21814 ;;		_SPI_Init
 21815 ;; This function uses a non-reentrant model
 21816 ;;
 21817                           
 21818                           	psect	text102
 21819  016242                     __ptext102:
 21820                           	opt stack 0
 21821  016242                     _SPI_DCS:
 21822                           	opt stack 19
 21823                           
 21824                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 21825                           
 21826                           ; BSR set to: 0
 21827                           ;incstack = 0
 21828  016242  0100               	movlb	0	; () banked
 21829  016244  EE20 F002          	lfsr	2,2
 21830  016248  51BA               	movf	SPI_DCS@pInput& (0+255),w,b
 21831  01624A  26D9               	addwf	fsr2l,f,c
 21832  01624C  51BB               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 21833  01624E  22DA               	addwfc	fsr2h,f,c
 21834  016250  50DF               	movf	indf2,w,c
 21835  016252  A4D8               	btfss	status,2,c
 21836  016254  D007               	goto	l673
 21837                           
 21838                           ; BSR set to: 0
 21839                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 21840  016256  C0A9  FFD9         	movff	_PortC+4,fsr2l
 21841  01625A  C0AA  FFDA         	movff	_PortC+5,fsr2h
 21842  01625E  0100               	movlb	0	; () banked
 21843  016260  84DF               	bsf	indf2,2,c
 21844  016262  0012               	return	
 21845  016264                     l673:
 21846                           
 21847                           ; BSR set to: 0
 21848                           ;SPI.c: 223: else
 21849                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 21850                           
 21851                           ; BSR set to: 0
 21852  016264  C09F  FFD9         	movff	_PortD+4,fsr2l
 21853  016268  C0A0  FFDA         	movff	_PortD+5,fsr2h
 21854  01626C  0100               	movlb	0	; () banked
 21855  01626E  8EDF               	bsf	indf2,7,c
 21856  016270  0012               	return	
 21857  016272                     __end_of_SPI_DCS:
 21858                           	opt stack 0
 21859                           tosu	equ	0xFFF
 21860                           tosh	equ	0xFFE
 21861                           tosl	equ	0xFFD
 21862                           pclath	equ	0xFFA
 21863                           tblptru	equ	0xFF8
 21864                           tblptrh	equ	0xFF7
 21865                           tblptrl	equ	0xFF6
 21866                           tablat	equ	0xFF5
 21867                           prodh	equ	0xFF4
 21868                           prodl	equ	0xFF3
 21869                           intcon	equ	0xFF2
 21870                           postinc0	equ	0xFEE
 21871                           wreg	equ	0xFE8
 21872                           indf1	equ	0xFE7
 21873                           postdec1	equ	0xFE5
 21874                           fsr1h	equ	0xFE2
 21875                           fsr1l	equ	0xFE1
 21876                           indf2	equ	0xFDF
 21877                           postinc2	equ	0xFDE
 21878                           postdec2	equ	0xFDD
 21879                           plusw2	equ	0xFDB
 21880                           fsr2h	equ	0xFDA
 21881                           fsr2l	equ	0xFD9
 21882                           status	equ	0xFD8
 21883                           
 21884 ;; *************** function _Button_Init *****************
 21885 ;; Defined at:
 21886 ;;		line 18 in file "Library/Button.c"
 21887 ;; Parameters:    Size  Location     Type
 21888 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 21889 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 21890 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 21891 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 21892 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 21893 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 21894 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 21895 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 21896 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 21897 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 21898 ;; Auto vars:     Size  Location     Type
 21899 ;;		None
 21900 ;; Return value:  Size  Location     Type
 21901 ;;                  1    wreg      void 
 21902 ;; Registers used:
 21903 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21904 ;; Tracked objects:
 21905 ;;		On entry : 0/0
 21906 ;;		On exit  : 0/0
 21907 ;;		Unchanged: 0/0
 21908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21909 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21912 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21913 ;;Total ram usage:       13 bytes
 21914 ;; Hardware stack levels used:    1
 21915 ;; Hardware stack levels required when called:   15
 21916 ;; This function calls:
 21917 ;;		_HMI_InitButtons
 21918 ;;		_MXK_InitDIPSwitch
 21919 ;;		_MXK_InitTestButton
 21920 ;; This function is called by:
 21921 ;;		_HMI_Init
 21922 ;;		_FunctInitButton
 21923 ;; This function uses a non-reentrant model
 21924 ;;
 21925                           
 21926                           	psect	text103
 21927  013ED4                     __ptext103:
 21928                           	opt stack 0
 21929  013ED4                     _Button_Init:
 21930                           	opt stack 13
 21931                           
 21932                           ;Button.c: 21: if(pInput==(void*)0)
 21933                           
 21934                           ; BSR set to: 0
 21935                           ;incstack = 0
 21936  013ED4  0101               	movlb	1	; () banked
 21937  013ED6  5100               	movf	Button_Init@pInput& (0+255),w,b
 21938  013ED8  0101               	movlb	1	; () banked
 21939  013EDA  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 21940  013EDC  B4D8               	btfsc	status,2,c
 21941  013EDE  0012               	return	
 21942                           
 21943                           ; BSR set to: 1
 21944                           ;Button.c: 23: if(pInitIO==(void*)0)
 21945                           
 21946                           ; BSR set to: 1
 21947                           
 21948                           ; BSR set to: 1
 21949                           ;Button.c: 22: return;
 21950  013EE0  0101               	movlb	1	; () banked
 21951  013EE2  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21952  013EE4  0101               	movlb	1	; () banked
 21953  013EE6  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21954  013EE8  0101               	movlb	1	; () banked
 21955  013EEA  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21956  013EEC  B4D8               	btfsc	status,2,c
 21957  013EEE  0012               	return	
 21958                           
 21959                           ; BSR set to: 1
 21960                           ;Button.c: 25: if(pGetState==(void*)0)
 21961                           
 21962                           ; BSR set to: 1
 21963                           
 21964                           ; BSR set to: 1
 21965                           ;Button.c: 24: return;
 21966  013EF0  0101               	movlb	1	; () banked
 21967  013EF2  5107               	movf	Button_Init@pGetState& (0+255),w,b
 21968  013EF4  0101               	movlb	1	; () banked
 21969  013EF6  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21970  013EF8  0101               	movlb	1	; () banked
 21971  013EFA  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21972  013EFC  B4D8               	btfsc	status,2,c
 21973  013EFE  0012               	return	
 21974                           
 21975                           ; BSR set to: 1
 21976                           ;Button.c: 27: if(pFunction==(void*)0)
 21977                           
 21978                           ; BSR set to: 1
 21979                           
 21980                           ; BSR set to: 1
 21981                           ;Button.c: 26: return;
 21982  013F00  0101               	movlb	1	; () banked
 21983  013F02  510A               	movf	Button_Init@pFunction& (0+255),w,b
 21984  013F04  0101               	movlb	1	; () banked
 21985  013F06  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21986  013F08  0101               	movlb	1	; () banked
 21987  013F0A  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21988  013F0C  B4D8               	btfsc	status,2,c
 21989  013F0E  0012               	return	
 21990                           
 21991                           ; BSR set to: 1
 21992                           ;Button.c: 30: if(pThreshold == 0)
 21993                           
 21994                           ; BSR set to: 1
 21995                           
 21996                           ; BSR set to: 1
 21997                           ;Button.c: 28: return;
 21998  013F10  0101               	movlb	1	; () banked
 21999  013F12  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 22000  013F14  0101               	movlb	1	; () banked
 22001  013F16  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 22002  013F18  A4D8               	btfss	status,2,c
 22003  013F1A  D005               	goto	l8
 22004                           
 22005                           ; BSR set to: 1
 22006                           ;Button.c: 31: pThreshold = 1;
 22007  013F1C  0E00               	movlw	0
 22008  013F1E  0101               	movlb	1	; () banked
 22009  013F20  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22010  013F22  0E01               	movlw	1
 22011  013F24  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 22012  013F26                     l8:
 22013                           
 22014                           ; BSR set to: 1
 22015                           ;Button.c: 34: pInput->mState = 0;
 22016                           
 22017                           ; BSR set to: 1
 22018  013F26  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 22019  013F2A  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 22020  013F2E  0E00               	movlw	0
 22021  013F30  6EDF               	movwf	indf2,c
 22022                           
 22023                           ; BSR set to: 1
 22024                           ;Button.c: 35: pInput->mCount = 0;
 22025  013F32  0101               	movlb	1	; () banked
 22026  013F34  EE20 F001          	lfsr	2,1
 22027  013F38  5100               	movf	Button_Init@pInput& (0+255),w,b
 22028  013F3A  26D9               	addwf	fsr2l,f,c
 22029  013F3C  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22030  013F3E  22DA               	addwfc	fsr2h,f,c
 22031  013F40  0E00               	movlw	0
 22032  013F42  6EDF               	movwf	indf2,c
 22033                           
 22034                           ; BSR set to: 1
 22035                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 22036  013F44  0101               	movlb	1	; () banked
 22037  013F46  EE20 F002          	lfsr	2,2
 22038  013F4A  5100               	movf	Button_Init@pInput& (0+255),w,b
 22039  013F4C  26D9               	addwf	fsr2l,f,c
 22040  013F4E  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22041  013F50  22DA               	addwfc	fsr2h,f,c
 22042  013F52  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 22043  013F56  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 22044                           
 22045                           ; BSR set to: 1
 22046                           ;Button.c: 37: pInput->mFunction = pFunction;
 22047  013F5A  0101               	movlb	1	; () banked
 22048  013F5C  EE20 F004          	lfsr	2,4
 22049  013F60  5100               	movf	Button_Init@pInput& (0+255),w,b
 22050  013F62  26D9               	addwf	fsr2l,f,c
 22051  013F64  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22052  013F66  22DA               	addwfc	fsr2h,f,c
 22053  013F68  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 22054  013F6C  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 22055  013F70  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 22056                           
 22057                           ; BSR set to: 1
 22058                           ;Button.c: 38: pInput->mGetState = pGetState;
 22059  013F74  0101               	movlb	1	; () banked
 22060  013F76  EE20 F007          	lfsr	2,7
 22061  013F7A  5100               	movf	Button_Init@pInput& (0+255),w,b
 22062  013F7C  26D9               	addwf	fsr2l,f,c
 22063  013F7E  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22064  013F80  22DA               	addwfc	fsr2h,f,c
 22065  013F82  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 22066  013F86  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 22067  013F8A  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 22068                           
 22069                           ; BSR set to: 1
 22070                           ;Button.c: 41: pInitIO();
 22071  013F8E  D801               	call	u10688
 22072  013F90  0012               	return	
 22073  013F92                     u10688:
 22074  013F92  0005               	push	
 22075  013F94  6EFA               	movwf	pclath,c
 22076  013F96  0101               	movlb	1	; () banked
 22077  013F98  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 22078  013F9A  6EFD               	movwf	tosl,c
 22079  013F9C  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 22080  013F9E  6EFE               	movwf	tosh,c
 22081  013FA0  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 22082  013FA2  6EFF               	movwf	tosu,c
 22083  013FA4  50FA               	movf	pclath,w,c
 22084  013FA6  0012               	return		;indir
 22085  013FA8                     __end_of_Button_Init:
 22086                           	opt stack 0
 22087                           tosu	equ	0xFFF
 22088                           tosh	equ	0xFFE
 22089                           tosl	equ	0xFFD
 22090                           pclath	equ	0xFFA
 22091                           tblptru	equ	0xFF8
 22092                           tblptrh	equ	0xFF7
 22093                           tblptrl	equ	0xFF6
 22094                           tablat	equ	0xFF5
 22095                           prodh	equ	0xFF4
 22096                           prodl	equ	0xFF3
 22097                           intcon	equ	0xFF2
 22098                           postinc0	equ	0xFEE
 22099                           wreg	equ	0xFE8
 22100                           indf1	equ	0xFE7
 22101                           postdec1	equ	0xFE5
 22102                           fsr1h	equ	0xFE2
 22103                           fsr1l	equ	0xFE1
 22104                           indf2	equ	0xFDF
 22105                           postinc2	equ	0xFDE
 22106                           postdec2	equ	0xFDD
 22107                           plusw2	equ	0xFDB
 22108                           fsr2h	equ	0xFDA
 22109                           fsr2l	equ	0xFD9
 22110                           status	equ	0xFD8
 22111                           
 22112 ;; *************** function _MXK_InitDIPSwitch *****************
 22113 ;; Defined at:
 22114 ;;		line 20 in file "Library/MXK.c"
 22115 ;; Parameters:    Size  Location     Type
 22116 ;;		None
 22117 ;; Auto vars:     Size  Location     Type
 22118 ;;		None
 22119 ;; Return value:  Size  Location     Type
 22120 ;;                  1    wreg      void 
 22121 ;; Registers used:
 22122 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22123 ;; Tracked objects:
 22124 ;;		On entry : 0/0
 22125 ;;		On exit  : 0/0
 22126 ;;		Unchanged: 0/0
 22127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22132 ;;Total ram usage:        0 bytes
 22133 ;; Hardware stack levels used:    1
 22134 ;; Hardware stack levels required when called:   14
 22135 ;; This function calls:
 22136 ;;		_Port_SetQuadType
 22137 ;; This function is called by:
 22138 ;;		_FunctInitButton
 22139 ;;		_Button_Init
 22140 ;; This function uses a non-reentrant model
 22141 ;;
 22142                           
 22143                           	psect	text104
 22144  0164EC                     __ptext104:
 22145                           	opt stack 0
 22146  0164EC                     _MXK_InitDIPSwitch:
 22147                           	opt stack 13
 22148                           
 22149                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 22150                           
 22151                           ;incstack = 0
 22152  0164EC  0E9B               	movlw	low _PortD
 22153  0164EE  0100               	movlb	0	; () banked
 22154  0164F0  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 22155  0164F2  0E00               	movlw	high _PortD
 22156  0164F4  0100               	movlb	0	; () banked
 22157  0164F6  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 22158  0164F8  0E00               	movlw	0
 22159  0164FA  0100               	movlb	0	; () banked
 22160  0164FC  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 22161  0164FE  0E00               	movlw	0
 22162  016500  0100               	movlb	0	; () banked
 22163  016502  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 22164  016504  EC53  F08D         	call	_Port_SetQuadType	;wreg free
 22165  016508  0012               	return		;funcret
 22166  01650A                     __end_of_MXK_InitDIPSwitch:
 22167                           	opt stack 0
 22168                           tosu	equ	0xFFF
 22169                           tosh	equ	0xFFE
 22170                           tosl	equ	0xFFD
 22171                           pclath	equ	0xFFA
 22172                           tblptru	equ	0xFF8
 22173                           tblptrh	equ	0xFF7
 22174                           tblptrl	equ	0xFF6
 22175                           tablat	equ	0xFF5
 22176                           prodh	equ	0xFF4
 22177                           prodl	equ	0xFF3
 22178                           intcon	equ	0xFF2
 22179                           postinc0	equ	0xFEE
 22180                           wreg	equ	0xFE8
 22181                           indf1	equ	0xFE7
 22182                           postdec1	equ	0xFE5
 22183                           fsr1h	equ	0xFE2
 22184                           fsr1l	equ	0xFE1
 22185                           indf2	equ	0xFDF
 22186                           postinc2	equ	0xFDE
 22187                           postdec2	equ	0xFDD
 22188                           plusw2	equ	0xFDB
 22189                           fsr2h	equ	0xFDA
 22190                           fsr2l	equ	0xFD9
 22191                           status	equ	0xFD8
 22192                           
 22193 ;; *************** function _HMI_InitButtons *****************
 22194 ;; Defined at:
 22195 ;;		line 21 in file "HMI.c"
 22196 ;; Parameters:    Size  Location     Type
 22197 ;;		None
 22198 ;; Auto vars:     Size  Location     Type
 22199 ;;		None
 22200 ;; Return value:  Size  Location     Type
 22201 ;;                  1    wreg      void 
 22202 ;; Registers used:
 22203 ;;		wreg, status,2
 22204 ;; Tracked objects:
 22205 ;;		On entry : 0/0
 22206 ;;		On exit  : 0/0
 22207 ;;		Unchanged: 0/0
 22208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22213 ;;Total ram usage:        0 bytes
 22214 ;; Hardware stack levels used:    1
 22215 ;; Hardware stack levels required when called:    7
 22216 ;; This function calls:
 22217 ;;		Nothing
 22218 ;; This function is called by:
 22219 ;;		_HMI_Init
 22220 ;;		_Button_Init
 22221 ;; This function uses a non-reentrant model
 22222 ;;
 22223                           
 22224                           	psect	text105
 22225  0167B0                     __ptext105:
 22226                           	opt stack 0
 22227  0167B0                     _HMI_InitButtons:
 22228                           	opt stack 20
 22229                           
 22230                           ;HMI.c: 23: TRISE = 0xFC;
 22231                           
 22232                           ;incstack = 0
 22233  0167B0  0EFC               	movlw	252
 22234  0167B2  6E96               	movwf	3990,c	;volatile
 22235  0167B4  0012               	return		;funcret
 22236  0167B6                     __end_of_HMI_InitButtons:
 22237                           	opt stack 0
 22238                           tosu	equ	0xFFF
 22239                           tosh	equ	0xFFE
 22240                           tosl	equ	0xFFD
 22241                           pclath	equ	0xFFA
 22242                           tblptru	equ	0xFF8
 22243                           tblptrh	equ	0xFF7
 22244                           tblptrl	equ	0xFF6
 22245                           tablat	equ	0xFF5
 22246                           prodh	equ	0xFF4
 22247                           prodl	equ	0xFF3
 22248                           intcon	equ	0xFF2
 22249                           postinc0	equ	0xFEE
 22250                           wreg	equ	0xFE8
 22251                           indf1	equ	0xFE7
 22252                           postdec1	equ	0xFE5
 22253                           fsr1h	equ	0xFE2
 22254                           fsr1l	equ	0xFE1
 22255                           indf2	equ	0xFDF
 22256                           postinc2	equ	0xFDE
 22257                           postdec2	equ	0xFDD
 22258                           plusw2	equ	0xFDB
 22259                           fsr2h	equ	0xFDA
 22260                           fsr2l	equ	0xFD9
 22261                           status	equ	0xFD8
 22262                           
 22263 ;; *************** function _MXK_InitTestButton *****************
 22264 ;; Defined at:
 22265 ;;		line 10 in file "Library/MXK.c"
 22266 ;; Parameters:    Size  Location     Type
 22267 ;;		None
 22268 ;; Auto vars:     Size  Location     Type
 22269 ;;		None
 22270 ;; Return value:  Size  Location     Type
 22271 ;;                  1    wreg      void 
 22272 ;; Registers used:
 22273 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22274 ;; Tracked objects:
 22275 ;;		On entry : 0/0
 22276 ;;		On exit  : 0/0
 22277 ;;		Unchanged: 0/0
 22278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22283 ;;Total ram usage:        0 bytes
 22284 ;; Hardware stack levels used:    1
 22285 ;; Hardware stack levels required when called:   12
 22286 ;; This function calls:
 22287 ;;		_Port_SetPinType
 22288 ;; This function is called by:
 22289 ;;		_FunctInitButton
 22290 ;;		_Button_Init
 22291 ;; This function uses a non-reentrant model
 22292 ;;
 22293                           
 22294                           	psect	text106
 22295  01650A                     __ptext106:
 22296                           	opt stack 0
 22297  01650A                     _MXK_InitTestButton:
 22298                           	opt stack 15
 22299                           
 22300                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 22301                           
 22302                           ;incstack = 0
 22303  01650A  0EAE               	movlw	low _PortB
 22304  01650C  0100               	movlb	0	; () banked
 22305  01650E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22306  016510  0E03               	movlw	high _PortB
 22307  016512  0100               	movlb	0	; () banked
 22308  016514  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22309  016516  0E04               	movlw	4
 22310  016518  0100               	movlb	0	; () banked
 22311  01651A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22312  01651C  0E00               	movlw	0
 22313  01651E  0100               	movlb	0	; () banked
 22314  016520  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22315  016522  EC60  F093         	call	_Port_SetPinType	;wreg free
 22316  016526  0012               	return		;funcret
 22317  016528                     __end_of_MXK_InitTestButton:
 22318                           	opt stack 0
 22319                           tosu	equ	0xFFF
 22320                           tosh	equ	0xFFE
 22321                           tosl	equ	0xFFD
 22322                           pclath	equ	0xFFA
 22323                           tblptru	equ	0xFF8
 22324                           tblptrh	equ	0xFF7
 22325                           tblptrl	equ	0xFF6
 22326                           tablat	equ	0xFF5
 22327                           prodh	equ	0xFF4
 22328                           prodl	equ	0xFF3
 22329                           intcon	equ	0xFF2
 22330                           postinc0	equ	0xFEE
 22331                           wreg	equ	0xFE8
 22332                           indf1	equ	0xFE7
 22333                           postdec1	equ	0xFE5
 22334                           fsr1h	equ	0xFE2
 22335                           fsr1l	equ	0xFE1
 22336                           indf2	equ	0xFDF
 22337                           postinc2	equ	0xFDE
 22338                           postdec2	equ	0xFDD
 22339                           plusw2	equ	0xFDB
 22340                           fsr2h	equ	0xFDA
 22341                           fsr2l	equ	0xFD9
 22342                           status	equ	0xFD8
 22343                           
 22344 ;; *************** function _Port_SetPinType *****************
 22345 ;; Defined at:
 22346 ;;		line 189 in file "Library/Port.c"
 22347 ;; Parameters:    Size  Location     Type
 22348 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22349 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22350 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22351 ;;  pPin            1   40[BANK0 ] enum E6750
 22352 ;;  pType           1   41[BANK0 ] enum E6795
 22353 ;; Auto vars:     Size  Location     Type
 22354 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 22355 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 22356 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 22357 ;;  Output          1   42[BANK0 ] enum E6475
 22358 ;; Return value:  Size  Location     Type
 22359 ;;                  1    wreg      enum E6475
 22360 ;; Registers used:
 22361 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22362 ;; Tracked objects:
 22363 ;;		On entry : 0/0
 22364 ;;		On exit  : 0/0
 22365 ;;		Unchanged: 0/0
 22366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22367 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22368 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22370 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22371 ;;Total ram usage:        7 bytes
 22372 ;; Hardware stack levels used:    1
 22373 ;; Hardware stack levels required when called:   11
 22374 ;; This function calls:
 22375 ;;		_Byte_SetBit
 22376 ;;		_PortProperty_Valid
 22377 ;;		_Word_SetPair
 22378 ;; This function is called by:
 22379 ;;		_Configure_GPIOs
 22380 ;;		_LED_Init
 22381 ;;		_Port_Init
 22382 ;;		_SPI_Init
 22383 ;;		_Motor_Init
 22384 ;;		_MXK_InitTestButton
 22385 ;;		_MXK_Init
 22386 ;;		_I2C_Init
 22387 ;; This function uses a non-reentrant model
 22388 ;;
 22389                           
 22390                           	psect	text107
 22391  0126C0                     __ptext107:
 22392                           	opt stack 0
 22393  0126C0                     _Port_SetPinType:
 22394                           	opt stack 17
 22395                           
 22396                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 22397                           
 22398                           ;incstack = 0
 22399  0126C0  C0E0  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 22400  0126C4  C0E1  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 22401  0126C8  CFDE F0E5          	movff	postinc2,Port_SetPinType@Props
 22402  0126CC  CFDD F0E6          	movff	postdec2,Port_SetPinType@Props+1
 22403                           
 22404                           ;Port.c: 192: ePinError Output = ePinErrorState;
 22405  0126D0  0E05               	movlw	5
 22406  0126D2  0100               	movlb	0	; () banked
 22407  0126D4  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22408                           
 22409                           ;Port.c: 193: switch (pType)
 22410  0126D6  D0B5               	goto	l412
 22411  0126D8                     
 22412                           ; BSR set to: 0
 22413                           ;Port.c: 197: {
 22414                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22415                           
 22416                           ; BSR set to: 0
 22417  0126D8  0100               	movlb	0	; () banked
 22418  0126DA  EE20 F002          	lfsr	2,2
 22419  0126DE  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22420  0126E0  26D9               	addwf	fsr2l,f,c
 22421  0126E2  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22422  0126E4  22DA               	addwfc	fsr2h,f,c
 22423  0126E6  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22424  0126EA  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22425  0126EE  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22426  0126F2  0E01               	movlw	1
 22427  0126F4  0100               	movlb	0	; () banked
 22428  0126F6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22429  0126F8  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 22430                           
 22431                           ;Port.c: 203: break;
 22432  0126FC  D0B0               	goto	l414
 22433  0126FE                     
 22434                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 22435  0126FE  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22436  012702  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22437  012706  0E01               	movlw	1
 22438  012708  0100               	movlb	0	; () banked
 22439  01270A  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22440  01270C  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22441  012710  ECD9  F0A8         	call	_PortProperty_Valid	;wreg free
 22442  012714  0100               	movlb	0	; () banked
 22443  012716  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22444  012718  0100               	movlb	0	; () banked
 22445  01271A  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22446  01271C  A4D8               	btfss	status,2,c
 22447  01271E  0012               	return	
 22448                           
 22449                           ; BSR set to: 0
 22450                           ;Port.c: 208: {
 22451                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22452  012720  0100               	movlb	0	; () banked
 22453  012722  EE20 F002          	lfsr	2,2
 22454  012726  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22455  012728  26D9               	addwf	fsr2l,f,c
 22456  01272A  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22457  01272C  22DA               	addwfc	fsr2h,f,c
 22458  01272E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22459  012732  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22460  012736  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22461  01273A  0E00               	movlw	0
 22462  01273C  0100               	movlb	0	; () banked
 22463  01273E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22464  012740  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 22465                           
 22466                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22467  012744  0100               	movlb	0	; () banked
 22468  012746  EE20 F004          	lfsr	2,4
 22469  01274A  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22470  01274C  26D9               	addwf	fsr2l,f,c
 22471  01274E  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22472  012750  22DA               	addwfc	fsr2h,f,c
 22473  012752  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22474  012756  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22475  01275A  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22476  01275E  0E00               	movlw	0
 22477  012760  0100               	movlb	0	; () banked
 22478  012762  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22479  012764  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 22480                           
 22481                           ;Port.c: 214: break;
 22482  012768  D07A               	goto	l414
 22483  01276A                     
 22484                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 22485                           
 22486                           ;Port.c: 218: case eTypeOutputOpenSource:
 22487  01276A  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22488  01276E  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22489  012772  0E02               	movlw	2
 22490  012774  0100               	movlb	0	; () banked
 22491  012776  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22492  012778  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22493  01277C  ECD9  F0A8         	call	_PortProperty_Valid	;wreg free
 22494  012780  0100               	movlb	0	; () banked
 22495  012782  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22496  012784  0100               	movlb	0	; () banked
 22497  012786  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22498  012788  A4D8               	btfss	status,2,c
 22499  01278A  0012               	return	
 22500                           
 22501                           ; BSR set to: 0
 22502                           ;Port.c: 220: {
 22503                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22504  01278C  0100               	movlb	0	; () banked
 22505  01278E  EE20 F002          	lfsr	2,2
 22506  012792  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22507  012794  26D9               	addwf	fsr2l,f,c
 22508  012796  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22509  012798  22DA               	addwfc	fsr2h,f,c
 22510  01279A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22511  01279E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22512  0127A2  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22513  0127A6  0E01               	movlw	1
 22514  0127A8  0100               	movlb	0	; () banked
 22515  0127AA  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22516  0127AC  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 22517                           
 22518                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 22519  0127B0  0100               	movlb	0	; () banked
 22520  0127B2  EE20 F004          	lfsr	2,4
 22521  0127B6  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22522  0127B8  26D9               	addwf	fsr2l,f,c
 22523  0127BA  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22524  0127BC  22DA               	addwfc	fsr2h,f,c
 22525  0127BE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22526  0127C2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22527  0127C6  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22528  0127CA  0E01               	movlw	1
 22529  0127CC  0100               	movlb	0	; () banked
 22530  0127CE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22531  0127D0  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 22532                           
 22533                           ;Port.c: 226: break;
 22534  0127D4  D044               	goto	l414
 22535  0127D6                     
 22536                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 22537                           
 22538                           ;Port.c: 230: case eTypeOutputPushPull:
 22539  0127D6  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22540  0127DA  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22541  0127DE  0E00               	movlw	0
 22542  0127E0  0100               	movlb	0	; () banked
 22543  0127E2  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22544  0127E4  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22545  0127E8  ECD9  F0A8         	call	_PortProperty_Valid	;wreg free
 22546  0127EC  0100               	movlb	0	; () banked
 22547  0127EE  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22548  0127F0  0100               	movlb	0	; () banked
 22549  0127F2  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22550  0127F4  A4D8               	btfss	status,2,c
 22551  0127F6  0012               	return	
 22552                           
 22553                           ; BSR set to: 0
 22554                           ;Port.c: 232: {
 22555                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22556  0127F8  0100               	movlb	0	; () banked
 22557  0127FA  EE20 F002          	lfsr	2,2
 22558  0127FE  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22559  012800  26D9               	addwf	fsr2l,f,c
 22560  012802  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22561  012804  22DA               	addwfc	fsr2h,f,c
 22562  012806  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22563  01280A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22564  01280E  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22565  012812  0E00               	movlw	0
 22566  012814  0100               	movlb	0	; () banked
 22567  012816  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22568  012818  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 22569                           
 22570                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22571  01281C  0100               	movlb	0	; () banked
 22572  01281E  EE20 F004          	lfsr	2,4
 22573  012822  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22574  012824  26D9               	addwf	fsr2l,f,c
 22575  012826  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22576  012828  22DA               	addwfc	fsr2h,f,c
 22577  01282A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22578  01282E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22579  012832  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22580  012836  0E00               	movlw	0
 22581  012838  0100               	movlb	0	; () banked
 22582  01283A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22583  01283C  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 22584                           
 22585                           ;Port.c: 239: }
 22586                           
 22587                           ;Port.c: 238: break;
 22588  012840  D00E               	goto	l414
 22589  012842                     l412:
 22590  012842  0100               	movlb	0	; () banked
 22591  012844  51E3               	movf	Port_SetPinType@pType& (0+255),w,b
 22592                           
 22593                           ; Switch size 1, requested type "space"
 22594                           ; Number of cases is 4, Range of values is 0 to 3
 22595                           ; switch strategies available:
 22596                           ; Name         Instructions Cycles
 22597                           ; simple_byte           13     7 (average)
 22598                           ;	Chosen strategy is simple_byte
 22599  012846  0A00               	xorlw	0	; case 0
 22600  012848  B4D8               	btfsc	status,2,c
 22601  01284A  D746               	goto	l413
 22602  01284C  0A01               	xorlw	1	; case 1
 22603  01284E  B4D8               	btfsc	status,2,c
 22604  012850  D756               	goto	l415
 22605  012852  0A03               	xorlw	3	; case 2
 22606  012854  B4D8               	btfsc	status,2,c
 22607  012856  D789               	goto	l417
 22608  012858  0A01               	xorlw	1	; case 3
 22609  01285A  B4D8               	btfsc	status,2,c
 22610  01285C  D7BC               	goto	l421
 22611  01285E                     l414:
 22612                           
 22613                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22614                           
 22615                           ; BSR set to: 0
 22616  01285E  0E08               	movlw	8
 22617  012860  0100               	movlb	0	; () banked
 22618  012862  25E0               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22619  012864  0100               	movlb	0	; () banked
 22620  012866  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22621  012868  0E00               	movlw	0
 22622  01286A  0100               	movlb	0	; () banked
 22623  01286C  21E1               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22624  01286E  0100               	movlb	0	; () banked
 22625  012870  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22626  012872  C0E2  F0CB         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22627  012876  C0E3  F0CC         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22628  01287A  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 22629  01287E  0012               	return	
 22630  012880                     __end_of_Port_SetPinType:
 22631                           	opt stack 0
 22632                           tosu	equ	0xFFF
 22633                           tosh	equ	0xFFE
 22634                           tosl	equ	0xFFD
 22635                           pclath	equ	0xFFA
 22636                           tblptru	equ	0xFF8
 22637                           tblptrh	equ	0xFF7
 22638                           tblptrl	equ	0xFF6
 22639                           tablat	equ	0xFF5
 22640                           prodh	equ	0xFF4
 22641                           prodl	equ	0xFF3
 22642                           intcon	equ	0xFF2
 22643                           postinc0	equ	0xFEE
 22644                           wreg	equ	0xFE8
 22645                           indf1	equ	0xFE7
 22646                           postdec1	equ	0xFE5
 22647                           fsr1h	equ	0xFE2
 22648                           fsr1l	equ	0xFE1
 22649                           indf2	equ	0xFDF
 22650                           postinc2	equ	0xFDE
 22651                           postdec2	equ	0xFDD
 22652                           plusw2	equ	0xFDB
 22653                           fsr2h	equ	0xFDA
 22654                           fsr2l	equ	0xFD9
 22655                           status	equ	0xFD8
 22656                           
 22657 ;; *************** function _Port_SetQuadType *****************
 22658 ;; Defined at:
 22659 ;;		line 399 in file "Library/Port.c"
 22660 ;; Parameters:    Size  Location     Type
 22661 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22662 ;;		 -> PortB(10), PortD(10), 
 22663 ;;  pQuad           1   56[BANK0 ] enum E6776
 22664 ;;  pType           1   57[BANK0 ] enum E6795
 22665 ;; Auto vars:     Size  Location     Type
 22666 ;;  Output          1   58[BANK0 ] enum E6475
 22667 ;; Return value:  Size  Location     Type
 22668 ;;                  1    wreg      enum E6475
 22669 ;; Registers used:
 22670 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22671 ;; Tracked objects:
 22672 ;;		On entry : 0/0
 22673 ;;		On exit  : 0/0
 22674 ;;		Unchanged: 0/0
 22675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22676 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22679 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22680 ;;Total ram usage:        5 bytes
 22681 ;; Hardware stack levels used:    1
 22682 ;; Hardware stack levels required when called:   13
 22683 ;; This function calls:
 22684 ;;		_Byte_SetQuad
 22685 ;;		_Port_CheckQuadType
 22686 ;;		_Word_SetPair
 22687 ;; This function is called by:
 22688 ;;		_MXK_InitDIPSwitch
 22689 ;;		_MXK_Init
 22690 ;; This function uses a non-reentrant model
 22691 ;;
 22692                           
 22693                           	psect	text108
 22694  011AA6                     __ptext108:
 22695                           	opt stack 0
 22696  011AA6                     _Port_SetQuadType:
 22697                           	opt stack 15
 22698                           
 22699                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22700                           
 22701                           ;incstack = 0
 22702  011AA6  0E05               	movlw	5
 22703  011AA8  0100               	movlb	0	; () banked
 22704  011AAA  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22705                           
 22706                           ;Port.c: 403: switch (pType)
 22707  011AAC  D0C7               	goto	l476
 22708  011AAE                     
 22709                           ; BSR set to: 0
 22710                           ;Port.c: 407: {
 22711                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22712                           
 22713                           ; BSR set to: 0
 22714  011AAE  0100               	movlb	0	; () banked
 22715  011AB0  EE20 F002          	lfsr	2,2
 22716  011AB4  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22717  011AB6  26D9               	addwf	fsr2l,f,c
 22718  011AB8  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22719  011ABA  22DA               	addwfc	fsr2h,f,c
 22720  011ABC  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22721  011AC0  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22722  011AC4  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22723  011AC8  0E0F               	movlw	15
 22724  011ACA  0100               	movlb	0	; () banked
 22725  011ACC  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22726  011ACE  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 22727                           
 22728                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22729  011AD2  0100               	movlb	0	; () banked
 22730  011AD4  EE20 F004          	lfsr	2,4
 22731  011AD8  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22732  011ADA  26D9               	addwf	fsr2l,f,c
 22733  011ADC  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22734  011ADE  22DA               	addwfc	fsr2h,f,c
 22735  011AE0  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22736  011AE4  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22737  011AE8  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22738  011AEC  0E00               	movlw	0
 22739  011AEE  0100               	movlb	0	; () banked
 22740  011AF0  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22741  011AF2  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 22742                           
 22743                           ;Port.c: 413: }
 22744                           ;Port.c: 415: break;
 22745  011AF6  D0B0               	goto	l478
 22746  011AF8                     
 22747                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22748  011AF8  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22749  011AFC  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22750  011B00  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22751  011B04  0E03               	movlw	3
 22752  011B06  0100               	movlb	0	; () banked
 22753  011B08  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22754  011B0A  EC1E  F0AD         	call	_Port_CheckQuadType	;wreg free
 22755  011B0E  0100               	movlb	0	; () banked
 22756  011B10  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22757  011B12  0100               	movlb	0	; () banked
 22758  011B14  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22759  011B16  A4D8               	btfss	status,2,c
 22760  011B18  0012               	return	
 22761                           
 22762                           ; BSR set to: 0
 22763                           ;Port.c: 418: {
 22764                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22765  011B1A  0100               	movlb	0	; () banked
 22766  011B1C  EE20 F002          	lfsr	2,2
 22767  011B20  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22768  011B22  26D9               	addwf	fsr2l,f,c
 22769  011B24  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22770  011B26  22DA               	addwfc	fsr2h,f,c
 22771  011B28  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22772  011B2C  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22773  011B30  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22774  011B34  0E00               	movlw	0
 22775  011B36  0100               	movlb	0	; () banked
 22776  011B38  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22777  011B3A  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 22778                           
 22779                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22780  011B3E  0100               	movlb	0	; () banked
 22781  011B40  EE20 F004          	lfsr	2,4
 22782  011B44  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22783  011B46  26D9               	addwf	fsr2l,f,c
 22784  011B48  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22785  011B4A  22DA               	addwfc	fsr2h,f,c
 22786  011B4C  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22787  011B50  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22788  011B54  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22789  011B58  0E00               	movlw	0
 22790  011B5A  0100               	movlb	0	; () banked
 22791  011B5C  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22792  011B5E  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 22793                           
 22794                           ;Port.c: 424: }
 22795  011B62  D07A               	goto	l478
 22796  011B64                     
 22797                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22798  011B64  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22799  011B68  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22800  011B6C  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22801  011B70  0E03               	movlw	3
 22802  011B72  0100               	movlb	0	; () banked
 22803  011B74  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22804  011B76  EC1E  F0AD         	call	_Port_CheckQuadType	;wreg free
 22805  011B7A  0100               	movlb	0	; () banked
 22806  011B7C  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22807  011B7E  0100               	movlb	0	; () banked
 22808  011B80  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22809  011B82  A4D8               	btfss	status,2,c
 22810  011B84  0012               	return	
 22811                           
 22812                           ; BSR set to: 0
 22813                           ;Port.c: 429: {
 22814                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22815  011B86  0100               	movlb	0	; () banked
 22816  011B88  EE20 F002          	lfsr	2,2
 22817  011B8C  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22818  011B8E  26D9               	addwf	fsr2l,f,c
 22819  011B90  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22820  011B92  22DA               	addwfc	fsr2h,f,c
 22821  011B94  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22822  011B98  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22823  011B9C  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22824  011BA0  0E0F               	movlw	15
 22825  011BA2  0100               	movlb	0	; () banked
 22826  011BA4  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22827  011BA6  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 22828                           
 22829                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22830  011BAA  0100               	movlb	0	; () banked
 22831  011BAC  EE20 F004          	lfsr	2,4
 22832  011BB0  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22833  011BB2  26D9               	addwf	fsr2l,f,c
 22834  011BB4  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22835  011BB6  22DA               	addwfc	fsr2h,f,c
 22836  011BB8  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22837  011BBC  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22838  011BC0  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22839  011BC4  0E0F               	movlw	15
 22840  011BC6  0100               	movlb	0	; () banked
 22841  011BC8  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22842  011BCA  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 22843                           
 22844                           ;Port.c: 435: }
 22845  011BCE  D044               	goto	l478
 22846  011BD0                     
 22847                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22848  011BD0  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22849  011BD4  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22850  011BD8  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22851  011BDC  0E03               	movlw	3
 22852  011BDE  0100               	movlb	0	; () banked
 22853  011BE0  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22854  011BE2  EC1E  F0AD         	call	_Port_CheckQuadType	;wreg free
 22855  011BE6  0100               	movlb	0	; () banked
 22856  011BE8  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22857  011BEA  0100               	movlb	0	; () banked
 22858  011BEC  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22859  011BEE  A4D8               	btfss	status,2,c
 22860  011BF0  0012               	return	
 22861                           
 22862                           ; BSR set to: 0
 22863                           ;Port.c: 440: {
 22864                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22865  011BF2  0100               	movlb	0	; () banked
 22866  011BF4  EE20 F002          	lfsr	2,2
 22867  011BF8  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22868  011BFA  26D9               	addwf	fsr2l,f,c
 22869  011BFC  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22870  011BFE  22DA               	addwfc	fsr2h,f,c
 22871  011C00  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22872  011C04  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22873  011C08  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22874  011C0C  0E00               	movlw	0
 22875  011C0E  0100               	movlb	0	; () banked
 22876  011C10  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22877  011C12  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 22878                           
 22879                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22880  011C16  0100               	movlb	0	; () banked
 22881  011C18  EE20 F004          	lfsr	2,4
 22882  011C1C  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22883  011C1E  26D9               	addwf	fsr2l,f,c
 22884  011C20  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22885  011C22  22DA               	addwfc	fsr2h,f,c
 22886  011C24  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22887  011C28  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22888  011C2C  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22889  011C30  0E00               	movlw	0
 22890  011C32  0100               	movlb	0	; () banked
 22891  011C34  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22892  011C36  EC0A  F0B2         	call	_Byte_SetQuad	;wreg free
 22893                           
 22894                           ;Port.c: 446: }
 22895  011C3A  D00E               	goto	l478
 22896  011C3C                     l476:
 22897  011C3C  0100               	movlb	0	; () banked
 22898  011C3E  51F3               	movf	Port_SetQuadType@pType& (0+255),w,b
 22899                           
 22900                           ; Switch size 1, requested type "space"
 22901                           ; Number of cases is 4, Range of values is 0 to 3
 22902                           ; switch strategies available:
 22903                           ; Name         Instructions Cycles
 22904                           ; simple_byte           13     7 (average)
 22905                           ;	Chosen strategy is simple_byte
 22906  011C40  0A00               	xorlw	0	; case 0
 22907  011C42  B4D8               	btfsc	status,2,c
 22908  011C44  D734               	goto	l477
 22909  011C46  0A01               	xorlw	1	; case 1
 22910  011C48  B4D8               	btfsc	status,2,c
 22911  011C4A  D756               	goto	l479
 22912  011C4C  0A03               	xorlw	3	; case 2
 22913  011C4E  B4D8               	btfsc	status,2,c
 22914  011C50  D789               	goto	l483
 22915  011C52  0A01               	xorlw	1	; case 3
 22916  011C54  B4D8               	btfsc	status,2,c
 22917  011C56  D7BC               	goto	l486
 22918  011C58                     l478:
 22919                           
 22920                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22921                           
 22922                           ; BSR set to: 0
 22923  011C58  0E08               	movlw	8
 22924  011C5A  0100               	movlb	0	; () banked
 22925  011C5C  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22926  011C5E  0100               	movlb	0	; () banked
 22927  011C60  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22928  011C62  0E00               	movlw	0
 22929  011C64  0100               	movlb	0	; () banked
 22930  011C66  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22931  011C68  0100               	movlb	0	; () banked
 22932  011C6A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22933  011C6C  0100               	movlb	0	; () banked
 22934  011C6E  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22935  011C70  0D04               	mullw	4
 22936  011C72  CFF3 F0CB          	movff	prodl,Word_SetPair@pPair
 22937  011C76  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22938  011C7A  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 22939                           
 22940                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22941  011C7E  0E08               	movlw	8
 22942  011C80  0100               	movlb	0	; () banked
 22943  011C82  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22944  011C84  0100               	movlb	0	; () banked
 22945  011C86  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22946  011C88  0E00               	movlw	0
 22947  011C8A  0100               	movlb	0	; () banked
 22948  011C8C  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22949  011C8E  0100               	movlb	0	; () banked
 22950  011C90  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22951  011C92  0100               	movlb	0	; () banked
 22952  011C94  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22953  011C96  0D04               	mullw	4
 22954  011C98  28F3               	incf	prodl,w,c
 22955  011C9A  0100               	movlb	0	; () banked
 22956  011C9C  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22957  011C9E  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22958  011CA2  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 22959                           
 22960                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22961  011CA6  0E08               	movlw	8
 22962  011CA8  0100               	movlb	0	; () banked
 22963  011CAA  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22964  011CAC  0100               	movlb	0	; () banked
 22965  011CAE  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22966  011CB0  0E00               	movlw	0
 22967  011CB2  0100               	movlb	0	; () banked
 22968  011CB4  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22969  011CB6  0100               	movlb	0	; () banked
 22970  011CB8  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22971  011CBA  0100               	movlb	0	; () banked
 22972  011CBC  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22973  011CBE  0D04               	mullw	4
 22974  011CC0  50F3               	movf	prodl,w,c
 22975  011CC2  0F02               	addlw	2
 22976  011CC4  0100               	movlb	0	; () banked
 22977  011CC6  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22978  011CC8  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22979  011CCC  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 22980                           
 22981                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22982  011CD0  0E08               	movlw	8
 22983  011CD2  0100               	movlb	0	; () banked
 22984  011CD4  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22985  011CD6  0100               	movlb	0	; () banked
 22986  011CD8  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22987  011CDA  0E00               	movlw	0
 22988  011CDC  0100               	movlb	0	; () banked
 22989  011CDE  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22990  011CE0  0100               	movlb	0	; () banked
 22991  011CE2  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22992  011CE4  0100               	movlb	0	; () banked
 22993  011CE6  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22994  011CE8  0D04               	mullw	4
 22995  011CEA  50F3               	movf	prodl,w,c
 22996  011CEC  0F03               	addlw	3
 22997  011CEE  0100               	movlb	0	; () banked
 22998  011CF0  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22999  011CF2  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23000  011CF6  EC1B  F0AF         	call	_Word_SetPair	;wreg free
 23001  011CFA  0012               	return	
 23002  011CFC                     __end_of_Port_SetQuadType:
 23003                           	opt stack 0
 23004                           tosu	equ	0xFFF
 23005                           tosh	equ	0xFFE
 23006                           tosl	equ	0xFFD
 23007                           pclath	equ	0xFFA
 23008                           tblptru	equ	0xFF8
 23009                           tblptrh	equ	0xFF7
 23010                           tblptrl	equ	0xFF6
 23011                           tablat	equ	0xFF5
 23012                           prodh	equ	0xFF4
 23013                           prodl	equ	0xFF3
 23014                           intcon	equ	0xFF2
 23015                           postinc0	equ	0xFEE
 23016                           wreg	equ	0xFE8
 23017                           indf1	equ	0xFE7
 23018                           postdec1	equ	0xFE5
 23019                           fsr1h	equ	0xFE2
 23020                           fsr1l	equ	0xFE1
 23021                           indf2	equ	0xFDF
 23022                           postinc2	equ	0xFDE
 23023                           postdec2	equ	0xFDD
 23024                           plusw2	equ	0xFDB
 23025                           fsr2h	equ	0xFDA
 23026                           fsr2l	equ	0xFD9
 23027                           status	equ	0xFD8
 23028                           
 23029 ;; *************** function _Word_SetPair *****************
 23030 ;; Defined at:
 23031 ;;		line 149 in file "Library/Types.c"
 23032 ;; Parameters:    Size  Location     Type
 23033 ;;  pInput          2   15[BANK0 ] PTR struct Word
 23034 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23035 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23036 ;;  pPair           1   17[BANK0 ] unsigned char 
 23037 ;;  pValue          1   18[BANK0 ] unsigned char 
 23038 ;; Auto vars:     Size  Location     Type
 23039 ;;		None
 23040 ;; Return value:  Size  Location     Type
 23041 ;;                  1    wreg      void 
 23042 ;; Registers used:
 23043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23044 ;; Tracked objects:
 23045 ;;		On entry : 0/0
 23046 ;;		On exit  : 0/0
 23047 ;;		Unchanged: 0/0
 23048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23049 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23052 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23053 ;;Total ram usage:        4 bytes
 23054 ;; Hardware stack levels used:    1
 23055 ;; Hardware stack levels required when called:    9
 23056 ;; This function calls:
 23057 ;;		_Byte_SetPair
 23058 ;; This function is called by:
 23059 ;;		_Port_SetPinType
 23060 ;;		_Port_SetQuadType
 23061 ;;		_Port_SetType
 23062 ;;		_Port_SetPairType
 23063 ;;		_PortProperty_Init
 23064 ;; This function uses a non-reentrant model
 23065 ;;
 23066                           
 23067                           	psect	text109
 23068  015E36                     __ptext109:
 23069                           	opt stack 0
 23070  015E36                     _Word_SetPair:
 23071                           	opt stack 18
 23072                           
 23073                           ;Types.c: 151: if (pPair >= 4)
 23074                           
 23075                           ;incstack = 0
 23076  015E36  0E03               	movlw	3
 23077  015E38  0100               	movlb	0	; () banked
 23078  015E3A  65CB               	cpfsgt	Word_SetPair@pPair& (0+255),b
 23079  015E3C  D014               	goto	l776
 23080                           
 23081                           ; BSR set to: 0
 23082                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 23083  015E3E  0E01               	movlw	1
 23084  015E40  0100               	movlb	0	; () banked
 23085  015E42  25C9               	addwf	Word_SetPair@pInput& (0+255),w,b
 23086  015E44  0100               	movlb	0	; () banked
 23087  015E46  6FC5               	movwf	Byte_SetPair@pInput& (0+255),b
 23088  015E48  0E00               	movlw	0
 23089  015E4A  0100               	movlb	0	; () banked
 23090  015E4C  21CA               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 23091  015E4E  0100               	movlb	0	; () banked
 23092  015E50  6FC6               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 23093  015E52  0100               	movlb	0	; () banked
 23094  015E54  51CB               	movf	Word_SetPair@pPair& (0+255),w,b
 23095  015E56  0FFC               	addlw	252
 23096  015E58  0100               	movlb	0	; () banked
 23097  015E5A  6FC7               	movwf	Byte_SetPair@pPair& (0+255),b
 23098  015E5C  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 23099  015E60  ECF9  F0B1         	call	_Byte_SetPair	;wreg free
 23100  015E64  0012               	return	
 23101  015E66                     l776:
 23102                           
 23103                           ;Types.c: 153: else
 23104                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 23105  015E66  C0C9  F0C5         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 23106  015E6A  C0CA  F0C6         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 23107  015E6E  C0CB  F0C7         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 23108  015E72  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 23109  015E76  ECF9  F0B1         	call	_Byte_SetPair	;wreg free
 23110  015E7A  0012               	return	
 23111  015E7C                     __end_of_Word_SetPair:
 23112                           	opt stack 0
 23113                           tosu	equ	0xFFF
 23114                           tosh	equ	0xFFE
 23115                           tosl	equ	0xFFD
 23116                           pclath	equ	0xFFA
 23117                           tblptru	equ	0xFF8
 23118                           tblptrh	equ	0xFF7
 23119                           tblptrl	equ	0xFF6
 23120                           tablat	equ	0xFF5
 23121                           prodh	equ	0xFF4
 23122                           prodl	equ	0xFF3
 23123                           intcon	equ	0xFF2
 23124                           postinc0	equ	0xFEE
 23125                           wreg	equ	0xFE8
 23126                           indf1	equ	0xFE7
 23127                           postdec1	equ	0xFE5
 23128                           fsr1h	equ	0xFE2
 23129                           fsr1l	equ	0xFE1
 23130                           indf2	equ	0xFDF
 23131                           postinc2	equ	0xFDE
 23132                           postdec2	equ	0xFDD
 23133                           plusw2	equ	0xFDB
 23134                           fsr2h	equ	0xFDA
 23135                           fsr2l	equ	0xFD9
 23136                           status	equ	0xFD8
 23137                           
 23138 ;; *************** function _Byte_SetPair *****************
 23139 ;; Defined at:
 23140 ;;		line 83 in file "Library/Types.c"
 23141 ;; Parameters:    Size  Location     Type
 23142 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23143 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23144 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23145 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 23146 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 23147 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 23148 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 23149 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 23150 ;;		 -> NULL(0), 
 23151 ;;  pPair           1   13[BANK0 ] unsigned char 
 23152 ;;  pValue          1   14[BANK0 ] unsigned char 
 23153 ;; Auto vars:     Size  Location     Type
 23154 ;;		None
 23155 ;; Return value:  Size  Location     Type
 23156 ;;                  1    wreg      void 
 23157 ;; Registers used:
 23158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23159 ;; Tracked objects:
 23160 ;;		On entry : 0/0
 23161 ;;		On exit  : 0/0
 23162 ;;		Unchanged: 0/0
 23163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23164 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23167 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23168 ;;Total ram usage:        4 bytes
 23169 ;; Hardware stack levels used:    1
 23170 ;; Hardware stack levels required when called:    8
 23171 ;; This function calls:
 23172 ;;		_Byte_SetZone
 23173 ;; This function is called by:
 23174 ;;		_Word_SetPair
 23175 ;;		_Port_SetPairType
 23176 ;;		_Port_SetPair
 23177 ;; This function uses a non-reentrant model
 23178 ;;
 23179                           
 23180                           	psect	text110
 23181  0163F2                     __ptext110:
 23182                           	opt stack 0
 23183  0163F2                     _Byte_SetPair:
 23184                           	opt stack 18
 23185                           
 23186                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 23187                           
 23188                           ;incstack = 0
 23189  0163F2  C0C5  F0BA         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 23190  0163F6  C0C6  F0BB         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 23191  0163FA  0E04               	movlw	4
 23192  0163FC  0100               	movlb	0	; () banked
 23193  0163FE  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23194  016400  C0C7  F0BD         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 23195  016404  0E02               	movlw	2
 23196  016406  0100               	movlb	0	; () banked
 23197  016408  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23198  01640A  C0C8  F0BF         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 23199  01640E  EC79  F0A2         	call	_Byte_SetZone	;wreg free
 23200  016412  0012               	return		;funcret
 23201  016414                     __end_of_Byte_SetPair:
 23202                           	opt stack 0
 23203                           tosu	equ	0xFFF
 23204                           tosh	equ	0xFFE
 23205                           tosl	equ	0xFFD
 23206                           pclath	equ	0xFFA
 23207                           tblptru	equ	0xFF8
 23208                           tblptrh	equ	0xFF7
 23209                           tblptrl	equ	0xFF6
 23210                           tablat	equ	0xFF5
 23211                           prodh	equ	0xFF4
 23212                           prodl	equ	0xFF3
 23213                           intcon	equ	0xFF2
 23214                           postinc0	equ	0xFEE
 23215                           wreg	equ	0xFE8
 23216                           indf1	equ	0xFE7
 23217                           postdec1	equ	0xFE5
 23218                           fsr1h	equ	0xFE2
 23219                           fsr1l	equ	0xFE1
 23220                           indf2	equ	0xFDF
 23221                           postinc2	equ	0xFDE
 23222                           postdec2	equ	0xFDD
 23223                           plusw2	equ	0xFDB
 23224                           fsr2h	equ	0xFDA
 23225                           fsr2l	equ	0xFD9
 23226                           status	equ	0xFD8
 23227                           
 23228 ;; *************** function _Port_CheckQuadType *****************
 23229 ;; Defined at:
 23230 ;;		line 126 in file "Library/Port.c"
 23231 ;; Parameters:    Size  Location     Type
 23232 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 23233 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23234 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23235 ;;  pQuad           1   49[BANK0 ] enum E6776
 23236 ;;  pDrive          1   50[BANK0 ] enum E6469
 23237 ;; Auto vars:     Size  Location     Type
 23238 ;;  Output          1   53[BANK0 ] enum E6475
 23239 ;;  Pair2           1   52[BANK0 ] enum E6760
 23240 ;;  Pair1           1   51[BANK0 ] enum E6760
 23241 ;; Return value:  Size  Location     Type
 23242 ;;                  1    wreg      enum E6475
 23243 ;; Registers used:
 23244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23245 ;; Tracked objects:
 23246 ;;		On entry : 0/0
 23247 ;;		On exit  : 0/0
 23248 ;;		Unchanged: 0/0
 23249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23250 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23251 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23253 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23254 ;;Total ram usage:        7 bytes
 23255 ;; Hardware stack levels used:    1
 23256 ;; Hardware stack levels required when called:   12
 23257 ;; This function calls:
 23258 ;;		_Port_CheckPairType
 23259 ;; This function is called by:
 23260 ;;		_Port_CheckPortType
 23261 ;;		_Port_SetQuadType
 23262 ;; This function uses a non-reentrant model
 23263 ;;
 23264                           
 23265                           	psect	text111
 23266  015A3C                     __ptext111:
 23267                           	opt stack 0
 23268  015A3C                     _Port_CheckQuadType:
 23269                           	opt stack 14
 23270                           
 23271                           ;Port.c: 128: ePinError Output = ePinErrorState;
 23272                           
 23273                           ;incstack = 0
 23274  015A3C  0E05               	movlw	5
 23275  015A3E  0100               	movlb	0	; () banked
 23276  015A40  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23277                           
 23278                           ; BSR set to: 0
 23279                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 23280  015A42  0100               	movlb	0	; () banked
 23281  015A44  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23282  015A46  0D02               	mullw	2
 23283  015A48  CFF3 F0ED          	movff	prodl,Port_CheckQuadType@Pair1
 23284                           
 23285                           ; BSR set to: 0
 23286                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 23287  015A4C  0100               	movlb	0	; () banked
 23288  015A4E  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23289  015A50  0D02               	mullw	2
 23290  015A52  28F3               	incf	prodl,w,c
 23291  015A54  0100               	movlb	0	; () banked
 23292  015A56  6FEE               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 23293                           
 23294                           ; BSR set to: 0
 23295                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 23296  015A58  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23297  015A5C  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23298  015A60  C0ED  F0E2         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 23299  015A64  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23300  015A68  ECC1  F0AB         	call	_Port_CheckPairType	;wreg free
 23301  015A6C  0100               	movlb	0	; () banked
 23302  015A6E  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23303  015A70  0100               	movlb	0	; () banked
 23304  015A72  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23305  015A74  A4D8               	btfss	status,2,c
 23306  015A76  D00C               	goto	l393
 23307                           
 23308                           ; BSR set to: 0
 23309                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 23310  015A78  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23311  015A7C  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23312  015A80  C0EE  F0E2         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 23313  015A84  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23314  015A88  ECC1  F0AB         	call	_Port_CheckPairType	;wreg free
 23315  015A8C  0100               	movlb	0	; () banked
 23316  015A8E  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23317  015A90                     l393:
 23318                           
 23319                           ; BSR set to: 0
 23320                           ;Port.c: 136: return Output;
 23321                           
 23322                           ; BSR set to: 0
 23323  015A90  0100               	movlb	0	; () banked
 23324  015A92  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23325  015A94  0012               	return	
 23326  015A96                     __end_of_Port_CheckQuadType:
 23327                           	opt stack 0
 23328                           tosu	equ	0xFFF
 23329                           tosh	equ	0xFFE
 23330                           tosl	equ	0xFFD
 23331                           pclath	equ	0xFFA
 23332                           tblptru	equ	0xFF8
 23333                           tblptrh	equ	0xFF7
 23334                           tblptrl	equ	0xFF6
 23335                           tablat	equ	0xFF5
 23336                           prodh	equ	0xFF4
 23337                           prodl	equ	0xFF3
 23338                           intcon	equ	0xFF2
 23339                           postinc0	equ	0xFEE
 23340                           wreg	equ	0xFE8
 23341                           indf1	equ	0xFE7
 23342                           postdec1	equ	0xFE5
 23343                           fsr1h	equ	0xFE2
 23344                           fsr1l	equ	0xFE1
 23345                           indf2	equ	0xFDF
 23346                           postinc2	equ	0xFDE
 23347                           postdec2	equ	0xFDD
 23348                           plusw2	equ	0xFDB
 23349                           fsr2h	equ	0xFDA
 23350                           fsr2l	equ	0xFD9
 23351                           status	equ	0xFD8
 23352                           
 23353 ;; *************** function _Port_CheckPairType *****************
 23354 ;; Defined at:
 23355 ;;		line 112 in file "Library/Port.c"
 23356 ;; Parameters:    Size  Location     Type
 23357 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23358 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23359 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23360 ;;  pPair           1   40[BANK0 ] enum E6760
 23361 ;;  pDrive          1   41[BANK0 ] enum E6469
 23362 ;; Auto vars:     Size  Location     Type
 23363 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 23364 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23365 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23366 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23367 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23368 ;;  Output          1   44[BANK0 ] enum E6475
 23369 ;;  Pin2            1   43[BANK0 ] enum E6750
 23370 ;;  Pin1            1   42[BANK0 ] enum E6750
 23371 ;; Return value:  Size  Location     Type
 23372 ;;                  1    wreg      enum E6475
 23373 ;; Registers used:
 23374 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23375 ;; Tracked objects:
 23376 ;;		On entry : 0/0
 23377 ;;		On exit  : 0/0
 23378 ;;		Unchanged: 0/0
 23379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23381 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23383 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23384 ;;Total ram usage:        9 bytes
 23385 ;; Hardware stack levels used:    1
 23386 ;; Hardware stack levels required when called:   11
 23387 ;; This function calls:
 23388 ;;		_PortProperty_Valid
 23389 ;; This function is called by:
 23390 ;;		_Port_CheckQuadType
 23391 ;;		_Port_SetPairType
 23392 ;; This function uses a non-reentrant model
 23393 ;;
 23394                           
 23395                           	psect	text112
 23396  015782                     __ptext112:
 23397                           	opt stack 0
 23398  015782                     _Port_CheckPairType:
 23399                           	opt stack 14
 23400                           
 23401                           ;Port.c: 114: ePinError Output = ePinErrorState;
 23402                           
 23403                           ; BSR set to: 0
 23404                           ;incstack = 0
 23405  015782  0E05               	movlw	5
 23406  015784  0100               	movlb	0	; () banked
 23407  015786  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23408                           
 23409                           ; BSR set to: 0
 23410                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 23411  015788  C0E0  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 23412  01578C  C0E1  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 23413  015790  CFDE F0E7          	movff	postinc2,Port_CheckPairType@Props
 23414  015794  CFDD F0E8          	movff	postdec2,Port_CheckPairType@Props+1
 23415                           
 23416                           ; BSR set to: 0
 23417                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 23418  015798  0100               	movlb	0	; () banked
 23419  01579A  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23420  01579C  0D02               	mullw	2
 23421  01579E  CFF3 F0E4          	movff	prodl,Port_CheckPairType@Pin1
 23422                           
 23423                           ; BSR set to: 0
 23424                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 23425  0157A2  0100               	movlb	0	; () banked
 23426  0157A4  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23427  0157A6  0D02               	mullw	2
 23428  0157A8  28F3               	incf	prodl,w,c
 23429  0157AA  0100               	movlb	0	; () banked
 23430  0157AC  6FE5               	movwf	Port_CheckPairType@Pin2& (0+255),b
 23431                           
 23432                           ; BSR set to: 0
 23433                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 23434  0157AE  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23435  0157B2  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23436  0157B6  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23437  0157BA  C0E4  F0CC         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 23438  0157BE  ECD9  F0A8         	call	_PortProperty_Valid	;wreg free
 23439  0157C2  0100               	movlb	0	; () banked
 23440  0157C4  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23441  0157C6  0100               	movlb	0	; () banked
 23442  0157C8  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23443  0157CA  A4D8               	btfss	status,2,c
 23444  0157CC  D00C               	goto	l389
 23445                           
 23446                           ; BSR set to: 0
 23447                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 23448  0157CE  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23449  0157D2  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23450  0157D6  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23451  0157DA  C0E5  F0CC         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 23452  0157DE  ECD9  F0A8         	call	_PortProperty_Valid	;wreg free
 23453  0157E2  0100               	movlb	0	; () banked
 23454  0157E4  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23455  0157E6                     l389:
 23456                           
 23457                           ; BSR set to: 0
 23458                           ;Port.c: 124: return Output;
 23459                           
 23460                           ; BSR set to: 0
 23461  0157E6  0100               	movlb	0	; () banked
 23462  0157E8  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23463  0157EA  0012               	return	
 23464  0157EC                     __end_of_Port_CheckPairType:
 23465                           	opt stack 0
 23466                           tosu	equ	0xFFF
 23467                           tosh	equ	0xFFE
 23468                           tosl	equ	0xFFD
 23469                           pclath	equ	0xFFA
 23470                           tblptru	equ	0xFF8
 23471                           tblptrh	equ	0xFF7
 23472                           tblptrl	equ	0xFF6
 23473                           tablat	equ	0xFF5
 23474                           prodh	equ	0xFF4
 23475                           prodl	equ	0xFF3
 23476                           intcon	equ	0xFF2
 23477                           postinc0	equ	0xFEE
 23478                           wreg	equ	0xFE8
 23479                           indf1	equ	0xFE7
 23480                           postdec1	equ	0xFE5
 23481                           fsr1h	equ	0xFE2
 23482                           fsr1l	equ	0xFE1
 23483                           indf2	equ	0xFDF
 23484                           postinc2	equ	0xFDE
 23485                           postdec2	equ	0xFDD
 23486                           plusw2	equ	0xFDB
 23487                           fsr2h	equ	0xFDA
 23488                           fsr2l	equ	0xFD9
 23489                           status	equ	0xFD8
 23490                           
 23491 ;; *************** function _PortProperty_Valid *****************
 23492 ;; Defined at:
 23493 ;;		line 220 in file "Library/Types.c"
 23494 ;; Parameters:    Size  Location     Type
 23495 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 23496 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23497 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23498 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23499 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23500 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 23501 ;;  pPin            1   18[BANK0 ] unsigned char 
 23502 ;; Auto vars:     Size  Location     Type
 23503 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 23504 ;;  Pair            1   37[BANK0 ] enum E6469
 23505 ;; Return value:  Size  Location     Type
 23506 ;;                  1    wreg      enum E6475
 23507 ;; Registers used:
 23508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23509 ;; Tracked objects:
 23510 ;;		On entry : 0/0
 23511 ;;		On exit  : 0/0
 23512 ;;		Unchanged: 0/0
 23513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23514 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23515 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23516 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23517 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23518 ;;Total ram usage:       23 bytes
 23519 ;; Hardware stack levels used:    1
 23520 ;; Hardware stack levels required when called:   10
 23521 ;; This function calls:
 23522 ;;		_Word_GetPair
 23523 ;; This function is called by:
 23524 ;;		_Port_CheckPairType
 23525 ;;		_Port_SetPinType
 23526 ;; This function uses a non-reentrant model
 23527 ;;
 23528                           
 23529                           	psect	text113
 23530  0151B2                     __ptext113:
 23531                           	opt stack 0
 23532  0151B2                     _PortProperty_Valid:
 23533                           	opt stack 17
 23534                           
 23535                           ;Types.c: 222: ePinDrive Pair;
 23536                           ;Types.c: 223: const ePinError Errors[4][4] =
 23537                           ;Types.c: 224: {
 23538                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 23539                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 23540                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 23541                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 23542                           ;Types.c: 230: };
 23543                           
 23544                           ; BSR set to: 0
 23545                           ;incstack = 0
 23546  0151B2  0EF5               	movlw	low PortProperty_Valid@F6830
 23547  0151B4  6EF6               	movwf	tblptrl,c
 23548  0151B6                     	if	1	;There is more than 1 active tblptr byte
 23549  0151B6  0EFC               	movlw	high PortProperty_Valid@F6830
 23550  0151B8  6EF7               	movwf	tblptrh,c
 23551  0151BA                     	endif
 23552  0151BA                     	if	1	;There are 3 active tblptr bytes
 23553  0151BA  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 23554  0151BC  6EF8               	movwf	tblptru,c
 23555  0151BE                     	endif
 23556  0151BE  EE20  F0CF         	lfsr	2,PortProperty_Valid@Errors
 23557  0151C2  0E0F               	movlw	15
 23558  0151C4                     u8780:
 23559  0151C4  0009               	tblrd		*+
 23560  0151C6  CFF5 FFDE          	movff	tablat,postinc2
 23561  0151CA  06E8               	decf	wreg,f,c
 23562  0151CC  E2FB               	bc	u8780
 23563                           
 23564                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23565  0151CE  C0C9  F0C6         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23566  0151D2  C0CA  F0C7         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23567  0151D6  C0CC  F0C8         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23568  0151DA  EC41  F0B0         	call	_Word_GetPair	;wreg free
 23569  0151DE  0100               	movlb	0	; () banked
 23570  0151E0  6FDF               	movwf	PortProperty_Valid@Pair& (0+255),b
 23571                           
 23572                           ; BSR set to: 0
 23573                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23574  0151E2  0E04               	movlw	4
 23575  0151E4  0100               	movlb	0	; () banked
 23576  0151E6  61CB               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23577  0151E8  D020               	goto	l819
 23578                           
 23579                           ; BSR set to: 0
 23580  0151EA  0E04               	movlw	4
 23581  0151EC  0100               	movlb	0	; () banked
 23582  0151EE  61DF               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23583  0151F0  D01C               	goto	l819
 23584                           
 23585                           ; BSR set to: 0
 23586                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23587  0151F2  0100               	movlb	0	; () banked
 23588  0151F4  51CB               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23589  0151F6  0D04               	mullw	4
 23590  0151F8  0ECF               	movlw	low PortProperty_Valid@Errors
 23591  0151FA  0100               	movlb	0	; () banked
 23592  0151FC  6FCD               	movwf	??_PortProperty_Valid& (0+255),b
 23593  0151FE  0E00               	movlw	high PortProperty_Valid@Errors
 23594  015200  0100               	movlb	0	; () banked
 23595  015202  6FCE               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23596  015204  50F3               	movf	prodl,w,c
 23597  015206  0100               	movlb	0	; () banked
 23598  015208  27CD               	addwf	??_PortProperty_Valid& (0+255),f,b
 23599  01520A  50F4               	movf	prodh,w,c
 23600  01520C  0100               	movlb	0	; () banked
 23601  01520E  23CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23602  015210  0100               	movlb	0	; () banked
 23603  015212  51DF               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23604  015214  0D01               	mullw	1
 23605  015216  50F3               	movf	prodl,w,c
 23606  015218  0100               	movlb	0	; () banked
 23607  01521A  25CD               	addwf	??_PortProperty_Valid& (0+255),w,b
 23608  01521C  6ED9               	movwf	fsr2l,c
 23609  01521E  50F4               	movf	prodh,w,c
 23610  015220  0100               	movlb	0	; () banked
 23611  015222  21CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23612  015224  6EDA               	movwf	fsr2h,c
 23613  015226  50DF               	movf	indf2,w,c
 23614                           
 23615                           ; BSR set to: 0
 23616  015228  0012               	return	
 23617  01522A                     l819:
 23618                           
 23619                           ; BSR set to: 0
 23620                           ;Types.c: 237: return ePinErrorState;
 23621                           
 23622                           ; BSR set to: 0
 23623  01522A  0E05               	movlw	5
 23624  01522C  0012               	return	
 23625  01522E                     __end_of_PortProperty_Valid:
 23626                           	opt stack 0
 23627                           tosu	equ	0xFFF
 23628                           tosh	equ	0xFFE
 23629                           tosl	equ	0xFFD
 23630                           pclath	equ	0xFFA
 23631                           tblptru	equ	0xFF8
 23632                           tblptrh	equ	0xFF7
 23633                           tblptrl	equ	0xFF6
 23634                           tablat	equ	0xFF5
 23635                           prodh	equ	0xFF4
 23636                           prodl	equ	0xFF3
 23637                           intcon	equ	0xFF2
 23638                           postinc0	equ	0xFEE
 23639                           wreg	equ	0xFE8
 23640                           indf1	equ	0xFE7
 23641                           postdec1	equ	0xFE5
 23642                           fsr1h	equ	0xFE2
 23643                           fsr1l	equ	0xFE1
 23644                           indf2	equ	0xFDF
 23645                           postinc2	equ	0xFDE
 23646                           postdec2	equ	0xFDD
 23647                           plusw2	equ	0xFDB
 23648                           fsr2h	equ	0xFDA
 23649                           fsr2l	equ	0xFD9
 23650                           status	equ	0xFD8
 23651                           
 23652 ;; *************** function _Byte_SetQuad *****************
 23653 ;; Defined at:
 23654 ;;		line 101 in file "Library/Types.c"
 23655 ;; Parameters:    Size  Location     Type
 23656 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23657 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23658 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23659 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23660 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23661 ;;		 -> NULL(0), 
 23662 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23663 ;;  pValue          1   14[BANK0 ] unsigned char 
 23664 ;; Auto vars:     Size  Location     Type
 23665 ;;		None
 23666 ;; Return value:  Size  Location     Type
 23667 ;;                  1    wreg      void 
 23668 ;; Registers used:
 23669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23670 ;; Tracked objects:
 23671 ;;		On entry : 0/0
 23672 ;;		On exit  : 0/0
 23673 ;;		Unchanged: 0/0
 23674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23675 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23678 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23679 ;;Total ram usage:        4 bytes
 23680 ;; Hardware stack levels used:    1
 23681 ;; Hardware stack levels required when called:    8
 23682 ;; This function calls:
 23683 ;;		_Byte_SetZone
 23684 ;; This function is called by:
 23685 ;;		_Port_SetQuadType
 23686 ;;		_SPI_Init
 23687 ;;		_SPI_MinSpeed
 23688 ;;		_SPI_MaxSpeed
 23689 ;;		_Port_SetQuad
 23690 ;;		_Word_SetQuad
 23691 ;;		_I2C_Init
 23692 ;; This function uses a non-reentrant model
 23693 ;;
 23694                           
 23695                           	psect	text114
 23696  016414                     __ptext114:
 23697                           	opt stack 0
 23698  016414                     _Byte_SetQuad:
 23699                           	opt stack 19
 23700                           
 23701                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23702                           
 23703                           ; BSR set to: 0
 23704                           ;incstack = 0
 23705  016414  C0C5  F0BA         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23706  016418  C0C6  F0BB         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23707  01641C  0E02               	movlw	2
 23708  01641E  0100               	movlb	0	; () banked
 23709  016420  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23710  016422  C0C7  F0BD         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23711  016426  0E04               	movlw	4
 23712  016428  0100               	movlb	0	; () banked
 23713  01642A  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23714  01642C  C0C8  F0BF         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23715  016430  EC79  F0A2         	call	_Byte_SetZone	;wreg free
 23716  016434  0012               	return		;funcret
 23717  016436                     __end_of_Byte_SetQuad:
 23718                           	opt stack 0
 23719                           tosu	equ	0xFFF
 23720                           tosh	equ	0xFFE
 23721                           tosl	equ	0xFFD
 23722                           pclath	equ	0xFFA
 23723                           tblptru	equ	0xFF8
 23724                           tblptrh	equ	0xFF7
 23725                           tblptrl	equ	0xFF6
 23726                           tablat	equ	0xFF5
 23727                           prodh	equ	0xFF4
 23728                           prodl	equ	0xFF3
 23729                           intcon	equ	0xFF2
 23730                           postinc0	equ	0xFEE
 23731                           wreg	equ	0xFE8
 23732                           indf1	equ	0xFE7
 23733                           postdec1	equ	0xFE5
 23734                           fsr1h	equ	0xFE2
 23735                           fsr1l	equ	0xFE1
 23736                           indf2	equ	0xFDF
 23737                           postinc2	equ	0xFDE
 23738                           postdec2	equ	0xFDD
 23739                           plusw2	equ	0xFDB
 23740                           fsr2h	equ	0xFDA
 23741                           fsr2l	equ	0xFD9
 23742                           status	equ	0xFD8
 23743                           
 23744 ;; *************** function _Byte_SetZone *****************
 23745 ;; Defined at:
 23746 ;;		line 47 in file "Library/Types.c"
 23747 ;; Parameters:    Size  Location     Type
 23748 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23749 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23750 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23751 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23752 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23753 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23754 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23755 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23756 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23757 ;;  pMax            1    2[BANK0 ] unsigned char 
 23758 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23759 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23760 ;;  pValue          1    5[BANK0 ] unsigned char 
 23761 ;; Auto vars:     Size  Location     Type
 23762 ;;  MASK            1   10[BANK0 ] unsigned char 
 23763 ;;  Offset          1    9[BANK0 ] unsigned char 
 23764 ;; Return value:  Size  Location     Type
 23765 ;;                  1    wreg      void 
 23766 ;; Registers used:
 23767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23768 ;; Tracked objects:
 23769 ;;		On entry : 0/0
 23770 ;;		On exit  : 0/0
 23771 ;;		Unchanged: 0/0
 23772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23773 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23774 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23775 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23776 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23777 ;;Total ram usage:       11 bytes
 23778 ;; Hardware stack levels used:    1
 23779 ;; Hardware stack levels required when called:    7
 23780 ;; This function calls:
 23781 ;;		Nothing
 23782 ;; This function is called by:
 23783 ;;		_Byte_SetPair
 23784 ;;		_Byte_SetQuad
 23785 ;;		_Byte_SetTriple
 23786 ;; This function uses a non-reentrant model
 23787 ;;
 23788                           
 23789                           	psect	text115
 23790  0144F2                     __ptext115:
 23791                           	opt stack 0
 23792  0144F2                     _Byte_SetZone:
 23793                           	opt stack 18
 23794                           
 23795                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23796                           
 23797                           ;incstack = 0
 23798  0144F2  0100               	movlb	0	; () banked
 23799  0144F4  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23800  0144F6  0D01               	mullw	1
 23801  0144F8  0E0F               	movlw	low _MASKS
 23802  0144FA  24F3               	addwf	prodl,w,c
 23803  0144FC  6EF6               	movwf	tblptrl,c
 23804  0144FE  0EFD               	movlw	high _MASKS
 23805  014500  20F4               	addwfc	prodh,w,c
 23806  014502  6EF7               	movwf	tblptrh,c
 23807  014504                     	if	1	;There are 3 active tblptr bytes
 23808  014504  6AF8               	clrf	tblptru,c
 23809  014506  0E00               	movlw	low (__mediumconst shr (0+16))
 23810  014508  22F8               	addwfc	tblptru,f,c
 23811  01450A                     	endif
 23812  01450A  0008               	tblrd		*
 23813  01450C  CFF5 F0C4          	movff	tablat,Byte_SetZone@MASK
 23814                           
 23815                           ; BSR set to: 0
 23816                           ;Types.c: 50: UINT8 Offset = 0;
 23817  014510  0E00               	movlw	0
 23818  014512  0100               	movlb	0	; () banked
 23819  014514  6FC3               	movwf	Byte_SetZone@Offset& (0+255),b
 23820                           
 23821                           ;Types.c: 52: while (pChunk >= pMax)
 23822  014516  D006               	goto	l726
 23823  014518                     
 23824                           ; BSR set to: 0
 23825                           ;Types.c: 53: {
 23826                           ;Types.c: 54: pChunk -= pMax;
 23827                           
 23828                           ; BSR set to: 0
 23829  014518  0100               	movlb	0	; () banked
 23830  01451A  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23831  01451C  0100               	movlb	0	; () banked
 23832  01451E  5FBD               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23833                           
 23834                           ; BSR set to: 0
 23835                           ;Types.c: 55: Offset += 1;
 23836  014520  0100               	movlb	0	; () banked
 23837  014522  2BC3               	incf	Byte_SetZone@Offset& (0+255),f,b
 23838  014524                     l726:
 23839                           
 23840                           ; BSR set to: 0
 23841                           
 23842                           ; BSR set to: 0
 23843  014524  0100               	movlb	0	; () banked
 23844  014526  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23845  014528  0100               	movlb	0	; () banked
 23846  01452A  5DBD               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23847  01452C  B0D8               	btfsc	status,0,c
 23848  01452E  D7F4               	goto	l727
 23849                           
 23850                           ; BSR set to: 0
 23851                           ;Types.c: 56: }
 23852                           ;Types.c: 57: pChunk *= pChunkSize;
 23853                           
 23854                           ; BSR set to: 0
 23855  014530  0100               	movlb	0	; () banked
 23856  014532  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23857  014534  0100               	movlb	0	; () banked
 23858  014536  03BD               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23859  014538  50F3               	movf	prodl,w,c
 23860  01453A  6FBD               	movwf	Byte_SetZone@pChunk& (0+255),b
 23861                           
 23862                           ; BSR set to: 0
 23863                           ;Types.c: 58: pChunk += Offset;
 23864  01453C  0100               	movlb	0	; () banked
 23865  01453E  51C3               	movf	Byte_SetZone@Offset& (0+255),w,b
 23866  014540  0100               	movlb	0	; () banked
 23867  014542  27BD               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23868                           
 23869                           ; BSR set to: 0
 23870                           ;Types.c: 60: pValue &= MASK;
 23871  014544  0100               	movlb	0	; () banked
 23872  014546  51C4               	movf	Byte_SetZone@MASK& (0+255),w,b
 23873  014548  0100               	movlb	0	; () banked
 23874  01454A  17BF               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23875                           
 23876                           ; BSR set to: 0
 23877                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23878  01454C  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23879  014550  C0C4  F0C1         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23880  014554  0100               	movlb	0	; () banked
 23881  014556  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23882  014558  D003               	goto	u8834
 23883  01455A                     u8835:
 23884  01455A  0100               	movlb	0	; () banked
 23885  01455C  90D8               	bcf	status,0,c
 23886  01455E  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23887  014560                     u8834:
 23888  014560  0100               	movlb	0	; () banked
 23889  014562  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23890  014564  D7FA               	goto	u8835
 23891  014566  0100               	movlb	0	; () banked
 23892  014568  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23893  01456A  0AFF               	xorlw	255
 23894  01456C  0100               	movlb	0	; () banked
 23895  01456E  6FC2               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23896  014570  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23897  014574  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23898  014578  0100               	movlb	0	; () banked
 23899  01457A  51C2               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23900  01457C  16DF               	andwf	indf2,f,c
 23901                           
 23902                           ; BSR set to: 0
 23903                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23904  01457E  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23905  014582  C0BF  F0C1         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23906  014586  0100               	movlb	0	; () banked
 23907  014588  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23908  01458A  D003               	goto	u8844
 23909  01458C                     u8845:
 23910  01458C  0100               	movlb	0	; () banked
 23911  01458E  90D8               	bcf	status,0,c
 23912  014590  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23913  014592                     u8844:
 23914  014592  0100               	movlb	0	; () banked
 23915  014594  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23916  014596  D7FA               	goto	u8845
 23917  014598  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23918  01459C  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23919  0145A0  0100               	movlb	0	; () banked
 23920  0145A2  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23921  0145A4  12DF               	iorwf	indf2,f,c
 23922                           
 23923                           ; BSR set to: 0
 23924  0145A6  0012               	return		;funcret
 23925  0145A8                     __end_of_Byte_SetZone:
 23926                           	opt stack 0
 23927                           tosu	equ	0xFFF
 23928                           tosh	equ	0xFFE
 23929                           tosl	equ	0xFFD
 23930                           pclath	equ	0xFFA
 23931                           tblptru	equ	0xFF8
 23932                           tblptrh	equ	0xFF7
 23933                           tblptrl	equ	0xFF6
 23934                           tablat	equ	0xFF5
 23935                           prodh	equ	0xFF4
 23936                           prodl	equ	0xFF3
 23937                           intcon	equ	0xFF2
 23938                           postinc0	equ	0xFEE
 23939                           wreg	equ	0xFE8
 23940                           indf1	equ	0xFE7
 23941                           postdec1	equ	0xFE5
 23942                           fsr1h	equ	0xFE2
 23943                           fsr1l	equ	0xFE1
 23944                           indf2	equ	0xFDF
 23945                           postinc2	equ	0xFDE
 23946                           postdec2	equ	0xFDD
 23947                           plusw2	equ	0xFDB
 23948                           fsr2h	equ	0xFDA
 23949                           fsr2l	equ	0xFD9
 23950                           status	equ	0xFD8
 23951                           
 23952 ;; *************** function _Console_Init *****************
 23953 ;; Defined at:
 23954 ;;		line 157 in file "Library/Console.c"
 23955 ;; Parameters:    Size  Location     Type
 23956 ;;		None
 23957 ;; Auto vars:     Size  Location     Type
 23958 ;;  y               1    3[BANK0 ] unsigned char 
 23959 ;;  x               1    2[BANK0 ] unsigned char 
 23960 ;; Return value:  Size  Location     Type
 23961 ;;                  1    wreg      void 
 23962 ;; Registers used:
 23963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23964 ;; Tracked objects:
 23965 ;;		On entry : 0/0
 23966 ;;		On exit  : 0/0
 23967 ;;		Unchanged: 0/0
 23968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23970 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23971 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23972 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23973 ;;Total ram usage:        4 bytes
 23974 ;; Hardware stack levels used:    1
 23975 ;; Hardware stack levels required when called:    7
 23976 ;; This function calls:
 23977 ;;		Nothing
 23978 ;; This function is called by:
 23979 ;;		_init
 23980 ;; This function uses a non-reentrant model
 23981 ;;
 23982                           
 23983                           	psect	text116
 23984  014F16                     __ptext116:
 23985                           	opt stack 0
 23986  014F16                     _Console_Init:
 23987                           	opt stack 22
 23988                           
 23989                           ;Console.c: 160: lBufferX = 0;
 23990                           
 23991                           ; BSR set to: 0
 23992                           ;incstack = 0
 23993  014F16  0E00               	movlw	0
 23994  014F18  0100               	movlb	0	; () banked
 23995  014F1A  6F8F               	movwf	_lBufferX& (0+255),b
 23996                           
 23997                           ;Console.c: 161: lBufferY = 0;
 23998  014F1C  0E00               	movlw	0
 23999  014F1E  0100               	movlb	0	; () banked
 24000  014F20  6F8E               	movwf	_lBufferY& (0+255),b
 24001                           
 24002                           ;Console.c: 163: UINT8 x, y;
 24003                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 24004  014F22  0E00               	movlw	0
 24005  014F24  0100               	movlb	0	; () banked
 24006  014F26  6FBC               	movwf	Console_Init@x& (0+255),b
 24007  014F28                     l14422:
 24008                           
 24009                           ; BSR set to: 0
 24010  014F28  0E13               	movlw	19
 24011  014F2A  0100               	movlb	0	; () banked
 24012  014F2C  65BC               	cpfsgt	Console_Init@x& (0+255),b
 24013  014F2E  D001               	goto	l976
 24014  014F30  0012               	return	
 24015  014F32                     l976:
 24016                           
 24017                           ; BSR set to: 0
 24018                           ;Console.c: 165: {
 24019                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 24020                           
 24021                           ; BSR set to: 0
 24022  014F32  0E00               	movlw	0
 24023  014F34  0100               	movlb	0	; () banked
 24024  014F36  6FBD               	movwf	Console_Init@y& (0+255),b
 24025  014F38                     l14428:
 24026                           
 24027                           ; BSR set to: 0
 24028  014F38  0E0E               	movlw	14
 24029  014F3A  0100               	movlb	0	; () banked
 24030  014F3C  65BD               	cpfsgt	Console_Init@y& (0+255),b
 24031  014F3E  D001               	goto	l978
 24032  014F40  D02C               	goto	u11280
 24033  014F42                     l978:
 24034                           
 24035                           ; BSR set to: 0
 24036                           ;Console.c: 167: {
 24037                           ;Console.c: 168: lBuffer[y][x] = '\0';
 24038                           
 24039                           ; BSR set to: 0
 24040  014F42  0100               	movlb	0	; () banked
 24041  014F44  51BD               	movf	Console_Init@y& (0+255),w,b
 24042  014F46  0D14               	mullw	20
 24043  014F48  0EAA               	movlw	low _lBuffer
 24044  014F4A  0100               	movlb	0	; () banked
 24045  014F4C  6FBA               	movwf	??_Console_Init& (0+255),b
 24046  014F4E  0E04               	movlw	high _lBuffer
 24047  014F50  0100               	movlb	0	; () banked
 24048  014F52  6FBB               	movwf	(??_Console_Init+1)& (0+255),b
 24049  014F54  50F3               	movf	prodl,w,c
 24050  014F56  0100               	movlb	0	; () banked
 24051  014F58  27BA               	addwf	??_Console_Init& (0+255),f,b
 24052  014F5A  50F4               	movf	prodh,w,c
 24053  014F5C  0100               	movlb	0	; () banked
 24054  014F5E  23BB               	addwfc	(??_Console_Init+1)& (0+255),f,b
 24055  014F60  0100               	movlb	0	; () banked
 24056  014F62  51BC               	movf	Console_Init@x& (0+255),w,b
 24057  014F64  0D01               	mullw	1
 24058  014F66  50F3               	movf	prodl,w,c
 24059  014F68  0100               	movlb	0	; () banked
 24060  014F6A  25BA               	addwf	??_Console_Init& (0+255),w,b
 24061  014F6C  6ED9               	movwf	fsr2l,c
 24062  014F6E  50F4               	movf	prodh,w,c
 24063  014F70  0100               	movlb	0	; () banked
 24064  014F72  21BB               	addwfc	(??_Console_Init+1)& (0+255),w,b
 24065  014F74  6EDA               	movwf	fsr2h,c
 24066  014F76  0E00               	movlw	0
 24067  014F78  6EDF               	movwf	indf2,c
 24068                           
 24069                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 24070  014F7A  0100               	movlb	0	; () banked
 24071  014F7C  51BD               	movf	Console_Init@y& (0+255),w,b
 24072  014F7E  0D02               	mullw	2
 24073  014F80  0E00               	movlw	low _lCBuffer
 24074  014F82  24F3               	addwf	prodl,w,c
 24075  014F84  6ED9               	movwf	fsr2l,c
 24076  014F86  0E03               	movlw	high _lCBuffer
 24077  014F88  20F4               	addwfc	prodh,w,c
 24078  014F8A  6EDA               	movwf	fsr2h,c
 24079  014F8C  0EFF               	movlw	255
 24080  014F8E  6EDE               	movwf	postinc2,c
 24081  014F90  0EFF               	movlw	255
 24082  014F92  6EDD               	movwf	postdec2,c
 24083                           
 24084                           ; BSR set to: 0
 24085  014F94  0100               	movlb	0	; () banked
 24086  014F96  2BBD               	incf	Console_Init@y& (0+255),f,b
 24087  014F98  D7CF               	goto	l14428
 24088  014F9A                     u11280:
 24089                           
 24090                           ; BSR set to: 0
 24091                           
 24092                           ; BSR set to: 0
 24093  014F9A  0100               	movlb	0	; () banked
 24094  014F9C  2BBC               	incf	Console_Init@x& (0+255),f,b
 24095  014F9E  D7C4               	goto	l14422
 24096  014FA0                     __end_of_Console_Init:
 24097                           	opt stack 0
 24098                           tosu	equ	0xFFF
 24099                           tosh	equ	0xFFE
 24100                           tosl	equ	0xFFD
 24101                           pclath	equ	0xFFA
 24102                           tblptru	equ	0xFF8
 24103                           tblptrh	equ	0xFF7
 24104                           tblptrl	equ	0xFF6
 24105                           tablat	equ	0xFF5
 24106                           prodh	equ	0xFF4
 24107                           prodl	equ	0xFF3
 24108                           intcon	equ	0xFF2
 24109                           postinc0	equ	0xFEE
 24110                           wreg	equ	0xFE8
 24111                           indf1	equ	0xFE7
 24112                           postdec1	equ	0xFE5
 24113                           fsr1h	equ	0xFE2
 24114                           fsr1l	equ	0xFE1
 24115                           indf2	equ	0xFDF
 24116                           postinc2	equ	0xFDE
 24117                           postdec2	equ	0xFDD
 24118                           plusw2	equ	0xFDB
 24119                           fsr2h	equ	0xFDA
 24120                           fsr2l	equ	0xFD9
 24121                           status	equ	0xFD8
 24122                           
 24123 ;; *************** function _ADC_Start *****************
 24124 ;; Defined at:
 24125 ;;		line 114 in file "Library/ADC.c"
 24126 ;; Parameters:    Size  Location     Type
 24127 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 24128 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24129 ;;		 -> NULL(0), 
 24130 ;; Auto vars:     Size  Location     Type
 24131 ;;		None
 24132 ;; Return value:  Size  Location     Type
 24133 ;;                  1    wreg      void 
 24134 ;; Registers used:
 24135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24136 ;; Tracked objects:
 24137 ;;		On entry : 0/0
 24138 ;;		On exit  : 0/0
 24139 ;;		Unchanged: 0/0
 24140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24141 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24144 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24145 ;;Total ram usage:        4 bytes
 24146 ;; Hardware stack levels used:    1
 24147 ;; Hardware stack levels required when called:    8
 24148 ;; This function calls:
 24149 ;;		_ADC_Off
 24150 ;;		_ADC_On
 24151 ;;		_ADC_SetChannel
 24152 ;; This function is called by:
 24153 ;;		_init
 24154 ;;		_findClosestWall
 24155 ;;		_mode1
 24156 ;;		_FunctADC
 24157 ;; This function uses a non-reentrant model
 24158 ;;
 24159                           
 24160                           	psect	text117
 24161  01502A                     __ptext117:
 24162                           	opt stack 0
 24163  01502A                     _ADC_Start:
 24164                           	opt stack 20
 24165                           
 24166                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 24167                           
 24168                           ; BSR set to: 0
 24169                           ;incstack = 0
 24170  01502A  B2C2               	btfsc	4034,1,c	;volatile
 24171  01502C  0012               	return	
 24172  01502E                     
 24173                           ;ADC.c: 128: {
 24174                           ;ADC.c: 129: ADC_Off();
 24175                           
 24176                           ;ADC.c: 127: for(;;)
 24177  01502E  ECCD  F0B3         	call	_ADC_Off	;wreg free
 24178                           
 24179                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 24180  015032  C0BC  FFD9         	movff	ADC_Start@pInput,fsr2l
 24181  015036  C0BD  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 24182  01503A  50DF               	movf	indf2,w,c
 24183  01503C  ECBF  F0B2         	call	_ADC_SetChannel
 24184                           
 24185                           ;ADC.c: 131: ADC_On();
 24186  015040  ECDB  F0B3         	call	_ADC_On	;wreg free
 24187                           
 24188                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 24189  015044  82C2               	bsf	4034,1,c	;volatile
 24190  015046  B2C2               	btfsc	4034,1,c	;volatile
 24191  015048  D7FE               	goto	l1280
 24192                           
 24193                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 24194  01504A  50C3               	movf	4035,w,c	;volatile
 24195  01504C  CFC4 F0BE          	movff	4036,??_ADC_Start	;volatile
 24196  015050  0100               	movlb	0	; () banked
 24197  015052  6BBF               	clrf	(??_ADC_Start+1)& (0+255),b
 24198  015054  C0BE  F0BF         	movff	??_ADC_Start,??_ADC_Start+1
 24199  015058  0100               	movlb	0	; () banked
 24200  01505A  6BBE               	clrf	??_ADC_Start& (0+255),b
 24201  01505C  0100               	movlb	0	; () banked
 24202  01505E  13BE               	iorwf	??_ADC_Start& (0+255),f,b
 24203  015060  0E00               	movlw	0
 24204  015062  13BF               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 24205  015064  0100               	movlb	0	; () banked
 24206  015066  EE20 F001          	lfsr	2,1
 24207  01506A  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24208  01506C  26D9               	addwf	fsr2l,f,c
 24209  01506E  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24210  015070  22DA               	addwfc	fsr2h,f,c
 24211  015072  C0BE  FFDE         	movff	??_ADC_Start,postinc2
 24212  015076  C0BF  FFDD         	movff	??_ADC_Start+1,postdec2
 24213                           
 24214                           ;ADC.c: 141: if (pInput->mNext == 0)
 24215  01507A  0100               	movlb	0	; () banked
 24216  01507C  EE20 F003          	lfsr	2,3
 24217  015080  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24218  015082  26D9               	addwf	fsr2l,f,c
 24219  015084  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24220  015086  22DA               	addwfc	fsr2h,f,c
 24221  015088  50DE               	movf	postinc2,w,c
 24222  01508A  10DE               	iorwf	postinc2,w,c
 24223  01508C  B4D8               	btfsc	status,2,c
 24224  01508E  D00C               	goto	l1283
 24225                           
 24226                           ; BSR set to: 0
 24227                           ;ADC.c: 145: pInput = pInput->mNext;
 24228                           
 24229                           ; BSR set to: 0
 24230                           
 24231                           ; BSR set to: 0
 24232                           ;ADC.c: 142: break;
 24233  015090  0100               	movlb	0	; () banked
 24234  015092  EE20 F003          	lfsr	2,3
 24235  015096  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24236  015098  26D9               	addwf	fsr2l,f,c
 24237  01509A  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24238  01509C  22DA               	addwfc	fsr2h,f,c
 24239  01509E  CFDE F0BC          	movff	postinc2,ADC_Start@pInput
 24240  0150A2  CFDD F0BD          	movff	postdec2,ADC_Start@pInput+1
 24241                           
 24242                           ;ADC.c: 146: }
 24243  0150A6  D7C3               	goto	l1276
 24244  0150A8                     l1283:
 24245                           
 24246                           ; BSR set to: 0
 24247                           ;ADC.c: 147: ADC_Off();
 24248                           
 24249                           ; BSR set to: 0
 24250  0150A8  ECCD  F0B3         	call	_ADC_Off	;wreg free
 24251  0150AC  0012               	return		;funcret
 24252  0150AE                     __end_of_ADC_Start:
 24253                           	opt stack 0
 24254                           tosu	equ	0xFFF
 24255                           tosh	equ	0xFFE
 24256                           tosl	equ	0xFFD
 24257                           pclath	equ	0xFFA
 24258                           tblptru	equ	0xFF8
 24259                           tblptrh	equ	0xFF7
 24260                           tblptrl	equ	0xFF6
 24261                           tablat	equ	0xFF5
 24262                           prodh	equ	0xFF4
 24263                           prodl	equ	0xFF3
 24264                           intcon	equ	0xFF2
 24265                           postinc0	equ	0xFEE
 24266                           wreg	equ	0xFE8
 24267                           indf1	equ	0xFE7
 24268                           postdec1	equ	0xFE5
 24269                           fsr1h	equ	0xFE2
 24270                           fsr1l	equ	0xFE1
 24271                           indf2	equ	0xFDF
 24272                           postinc2	equ	0xFDE
 24273                           postdec2	equ	0xFDD
 24274                           plusw2	equ	0xFDB
 24275                           fsr2h	equ	0xFDA
 24276                           fsr2l	equ	0xFD9
 24277                           status	equ	0xFD8
 24278                           
 24279 ;; *************** function _ADC_Init *****************
 24280 ;; Defined at:
 24281 ;;		line 19 in file "Library/ADC.c"
 24282 ;; Parameters:    Size  Location     Type
 24283 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 24284 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24285 ;;  pChannel        1    6[BANK0 ] enum E6742
 24286 ;; Auto vars:     Size  Location     Type
 24287 ;;		None
 24288 ;; Return value:  Size  Location     Type
 24289 ;;                  1    wreg      void 
 24290 ;; Registers used:
 24291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24292 ;; Tracked objects:
 24293 ;;		On entry : 0/0
 24294 ;;		On exit  : 0/0
 24295 ;;		Unchanged: 0/0
 24296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24297 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24300 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24301 ;;Total ram usage:        3 bytes
 24302 ;; Hardware stack levels used:    1
 24303 ;; Hardware stack levels required when called:    9
 24304 ;; This function calls:
 24305 ;;		_ADC_Calibrate
 24306 ;;		_ADC_ClockDivision
 24307 ;;		_ADC_ConversionTime
 24308 ;;		_ADC_SetChannel
 24309 ;;		_ADC_SetupIO
 24310 ;; This function is called by:
 24311 ;;		_init
 24312 ;;		_FunctInitADC
 24313 ;; This function uses a non-reentrant model
 24314 ;;
 24315                           
 24316                           	psect	text118
 24317  01522E                     __ptext118:
 24318                           	opt stack 0
 24319  01522E                     _ADC_Init:
 24320                           	opt stack 20
 24321                           
 24322                           ;ADC.c: 21: if(pInput==(void*)0)
 24323                           
 24324                           ;incstack = 0
 24325  01522E  0100               	movlb	0	; () banked
 24326  015230  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24327  015232  0100               	movlb	0	; () banked
 24328  015234  11BF               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 24329  015236  B4D8               	btfsc	status,2,c
 24330  015238  0012               	return	
 24331                           
 24332                           ; BSR set to: 0
 24333                           ;ADC.c: 25: lCurrent = pInput;
 24334                           
 24335                           ; BSR set to: 0
 24336                           
 24337                           ; BSR set to: 0
 24338                           ;ADC.c: 22: return;
 24339  01523A  C0BE  F081         	movff	ADC_Init@pInput,_lCurrent
 24340  01523E  C0BF  F082         	movff	ADC_Init@pInput+1,_lCurrent+1
 24341                           
 24342                           ; BSR set to: 0
 24343                           ;ADC.c: 27: pInput->mChannel = pChannel;
 24344  015242  C0BE  FFD9         	movff	ADC_Init@pInput,fsr2l
 24345  015246  C0BF  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 24346  01524A  C0C0  FFDF         	movff	ADC_Init@pChannel,indf2
 24347                           
 24348                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 24349  01524E  0100               	movlb	0	; () banked
 24350  015250  EE20 F003          	lfsr	2,3
 24351  015254  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24352  015256  26D9               	addwf	fsr2l,f,c
 24353  015258  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24354  01525A  22DA               	addwfc	fsr2h,f,c
 24355  01525C  0E00               	movlw	0
 24356  01525E  6EDE               	movwf	postinc2,c
 24357  015260  0E00               	movlw	0
 24358  015262  6EDD               	movwf	postdec2,c
 24359                           
 24360                           ;ADC.c: 29: pInput->mValue = 0;
 24361  015264  0100               	movlb	0	; () banked
 24362  015266  EE20 F001          	lfsr	2,1
 24363  01526A  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24364  01526C  26D9               	addwf	fsr2l,f,c
 24365  01526E  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24366  015270  22DA               	addwfc	fsr2h,f,c
 24367  015272  0E00               	movlw	0
 24368  015274  6EDE               	movwf	postinc2,c
 24369  015276  0E00               	movlw	0
 24370  015278  6EDD               	movwf	postdec2,c
 24371                           
 24372                           ; BSR set to: 0
 24373                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 24374  01527A  0100               	movlb	0	; () banked
 24375  01527C  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24376  01527E  ECBF  F0B2         	call	_ADC_SetChannel
 24377                           
 24378                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 24379  015282  9EC2               	bcf	4034,7,c	;volatile
 24380                           
 24381                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 24382  015284  9CC2               	bcf	4034,6,c	;volatile
 24383                           
 24384                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 24385  015286  8EC1               	bsf	4033,7,c	;volatile
 24386                           
 24387                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 24388  015288  8CC1               	bsf	4033,6,c	;volatile
 24389                           
 24390                           ;ADC.c: 43: ADC_ConversionTime(12);
 24391  01528A  0E0C               	movlw	12
 24392  01528C  ECB0  F0AE         	call	_ADC_ConversionTime
 24393                           
 24394                           ;ADC.c: 47: ADC_ClockDivision(16);
 24395  015290  0E10               	movlw	16
 24396  015292  ECD0  F0A7         	call	_ADC_ClockDivision
 24397                           
 24398                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 24399  015296  0100               	movlb	0	; () banked
 24400  015298  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24401  01529A  EC08  F0B1         	call	_ADC_SetupIO
 24402                           
 24403                           ;ADC.c: 58: ADC_Initialised = 1;
 24404  01529E  0E01               	movlw	1
 24405  0152A0  6E3C               	movwf	_ADC_Initialised,c
 24406                           
 24407                           ;ADC.c: 61: ADC_Calibrate();
 24408  0152A2  EC4F  F0B3         	call	_ADC_Calibrate	;wreg free
 24409  0152A6  0012               	return		;funcret
 24410  0152A8                     __end_of_ADC_Init:
 24411                           	opt stack 0
 24412                           tosu	equ	0xFFF
 24413                           tosh	equ	0xFFE
 24414                           tosl	equ	0xFFD
 24415                           pclath	equ	0xFFA
 24416                           tblptru	equ	0xFF8
 24417                           tblptrh	equ	0xFF7
 24418                           tblptrl	equ	0xFF6
 24419                           tablat	equ	0xFF5
 24420                           prodh	equ	0xFF4
 24421                           prodl	equ	0xFF3
 24422                           intcon	equ	0xFF2
 24423                           postinc0	equ	0xFEE
 24424                           wreg	equ	0xFE8
 24425                           indf1	equ	0xFE7
 24426                           postdec1	equ	0xFE5
 24427                           fsr1h	equ	0xFE2
 24428                           fsr1l	equ	0xFE1
 24429                           indf2	equ	0xFDF
 24430                           postinc2	equ	0xFDE
 24431                           postdec2	equ	0xFDD
 24432                           plusw2	equ	0xFDB
 24433                           fsr2h	equ	0xFDA
 24434                           fsr2l	equ	0xFD9
 24435                           status	equ	0xFD8
 24436                           
 24437 ;; *************** function _ADC_SetupIO *****************
 24438 ;; Defined at:
 24439 ;;		line 150 in file "Library/ADC.c"
 24440 ;; Parameters:    Size  Location     Type
 24441 ;;  pChannel        1    wreg     enum E6742
 24442 ;; Auto vars:     Size  Location     Type
 24443 ;;  pChannel        1    2[BANK0 ] enum E6742
 24444 ;;  MASK            1    3[BANK0 ] unsigned char 
 24445 ;; Return value:  Size  Location     Type
 24446 ;;                  1    wreg      void 
 24447 ;; Registers used:
 24448 ;;		wreg, status,2, status,0
 24449 ;; Tracked objects:
 24450 ;;		On entry : 0/0
 24451 ;;		On exit  : 0/0
 24452 ;;		Unchanged: 0/0
 24453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24456 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24457 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24458 ;;Total ram usage:        4 bytes
 24459 ;; Hardware stack levels used:    1
 24460 ;; Hardware stack levels required when called:    7
 24461 ;; This function calls:
 24462 ;;		Nothing
 24463 ;; This function is called by:
 24464 ;;		_ADC_Init
 24465 ;; This function uses a non-reentrant model
 24466 ;;
 24467                           
 24468                           	psect	text119
 24469  016210                     __ptext119:
 24470                           	opt stack 0
 24471  016210                     _ADC_SetupIO:
 24472                           	opt stack 21
 24473                           
 24474                           ;incstack = 0
 24475                           ;ADC_SetupIO@pChannel stored from wreg
 24476  016210  0100               	movlb	0	; () banked
 24477  016212  6FBC               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24478                           
 24479                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24480  016214  C0BC  F0BA         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24481  016218  0E01               	movlw	1
 24482  01621A  0100               	movlb	0	; () banked
 24483  01621C  6FBB               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24484  01621E  0100               	movlb	0	; () banked
 24485  016220  2BBA               	incf	??_ADC_SetupIO& (0+255),f,b
 24486  016222  D003               	goto	u10904
 24487  016224                     u10905:
 24488  016224  0100               	movlb	0	; () banked
 24489  016226  90D8               	bcf	status,0,c
 24490  016228  37BB               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24491  01622A                     u10904:
 24492  01622A  0100               	movlb	0	; () banked
 24493  01622C  2FBA               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24494  01622E  D7FA               	goto	u10905
 24495  016230  0100               	movlb	0	; () banked
 24496  016232  51BB               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24497  016234  0AFF               	xorlw	255
 24498  016236  0100               	movlb	0	; () banked
 24499  016238  6FBD               	movwf	ADC_SetupIO@MASK& (0+255),b
 24500                           
 24501                           ;ADC.c: 153: ANCON0 &= MASK;
 24502  01623A  0100               	movlb	0	; () banked
 24503  01623C  51BD               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24504  01623E  16C1               	andwf	4033,f,c	;volatile
 24505                           
 24506                           ; BSR set to: 0
 24507  016240  0012               	return		;funcret
 24508  016242                     __end_of_ADC_SetupIO:
 24509                           	opt stack 0
 24510                           tosu	equ	0xFFF
 24511                           tosh	equ	0xFFE
 24512                           tosl	equ	0xFFD
 24513                           pclath	equ	0xFFA
 24514                           tblptru	equ	0xFF8
 24515                           tblptrh	equ	0xFF7
 24516                           tblptrl	equ	0xFF6
 24517                           tablat	equ	0xFF5
 24518                           prodh	equ	0xFF4
 24519                           prodl	equ	0xFF3
 24520                           intcon	equ	0xFF2
 24521                           postinc0	equ	0xFEE
 24522                           wreg	equ	0xFE8
 24523                           indf1	equ	0xFE7
 24524                           postdec1	equ	0xFE5
 24525                           fsr1h	equ	0xFE2
 24526                           fsr1l	equ	0xFE1
 24527                           indf2	equ	0xFDF
 24528                           postinc2	equ	0xFDE
 24529                           postdec2	equ	0xFDD
 24530                           plusw2	equ	0xFDB
 24531                           fsr2h	equ	0xFDA
 24532                           fsr2l	equ	0xFD9
 24533                           status	equ	0xFD8
 24534                           
 24535 ;; *************** function _ADC_SetChannel *****************
 24536 ;; Defined at:
 24537 ;;		line 155 in file "Library/ADC.c"
 24538 ;; Parameters:    Size  Location     Type
 24539 ;;  pChannel        1    wreg     enum E6742
 24540 ;; Auto vars:     Size  Location     Type
 24541 ;;  pChannel        1    1[BANK0 ] enum E6742
 24542 ;; Return value:  Size  Location     Type
 24543 ;;                  1    wreg      void 
 24544 ;; Registers used:
 24545 ;;		wreg, status,2, status,0
 24546 ;; Tracked objects:
 24547 ;;		On entry : 0/0
 24548 ;;		On exit  : 0/0
 24549 ;;		Unchanged: 0/0
 24550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24555 ;;Total ram usage:        2 bytes
 24556 ;; Hardware stack levels used:    1
 24557 ;; Hardware stack levels required when called:    7
 24558 ;; This function calls:
 24559 ;;		Nothing
 24560 ;; This function is called by:
 24561 ;;		_ADC_Init
 24562 ;;		_ADC_Start
 24563 ;;		_ADC_ISR
 24564 ;;		_ADC_Sample
 24565 ;; This function uses a non-reentrant model
 24566 ;;
 24567                           
 24568                           	psect	text120
 24569  01657E                     __ptext120:
 24570                           	opt stack 0
 24571  01657E                     _ADC_SetChannel:
 24572                           	opt stack 20
 24573                           
 24574                           ; BSR set to: 0
 24575                           ;incstack = 0
 24576                           ;ADC_SetChannel@pChannel stored from wreg
 24577  01657E  0100               	movlb	0	; () banked
 24578  016580  6FBB               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24579                           
 24580                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24581  016582  C0BB  F0BA         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24582  016586  0100               	movlb	0	; () banked
 24583  016588  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24584  01658A  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24585  01658C  50C2               	movf	4034,w,c	;volatile
 24586  01658E  0100               	movlb	0	; () banked
 24587  016590  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24588  016592  0BC3               	andlw	-61
 24589  016594  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24590  016596  6EC2               	movwf	4034,c	;volatile
 24591                           
 24592                           ; BSR set to: 0
 24593  016598  0012               	return		;funcret
 24594  01659A                     __end_of_ADC_SetChannel:
 24595                           	opt stack 0
 24596                           tosu	equ	0xFFF
 24597                           tosh	equ	0xFFE
 24598                           tosl	equ	0xFFD
 24599                           pclath	equ	0xFFA
 24600                           tblptru	equ	0xFF8
 24601                           tblptrh	equ	0xFF7
 24602                           tblptrl	equ	0xFF6
 24603                           tablat	equ	0xFF5
 24604                           prodh	equ	0xFF4
 24605                           prodl	equ	0xFF3
 24606                           intcon	equ	0xFF2
 24607                           postinc0	equ	0xFEE
 24608                           wreg	equ	0xFE8
 24609                           indf1	equ	0xFE7
 24610                           postdec1	equ	0xFE5
 24611                           fsr1h	equ	0xFE2
 24612                           fsr1l	equ	0xFE1
 24613                           indf2	equ	0xFDF
 24614                           postinc2	equ	0xFDE
 24615                           postdec2	equ	0xFDD
 24616                           plusw2	equ	0xFDB
 24617                           fsr2h	equ	0xFDA
 24618                           fsr2l	equ	0xFD9
 24619                           status	equ	0xFD8
 24620                           
 24621 ;; *************** function _ADC_ConversionTime *****************
 24622 ;; Defined at:
 24623 ;;		line 199 in file "Library/ADC.c"
 24624 ;; Parameters:    Size  Location     Type
 24625 ;;  pCount          1    wreg     unsigned char 
 24626 ;; Auto vars:     Size  Location     Type
 24627 ;;  pCount          1    1[BANK0 ] unsigned char 
 24628 ;; Return value:  Size  Location     Type
 24629 ;;                  1    wreg      void 
 24630 ;; Registers used:
 24631 ;;		wreg, status,2, status,0
 24632 ;; Tracked objects:
 24633 ;;		On entry : 0/0
 24634 ;;		On exit  : 0/0
 24635 ;;		Unchanged: 0/0
 24636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24640 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24641 ;;Total ram usage:        2 bytes
 24642 ;; Hardware stack levels used:    1
 24643 ;; Hardware stack levels required when called:    7
 24644 ;; This function calls:
 24645 ;;		Nothing
 24646 ;; This function is called by:
 24647 ;;		_ADC_Init
 24648 ;; This function uses a non-reentrant model
 24649 ;;
 24650                           
 24651                           	psect	text121
 24652  015D60                     __ptext121:
 24653                           	opt stack 0
 24654  015D60                     _ADC_ConversionTime:
 24655                           	opt stack 21
 24656                           
 24657                           ; BSR set to: 0
 24658                           ;incstack = 0
 24659                           ;ADC_ConversionTime@pCount stored from wreg
 24660  015D60  0100               	movlb	0	; () banked
 24661  015D62  6FBB               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24662                           
 24663                           ;ADC.c: 201: if (pCount == 10)
 24664  015D64  0E0A               	movlw	10
 24665  015D66  0100               	movlb	0	; () banked
 24666  015D68  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24667  015D6A  B4D8               	btfsc	status,2,c
 24668  015D6C  D00A               	goto	u10870
 24669                           
 24670                           ; BSR set to: 0
 24671                           ;ADC.c: 203: else if (pCount == 14)
 24672                           
 24673                           ; BSR set to: 0
 24674                           
 24675                           ; BSR set to: 0
 24676                           ;ADC.c: 202: pCount -= 2;
 24677  015D6E  0E0E               	movlw	14
 24678  015D70  0100               	movlb	0	; () banked
 24679  015D72  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24680  015D74  B4D8               	btfsc	status,2,c
 24681  015D76  D005               	goto	u10870
 24682                           
 24683                           ; BSR set to: 0
 24684                           ;ADC.c: 205: else if (pCount == 18)
 24685                           
 24686                           ; BSR set to: 0
 24687                           
 24688                           ; BSR set to: 0
 24689                           ;ADC.c: 204: pCount -= 2;
 24690  015D78  0E12               	movlw	18
 24691  015D7A  0100               	movlb	0	; () banked
 24692  015D7C  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24693  015D7E  A4D8               	btfss	status,2,c
 24694  015D80  D003               	goto	l1313
 24695  015D82                     u10870:
 24696                           
 24697                           ; BSR set to: 0
 24698                           ;ADC.c: 206: pCount -= 2;
 24699  015D82  0E02               	movlw	2
 24700  015D84  0100               	movlb	0	; () banked
 24701  015D86  5FBB               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24702  015D88                     l1313:
 24703                           
 24704                           ; BSR set to: 0
 24705                           ;ADC.c: 208: pCount <<= 1;
 24706                           
 24707                           ; BSR set to: 0
 24708                           
 24709                           ; BSR set to: 0
 24710  015D88  0100               	movlb	0	; () banked
 24711  015D8A  90D8               	bcf	status,0,c
 24712  015D8C  37BB               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24713                           
 24714                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24715  015D8E  C0BB  F0BA         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24716  015D92  0100               	movlb	0	; () banked
 24717  015D94  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24718  015D96  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24719  015D98  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24720  015D9A  50C1               	movf	4033,w,c	;volatile
 24721  015D9C  0100               	movlb	0	; () banked
 24722  015D9E  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24723  015DA0  0BC7               	andlw	-57
 24724  015DA2  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24725  015DA4  6EC1               	movwf	4033,c	;volatile
 24726                           
 24727                           ; BSR set to: 0
 24728  015DA6  0012               	return		;funcret
 24729  015DA8                     __end_of_ADC_ConversionTime:
 24730                           	opt stack 0
 24731                           tosu	equ	0xFFF
 24732                           tosh	equ	0xFFE
 24733                           tosl	equ	0xFFD
 24734                           pclath	equ	0xFFA
 24735                           tblptru	equ	0xFF8
 24736                           tblptrh	equ	0xFF7
 24737                           tblptrl	equ	0xFF6
 24738                           tablat	equ	0xFF5
 24739                           prodh	equ	0xFF4
 24740                           prodl	equ	0xFF3
 24741                           intcon	equ	0xFF2
 24742                           postinc0	equ	0xFEE
 24743                           wreg	equ	0xFE8
 24744                           indf1	equ	0xFE7
 24745                           postdec1	equ	0xFE5
 24746                           fsr1h	equ	0xFE2
 24747                           fsr1l	equ	0xFE1
 24748                           indf2	equ	0xFDF
 24749                           postinc2	equ	0xFDE
 24750                           postdec2	equ	0xFDD
 24751                           plusw2	equ	0xFDB
 24752                           fsr2h	equ	0xFDA
 24753                           fsr2l	equ	0xFD9
 24754                           status	equ	0xFD8
 24755                           
 24756 ;; *************** function _ADC_ClockDivision *****************
 24757 ;; Defined at:
 24758 ;;		line 159 in file "Library/ADC.c"
 24759 ;; Parameters:    Size  Location     Type
 24760 ;;  pDivide         1    wreg     unsigned char 
 24761 ;; Auto vars:     Size  Location     Type
 24762 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24763 ;;  unfound         1    2[BANK0 ] unsigned char 
 24764 ;;  reg             1    1[BANK0 ] unsigned char 
 24765 ;; Return value:  Size  Location     Type
 24766 ;;                  1    wreg      void 
 24767 ;; Registers used:
 24768 ;;		wreg, status,2, status,0
 24769 ;; Tracked objects:
 24770 ;;		On entry : 0/0
 24771 ;;		On exit  : 0/0
 24772 ;;		Unchanged: 0/0
 24773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24775 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24777 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24778 ;;Total ram usage:        3 bytes
 24779 ;; Hardware stack levels used:    1
 24780 ;; Hardware stack levels required when called:    7
 24781 ;; This function calls:
 24782 ;;		Nothing
 24783 ;; This function is called by:
 24784 ;;		_ADC_Init
 24785 ;; This function uses a non-reentrant model
 24786 ;;
 24787                           
 24788                           	psect	text122
 24789  014FA0                     __ptext122:
 24790                           	opt stack 0
 24791  014FA0                     _ADC_ClockDivision:
 24792                           	opt stack 21
 24793                           
 24794                           ; BSR set to: 0
 24795                           ;incstack = 0
 24796                           ;ADC_ClockDivision@pDivide stored from wreg
 24797  014FA0  0100               	movlb	0	; () banked
 24798  014FA2  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24799                           
 24800                           ;ADC.c: 161: UINT8 reg = 0;
 24801  014FA4  0E00               	movlw	0
 24802  014FA6  0100               	movlb	0	; () banked
 24803  014FA8  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24804                           
 24805                           ;ADC.c: 162: bool unfound = 1;
 24806  014FAA  0E01               	movlw	1
 24807  014FAC  D002               	goto	L15
 24808  014FAE                     
 24809                           ; BSR set to: 0
 24810                           ;ADC.c: 167: reg = 0;
 24811                           
 24812                           ; BSR set to: 0
 24813  014FAE  0E00               	movlw	0
 24814  014FB0  D00C               	goto	L20
 24815  014FB2                     L15:
 24816  014FB2  0100               	movlb	0	; () banked
 24817  014FB4  6FBC               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24818                           
 24819                           ;ADC.c: 169: break;
 24820  014FB6  D02D               	goto	l1296
 24821  014FB8                     
 24822                           ; BSR set to: 0
 24823                           ;ADC.c: 171: reg = 0b100;
 24824                           
 24825                           ; BSR set to: 0
 24826  014FB8  0E04               	movlw	4
 24827  014FBA  D007               	goto	L20
 24828  014FBC                     
 24829                           ; BSR set to: 0
 24830                           ;ADC.c: 175: reg = 0b001;
 24831                           
 24832                           ; BSR set to: 0
 24833  014FBC  0E01               	movlw	1
 24834  014FBE  D005               	goto	L20
 24835  014FC0                     
 24836                           ; BSR set to: 0
 24837                           ;ADC.c: 179: reg = 0b101;
 24838                           
 24839                           ; BSR set to: 0
 24840  014FC0  0E05               	movlw	5
 24841  014FC2  D003               	goto	L20
 24842  014FC4                     
 24843                           ; BSR set to: 0
 24844                           ;ADC.c: 183: reg = 0b010;
 24845                           
 24846                           ; BSR set to: 0
 24847  014FC4  0E02               	movlw	2
 24848  014FC6  D001               	goto	L20
 24849  014FC8                     
 24850                           ; BSR set to: 0
 24851                           ;ADC.c: 187: reg = 0b110;
 24852                           
 24853                           ; BSR set to: 0
 24854  014FC8  0E06               	movlw	6
 24855  014FCA                     L20:
 24856  014FCA  0100               	movlb	0	; () banked
 24857  014FCC  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24858                           
 24859                           ;ADC.c: 188: unfound = 0;
 24860  014FCE  0E00               	movlw	0
 24861  014FD0  D7F0               	goto	L15
 24862  014FD2                     
 24863                           ; BSR set to: 0
 24864                           ;ADC.c: 191: if (pDivide > 2)
 24865                           
 24866                           ; BSR set to: 0
 24867  014FD2  0E02               	movlw	2
 24868  014FD4  0100               	movlb	0	; () banked
 24869  014FD6  65BA               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24870  014FD8  D003               	goto	l1303
 24871                           
 24872                           ; BSR set to: 0
 24873                           ;ADC.c: 192: pDivide--;
 24874  014FDA  0100               	movlb	0	; () banked
 24875  014FDC  07BA               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24876  014FDE  D019               	goto	l1296
 24877  014FE0                     l1303:
 24878                           
 24879                           ; BSR set to: 0
 24880                           ;ADC.c: 193: else
 24881                           ;ADC.c: 194: pDivide = 2;
 24882                           
 24883                           ; BSR set to: 0
 24884  014FE0  0E02               	movlw	2
 24885  014FE2  0100               	movlb	0	; () banked
 24886  014FE4  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24887                           
 24888                           ; BSR set to: 0
 24889                           ;ADC.c: 195: };
 24890  014FE6  D015               	goto	l1296
 24891  014FE8                     
 24892                           ; BSR set to: 0
 24893                           
 24894                           ; BSR set to: 0
 24895  014FE8  0100               	movlb	0	; () banked
 24896  014FEA  51BA               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24897                           
 24898                           ; Switch size 1, requested type "space"
 24899                           ; Number of cases is 6, Range of values is 2 to 64
 24900                           ; switch strategies available:
 24901                           ; Name         Instructions Cycles
 24902                           ; simple_byte           19    10 (average)
 24903                           ;	Chosen strategy is simple_byte
 24904  014FEC  0A02               	xorlw	2	; case 2
 24905  014FEE  B4D8               	btfsc	status,2,c
 24906  014FF0  D7DE               	goto	l1295
 24907  014FF2  0A06               	xorlw	6	; case 4
 24908  014FF4  B4D8               	btfsc	status,2,c
 24909  014FF6  D7E0               	goto	l1297
 24910  014FF8  0A0C               	xorlw	12	; case 8
 24911  014FFA  B4D8               	btfsc	status,2,c
 24912  014FFC  D7DF               	goto	l1298
 24913  014FFE  0A18               	xorlw	24	; case 16
 24914  015000  B4D8               	btfsc	status,2,c
 24915  015002  D7DE               	goto	l1299
 24916  015004  0A30               	xorlw	48	; case 32
 24917  015006  B4D8               	btfsc	status,2,c
 24918  015008  D7DD               	goto	l1300
 24919  01500A  0A60               	xorlw	96	; case 64
 24920  01500C  B4D8               	btfsc	status,2,c
 24921  01500E  D7DC               	goto	l1301
 24922  015010  D7E0               	goto	l1302
 24923  015012                     l1296:
 24924                           
 24925                           ; BSR set to: 0
 24926                           
 24927                           ; BSR set to: 0
 24928                           
 24929                           ; BSR set to: 0
 24930  015012  0100               	movlb	0	; () banked
 24931  015014  51BC               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24932  015016  0100               	movlb	0	; () banked
 24933  015018  A4D8               	btfss	status,2,c
 24934  01501A  D7E6               	goto	l1294
 24935                           
 24936                           ; BSR set to: 0
 24937                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24938                           
 24939                           ; BSR set to: 0
 24940  01501C  50C1               	movf	4033,w,c	;volatile
 24941  01501E  0100               	movlb	0	; () banked
 24942  015020  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24943  015022  0BF8               	andlw	-8
 24944  015024  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24945  015026  6EC1               	movwf	4033,c	;volatile
 24946                           
 24947                           ; BSR set to: 0
 24948  015028  0012               	return		;funcret
 24949  01502A                     __end_of_ADC_ClockDivision:
 24950                           	opt stack 0
 24951                           tosu	equ	0xFFF
 24952                           tosh	equ	0xFFE
 24953                           tosl	equ	0xFFD
 24954                           pclath	equ	0xFFA
 24955                           tblptru	equ	0xFF8
 24956                           tblptrh	equ	0xFF7
 24957                           tblptrl	equ	0xFF6
 24958                           tablat	equ	0xFF5
 24959                           prodh	equ	0xFF4
 24960                           prodl	equ	0xFF3
 24961                           intcon	equ	0xFF2
 24962                           postinc0	equ	0xFEE
 24963                           wreg	equ	0xFE8
 24964                           indf1	equ	0xFE7
 24965                           postdec1	equ	0xFE5
 24966                           fsr1h	equ	0xFE2
 24967                           fsr1l	equ	0xFE1
 24968                           indf2	equ	0xFDF
 24969                           postinc2	equ	0xFDE
 24970                           postdec2	equ	0xFDD
 24971                           plusw2	equ	0xFDB
 24972                           fsr2h	equ	0xFDA
 24973                           fsr2l	equ	0xFD9
 24974                           status	equ	0xFD8
 24975                           
 24976 ;; *************** function _ADC_Calibrate *****************
 24977 ;; Defined at:
 24978 ;;		line 63 in file "Library/ADC.c"
 24979 ;; Parameters:    Size  Location     Type
 24980 ;;		None
 24981 ;; Auto vars:     Size  Location     Type
 24982 ;;		None
 24983 ;; Return value:  Size  Location     Type
 24984 ;;                  1    wreg      void 
 24985 ;; Registers used:
 24986 ;;		cstack
 24987 ;; Tracked objects:
 24988 ;;		On entry : 0/0
 24989 ;;		On exit  : 0/0
 24990 ;;		Unchanged: 0/0
 24991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24996 ;;Total ram usage:        0 bytes
 24997 ;; Hardware stack levels used:    1
 24998 ;; Hardware stack levels required when called:    8
 24999 ;; This function calls:
 25000 ;;		_ADC_Off
 25001 ;;		_ADC_On
 25002 ;; This function is called by:
 25003 ;;		_ADC_Init
 25004 ;; This function uses a non-reentrant model
 25005 ;;
 25006                           
 25007                           	psect	text123
 25008  01669E                     __ptext123:
 25009                           	opt stack 0
 25010  01669E                     _ADC_Calibrate:
 25011                           	opt stack 20
 25012                           
 25013                           ;ADC.c: 65: ADC_On();
 25014                           
 25015                           ; BSR set to: 0
 25016                           ;incstack = 0
 25017  01669E  ECDB  F0B3         	call	_ADC_On	;wreg free
 25018                           
 25019                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 25020  0166A2  8CC1               	bsf	4033,6,c	;volatile
 25021                           
 25022                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 25023  0166A4  82C2               	bsf	4034,1,c	;volatile
 25024  0166A6  B2C2               	btfsc	4034,1,c	;volatile
 25025  0166A8  D7FE               	goto	l1254
 25026                           
 25027                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 25028  0166AA  9CC1               	bcf	4033,6,c	;volatile
 25029                           
 25030                           ;ADC.c: 73: ADC_Off();
 25031  0166AC  ECCD  F0B3         	call	_ADC_Off	;wreg free
 25032  0166B0  0012               	return		;funcret
 25033  0166B2                     __end_of_ADC_Calibrate:
 25034                           	opt stack 0
 25035                           tosu	equ	0xFFF
 25036                           tosh	equ	0xFFE
 25037                           tosl	equ	0xFFD
 25038                           pclath	equ	0xFFA
 25039                           tblptru	equ	0xFF8
 25040                           tblptrh	equ	0xFF7
 25041                           tblptrl	equ	0xFF6
 25042                           tablat	equ	0xFF5
 25043                           prodh	equ	0xFF4
 25044                           prodl	equ	0xFF3
 25045                           intcon	equ	0xFF2
 25046                           postinc0	equ	0xFEE
 25047                           wreg	equ	0xFE8
 25048                           indf1	equ	0xFE7
 25049                           postdec1	equ	0xFE5
 25050                           fsr1h	equ	0xFE2
 25051                           fsr1l	equ	0xFE1
 25052                           indf2	equ	0xFDF
 25053                           postinc2	equ	0xFDE
 25054                           postdec2	equ	0xFDD
 25055                           plusw2	equ	0xFDB
 25056                           fsr2h	equ	0xFDA
 25057                           fsr2l	equ	0xFD9
 25058                           status	equ	0xFD8
 25059                           
 25060 ;; *************** function _ADC_On *****************
 25061 ;; Defined at:
 25062 ;;		line 85 in file "Library/ADC.c"
 25063 ;; Parameters:    Size  Location     Type
 25064 ;;		None
 25065 ;; Auto vars:     Size  Location     Type
 25066 ;;		None
 25067 ;; Return value:  Size  Location     Type
 25068 ;;                  1    wreg      void 
 25069 ;; Registers used:
 25070 ;;		None
 25071 ;; Tracked objects:
 25072 ;;		On entry : 0/0
 25073 ;;		On exit  : 0/0
 25074 ;;		Unchanged: 0/0
 25075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25080 ;;Total ram usage:        0 bytes
 25081 ;; Hardware stack levels used:    1
 25082 ;; Hardware stack levels required when called:    7
 25083 ;; This function calls:
 25084 ;;		Nothing
 25085 ;; This function is called by:
 25086 ;;		_ADC_Calibrate
 25087 ;;		_ADC_Start
 25088 ;;		_ADC_ISR
 25089 ;;		_ADC_Sample
 25090 ;; This function uses a non-reentrant model
 25091 ;;
 25092                           
 25093                           	psect	text124
 25094  0167B6                     __ptext124:
 25095                           	opt stack 0
 25096  0167B6                     _ADC_On:
 25097                           	opt stack 20
 25098                           
 25099                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 25100                           
 25101                           ;incstack = 0
 25102  0167B6  80C2               	bsf	4034,0,c	;volatile
 25103                           
 25104                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 25105  0167B8  9C9E               	bcf	3998,6,c	;volatile
 25106  0167BA  0012               	return		;funcret
 25107  0167BC                     __end_of_ADC_On:
 25108                           	opt stack 0
 25109                           tosu	equ	0xFFF
 25110                           tosh	equ	0xFFE
 25111                           tosl	equ	0xFFD
 25112                           pclath	equ	0xFFA
 25113                           tblptru	equ	0xFF8
 25114                           tblptrh	equ	0xFF7
 25115                           tblptrl	equ	0xFF6
 25116                           tablat	equ	0xFF5
 25117                           prodh	equ	0xFF4
 25118                           prodl	equ	0xFF3
 25119                           intcon	equ	0xFF2
 25120                           postinc0	equ	0xFEE
 25121                           wreg	equ	0xFE8
 25122                           indf1	equ	0xFE7
 25123                           postdec1	equ	0xFE5
 25124                           fsr1h	equ	0xFE2
 25125                           fsr1l	equ	0xFE1
 25126                           indf2	equ	0xFDF
 25127                           postinc2	equ	0xFDE
 25128                           postdec2	equ	0xFDD
 25129                           plusw2	equ	0xFDB
 25130                           fsr2h	equ	0xFDA
 25131                           fsr2l	equ	0xFD9
 25132                           status	equ	0xFD8
 25133                           
 25134 ;; *************** function _ADC_Off *****************
 25135 ;; Defined at:
 25136 ;;		line 94 in file "Library/ADC.c"
 25137 ;; Parameters:    Size  Location     Type
 25138 ;;		None
 25139 ;; Auto vars:     Size  Location     Type
 25140 ;;		None
 25141 ;; Return value:  Size  Location     Type
 25142 ;;                  1    wreg      void 
 25143 ;; Registers used:
 25144 ;;		None
 25145 ;; Tracked objects:
 25146 ;;		On entry : 0/0
 25147 ;;		On exit  : 0/0
 25148 ;;		Unchanged: 0/0
 25149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25154 ;;Total ram usage:        0 bytes
 25155 ;; Hardware stack levels used:    1
 25156 ;; Hardware stack levels required when called:    7
 25157 ;; This function calls:
 25158 ;;		Nothing
 25159 ;; This function is called by:
 25160 ;;		_ADC_Calibrate
 25161 ;;		_ADC_Start
 25162 ;;		_ADC_ISR
 25163 ;;		_ADC_Sample
 25164 ;; This function uses a non-reentrant model
 25165 ;;
 25166                           
 25167                           	psect	text125
 25168  01679A                     __ptext125:
 25169                           	opt stack 0
 25170  01679A                     _ADC_Off:
 25171                           	opt stack 20
 25172                           
 25173                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 25174                           
 25175                           ;incstack = 0
 25176  01679A  90C2               	bcf	4034,0,c	;volatile
 25177                           
 25178                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 25179  01679C  9C9E               	bcf	3998,6,c	;volatile
 25180                           
 25181                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 25182  01679E  9C9D               	bcf	3997,6,c	;volatile
 25183  0167A0  0012               	return		;funcret
 25184  0167A2                     __end_of_ADC_Off:
 25185                           	opt stack 0
 25186                           tosu	equ	0xFFF
 25187                           tosh	equ	0xFFE
 25188                           tosl	equ	0xFFD
 25189                           pclath	equ	0xFFA
 25190                           tblptru	equ	0xFF8
 25191                           tblptrh	equ	0xFF7
 25192                           tblptrl	equ	0xFF6
 25193                           tablat	equ	0xFF5
 25194                           prodh	equ	0xFF4
 25195                           prodl	equ	0xFF3
 25196                           intcon	equ	0xFF2
 25197                           postinc0	equ	0xFEE
 25198                           wreg	equ	0xFE8
 25199                           indf1	equ	0xFE7
 25200                           postdec1	equ	0xFE5
 25201                           fsr1h	equ	0xFE2
 25202                           fsr1l	equ	0xFE1
 25203                           indf2	equ	0xFDF
 25204                           postinc2	equ	0xFDE
 25205                           postdec2	equ	0xFDD
 25206                           plusw2	equ	0xFDB
 25207                           fsr2h	equ	0xFDA
 25208                           fsr2l	equ	0xFD9
 25209                           status	equ	0xFD8
 25210                           
 25211 ;; *************** function _getMode *****************
 25212 ;; Defined at:
 25213 ;;		line 106 in file "main.c"
 25214 ;; Parameters:    Size  Location     Type
 25215 ;;		None
 25216 ;; Auto vars:     Size  Location     Type
 25217 ;;		None
 25218 ;; Return value:  Size  Location     Type
 25219 ;;                  1    wreg      void 
 25220 ;; Registers used:
 25221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25222 ;; Tracked objects:
 25223 ;;		On entry : 0/0
 25224 ;;		On exit  : 0/0
 25225 ;;		Unchanged: 0/0
 25226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25231 ;;Total ram usage:        0 bytes
 25232 ;; Hardware stack levels used:    1
 25233 ;; Hardware stack levels required when called:   16
 25234 ;; This function calls:
 25235 ;;		_HMI_DIPSwitch
 25236 ;;		_HMI_DownSwitch
 25237 ;;		_HMI_LeftSwitch
 25238 ;;		_HMI_Poll
 25239 ;;		_HMI_RightSwitch
 25240 ;;		_HMI_UpSwitch
 25241 ;;		_MXK_DIPSwitch
 25242 ;;		_MXK_TestButton
 25243 ;; This function is called by:
 25244 ;;		_main
 25245 ;; This function uses a non-reentrant model
 25246 ;;
 25247                           
 25248                           	psect	text126
 25249  0141FE                     __ptext126:
 25250                           	opt stack 0
 25251  0141FE                     _getMode:
 25252                           	opt stack 14
 25253                           
 25254                           ;main.c: 107: HMI_Poll();
 25255                           
 25256                           ;incstack = 0
 25257  0141FE  EC79  F0AA         	call	_HMI_Poll	;wreg free
 25258                           
 25259                           ;main.c: 108: mode = 0;
 25260  014202  0E00               	movlw	0
 25261  014204  0103               	movlb	3	; () banked
 25262  014206  6F3D               	movwf	(_mode+1)& (0+255),b
 25263  014208  0E00               	movlw	0
 25264  01420A  6F3C               	movwf	_mode& (0+255),b
 25265                           
 25266                           ; BSR set to: 3
 25267                           ;main.c: 109: if (HMIBoard.mUp.mGetState()) {
 25268  01420C  EE23  F063         	lfsr	2,_HMIBoard+35
 25269  014210  D801               	call	u11818
 25270  014212  D00A               	goto	u11819
 25271  014214                     u11818:
 25272  014214  0005               	push	
 25273  014216  6EFA               	movwf	pclath,c
 25274  014218  50DE               	movf	postinc2,w,c
 25275  01421A  6EFD               	movwf	tosl,c
 25276  01421C  50DE               	movf	postinc2,w,c
 25277  01421E  6EFE               	movwf	tosh,c
 25278  014220  50DE               	movf	postinc2,w,c
 25279  014222  6EFF               	movwf	tosu,c
 25280  014224  50FA               	movf	pclath,w,c
 25281  014226  0012               	return		;indir
 25282  014228                     u11819:
 25283  014228  0900               	iorlw	0
 25284  01422A  B4D8               	btfsc	status,2,c
 25285  01422C  D005               	goto	l2316
 25286                           
 25287                           ;main.c: 110: mode = 1;
 25288  01422E  0E00               	movlw	0
 25289  014230  0103               	movlb	3	; () banked
 25290  014232  6F3D               	movwf	(_mode+1)& (0+255),b
 25291  014234  0E01               	movlw	1
 25292  014236  6F3C               	movwf	_mode& (0+255),b
 25293  014238                     l2316:
 25294                           
 25295                           ;main.c: 111: }
 25296                           ;main.c: 112: if (HMIBoard.mRight.mGetState()) {
 25297                           
 25298                           ; BSR set to: 3
 25299  014238  EE23  F04F         	lfsr	2,_HMIBoard+15
 25300  01423C  D801               	call	u11838
 25301  01423E  D00A               	goto	u11839
 25302  014240                     u11838:
 25303  014240  0005               	push	
 25304  014242  6EFA               	movwf	pclath,c
 25305  014244  50DE               	movf	postinc2,w,c
 25306  014246  6EFD               	movwf	tosl,c
 25307  014248  50DE               	movf	postinc2,w,c
 25308  01424A  6EFE               	movwf	tosh,c
 25309  01424C  50DE               	movf	postinc2,w,c
 25310  01424E  6EFF               	movwf	tosu,c
 25311  014250  50FA               	movf	pclath,w,c
 25312  014252  0012               	return		;indir
 25313  014254                     u11839:
 25314  014254  0900               	iorlw	0
 25315  014256  B4D8               	btfsc	status,2,c
 25316  014258  D005               	goto	l2317
 25317                           
 25318                           ;main.c: 113: mode = 2;
 25319  01425A  0E00               	movlw	0
 25320  01425C  0103               	movlb	3	; () banked
 25321  01425E  6F3D               	movwf	(_mode+1)& (0+255),b
 25322  014260  0E02               	movlw	2
 25323  014262  6F3C               	movwf	_mode& (0+255),b
 25324  014264                     l2317:
 25325                           
 25326                           ;main.c: 114: }
 25327                           ;main.c: 115: if (HMIBoard.mDown.mGetState()) {
 25328                           
 25329                           ; BSR set to: 3
 25330  014264  EE23  F06D         	lfsr	2,_HMIBoard+45
 25331  014268  D801               	call	u11858
 25332  01426A  D00A               	goto	u11859
 25333  01426C                     u11858:
 25334  01426C  0005               	push	
 25335  01426E  6EFA               	movwf	pclath,c
 25336  014270  50DE               	movf	postinc2,w,c
 25337  014272  6EFD               	movwf	tosl,c
 25338  014274  50DE               	movf	postinc2,w,c
 25339  014276  6EFE               	movwf	tosh,c
 25340  014278  50DE               	movf	postinc2,w,c
 25341  01427A  6EFF               	movwf	tosu,c
 25342  01427C  50FA               	movf	pclath,w,c
 25343  01427E  0012               	return		;indir
 25344  014280                     u11859:
 25345  014280  0900               	iorlw	0
 25346  014282  B4D8               	btfsc	status,2,c
 25347  014284  D005               	goto	l2318
 25348                           
 25349                           ;main.c: 116: mode = 3;
 25350  014286  0E00               	movlw	0
 25351  014288  0103               	movlb	3	; () banked
 25352  01428A  6F3D               	movwf	(_mode+1)& (0+255),b
 25353  01428C  0E03               	movlw	3
 25354  01428E  6F3C               	movwf	_mode& (0+255),b
 25355  014290                     l2318:
 25356                           
 25357                           ;main.c: 117: }
 25358                           ;main.c: 118: if (HMIBoard.mLeft.mGetState()) {
 25359                           
 25360                           ; BSR set to: 3
 25361  014290  EE23  F059         	lfsr	2,_HMIBoard+25
 25362  014294  D801               	call	u11878
 25363  014296  D00A               	goto	u11879
 25364  014298                     u11878:
 25365  014298  0005               	push	
 25366  01429A  6EFA               	movwf	pclath,c
 25367  01429C  50DE               	movf	postinc2,w,c
 25368  01429E  6EFD               	movwf	tosl,c
 25369  0142A0  50DE               	movf	postinc2,w,c
 25370  0142A2  6EFE               	movwf	tosh,c
 25371  0142A4  50DE               	movf	postinc2,w,c
 25372  0142A6  6EFF               	movwf	tosu,c
 25373  0142A8  50FA               	movf	pclath,w,c
 25374  0142AA  0012               	return		;indir
 25375  0142AC                     u11879:
 25376  0142AC  0900               	iorlw	0
 25377  0142AE  B4D8               	btfsc	status,2,c
 25378  0142B0  0012               	return	
 25379                           
 25380                           ;main.c: 119: mode = 4;
 25381  0142B2  0E00               	movlw	0
 25382  0142B4  0103               	movlb	3	; () banked
 25383  0142B6  6F3D               	movwf	(_mode+1)& (0+255),b
 25384  0142B8  0E04               	movlw	4
 25385  0142BA  6F3C               	movwf	_mode& (0+255),b
 25386  0142BC  0012               	return	
 25387  0142BE                     __end_of_getMode:
 25388                           	opt stack 0
 25389                           tosu	equ	0xFFF
 25390                           tosh	equ	0xFFE
 25391                           tosl	equ	0xFFD
 25392                           pclath	equ	0xFFA
 25393                           tblptru	equ	0xFF8
 25394                           tblptrh	equ	0xFF7
 25395                           tblptrl	equ	0xFF6
 25396                           tablat	equ	0xFF5
 25397                           prodh	equ	0xFF4
 25398                           prodl	equ	0xFF3
 25399                           intcon	equ	0xFF2
 25400                           postinc0	equ	0xFEE
 25401                           wreg	equ	0xFE8
 25402                           indf1	equ	0xFE7
 25403                           postdec1	equ	0xFE5
 25404                           fsr1h	equ	0xFE2
 25405                           fsr1l	equ	0xFE1
 25406                           indf2	equ	0xFDF
 25407                           postinc2	equ	0xFDE
 25408                           postdec2	equ	0xFDD
 25409                           plusw2	equ	0xFDB
 25410                           fsr2h	equ	0xFDA
 25411                           fsr2l	equ	0xFD9
 25412                           status	equ	0xFD8
 25413                           
 25414 ;; *************** function _HMI_Poll *****************
 25415 ;; Defined at:
 25416 ;;		line 252 in file "HMI.c"
 25417 ;; Parameters:    Size  Location     Type
 25418 ;;		None
 25419 ;; Auto vars:     Size  Location     Type
 25420 ;;		None
 25421 ;; Return value:  Size  Location     Type
 25422 ;;                  1    wreg      void 
 25423 ;; Registers used:
 25424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25425 ;; Tracked objects:
 25426 ;;		On entry : 0/0
 25427 ;;		On exit  : 0/0
 25428 ;;		Unchanged: 0/0
 25429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25434 ;;Total ram usage:        0 bytes
 25435 ;; Hardware stack levels used:    1
 25436 ;; Hardware stack levels required when called:   15
 25437 ;; This function calls:
 25438 ;;		_Button_Poll
 25439 ;; This function is called by:
 25440 ;;		_getMode
 25441 ;;		_safeToGo
 25442 ;;		_main
 25443 ;; This function uses a non-reentrant model
 25444 ;;
 25445                           
 25446                           	psect	text127
 25447  0154F2                     __ptext127:
 25448                           	opt stack 0
 25449  0154F2                     _HMI_Poll:
 25450                           	opt stack 13
 25451                           
 25452                           ;HMI.c: 254: TRISE = 0xFC;
 25453                           
 25454                           ;incstack = 0
 25455  0154F2  0EFC               	movlw	252
 25456  0154F4  6E96               	movwf	3990,c	;volatile
 25457                           
 25458                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 25459  0154F6  0E70               	movlw	low (_HMIBoard+48)
 25460  0154F8  0100               	movlb	0	; () banked
 25461  0154FA  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25462  0154FC  0E03               	movlw	high (_HMIBoard+48)
 25463  0154FE  0100               	movlb	0	; () banked
 25464  015500  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25465  015502  0E01               	movlw	1
 25466  015504  0100               	movlb	0	; () banked
 25467  015506  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25468  015508  EC14  F098         	call	_Button_Poll	;wreg free
 25469                           
 25470                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 25471  01550C  0E52               	movlw	low (_HMIBoard+18)
 25472  01550E  0100               	movlb	0	; () banked
 25473  015510  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25474  015512  0E03               	movlw	high (_HMIBoard+18)
 25475  015514  0100               	movlb	0	; () banked
 25476  015516  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25477  015518  0E01               	movlw	1
 25478  01551A  0100               	movlb	0	; () banked
 25479  01551C  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25480  01551E  EC14  F098         	call	_Button_Poll	;wreg free
 25481                           
 25482                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 25483  015522  0E48               	movlw	low (_HMIBoard+8)
 25484  015524  0100               	movlb	0	; () banked
 25485  015526  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25486  015528  0E03               	movlw	high (_HMIBoard+8)
 25487  01552A  0100               	movlb	0	; () banked
 25488  01552C  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25489  01552E  0E01               	movlw	1
 25490  015530  0100               	movlb	0	; () banked
 25491  015532  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25492  015534  EC14  F098         	call	_Button_Poll	;wreg free
 25493                           
 25494                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 25495  015538  0E5C               	movlw	low (_HMIBoard+28)
 25496  01553A  0100               	movlb	0	; () banked
 25497  01553C  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25498  01553E  0E03               	movlw	high (_HMIBoard+28)
 25499  015540  0100               	movlb	0	; () banked
 25500  015542  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25501  015544  0E01               	movlw	1
 25502  015546  0100               	movlb	0	; () banked
 25503  015548  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25504  01554A  EC14  F098         	call	_Button_Poll	;wreg free
 25505                           
 25506                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 25507  01554E  0E66               	movlw	low (_HMIBoard+38)
 25508  015550  0100               	movlb	0	; () banked
 25509  015552  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25510  015554  0E03               	movlw	high (_HMIBoard+38)
 25511  015556  0100               	movlb	0	; () banked
 25512  015558  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25513  01555A  0E01               	movlw	1
 25514  01555C  0100               	movlb	0	; () banked
 25515  01555E  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25516  015560  EC14  F098         	call	_Button_Poll	;wreg free
 25517  015564  0012               	return		;funcret
 25518  015566                     __end_of_HMI_Poll:
 25519                           	opt stack 0
 25520                           tosu	equ	0xFFF
 25521                           tosh	equ	0xFFE
 25522                           tosl	equ	0xFFD
 25523                           pclath	equ	0xFFA
 25524                           tblptru	equ	0xFF8
 25525                           tblptrh	equ	0xFF7
 25526                           tblptrl	equ	0xFF6
 25527                           tablat	equ	0xFF5
 25528                           prodh	equ	0xFF4
 25529                           prodl	equ	0xFF3
 25530                           intcon	equ	0xFF2
 25531                           postinc0	equ	0xFEE
 25532                           wreg	equ	0xFE8
 25533                           indf1	equ	0xFE7
 25534                           postdec1	equ	0xFE5
 25535                           fsr1h	equ	0xFE2
 25536                           fsr1l	equ	0xFE1
 25537                           indf2	equ	0xFDF
 25538                           postinc2	equ	0xFDE
 25539                           postdec2	equ	0xFDD
 25540                           plusw2	equ	0xFDB
 25541                           fsr2h	equ	0xFDA
 25542                           fsr2l	equ	0xFD9
 25543                           status	equ	0xFD8
 25544                           
 25545 ;; *************** function _Button_Poll *****************
 25546 ;; Defined at:
 25547 ;;		line 57 in file "Library/Button.c"
 25548 ;; Parameters:    Size  Location     Type
 25549 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 25550 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 25551 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 25552 ;; Auto vars:     Size  Location     Type
 25553 ;;  Pin             1   35[BANK0 ] unsigned char 
 25554 ;; Return value:  Size  Location     Type
 25555 ;;                  1    wreg      unsigned char 
 25556 ;; Registers used:
 25557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25558 ;; Tracked objects:
 25559 ;;		On entry : 0/0
 25560 ;;		On exit  : 0/0
 25561 ;;		Unchanged: 0/0
 25562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25563 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25565 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25566 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25567 ;;Total ram usage:        9 bytes
 25568 ;; Hardware stack levels used:    1
 25569 ;; Hardware stack levels required when called:   14
 25570 ;; This function calls:
 25571 ;;		_Event_DIPSwitch
 25572 ;;		_Event_NULL
 25573 ;;		_Event_TestButton
 25574 ;;		_HMI_DIPSwitch
 25575 ;;		_HMI_DownSwitch
 25576 ;;		_HMI_LeftSwitch
 25577 ;;		_HMI_RightSwitch
 25578 ;;		_HMI_UpSwitch
 25579 ;;		_MXK_DIPSwitch
 25580 ;;		_MXK_TestButton
 25581 ;; This function is called by:
 25582 ;;		_HMI_Poll
 25583 ;;		_MXK_Poll
 25584 ;; This function uses a non-reentrant model
 25585 ;;
 25586                           
 25587                           	psect	text128
 25588  013028                     __ptext128:
 25589                           	opt stack 0
 25590  013028                     _Button_Poll:
 25591                           	opt stack 13
 25592                           
 25593                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25594                           
 25595                           ;incstack = 0
 25596  013028  0100               	movlb	0	; () banked
 25597  01302A  EE20 F007          	lfsr	2,7
 25598  01302E  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25599  013030  26D9               	addwf	fsr2l,f,c
 25600  013032  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25601  013034  22DA               	addwfc	fsr2h,f,c
 25602  013036  D801               	call	u9698
 25603  013038  D00A               	goto	u9699
 25604  01303A                     u9698:
 25605  01303A  0005               	push	
 25606  01303C  6EFA               	movwf	pclath,c
 25607  01303E  50DE               	movf	postinc2,w,c
 25608  013040  6EFD               	movwf	tosl,c
 25609  013042  50DE               	movf	postinc2,w,c
 25610  013044  6EFE               	movwf	tosh,c
 25611  013046  50DE               	movf	postinc2,w,c
 25612  013048  6EFF               	movwf	tosu,c
 25613  01304A  50FA               	movf	pclath,w,c
 25614  01304C  0012               	return		;indir
 25615  01304E                     u9699:
 25616  01304E  0100               	movlb	0	; () banked
 25617  013050  6FDD               	movwf	Button_Poll@Pin& (0+255),b
 25618                           
 25619                           ; BSR set to: 0
 25620                           ;Button.c: 61: if (pButton->mState == Pin)
 25621  013052  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25622  013056  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25623  01305A  0100               	movlb	0	; () banked
 25624  01305C  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25625  01305E  18DE               	xorwf	postinc2,w,c
 25626  013060  A4D8               	btfss	status,2,c
 25627  013062  D021               	goto	l11
 25628                           
 25629                           ; BSR set to: 0
 25630                           ;Button.c: 62: {
 25631                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25632  013064  0100               	movlb	0	; () banked
 25633  013066  EE20 F001          	lfsr	2,1
 25634  01306A  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25635  01306C  26D9               	addwf	fsr2l,f,c
 25636  01306E  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25637  013070  22DA               	addwfc	fsr2h,f,c
 25638  013072  0100               	movlb	0	; () banked
 25639  013074  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25640  013076  5CDE               	subwf	postinc2,w,c
 25641  013078  B0D8               	btfsc	status,0,c
 25642  01307A  D00A               	goto	l12
 25643                           
 25644                           ; BSR set to: 0
 25645                           ;Button.c: 66: pButton->mCount = 0;
 25646  01307C  0100               	movlb	0	; () banked
 25647  01307E  EE20 F001          	lfsr	2,1
 25648  013082  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25649  013084  26D9               	addwf	fsr2l,f,c
 25650  013086  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25651  013088  22DA               	addwfc	fsr2h,f,c
 25652  01308A  0E00               	movlw	0
 25653  01308C  6EDF               	movwf	indf2,c
 25654  01308E  0012               	return	
 25655  013090                     l12:
 25656                           
 25657                           ; BSR set to: 0
 25658                           ;Button.c: 67: else
 25659                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25660                           
 25661                           ; BSR set to: 0
 25662  013090  0100               	movlb	0	; () banked
 25663  013092  EE20 F001          	lfsr	2,1
 25664  013096  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25665  013098  26D9               	addwf	fsr2l,f,c
 25666  01309A  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25667  01309C  22DA               	addwfc	fsr2h,f,c
 25668  01309E  0100               	movlb	0	; () banked
 25669  0130A0  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25670  0130A2  5EDF               	subwf	indf2,f,c
 25671                           
 25672                           ; BSR set to: 0
 25673                           ;Button.c: 69: }
 25674  0130A4  0012               	return	
 25675  0130A6                     l11:
 25676                           
 25677                           ; BSR set to: 0
 25678                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25679                           
 25680                           ; BSR set to: 0
 25681  0130A6  0100               	movlb	0	; () banked
 25682  0130A8  EE20 F001          	lfsr	2,1
 25683  0130AC  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25684  0130AE  26D9               	addwf	fsr2l,f,c
 25685  0130B0  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25686  0130B2  22DA               	addwfc	fsr2h,f,c
 25687  0130B4  50DF               	movf	indf2,w,c
 25688  0130B6  0100               	movlb	0	; () banked
 25689  0130B8  6FD8               	movwf	??_Button_Poll& (0+255),b
 25690  0130BA  6BD9               	clrf	(??_Button_Poll+1)& (0+255),b
 25691  0130BC  0100               	movlb	0	; () banked
 25692  0130BE  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25693  0130C0  0100               	movlb	0	; () banked
 25694  0130C2  27D8               	addwf	??_Button_Poll& (0+255),f,b
 25695  0130C4  0E00               	movlw	0
 25696  0130C6  23D9               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25697  0130C8  0100               	movlb	0	; () banked
 25698  0130CA  EE20 F001          	lfsr	2,1
 25699  0130CE  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25700  0130D0  26D9               	addwf	fsr2l,f,c
 25701  0130D2  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25702  0130D4  22DA               	addwfc	fsr2h,f,c
 25703  0130D6  50DF               	movf	indf2,w,c
 25704  0130D8  0100               	movlb	0	; () banked
 25705  0130DA  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25706  0130DC  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25707  0130DE  0100               	movlb	0	; () banked
 25708  0130E0  51D8               	movf	??_Button_Poll& (0+255),w,b
 25709  0130E2  0100               	movlb	0	; () banked
 25710  0130E4  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25711  0130E6  0100               	movlb	0	; () banked
 25712  0130E8  51DB               	movf	(??_Button_Poll+3)& (0+255),w,b
 25713  0130EA  0A80               	xorlw	128
 25714  0130EC  0100               	movlb	0	; () banked
 25715  0130EE  6FDC               	movwf	(??_Button_Poll+4)& (0+255),b
 25716  0130F0  0100               	movlb	0	; () banked
 25717  0130F2  51D9               	movf	(??_Button_Poll+1)& (0+255),w,b
 25718  0130F4  0A80               	xorlw	128
 25719  0130F6  0100               	movlb	0	; () banked
 25720  0130F8  59DC               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25721  0130FA  B0D8               	btfsc	status,0,c
 25722  0130FC  0012               	return	
 25723                           
 25724                           ; BSR set to: 0
 25725                           ;Button.c: 73: {
 25726                           ;Button.c: 75: pButton->mCount += pIncrement;
 25727  0130FE  0100               	movlb	0	; () banked
 25728  013100  EE20 F001          	lfsr	2,1
 25729  013104  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25730  013106  26D9               	addwf	fsr2l,f,c
 25731  013108  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25732  01310A  22DA               	addwfc	fsr2h,f,c
 25733  01310C  0100               	movlb	0	; () banked
 25734  01310E  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25735  013110  26DF               	addwf	indf2,f,c
 25736                           
 25737                           ; BSR set to: 0
 25738                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25739  013112  0100               	movlb	0	; () banked
 25740  013114  EE20 F002          	lfsr	2,2
 25741  013118  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25742  01311A  26D9               	addwf	fsr2l,f,c
 25743  01311C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25744  01311E  22DA               	addwfc	fsr2h,f,c
 25745  013120  0100               	movlb	0	; () banked
 25746  013122  EE10 F001          	lfsr	1,1
 25747  013126  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25748  013128  26E1               	addwf	fsr1l,f,c
 25749  01312A  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25750  01312C  22E2               	addwfc	fsr1h,f,c
 25751  01312E  50E7               	movf	indf1,w,c
 25752  013130  0100               	movlb	0	; () banked
 25753  013132  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25754  013134  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25755  013136  50DE               	movf	postinc2,w,c
 25756  013138  0100               	movlb	0	; () banked
 25757  01313A  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25758  01313C  50DE               	movf	postinc2,w,c
 25759  01313E  0100               	movlb	0	; () banked
 25760  013140  59DB               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 25761  013142  A0D8               	btfss	status,0,c
 25762  013144  0012               	return	
 25763                           
 25764                           ; BSR set to: 0
 25765                           ;Button.c: 77: {
 25766                           ;Button.c: 79: pButton->mState = Pin;
 25767  013146  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25768  01314A  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25769  01314E  C0DD  FFDF         	movff	Button_Poll@Pin,indf2
 25770                           
 25771                           ; BSR set to: 0
 25772                           ;Button.c: 80: pButton->mCount = 0;
 25773  013152  0100               	movlb	0	; () banked
 25774  013154  EE20 F001          	lfsr	2,1
 25775  013158  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25776  01315A  26D9               	addwf	fsr2l,f,c
 25777  01315C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25778  01315E  22DA               	addwfc	fsr2h,f,c
 25779  013160  0E00               	movlw	0
 25780  013162  6EDF               	movwf	indf2,c
 25781                           
 25782                           ; BSR set to: 0
 25783                           ;Button.c: 83: pButton->mFunction(Pin);
 25784  013164  0100               	movlb	0	; () banked
 25785  013166  EE20 F004          	lfsr	2,4
 25786  01316A  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25787  01316C  26D9               	addwf	fsr2l,f,c
 25788  01316E  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25789  013170  22DA               	addwfc	fsr2h,f,c
 25790  013172  D801               	call	u9748
 25791  013174  0012               	return	
 25792  013176                     u9748:
 25793  013176  0005               	push	
 25794  013178  6EFA               	movwf	pclath,c
 25795  01317A  50DE               	movf	postinc2,w,c
 25796  01317C  6EFD               	movwf	tosl,c
 25797  01317E  50DE               	movf	postinc2,w,c
 25798  013180  6EFE               	movwf	tosh,c
 25799  013182  50DE               	movf	postinc2,w,c
 25800  013184  6EFF               	movwf	tosu,c
 25801  013186  50FA               	movf	pclath,w,c
 25802  013188  0100               	movlb	0	; () banked
 25803  01318A  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25804  01318C  0012               	return		;indir
 25805  01318E                     __end_of_Button_Poll:
 25806                           	opt stack 0
 25807                           tosu	equ	0xFFF
 25808                           tosh	equ	0xFFE
 25809                           tosl	equ	0xFFD
 25810                           pclath	equ	0xFFA
 25811                           tblptru	equ	0xFF8
 25812                           tblptrh	equ	0xFF7
 25813                           tblptrl	equ	0xFF6
 25814                           tablat	equ	0xFF5
 25815                           prodh	equ	0xFF4
 25816                           prodl	equ	0xFF3
 25817                           intcon	equ	0xFF2
 25818                           postinc0	equ	0xFEE
 25819                           wreg	equ	0xFE8
 25820                           indf1	equ	0xFE7
 25821                           postdec1	equ	0xFE5
 25822                           fsr1h	equ	0xFE2
 25823                           fsr1l	equ	0xFE1
 25824                           indf2	equ	0xFDF
 25825                           postinc2	equ	0xFDE
 25826                           postdec2	equ	0xFDD
 25827                           plusw2	equ	0xFDB
 25828                           fsr2h	equ	0xFDA
 25829                           fsr2l	equ	0xFD9
 25830                           status	equ	0xFD8
 25831                           
 25832 ;; *************** function _MXK_DIPSwitch *****************
 25833 ;; Defined at:
 25834 ;;		line 24 in file "Library/MXK.c"
 25835 ;; Parameters:    Size  Location     Type
 25836 ;;		None
 25837 ;; Auto vars:     Size  Location     Type
 25838 ;;		None
 25839 ;; Return value:  Size  Location     Type
 25840 ;;                  1    wreg      unsigned char 
 25841 ;; Registers used:
 25842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25843 ;; Tracked objects:
 25844 ;;		On entry : 0/0
 25845 ;;		On exit  : 0/0
 25846 ;;		Unchanged: 0/0
 25847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25852 ;;Total ram usage:        0 bytes
 25853 ;; Hardware stack levels used:    1
 25854 ;; Hardware stack levels required when called:    8
 25855 ;; This function calls:
 25856 ;;		_Port_GetQuad
 25857 ;; This function is called by:
 25858 ;;		_FunctInitButton
 25859 ;;		_Button_Poll
 25860 ;;		_getMode
 25861 ;; This function uses a non-reentrant model
 25862 ;;
 25863                           
 25864                           	psect	text129
 25865  0165CC                     __ptext129:
 25866                           	opt stack 0
 25867  0165CC                     _MXK_DIPSwitch:
 25868                           	opt stack 18
 25869                           
 25870                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 25871                           
 25872                           ;incstack = 0
 25873  0165CC  0E9B               	movlw	low _PortD
 25874  0165CE  0100               	movlb	0	; () banked
 25875  0165D0  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25876  0165D2  0E00               	movlw	high _PortD
 25877  0165D4  0100               	movlb	0	; () banked
 25878  0165D6  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25879  0165D8  0E00               	movlw	0
 25880  0165DA  0100               	movlb	0	; () banked
 25881  0165DC  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25882  0165DE  EC67  F0AE         	call	_Port_GetQuad
 25883  0165E2  0012               	return	
 25884  0165E4                     __end_of_MXK_DIPSwitch:
 25885                           	opt stack 0
 25886                           tosu	equ	0xFFF
 25887                           tosh	equ	0xFFE
 25888                           tosl	equ	0xFFD
 25889                           pclath	equ	0xFFA
 25890                           tblptru	equ	0xFF8
 25891                           tblptrh	equ	0xFF7
 25892                           tblptrl	equ	0xFF6
 25893                           tablat	equ	0xFF5
 25894                           prodh	equ	0xFF4
 25895                           prodl	equ	0xFF3
 25896                           intcon	equ	0xFF2
 25897                           postinc0	equ	0xFEE
 25898                           wreg	equ	0xFE8
 25899                           indf1	equ	0xFE7
 25900                           postdec1	equ	0xFE5
 25901                           fsr1h	equ	0xFE2
 25902                           fsr1l	equ	0xFE1
 25903                           indf2	equ	0xFDF
 25904                           postinc2	equ	0xFDE
 25905                           postdec2	equ	0xFDD
 25906                           plusw2	equ	0xFDB
 25907                           fsr2h	equ	0xFDA
 25908                           fsr2l	equ	0xFD9
 25909                           status	equ	0xFD8
 25910                           
 25911 ;; *************** function _HMI_DIPSwitch *****************
 25912 ;; Defined at:
 25913 ;;		line 47 in file "HMI.c"
 25914 ;; Parameters:    Size  Location     Type
 25915 ;;		None
 25916 ;; Auto vars:     Size  Location     Type
 25917 ;;		None
 25918 ;; Return value:  Size  Location     Type
 25919 ;;                  1    wreg      unsigned char 
 25920 ;; Registers used:
 25921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25922 ;; Tracked objects:
 25923 ;;		On entry : 0/0
 25924 ;;		On exit  : 0/0
 25925 ;;		Unchanged: 0/0
 25926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25931 ;;Total ram usage:        0 bytes
 25932 ;; Hardware stack levels used:    1
 25933 ;; Hardware stack levels required when called:    8
 25934 ;; This function calls:
 25935 ;;		_Port_GetQuad
 25936 ;; This function is called by:
 25937 ;;		_HMI_Init
 25938 ;;		_Button_Poll
 25939 ;;		_getMode
 25940 ;; This function uses a non-reentrant model
 25941 ;;
 25942                           
 25943                           	psect	text130
 25944  0165E4                     __ptext130:
 25945                           	opt stack 0
 25946  0165E4                     _HMI_DIPSwitch:
 25947                           	opt stack 18
 25948                           
 25949                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 25950                           
 25951                           ;incstack = 0
 25952  0165E4  0E91               	movlw	low _PortE
 25953  0165E6  0100               	movlb	0	; () banked
 25954  0165E8  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25955  0165EA  0E00               	movlw	high _PortE
 25956  0165EC  0100               	movlb	0	; () banked
 25957  0165EE  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25958  0165F0  0E00               	movlw	0
 25959  0165F2  0100               	movlb	0	; () banked
 25960  0165F4  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25961  0165F6  EC67  F0AE         	call	_Port_GetQuad	;wreg free
 25962  0165FA  0012               	return	
 25963  0165FC                     __end_of_HMI_DIPSwitch:
 25964                           	opt stack 0
 25965                           tosu	equ	0xFFF
 25966                           tosh	equ	0xFFE
 25967                           tosl	equ	0xFFD
 25968                           pclath	equ	0xFFA
 25969                           tblptru	equ	0xFF8
 25970                           tblptrh	equ	0xFF7
 25971                           tblptrl	equ	0xFF6
 25972                           tablat	equ	0xFF5
 25973                           prodh	equ	0xFF4
 25974                           prodl	equ	0xFF3
 25975                           intcon	equ	0xFF2
 25976                           postinc0	equ	0xFEE
 25977                           wreg	equ	0xFE8
 25978                           indf1	equ	0xFE7
 25979                           postdec1	equ	0xFE5
 25980                           fsr1h	equ	0xFE2
 25981                           fsr1l	equ	0xFE1
 25982                           indf2	equ	0xFDF
 25983                           postinc2	equ	0xFDE
 25984                           postdec2	equ	0xFDD
 25985                           plusw2	equ	0xFDB
 25986                           fsr2h	equ	0xFDA
 25987                           fsr2l	equ	0xFD9
 25988                           status	equ	0xFD8
 25989                           
 25990 ;; *************** function _HMI_DownSwitch *****************
 25991 ;; Defined at:
 25992 ;;		line 42 in file "HMI.c"
 25993 ;; Parameters:    Size  Location     Type
 25994 ;;		None
 25995 ;; Auto vars:     Size  Location     Type
 25996 ;;		None
 25997 ;; Return value:  Size  Location     Type
 25998 ;;                  1    wreg      unsigned char 
 25999 ;; Registers used:
 26000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26001 ;; Tracked objects:
 26002 ;;		On entry : 0/0
 26003 ;;		On exit  : 0/0
 26004 ;;		Unchanged: 0/0
 26005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26010 ;;Total ram usage:        0 bytes
 26011 ;; Hardware stack levels used:    1
 26012 ;; Hardware stack levels required when called:    8
 26013 ;; This function calls:
 26014 ;;		_Port_GetPin
 26015 ;; This function is called by:
 26016 ;;		_HMI_Init
 26017 ;;		_Button_Poll
 26018 ;;		_getMode
 26019 ;; This function uses a non-reentrant model
 26020 ;;
 26021                           
 26022                           	psect	text131
 26023  0165FC                     __ptext131:
 26024                           	opt stack 0
 26025  0165FC                     _HMI_DownSwitch:
 26026                           	opt stack 18
 26027                           
 26028                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 26029                           
 26030                           ;incstack = 0
 26031  0165FC  0E91               	movlw	low _PortE
 26032  0165FE  0100               	movlb	0	; () banked
 26033  016600  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26034  016602  0E00               	movlw	high _PortE
 26035  016604  0100               	movlb	0	; () banked
 26036  016606  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26037  016608  0E06               	movlw	6
 26038  01660A  0100               	movlb	0	; () banked
 26039  01660C  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26040  01660E  EC3E  F0AF         	call	_Port_GetPin	;wreg free
 26041  016612  0012               	return	
 26042  016614                     __end_of_HMI_DownSwitch:
 26043                           	opt stack 0
 26044                           tosu	equ	0xFFF
 26045                           tosh	equ	0xFFE
 26046                           tosl	equ	0xFFD
 26047                           pclath	equ	0xFFA
 26048                           tblptru	equ	0xFF8
 26049                           tblptrh	equ	0xFF7
 26050                           tblptrl	equ	0xFF6
 26051                           tablat	equ	0xFF5
 26052                           prodh	equ	0xFF4
 26053                           prodl	equ	0xFF3
 26054                           intcon	equ	0xFF2
 26055                           postinc0	equ	0xFEE
 26056                           wreg	equ	0xFE8
 26057                           indf1	equ	0xFE7
 26058                           postdec1	equ	0xFE5
 26059                           fsr1h	equ	0xFE2
 26060                           fsr1l	equ	0xFE1
 26061                           indf2	equ	0xFDF
 26062                           postinc2	equ	0xFDE
 26063                           postdec2	equ	0xFDD
 26064                           plusw2	equ	0xFDB
 26065                           fsr2h	equ	0xFDA
 26066                           fsr2l	equ	0xFD9
 26067                           status	equ	0xFD8
 26068                           
 26069 ;; *************** function _HMI_UpSwitch *****************
 26070 ;; Defined at:
 26071 ;;		line 37 in file "HMI.c"
 26072 ;; Parameters:    Size  Location     Type
 26073 ;;		None
 26074 ;; Auto vars:     Size  Location     Type
 26075 ;;		None
 26076 ;; Return value:  Size  Location     Type
 26077 ;;                  1    wreg      unsigned char 
 26078 ;; Registers used:
 26079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26080 ;; Tracked objects:
 26081 ;;		On entry : 0/0
 26082 ;;		On exit  : 0/0
 26083 ;;		Unchanged: 0/0
 26084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26089 ;;Total ram usage:        0 bytes
 26090 ;; Hardware stack levels used:    1
 26091 ;; Hardware stack levels required when called:    8
 26092 ;; This function calls:
 26093 ;;		_Port_GetPin
 26094 ;; This function is called by:
 26095 ;;		_HMI_Init
 26096 ;;		_Button_Poll
 26097 ;;		_getMode
 26098 ;; This function uses a non-reentrant model
 26099 ;;
 26100                           
 26101                           	psect	text132
 26102  016614                     __ptext132:
 26103                           	opt stack 0
 26104  016614                     _HMI_UpSwitch:
 26105                           	opt stack 18
 26106                           
 26107                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 26108                           
 26109                           ;incstack = 0
 26110  016614  0E91               	movlw	low _PortE
 26111  016616  0100               	movlb	0	; () banked
 26112  016618  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26113  01661A  0E00               	movlw	high _PortE
 26114  01661C  0100               	movlb	0	; () banked
 26115  01661E  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26116  016620  0E07               	movlw	7
 26117  016622  0100               	movlb	0	; () banked
 26118  016624  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26119  016626  EC3E  F0AF         	call	_Port_GetPin	;wreg free
 26120  01662A  0012               	return	
 26121  01662C                     __end_of_HMI_UpSwitch:
 26122                           	opt stack 0
 26123                           tosu	equ	0xFFF
 26124                           tosh	equ	0xFFE
 26125                           tosl	equ	0xFFD
 26126                           pclath	equ	0xFFA
 26127                           tblptru	equ	0xFF8
 26128                           tblptrh	equ	0xFF7
 26129                           tblptrl	equ	0xFF6
 26130                           tablat	equ	0xFF5
 26131                           prodh	equ	0xFF4
 26132                           prodl	equ	0xFF3
 26133                           intcon	equ	0xFF2
 26134                           postinc0	equ	0xFEE
 26135                           wreg	equ	0xFE8
 26136                           indf1	equ	0xFE7
 26137                           postdec1	equ	0xFE5
 26138                           fsr1h	equ	0xFE2
 26139                           fsr1l	equ	0xFE1
 26140                           indf2	equ	0xFDF
 26141                           postinc2	equ	0xFDE
 26142                           postdec2	equ	0xFDD
 26143                           plusw2	equ	0xFDB
 26144                           fsr2h	equ	0xFDA
 26145                           fsr2l	equ	0xFD9
 26146                           status	equ	0xFD8
 26147                           
 26148 ;; *************** function _HMI_RightSwitch *****************
 26149 ;; Defined at:
 26150 ;;		line 32 in file "HMI.c"
 26151 ;; Parameters:    Size  Location     Type
 26152 ;;		None
 26153 ;; Auto vars:     Size  Location     Type
 26154 ;;		None
 26155 ;; Return value:  Size  Location     Type
 26156 ;;                  1    wreg      unsigned char 
 26157 ;; Registers used:
 26158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26159 ;; Tracked objects:
 26160 ;;		On entry : 0/0
 26161 ;;		On exit  : 0/0
 26162 ;;		Unchanged: 0/0
 26163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26168 ;;Total ram usage:        0 bytes
 26169 ;; Hardware stack levels used:    1
 26170 ;; Hardware stack levels required when called:    8
 26171 ;; This function calls:
 26172 ;;		_Port_GetPin
 26173 ;; This function is called by:
 26174 ;;		_HMI_Init
 26175 ;;		_Button_Poll
 26176 ;;		_getMode
 26177 ;; This function uses a non-reentrant model
 26178 ;;
 26179                           
 26180                           	psect	text133
 26181  01662C                     __ptext133:
 26182                           	opt stack 0
 26183  01662C                     _HMI_RightSwitch:
 26184                           	opt stack 18
 26185                           
 26186                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 26187                           
 26188                           ;incstack = 0
 26189  01662C  0E91               	movlw	low _PortE
 26190  01662E  0100               	movlb	0	; () banked
 26191  016630  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26192  016632  0E00               	movlw	high _PortE
 26193  016634  0100               	movlb	0	; () banked
 26194  016636  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26195  016638  0E04               	movlw	4
 26196  01663A  0100               	movlb	0	; () banked
 26197  01663C  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26198  01663E  EC3E  F0AF         	call	_Port_GetPin	;wreg free
 26199  016642  0012               	return	
 26200  016644                     __end_of_HMI_RightSwitch:
 26201                           	opt stack 0
 26202                           tosu	equ	0xFFF
 26203                           tosh	equ	0xFFE
 26204                           tosl	equ	0xFFD
 26205                           pclath	equ	0xFFA
 26206                           tblptru	equ	0xFF8
 26207                           tblptrh	equ	0xFF7
 26208                           tblptrl	equ	0xFF6
 26209                           tablat	equ	0xFF5
 26210                           prodh	equ	0xFF4
 26211                           prodl	equ	0xFF3
 26212                           intcon	equ	0xFF2
 26213                           postinc0	equ	0xFEE
 26214                           wreg	equ	0xFE8
 26215                           indf1	equ	0xFE7
 26216                           postdec1	equ	0xFE5
 26217                           fsr1h	equ	0xFE2
 26218                           fsr1l	equ	0xFE1
 26219                           indf2	equ	0xFDF
 26220                           postinc2	equ	0xFDE
 26221                           postdec2	equ	0xFDD
 26222                           plusw2	equ	0xFDB
 26223                           fsr2h	equ	0xFDA
 26224                           fsr2l	equ	0xFD9
 26225                           status	equ	0xFD8
 26226                           
 26227 ;; *************** function _HMI_LeftSwitch *****************
 26228 ;; Defined at:
 26229 ;;		line 27 in file "HMI.c"
 26230 ;; Parameters:    Size  Location     Type
 26231 ;;		None
 26232 ;; Auto vars:     Size  Location     Type
 26233 ;;		None
 26234 ;; Return value:  Size  Location     Type
 26235 ;;                  1    wreg      unsigned char 
 26236 ;; Registers used:
 26237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26238 ;; Tracked objects:
 26239 ;;		On entry : 0/0
 26240 ;;		On exit  : 0/0
 26241 ;;		Unchanged: 0/0
 26242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26247 ;;Total ram usage:        0 bytes
 26248 ;; Hardware stack levels used:    1
 26249 ;; Hardware stack levels required when called:    8
 26250 ;; This function calls:
 26251 ;;		_Port_GetPin
 26252 ;; This function is called by:
 26253 ;;		_HMI_Init
 26254 ;;		_Button_Poll
 26255 ;;		_getMode
 26256 ;; This function uses a non-reentrant model
 26257 ;;
 26258                           
 26259                           	psect	text134
 26260  016644                     __ptext134:
 26261                           	opt stack 0
 26262  016644                     _HMI_LeftSwitch:
 26263                           	opt stack 18
 26264                           
 26265                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 26266                           
 26267                           ;incstack = 0
 26268  016644  0E91               	movlw	low _PortE
 26269  016646  0100               	movlb	0	; () banked
 26270  016648  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26271  01664A  0E00               	movlw	high _PortE
 26272  01664C  0100               	movlb	0	; () banked
 26273  01664E  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26274  016650  0E05               	movlw	5
 26275  016652  0100               	movlb	0	; () banked
 26276  016654  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26277  016656  EC3E  F0AF         	call	_Port_GetPin	;wreg free
 26278  01665A  0012               	return	
 26279  01665C                     __end_of_HMI_LeftSwitch:
 26280                           	opt stack 0
 26281                           tosu	equ	0xFFF
 26282                           tosh	equ	0xFFE
 26283                           tosl	equ	0xFFD
 26284                           pclath	equ	0xFFA
 26285                           tblptru	equ	0xFF8
 26286                           tblptrh	equ	0xFF7
 26287                           tblptrl	equ	0xFF6
 26288                           tablat	equ	0xFF5
 26289                           prodh	equ	0xFF4
 26290                           prodl	equ	0xFF3
 26291                           intcon	equ	0xFF2
 26292                           postinc0	equ	0xFEE
 26293                           wreg	equ	0xFE8
 26294                           indf1	equ	0xFE7
 26295                           postdec1	equ	0xFE5
 26296                           fsr1h	equ	0xFE2
 26297                           fsr1l	equ	0xFE1
 26298                           indf2	equ	0xFDF
 26299                           postinc2	equ	0xFDE
 26300                           postdec2	equ	0xFDD
 26301                           plusw2	equ	0xFDB
 26302                           fsr2h	equ	0xFDA
 26303                           fsr2l	equ	0xFD9
 26304                           status	equ	0xFD8
 26305                           
 26306 ;; *************** function _MXK_TestButton *****************
 26307 ;; Defined at:
 26308 ;;		line 14 in file "Library/MXK.c"
 26309 ;; Parameters:    Size  Location     Type
 26310 ;;		None
 26311 ;; Auto vars:     Size  Location     Type
 26312 ;;		None
 26313 ;; Return value:  Size  Location     Type
 26314 ;;                  1    wreg      unsigned char 
 26315 ;; Registers used:
 26316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26317 ;; Tracked objects:
 26318 ;;		On entry : 0/0
 26319 ;;		On exit  : 0/0
 26320 ;;		Unchanged: 0/0
 26321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26326 ;;Total ram usage:        0 bytes
 26327 ;; Hardware stack levels used:    1
 26328 ;; Hardware stack levels required when called:    8
 26329 ;; This function calls:
 26330 ;;		_Port_GetPin
 26331 ;; This function is called by:
 26332 ;;		_FunctInitButton
 26333 ;;		_Button_Poll
 26334 ;;		_getMode
 26335 ;; This function uses a non-reentrant model
 26336 ;;
 26337                           
 26338                           	psect	text135
 26339  01665C                     __ptext135:
 26340                           	opt stack 0
 26341  01665C                     _MXK_TestButton:
 26342                           	opt stack 18
 26343                           
 26344                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 26345                           
 26346                           ;incstack = 0
 26347  01665C  0EAE               	movlw	low _PortB
 26348  01665E  0100               	movlb	0	; () banked
 26349  016660  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26350  016662  0E03               	movlw	high _PortB
 26351  016664  0100               	movlb	0	; () banked
 26352  016666  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26353  016668  0E04               	movlw	4
 26354  01666A  0100               	movlb	0	; () banked
 26355  01666C  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26356  01666E  EC3E  F0AF         	call	_Port_GetPin	;wreg free
 26357  016672  0012               	return	
 26358  016674                     __end_of_MXK_TestButton:
 26359                           	opt stack 0
 26360                           tosu	equ	0xFFF
 26361                           tosh	equ	0xFFE
 26362                           tosl	equ	0xFFD
 26363                           pclath	equ	0xFFA
 26364                           tblptru	equ	0xFF8
 26365                           tblptrh	equ	0xFF7
 26366                           tblptrl	equ	0xFF6
 26367                           tablat	equ	0xFF5
 26368                           prodh	equ	0xFF4
 26369                           prodl	equ	0xFF3
 26370                           intcon	equ	0xFF2
 26371                           postinc0	equ	0xFEE
 26372                           wreg	equ	0xFE8
 26373                           indf1	equ	0xFE7
 26374                           postdec1	equ	0xFE5
 26375                           fsr1h	equ	0xFE2
 26376                           fsr1l	equ	0xFE1
 26377                           indf2	equ	0xFDF
 26378                           postinc2	equ	0xFDE
 26379                           postdec2	equ	0xFDD
 26380                           plusw2	equ	0xFDB
 26381                           fsr2h	equ	0xFDA
 26382                           fsr2l	equ	0xFD9
 26383                           status	equ	0xFD8
 26384                           
 26385 ;; *************** function _Port_GetQuad *****************
 26386 ;; Defined at:
 26387 ;;		line 498 in file "Library/Port.c"
 26388 ;; Parameters:    Size  Location     Type
 26389 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 26390 ;;		 -> PortE(10), PortD(10), 
 26391 ;;  pQuad           1    2[BANK0 ] enum E6776
 26392 ;; Auto vars:     Size  Location     Type
 26393 ;;  Output          1    5[BANK0 ] unsigned char 
 26394 ;; Return value:  Size  Location     Type
 26395 ;;                  1    wreg      unsigned char 
 26396 ;; Registers used:
 26397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26398 ;; Tracked objects:
 26399 ;;		On entry : 0/0
 26400 ;;		On exit  : 0/0
 26401 ;;		Unchanged: 0/0
 26402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26403 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26406 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26407 ;;Total ram usage:        6 bytes
 26408 ;; Hardware stack levels used:    1
 26409 ;; Hardware stack levels required when called:    7
 26410 ;; This function calls:
 26411 ;;		Nothing
 26412 ;; This function is called by:
 26413 ;;		_HMI_DIPSwitch
 26414 ;;		_MXK_DIPSwitch
 26415 ;;		_Port_ToggleQuad
 26416 ;; This function uses a non-reentrant model
 26417 ;;
 26418                           
 26419                           	psect	text136
 26420  015CCE                     __ptext136:
 26421                           	opt stack 0
 26422  015CCE                     _Port_GetQuad:
 26423                           	opt stack 18
 26424                           
 26425                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 26426                           
 26427                           ;incstack = 0
 26428  015CCE  0100               	movlb	0	; () banked
 26429  015CD0  EE20 F006          	lfsr	2,6
 26430  015CD4  51BA               	movf	Port_GetQuad@pInput& (0+255),w,b
 26431  015CD6  26D9               	addwf	fsr2l,f,c
 26432  015CD8  51BB               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 26433  015CDA  22DA               	addwfc	fsr2h,f,c
 26434  015CDC  CFDE F0BD          	movff	postinc2,??_Port_GetQuad
 26435  015CE0  CFDD F0BE          	movff	postdec2,??_Port_GetQuad+1
 26436  015CE4  C0BD  FFD9         	movff	??_Port_GetQuad,fsr2l
 26437  015CE8  C0BE  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 26438  015CEC  50DF               	movf	indf2,w,c
 26439  015CEE  0100               	movlb	0	; () banked
 26440  015CF0  6FBF               	movwf	Port_GetQuad@Output& (0+255),b
 26441                           
 26442                           ; BSR set to: 0
 26443                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 26444  015CF2  0100               	movlb	0	; () banked
 26445  015CF4  51BC               	movf	Port_GetQuad@pQuad& (0+255),w,b
 26446  015CF6  0D04               	mullw	4
 26447  015CF8  28F3               	incf	prodl,w,c
 26448  015CFA  0100               	movlb	0	; () banked
 26449  015CFC  6FBD               	movwf	??_Port_GetQuad& (0+255),b
 26450  015CFE  D003               	goto	u9240
 26451  015D00                     u9245:
 26452  015D00  0100               	movlb	0	; () banked
 26453  015D02  90D8               	bcf	status,0,c
 26454  015D04  33BF               	rrcf	Port_GetQuad@Output& (0+255),f,b
 26455  015D06                     u9240:
 26456  015D06  0100               	movlb	0	; () banked
 26457  015D08  2FBD               	decfsz	??_Port_GetQuad& (0+255),f,b
 26458  015D0A  D7FA               	goto	u9245
 26459                           
 26460                           ;Port.c: 502: Output &= 0xF;
 26461  015D0C  0E0F               	movlw	15
 26462  015D0E  0100               	movlb	0	; () banked
 26463  015D10  17BF               	andwf	Port_GetQuad@Output& (0+255),f,b
 26464                           
 26465                           ; BSR set to: 0
 26466                           ;Port.c: 503: return Output;
 26467  015D12  0100               	movlb	0	; () banked
 26468  015D14  51BF               	movf	Port_GetQuad@Output& (0+255),w,b
 26469  015D16  0012               	return	
 26470  015D18                     __end_of_Port_GetQuad:
 26471                           	opt stack 0
 26472                           tosu	equ	0xFFF
 26473                           tosh	equ	0xFFE
 26474                           tosl	equ	0xFFD
 26475                           pclath	equ	0xFFA
 26476                           tblptru	equ	0xFF8
 26477                           tblptrh	equ	0xFF7
 26478                           tblptrl	equ	0xFF6
 26479                           tablat	equ	0xFF5
 26480                           prodh	equ	0xFF4
 26481                           prodl	equ	0xFF3
 26482                           intcon	equ	0xFF2
 26483                           postinc0	equ	0xFEE
 26484                           wreg	equ	0xFE8
 26485                           indf1	equ	0xFE7
 26486                           postdec1	equ	0xFE5
 26487                           fsr1h	equ	0xFE2
 26488                           fsr1l	equ	0xFE1
 26489                           indf2	equ	0xFDF
 26490                           postinc2	equ	0xFDE
 26491                           postdec2	equ	0xFDD
 26492                           plusw2	equ	0xFDB
 26493                           fsr2h	equ	0xFDA
 26494                           fsr2l	equ	0xFD9
 26495                           status	equ	0xFD8
 26496                           
 26497 ;; *************** function _Event_DIPSwitch *****************
 26498 ;; Defined at:
 26499 ;;		line 22 in file "Events.c"
 26500 ;; Parameters:    Size  Location     Type
 26501 ;;  pState          1    wreg     unsigned char 
 26502 ;; Auto vars:     Size  Location     Type
 26503 ;;  pState          1   25[BANK0 ] unsigned char 
 26504 ;;  Bar             1   26[BANK0 ] unsigned char 
 26505 ;; Return value:  Size  Location     Type
 26506 ;;                  1    wreg      void 
 26507 ;; Registers used:
 26508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26509 ;; Tracked objects:
 26510 ;;		On entry : 0/0
 26511 ;;		On exit  : 0/0
 26512 ;;		Unchanged: 0/0
 26513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26518 ;;Total ram usage:        2 bytes
 26519 ;; Hardware stack levels used:    1
 26520 ;; Hardware stack levels required when called:   13
 26521 ;; This function calls:
 26522 ;;		_HMI_GetBar
 26523 ;;		_HMI_SetBar
 26524 ;;		_LED_Toggle
 26525 ;; This function is called by:
 26526 ;;		_FunctInitButton
 26527 ;;		_Button_Poll
 26528 ;; This function uses a non-reentrant model
 26529 ;;
 26530                           
 26531                           	psect	text137
 26532  0162D2                     __ptext137:
 26533                           	opt stack 0
 26534  0162D2                     _Event_DIPSwitch:
 26535                           	opt stack 13
 26536                           
 26537                           ; BSR set to: 0
 26538                           ;incstack = 0
 26539                           ;Event_DIPSwitch@pState stored from wreg
 26540  0162D2  0100               	movlb	0	; () banked
 26541  0162D4  6FD3               	movwf	Event_DIPSwitch@pState& (0+255),b
 26542                           
 26543                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 26544  0162D6  ECDE  F0B3         	call	_HMI_GetBar	;wreg free
 26545  0162DA  0100               	movlb	0	; () banked
 26546  0162DC  6FD4               	movwf	Event_DIPSwitch@Bar& (0+255),b
 26547                           
 26548                           ; BSR set to: 0
 26549                           ;Events.c: 25: Bar &= 0x0F;
 26550  0162DE  0E0F               	movlw	15
 26551  0162E0  0100               	movlb	0	; () banked
 26552  0162E2  17D4               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 26553                           
 26554                           ; BSR set to: 0
 26555                           ;Events.c: 26: pState <<= 4;
 26556  0162E4  0100               	movlb	0	; () banked
 26557  0162E6  3BD3               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 26558  0162E8  0EF0               	movlw	240
 26559  0162EA  17D3               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 26560                           
 26561                           ; BSR set to: 0
 26562                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26563  0162EC  0100               	movlb	0	; () banked
 26564  0162EE  51D3               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26565  0162F0  0100               	movlb	0	; () banked
 26566  0162F2  11D4               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26567  0162F4  ECC0  F0B3         	call	_HMI_SetBar
 26568                           
 26569                           ;Events.c: 32: LED_Toggle(eLED1);
 26570  0162F8  0E00               	movlw	0
 26571  0162FA  ECD4  F0AE         	call	_LED_Toggle
 26572  0162FE  0012               	return		;funcret
 26573  016300                     __end_of_Event_DIPSwitch:
 26574                           	opt stack 0
 26575                           tosu	equ	0xFFF
 26576                           tosh	equ	0xFFE
 26577                           tosl	equ	0xFFD
 26578                           pclath	equ	0xFFA
 26579                           tblptru	equ	0xFF8
 26580                           tblptrh	equ	0xFF7
 26581                           tblptrl	equ	0xFF6
 26582                           tablat	equ	0xFF5
 26583                           prodh	equ	0xFF4
 26584                           prodl	equ	0xFF3
 26585                           intcon	equ	0xFF2
 26586                           postinc0	equ	0xFEE
 26587                           wreg	equ	0xFE8
 26588                           indf1	equ	0xFE7
 26589                           postdec1	equ	0xFE5
 26590                           fsr1h	equ	0xFE2
 26591                           fsr1l	equ	0xFE1
 26592                           indf2	equ	0xFDF
 26593                           postinc2	equ	0xFDE
 26594                           postdec2	equ	0xFDD
 26595                           plusw2	equ	0xFDB
 26596                           fsr2h	equ	0xFDA
 26597                           fsr2l	equ	0xFD9
 26598                           status	equ	0xFD8
 26599                           
 26600 ;; *************** function _Event_NULL *****************
 26601 ;; Defined at:
 26602 ;;		line 9 in file "Events.c"
 26603 ;; Parameters:    Size  Location     Type
 26604 ;;  pState          1    wreg     unsigned char 
 26605 ;; Auto vars:     Size  Location     Type
 26606 ;;  pState          1    0[COMRAM] unsigned char 
 26607 ;; Return value:  Size  Location     Type
 26608 ;;                  1    wreg      void 
 26609 ;; Registers used:
 26610 ;;		wreg
 26611 ;; Tracked objects:
 26612 ;;		On entry : 0/0
 26613 ;;		On exit  : 0/0
 26614 ;;		Unchanged: 0/0
 26615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26620 ;;Total ram usage:        0 bytes
 26621 ;; Hardware stack levels used:    1
 26622 ;; Hardware stack levels required when called:    7
 26623 ;; This function calls:
 26624 ;;		Nothing
 26625 ;; This function is called by:
 26626 ;;		_HMI_Init
 26627 ;;		_Button_Poll
 26628 ;; This function uses a non-reentrant model
 26629 ;;
 26630                           
 26631                           	psect	text138
 26632  001404                     __ptext138:
 26633                           	opt stack 0
 26634  001404                     _Event_NULL:
 26635                           	opt stack 19
 26636                           
 26637                           ;incstack = 0
 26638  001404  0012               	return		;funcret
 26639  001406                     __end_of_Event_NULL:
 26640                           	opt stack 0
 26641                           tosu	equ	0xFFF
 26642                           tosh	equ	0xFFE
 26643                           tosl	equ	0xFFD
 26644                           pclath	equ	0xFFA
 26645                           tblptru	equ	0xFF8
 26646                           tblptrh	equ	0xFF7
 26647                           tblptrl	equ	0xFF6
 26648                           tablat	equ	0xFF5
 26649                           prodh	equ	0xFF4
 26650                           prodl	equ	0xFF3
 26651                           intcon	equ	0xFF2
 26652                           postinc0	equ	0xFEE
 26653                           wreg	equ	0xFE8
 26654                           indf1	equ	0xFE7
 26655                           postdec1	equ	0xFE5
 26656                           fsr1h	equ	0xFE2
 26657                           fsr1l	equ	0xFE1
 26658                           indf2	equ	0xFDF
 26659                           postinc2	equ	0xFDE
 26660                           postdec2	equ	0xFDD
 26661                           plusw2	equ	0xFDB
 26662                           fsr2h	equ	0xFDA
 26663                           fsr2l	equ	0xFD9
 26664                           status	equ	0xFD8
 26665                           
 26666 ;; *************** function _Event_TestButton *****************
 26667 ;; Defined at:
 26668 ;;		line 52 in file "Events.c"
 26669 ;; Parameters:    Size  Location     Type
 26670 ;;  pState          1    wreg     unsigned char 
 26671 ;; Auto vars:     Size  Location     Type
 26672 ;;  pState          1   25[BANK0 ] unsigned char 
 26673 ;; Return value:  Size  Location     Type
 26674 ;;                  1    wreg      void 
 26675 ;; Registers used:
 26676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26677 ;; Tracked objects:
 26678 ;;		On entry : 0/0
 26679 ;;		On exit  : 0/0
 26680 ;;		Unchanged: 0/0
 26681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26686 ;;Total ram usage:        1 bytes
 26687 ;; Hardware stack levels used:    1
 26688 ;; Hardware stack levels required when called:   13
 26689 ;; This function calls:
 26690 ;;		_HMI_SetButton
 26691 ;;		_HMI_SetNumber
 26692 ;;		_LED_Toggle
 26693 ;; This function is called by:
 26694 ;;		_FunctInitButton
 26695 ;;		_Button_Poll
 26696 ;; This function uses a non-reentrant model
 26697 ;;
 26698                           
 26699                           	psect	text139
 26700  0160C0                     __ptext139:
 26701                           	opt stack 0
 26702  0160C0                     _Event_TestButton:
 26703                           	opt stack 13
 26704                           
 26705                           ;incstack = 0
 26706                           ;Event_TestButton@pState stored from wreg
 26707  0160C0  0100               	movlb	0	; () banked
 26708  0160C2  6FD3               	movwf	Event_TestButton@pState& (0+255),b
 26709                           
 26710                           ;Events.c: 56: static UINT8 j = 0;
 26711                           ;Events.c: 60: if (pState == 0)
 26712  0160C4  0100               	movlb	0	; () banked
 26713  0160C6  51D3               	movf	Event_TestButton@pState& (0+255),w,b
 26714  0160C8  0100               	movlb	0	; () banked
 26715  0160CA  A4D8               	btfss	status,2,c
 26716  0160CC  D013               	goto	l1873
 26717                           
 26718                           ; BSR set to: 0
 26719                           ;Events.c: 61: {
 26720                           ;Events.c: 62: j++;
 26721  0160CE  0100               	movlb	0	; () banked
 26722  0160D0  2B89               	incf	Event_TestButton@j& (0+255),f,b
 26723                           
 26724                           ; BSR set to: 0
 26725                           ;Events.c: 63: val += j;
 26726  0160D2  0100               	movlb	0	; () banked
 26727  0160D4  5189               	movf	Event_TestButton@j& (0+255),w,b
 26728  0160D6  0100               	movlb	0	; () banked
 26729  0160D8  277D               	addwf	_val& (0+255),f,b
 26730  0160DA  0E00               	movlw	0
 26731  0160DC  237E               	addwfc	(_val+1)& (0+255),f,b
 26732                           
 26733                           ; BSR set to: 0
 26734                           ;Events.c: 64: HMI_SetNumber( val );
 26735  0160DE  C07D  F0D0         	movff	_val,HMI_SetNumber@pInput
 26736  0160E2  C07E  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 26737  0160E6  ECAC  F0B1         	call	_HMI_SetNumber	;wreg free
 26738                           
 26739                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26740  0160EA  0100               	movlb	0	; () banked
 26741  0160EC  5189               	movf	Event_TestButton@j& (0+255),w,b
 26742  0160EE  0B03               	andlw	3
 26743  0160F0  ECB6  F0A6         	call	_HMI_SetButton
 26744  0160F4                     l1873:
 26745                           
 26746                           ;Events.c: 68: }
 26747                           ;Events.c: 72: LED_Toggle(eLED1);
 26748  0160F4  0E00               	movlw	0
 26749  0160F6  ECD4  F0AE         	call	_LED_Toggle
 26750  0160FA  0012               	return		;funcret
 26751  0160FC                     __end_of_Event_TestButton:
 26752                           	opt stack 0
 26753                           tosu	equ	0xFFF
 26754                           tosh	equ	0xFFE
 26755                           tosl	equ	0xFFD
 26756                           pclath	equ	0xFFA
 26757                           tblptru	equ	0xFF8
 26758                           tblptrh	equ	0xFF7
 26759                           tblptrl	equ	0xFF6
 26760                           tablat	equ	0xFF5
 26761                           prodh	equ	0xFF4
 26762                           prodl	equ	0xFF3
 26763                           intcon	equ	0xFF2
 26764                           postinc0	equ	0xFEE
 26765                           wreg	equ	0xFE8
 26766                           indf1	equ	0xFE7
 26767                           postdec1	equ	0xFE5
 26768                           fsr1h	equ	0xFE2
 26769                           fsr1l	equ	0xFE1
 26770                           indf2	equ	0xFDF
 26771                           postinc2	equ	0xFDE
 26772                           postdec2	equ	0xFDD
 26773                           plusw2	equ	0xFDB
 26774                           fsr2h	equ	0xFDA
 26775                           fsr2l	equ	0xFD9
 26776                           status	equ	0xFD8
 26777                           
 26778 ;; *************** function _HMI_SetNumber *****************
 26779 ;; Defined at:
 26780 ;;		line 221 in file "HMI.c"
 26781 ;; Parameters:    Size  Location     Type
 26782 ;;  pInput          2   22[BANK0 ] int 
 26783 ;; Auto vars:     Size  Location     Type
 26784 ;;		None
 26785 ;; Return value:  Size  Location     Type
 26786 ;;                  1    wreg      void 
 26787 ;; Registers used:
 26788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26789 ;; Tracked objects:
 26790 ;;		On entry : 0/0
 26791 ;;		On exit  : 0/0
 26792 ;;		Unchanged: 0/0
 26793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26794 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26798 ;;Total ram usage:        2 bytes
 26799 ;; Hardware stack levels used:    1
 26800 ;; Hardware stack levels required when called:    9
 26801 ;; This function calls:
 26802 ;;		_HMI_SetSegments
 26803 ;;		_itos
 26804 ;; This function is called by:
 26805 ;;		_Event_TestButton
 26806 ;;		_findClosestWall
 26807 ;;		_mode1
 26808 ;;		_Event_HMI_UpButton
 26809 ;;		_Event_HMI_DownButton
 26810 ;; This function uses a non-reentrant model
 26811 ;;
 26812                           
 26813                           	psect	text140
 26814  016358                     __ptext140:
 26815                           	opt stack 0
 26816  016358                     _HMI_SetNumber:
 26817                           	opt stack 16
 26818                           
 26819                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26820                           
 26821                           ;incstack = 0
 26822  016358  C0D0  F0C6         	movff	HMI_SetNumber@pInput,itos@input
 26823  01635C  C0D1  F0C7         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26824  016360  0E40               	movlw	low _HMIBoard
 26825  016362  0100               	movlb	0	; () banked
 26826  016364  6FC8               	movwf	itos@destination& (0+255),b
 26827  016366  0E03               	movlw	high _HMIBoard
 26828  016368  0100               	movlb	0	; () banked
 26829  01636A  6FC9               	movwf	(itos@destination+1)& (0+255),b
 26830  01636C  EC93  F09E         	call	_itos	;wreg free
 26831                           
 26832                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26833  016370  0E40               	movlw	low _HMIBoard
 26834  016372  0100               	movlb	0	; () banked
 26835  016374  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
 26836  016376  0E03               	movlw	high _HMIBoard
 26837  016378  0100               	movlb	0	; () banked
 26838  01637A  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26839  01637C  EC1C  F0A2         	call	_HMI_SetSegments	;wreg free
 26840  016380  0012               	return		;funcret
 26841  016382                     __end_of_HMI_SetNumber:
 26842                           	opt stack 0
 26843                           tosu	equ	0xFFF
 26844                           tosh	equ	0xFFE
 26845                           tosl	equ	0xFFD
 26846                           pclath	equ	0xFFA
 26847                           tblptru	equ	0xFF8
 26848                           tblptrh	equ	0xFF7
 26849                           tblptrl	equ	0xFF6
 26850                           tablat	equ	0xFF5
 26851                           prodh	equ	0xFF4
 26852                           prodl	equ	0xFF3
 26853                           intcon	equ	0xFF2
 26854                           postinc0	equ	0xFEE
 26855                           wreg	equ	0xFE8
 26856                           indf1	equ	0xFE7
 26857                           postdec1	equ	0xFE5
 26858                           fsr1h	equ	0xFE2
 26859                           fsr1l	equ	0xFE1
 26860                           indf2	equ	0xFDF
 26861                           postinc2	equ	0xFDE
 26862                           postdec2	equ	0xFDD
 26863                           plusw2	equ	0xFDB
 26864                           fsr2h	equ	0xFDA
 26865                           fsr2l	equ	0xFD9
 26866                           status	equ	0xFD8
 26867                           
 26868 ;; *************** function _itos *****************
 26869 ;; Defined at:
 26870 ;;		line 369 in file "Library/Types.c"
 26871 ;; Parameters:    Size  Location     Type
 26872 ;;  input           2   12[BANK0 ] unsigned short 
 26873 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26874 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26875 ;; Auto vars:     Size  Location     Type
 26876 ;;  Out             2   20[BANK0 ] unsigned short 
 26877 ;;  Length          2   18[BANK0 ] unsigned short 
 26878 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26879 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26880 ;; Return value:  Size  Location     Type
 26881 ;;                  1    wreg      void 
 26882 ;; Registers used:
 26883 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26884 ;; Tracked objects:
 26885 ;;		On entry : 0/0
 26886 ;;		On exit  : 0/0
 26887 ;;		Unchanged: 0/0
 26888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26889 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26890 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26892 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26893 ;;Total ram usage:       10 bytes
 26894 ;; Hardware stack levels used:    1
 26895 ;; Hardware stack levels required when called:    8
 26896 ;; This function calls:
 26897 ;;		___lwdiv
 26898 ;;		___lwmod
 26899 ;;		_reverse
 26900 ;; This function is called by:
 26901 ;;		_HMI_SetNumber
 26902 ;; This function uses a non-reentrant model
 26903 ;;
 26904                           
 26905                           	psect	text141
 26906  013D26                     __ptext141:
 26907                           	opt stack 0
 26908  013D26                     _itos:
 26909                           	opt stack 16
 26910                           
 26911                           ;Types.c: 371: UINT16 Out = input;
 26912                           
 26913                           ;incstack = 0
 26914  013D26  C0C6  F0CE         	movff	itos@input,itos@Out
 26915  013D2A  C0C7  F0CF         	movff	itos@input+1,itos@Out+1
 26916                           
 26917                           ;Types.c: 372: UINT16 Length = 0;
 26918  013D2E  0E00               	movlw	0
 26919  013D30  0100               	movlb	0	; () banked
 26920  013D32  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26921  013D34  0E00               	movlw	0
 26922  013D36  6FCC               	movwf	itos@Length& (0+255),b
 26923                           
 26924                           ; BSR set to: 0
 26925                           ;Types.c: 373: char *Data = destination;
 26926  013D38  C0C8  F0CA         	movff	itos@destination,itos@Data
 26927  013D3C  C0C9  F0CB         	movff	itos@destination+1,itos@Data+1
 26928                           
 26929                           ; BSR set to: 0
 26930                           ;Types.c: 374: if(Out == 0)
 26931  013D40  0100               	movlb	0	; () banked
 26932  013D42  51CE               	movf	itos@Out& (0+255),w,b
 26933  013D44  0100               	movlb	0	; () banked
 26934  013D46  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26935  013D48  A4D8               	btfss	status,2,c
 26936  013D4A  D034               	goto	l929
 26937                           
 26938                           ; BSR set to: 0
 26939                           ;Types.c: 375: {
 26940                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26941  013D4C  C0CA  FFD9         	movff	itos@Data,fsr2l
 26942  013D50  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26943  013D54  0E30               	movlw	48
 26944  013D56  6EDF               	movwf	indf2,c
 26945                           
 26946                           ; BSR set to: 0
 26947                           ;Types.c: 377: Length = 1;
 26948  013D58  0E00               	movlw	0
 26949  013D5A  0100               	movlb	0	; () banked
 26950  013D5C  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26951  013D5E  0E01               	movlw	1
 26952  013D60  6FCC               	movwf	itos@Length& (0+255),b
 26953                           
 26954                           ;Types.c: 378: }
 26955  013D62  D040               	goto	l928
 26956  013D64                     
 26957                           ; BSR set to: 0
 26958                           ;Types.c: 382: {
 26959                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26960                           
 26961                           ; BSR set to: 0
 26962  013D64  C0CE  F0C1         	movff	itos@Out,___lwmod@dividend
 26963  013D68  C0CF  F0C2         	movff	itos@Out+1,___lwmod@dividend+1
 26964  013D6C  0E00               	movlw	0
 26965  013D6E  0100               	movlb	0	; () banked
 26966  013D70  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
 26967  013D72  0E0A               	movlw	10
 26968  013D74  6FC3               	movwf	___lwmod@divisor& (0+255),b
 26969  013D76  ECBF  F0AC         	call	___lwmod	;wreg free
 26970  013D7A  0100               	movlb	0	; () banked
 26971  013D7C  51C1               	movf	?___lwmod& (0+255),w,b
 26972  013D7E  0F30               	addlw	48
 26973  013D80  C0CA  FFD9         	movff	itos@Data,fsr2l
 26974  013D84  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26975  013D88  6EDF               	movwf	indf2,c
 26976                           
 26977                           ; BSR set to: 0
 26978                           ;Types.c: 384: Out /= 10;
 26979  013D8A  C0CE  F0BA         	movff	itos@Out,___lwdiv@dividend
 26980  013D8E  C0CF  F0BB         	movff	itos@Out+1,___lwdiv@dividend+1
 26981  013D92  0E00               	movlw	0
 26982  013D94  0100               	movlb	0	; () banked
 26983  013D96  6FBD               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26984  013D98  0E0A               	movlw	10
 26985  013D9A  6FBC               	movwf	___lwdiv@divisor& (0+255),b
 26986  013D9C  EC54  F0A9         	call	___lwdiv	;wreg free
 26987  013DA0  C0BA  F0CE         	movff	?___lwdiv,itos@Out
 26988  013DA4  C0BB  F0CF         	movff	?___lwdiv+1,itos@Out+1
 26989                           
 26990                           ;Types.c: 385: Length ++;
 26991  013DA8  0100               	movlb	0	; () banked
 26992  013DAA  4BCC               	infsnz	itos@Length& (0+255),f,b
 26993  013DAC  2BCD               	incf	(itos@Length+1)& (0+255),f,b
 26994                           
 26995                           ; BSR set to: 0
 26996                           ;Types.c: 386: Data++;
 26997  013DAE  0100               	movlb	0	; () banked
 26998  013DB0  4BCA               	infsnz	itos@Data& (0+255),f,b
 26999  013DB2  2BCB               	incf	(itos@Data+1)& (0+255),f,b
 27000  013DB4                     l929:
 27001                           
 27002                           ; BSR set to: 0
 27003                           
 27004                           ; BSR set to: 0
 27005  013DB4  0100               	movlb	0	; () banked
 27006  013DB6  51CE               	movf	itos@Out& (0+255),w,b
 27007  013DB8  0100               	movlb	0	; () banked
 27008  013DBA  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 27009  013DBC  B4D8               	btfsc	status,2,c
 27010  013DBE  D008               	goto	u9040
 27011                           
 27012                           ; BSR set to: 0
 27013  013DC0  0100               	movlb	0	; () banked
 27014  013DC2  51CD               	movf	(itos@Length+1)& (0+255),w,b
 27015  013DC4  E105               	bnz	l12382
 27016  013DC6  0E06               	movlw	6
 27017  013DC8  0100               	movlb	0	; () banked
 27018  013DCA  5DCC               	subwf	itos@Length& (0+255),w,b
 27019  013DCC  A0D8               	btfss	status,0,c
 27020  013DCE  D7CA               	goto	l930
 27021  013DD0                     u9040:
 27022  013DD0                     l12382:
 27023                           
 27024                           ; BSR set to: 0
 27025                           ;Types.c: 387: }
 27026                           ;Types.c: 388: reverse(destination, Length);
 27027  013DD0  C0C8  F0BA         	movff	itos@destination,reverse@input
 27028  013DD4  C0C9  F0BB         	movff	itos@destination+1,reverse@input+1
 27029  013DD8  C0CC  F0BC         	movff	itos@Length,reverse@length
 27030  013DDC  C0CD  F0BD         	movff	itos@Length+1,reverse@length+1
 27031  013DE0  EC21  F0AB         	call	_reverse	;wreg free
 27032  013DE4                     l928:
 27033                           
 27034                           ;Types.c: 389: }
 27035                           ;Types.c: 390: destination[Length] = '\0';
 27036  013DE4  0100               	movlb	0	; () banked
 27037  013DE6  51CC               	movf	itos@Length& (0+255),w,b
 27038  013DE8  0100               	movlb	0	; () banked
 27039  013DEA  25C8               	addwf	itos@destination& (0+255),w,b
 27040  013DEC  6ED9               	movwf	fsr2l,c
 27041  013DEE  0100               	movlb	0	; () banked
 27042  013DF0  51CD               	movf	(itos@Length+1)& (0+255),w,b
 27043  013DF2  0100               	movlb	0	; () banked
 27044  013DF4  21C9               	addwfc	(itos@destination+1)& (0+255),w,b
 27045  013DF6  6EDA               	movwf	fsr2h,c
 27046  013DF8  0E00               	movlw	0
 27047  013DFA  6EDF               	movwf	indf2,c
 27048                           
 27049                           ; BSR set to: 0
 27050  013DFC  0012               	return		;funcret
 27051  013DFE                     __end_of_itos:
 27052                           	opt stack 0
 27053                           tosu	equ	0xFFF
 27054                           tosh	equ	0xFFE
 27055                           tosl	equ	0xFFD
 27056                           pclath	equ	0xFFA
 27057                           tblptru	equ	0xFF8
 27058                           tblptrh	equ	0xFF7
 27059                           tblptrl	equ	0xFF6
 27060                           tablat	equ	0xFF5
 27061                           prodh	equ	0xFF4
 27062                           prodl	equ	0xFF3
 27063                           intcon	equ	0xFF2
 27064                           postinc0	equ	0xFEE
 27065                           wreg	equ	0xFE8
 27066                           indf1	equ	0xFE7
 27067                           postdec1	equ	0xFE5
 27068                           fsr1h	equ	0xFE2
 27069                           fsr1l	equ	0xFE1
 27070                           indf2	equ	0xFDF
 27071                           postinc2	equ	0xFDE
 27072                           postdec2	equ	0xFDD
 27073                           plusw2	equ	0xFDB
 27074                           fsr2h	equ	0xFDA
 27075                           fsr2l	equ	0xFD9
 27076                           status	equ	0xFD8
 27077                           
 27078 ;; *************** function _reverse *****************
 27079 ;; Defined at:
 27080 ;;		line 357 in file "Library/Types.c"
 27081 ;; Parameters:    Size  Location     Type
 27082 ;;  input           2    0[BANK0 ] PTR unsigned char 
 27083 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27084 ;;  length          2    2[BANK0 ] unsigned short 
 27085 ;; Auto vars:     Size  Location     Type
 27086 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 27087 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27088 ;;  tempVar         1    4[BANK0 ] unsigned char 
 27089 ;; Return value:  Size  Location     Type
 27090 ;;                  1    wreg      void 
 27091 ;; Registers used:
 27092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27093 ;; Tracked objects:
 27094 ;;		On entry : 0/0
 27095 ;;		On exit  : 0/0
 27096 ;;		Unchanged: 0/0
 27097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27098 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27099 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27101 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27102 ;;Total ram usage:        7 bytes
 27103 ;; Hardware stack levels used:    1
 27104 ;; Hardware stack levels required when called:    7
 27105 ;; This function calls:
 27106 ;;		Nothing
 27107 ;; This function is called by:
 27108 ;;		_itos
 27109 ;; This function uses a non-reentrant model
 27110 ;;
 27111                           
 27112                           	psect	text142
 27113  015642                     __ptext142:
 27114                           	opt stack 0
 27115  015642                     _reverse:
 27116                           	opt stack 16
 27117                           
 27118                           ;Types.c: 359: char tempVar,
 27119                           ;Types.c: 360: *iterator = input + length;
 27120                           
 27121                           ; BSR set to: 0
 27122                           ;incstack = 0
 27123  015642  0100               	movlb	0	; () banked
 27124  015644  51BC               	movf	reverse@length& (0+255),w,b
 27125  015646  0100               	movlb	0	; () banked
 27126  015648  25BA               	addwf	reverse@input& (0+255),w,b
 27127  01564A  0100               	movlb	0	; () banked
 27128  01564C  6FBF               	movwf	reverse@iterator& (0+255),b
 27129  01564E  0100               	movlb	0	; () banked
 27130  015650  51BD               	movf	(reverse@length+1)& (0+255),w,b
 27131  015652  0100               	movlb	0	; () banked
 27132  015654  21BB               	addwfc	(reverse@input+1)& (0+255),w,b
 27133  015656  0100               	movlb	0	; () banked
 27134  015658  6FC0               	movwf	(reverse@iterator+1)& (0+255),b
 27135                           
 27136                           ;Types.c: 362: while ( --iterator > input )
 27137  01565A  D01A               	goto	l921
 27138  01565C                     
 27139                           ; BSR set to: 0
 27140                           ;Types.c: 363: {
 27141                           ;Types.c: 364: tempVar = *input;
 27142                           
 27143                           ; BSR set to: 0
 27144  01565C  C0BA  FFD9         	movff	reverse@input,fsr2l
 27145  015660  C0BB  FFDA         	movff	reverse@input+1,fsr2h
 27146  015664  50DF               	movf	indf2,w,c
 27147  015666  0100               	movlb	0	; () banked
 27148  015668  6FBE               	movwf	reverse@tempVar& (0+255),b
 27149                           
 27150                           ; BSR set to: 0
 27151                           ;Types.c: 365: *input++=*iterator;
 27152  01566A  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27153  01566E  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27154  015672  C0BA  FFE1         	movff	reverse@input,fsr1l
 27155  015676  C0BB  FFE2         	movff	reverse@input+1,fsr1h
 27156  01567A  CFDF FFE7          	movff	indf2,indf1
 27157                           
 27158                           ; BSR set to: 0
 27159  01567E  0100               	movlb	0	; () banked
 27160  015680  4BBA               	infsnz	reverse@input& (0+255),f,b
 27161  015682  2BBB               	incf	(reverse@input+1)& (0+255),f,b
 27162                           
 27163                           ; BSR set to: 0
 27164                           ;Types.c: 366: *iterator=tempVar;
 27165  015684  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27166  015688  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27167  01568C  C0BE  FFDF         	movff	reverse@tempVar,indf2
 27168  015690                     l921:
 27169                           
 27170                           ; BSR set to: 0
 27171                           
 27172                           ; BSR set to: 0
 27173  015690  0100               	movlb	0	; () banked
 27174  015692  07BF               	decf	reverse@iterator& (0+255),f,b
 27175  015694  A0D8               	btfss	status,0,c
 27176  015696  07C0               	decf	(reverse@iterator+1)& (0+255),f,b
 27177  015698  0100               	movlb	0	; () banked
 27178  01569A  51BF               	movf	reverse@iterator& (0+255),w,b
 27179  01569C  0100               	movlb	0	; () banked
 27180  01569E  5DBA               	subwf	reverse@input& (0+255),w,b
 27181  0156A0  0100               	movlb	0	; () banked
 27182  0156A2  51C0               	movf	(reverse@iterator+1)& (0+255),w,b
 27183  0156A4  0100               	movlb	0	; () banked
 27184  0156A6  59BB               	subwfb	(reverse@input+1)& (0+255),w,b
 27185  0156A8  B0D8               	btfsc	status,0,c
 27186  0156AA  0012               	return	
 27187  0156AC  D7D7               	goto	l922
 27188  0156AE                     __end_of_reverse:
 27189                           	opt stack 0
 27190                           tosu	equ	0xFFF
 27191                           tosh	equ	0xFFE
 27192                           tosl	equ	0xFFD
 27193                           pclath	equ	0xFFA
 27194                           tblptru	equ	0xFF8
 27195                           tblptrh	equ	0xFF7
 27196                           tblptrl	equ	0xFF6
 27197                           tablat	equ	0xFF5
 27198                           prodh	equ	0xFF4
 27199                           prodl	equ	0xFF3
 27200                           intcon	equ	0xFF2
 27201                           postinc0	equ	0xFEE
 27202                           wreg	equ	0xFE8
 27203                           indf1	equ	0xFE7
 27204                           postdec1	equ	0xFE5
 27205                           fsr1h	equ	0xFE2
 27206                           fsr1l	equ	0xFE1
 27207                           indf2	equ	0xFDF
 27208                           postinc2	equ	0xFDE
 27209                           postdec2	equ	0xFDD
 27210                           plusw2	equ	0xFDB
 27211                           fsr2h	equ	0xFDA
 27212                           fsr2l	equ	0xFD9
 27213                           status	equ	0xFD8
 27214                           
 27215 ;; *************** function ___lwmod *****************
 27216 ;; Defined at:
 27217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 27218 ;; Parameters:    Size  Location     Type
 27219 ;;  dividend        2    7[BANK0 ] unsigned int 
 27220 ;;  divisor         2    9[BANK0 ] unsigned int 
 27221 ;; Auto vars:     Size  Location     Type
 27222 ;;  counter         1   11[BANK0 ] unsigned char 
 27223 ;; Return value:  Size  Location     Type
 27224 ;;                  2    7[BANK0 ] unsigned int 
 27225 ;; Registers used:
 27226 ;;		wreg, status,2, status,0
 27227 ;; Tracked objects:
 27228 ;;		On entry : 0/0
 27229 ;;		On exit  : 0/0
 27230 ;;		Unchanged: 0/0
 27231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27232 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27235 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27236 ;;Total ram usage:        5 bytes
 27237 ;; Hardware stack levels used:    1
 27238 ;; Hardware stack levels required when called:    7
 27239 ;; This function calls:
 27240 ;;		Nothing
 27241 ;; This function is called by:
 27242 ;;		_itos
 27243 ;;		_printf
 27244 ;; This function uses a non-reentrant model
 27245 ;;
 27246                           
 27247                           	psect	text143
 27248  01597E                     __ptext143:
 27249                           	opt stack 0
 27250  01597E                     ___lwmod:
 27251                           	opt stack 22
 27252                           
 27253                           ; BSR set to: 0
 27254                           ;incstack = 0
 27255  01597E  0100               	movlb	0	; () banked
 27256  015980  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27257  015982  0100               	movlb	0	; () banked
 27258  015984  11C4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27259  015986  B4D8               	btfsc	status,2,c
 27260  015988  D026               	goto	l2871
 27261                           
 27262                           ; BSR set to: 0
 27263  01598A  0E01               	movlw	1
 27264  01598C  0100               	movlb	0	; () banked
 27265  01598E  6FC5               	movwf	___lwmod@counter& (0+255),b
 27266  015990  D006               	goto	l2866
 27267  015992                     
 27268                           ; BSR set to: 0
 27269                           
 27270                           ; BSR set to: 0
 27271  015992  0100               	movlb	0	; () banked
 27272  015994  90D8               	bcf	status,0,c
 27273  015996  37C3               	rlcf	___lwmod@divisor& (0+255),f,b
 27274  015998  37C4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27275  01599A  0100               	movlb	0	; () banked
 27276  01599C  2BC5               	incf	___lwmod@counter& (0+255),f,b
 27277  01599E                     l2866:
 27278                           
 27279                           ; BSR set to: 0
 27280                           
 27281                           ; BSR set to: 0
 27282  01599E  0100               	movlb	0	; () banked
 27283  0159A0  AFC4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27284  0159A2  D7F7               	goto	l2867
 27285  0159A4                     u8960:
 27286                           
 27287                           ; BSR set to: 0
 27288                           
 27289                           ; BSR set to: 0
 27290                           
 27291                           ; BSR set to: 0
 27292  0159A4  0100               	movlb	0	; () banked
 27293  0159A6  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27294  0159A8  0100               	movlb	0	; () banked
 27295  0159AA  5DC1               	subwf	___lwmod@dividend& (0+255),w,b
 27296  0159AC  0100               	movlb	0	; () banked
 27297  0159AE  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27298  0159B0  0100               	movlb	0	; () banked
 27299  0159B2  59C2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27300  0159B4  A0D8               	btfss	status,0,c
 27301  0159B6  D008               	goto	l2870
 27302                           
 27303                           ; BSR set to: 0
 27304  0159B8  0100               	movlb	0	; () banked
 27305  0159BA  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27306  0159BC  0100               	movlb	0	; () banked
 27307  0159BE  5FC1               	subwf	___lwmod@dividend& (0+255),f,b
 27308  0159C0  0100               	movlb	0	; () banked
 27309  0159C2  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27310  0159C4  0100               	movlb	0	; () banked
 27311  0159C6  5BC2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27312  0159C8                     l2870:
 27313                           
 27314                           ; BSR set to: 0
 27315                           
 27316                           ; BSR set to: 0
 27317  0159C8  0100               	movlb	0	; () banked
 27318  0159CA  90D8               	bcf	status,0,c
 27319  0159CC  33C4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27320  0159CE  33C3               	rrcf	___lwmod@divisor& (0+255),f,b
 27321                           
 27322                           ; BSR set to: 0
 27323  0159D0  0100               	movlb	0	; () banked
 27324  0159D2  2FC5               	decfsz	___lwmod@counter& (0+255),f,b
 27325  0159D4  D7E7               	goto	u8960
 27326  0159D6                     l2871:
 27327                           
 27328                           ; BSR set to: 0
 27329                           
 27330                           ; BSR set to: 0
 27331  0159D6  C0C1  F0C1         	movff	___lwmod@dividend,?___lwmod
 27332  0159DA  C0C2  F0C2         	movff	___lwmod@dividend+1,?___lwmod+1
 27333                           
 27334                           ; BSR set to: 0
 27335  0159DE  0012               	return		;funcret
 27336  0159E0                     __end_of___lwmod:
 27337                           	opt stack 0
 27338                           tosu	equ	0xFFF
 27339                           tosh	equ	0xFFE
 27340                           tosl	equ	0xFFD
 27341                           pclath	equ	0xFFA
 27342                           tblptru	equ	0xFF8
 27343                           tblptrh	equ	0xFF7
 27344                           tblptrl	equ	0xFF6
 27345                           tablat	equ	0xFF5
 27346                           prodh	equ	0xFF4
 27347                           prodl	equ	0xFF3
 27348                           intcon	equ	0xFF2
 27349                           postinc0	equ	0xFEE
 27350                           wreg	equ	0xFE8
 27351                           indf1	equ	0xFE7
 27352                           postdec1	equ	0xFE5
 27353                           fsr1h	equ	0xFE2
 27354                           fsr1l	equ	0xFE1
 27355                           indf2	equ	0xFDF
 27356                           postinc2	equ	0xFDE
 27357                           postdec2	equ	0xFDD
 27358                           plusw2	equ	0xFDB
 27359                           fsr2h	equ	0xFDA
 27360                           fsr2l	equ	0xFD9
 27361                           status	equ	0xFD8
 27362                           
 27363 ;; *************** function ___lwdiv *****************
 27364 ;; Defined at:
 27365 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 27366 ;; Parameters:    Size  Location     Type
 27367 ;;  dividend        2    0[BANK0 ] unsigned int 
 27368 ;;  divisor         2    2[BANK0 ] unsigned int 
 27369 ;; Auto vars:     Size  Location     Type
 27370 ;;  quotient        2    5[BANK0 ] unsigned int 
 27371 ;;  counter         1    4[BANK0 ] unsigned char 
 27372 ;; Return value:  Size  Location     Type
 27373 ;;                  2    0[BANK0 ] unsigned int 
 27374 ;; Registers used:
 27375 ;;		wreg, status,2, status,0
 27376 ;; Tracked objects:
 27377 ;;		On entry : 0/0
 27378 ;;		On exit  : 0/0
 27379 ;;		Unchanged: 0/0
 27380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27381 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27382 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27384 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27385 ;;Total ram usage:        7 bytes
 27386 ;; Hardware stack levels used:    1
 27387 ;; Hardware stack levels required when called:    7
 27388 ;; This function calls:
 27389 ;;		Nothing
 27390 ;; This function is called by:
 27391 ;;		_itos
 27392 ;;		_printf
 27393 ;; This function uses a non-reentrant model
 27394 ;;
 27395                           
 27396                           	psect	text144
 27397  0152A8                     __ptext144:
 27398                           	opt stack 0
 27399  0152A8                     ___lwdiv:
 27400                           	opt stack 22
 27401                           
 27402                           ; BSR set to: 0
 27403                           ;incstack = 0
 27404  0152A8  0E00               	movlw	0
 27405  0152AA  0100               	movlb	0	; () banked
 27406  0152AC  6FC0               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27407  0152AE  0E00               	movlw	0
 27408  0152B0  6FBF               	movwf	___lwdiv@quotient& (0+255),b
 27409                           
 27410                           ; BSR set to: 0
 27411  0152B2  0100               	movlb	0	; () banked
 27412  0152B4  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27413  0152B6  0100               	movlb	0	; () banked
 27414  0152B8  11BD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27415  0152BA  B4D8               	btfsc	status,2,c
 27416  0152BC  D02C               	goto	l2861
 27417                           
 27418                           ; BSR set to: 0
 27419  0152BE  0E01               	movlw	1
 27420  0152C0  0100               	movlb	0	; () banked
 27421  0152C2  6FBE               	movwf	___lwdiv@counter& (0+255),b
 27422  0152C4  D006               	goto	l2856
 27423  0152C6                     
 27424                           ; BSR set to: 0
 27425                           
 27426                           ; BSR set to: 0
 27427  0152C6  0100               	movlb	0	; () banked
 27428  0152C8  90D8               	bcf	status,0,c
 27429  0152CA  37BC               	rlcf	___lwdiv@divisor& (0+255),f,b
 27430  0152CC  37BD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27431  0152CE  0100               	movlb	0	; () banked
 27432  0152D0  2BBE               	incf	___lwdiv@counter& (0+255),f,b
 27433  0152D2                     l2856:
 27434                           
 27435                           ; BSR set to: 0
 27436                           
 27437                           ; BSR set to: 0
 27438  0152D2  0100               	movlb	0	; () banked
 27439  0152D4  AFBD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27440  0152D6  D7F7               	goto	l2857
 27441  0152D8                     u8930:
 27442                           
 27443                           ; BSR set to: 0
 27444                           
 27445                           ; BSR set to: 0
 27446                           
 27447                           ; BSR set to: 0
 27448  0152D8  0100               	movlb	0	; () banked
 27449  0152DA  90D8               	bcf	status,0,c
 27450  0152DC  37BF               	rlcf	___lwdiv@quotient& (0+255),f,b
 27451  0152DE  37C0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27452                           
 27453                           ; BSR set to: 0
 27454  0152E0  0100               	movlb	0	; () banked
 27455  0152E2  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27456  0152E4  0100               	movlb	0	; () banked
 27457  0152E6  5DBA               	subwf	___lwdiv@dividend& (0+255),w,b
 27458  0152E8  0100               	movlb	0	; () banked
 27459  0152EA  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27460  0152EC  0100               	movlb	0	; () banked
 27461  0152EE  59BB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27462  0152F0  A0D8               	btfss	status,0,c
 27463  0152F2  D00A               	goto	l2860
 27464                           
 27465                           ; BSR set to: 0
 27466  0152F4  0100               	movlb	0	; () banked
 27467  0152F6  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27468  0152F8  0100               	movlb	0	; () banked
 27469  0152FA  5FBA               	subwf	___lwdiv@dividend& (0+255),f,b
 27470  0152FC  0100               	movlb	0	; () banked
 27471  0152FE  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27472  015300  0100               	movlb	0	; () banked
 27473  015302  5BBB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27474                           
 27475                           ; BSR set to: 0
 27476  015304  0100               	movlb	0	; () banked
 27477  015306  81BF               	bsf	___lwdiv@quotient& (0+255),0,b
 27478  015308                     l2860:
 27479                           
 27480                           ; BSR set to: 0
 27481                           
 27482                           ; BSR set to: 0
 27483  015308  0100               	movlb	0	; () banked
 27484  01530A  90D8               	bcf	status,0,c
 27485  01530C  33BD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27486  01530E  33BC               	rrcf	___lwdiv@divisor& (0+255),f,b
 27487                           
 27488                           ; BSR set to: 0
 27489  015310  0100               	movlb	0	; () banked
 27490  015312  2FBE               	decfsz	___lwdiv@counter& (0+255),f,b
 27491  015314  D7E1               	goto	u8930
 27492  015316                     l2861:
 27493                           
 27494                           ; BSR set to: 0
 27495                           
 27496                           ; BSR set to: 0
 27497  015316  C0BF  F0BA         	movff	___lwdiv@quotient,?___lwdiv
 27498  01531A  C0C0  F0BB         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27499                           
 27500                           ; BSR set to: 0
 27501  01531E  0012               	return		;funcret
 27502  015320                     __end_of___lwdiv:
 27503                           	opt stack 0
 27504                           tosu	equ	0xFFF
 27505                           tosh	equ	0xFFE
 27506                           tosl	equ	0xFFD
 27507                           pclath	equ	0xFFA
 27508                           tblptru	equ	0xFF8
 27509                           tblptrh	equ	0xFF7
 27510                           tblptrl	equ	0xFF6
 27511                           tablat	equ	0xFF5
 27512                           prodh	equ	0xFF4
 27513                           prodl	equ	0xFF3
 27514                           intcon	equ	0xFF2
 27515                           postinc0	equ	0xFEE
 27516                           wreg	equ	0xFE8
 27517                           indf1	equ	0xFE7
 27518                           postdec1	equ	0xFE5
 27519                           fsr1h	equ	0xFE2
 27520                           fsr1l	equ	0xFE1
 27521                           indf2	equ	0xFDF
 27522                           postinc2	equ	0xFDE
 27523                           postdec2	equ	0xFDD
 27524                           plusw2	equ	0xFDB
 27525                           fsr2h	equ	0xFDA
 27526                           fsr2l	equ	0xFD9
 27527                           status	equ	0xFD8
 27528                           
 27529 ;; *************** function _HMI_SetSegments *****************
 27530 ;; Defined at:
 27531 ;;		line 226 in file "HMI.c"
 27532 ;; Parameters:    Size  Location     Type
 27533 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27534 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27535 ;; Auto vars:     Size  Location     Type
 27536 ;;  in              2    4[BANK0 ] unsigned short 
 27537 ;; Return value:  Size  Location     Type
 27538 ;;                  1    wreg      void 
 27539 ;; Registers used:
 27540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27541 ;; Tracked objects:
 27542 ;;		On entry : 0/0
 27543 ;;		On exit  : 0/0
 27544 ;;		Unchanged: 0/0
 27545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27546 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27549 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27550 ;;Total ram usage:        5 bytes
 27551 ;; Hardware stack levels used:    1
 27552 ;; Hardware stack levels required when called:    8
 27553 ;; This function calls:
 27554 ;;		_ToSegment
 27555 ;; This function is called by:
 27556 ;;		_HMI_SetNumber
 27557 ;; This function uses a non-reentrant model
 27558 ;;
 27559                           
 27560                           	psect	text145
 27561  014438                     __ptext145:
 27562                           	opt stack 0
 27563  014438                     _HMI_SetSegments:
 27564                           	opt stack 16
 27565                           
 27566                           ;HMI.c: 228: UINT16 in=0;
 27567                           
 27568                           ; BSR set to: 0
 27569                           ;incstack = 0
 27570  014438  0E00               	movlw	0
 27571  01443A  0100               	movlb	0	; () banked
 27572  01443C  6FBF               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27573  01443E  0E00               	movlw	0
 27574  014440  6FBE               	movwf	HMI_SetSegments@in& (0+255),b
 27575                           
 27576                           ;HMI.c: 229: while(*pString)
 27577  014442  D038               	goto	l1202
 27578  014444                     
 27579                           ; BSR set to: 0
 27580                           ;HMI.c: 230: {
 27581                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27582                           
 27583                           ; BSR set to: 0
 27584  014444  0E40               	movlw	low _HMIBoard
 27585  014446  0100               	movlb	0	; () banked
 27586  014448  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27587  01444A  6ED9               	movwf	fsr2l,c
 27588  01444C  0E03               	movlw	high _HMIBoard
 27589  01444E  0100               	movlb	0	; () banked
 27590  014450  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27591  014452  6EDA               	movwf	fsr2h,c
 27592  014454  C0BB  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27593  014458  C0BC  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27594  01445C  50E7               	movf	indf1,w,c
 27595  01445E  EC11  F08C         	call	_ToSegment
 27596  014462  6EDF               	movwf	indf2,c
 27597                           
 27598                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27599  014464  0E40               	movlw	low _HMIBoard
 27600  014466  0100               	movlb	0	; () banked
 27601  014468  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27602  01446A  6ED9               	movwf	fsr2l,c
 27603  01446C  0E03               	movlw	high _HMIBoard
 27604  01446E  0100               	movlb	0	; () banked
 27605  014470  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27606  014472  6EDA               	movwf	fsr2h,c
 27607  014474  0E80               	movlw	128
 27608  014476  18DE               	xorwf	postinc2,w,c
 27609  014478  A4D8               	btfss	status,2,c
 27610  01447A  D00E               	goto	l1201
 27611                           
 27612                           ; BSR set to: 0
 27613                           ;HMI.c: 234: {
 27614                           ;HMI.c: 235: in--;
 27615  01447C  0100               	movlb	0	; () banked
 27616  01447E  07BE               	decf	HMI_SetSegments@in& (0+255),f,b
 27617  014480  A0D8               	btfss	status,0,c
 27618  014482  07BF               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27619                           
 27620                           ; BSR set to: 0
 27621                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27622  014484  0E40               	movlw	low _HMIBoard
 27623  014486  0100               	movlb	0	; () banked
 27624  014488  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27625  01448A  6ED9               	movwf	fsr2l,c
 27626  01448C  0E03               	movlw	high _HMIBoard
 27627  01448E  0100               	movlb	0	; () banked
 27628  014490  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27629  014492  6EDA               	movwf	fsr2h,c
 27630  014494  0E00               	movlw	0
 27631  014496  8EDB               	bsf	plusw2,7,c
 27632  014498                     l1201:
 27633                           
 27634                           ; BSR set to: 0
 27635                           ;HMI.c: 237: }
 27636                           ;HMI.c: 239: pString++;
 27637                           
 27638                           ; BSR set to: 0
 27639  014498  0100               	movlb	0	; () banked
 27640  01449A  4BBB               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27641  01449C  2BBC               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27642                           
 27643                           ; BSR set to: 0
 27644                           ;HMI.c: 240: in++;
 27645  01449E  0100               	movlb	0	; () banked
 27646  0144A0  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27647  0144A2  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27648                           
 27649                           ; BSR set to: 0
 27650                           ;HMI.c: 241: if (in>=6)
 27651  0144A4  0100               	movlb	0	; () banked
 27652  0144A6  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27653  0144A8  E11A               	bnz	l12434
 27654  0144AA  0E06               	movlw	6
 27655  0144AC  0100               	movlb	0	; () banked
 27656  0144AE  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27657  0144B0  B0D8               	btfsc	status,0,c
 27658  0144B2  D015               	goto	l1204
 27659  0144B4                     l1202:
 27660                           
 27661                           ; BSR set to: 0
 27662                           
 27663                           ; BSR set to: 0
 27664                           
 27665                           ; BSR set to: 0
 27666  0144B4  C0BB  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27667  0144B8  C0BC  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27668  0144BC  50DF               	movf	indf2,w,c
 27669  0144BE  B4D8               	btfsc	status,2,c
 27670  0144C0  D00E               	goto	l1204
 27671  0144C2  D7C0               	goto	l1200
 27672  0144C4                     
 27673                           ; BSR set to: 0
 27674                           ;HMI.c: 245: {
 27675                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27676                           
 27677                           ; BSR set to: 0
 27678  0144C4  0E40               	movlw	low _HMIBoard
 27679  0144C6  0100               	movlb	0	; () banked
 27680  0144C8  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27681  0144CA  6ED9               	movwf	fsr2l,c
 27682  0144CC  0E03               	movlw	high _HMIBoard
 27683  0144CE  0100               	movlb	0	; () banked
 27684  0144D0  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27685  0144D2  6EDA               	movwf	fsr2h,c
 27686  0144D4  0E00               	movlw	0
 27687  0144D6  6EDF               	movwf	indf2,c
 27688                           
 27689                           ; BSR set to: 0
 27690                           ;HMI.c: 247: in++;
 27691  0144D8  0100               	movlb	0	; () banked
 27692  0144DA  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27693  0144DC  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27694  0144DE                     l1204:
 27695  0144DE                     l12434:
 27696                           
 27697                           ; BSR set to: 0
 27698  0144DE  0100               	movlb	0	; () banked
 27699  0144E0  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27700  0144E2  E106               	bnz	l1207
 27701  0144E4  0E06               	movlw	6
 27702  0144E6  0100               	movlb	0	; () banked
 27703  0144E8  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27704  0144EA  B0D8               	btfsc	status,0,c
 27705  0144EC  0012               	return	
 27706  0144EE  D7EA               	goto	l1205
 27707  0144F0                     l1207:
 27708                           
 27709                           ; BSR set to: 0
 27710  0144F0  0012               	return		;funcret
 27711  0144F2                     __end_of_HMI_SetSegments:
 27712                           	opt stack 0
 27713                           tosu	equ	0xFFF
 27714                           tosh	equ	0xFFE
 27715                           tosl	equ	0xFFD
 27716                           pclath	equ	0xFFA
 27717                           tblptru	equ	0xFF8
 27718                           tblptrh	equ	0xFF7
 27719                           tblptrl	equ	0xFF6
 27720                           tablat	equ	0xFF5
 27721                           prodh	equ	0xFF4
 27722                           prodl	equ	0xFF3
 27723                           intcon	equ	0xFF2
 27724                           postinc0	equ	0xFEE
 27725                           wreg	equ	0xFE8
 27726                           indf1	equ	0xFE7
 27727                           postdec1	equ	0xFE5
 27728                           fsr1h	equ	0xFE2
 27729                           fsr1l	equ	0xFE1
 27730                           indf2	equ	0xFDF
 27731                           postinc2	equ	0xFDE
 27732                           postdec2	equ	0xFDD
 27733                           plusw2	equ	0xFDB
 27734                           fsr2h	equ	0xFDA
 27735                           fsr2l	equ	0xFD9
 27736                           status	equ	0xFD8
 27737                           
 27738 ;; *************** function _ToSegment *****************
 27739 ;; Defined at:
 27740 ;;		line 284 in file "Library/Types.c"
 27741 ;; Parameters:    Size  Location     Type
 27742 ;;  pCHR            1    wreg     unsigned char 
 27743 ;; Auto vars:     Size  Location     Type
 27744 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27745 ;; Return value:  Size  Location     Type
 27746 ;;                  1    wreg      unsigned char 
 27747 ;; Registers used:
 27748 ;;		wreg, status,2, status,0
 27749 ;; Tracked objects:
 27750 ;;		On entry : 0/0
 27751 ;;		On exit  : 0/0
 27752 ;;		Unchanged: 0/0
 27753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27757 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27758 ;;Total ram usage:        1 bytes
 27759 ;; Hardware stack levels used:    1
 27760 ;; Hardware stack levels required when called:    7
 27761 ;; This function calls:
 27762 ;;		Nothing
 27763 ;; This function is called by:
 27764 ;;		_HMI_SetSegments
 27765 ;; This function uses a non-reentrant model
 27766 ;;
 27767                           
 27768                           	psect	text146
 27769  011822                     __ptext146:
 27770                           	opt stack 0
 27771  011822                     _ToSegment:
 27772                           	opt stack 16
 27773                           
 27774                           ; BSR set to: 0
 27775                           ;incstack = 0
 27776                           ;ToSegment@pCHR stored from wreg
 27777  011822  0100               	movlb	0	; () banked
 27778  011824  6FBA               	movwf	ToSegment@pCHR& (0+255),b
 27779                           
 27780                           ;Types.c: 286: switch(pCHR)
 27781  011826  D07E               	goto	l853
 27782  011828  0E3F               	movlw	63
 27783  01182A  0012               	return	
 27784  01182C  0E06               	movlw	6
 27785  01182E  0012               	return	
 27786  011830  0E5B               	movlw	91
 27787  011832  0012               	return	
 27788  011834  0E4F               	movlw	79
 27789  011836  0012               	return	
 27790  011838  0E66               	movlw	102
 27791  01183A  0012               	return	
 27792  01183C  0E6D               	movlw	109
 27793  01183E  0012               	return	
 27794  011840  0E7D               	movlw	125
 27795  011842  0012               	return	
 27796  011844  0E07               	movlw	7
 27797  011846  0012               	return	
 27798  011848  0E7F               	movlw	127
 27799  01184A  0012               	return	
 27800  01184C  0E6F               	movlw	111
 27801  01184E  0012               	return	
 27802  011850  0E5F               	movlw	95
 27803  011852  0012               	return	
 27804  011854  0E7C               	movlw	124
 27805  011856  0012               	return	
 27806  011858  0E58               	movlw	88
 27807  01185A  0012               	return	
 27808  01185C  0E5E               	movlw	94
 27809  01185E  0012               	return	
 27810  011860  0E7B               	movlw	123
 27811  011862  0012               	return	
 27812  011864  0E71               	movlw	113
 27813  011866  0012               	return	
 27814  011868  0E6F               	movlw	111
 27815  01186A  0012               	return	
 27816  01186C  0E74               	movlw	116
 27817  01186E  0012               	return	
 27818  011870  0E04               	movlw	4
 27819  011872  0012               	return	
 27820  011874  0E0E               	movlw	14
 27821  011876  0012               	return	
 27822  011878  0E7A               	movlw	122
 27823  01187A  0012               	return	
 27824  01187C  0E06               	movlw	6
 27825  01187E  0012               	return	
 27826  011880  0E14               	movlw	20
 27827  011882  0012               	return	
 27828  011884  0E54               	movlw	84
 27829  011886  0012               	return	
 27830  011888  0E5C               	movlw	92
 27831  01188A  0012               	return	
 27832  01188C  0E73               	movlw	115
 27833  01188E  0012               	return	
 27834  011890  0E67               	movlw	103
 27835  011892  0012               	return	
 27836  011894  0E50               	movlw	80
 27837  011896  0012               	return	
 27838  011898  0E6D               	movlw	109
 27839  01189A  0012               	return	
 27840  01189C  0E78               	movlw	120
 27841  01189E  0012               	return	
 27842  0118A0  0E1C               	movlw	28
 27843  0118A2  0012               	return	
 27844  0118A4  0E62               	movlw	98
 27845  0118A6  0012               	return	
 27846  0118A8  0E2A               	movlw	42
 27847  0118AA  0012               	return	
 27848  0118AC  0E64               	movlw	100
 27849  0118AE  0012               	return	
 27850  0118B0  0E6E               	movlw	110
 27851  0118B2  0012               	return	
 27852  0118B4  0E5B               	movlw	91
 27853  0118B6  0012               	return	
 27854  0118B8  0E77               	movlw	119
 27855  0118BA  0012               	return	
 27856  0118BC  0E7F               	movlw	127
 27857  0118BE  0012               	return	
 27858  0118C0  0E39               	movlw	57
 27859  0118C2  0012               	return	
 27860  0118C4  0E3F               	movlw	63
 27861  0118C6  0012               	return	
 27862  0118C8  0E79               	movlw	121
 27863  0118CA  0012               	return	
 27864  0118CC  0E71               	movlw	113
 27865  0118CE  0012               	return	
 27866  0118D0  0E3D               	movlw	61
 27867  0118D2  0012               	return	
 27868  0118D4  0E76               	movlw	118
 27869  0118D6  0012               	return	
 27870  0118D8  0E06               	movlw	6
 27871  0118DA  0012               	return	
 27872  0118DC  0E1E               	movlw	30
 27873  0118DE  0012               	return	
 27874  0118E0  0E57               	movlw	87
 27875  0118E2  0012               	return	
 27876  0118E4  0E38               	movlw	56
 27877  0118E6  0012               	return	
 27878  0118E8  0E76               	movlw	118
 27879  0118EA  0012               	return	
 27880  0118EC  0E76               	movlw	118
 27881  0118EE  0012               	return	
 27882  0118F0  0E3F               	movlw	63
 27883  0118F2  0012               	return	
 27884  0118F4  0E73               	movlw	115
 27885  0118F6  0012               	return	
 27886  0118F8  0E3F               	movlw	63
 27887  0118FA  0012               	return	
 27888  0118FC  0E77               	movlw	119
 27889  0118FE  0012               	return	
 27890  011900  0E6D               	movlw	109
 27891  011902  0012               	return	
 27892  011904  0E31               	movlw	49
 27893  011906  0012               	return	
 27894  011908  0E3E               	movlw	62
 27895  01190A  0012               	return	
 27896  01190C  0E3E               	movlw	62
 27897  01190E  0012               	return	
 27898  011910  0E7E               	movlw	126
 27899  011912  0012               	return	
 27900  011914  0E76               	movlw	118
 27901  011916  0012               	return	
 27902  011918  0E66               	movlw	102
 27903  01191A  0012               	return	
 27904  01191C  0E5B               	movlw	91
 27905  01191E  0012               	return	
 27906  011920  0E80               	movlw	128
 27907  011922  0012               	return	
 27908  011924                     l853:
 27909  011924  0100               	movlb	0	; () banked
 27910  011926  51BA               	movf	ToSegment@pCHR& (0+255),w,b
 27911                           
 27912                           ; Switch size 1, requested type "space"
 27913                           ; Number of cases is 63, Range of values is 46 to 122
 27914                           ; switch strategies available:
 27915                           ; Name         Instructions Cycles
 27916                           ; simple_byte          190    96 (average)
 27917                           ;	Chosen strategy is simple_byte
 27918  011928  0A2E               	xorlw	46	; case 46
 27919  01192A  B4D8               	btfsc	status,2,c
 27920  01192C  D7F9               	goto	l917
 27921  01192E  0A1E               	xorlw	30	; case 48
 27922  011930  B4D8               	btfsc	status,2,c
 27923  011932  D77A               	goto	l854
 27924  011934  0A01               	xorlw	1	; case 49
 27925  011936  B4D8               	btfsc	status,2,c
 27926  011938  D779               	goto	l856
 27927  01193A  0A03               	xorlw	3	; case 50
 27928  01193C  B4D8               	btfsc	status,2,c
 27929  01193E  D778               	goto	l857
 27930  011940  0A01               	xorlw	1	; case 51
 27931  011942  B4D8               	btfsc	status,2,c
 27932  011944  D777               	goto	l858
 27933  011946  0A07               	xorlw	7	; case 52
 27934  011948  B4D8               	btfsc	status,2,c
 27935  01194A  D776               	goto	l859
 27936  01194C  0A01               	xorlw	1	; case 53
 27937  01194E  B4D8               	btfsc	status,2,c
 27938  011950  D775               	goto	l860
 27939  011952  0A03               	xorlw	3	; case 54
 27940  011954  B4D8               	btfsc	status,2,c
 27941  011956  D774               	goto	l861
 27942  011958  0A01               	xorlw	1	; case 55
 27943  01195A  B4D8               	btfsc	status,2,c
 27944  01195C  D773               	goto	l862
 27945  01195E  0A0F               	xorlw	15	; case 56
 27946  011960  B4D8               	btfsc	status,2,c
 27947  011962  D772               	goto	l863
 27948  011964  0A01               	xorlw	1	; case 57
 27949  011966  B4D8               	btfsc	status,2,c
 27950  011968  D771               	goto	l864
 27951  01196A  0A78               	xorlw	120	; case 65
 27952  01196C  B4D8               	btfsc	status,2,c
 27953  01196E  D7A4               	goto	l891
 27954  011970  0A03               	xorlw	3	; case 66
 27955  011972  B4D8               	btfsc	status,2,c
 27956  011974  D7A3               	goto	l892
 27957  011976  0A01               	xorlw	1	; case 67
 27958  011978  B4D8               	btfsc	status,2,c
 27959  01197A  D7A2               	goto	l893
 27960  01197C  0A07               	xorlw	7	; case 68
 27961  01197E  B4D8               	btfsc	status,2,c
 27962  011980  D7A1               	goto	l894
 27963  011982  0A01               	xorlw	1	; case 69
 27964  011984  B4D8               	btfsc	status,2,c
 27965  011986  D7A0               	goto	l895
 27966  011988  0A03               	xorlw	3	; case 70
 27967  01198A  B4D8               	btfsc	status,2,c
 27968  01198C  D79F               	goto	l896
 27969  01198E  0A01               	xorlw	1	; case 71
 27970  011990  B4D8               	btfsc	status,2,c
 27971  011992  D79E               	goto	l897
 27972  011994  0A0F               	xorlw	15	; case 72
 27973  011996  B4D8               	btfsc	status,2,c
 27974  011998  D79D               	goto	l898
 27975  01199A  0A01               	xorlw	1	; case 73
 27976  01199C  B4D8               	btfsc	status,2,c
 27977  01199E  D79C               	goto	l899
 27978  0119A0  0A03               	xorlw	3	; case 74
 27979  0119A2  B4D8               	btfsc	status,2,c
 27980  0119A4  D79B               	goto	l900
 27981  0119A6  0A01               	xorlw	1	; case 75
 27982  0119A8  B4D8               	btfsc	status,2,c
 27983  0119AA  D79A               	goto	l901
 27984  0119AC  0A07               	xorlw	7	; case 76
 27985  0119AE  B4D8               	btfsc	status,2,c
 27986  0119B0  D799               	goto	l902
 27987  0119B2  0A01               	xorlw	1	; case 77
 27988  0119B4  B4D8               	btfsc	status,2,c
 27989  0119B6  D798               	goto	l903
 27990  0119B8  0A03               	xorlw	3	; case 78
 27991  0119BA  B4D8               	btfsc	status,2,c
 27992  0119BC  D797               	goto	l904
 27993  0119BE  0A01               	xorlw	1	; case 79
 27994  0119C0  B4D8               	btfsc	status,2,c
 27995  0119C2  D796               	goto	l905
 27996  0119C4  0A1F               	xorlw	31	; case 80
 27997  0119C6  B4D8               	btfsc	status,2,c
 27998  0119C8  D795               	goto	l906
 27999  0119CA  0A01               	xorlw	1	; case 81
 28000  0119CC  B4D8               	btfsc	status,2,c
 28001  0119CE  D794               	goto	l907
 28002  0119D0  0A03               	xorlw	3	; case 82
 28003  0119D2  B4D8               	btfsc	status,2,c
 28004  0119D4  D793               	goto	l908
 28005  0119D6  0A01               	xorlw	1	; case 83
 28006  0119D8  B4D8               	btfsc	status,2,c
 28007  0119DA  D792               	goto	l909
 28008  0119DC  0A07               	xorlw	7	; case 84
 28009  0119DE  B4D8               	btfsc	status,2,c
 28010  0119E0  D791               	goto	l910
 28011  0119E2  0A01               	xorlw	1	; case 85
 28012  0119E4  B4D8               	btfsc	status,2,c
 28013  0119E6  D790               	goto	l911
 28014  0119E8  0A03               	xorlw	3	; case 86
 28015  0119EA  B4D8               	btfsc	status,2,c
 28016  0119EC  D78F               	goto	l912
 28017  0119EE  0A01               	xorlw	1	; case 87
 28018  0119F0  B4D8               	btfsc	status,2,c
 28019  0119F2  D78E               	goto	l913
 28020  0119F4  0A0F               	xorlw	15	; case 88
 28021  0119F6  B4D8               	btfsc	status,2,c
 28022  0119F8  D78D               	goto	l914
 28023  0119FA  0A01               	xorlw	1	; case 89
 28024  0119FC  B4D8               	btfsc	status,2,c
 28025  0119FE  D78C               	goto	l915
 28026  011A00  0A03               	xorlw	3	; case 90
 28027  011A02  B4D8               	btfsc	status,2,c
 28028  011A04  D78B               	goto	l916
 28029  011A06  0A3B               	xorlw	59	; case 97
 28030  011A08  B4D8               	btfsc	status,2,c
 28031  011A0A  D722               	goto	l865
 28032  011A0C  0A03               	xorlw	3	; case 98
 28033  011A0E  B4D8               	btfsc	status,2,c
 28034  011A10  D721               	goto	l866
 28035  011A12  0A01               	xorlw	1	; case 99
 28036  011A14  B4D8               	btfsc	status,2,c
 28037  011A16  D720               	goto	l867
 28038  011A18  0A07               	xorlw	7	; case 100
 28039  011A1A  B4D8               	btfsc	status,2,c
 28040  011A1C  D71F               	goto	l868
 28041  011A1E  0A01               	xorlw	1	; case 101
 28042  011A20  B4D8               	btfsc	status,2,c
 28043  011A22  D71E               	goto	l869
 28044  011A24  0A03               	xorlw	3	; case 102
 28045  011A26  B4D8               	btfsc	status,2,c
 28046  011A28  D71D               	goto	l870
 28047  011A2A  0A01               	xorlw	1	; case 103
 28048  011A2C  B4D8               	btfsc	status,2,c
 28049  011A2E  D71C               	goto	l871
 28050  011A30  0A0F               	xorlw	15	; case 104
 28051  011A32  B4D8               	btfsc	status,2,c
 28052  011A34  D71B               	goto	l872
 28053  011A36  0A01               	xorlw	1	; case 105
 28054  011A38  B4D8               	btfsc	status,2,c
 28055  011A3A  D71A               	goto	l873
 28056  011A3C  0A03               	xorlw	3	; case 106
 28057  011A3E  B4D8               	btfsc	status,2,c
 28058  011A40  D719               	goto	l874
 28059  011A42  0A01               	xorlw	1	; case 107
 28060  011A44  B4D8               	btfsc	status,2,c
 28061  011A46  D718               	goto	l875
 28062  011A48  0A07               	xorlw	7	; case 108
 28063  011A4A  B4D8               	btfsc	status,2,c
 28064  011A4C  D717               	goto	l876
 28065  011A4E  0A01               	xorlw	1	; case 109
 28066  011A50  B4D8               	btfsc	status,2,c
 28067  011A52  D716               	goto	l877
 28068  011A54  0A03               	xorlw	3	; case 110
 28069  011A56  B4D8               	btfsc	status,2,c
 28070  011A58  D715               	goto	l878
 28071  011A5A  0A01               	xorlw	1	; case 111
 28072  011A5C  B4D8               	btfsc	status,2,c
 28073  011A5E  D714               	goto	l879
 28074  011A60  0A1F               	xorlw	31	; case 112
 28075  011A62  B4D8               	btfsc	status,2,c
 28076  011A64  D713               	goto	l880
 28077  011A66  0A01               	xorlw	1	; case 113
 28078  011A68  B4D8               	btfsc	status,2,c
 28079  011A6A  D712               	goto	l881
 28080  011A6C  0A03               	xorlw	3	; case 114
 28081  011A6E  B4D8               	btfsc	status,2,c
 28082  011A70  D711               	goto	l882
 28083  011A72  0A01               	xorlw	1	; case 115
 28084  011A74  B4D8               	btfsc	status,2,c
 28085  011A76  D710               	goto	l883
 28086  011A78  0A07               	xorlw	7	; case 116
 28087  011A7A  B4D8               	btfsc	status,2,c
 28088  011A7C  D70F               	goto	l884
 28089  011A7E  0A01               	xorlw	1	; case 117
 28090  011A80  B4D8               	btfsc	status,2,c
 28091  011A82  D70E               	goto	l885
 28092  011A84  0A03               	xorlw	3	; case 118
 28093  011A86  B4D8               	btfsc	status,2,c
 28094  011A88  D70D               	goto	l886
 28095  011A8A  0A01               	xorlw	1	; case 119
 28096  011A8C  B4D8               	btfsc	status,2,c
 28097  011A8E  D70C               	goto	l887
 28098  011A90  0A0F               	xorlw	15	; case 120
 28099  011A92  B4D8               	btfsc	status,2,c
 28100  011A94  D70B               	goto	l888
 28101  011A96  0A01               	xorlw	1	; case 121
 28102  011A98  B4D8               	btfsc	status,2,c
 28103  011A9A  D70A               	goto	l889
 28104  011A9C  0A03               	xorlw	3	; case 122
 28105  011A9E  B4D8               	btfsc	status,2,c
 28106  011AA0  D709               	goto	l890
 28107                           
 28108                           ;Types.c: 354: return 0;
 28109                           
 28110                           ; BSR set to: 0
 28111  011AA2  0E00               	movlw	0
 28112  011AA4  0012               	return	
 28113  011AA6                     __end_of_ToSegment:
 28114                           	opt stack 0
 28115                           tosu	equ	0xFFF
 28116                           tosh	equ	0xFFE
 28117                           tosl	equ	0xFFD
 28118                           pclath	equ	0xFFA
 28119                           tblptru	equ	0xFF8
 28120                           tblptrh	equ	0xFF7
 28121                           tblptrl	equ	0xFF6
 28122                           tablat	equ	0xFF5
 28123                           prodh	equ	0xFF4
 28124                           prodl	equ	0xFF3
 28125                           intcon	equ	0xFF2
 28126                           postinc0	equ	0xFEE
 28127                           wreg	equ	0xFE8
 28128                           indf1	equ	0xFE7
 28129                           postdec1	equ	0xFE5
 28130                           fsr1h	equ	0xFE2
 28131                           fsr1l	equ	0xFE1
 28132                           indf2	equ	0xFDF
 28133                           postinc2	equ	0xFDE
 28134                           postdec2	equ	0xFDD
 28135                           plusw2	equ	0xFDB
 28136                           fsr2h	equ	0xFDA
 28137                           fsr2l	equ	0xFD9
 28138                           status	equ	0xFD8
 28139                           
 28140 ;; *************** function _HMI_SetButton *****************
 28141 ;; Defined at:
 28142 ;;		line 186 in file "HMI.c"
 28143 ;; Parameters:    Size  Location     Type
 28144 ;;  pValue          1    wreg     unsigned char 
 28145 ;; Auto vars:     Size  Location     Type
 28146 ;;  pValue          1    6[BANK0 ] unsigned char 
 28147 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 28148 ;;  v               1    7[BANK0 ] unsigned char 
 28149 ;; Return value:  Size  Location     Type
 28150 ;;                  1    wreg      void 
 28151 ;; Registers used:
 28152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28153 ;; Tracked objects:
 28154 ;;		On entry : 0/0
 28155 ;;		On exit  : 0/0
 28156 ;;		Unchanged: 0/0
 28157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28159 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28160 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28161 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28162 ;;Total ram usage:        8 bytes
 28163 ;; Hardware stack levels used:    1
 28164 ;; Hardware stack levels required when called:    7
 28165 ;; This function calls:
 28166 ;;		Nothing
 28167 ;; This function is called by:
 28168 ;;		_Event_TestButton
 28169 ;; This function uses a non-reentrant model
 28170 ;;
 28171                           
 28172                           	psect	text147
 28173  014D6C                     __ptext147:
 28174                           	opt stack 0
 28175  014D6C                     _HMI_SetButton:
 28176                           	opt stack 18
 28177                           
 28178                           ;incstack = 0
 28179                           ;HMI_SetButton@pValue stored from wreg
 28180  014D6C  0100               	movlb	0	; () banked
 28181  014D6E  6FC0               	movwf	HMI_SetButton@pValue& (0+255),b
 28182                           
 28183                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 28184  014D70  0E18               	movlw	low HMI_SetButton@F7213
 28185  014D72  6EF6               	movwf	tblptrl,c
 28186  014D74                     	if	1	;There is more than 1 active tblptr byte
 28187  014D74  0EFD               	movlw	high HMI_SetButton@F7213
 28188  014D76  6EF7               	movwf	tblptrh,c
 28189  014D78                     	endif
 28190  014D78                     	if	1	;There are 3 active tblptr bytes
 28191  014D78  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 28192  014D7A  6EF8               	movwf	tblptru,c
 28193  014D7C                     	endif
 28194  014D7C  0009               	tblrd		*+
 28195  014D7E  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex
 28196  014D82  0009               	tblrd		*+
 28197  014D84  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+1
 28198  014D88  0009               	tblrd		*+
 28199  014D8A  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+2
 28200  014D8E  000A               	tblrd		*-
 28201  014D90  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+3
 28202                           
 28203                           ;HMI.c: 189: UINT8 v = 0b00010001;
 28204  014D94  0E11               	movlw	17
 28205  014D96  0100               	movlb	0	; () banked
 28206  014D98  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28207                           
 28208                           ; BSR set to: 0
 28209                           ;HMI.c: 190: pValue &= 3;
 28210  014D9A  0E03               	movlw	3
 28211  014D9C  0100               	movlb	0	; () banked
 28212  014D9E  17C0               	andwf	HMI_SetButton@pValue& (0+255),f,b
 28213                           
 28214                           ; BSR set to: 0
 28215                           ;HMI.c: 191: v = v << reindex[pValue];
 28216  014DA0  0100               	movlb	0	; () banked
 28217  014DA2  51C0               	movf	HMI_SetButton@pValue& (0+255),w,b
 28218  014DA4  0D01               	mullw	1
 28219  014DA6  0EBC               	movlw	low HMI_SetButton@reindex
 28220  014DA8  24F3               	addwf	prodl,w,c
 28221  014DAA  6ED9               	movwf	fsr2l,c
 28222  014DAC  0E00               	movlw	high HMI_SetButton@reindex
 28223  014DAE  20F4               	addwfc	prodh,w,c
 28224  014DB0  6EDA               	movwf	fsr2h,c
 28225  014DB2  50DF               	movf	indf2,w,c
 28226  014DB4  0100               	movlb	0	; () banked
 28227  014DB6  6FBA               	movwf	??_HMI_SetButton& (0+255),b
 28228  014DB8  C0C1  F0BB         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 28229  014DBC  0100               	movlb	0	; () banked
 28230  014DBE  2BBA               	incf	??_HMI_SetButton& (0+255),f,b
 28231  014DC0  D003               	goto	u9314
 28232  014DC2                     u9315:
 28233  014DC2  0100               	movlb	0	; () banked
 28234  014DC4  90D8               	bcf	status,0,c
 28235  014DC6  37BB               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 28236  014DC8                     u9314:
 28237  014DC8  0100               	movlb	0	; () banked
 28238  014DCA  2FBA               	decfsz	??_HMI_SetButton& (0+255),f,b
 28239  014DCC  D7FA               	goto	u9315
 28240  014DCE  0100               	movlb	0	; () banked
 28241  014DD0  51BB               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 28242  014DD2  0100               	movlb	0	; () banked
 28243  014DD4  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28244                           
 28245                           ; BSR set to: 0
 28246                           ;HMI.c: 192: v = v >> 4;
 28247  014DD6  0100               	movlb	0	; () banked
 28248  014DD8  39C1               	swapf	HMI_SetButton@v& (0+255),w,b
 28249  014DDA  0B0F               	andlw	15
 28250  014DDC  0100               	movlb	0	; () banked
 28251  014DDE  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28252                           
 28253                           ; BSR set to: 0
 28254                           ;HMI.c: 193: v = v & 0x0F;
 28255  014DE0  0100               	movlb	0	; () banked
 28256  014DE2  51C1               	movf	HMI_SetButton@v& (0+255),w,b
 28257  014DE4  0B0F               	andlw	15
 28258  014DE6  0100               	movlb	0	; () banked
 28259  014DE8  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28260                           
 28261                           ; BSR set to: 0
 28262                           ;HMI.c: 194: HMIBoard.pButton = v;
 28263  014DEA  0103               	movlb	3	; () banked
 28264  014DEC  5146               	movf	(_HMIBoard+6)& (0+255),w,b
 28265  014DEE  0100               	movlb	0	; () banked
 28266  014DF0  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28267  014DF2  0BF0               	andlw	-16
 28268  014DF4  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28269  014DF6  0103               	movlb	3	; () banked
 28270  014DF8  6F46               	movwf	(_HMIBoard+6)& (0+255),b
 28271                           
 28272                           ; BSR set to: 3
 28273  014DFA  0012               	return		;funcret
 28274  014DFC                     __end_of_HMI_SetButton:
 28275                           	opt stack 0
 28276                           tosu	equ	0xFFF
 28277                           tosh	equ	0xFFE
 28278                           tosl	equ	0xFFD
 28279                           pclath	equ	0xFFA
 28280                           tblptru	equ	0xFF8
 28281                           tblptrh	equ	0xFF7
 28282                           tblptrl	equ	0xFF6
 28283                           tablat	equ	0xFF5
 28284                           prodh	equ	0xFF4
 28285                           prodl	equ	0xFF3
 28286                           intcon	equ	0xFF2
 28287                           postinc0	equ	0xFEE
 28288                           wreg	equ	0xFE8
 28289                           indf1	equ	0xFE7
 28290                           postdec1	equ	0xFE5
 28291                           fsr1h	equ	0xFE2
 28292                           fsr1l	equ	0xFE1
 28293                           indf2	equ	0xFDF
 28294                           postinc2	equ	0xFDE
 28295                           postdec2	equ	0xFDD
 28296                           plusw2	equ	0xFDB
 28297                           fsr2h	equ	0xFDA
 28298                           fsr2l	equ	0xFD9
 28299                           status	equ	0xFD8
 28300                           
 28301 ;; *************** function _LED_Toggle *****************
 28302 ;; Defined at:
 28303 ;;		line 50 in file "Library/LED.c"
 28304 ;; Parameters:    Size  Location     Type
 28305 ;;  pLED            1    wreg     enum E6739
 28306 ;; Auto vars:     Size  Location     Type
 28307 ;;  pLED            1   24[BANK0 ] enum E6739
 28308 ;; Return value:  Size  Location     Type
 28309 ;;                  1    wreg      void 
 28310 ;; Registers used:
 28311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28312 ;; Tracked objects:
 28313 ;;		On entry : 0/0
 28314 ;;		On exit  : 0/0
 28315 ;;		Unchanged: 0/0
 28316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28320 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28321 ;;Total ram usage:        1 bytes
 28322 ;; Hardware stack levels used:    1
 28323 ;; Hardware stack levels required when called:   12
 28324 ;; This function calls:
 28325 ;;		_Port_TogglePin
 28326 ;; This function is called by:
 28327 ;;		_LCD_Reset
 28328 ;;		_Event_DIPSwitch
 28329 ;;		_Event_TestButton
 28330 ;;		_Event_ADCSequenceComplete
 28331 ;;		_Event_HMI_DIPSwitch
 28332 ;;		_Event_HMI_LeftButton
 28333 ;;		_Event_HMI_RightButton
 28334 ;;		_Event_HMI_UpButton
 28335 ;;		_Event_HMI_DownButton
 28336 ;; This function uses a non-reentrant model
 28337 ;;
 28338                           
 28339                           	psect	text148
 28340  015DA8                     __ptext148:
 28341                           	opt stack 0
 28342  015DA8                     _LED_Toggle:
 28343                           	opt stack 13
 28344                           
 28345                           ; BSR set to: 3
 28346                           ;incstack = 0
 28347                           ;LED_Toggle@pLED stored from wreg
 28348  015DA8  0100               	movlb	0	; () banked
 28349  015DAA  6FD2               	movwf	LED_Toggle@pLED& (0+255),b
 28350                           
 28351                           ;LED.c: 52: switch (pLED)
 28352  015DAC  D018               	goto	l234
 28353  015DAE                     
 28354                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 28355  015DAE  0EA5               	movlw	low _PortC
 28356  015DB0  0100               	movlb	0	; () banked
 28357  015DB2  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28358  015DB4  0E00               	movlw	high _PortC
 28359  015DB6  0100               	movlb	0	; () banked
 28360  015DB8  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28361  015DBA  0E00               	movlw	0
 28362  015DBC  0100               	movlb	0	; () banked
 28363  015DBE  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28364  015DC0  EC39  F0B1         	call	_Port_TogglePin	;wreg free
 28365                           
 28366                           ;LED.c: 56: break;
 28367  015DC4  0012               	return	
 28368  015DC6                     
 28369                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 28370  015DC6  0EA5               	movlw	low _PortC
 28371  015DC8  0100               	movlb	0	; () banked
 28372  015DCA  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28373  015DCC  0E00               	movlw	high _PortC
 28374  015DCE  0100               	movlb	0	; () banked
 28375  015DD0  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28376  015DD2  0E01               	movlw	1
 28377  015DD4  0100               	movlb	0	; () banked
 28378  015DD6  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28379  015DD8  EC39  F0B1         	call	_Port_TogglePin	;wreg free
 28380                           
 28381                           ;LED.c: 60: }
 28382                           
 28383                           ;LED.c: 59: break;
 28384  015DDC  0012               	return	
 28385  015DDE                     l234:
 28386  015DDE  0100               	movlb	0	; () banked
 28387  015DE0  51D2               	movf	LED_Toggle@pLED& (0+255),w,b
 28388                           
 28389                           ; Switch size 1, requested type "space"
 28390                           ; Number of cases is 2, Range of values is 0 to 1
 28391                           ; switch strategies available:
 28392                           ; Name         Instructions Cycles
 28393                           ; simple_byte            7     4 (average)
 28394                           ;	Chosen strategy is simple_byte
 28395  015DE2  0A00               	xorlw	0	; case 0
 28396  015DE4  B4D8               	btfsc	status,2,c
 28397  015DE6  D7E3               	goto	l235
 28398  015DE8  0A01               	xorlw	1	; case 1
 28399  015DEA  A4D8               	btfss	status,2,c
 28400  015DEC  0012               	return	
 28401  015DEE  D7EB               	goto	l237
 28402  015DF0                     __end_of_LED_Toggle:
 28403                           	opt stack 0
 28404                           tosu	equ	0xFFF
 28405                           tosh	equ	0xFFE
 28406                           tosl	equ	0xFFD
 28407                           pclath	equ	0xFFA
 28408                           tblptru	equ	0xFF8
 28409                           tblptrh	equ	0xFF7
 28410                           tblptrl	equ	0xFF6
 28411                           tablat	equ	0xFF5
 28412                           prodh	equ	0xFF4
 28413                           prodl	equ	0xFF3
 28414                           intcon	equ	0xFF2
 28415                           postinc0	equ	0xFEE
 28416                           wreg	equ	0xFE8
 28417                           indf1	equ	0xFE7
 28418                           postdec1	equ	0xFE5
 28419                           fsr1h	equ	0xFE2
 28420                           fsr1l	equ	0xFE1
 28421                           indf2	equ	0xFDF
 28422                           postinc2	equ	0xFDE
 28423                           postdec2	equ	0xFDD
 28424                           plusw2	equ	0xFDB
 28425                           fsr2h	equ	0xFDA
 28426                           fsr2l	equ	0xFD9
 28427                           status	equ	0xFD8
 28428                           
 28429 ;; *************** function _Port_TogglePin *****************
 28430 ;; Defined at:
 28431 ;;		line 278 in file "Library/Port.c"
 28432 ;; Parameters:    Size  Location     Type
 28433 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 28434 ;;		 -> PortC(10), 
 28435 ;;  pPin            1   22[BANK0 ] enum E6750
 28436 ;; Auto vars:     Size  Location     Type
 28437 ;;  Value           1   23[BANK0 ] unsigned char 
 28438 ;; Return value:  Size  Location     Type
 28439 ;;                  1    wreg      void 
 28440 ;; Registers used:
 28441 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28442 ;; Tracked objects:
 28443 ;;		On entry : 0/0
 28444 ;;		On exit  : 0/0
 28445 ;;		Unchanged: 0/0
 28446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28447 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28450 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28451 ;;Total ram usage:        4 bytes
 28452 ;; Hardware stack levels used:    1
 28453 ;; Hardware stack levels required when called:   11
 28454 ;; This function calls:
 28455 ;;		_Port_GetPin
 28456 ;;		_Port_SetPin
 28457 ;; This function is called by:
 28458 ;;		_LED_Toggle
 28459 ;; This function uses a non-reentrant model
 28460 ;;
 28461                           
 28462                           	psect	text149
 28463  016272                     __ptext149:
 28464                           	opt stack 0
 28465  016272                     _Port_TogglePin:
 28466                           	opt stack 13
 28467                           
 28468                           ;Port.c: 280: UINT8 Value;
 28469                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 28470                           
 28471                           ;incstack = 0
 28472  016272  C0CE  F0BA         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 28473  016276  C0CF  F0BB         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 28474  01627A  C0D0  F0BC         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 28475  01627E  EC3E  F0AF         	call	_Port_GetPin	;wreg free
 28476  016282  0100               	movlb	0	; () banked
 28477  016284  6FD1               	movwf	Port_TogglePin@Value& (0+255),b
 28478                           
 28479                           ; BSR set to: 0
 28480                           ;Port.c: 282: Value ^= 0x01;
 28481  016286  0E01               	movlw	1
 28482  016288  0100               	movlb	0	; () banked
 28483  01628A  1BD1               	xorwf	Port_TogglePin@Value& (0+255),f,b
 28484                           
 28485                           ; BSR set to: 0
 28486                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 28487  01628C  C0CE  F0C9         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 28488  016290  C0CF  F0CA         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 28489  016294  C0D0  F0CB         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 28490  016298  C0D1  F0CC         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 28491  01629C  EC3C  F0A0         	call	_Port_SetPin	;wreg free
 28492  0162A0  0012               	return		;funcret
 28493  0162A2                     __end_of_Port_TogglePin:
 28494                           	opt stack 0
 28495                           tosu	equ	0xFFF
 28496                           tosh	equ	0xFFE
 28497                           tosl	equ	0xFFD
 28498                           pclath	equ	0xFFA
 28499                           tblptru	equ	0xFF8
 28500                           tblptrh	equ	0xFF7
 28501                           tblptrl	equ	0xFF6
 28502                           tablat	equ	0xFF5
 28503                           prodh	equ	0xFF4
 28504                           prodl	equ	0xFF3
 28505                           intcon	equ	0xFF2
 28506                           postinc0	equ	0xFEE
 28507                           wreg	equ	0xFE8
 28508                           indf1	equ	0xFE7
 28509                           postdec1	equ	0xFE5
 28510                           fsr1h	equ	0xFE2
 28511                           fsr1l	equ	0xFE1
 28512                           indf2	equ	0xFDF
 28513                           postinc2	equ	0xFDE
 28514                           postdec2	equ	0xFDD
 28515                           plusw2	equ	0xFDB
 28516                           fsr2h	equ	0xFDA
 28517                           fsr2l	equ	0xFD9
 28518                           status	equ	0xFD8
 28519                           
 28520 ;; *************** function _Port_SetPin *****************
 28521 ;; Defined at:
 28522 ;;		line 247 in file "Library/Port.c"
 28523 ;; Parameters:    Size  Location     Type
 28524 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 28525 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 28526 ;;  pPin            1   17[BANK0 ] enum E6750
 28527 ;;  pValue          1   18[BANK0 ] unsigned char 
 28528 ;; Auto vars:     Size  Location     Type
 28529 ;;  Type            1   19[BANK0 ] enum E6795
 28530 ;; Return value:  Size  Location     Type
 28531 ;;                  1    wreg      void 
 28532 ;; Registers used:
 28533 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28534 ;; Tracked objects:
 28535 ;;		On entry : 0/0
 28536 ;;		On exit  : 0/0
 28537 ;;		Unchanged: 0/0
 28538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28539 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28542 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28543 ;;Total ram usage:        5 bytes
 28544 ;; Hardware stack levels used:    1
 28545 ;; Hardware stack levels required when called:   10
 28546 ;; This function calls:
 28547 ;;		_Byte_SetBit
 28548 ;;		_Word_GetPair
 28549 ;; This function is called by:
 28550 ;;		_Reset_Low
 28551 ;;		_Reset_High
 28552 ;;		_LED_Set
 28553 ;;		_Port_TogglePin
 28554 ;;		_Motor_Init
 28555 ;;		_Motor_Step
 28556 ;;		_MXK_Init
 28557 ;; This function uses a non-reentrant model
 28558 ;;
 28559                           
 28560                           	psect	text150
 28561  014078                     __ptext150:
 28562                           	opt stack 0
 28563  014078                     _Port_SetPin:
 28564                           	opt stack 13
 28565                           
 28566                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28567                           
 28568                           ;incstack = 0
 28569  014078  0E08               	movlw	8
 28570  01407A  0100               	movlb	0	; () banked
 28571  01407C  25C9               	addwf	Port_SetPin@pInput& (0+255),w,b
 28572  01407E  0100               	movlb	0	; () banked
 28573  014080  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 28574  014082  0E00               	movlw	0
 28575  014084  0100               	movlb	0	; () banked
 28576  014086  21CA               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28577  014088  0100               	movlb	0	; () banked
 28578  01408A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28579  01408C  C0CB  F0C8         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28580  014090  EC41  F0B0         	call	_Word_GetPair	;wreg free
 28581  014094  0100               	movlb	0	; () banked
 28582  014096  6FCD               	movwf	Port_SetPin@Type& (0+255),b
 28583                           
 28584                           ;Port.c: 250: switch (Type)
 28585  014098  D042               	goto	l427
 28586  01409A                     
 28587                           ; BSR set to: 0
 28588                           ;Port.c: 256: pValue &= 1;
 28589                           
 28590                           ; BSR set to: 0
 28591  01409A  0E01               	movlw	1
 28592  01409C  0100               	movlb	0	; () banked
 28593  01409E  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28594                           
 28595                           ; BSR set to: 0
 28596                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28597  0140A0  0100               	movlb	0	; () banked
 28598  0140A2  EE20 F002          	lfsr	2,2
 28599  0140A6  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28600  0140A8  26D9               	addwf	fsr2l,f,c
 28601  0140AA  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28602  0140AC  22DA               	addwfc	fsr2h,f,c
 28603  0140AE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28604  0140B2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28605  0140B6  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28606  0140BA  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28607  0140BE  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 28608                           
 28609                           ;Port.c: 258: break;
 28610  0140C2  0012               	return	
 28611  0140C4                     
 28612                           ;Port.c: 261: pValue &= 1;
 28613  0140C4  0E01               	movlw	1
 28614  0140C6  0100               	movlb	0	; () banked
 28615  0140C8  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28616                           
 28617                           ;Port.c: 262: pValue ^= 1;
 28618  0140CA  0E01               	movlw	1
 28619  0140CC  0100               	movlb	0	; () banked
 28620  0140CE  1BCC               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28621                           
 28622                           ; BSR set to: 0
 28623                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28624  0140D0  0100               	movlb	0	; () banked
 28625  0140D2  EE20 F002          	lfsr	2,2
 28626  0140D6  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28627  0140D8  26D9               	addwf	fsr2l,f,c
 28628  0140DA  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28629  0140DC  22DA               	addwfc	fsr2h,f,c
 28630  0140DE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28631  0140E2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28632  0140E6  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28633  0140EA  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28634  0140EE  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 28635                           
 28636                           ;Port.c: 264: break;
 28637  0140F2  0012               	return	
 28638  0140F4                     
 28639                           ;Port.c: 266: pValue &= 1;
 28640  0140F4  0E01               	movlw	1
 28641  0140F6  0100               	movlb	0	; () banked
 28642  0140F8  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28643                           
 28644                           ; BSR set to: 0
 28645                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28646  0140FA  0100               	movlb	0	; () banked
 28647  0140FC  EE20 F004          	lfsr	2,4
 28648  014100  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28649  014102  26D9               	addwf	fsr2l,f,c
 28650  014104  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28651  014106  22DA               	addwfc	fsr2h,f,c
 28652  014108  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28653  01410C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28654  014110  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28655  014114  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28656  014118  EC5C  F0AC         	call	_Byte_SetBit	;wreg free
 28657                           
 28658                           ;Port.c: 269: }
 28659                           
 28660                           ;Port.c: 268: break;
 28661  01411C  0012               	return	
 28662  01411E                     l427:
 28663  01411E  0100               	movlb	0	; () banked
 28664  014120  51CD               	movf	Port_SetPin@Type& (0+255),w,b
 28665                           
 28666                           ; Switch size 1, requested type "space"
 28667                           ; Number of cases is 4, Range of values is 0 to 3
 28668                           ; switch strategies available:
 28669                           ; Name         Instructions Cycles
 28670                           ; simple_byte           13     7 (average)
 28671                           ;	Chosen strategy is simple_byte
 28672  014122  0A00               	xorlw	0	; case 0
 28673  014124  B4D8               	btfsc	status,2,c
 28674  014126  0012               	return	
 28675  014128  0A01               	xorlw	1	; case 1
 28676  01412A  B4D8               	btfsc	status,2,c
 28677  01412C  D7B6               	goto	l430
 28678  01412E  0A03               	xorlw	3	; case 2
 28679  014130  B4D8               	btfsc	status,2,c
 28680  014132  D7C8               	goto	l432
 28681  014134  0A01               	xorlw	1	; case 3
 28682  014136  A4D8               	btfss	status,2,c
 28683  014138  0012               	return	
 28684  01413A  D7DC               	goto	l433
 28685  01413C                     __end_of_Port_SetPin:
 28686                           	opt stack 0
 28687                           tosu	equ	0xFFF
 28688                           tosh	equ	0xFFE
 28689                           tosl	equ	0xFFD
 28690                           pclath	equ	0xFFA
 28691                           tblptru	equ	0xFF8
 28692                           tblptrh	equ	0xFF7
 28693                           tblptrl	equ	0xFF6
 28694                           tablat	equ	0xFF5
 28695                           prodh	equ	0xFF4
 28696                           prodl	equ	0xFF3
 28697                           intcon	equ	0xFF2
 28698                           postinc0	equ	0xFEE
 28699                           wreg	equ	0xFE8
 28700                           indf1	equ	0xFE7
 28701                           postdec1	equ	0xFE5
 28702                           fsr1h	equ	0xFE2
 28703                           fsr1l	equ	0xFE1
 28704                           indf2	equ	0xFDF
 28705                           postinc2	equ	0xFDE
 28706                           postdec2	equ	0xFDD
 28707                           plusw2	equ	0xFDB
 28708                           fsr2h	equ	0xFDA
 28709                           fsr2l	equ	0xFD9
 28710                           status	equ	0xFD8
 28711                           
 28712 ;; *************** function _Word_GetPair *****************
 28713 ;; Defined at:
 28714 ;;		line 156 in file "Library/Types.c"
 28715 ;; Parameters:    Size  Location     Type
 28716 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28717 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28718 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28719 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28720 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28721 ;;  pPair           1   14[BANK0 ] unsigned char 
 28722 ;; Auto vars:     Size  Location     Type
 28723 ;;		None
 28724 ;; Return value:  Size  Location     Type
 28725 ;;                  1    wreg      unsigned char 
 28726 ;; Registers used:
 28727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28728 ;; Tracked objects:
 28729 ;;		On entry : 0/0
 28730 ;;		On exit  : 0/0
 28731 ;;		Unchanged: 0/0
 28732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28733 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28737 ;;Total ram usage:        3 bytes
 28738 ;; Hardware stack levels used:    1
 28739 ;; Hardware stack levels required when called:    9
 28740 ;; This function calls:
 28741 ;;		_Byte_GetPair
 28742 ;; This function is called by:
 28743 ;;		_Port_Init
 28744 ;;		_Port_SetPin
 28745 ;;		_Port_Set
 28746 ;;		_PortProperty_Valid
 28747 ;;		_Port_SetPair
 28748 ;;		_Port_SetQuad
 28749 ;; This function uses a non-reentrant model
 28750 ;;
 28751                           
 28752                           	psect	text151
 28753  016082                     __ptext151:
 28754                           	opt stack 0
 28755  016082                     _Word_GetPair:
 28756                           	opt stack 13
 28757                           
 28758                           ;Types.c: 158: if (pPair >= 4)
 28759                           
 28760                           ;incstack = 0
 28761  016082  0E03               	movlw	3
 28762  016084  0100               	movlb	0	; () banked
 28763  016086  65C8               	cpfsgt	Word_GetPair@pPair& (0+255),b
 28764  016088  D012               	goto	l781
 28765                           
 28766                           ; BSR set to: 0
 28767                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28768  01608A  0E01               	movlw	1
 28769  01608C  0100               	movlb	0	; () banked
 28770  01608E  25C6               	addwf	Word_GetPair@pInput& (0+255),w,b
 28771  016090  0100               	movlb	0	; () banked
 28772  016092  6FC3               	movwf	Byte_GetPair@pInput& (0+255),b
 28773  016094  0E00               	movlw	0
 28774  016096  0100               	movlb	0	; () banked
 28775  016098  21C7               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 28776  01609A  0100               	movlb	0	; () banked
 28777  01609C  6FC4               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 28778  01609E  0100               	movlb	0	; () banked
 28779  0160A0  51C8               	movf	Word_GetPair@pPair& (0+255),w,b
 28780  0160A2  0FFC               	addlw	252
 28781  0160A4  0100               	movlb	0	; () banked
 28782  0160A6  6FC5               	movwf	Byte_GetPair@pPair& (0+255),b
 28783  0160A8  EC94  F0B2         	call	_Byte_GetPair	;wreg free
 28784  0160AC  0012               	return	
 28785  0160AE                     l781:
 28786                           
 28787                           ;Types.c: 160: else
 28788                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28789  0160AE  C0C6  F0C3         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 28790  0160B2  C0C7  F0C4         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 28791  0160B6  C0C8  F0C5         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 28792  0160BA  EC94  F0B2         	call	_Byte_GetPair	;wreg free
 28793  0160BE  0012               	return	
 28794  0160C0                     __end_of_Word_GetPair:
 28795                           	opt stack 0
 28796                           tosu	equ	0xFFF
 28797                           tosh	equ	0xFFE
 28798                           tosl	equ	0xFFD
 28799                           pclath	equ	0xFFA
 28800                           tblptru	equ	0xFF8
 28801                           tblptrh	equ	0xFF7
 28802                           tblptrl	equ	0xFF6
 28803                           tablat	equ	0xFF5
 28804                           prodh	equ	0xFF4
 28805                           prodl	equ	0xFF3
 28806                           intcon	equ	0xFF2
 28807                           postinc0	equ	0xFEE
 28808                           wreg	equ	0xFE8
 28809                           indf1	equ	0xFE7
 28810                           postdec1	equ	0xFE5
 28811                           fsr1h	equ	0xFE2
 28812                           fsr1l	equ	0xFE1
 28813                           indf2	equ	0xFDF
 28814                           postinc2	equ	0xFDE
 28815                           postdec2	equ	0xFDD
 28816                           plusw2	equ	0xFDB
 28817                           fsr2h	equ	0xFDA
 28818                           fsr2l	equ	0xFD9
 28819                           status	equ	0xFD8
 28820                           
 28821 ;; *************** function _Byte_GetPair *****************
 28822 ;; Defined at:
 28823 ;;		line 87 in file "Library/Types.c"
 28824 ;; Parameters:    Size  Location     Type
 28825 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 28826 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28827 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28828 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28829 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28830 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28831 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28832 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28833 ;;		 -> NULL(0), 
 28834 ;;  pPair           1   11[BANK0 ] unsigned char 
 28835 ;; Auto vars:     Size  Location     Type
 28836 ;;		None
 28837 ;; Return value:  Size  Location     Type
 28838 ;;                  1    wreg      unsigned char 
 28839 ;; Registers used:
 28840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28841 ;; Tracked objects:
 28842 ;;		On entry : 0/0
 28843 ;;		On exit  : 0/0
 28844 ;;		Unchanged: 0/0
 28845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28846 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28849 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28850 ;;Total ram usage:        3 bytes
 28851 ;; Hardware stack levels used:    1
 28852 ;; Hardware stack levels required when called:    8
 28853 ;; This function calls:
 28854 ;;		_Byte_GetZone
 28855 ;; This function is called by:
 28856 ;;		_Word_GetPair
 28857 ;; This function uses a non-reentrant model
 28858 ;;
 28859                           
 28860                           	psect	text152
 28861  016528                     __ptext152:
 28862                           	opt stack 0
 28863  016528                     _Byte_GetPair:
 28864                           	opt stack 13
 28865                           
 28866                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28867                           
 28868                           ;incstack = 0
 28869  016528  C0C3  F0BA         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 28870  01652C  C0C4  F0BB         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 28871  016530  0E04               	movlw	4
 28872  016532  0100               	movlb	0	; () banked
 28873  016534  6FBC               	movwf	Byte_GetZone@pMax& (0+255),b
 28874  016536  C0C5  F0BD         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 28875  01653A  0E02               	movlw	2
 28876  01653C  0100               	movlb	0	; () banked
 28877  01653E  6FBE               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 28878  016540  EC1C  F0A6         	call	_Byte_GetZone	;wreg free
 28879  016544  0012               	return	
 28880  016546                     __end_of_Byte_GetPair:
 28881                           	opt stack 0
 28882                           tosu	equ	0xFFF
 28883                           tosh	equ	0xFFE
 28884                           tosl	equ	0xFFD
 28885                           pclath	equ	0xFFA
 28886                           tblptru	equ	0xFF8
 28887                           tblptrh	equ	0xFF7
 28888                           tblptrl	equ	0xFF6
 28889                           tablat	equ	0xFF5
 28890                           prodh	equ	0xFF4
 28891                           prodl	equ	0xFF3
 28892                           intcon	equ	0xFF2
 28893                           postinc0	equ	0xFEE
 28894                           wreg	equ	0xFE8
 28895                           indf1	equ	0xFE7
 28896                           postdec1	equ	0xFE5
 28897                           fsr1h	equ	0xFE2
 28898                           fsr1l	equ	0xFE1
 28899                           indf2	equ	0xFDF
 28900                           postinc2	equ	0xFDE
 28901                           postdec2	equ	0xFDD
 28902                           plusw2	equ	0xFDB
 28903                           fsr2h	equ	0xFDA
 28904                           fsr2l	equ	0xFD9
 28905                           status	equ	0xFD8
 28906                           
 28907 ;; *************** function _Byte_GetZone *****************
 28908 ;; Defined at:
 28909 ;;		line 64 in file "Library/Types.c"
 28910 ;; Parameters:    Size  Location     Type
 28911 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28912 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28913 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28914 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28915 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28916 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28917 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28918 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28919 ;;		 -> NULL(0), 
 28920 ;;  pMax            1    2[BANK0 ] unsigned char 
 28921 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28922 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28923 ;; Auto vars:     Size  Location     Type
 28924 ;;  Output          1    8[BANK0 ] unsigned char 
 28925 ;;  Offset          1    7[BANK0 ] unsigned char 
 28926 ;;  MASK            1    6[BANK0 ] unsigned char 
 28927 ;; Return value:  Size  Location     Type
 28928 ;;                  1    wreg      unsigned char 
 28929 ;; Registers used:
 28930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28931 ;; Tracked objects:
 28932 ;;		On entry : 0/0
 28933 ;;		On exit  : 0/0
 28934 ;;		Unchanged: 0/0
 28935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28936 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28937 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28938 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28939 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28940 ;;Total ram usage:        9 bytes
 28941 ;; Hardware stack levels used:    1
 28942 ;; Hardware stack levels required when called:    7
 28943 ;; This function calls:
 28944 ;;		Nothing
 28945 ;; This function is called by:
 28946 ;;		_Byte_GetPair
 28947 ;;		_Byte_GetTriple
 28948 ;;		_Byte_GetQuad
 28949 ;; This function uses a non-reentrant model
 28950 ;;
 28951                           
 28952                           	psect	text153
 28953  014C38                     __ptext153:
 28954                           	opt stack 0
 28955  014C38                     _Byte_GetZone:
 28956                           	opt stack 13
 28957                           
 28958                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28959                           
 28960                           ;incstack = 0
 28961  014C38  C0BA  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 28962  014C3C  C0BB  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 28963  014C40  0E00               	movlw	low (__mediumconst shr (0+16))
 28964  014C42  6EF8               	movwf	tblptru,c
 28965  014C44  0E0F               	movlw	(high __ramtop+-1)
 28966  014C46  64F7               	cpfsgt	tblptrh,c
 28967  014C48  D003               	bra	u8727
 28968  014C4A  0008               	tblrd		*
 28969  014C4C  50F5               	movf	tablat,w,c
 28970  014C4E  D005               	bra	u8720
 28971  014C50                     u8727:
 28972  014C50  CFF6 FFE9          	movff	tblptrl,fsr0l
 28973  014C54  CFF7 FFEA          	movff	tblptrh,fsr0h
 28974  014C58  50EF               	movf	indf0,w,c
 28975  014C5A                     u8720:
 28976  014C5A  0100               	movlb	0	; () banked
 28977  014C5C  6FC2               	movwf	Byte_GetZone@Output& (0+255),b
 28978                           
 28979                           ; BSR set to: 0
 28980                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28981  014C5E  0100               	movlb	0	; () banked
 28982  014C60  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28983  014C62  0D01               	mullw	1
 28984  014C64  0E0F               	movlw	low _MASKS
 28985  014C66  24F3               	addwf	prodl,w,c
 28986  014C68  6EF6               	movwf	tblptrl,c
 28987  014C6A  0EFD               	movlw	high _MASKS
 28988  014C6C  20F4               	addwfc	prodh,w,c
 28989  014C6E  6EF7               	movwf	tblptrh,c
 28990  014C70                     	if	1	;There are 3 active tblptr bytes
 28991  014C70  6AF8               	clrf	tblptru,c
 28992  014C72  0E00               	movlw	low (__mediumconst shr (0+16))
 28993  014C74  22F8               	addwfc	tblptru,f,c
 28994  014C76                     	endif
 28995  014C76  0008               	tblrd		*
 28996  014C78  CFF5 F0C0          	movff	tablat,Byte_GetZone@MASK
 28997                           
 28998                           ; BSR set to: 0
 28999                           ;Types.c: 68: UINT8 Offset = 0;
 29000  014C7C  0E00               	movlw	0
 29001  014C7E  0100               	movlb	0	; () banked
 29002  014C80  6FC1               	movwf	Byte_GetZone@Offset& (0+255),b
 29003                           
 29004                           ;Types.c: 70: while (pChunk >= pMax)
 29005  014C82  D006               	goto	l732
 29006  014C84                     
 29007                           ; BSR set to: 0
 29008                           ;Types.c: 71: {
 29009                           ;Types.c: 72: pChunk -= pMax;
 29010                           
 29011                           ; BSR set to: 0
 29012  014C84  0100               	movlb	0	; () banked
 29013  014C86  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 29014  014C88  0100               	movlb	0	; () banked
 29015  014C8A  5FBD               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 29016                           
 29017                           ; BSR set to: 0
 29018                           ;Types.c: 73: Offset += 1;
 29019  014C8C  0100               	movlb	0	; () banked
 29020  014C8E  2BC1               	incf	Byte_GetZone@Offset& (0+255),f,b
 29021  014C90                     l732:
 29022                           
 29023                           ; BSR set to: 0
 29024                           
 29025                           ; BSR set to: 0
 29026  014C90  0100               	movlb	0	; () banked
 29027  014C92  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 29028  014C94  0100               	movlb	0	; () banked
 29029  014C96  5DBD               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 29030  014C98  B0D8               	btfsc	status,0,c
 29031  014C9A  D7F4               	goto	l733
 29032                           
 29033                           ; BSR set to: 0
 29034                           ;Types.c: 74: }
 29035                           ;Types.c: 75: pChunk *= pChunkSize;
 29036                           
 29037                           ; BSR set to: 0
 29038  014C9C  0100               	movlb	0	; () banked
 29039  014C9E  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 29040  014CA0  0100               	movlb	0	; () banked
 29041  014CA2  03BD               	mulwf	Byte_GetZone@pChunk& (0+255),b
 29042  014CA4  50F3               	movf	prodl,w,c
 29043  014CA6  6FBD               	movwf	Byte_GetZone@pChunk& (0+255),b
 29044                           
 29045                           ; BSR set to: 0
 29046                           ;Types.c: 76: pChunk += Offset;
 29047  014CA8  0100               	movlb	0	; () banked
 29048  014CAA  51C1               	movf	Byte_GetZone@Offset& (0+255),w,b
 29049  014CAC  0100               	movlb	0	; () banked
 29050  014CAE  27BD               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 29051                           
 29052                           ; BSR set to: 0
 29053                           ;Types.c: 78: Output >>= pChunk;
 29054  014CB0  0100               	movlb	0	; () banked
 29055  014CB2  29BD               	incf	Byte_GetZone@pChunk& (0+255),w,b
 29056  014CB4  0100               	movlb	0	; () banked
 29057  014CB6  6FBF               	movwf	??_Byte_GetZone& (0+255),b
 29058  014CB8  D003               	goto	u8740
 29059  014CBA                     u8745:
 29060  014CBA  0100               	movlb	0	; () banked
 29061  014CBC  90D8               	bcf	status,0,c
 29062  014CBE  33C2               	rrcf	Byte_GetZone@Output& (0+255),f,b
 29063  014CC0                     u8740:
 29064  014CC0  0100               	movlb	0	; () banked
 29065  014CC2  2FBF               	decfsz	??_Byte_GetZone& (0+255),f,b
 29066  014CC4  D7FA               	goto	u8745
 29067                           
 29068                           ;Types.c: 79: Output &= MASK;
 29069  014CC6  0100               	movlb	0	; () banked
 29070  014CC8  51C0               	movf	Byte_GetZone@MASK& (0+255),w,b
 29071  014CCA  0100               	movlb	0	; () banked
 29072  014CCC  17C2               	andwf	Byte_GetZone@Output& (0+255),f,b
 29073                           
 29074                           ; BSR set to: 0
 29075                           ;Types.c: 80: return Output;
 29076  014CCE  0100               	movlb	0	; () banked
 29077  014CD0  51C2               	movf	Byte_GetZone@Output& (0+255),w,b
 29078  014CD2  0012               	return	
 29079  014CD4                     __end_of_Byte_GetZone:
 29080                           	opt stack 0
 29081                           tosu	equ	0xFFF
 29082                           tosh	equ	0xFFE
 29083                           tosl	equ	0xFFD
 29084                           pclath	equ	0xFFA
 29085                           tblptru	equ	0xFF8
 29086                           tblptrh	equ	0xFF7
 29087                           tblptrl	equ	0xFF6
 29088                           tablat	equ	0xFF5
 29089                           prodh	equ	0xFF4
 29090                           prodl	equ	0xFF3
 29091                           intcon	equ	0xFF2
 29092                           indf0	equ	0xFEF
 29093                           postinc0	equ	0xFEE
 29094                           fsr0h	equ	0xFEA
 29095                           fsr0l	equ	0xFE9
 29096                           wreg	equ	0xFE8
 29097                           indf1	equ	0xFE7
 29098                           postdec1	equ	0xFE5
 29099                           fsr1h	equ	0xFE2
 29100                           fsr1l	equ	0xFE1
 29101                           indf2	equ	0xFDF
 29102                           postinc2	equ	0xFDE
 29103                           postdec2	equ	0xFDD
 29104                           plusw2	equ	0xFDB
 29105                           fsr2h	equ	0xFDA
 29106                           fsr2l	equ	0xFD9
 29107                           status	equ	0xFD8
 29108                           
 29109 ;; *************** function _Byte_SetBit *****************
 29110 ;; Defined at:
 29111 ;;		line 32 in file "Library/Types.c"
 29112 ;; Parameters:    Size  Location     Type
 29113 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 29114 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 29115 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 29116 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 29117 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 29118 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 29119 ;;		 -> NULL(0), 
 29120 ;;  pBit            1    2[BANK0 ] unsigned char 
 29121 ;;  pValue          1    3[BANK0 ] unsigned char 
 29122 ;; Auto vars:     Size  Location     Type
 29123 ;;		None
 29124 ;; Return value:  Size  Location     Type
 29125 ;;                  1    wreg      void 
 29126 ;; Registers used:
 29127 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29128 ;; Tracked objects:
 29129 ;;		On entry : 0/0
 29130 ;;		On exit  : 0/0
 29131 ;;		Unchanged: 0/0
 29132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29133 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29135 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29136 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29137 ;;Total ram usage:        7 bytes
 29138 ;; Hardware stack levels used:    1
 29139 ;; Hardware stack levels required when called:    7
 29140 ;; This function calls:
 29141 ;;		Nothing
 29142 ;; This function is called by:
 29143 ;;		_Port_SetPinType
 29144 ;;		_Port_SetPin
 29145 ;;		_SPI_Init
 29146 ;;		_SPI_MinSpeed
 29147 ;;		_SPI_MaxSpeed
 29148 ;;		_Word_SetBit
 29149 ;;		_I2C_Init
 29150 ;; This function uses a non-reentrant model
 29151 ;;
 29152                           
 29153                           	psect	text154
 29154  0158B8                     __ptext154:
 29155                           	opt stack 0
 29156  0158B8                     _Byte_SetBit:
 29157                           	opt stack 15
 29158                           
 29159                           ;Types.c: 34: pValue &= 1;
 29160                           
 29161                           ; BSR set to: 0
 29162                           ;incstack = 0
 29163  0158B8  0E01               	movlw	1
 29164  0158BA  0100               	movlb	0	; () banked
 29165  0158BC  17BD               	andwf	Byte_SetBit@pValue& (0+255),f,b
 29166                           
 29167                           ; BSR set to: 0
 29168                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 29169  0158BE  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29170  0158C2  0E01               	movlw	1
 29171  0158C4  0100               	movlb	0	; () banked
 29172  0158C6  6FBF               	movwf	(??_Byte_SetBit+1)& (0+255),b
 29173  0158C8  0100               	movlb	0	; () banked
 29174  0158CA  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29175  0158CC  D003               	goto	u8764
 29176  0158CE                     u8765:
 29177  0158CE  0100               	movlb	0	; () banked
 29178  0158D0  90D8               	bcf	status,0,c
 29179  0158D2  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29180  0158D4                     u8764:
 29181  0158D4  0100               	movlb	0	; () banked
 29182  0158D6  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29183  0158D8  D7FA               	goto	u8765
 29184  0158DA  0100               	movlb	0	; () banked
 29185  0158DC  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29186  0158DE  0AFF               	xorlw	255
 29187  0158E0  0100               	movlb	0	; () banked
 29188  0158E2  6FC0               	movwf	(??_Byte_SetBit+2)& (0+255),b
 29189  0158E4  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29190  0158E8  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29191  0158EC  0100               	movlb	0	; () banked
 29192  0158EE  51C0               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 29193  0158F0  16DF               	andwf	indf2,f,c
 29194                           
 29195                           ; BSR set to: 0
 29196                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 29197  0158F2  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29198  0158F6  C0BD  F0BF         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 29199  0158FA  0100               	movlb	0	; () banked
 29200  0158FC  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29201  0158FE  D003               	goto	u8774
 29202  015900                     u8775:
 29203  015900  0100               	movlb	0	; () banked
 29204  015902  90D8               	bcf	status,0,c
 29205  015904  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29206  015906                     u8774:
 29207  015906  0100               	movlb	0	; () banked
 29208  015908  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29209  01590A  D7FA               	goto	u8775
 29210  01590C  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29211  015910  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29212  015914  0100               	movlb	0	; () banked
 29213  015916  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29214  015918  12DF               	iorwf	indf2,f,c
 29215                           
 29216                           ; BSR set to: 0
 29217  01591A  0012               	return		;funcret
 29218  01591C                     __end_of_Byte_SetBit:
 29219                           	opt stack 0
 29220                           tosu	equ	0xFFF
 29221                           tosh	equ	0xFFE
 29222                           tosl	equ	0xFFD
 29223                           pclath	equ	0xFFA
 29224                           tblptru	equ	0xFF8
 29225                           tblptrh	equ	0xFF7
 29226                           tblptrl	equ	0xFF6
 29227                           tablat	equ	0xFF5
 29228                           prodh	equ	0xFF4
 29229                           prodl	equ	0xFF3
 29230                           intcon	equ	0xFF2
 29231                           indf0	equ	0xFEF
 29232                           postinc0	equ	0xFEE
 29233                           fsr0h	equ	0xFEA
 29234                           fsr0l	equ	0xFE9
 29235                           wreg	equ	0xFE8
 29236                           indf1	equ	0xFE7
 29237                           postdec1	equ	0xFE5
 29238                           fsr1h	equ	0xFE2
 29239                           fsr1l	equ	0xFE1
 29240                           indf2	equ	0xFDF
 29241                           postinc2	equ	0xFDE
 29242                           postdec2	equ	0xFDD
 29243                           plusw2	equ	0xFDB
 29244                           fsr2h	equ	0xFDA
 29245                           fsr2l	equ	0xFD9
 29246                           status	equ	0xFD8
 29247                           
 29248 ;; *************** function _Port_GetPin *****************
 29249 ;; Defined at:
 29250 ;;		line 271 in file "Library/Port.c"
 29251 ;; Parameters:    Size  Location     Type
 29252 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 29253 ;;		 -> PortB(10), PortE(10), PortC(10), 
 29254 ;;  pPin            1    2[BANK0 ] enum E6750
 29255 ;; Auto vars:     Size  Location     Type
 29256 ;;  Output          1    5[BANK0 ] unsigned char 
 29257 ;; Return value:  Size  Location     Type
 29258 ;;                  1    wreg      unsigned char 
 29259 ;; Registers used:
 29260 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29261 ;; Tracked objects:
 29262 ;;		On entry : 0/0
 29263 ;;		On exit  : 0/0
 29264 ;;		Unchanged: 0/0
 29265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29266 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29268 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29269 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29270 ;;Total ram usage:        6 bytes
 29271 ;; Hardware stack levels used:    1
 29272 ;; Hardware stack levels required when called:    7
 29273 ;; This function calls:
 29274 ;;		Nothing
 29275 ;; This function is called by:
 29276 ;;		_Port_TogglePin
 29277 ;;		_HMI_LeftSwitch
 29278 ;;		_HMI_RightSwitch
 29279 ;;		_HMI_UpSwitch
 29280 ;;		_HMI_DownSwitch
 29281 ;;		_MXK_TestButton
 29282 ;; This function uses a non-reentrant model
 29283 ;;
 29284                           
 29285                           	psect	text155
 29286  015E7C                     __ptext155:
 29287                           	opt stack 0
 29288  015E7C                     _Port_GetPin:
 29289                           	opt stack 18
 29290                           
 29291                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 29292                           
 29293                           ; BSR set to: 0
 29294                           ;incstack = 0
 29295  015E7C  0100               	movlb	0	; () banked
 29296  015E7E  EE20 F006          	lfsr	2,6
 29297  015E82  51BA               	movf	Port_GetPin@pInput& (0+255),w,b
 29298  015E84  26D9               	addwf	fsr2l,f,c
 29299  015E86  51BB               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 29300  015E88  22DA               	addwfc	fsr2h,f,c
 29301  015E8A  CFDE F0BD          	movff	postinc2,??_Port_GetPin
 29302  015E8E  CFDD F0BE          	movff	postdec2,??_Port_GetPin+1
 29303  015E92  C0BD  FFD9         	movff	??_Port_GetPin,fsr2l
 29304  015E96  C0BE  FFDA         	movff	??_Port_GetPin+1,fsr2h
 29305  015E9A  50DF               	movf	indf2,w,c
 29306  015E9C  0100               	movlb	0	; () banked
 29307  015E9E  6FBF               	movwf	Port_GetPin@Output& (0+255),b
 29308                           
 29309                           ; BSR set to: 0
 29310                           ;Port.c: 274: Output >>= (UINT8)pPin;
 29311  015EA0  0100               	movlb	0	; () banked
 29312  015EA2  29BC               	incf	Port_GetPin@pPin& (0+255),w,b
 29313  015EA4  0100               	movlb	0	; () banked
 29314  015EA6  6FBD               	movwf	??_Port_GetPin& (0+255),b
 29315  015EA8  D003               	goto	u8810
 29316  015EAA                     u8815:
 29317  015EAA  0100               	movlb	0	; () banked
 29318  015EAC  90D8               	bcf	status,0,c
 29319  015EAE  33BF               	rrcf	Port_GetPin@Output& (0+255),f,b
 29320  015EB0                     u8810:
 29321  015EB0  0100               	movlb	0	; () banked
 29322  015EB2  2FBD               	decfsz	??_Port_GetPin& (0+255),f,b
 29323  015EB4  D7FA               	goto	u8815
 29324                           
 29325                           ;Port.c: 275: Output &= 1;
 29326  015EB6  0E01               	movlw	1
 29327  015EB8  0100               	movlb	0	; () banked
 29328  015EBA  17BF               	andwf	Port_GetPin@Output& (0+255),f,b
 29329                           
 29330                           ; BSR set to: 0
 29331                           ;Port.c: 276: return Output;
 29332  015EBC  0100               	movlb	0	; () banked
 29333  015EBE  51BF               	movf	Port_GetPin@Output& (0+255),w,b
 29334  015EC0  0012               	return	
 29335  015EC2                     __end_of_Port_GetPin:
 29336                           	opt stack 0
 29337                           tosu	equ	0xFFF
 29338                           tosh	equ	0xFFE
 29339                           tosl	equ	0xFFD
 29340                           pclath	equ	0xFFA
 29341                           tblptru	equ	0xFF8
 29342                           tblptrh	equ	0xFF7
 29343                           tblptrl	equ	0xFF6
 29344                           tablat	equ	0xFF5
 29345                           prodh	equ	0xFF4
 29346                           prodl	equ	0xFF3
 29347                           intcon	equ	0xFF2
 29348                           indf0	equ	0xFEF
 29349                           postinc0	equ	0xFEE
 29350                           fsr0h	equ	0xFEA
 29351                           fsr0l	equ	0xFE9
 29352                           wreg	equ	0xFE8
 29353                           indf1	equ	0xFE7
 29354                           postdec1	equ	0xFE5
 29355                           fsr1h	equ	0xFE2
 29356                           fsr1l	equ	0xFE1
 29357                           indf2	equ	0xFDF
 29358                           postinc2	equ	0xFDE
 29359                           postdec2	equ	0xFDD
 29360                           plusw2	equ	0xFDB
 29361                           fsr2h	equ	0xFDA
 29362                           fsr2l	equ	0xFD9
 29363                           status	equ	0xFD8
 29364                           
 29365 ;; *************** function _HMI_SetBar *****************
 29366 ;; Defined at:
 29367 ;;		line 205 in file "HMI.c"
 29368 ;; Parameters:    Size  Location     Type
 29369 ;;  pValue          1    wreg     unsigned char 
 29370 ;; Auto vars:     Size  Location     Type
 29371 ;;  pValue          1    0[BANK0 ] unsigned char 
 29372 ;; Return value:  Size  Location     Type
 29373 ;;                  1    wreg      void 
 29374 ;; Registers used:
 29375 ;;		wreg
 29376 ;; Tracked objects:
 29377 ;;		On entry : 0/0
 29378 ;;		On exit  : 0/0
 29379 ;;		Unchanged: 0/0
 29380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29384 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29385 ;;Total ram usage:        1 bytes
 29386 ;; Hardware stack levels used:    1
 29387 ;; Hardware stack levels required when called:    7
 29388 ;; This function calls:
 29389 ;;		Nothing
 29390 ;; This function is called by:
 29391 ;;		_Event_DIPSwitch
 29392 ;;		_Event_HMI_DIPSwitch
 29393 ;;		_Event_HMI_LeftButton
 29394 ;;		_Event_HMI_RightButton
 29395 ;; This function uses a non-reentrant model
 29396 ;;
 29397                           
 29398                           	psect	text156
 29399  016780                     __ptext156:
 29400                           	opt stack 0
 29401  016780                     _HMI_SetBar:
 29402                           	opt stack 18
 29403                           
 29404                           ; BSR set to: 0
 29405                           ;incstack = 0
 29406                           ;HMI_SetBar@pValue stored from wreg
 29407  016780  0100               	movlb	0	; () banked
 29408  016782  6FBA               	movwf	HMI_SetBar@pValue& (0+255),b
 29409                           
 29410                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 29411  016784  C0BA  F347         	movff	HMI_SetBar@pValue,_HMIBoard+7
 29412  016788  0012               	return		;funcret
 29413  01678A                     __end_of_HMI_SetBar:
 29414                           	opt stack 0
 29415                           tosu	equ	0xFFF
 29416                           tosh	equ	0xFFE
 29417                           tosl	equ	0xFFD
 29418                           pclath	equ	0xFFA
 29419                           tblptru	equ	0xFF8
 29420                           tblptrh	equ	0xFF7
 29421                           tblptrl	equ	0xFF6
 29422                           tablat	equ	0xFF5
 29423                           prodh	equ	0xFF4
 29424                           prodl	equ	0xFF3
 29425                           intcon	equ	0xFF2
 29426                           indf0	equ	0xFEF
 29427                           postinc0	equ	0xFEE
 29428                           fsr0h	equ	0xFEA
 29429                           fsr0l	equ	0xFE9
 29430                           wreg	equ	0xFE8
 29431                           indf1	equ	0xFE7
 29432                           postdec1	equ	0xFE5
 29433                           fsr1h	equ	0xFE2
 29434                           fsr1l	equ	0xFE1
 29435                           indf2	equ	0xFDF
 29436                           postinc2	equ	0xFDE
 29437                           postdec2	equ	0xFDD
 29438                           plusw2	equ	0xFDB
 29439                           fsr2h	equ	0xFDA
 29440                           fsr2l	equ	0xFD9
 29441                           status	equ	0xFD8
 29442                           
 29443 ;; *************** function _HMI_GetBar *****************
 29444 ;; Defined at:
 29445 ;;		line 209 in file "HMI.c"
 29446 ;; Parameters:    Size  Location     Type
 29447 ;;		None
 29448 ;; Auto vars:     Size  Location     Type
 29449 ;;		None
 29450 ;; Return value:  Size  Location     Type
 29451 ;;                  1    wreg      unsigned char 
 29452 ;; Registers used:
 29453 ;;		wreg, status,2
 29454 ;; Tracked objects:
 29455 ;;		On entry : 0/0
 29456 ;;		On exit  : 0/0
 29457 ;;		Unchanged: 0/0
 29458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29463 ;;Total ram usage:        0 bytes
 29464 ;; Hardware stack levels used:    1
 29465 ;; Hardware stack levels required when called:    7
 29466 ;; This function calls:
 29467 ;;		Nothing
 29468 ;; This function is called by:
 29469 ;;		_Event_DIPSwitch
 29470 ;;		_Event_HMI_DIPSwitch
 29471 ;; This function uses a non-reentrant model
 29472 ;;
 29473                           
 29474                           	psect	text157
 29475  0167BC                     __ptext157:
 29476                           	opt stack 0
 29477  0167BC                     _HMI_GetBar:
 29478                           	opt stack 18
 29479                           
 29480                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 29481                           
 29482                           ;incstack = 0
 29483  0167BC  0103               	movlb	3	; () banked
 29484  0167BE  5147               	movf	(_HMIBoard+7)& (0+255),w,b
 29485  0167C0  0012               	return	
 29486  0167C2                     __end_of_HMI_GetBar:
 29487                           	opt stack 0
 29488                           tosu	equ	0xFFF
 29489                           tosh	equ	0xFFE
 29490                           tosl	equ	0xFFD
 29491                           pclath	equ	0xFFA
 29492                           tblptru	equ	0xFF8
 29493                           tblptrh	equ	0xFF7
 29494                           tblptrl	equ	0xFF6
 29495                           tablat	equ	0xFF5
 29496                           prodh	equ	0xFF4
 29497                           prodl	equ	0xFF3
 29498                           intcon	equ	0xFF2
 29499                           indf0	equ	0xFEF
 29500                           postinc0	equ	0xFEE
 29501                           fsr0h	equ	0xFEA
 29502                           fsr0l	equ	0xFE9
 29503                           wreg	equ	0xFE8
 29504                           indf1	equ	0xFE7
 29505                           postdec1	equ	0xFE5
 29506                           fsr1h	equ	0xFE2
 29507                           fsr1l	equ	0xFE1
 29508                           indf2	equ	0xFDF
 29509                           postinc2	equ	0xFDE
 29510                           postdec2	equ	0xFDD
 29511                           plusw2	equ	0xFDB
 29512                           fsr2h	equ	0xFDA
 29513                           fsr2l	equ	0xFD9
 29514                           status	equ	0xFD8
 29515                           
 29516 ;; *************** function _ISR_Function *****************
 29517 ;; Defined at:
 29518 ;;		line 38 in file "Library/ISR.c"
 29519 ;; Parameters:    Size  Location     Type
 29520 ;;		None
 29521 ;; Auto vars:     Size  Location     Type
 29522 ;;		None
 29523 ;; Return value:  Size  Location     Type
 29524 ;;                  1    wreg      void 
 29525 ;; Registers used:
 29526 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29527 ;; Tracked objects:
 29528 ;;		On entry : 0/0
 29529 ;;		On exit  : 0/0
 29530 ;;		Unchanged: 0/0
 29531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29534 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29535 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29536 ;;Total ram usage:       18 bytes
 29537 ;; Hardware stack levels used:    1
 29538 ;; Hardware stack levels required when called:    6
 29539 ;; This function calls:
 29540 ;;		_Timer0_ISR
 29541 ;; This function is called by:
 29542 ;;		Interrupt level 2
 29543 ;; This function uses a non-reentrant model
 29544 ;;
 29545                           
 29546                           	psect	intcode
 29547  001408                     __pintcode:
 29548                           	opt stack 0
 29549  001408                     _ISR_Function:
 29550                           	opt stack 13
 29551                           
 29552                           ; BSR set to: 3
 29553                           ;incstack = 0
 29554  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29555  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29556  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29557  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29558  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29559  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29560  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29561  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29562  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29563  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29564  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29565  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29566  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29567  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29568  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29569  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29570  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29571  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29572  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29573                           
 29574                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29575  001452  92F2               	bcf	intcon,1,c	;volatile
 29576                           
 29577                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29578  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29579  001456  AAF2               	btfss	intcon,5,c	;volatile
 29580  001458  D002               	goto	i2l1590
 29581                           
 29582                           ;ISR.c: 68: Timer0_ISR();
 29583  00145A  EC80  F0B1         	call	_Timer0_ISR	;wreg free
 29584  00145E                     i2l1590:
 29585  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29586  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29587  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29588  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29589  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29590  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29591  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29592  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29593  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29594  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29595  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29596  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29597  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29598  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29599  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29600  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29601  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29602  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29603  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29604  0014A8  0011               	retfie		f
 29605  0014AA                     __end_of_ISR_Function:
 29606                           	opt stack 0
 29607                           tosu	equ	0xFFF
 29608                           tosh	equ	0xFFE
 29609                           tosl	equ	0xFFD
 29610                           pclatu	equ	0xFFB
 29611                           pclath	equ	0xFFA
 29612                           tblptru	equ	0xFF8
 29613                           tblptrh	equ	0xFF7
 29614                           tblptrl	equ	0xFF6
 29615                           tablat	equ	0xFF5
 29616                           prodh	equ	0xFF4
 29617                           prodl	equ	0xFF3
 29618                           intcon	equ	0xFF2
 29619                           indf0	equ	0xFEF
 29620                           postinc0	equ	0xFEE
 29621                           fsr0h	equ	0xFEA
 29622                           fsr0l	equ	0xFE9
 29623                           wreg	equ	0xFE8
 29624                           indf1	equ	0xFE7
 29625                           postdec1	equ	0xFE5
 29626                           fsr1h	equ	0xFE2
 29627                           fsr1l	equ	0xFE1
 29628                           indf2	equ	0xFDF
 29629                           postinc2	equ	0xFDE
 29630                           postdec2	equ	0xFDD
 29631                           plusw2	equ	0xFDB
 29632                           fsr2h	equ	0xFDA
 29633                           fsr2l	equ	0xFD9
 29634                           status	equ	0xFD8
 29635                           
 29636 ;; *************** function _Timer0_ISR *****************
 29637 ;; Defined at:
 29638 ;;		line 94 in file "Library/Timer0.c"
 29639 ;; Parameters:    Size  Location     Type
 29640 ;;		None
 29641 ;; Auto vars:     Size  Location     Type
 29642 ;;		None
 29643 ;; Return value:  Size  Location     Type
 29644 ;;                  1    wreg      void 
 29645 ;; Registers used:
 29646 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29647 ;; Tracked objects:
 29648 ;;		On entry : 0/0
 29649 ;;		On exit  : 0/0
 29650 ;;		Unchanged: 0/0
 29651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29656 ;;Total ram usage:        0 bytes
 29657 ;; Hardware stack levels used:    1
 29658 ;; Hardware stack levels required when called:    5
 29659 ;; This function calls:
 29660 ;;		Absolute function
 29661 ;;		i2_Motor_Step
 29662 ;;		i2_Timer0_Stop
 29663 ;; This function is called by:
 29664 ;;		_ISR_Function
 29665 ;; This function uses a non-reentrant model
 29666 ;;
 29667                           
 29668                           	psect	text159
 29669  016300                     __ptext159:
 29670                           	opt stack 0
 29671  016300                     _Timer0_ISR:
 29672                           	opt stack 13
 29673                           
 29674                           ;Timer0.c: 96: Timer0_Stop();
 29675                           
 29676                           ;incstack = 0
 29677  016300  ECE1  F0B3         	call	i2_Timer0_Stop	;wreg free
 29678                           
 29679                           ;Timer0.c: 99: if (gISR != 0)
 29680  016304  0100               	movlb	0	; () banked
 29681  016306  5160               	movf	_gISR& (0+255),w,b
 29682  016308  0100               	movlb	0	; () banked
 29683  01630A  1161               	iorwf	(_gISR+1)& (0+255),w,b
 29684  01630C  0100               	movlb	0	; () banked
 29685  01630E  1162               	iorwf	(_gISR+2)& (0+255),w,b
 29686  016310  B4D8               	btfsc	status,2,c
 29687  016312  0012               	return	
 29688                           
 29689                           ; BSR set to: 0
 29690                           ;Timer0.c: 100: gISR();
 29691  016314  D801               	call	i2u1369_48
 29692  016316  0012               	return	
 29693  016318                     i2u1369_48:
 29694  016318  0005               	push	
 29695  01631A  6EFA               	movwf	pclath,c
 29696  01631C  0100               	movlb	0	; () banked
 29697  01631E  5160               	movf	_gISR& (0+255),w,b
 29698  016320  6EFD               	movwf	tosl,c
 29699  016322  5161               	movf	(_gISR+1)& (0+255),w,b
 29700  016324  6EFE               	movwf	tosh,c
 29701  016326  5162               	movf	(_gISR+2)& (0+255),w,b
 29702  016328  6EFF               	movwf	tosu,c
 29703  01632A  50FA               	movf	pclath,w,c
 29704  01632C  0012               	return		;indir
 29705  01632E                     __end_of_Timer0_ISR:
 29706                           	opt stack 0
 29707                           tosu	equ	0xFFF
 29708                           tosh	equ	0xFFE
 29709                           tosl	equ	0xFFD
 29710                           pclatu	equ	0xFFB
 29711                           pclath	equ	0xFFA
 29712                           tblptru	equ	0xFF8
 29713                           tblptrh	equ	0xFF7
 29714                           tblptrl	equ	0xFF6
 29715                           tablat	equ	0xFF5
 29716                           prodh	equ	0xFF4
 29717                           prodl	equ	0xFF3
 29718                           intcon	equ	0xFF2
 29719                           indf0	equ	0xFEF
 29720                           postinc0	equ	0xFEE
 29721                           fsr0h	equ	0xFEA
 29722                           fsr0l	equ	0xFE9
 29723                           wreg	equ	0xFE8
 29724                           indf1	equ	0xFE7
 29725                           postdec1	equ	0xFE5
 29726                           fsr1h	equ	0xFE2
 29727                           fsr1l	equ	0xFE1
 29728                           indf2	equ	0xFDF
 29729                           postinc2	equ	0xFDE
 29730                           postdec2	equ	0xFDD
 29731                           plusw2	equ	0xFDB
 29732                           fsr2h	equ	0xFDA
 29733                           fsr2l	equ	0xFD9
 29734                           status	equ	0xFD8
 29735                           
 29736 ;; *************** function i2_Motor_Step *****************
 29737 ;; Defined at:
 29738 ;;		line 75 in file "Library/Motor.c"
 29739 ;; Parameters:    Size  Location     Type
 29740 ;;		None
 29741 ;; Auto vars:     Size  Location     Type
 29742 ;;		None
 29743 ;; Return value:  Size  Location     Type
 29744 ;;                  1    wreg      void 
 29745 ;; Registers used:
 29746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29747 ;; Tracked objects:
 29748 ;;		On entry : 0/0
 29749 ;;		On exit  : 0/0
 29750 ;;		Unchanged: 0/0
 29751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29754 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29755 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29756 ;;Total ram usage:        2 bytes
 29757 ;; Hardware stack levels used:    1
 29758 ;; Hardware stack levels required when called:    4
 29759 ;; This function calls:
 29760 ;;		i2_MXK_Queue
 29761 ;;		i2_MXK_Release
 29762 ;;		i2_MXK_SwitchTo
 29763 ;;		i2_Port_SetPin
 29764 ;;		i2_Timer0_Restart
 29765 ;;		i2_Timer0_Stop
 29766 ;; This function is called by:
 29767 ;; This function uses a non-reentrant model
 29768 ;;
 29769                           
 29770                           	psect	text160
 29771  013898                     __ptext160:
 29772                           	opt stack 0
 29773  013898                     i2_Motor_Step:
 29774                           	opt stack 13
 29775                           
 29776                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29777                           
 29778                           ;incstack = 0
 29779  013898  0100               	movlb	0	; () banked
 29780  01389A  EE20 F004          	lfsr	2,4
 29781  01389E  517F               	movf	_lMotor& (0+255),w,b
 29782  0138A0  26D9               	addwf	fsr2l,f,c
 29783  0138A2  5180               	movf	(_lMotor+1)& (0+255),w,b
 29784  0138A4  22DA               	addwfc	fsr2h,f,c
 29785  0138A6  50DF               	movf	indf2,w,c
 29786  0138A8  ECD3  F0B0         	call	i2_MXK_SwitchTo
 29787  0138AC  0900               	iorlw	0
 29788  0138AE  B4D8               	btfsc	status,2,c
 29789  0138B0  D06A               	goto	i2l1627
 29790                           
 29791                           ;Motor.c: 78: {
 29792                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29793  0138B2  C07F  FFD9         	movff	_lMotor,fsr2l
 29794  0138B6  C080  FFDA         	movff	_lMotor+1,fsr2h
 29795  0138BA  50DE               	movf	postinc2,w,c
 29796  0138BC  10DE               	iorwf	postinc2,w,c
 29797  0138BE  B4D8               	btfsc	status,2,c
 29798  0138C0  D05D               	goto	i2l1628
 29799                           
 29800                           ;Motor.c: 80: {
 29801                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29802  0138C2  C07F  FFD9         	movff	_lMotor,fsr2l
 29803  0138C6  C080  FFDA         	movff	_lMotor+1,fsr2h
 29804  0138CA  0E01               	movlw	1
 29805  0138CC  BEDB               	btfsc	plusw2,7,c
 29806  0138CE  D022               	goto	i2l1629
 29807  0138D0  0E01               	movlw	1
 29808  0138D2  50DB               	movf	plusw2,w,c
 29809  0138D4  E103               	bnz	i2u737_40
 29810  0138D6  04DE               	decf	postinc2,w,c
 29811  0138D8  A0D8               	btfss	status,0,c
 29812  0138DA  D01C               	goto	i2l1629
 29813  0138DC                     i2u737_40:
 29814                           
 29815                           ;Motor.c: 83: {
 29816                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29817  0138DC  C07F  FFD9         	movff	_lMotor,fsr2l
 29818  0138E0  C080  FFDA         	movff	_lMotor+1,fsr2h
 29819  0138E4  28DE               	incf	postinc2,w,c
 29820  0138E6  E104               	bnz	i2u738_40
 29821  0138E8  0E7F               	movlw	127
 29822  0138EA  18DE               	xorwf	postinc2,w,c
 29823  0138EC  B4D8               	btfsc	status,2,c
 29824  0138EE  D007               	goto	i2l1630
 29825  0138F0                     i2u738_40:
 29826                           
 29827                           ;Motor.c: 85: lMotor->mDelta --;
 29828  0138F0  C07F  FFD9         	movff	_lMotor,fsr2l
 29829  0138F4  C080  FFDA         	movff	_lMotor+1,fsr2h
 29830  0138F8  06DE               	decf	postinc2,f,c
 29831  0138FA  0E00               	movlw	0
 29832  0138FC  5ADD               	subwfb	postdec2,f,c
 29833  0138FE                     i2l1630:
 29834                           
 29835                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29836  0138FE  0E91               	movlw	low _PortE
 29837  013900  6E10               	movwf	i2Port_SetPin@pInput,c
 29838  013902  0E00               	movlw	high _PortE
 29839  013904  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29840  013906  0E00               	movlw	0
 29841  013908  6E12               	movwf	i2Port_SetPin@pPin,c
 29842  01390A  0E01               	movlw	1
 29843  01390C  6E13               	movwf	i2Port_SetPin@pValue,c
 29844  01390E  ECD8  F0A3         	call	i2_Port_SetPin	;wreg free
 29845                           
 29846                           ;Motor.c: 88: }
 29847  013912  D01B               	goto	i2l1631
 29848  013914                     i2l1629:
 29849                           
 29850                           ;Motor.c: 89: else
 29851                           ;Motor.c: 90: {
 29852                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29853  013914  C07F  FFD9         	movff	_lMotor,fsr2l
 29854  013918  C080  FFDA         	movff	_lMotor+1,fsr2h
 29855  01391C  04DE               	decf	postinc2,w,c
 29856  01391E  E104               	bnz	i2u739_40
 29857  013920  0E80               	movlw	128
 29858  013922  18DE               	xorwf	postinc2,w,c
 29859  013924  B4D8               	btfsc	status,2,c
 29860  013926  D007               	goto	i2l1632
 29861  013928                     i2u739_40:
 29862                           
 29863                           ;Motor.c: 92: lMotor->mDelta ++;
 29864  013928  C07F  FFD9         	movff	_lMotor,fsr2l
 29865  01392C  C080  FFDA         	movff	_lMotor+1,fsr2h
 29866  013930  2ADE               	incf	postinc2,f,c
 29867  013932  0E00               	movlw	0
 29868  013934  22DD               	addwfc	postdec2,f,c
 29869  013936                     i2l1632:
 29870                           
 29871                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29872  013936  0E91               	movlw	low _PortE
 29873  013938  6E10               	movwf	i2Port_SetPin@pInput,c
 29874  01393A  0E00               	movlw	high _PortE
 29875  01393C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29876  01393E  0E00               	movlw	0
 29877  013940  6E12               	movwf	i2Port_SetPin@pPin,c
 29878  013942  0E00               	movlw	0
 29879  013944  6E13               	movwf	i2Port_SetPin@pValue,c
 29880  013946  ECD8  F0A3         	call	i2_Port_SetPin	;wreg free
 29881  01394A                     i2l1631:
 29882                           
 29883                           ;Motor.c: 95: }
 29884                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29885  01394A  0E91               	movlw	low _PortE
 29886  01394C  6E10               	movwf	i2Port_SetPin@pInput,c
 29887  01394E  0E00               	movlw	high _PortE
 29888  013950  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29889  013952  0E01               	movlw	1
 29890  013954  6E12               	movwf	i2Port_SetPin@pPin,c
 29891  013956  0E01               	movlw	1
 29892  013958  6E13               	movwf	i2Port_SetPin@pValue,c
 29893  01395A  ECD8  F0A3         	call	i2_Port_SetPin	;wreg free
 29894                           
 29895                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29896  01395E  0E91               	movlw	low _PortE
 29897  013960  6E10               	movwf	i2Port_SetPin@pInput,c
 29898  013962  0E00               	movlw	high _PortE
 29899  013964  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29900  013966  0E01               	movlw	1
 29901  013968  6E12               	movwf	i2Port_SetPin@pPin,c
 29902  01396A  0E00               	movlw	0
 29903  01396C  6E13               	movwf	i2Port_SetPin@pValue,c
 29904  01396E  ECD8  F0A3         	call	i2_Port_SetPin	;wreg free
 29905                           
 29906                           ;Motor.c: 101: MXK_Release();
 29907  013972  ECE4  F0B3         	call	i2_MXK_Release	;wreg free
 29908                           
 29909                           ;Motor.c: 102: Timer0_Restart();
 29910  013976  ECB0  F0B3         	call	i2_Timer0_Restart	;wreg free
 29911                           
 29912                           ;Motor.c: 103: return;
 29913  01397A  0012               	return	
 29914  01397C                     i2l1628:
 29915                           
 29916                           ;Motor.c: 104: }
 29917                           ;Motor.c: 105: MXK_Release();
 29918  01397C  ECE4  F0B3         	call	i2_MXK_Release	;wreg free
 29919                           
 29920                           ;Motor.c: 106: Timer0_Stop();
 29921  013980  ECE1  F0B3         	call	i2_Timer0_Stop	;wreg free
 29922                           
 29923                           ;Motor.c: 107: return;
 29924  013984  0012               	return	
 29925  013986                     i2l1627:
 29926                           
 29927                           ;Motor.c: 108: }
 29928                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29929  013986  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29930  01398A  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29931  01398E  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29932  013992  EC97  F0B3         	call	i2_MXK_Queue	;wreg free
 29933  013996  0012               	return		;funcret
 29934  013998                     __end_ofi2_Motor_Step:
 29935                           	opt stack 0
 29936                           tosu	equ	0xFFF
 29937                           tosh	equ	0xFFE
 29938                           tosl	equ	0xFFD
 29939                           pclatu	equ	0xFFB
 29940                           pclath	equ	0xFFA
 29941                           tblptru	equ	0xFF8
 29942                           tblptrh	equ	0xFF7
 29943                           tblptrl	equ	0xFF6
 29944                           tablat	equ	0xFF5
 29945                           prodh	equ	0xFF4
 29946                           prodl	equ	0xFF3
 29947                           intcon	equ	0xFF2
 29948                           indf0	equ	0xFEF
 29949                           postinc0	equ	0xFEE
 29950                           fsr0h	equ	0xFEA
 29951                           fsr0l	equ	0xFE9
 29952                           wreg	equ	0xFE8
 29953                           indf1	equ	0xFE7
 29954                           postdec1	equ	0xFE5
 29955                           fsr1h	equ	0xFE2
 29956                           fsr1l	equ	0xFE1
 29957                           indf2	equ	0xFDF
 29958                           postinc2	equ	0xFDE
 29959                           postdec2	equ	0xFDD
 29960                           plusw2	equ	0xFDB
 29961                           fsr2h	equ	0xFDA
 29962                           fsr2l	equ	0xFD9
 29963                           status	equ	0xFD8
 29964                           
 29965 ;; *************** function i2_Timer0_Stop *****************
 29966 ;; Defined at:
 29967 ;;		line 89 in file "Library/Timer0.c"
 29968 ;; Parameters:    Size  Location     Type
 29969 ;;		None
 29970 ;; Auto vars:     Size  Location     Type
 29971 ;;		None
 29972 ;; Return value:  Size  Location     Type
 29973 ;;                  1    wreg      void 
 29974 ;; Registers used:
 29975 ;;		None
 29976 ;; Tracked objects:
 29977 ;;		On entry : 0/0
 29978 ;;		On exit  : 0/0
 29979 ;;		Unchanged: 0/0
 29980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29985 ;;Total ram usage:        0 bytes
 29986 ;; Hardware stack levels used:    1
 29987 ;; This function calls:
 29988 ;;		Nothing
 29989 ;; This function is called by:
 29990 ;;		_Timer0_ISR
 29991 ;;		i2_Motor_Step
 29992 ;; This function uses a non-reentrant model
 29993 ;;
 29994                           
 29995                           	psect	text161
 29996  0167C2                     __ptext161:
 29997                           	opt stack 0
 29998  0167C2                     i2_Timer0_Stop:
 29999                           	opt stack 17
 30000                           
 30001                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 30002                           
 30003                           ;incstack = 0
 30004  0167C2  9AF2               	bcf	intcon,5,c	;volatile
 30005                           
 30006                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 30007  0167C4  94F2               	bcf	intcon,2,c	;volatile
 30008  0167C6  0012               	return		;funcret
 30009  0167C8                     __end_ofi2_Timer0_Stop:
 30010                           	opt stack 0
 30011                           tosu	equ	0xFFF
 30012                           tosh	equ	0xFFE
 30013                           tosl	equ	0xFFD
 30014                           pclatu	equ	0xFFB
 30015                           pclath	equ	0xFFA
 30016                           tblptru	equ	0xFF8
 30017                           tblptrh	equ	0xFF7
 30018                           tblptrl	equ	0xFF6
 30019                           tablat	equ	0xFF5
 30020                           prodh	equ	0xFF4
 30021                           prodl	equ	0xFF3
 30022                           intcon	equ	0xFF2
 30023                           indf0	equ	0xFEF
 30024                           postinc0	equ	0xFEE
 30025                           fsr0h	equ	0xFEA
 30026                           fsr0l	equ	0xFE9
 30027                           wreg	equ	0xFE8
 30028                           indf1	equ	0xFE7
 30029                           postdec1	equ	0xFE5
 30030                           fsr1h	equ	0xFE2
 30031                           fsr1l	equ	0xFE1
 30032                           indf2	equ	0xFDF
 30033                           postinc2	equ	0xFDE
 30034                           postdec2	equ	0xFDD
 30035                           plusw2	equ	0xFDB
 30036                           fsr2h	equ	0xFDA
 30037                           fsr2l	equ	0xFD9
 30038                           status	equ	0xFD8
 30039                           
 30040 ;; *************** function i2_Timer0_Restart *****************
 30041 ;; Defined at:
 30042 ;;		line 83 in file "Library/Timer0.c"
 30043 ;; Parameters:    Size  Location     Type
 30044 ;;		None
 30045 ;; Auto vars:     Size  Location     Type
 30046 ;;		None
 30047 ;; Return value:  Size  Location     Type
 30048 ;;                  1    wreg      void 
 30049 ;; Registers used:
 30050 ;;		None
 30051 ;; Tracked objects:
 30052 ;;		On entry : 0/0
 30053 ;;		On exit  : 0/0
 30054 ;;		Unchanged: 0/0
 30055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30060 ;;Total ram usage:        0 bytes
 30061 ;; Hardware stack levels used:    1
 30062 ;; This function calls:
 30063 ;;		Nothing
 30064 ;; This function is called by:
 30065 ;;		i2_Motor_Step
 30066 ;; This function uses a non-reentrant model
 30067 ;;
 30068                           
 30069                           	psect	text162
 30070  016760                     __ptext162:
 30071                           	opt stack 0
 30072  016760                     i2_Timer0_Restart:
 30073                           	opt stack 16
 30074                           
 30075                           ;Timer0.c: 85: TMR0 = COUNTER;
 30076                           
 30077                           ;incstack = 0
 30078  016760  C029  FFD6         	movff	_COUNTER,4054	;volatile
 30079  016764  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 30080                           
 30081                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 30082  016768  8AF2               	bsf	intcon,5,c	;volatile
 30083  01676A  0012               	return		;funcret
 30084  01676C                     __end_ofi2_Timer0_Restart:
 30085                           	opt stack 0
 30086                           tosu	equ	0xFFF
 30087                           tosh	equ	0xFFE
 30088                           tosl	equ	0xFFD
 30089                           pclatu	equ	0xFFB
 30090                           pclath	equ	0xFFA
 30091                           tblptru	equ	0xFF8
 30092                           tblptrh	equ	0xFF7
 30093                           tblptrl	equ	0xFF6
 30094                           tablat	equ	0xFF5
 30095                           prodh	equ	0xFF4
 30096                           prodl	equ	0xFF3
 30097                           intcon	equ	0xFF2
 30098                           indf0	equ	0xFEF
 30099                           postinc0	equ	0xFEE
 30100                           fsr0h	equ	0xFEA
 30101                           fsr0l	equ	0xFE9
 30102                           wreg	equ	0xFE8
 30103                           indf1	equ	0xFE7
 30104                           postdec1	equ	0xFE5
 30105                           fsr1h	equ	0xFE2
 30106                           fsr1l	equ	0xFE1
 30107                           indf2	equ	0xFDF
 30108                           postinc2	equ	0xFDE
 30109                           postdec2	equ	0xFDD
 30110                           plusw2	equ	0xFDB
 30111                           fsr2h	equ	0xFDA
 30112                           fsr2l	equ	0xFD9
 30113                           status	equ	0xFD8
 30114                           
 30115 ;; *************** function i2_Port_SetPin *****************
 30116 ;; Defined at:
 30117 ;;		line 247 in file "Library/Port.c"
 30118 ;; Parameters:    Size  Location     Type
 30119 ;;  pInput          2   15[COMRAM] const PTR struct Port
 30120 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 30121 ;;  pPin            1   17[COMRAM] enum E6750
 30122 ;;  pValue          1   18[COMRAM] unsigned char 
 30123 ;; Auto vars:     Size  Location     Type
 30124 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 30125 ;; Return value:  Size  Location     Type
 30126 ;;                  1    wreg      void 
 30127 ;; Registers used:
 30128 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30129 ;; Tracked objects:
 30130 ;;		On entry : 0/0
 30131 ;;		On exit  : 0/0
 30132 ;;		Unchanged: 0/0
 30133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30137 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30138 ;;Total ram usage:        5 bytes
 30139 ;; Hardware stack levels used:    1
 30140 ;; Hardware stack levels required when called:    3
 30141 ;; This function calls:
 30142 ;;		i2_Byte_SetBit
 30143 ;;		i2_Word_GetPair
 30144 ;; This function is called by:
 30145 ;;		i2_Motor_Step
 30146 ;; This function uses a non-reentrant model
 30147 ;;
 30148                           
 30149                           	psect	text163
 30150  0147B0                     __ptext163:
 30151                           	opt stack 0
 30152  0147B0                     i2_Port_SetPin:
 30153                           	opt stack 13
 30154                           
 30155                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 30156                           
 30157                           ;incstack = 0
 30158  0147B0  0E08               	movlw	8
 30159  0147B2  2410               	addwf	i2Port_SetPin@pInput,w,c
 30160  0147B4  6E0D               	movwf	i2Word_GetPair@pInput,c
 30161  0147B6  0E00               	movlw	0
 30162  0147B8  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 30163  0147BA  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 30164  0147BC  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 30165  0147C0  EC51  F0B1         	call	i2_Word_GetPair	;wreg free
 30166  0147C4  6E14               	movwf	i2Port_SetPin@Type,c
 30167                           
 30168                           ;Port.c: 250: switch (Type)
 30169  0147C6  D03B               	goto	i2l427
 30170  0147C8                     
 30171                           ;Port.c: 256: pValue &= 1;
 30172  0147C8  0E01               	movlw	1
 30173  0147CA  1613               	andwf	i2Port_SetPin@pValue,f,c
 30174                           
 30175                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30176  0147CC  EE20 F002          	lfsr	2,2
 30177  0147D0  5010               	movf	i2Port_SetPin@pInput,w,c
 30178  0147D2  26D9               	addwf	fsr2l,f,c
 30179  0147D4  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30180  0147D6  22DA               	addwfc	fsr2h,f,c
 30181  0147D8  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30182  0147DC  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30183  0147E0  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30184  0147E4  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30185  0147E8  EC1C  F0AE         	call	i2_Byte_SetBit	;wreg free
 30186                           
 30187                           ;Port.c: 258: break;
 30188  0147EC  0012               	return	
 30189  0147EE                     
 30190                           ;Port.c: 261: pValue &= 1;
 30191  0147EE  0E01               	movlw	1
 30192  0147F0  1613               	andwf	i2Port_SetPin@pValue,f,c
 30193                           
 30194                           ;Port.c: 262: pValue ^= 1;
 30195  0147F2  0E01               	movlw	1
 30196  0147F4  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 30197                           
 30198                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30199  0147F6  EE20 F002          	lfsr	2,2
 30200  0147FA  5010               	movf	i2Port_SetPin@pInput,w,c
 30201  0147FC  26D9               	addwf	fsr2l,f,c
 30202  0147FE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30203  014800  22DA               	addwfc	fsr2h,f,c
 30204  014802  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30205  014806  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30206  01480A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30207  01480E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30208  014812  EC1C  F0AE         	call	i2_Byte_SetBit	;wreg free
 30209                           
 30210                           ;Port.c: 264: break;
 30211  014816  0012               	return	
 30212  014818                     
 30213                           ;Port.c: 266: pValue &= 1;
 30214  014818  0E01               	movlw	1
 30215  01481A  1613               	andwf	i2Port_SetPin@pValue,f,c
 30216                           
 30217                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 30218  01481C  EE20 F004          	lfsr	2,4
 30219  014820  5010               	movf	i2Port_SetPin@pInput,w,c
 30220  014822  26D9               	addwf	fsr2l,f,c
 30221  014824  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30222  014826  22DA               	addwfc	fsr2h,f,c
 30223  014828  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30224  01482C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30225  014830  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30226  014834  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30227  014838  EC1C  F0AE         	call	i2_Byte_SetBit	;wreg free
 30228                           
 30229                           ;Port.c: 269: }
 30230                           
 30231                           ;Port.c: 268: break;
 30232  01483C  0012               	return	
 30233  01483E                     i2l427:
 30234  01483E  5014               	movf	i2Port_SetPin@Type,w,c
 30235                           
 30236                           ; Switch size 1, requested type "space"
 30237                           ; Number of cases is 4, Range of values is 0 to 3
 30238                           ; switch strategies available:
 30239                           ; Name         Instructions Cycles
 30240                           ; simple_byte           13     7 (average)
 30241                           ;	Chosen strategy is simple_byte
 30242  014840  0A00               	xorlw	0	; case 0
 30243  014842  B4D8               	btfsc	status,2,c
 30244  014844  0012               	return	
 30245  014846  0A01               	xorlw	1	; case 1
 30246  014848  B4D8               	btfsc	status,2,c
 30247  01484A  D7BE               	goto	i2l430
 30248  01484C  0A03               	xorlw	3	; case 2
 30249  01484E  B4D8               	btfsc	status,2,c
 30250  014850  D7CE               	goto	i2l432
 30251  014852  0A01               	xorlw	1	; case 3
 30252  014854  A4D8               	btfss	status,2,c
 30253  014856  0012               	return	
 30254  014858  D7DF               	goto	i2l433
 30255  01485A                     __end_ofi2_Port_SetPin:
 30256                           	opt stack 0
 30257                           tosu	equ	0xFFF
 30258                           tosh	equ	0xFFE
 30259                           tosl	equ	0xFFD
 30260                           pclatu	equ	0xFFB
 30261                           pclath	equ	0xFFA
 30262                           tblptru	equ	0xFF8
 30263                           tblptrh	equ	0xFF7
 30264                           tblptrl	equ	0xFF6
 30265                           tablat	equ	0xFF5
 30266                           prodh	equ	0xFF4
 30267                           prodl	equ	0xFF3
 30268                           intcon	equ	0xFF2
 30269                           indf0	equ	0xFEF
 30270                           postinc0	equ	0xFEE
 30271                           fsr0h	equ	0xFEA
 30272                           fsr0l	equ	0xFE9
 30273                           wreg	equ	0xFE8
 30274                           indf1	equ	0xFE7
 30275                           postdec1	equ	0xFE5
 30276                           fsr1h	equ	0xFE2
 30277                           fsr1l	equ	0xFE1
 30278                           indf2	equ	0xFDF
 30279                           postinc2	equ	0xFDE
 30280                           postdec2	equ	0xFDD
 30281                           plusw2	equ	0xFDB
 30282                           fsr2h	equ	0xFDA
 30283                           fsr2l	equ	0xFD9
 30284                           status	equ	0xFD8
 30285                           
 30286 ;; *************** function i2_Word_GetPair *****************
 30287 ;; Defined at:
 30288 ;;		line 156 in file "Library/Types.c"
 30289 ;; Parameters:    Size  Location     Type
 30290 ;;  pInput          2   12[COMRAM] PTR struct Word
 30291 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 30292 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 30293 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 30294 ;;		 -> PortC(10), PortF(10), NULL(0), 
 30295 ;;  pPair           1   14[COMRAM] unsigned char 
 30296 ;; Auto vars:     Size  Location     Type
 30297 ;;		None
 30298 ;; Return value:  Size  Location     Type
 30299 ;;                  1    wreg      unsigned char 
 30300 ;; Registers used:
 30301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30302 ;; Tracked objects:
 30303 ;;		On entry : 0/0
 30304 ;;		On exit  : 0/0
 30305 ;;		Unchanged: 0/0
 30306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30307 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30310 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30311 ;;Total ram usage:        3 bytes
 30312 ;; Hardware stack levels used:    1
 30313 ;; Hardware stack levels required when called:    2
 30314 ;; This function calls:
 30315 ;;		i2_Byte_GetPair
 30316 ;; This function is called by:
 30317 ;;		i2_Port_SetPin
 30318 ;; This function uses a non-reentrant model
 30319 ;;
 30320                           
 30321                           	psect	text164
 30322  0162A2                     __ptext164:
 30323                           	opt stack 0
 30324  0162A2                     i2_Word_GetPair:
 30325                           	opt stack 13
 30326                           
 30327                           ;Types.c: 158: if (pPair >= 4)
 30328                           
 30329                           ;incstack = 0
 30330  0162A2  0E03               	movlw	3
 30331  0162A4  640F               	cpfsgt	i2Word_GetPair@pPair,c
 30332  0162A6  D00C               	goto	i2l781
 30333                           
 30334                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 30335  0162A8  0E01               	movlw	1
 30336  0162AA  240D               	addwf	i2Word_GetPair@pInput,w,c
 30337  0162AC  6E0A               	movwf	i2Byte_GetPair@pInput,c
 30338  0162AE  0E00               	movlw	0
 30339  0162B0  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 30340  0162B2  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 30341  0162B4  500F               	movf	i2Word_GetPair@pPair,w,c
 30342  0162B6  0FFC               	addlw	252
 30343  0162B8  6E0C               	movwf	i2Byte_GetPair@pPair,c
 30344  0162BA  ECCD  F0B2         	call	i2_Byte_GetPair	;wreg free
 30345  0162BE  0012               	return	
 30346  0162C0                     i2l781:
 30347                           
 30348                           ;Types.c: 160: else
 30349                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 30350  0162C0  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 30351  0162C4  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 30352  0162C8  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 30353  0162CC  ECCD  F0B2         	call	i2_Byte_GetPair	;wreg free
 30354  0162D0  0012               	return	
 30355  0162D2                     __end_ofi2_Word_GetPair:
 30356                           	opt stack 0
 30357                           tosu	equ	0xFFF
 30358                           tosh	equ	0xFFE
 30359                           tosl	equ	0xFFD
 30360                           pclatu	equ	0xFFB
 30361                           pclath	equ	0xFFA
 30362                           tblptru	equ	0xFF8
 30363                           tblptrh	equ	0xFF7
 30364                           tblptrl	equ	0xFF6
 30365                           tablat	equ	0xFF5
 30366                           prodh	equ	0xFF4
 30367                           prodl	equ	0xFF3
 30368                           intcon	equ	0xFF2
 30369                           indf0	equ	0xFEF
 30370                           postinc0	equ	0xFEE
 30371                           fsr0h	equ	0xFEA
 30372                           fsr0l	equ	0xFE9
 30373                           wreg	equ	0xFE8
 30374                           indf1	equ	0xFE7
 30375                           postdec1	equ	0xFE5
 30376                           fsr1h	equ	0xFE2
 30377                           fsr1l	equ	0xFE1
 30378                           indf2	equ	0xFDF
 30379                           postinc2	equ	0xFDE
 30380                           postdec2	equ	0xFDD
 30381                           plusw2	equ	0xFDB
 30382                           fsr2h	equ	0xFDA
 30383                           fsr2l	equ	0xFD9
 30384                           status	equ	0xFD8
 30385                           
 30386 ;; *************** function i2_Byte_GetPair *****************
 30387 ;; Defined at:
 30388 ;;		line 87 in file "Library/Types.c"
 30389 ;; Parameters:    Size  Location     Type
 30390 ;;  pInput          2    9[COMRAM] PTR struct Byte
 30391 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30392 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30393 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30394 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30395 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30396 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30397 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30398 ;;		 -> NULL(0), 
 30399 ;;  pPair           1   11[COMRAM] unsigned char 
 30400 ;; Auto vars:     Size  Location     Type
 30401 ;;		None
 30402 ;; Return value:  Size  Location     Type
 30403 ;;                  1    wreg      unsigned char 
 30404 ;; Registers used:
 30405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30406 ;; Tracked objects:
 30407 ;;		On entry : 0/0
 30408 ;;		On exit  : 0/0
 30409 ;;		Unchanged: 0/0
 30410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30411 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30414 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30415 ;;Total ram usage:        3 bytes
 30416 ;; Hardware stack levels used:    1
 30417 ;; Hardware stack levels required when called:    1
 30418 ;; This function calls:
 30419 ;;		i2_Byte_GetZone
 30420 ;; This function is called by:
 30421 ;;		i2_Word_GetPair
 30422 ;; This function uses a non-reentrant model
 30423 ;;
 30424                           
 30425                           	psect	text165
 30426  01659A                     __ptext165:
 30427                           	opt stack 0
 30428  01659A                     i2_Byte_GetPair:
 30429                           	opt stack 13
 30430                           
 30431                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30432                           
 30433                           ;incstack = 0
 30434  01659A  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30435  01659E  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30436  0165A2  0E04               	movlw	4
 30437  0165A4  6E03               	movwf	i2Byte_GetZone@pMax,c
 30438  0165A6  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30439  0165AA  0E02               	movlw	2
 30440  0165AC  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30441  0165AE  EC90  F0A9         	call	i2_Byte_GetZone	;wreg free
 30442  0165B2  0012               	return	
 30443  0165B4                     __end_ofi2_Byte_GetPair:
 30444                           	opt stack 0
 30445                           tosu	equ	0xFFF
 30446                           tosh	equ	0xFFE
 30447                           tosl	equ	0xFFD
 30448                           pclatu	equ	0xFFB
 30449                           pclath	equ	0xFFA
 30450                           tblptru	equ	0xFF8
 30451                           tblptrh	equ	0xFF7
 30452                           tblptrl	equ	0xFF6
 30453                           tablat	equ	0xFF5
 30454                           prodh	equ	0xFF4
 30455                           prodl	equ	0xFF3
 30456                           intcon	equ	0xFF2
 30457                           indf0	equ	0xFEF
 30458                           postinc0	equ	0xFEE
 30459                           fsr0h	equ	0xFEA
 30460                           fsr0l	equ	0xFE9
 30461                           wreg	equ	0xFE8
 30462                           indf1	equ	0xFE7
 30463                           postdec1	equ	0xFE5
 30464                           fsr1h	equ	0xFE2
 30465                           fsr1l	equ	0xFE1
 30466                           indf2	equ	0xFDF
 30467                           postinc2	equ	0xFDE
 30468                           postdec2	equ	0xFDD
 30469                           plusw2	equ	0xFDB
 30470                           fsr2h	equ	0xFDA
 30471                           fsr2l	equ	0xFD9
 30472                           status	equ	0xFD8
 30473                           
 30474 ;; *************** function i2_Byte_GetZone *****************
 30475 ;; Defined at:
 30476 ;;		line 64 in file "Library/Types.c"
 30477 ;; Parameters:    Size  Location     Type
 30478 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30479 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30480 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30481 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30482 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30483 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30484 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30485 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30486 ;;		 -> NULL(0), 
 30487 ;;  pMax            1    2[COMRAM] unsigned char 
 30488 ;;  pChunk          1    3[COMRAM] unsigned char 
 30489 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30490 ;; Auto vars:     Size  Location     Type
 30491 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30492 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30493 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30494 ;; Return value:  Size  Location     Type
 30495 ;;                  1    wreg      unsigned char 
 30496 ;; Registers used:
 30497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30498 ;; Tracked objects:
 30499 ;;		On entry : 0/0
 30500 ;;		On exit  : 0/0
 30501 ;;		Unchanged: 0/0
 30502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30503 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30504 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30505 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30506 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30507 ;;Total ram usage:        9 bytes
 30508 ;; Hardware stack levels used:    1
 30509 ;; This function calls:
 30510 ;;		Nothing
 30511 ;; This function is called by:
 30512 ;;		i2_Byte_GetPair
 30513 ;; This function uses a non-reentrant model
 30514 ;;
 30515                           
 30516                           	psect	text166
 30517  015320                     __ptext166:
 30518                           	opt stack 0
 30519  015320                     i2_Byte_GetZone:
 30520                           	opt stack 13
 30521                           
 30522                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30523                           
 30524                           ;incstack = 0
 30525  015320  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30526  015324  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30527  015328  0E00               	movlw	low (__mediumconst shr (0+16))
 30528  01532A  6EF8               	movwf	tblptru,c
 30529  01532C  0E0F               	movlw	(high __ramtop+-1)
 30530  01532E  64F7               	cpfsgt	tblptrh,c
 30531  015330  D003               	bra	i2u510_47
 30532  015332  0008               	tblrd		*
 30533  015334  50F5               	movf	tablat,w,c
 30534  015336  D005               	bra	i2u510_40
 30535  015338                     i2u510_47:
 30536  015338  CFF6 FFE9          	movff	tblptrl,fsr0l
 30537  01533C  CFF7 FFEA          	movff	tblptrh,fsr0h
 30538  015340  50EF               	movf	indf0,w,c
 30539  015342                     i2u510_40:
 30540  015342  6E09               	movwf	i2Byte_GetZone@Output,c
 30541                           
 30542                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30543  015344  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30544  015346  0D01               	mullw	1
 30545  015348  0E0F               	movlw	low _MASKS
 30546  01534A  24F3               	addwf	prodl,w,c
 30547  01534C  6EF6               	movwf	tblptrl,c
 30548  01534E  0EFD               	movlw	high _MASKS
 30549  015350  20F4               	addwfc	prodh,w,c
 30550  015352  6EF7               	movwf	tblptrh,c
 30551  015354                     	if	1	;There are 3 active tblptr bytes
 30552  015354  6AF8               	clrf	tblptru,c
 30553  015356  0E00               	movlw	low (__mediumconst shr (0+16))
 30554  015358  22F8               	addwfc	tblptru,f,c
 30555  01535A                     	endif
 30556  01535A  0008               	tblrd		*
 30557  01535C  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30558                           
 30559                           ;Types.c: 68: UINT8 Offset = 0;
 30560  015360  0E00               	movlw	0
 30561  015362  6E08               	movwf	i2Byte_GetZone@Offset,c
 30562                           
 30563                           ;Types.c: 70: while (pChunk >= pMax)
 30564  015364  D003               	goto	i2l732
 30565  015366                     
 30566                           ;Types.c: 71: {
 30567                           ;Types.c: 72: pChunk -= pMax;
 30568  015366  5003               	movf	i2Byte_GetZone@pMax,w,c
 30569  015368  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30570                           
 30571                           ;Types.c: 73: Offset += 1;
 30572  01536A  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30573  01536C                     i2l732:
 30574  01536C  5003               	movf	i2Byte_GetZone@pMax,w,c
 30575  01536E  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30576  015370  B0D8               	btfsc	status,0,c
 30577  015372  D7F9               	goto	i2l733
 30578                           
 30579                           ;Types.c: 74: }
 30580                           ;Types.c: 75: pChunk *= pChunkSize;
 30581  015374  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30582  015376  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30583  015378  50F3               	movf	prodl,w,c
 30584  01537A  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30585                           
 30586                           ;Types.c: 76: pChunk += Offset;
 30587  01537C  5008               	movf	i2Byte_GetZone@Offset,w,c
 30588  01537E  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30589                           
 30590                           ;Types.c: 78: Output >>= pChunk;
 30591  015380  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30592  015382  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30593  015384  D002               	goto	i2u512_40
 30594  015386                     i2u512_45:
 30595  015386  90D8               	bcf	status,0,c
 30596  015388  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30597  01538A                     i2u512_40:
 30598  01538A  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30599  01538C  D7FC               	goto	i2u512_45
 30600                           
 30601                           ;Types.c: 79: Output &= MASK;
 30602  01538E  5007               	movf	i2Byte_GetZone@MASK,w,c
 30603  015390  1609               	andwf	i2Byte_GetZone@Output,f,c
 30604                           
 30605                           ;Types.c: 80: return Output;
 30606  015392  5009               	movf	i2Byte_GetZone@Output,w,c
 30607  015394  0012               	return	
 30608  015396                     __end_ofi2_Byte_GetZone:
 30609                           	opt stack 0
 30610                           tosu	equ	0xFFF
 30611                           tosh	equ	0xFFE
 30612                           tosl	equ	0xFFD
 30613                           pclatu	equ	0xFFB
 30614                           pclath	equ	0xFFA
 30615                           tblptru	equ	0xFF8
 30616                           tblptrh	equ	0xFF7
 30617                           tblptrl	equ	0xFF6
 30618                           tablat	equ	0xFF5
 30619                           prodh	equ	0xFF4
 30620                           prodl	equ	0xFF3
 30621                           intcon	equ	0xFF2
 30622                           indf0	equ	0xFEF
 30623                           postinc0	equ	0xFEE
 30624                           fsr0h	equ	0xFEA
 30625                           fsr0l	equ	0xFE9
 30626                           wreg	equ	0xFE8
 30627                           indf1	equ	0xFE7
 30628                           postdec1	equ	0xFE5
 30629                           fsr1h	equ	0xFE2
 30630                           fsr1l	equ	0xFE1
 30631                           indf2	equ	0xFDF
 30632                           postinc2	equ	0xFDE
 30633                           postdec2	equ	0xFDD
 30634                           plusw2	equ	0xFDB
 30635                           fsr2h	equ	0xFDA
 30636                           fsr2l	equ	0xFD9
 30637                           status	equ	0xFD8
 30638                           
 30639 ;; *************** function i2_Byte_SetBit *****************
 30640 ;; Defined at:
 30641 ;;		line 32 in file "Library/Types.c"
 30642 ;; Parameters:    Size  Location     Type
 30643 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30644 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30645 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30646 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30647 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30648 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30649 ;;		 -> NULL(0), 
 30650 ;;  pBit            1    2[COMRAM] unsigned char 
 30651 ;;  pValue          1    3[COMRAM] unsigned char 
 30652 ;; Auto vars:     Size  Location     Type
 30653 ;;		None
 30654 ;; Return value:  Size  Location     Type
 30655 ;;                  1    wreg      void 
 30656 ;; Registers used:
 30657 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30658 ;; Tracked objects:
 30659 ;;		On entry : 0/0
 30660 ;;		On exit  : 0/0
 30661 ;;		Unchanged: 0/0
 30662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30663 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30665 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30666 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30667 ;;Total ram usage:        7 bytes
 30668 ;; Hardware stack levels used:    1
 30669 ;; This function calls:
 30670 ;;		Nothing
 30671 ;; This function is called by:
 30672 ;;		i2_Port_SetPin
 30673 ;; This function uses a non-reentrant model
 30674 ;;
 30675                           
 30676                           	psect	text167
 30677  015C38                     __ptext167:
 30678                           	opt stack 0
 30679  015C38                     i2_Byte_SetBit:
 30680                           	opt stack 15
 30681                           
 30682                           ;Types.c: 34: pValue &= 1;
 30683                           
 30684                           ;incstack = 0
 30685  015C38  0E01               	movlw	1
 30686  015C3A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30687                           
 30688                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30689  015C3C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30690  015C40  0E01               	movlw	1
 30691  015C42  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30692  015C44  2A05               	incf	??i2_Byte_SetBit,f,c
 30693  015C46  D002               	goto	i2u634_44
 30694  015C48                     i2u634_45:
 30695  015C48  90D8               	bcf	status,0,c
 30696  015C4A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30697  015C4C                     i2u634_44:
 30698  015C4C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30699  015C4E  D7FC               	goto	i2u634_45
 30700  015C50  5006               	movf	??i2_Byte_SetBit+1,w,c
 30701  015C52  0AFF               	xorlw	255
 30702  015C54  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30703  015C56  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30704  015C5A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30705  015C5E  5007               	movf	??i2_Byte_SetBit+2,w,c
 30706  015C60  16DF               	andwf	indf2,f,c
 30707                           
 30708                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30709  015C62  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30710  015C66  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30711  015C6A  2A05               	incf	??i2_Byte_SetBit,f,c
 30712  015C6C  D002               	goto	i2u635_44
 30713  015C6E                     i2u635_45:
 30714  015C6E  90D8               	bcf	status,0,c
 30715  015C70  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30716  015C72                     i2u635_44:
 30717  015C72  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30718  015C74  D7FC               	goto	i2u635_45
 30719  015C76  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30720  015C7A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30721  015C7E  5006               	movf	??i2_Byte_SetBit+1,w,c
 30722  015C80  12DF               	iorwf	indf2,f,c
 30723  015C82  0012               	return		;funcret
 30724  015C84                     __end_ofi2_Byte_SetBit:
 30725                           	opt stack 0
 30726                           tosu	equ	0xFFF
 30727                           tosh	equ	0xFFE
 30728                           tosl	equ	0xFFD
 30729                           pclatu	equ	0xFFB
 30730                           pclath	equ	0xFFA
 30731                           tblptru	equ	0xFF8
 30732                           tblptrh	equ	0xFF7
 30733                           tblptrl	equ	0xFF6
 30734                           tablat	equ	0xFF5
 30735                           prodh	equ	0xFF4
 30736                           prodl	equ	0xFF3
 30737                           intcon	equ	0xFF2
 30738                           indf0	equ	0xFEF
 30739                           postinc0	equ	0xFEE
 30740                           fsr0h	equ	0xFEA
 30741                           fsr0l	equ	0xFE9
 30742                           wreg	equ	0xFE8
 30743                           indf1	equ	0xFE7
 30744                           postdec1	equ	0xFE5
 30745                           fsr1h	equ	0xFE2
 30746                           fsr1l	equ	0xFE1
 30747                           indf2	equ	0xFDF
 30748                           postinc2	equ	0xFDE
 30749                           postdec2	equ	0xFDD
 30750                           plusw2	equ	0xFDB
 30751                           fsr2h	equ	0xFDA
 30752                           fsr2l	equ	0xFD9
 30753                           status	equ	0xFD8
 30754                           
 30755 ;; *************** function i2_MXK_SwitchTo *****************
 30756 ;; Defined at:
 30757 ;;		line 105 in file "Library/MXK.c"
 30758 ;; Parameters:    Size  Location     Type
 30759 ;;  pModule         1    wreg     enum E6927
 30760 ;; Auto vars:     Size  Location     Type
 30761 ;;  pModule         1    7[COMRAM] enum E6927
 30762 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30763 ;; Return value:  Size  Location     Type
 30764 ;;                  1    wreg      unsigned char 
 30765 ;; Registers used:
 30766 ;;		wreg, status,2, status,0, cstack
 30767 ;; Tracked objects:
 30768 ;;		On entry : 0/0
 30769 ;;		On exit  : 0/0
 30770 ;;		Unchanged: 0/0
 30771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30775 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30776 ;;Total ram usage:        2 bytes
 30777 ;; Hardware stack levels used:    1
 30778 ;; Hardware stack levels required when called:    1
 30779 ;; This function calls:
 30780 ;;		i2_delay_us
 30781 ;; This function is called by:
 30782 ;;		i2_Motor_Step
 30783 ;; This function uses a non-reentrant model
 30784 ;;
 30785                           
 30786                           	psect	text168
 30787  0161A6                     __ptext168:
 30788                           	opt stack 0
 30789  0161A6                     i2_MXK_SwitchTo:
 30790                           	opt stack 15
 30791                           
 30792                           ;incstack = 0
 30793                           ;i2MXK_SwitchTo@pModule stored from wreg
 30794  0161A6  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30795                           
 30796                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30797  0161A8  5086               	movf	3974,w,c	;volatile
 30798  0161AA  0B0F               	andlw	15
 30799  0161AC  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30800                           
 30801                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30802  0161AE  504B               	movf	_Bus_State,w,c
 30803  0161B0  A4D8               	btfss	status,2,c
 30804  0161B2  D002               	goto	i2l1730
 30805                           
 30806                           ;MXK.c: 110: return 0;
 30807  0161B4  0E00               	movlw	0
 30808  0161B6  0012               	return	
 30809  0161B8                     i2l1730:
 30810                           
 30811                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30812  0161B8  0E00               	movlw	0
 30813  0161BA  6E4B               	movwf	_Bus_State,c
 30814                           
 30815                           ;MXK.c: 114: if (CUR != pModule)
 30816  0161BC  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30817  0161BE  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30818  0161C0  B4D8               	btfsc	status,2,c
 30819  0161C2  D00A               	goto	i2l1732
 30820                           
 30821                           ;MXK.c: 115: {
 30822                           ;MXK.c: 116: PORTG &= ~(0xF);
 30823  0161C4  0EF0               	movlw	240
 30824  0161C6  1686               	andwf	3974,f,c	;volatile
 30825                           
 30826                           ;MXK.c: 117: PORTG |= pModule;
 30827  0161C8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30828  0161CA  1286               	iorwf	3974,f,c	;volatile
 30829                           
 30830                           ;MXK.c: 120: delay_us(10);
 30831  0161CC  0E00               	movlw	0
 30832  0161CE  6E02               	movwf	i2delay_us@us+1,c
 30833  0161D0  0E0A               	movlw	10
 30834  0161D2  6E01               	movwf	i2delay_us@us,c
 30835  0161D4  ECC4  F0AF         	call	i2_delay_us	;wreg free
 30836  0161D8                     i2l1732:
 30837                           
 30838                           ;MXK.c: 121: }
 30839                           ;MXK.c: 122: return 1;
 30840  0161D8  0E01               	movlw	1
 30841  0161DA  0012               	return	
 30842  0161DC                     __end_ofi2_MXK_SwitchTo:
 30843                           	opt stack 0
 30844                           tosu	equ	0xFFF
 30845                           tosh	equ	0xFFE
 30846                           tosl	equ	0xFFD
 30847                           pclatu	equ	0xFFB
 30848                           pclath	equ	0xFFA
 30849                           tblptru	equ	0xFF8
 30850                           tblptrh	equ	0xFF7
 30851                           tblptrl	equ	0xFF6
 30852                           tablat	equ	0xFF5
 30853                           prodh	equ	0xFF4
 30854                           prodl	equ	0xFF3
 30855                           intcon	equ	0xFF2
 30856                           indf0	equ	0xFEF
 30857                           postinc0	equ	0xFEE
 30858                           fsr0h	equ	0xFEA
 30859                           fsr0l	equ	0xFE9
 30860                           wreg	equ	0xFE8
 30861                           indf1	equ	0xFE7
 30862                           postdec1	equ	0xFE5
 30863                           fsr1h	equ	0xFE2
 30864                           fsr1l	equ	0xFE1
 30865                           indf2	equ	0xFDF
 30866                           postinc2	equ	0xFDE
 30867                           postdec2	equ	0xFDD
 30868                           plusw2	equ	0xFDB
 30869                           fsr2h	equ	0xFDA
 30870                           fsr2l	equ	0xFD9
 30871                           status	equ	0xFD8
 30872                           
 30873 ;; *************** function i2_delay_us *****************
 30874 ;; Defined at:
 30875 ;;		line 255 in file "Library/Types.c"
 30876 ;; Parameters:    Size  Location     Type
 30877 ;;  us              2    0[COMRAM] unsigned short 
 30878 ;; Auto vars:     Size  Location     Type
 30879 ;;  delay_us        4    2[COMRAM] unsigned long 
 30880 ;; Return value:  Size  Location     Type
 30881 ;;                  1    wreg      void 
 30882 ;; Registers used:
 30883 ;;		wreg, status,2, status,0
 30884 ;; Tracked objects:
 30885 ;;		On entry : 0/0
 30886 ;;		On exit  : 0/0
 30887 ;;		Unchanged: 0/0
 30888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30889 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30890 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30892 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30893 ;;Total ram usage:        6 bytes
 30894 ;; Hardware stack levels used:    1
 30895 ;; This function calls:
 30896 ;;		Nothing
 30897 ;; This function is called by:
 30898 ;;		i2_MXK_SwitchTo
 30899 ;; This function uses a non-reentrant model
 30900 ;;
 30901                           
 30902                           	psect	text169
 30903  015F88                     __ptext169:
 30904                           	opt stack 0
 30905  015F88                     i2_delay_us:
 30906                           	opt stack 15
 30907                           
 30908                           ;Types.c: 256: unsigned long u;
 30909                           ;Types.c: 257: while (us--) {
 30910                           
 30911                           ;incstack = 0
 30912  015F88  D016               	goto	i2u638_40
 30913  015F8A                     i2l9668:
 30914                           
 30915                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30916  015F8A  0E00               	movlw	0
 30917  015F8C  6E03               	movwf	i2delay_us@u,c
 30918  015F8E  0E00               	movlw	0
 30919  015F90  6E04               	movwf	i2delay_us@u+1,c
 30920  015F92  0E00               	movlw	0
 30921  015F94  6E05               	movwf	i2delay_us@u+2,c
 30922  015F96  0E00               	movlw	0
 30923  015F98  6E06               	movwf	i2delay_us@u+3,c
 30924  015F9A                     i2l9670:
 30925  015F9A  5003               	movf	i2delay_us@u,w,c
 30926  015F9C  1004               	iorwf	i2delay_us@u+1,w,c
 30927  015F9E  1005               	iorwf	i2delay_us@u+2,w,c
 30928  015FA0  1006               	iorwf	i2delay_us@u+3,w,c
 30929  015FA2  A4D8               	btfss	status,2,c
 30930  015FA4  D008               	goto	i2u638_40
 30931  015FA6  F000               	nop		; ;# 
 30932  015FA8  0E01               	movlw	1
 30933  015FAA  2603               	addwf	i2delay_us@u,f,c
 30934  015FAC  0E00               	movlw	0
 30935  015FAE  2204               	addwfc	i2delay_us@u+1,f,c
 30936  015FB0  2205               	addwfc	i2delay_us@u+2,f,c
 30937  015FB2  2206               	addwfc	i2delay_us@u+3,f,c
 30938  015FB4  D7F2               	goto	i2l9670
 30939  015FB6                     i2u638_40:
 30940  015FB6  0601               	decf	i2delay_us@us,f,c
 30941  015FB8  A0D8               	btfss	status,0,c
 30942  015FBA  0602               	decf	i2delay_us@us+1,f,c
 30943  015FBC  2801               	incf	i2delay_us@us,w,c
 30944  015FBE  E1E5               	bnz	i2l9668
 30945  015FC0  2802               	incf	i2delay_us@us+1,w,c
 30946  015FC2  B4D8               	btfsc	status,2,c
 30947  015FC4  0012               	return	
 30948  015FC6  D7E1               	goto	i2l832
 30949  015FC8                     __end_ofi2_delay_us:
 30950                           	opt stack 0
 30951                           tosu	equ	0xFFF
 30952                           tosh	equ	0xFFE
 30953                           tosl	equ	0xFFD
 30954                           pclatu	equ	0xFFB
 30955                           pclath	equ	0xFFA
 30956                           tblptru	equ	0xFF8
 30957                           tblptrh	equ	0xFF7
 30958                           tblptrl	equ	0xFF6
 30959                           tablat	equ	0xFF5
 30960                           prodh	equ	0xFF4
 30961                           prodl	equ	0xFF3
 30962                           intcon	equ	0xFF2
 30963                           indf0	equ	0xFEF
 30964                           postinc0	equ	0xFEE
 30965                           fsr0h	equ	0xFEA
 30966                           fsr0l	equ	0xFE9
 30967                           wreg	equ	0xFE8
 30968                           indf1	equ	0xFE7
 30969                           postdec1	equ	0xFE5
 30970                           fsr1h	equ	0xFE2
 30971                           fsr1l	equ	0xFE1
 30972                           indf2	equ	0xFDF
 30973                           postinc2	equ	0xFDE
 30974                           postdec2	equ	0xFDD
 30975                           plusw2	equ	0xFDB
 30976                           fsr2h	equ	0xFDA
 30977                           fsr2l	equ	0xFD9
 30978                           status	equ	0xFD8
 30979                           
 30980 ;; *************** function i2_MXK_Release *****************
 30981 ;; Defined at:
 30982 ;;		line 130 in file "Library/MXK.c"
 30983 ;; Parameters:    Size  Location     Type
 30984 ;;		None
 30985 ;; Auto vars:     Size  Location     Type
 30986 ;;		None
 30987 ;; Return value:  Size  Location     Type
 30988 ;;                  1    wreg      unsigned char 
 30989 ;; Registers used:
 30990 ;;		wreg, status,2, status,0
 30991 ;; Tracked objects:
 30992 ;;		On entry : 0/0
 30993 ;;		On exit  : 0/0
 30994 ;;		Unchanged: 0/0
 30995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31000 ;;Total ram usage:        0 bytes
 31001 ;; Hardware stack levels used:    1
 31002 ;; This function calls:
 31003 ;;		Nothing
 31004 ;; This function is called by:
 31005 ;;		i2_Motor_Step
 31006 ;; This function uses a non-reentrant model
 31007 ;;
 31008                           
 31009                           	psect	text170
 31010  0167C8                     __ptext170:
 31011                           	opt stack 0
 31012  0167C8                     i2_MXK_Release:
 31013                           	opt stack 16
 31014                           
 31015                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 31016                           
 31017                           ;incstack = 0
 31018  0167C8  0E01               	movlw	1
 31019  0167CA  6E4B               	movwf	_Bus_State,c
 31020                           
 31021                           ;MXK.c: 135: return 1;
 31022                           ;	Return value of i2_MXK_Release is never used
 31023  0167CC  0012               	return	
 31024  0167CE                     __end_ofi2_MXK_Release:
 31025                           	opt stack 0
 31026                           tosu	equ	0xFFF
 31027                           tosh	equ	0xFFE
 31028                           tosl	equ	0xFFD
 31029                           pclatu	equ	0xFFB
 31030                           pclath	equ	0xFFA
 31031                           tblptru	equ	0xFF8
 31032                           tblptrh	equ	0xFF7
 31033                           tblptrl	equ	0xFF6
 31034                           tablat	equ	0xFF5
 31035                           prodh	equ	0xFF4
 31036                           prodl	equ	0xFF3
 31037                           intcon	equ	0xFF2
 31038                           indf0	equ	0xFEF
 31039                           postinc0	equ	0xFEE
 31040                           fsr0h	equ	0xFEA
 31041                           fsr0l	equ	0xFE9
 31042                           wreg	equ	0xFE8
 31043                           indf1	equ	0xFE7
 31044                           postdec1	equ	0xFE5
 31045                           fsr1h	equ	0xFE2
 31046                           fsr1l	equ	0xFE1
 31047                           indf2	equ	0xFDF
 31048                           postinc2	equ	0xFDE
 31049                           postdec2	equ	0xFDD
 31050                           plusw2	equ	0xFDB
 31051                           fsr2h	equ	0xFDA
 31052                           fsr2l	equ	0xFD9
 31053                           status	equ	0xFD8
 31054                           
 31055 ;; *************** function i2_MXK_Queue *****************
 31056 ;; Defined at:
 31057 ;;		line 144 in file "Library/MXK.c"
 31058 ;; Parameters:    Size  Location     Type
 31059 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 31060 ;;		 -> Absolute function(1), Motor_Step(1), 
 31061 ;; Auto vars:     Size  Location     Type
 31062 ;;		None
 31063 ;; Return value:  Size  Location     Type
 31064 ;;                  1    wreg      void 
 31065 ;; Registers used:
 31066 ;;		wreg, status,2, status,0
 31067 ;; Tracked objects:
 31068 ;;		On entry : 0/0
 31069 ;;		On exit  : 0/0
 31070 ;;		Unchanged: 0/0
 31071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31072 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31075 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31076 ;;Total ram usage:        3 bytes
 31077 ;; Hardware stack levels used:    1
 31078 ;; This function calls:
 31079 ;;		Nothing
 31080 ;; This function is called by:
 31081 ;;		i2_Motor_Step
 31082 ;; This function uses a non-reentrant model
 31083 ;;
 31084                           
 31085                           	psect	text171
 31086  01672E                     __ptext171:
 31087                           	opt stack 0
 31088  01672E                     i2_MXK_Queue:
 31089                           	opt stack 16
 31090                           
 31091                           ;MXK.c: 146: lQueue = pCallback;
 31092                           
 31093                           ;incstack = 0
 31094  01672E  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 31095  016732  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 31096  016736  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 31097  01673A  0012               	return		;funcret
 31098  01673C                     __end_ofi2_MXK_Queue:
 31099                           	opt stack 0
 31100                           tosu	equ	0xFFF
 31101                           tosh	equ	0xFFE
 31102                           tosl	equ	0xFFD
 31103                           pclatu	equ	0xFFB
 31104                           pclath	equ	0xFFA
 31105                           tblptru	equ	0xFF8
 31106                           tblptrh	equ	0xFF7
 31107                           tblptrl	equ	0xFF6
 31108                           tablat	equ	0xFF5
 31109                           prodh	equ	0xFF4
 31110                           prodl	equ	0xFF3
 31111                           intcon	equ	0xFF2
 31112                           indf0	equ	0xFEF
 31113                           postinc0	equ	0xFEE
 31114                           fsr0h	equ	0xFEA
 31115                           fsr0l	equ	0xFE9
 31116                           wreg	equ	0xFE8
 31117                           indf1	equ	0xFE7
 31118                           postdec1	equ	0xFE5
 31119                           fsr1h	equ	0xFE2
 31120                           fsr1l	equ	0xFE1
 31121                           indf2	equ	0xFDF
 31122                           postinc2	equ	0xFDE
 31123                           postdec2	equ	0xFDD
 31124                           plusw2	equ	0xFDB
 31125                           fsr2h	equ	0xFDA
 31126                           fsr2l	equ	0xFD9
 31127                           status	equ	0xFD8
 31128                           tosu	equ	0xFFF
 31129                           tosh	equ	0xFFE
 31130                           tosl	equ	0xFFD
 31131                           pclatu	equ	0xFFB
 31132                           pclath	equ	0xFFA
 31133                           tblptru	equ	0xFF8
 31134                           tblptrh	equ	0xFF7
 31135                           tblptrl	equ	0xFF6
 31136                           tablat	equ	0xFF5
 31137                           prodh	equ	0xFF4
 31138                           prodl	equ	0xFF3
 31139                           intcon	equ	0xFF2
 31140                           indf0	equ	0xFEF
 31141                           postinc0	equ	0xFEE
 31142                           fsr0h	equ	0xFEA
 31143                           fsr0l	equ	0xFE9
 31144                           wreg	equ	0xFE8
 31145                           indf1	equ	0xFE7
 31146                           postdec1	equ	0xFE5
 31147                           fsr1h	equ	0xFE2
 31148                           fsr1l	equ	0xFE1
 31149                           indf2	equ	0xFDF
 31150                           postinc2	equ	0xFDE
 31151                           postdec2	equ	0xFDD
 31152                           plusw2	equ	0xFDB
 31153                           fsr2h	equ	0xFDA
 31154                           fsr2l	equ	0xFD9
 31155                           status	equ	0xFD8
 31156                           
 31157                           	psect	text172
 31158  000000                     __ptext172:
 31159                           	opt stack 0
 31160                           tosu	equ	0xFFF
 31161                           tosh	equ	0xFFE
 31162                           tosl	equ	0xFFD
 31163                           pclatu	equ	0xFFB
 31164                           pclath	equ	0xFFA
 31165                           tblptru	equ	0xFF8
 31166                           tblptrh	equ	0xFF7
 31167                           tblptrl	equ	0xFF6
 31168                           tablat	equ	0xFF5
 31169                           prodh	equ	0xFF4
 31170                           prodl	equ	0xFF3
 31171                           intcon	equ	0xFF2
 31172                           indf0	equ	0xFEF
 31173                           postinc0	equ	0xFEE
 31174                           fsr0h	equ	0xFEA
 31175                           fsr0l	equ	0xFE9
 31176                           wreg	equ	0xFE8
 31177                           indf1	equ	0xFE7
 31178                           postdec1	equ	0xFE5
 31179                           fsr1h	equ	0xFE2
 31180                           fsr1l	equ	0xFE1
 31181                           indf2	equ	0xFDF
 31182                           postinc2	equ	0xFDE
 31183                           postdec2	equ	0xFDD
 31184                           plusw2	equ	0xFDB
 31185                           fsr2h	equ	0xFDA
 31186                           fsr2l	equ	0xFD9
 31187                           status	equ	0xFD8
 31188                           
 31189                           	psect	rparam
 31190  0000                     tosu	equ	0xFFF
 31191                           tosh	equ	0xFFE
 31192                           tosl	equ	0xFFD
 31193                           pclatu	equ	0xFFB
 31194                           pclath	equ	0xFFA
 31195                           tblptru	equ	0xFF8
 31196                           tblptrh	equ	0xFF7
 31197                           tblptrl	equ	0xFF6
 31198                           tablat	equ	0xFF5
 31199                           prodh	equ	0xFF4
 31200                           prodl	equ	0xFF3
 31201                           intcon	equ	0xFF2
 31202                           indf0	equ	0xFEF
 31203                           postinc0	equ	0xFEE
 31204                           fsr0h	equ	0xFEA
 31205                           fsr0l	equ	0xFE9
 31206                           wreg	equ	0xFE8
 31207                           indf1	equ	0xFE7
 31208                           postdec1	equ	0xFE5
 31209                           fsr1h	equ	0xFE2
 31210                           fsr1l	equ	0xFE1
 31211                           indf2	equ	0xFDF
 31212                           postinc2	equ	0xFDE
 31213                           postdec2	equ	0xFDD
 31214                           plusw2	equ	0xFDB
 31215                           fsr2h	equ	0xFDA
 31216                           fsr2l	equ	0xFD9
 31217                           status	equ	0xFD8
 31218                           
 31219                           	psect	temp
 31220  000051                     btemp:
 31221                           	opt stack 0
 31222  000051                     	ds	1
 31223  0000                     int$flags	set	btemp
 31224  0000                     wtemp6	set	btemp+1
 31225                           tosu	equ	0xFFF
 31226                           tosh	equ	0xFFE
 31227                           tosl	equ	0xFFD
 31228                           pclatu	equ	0xFFB
 31229                           pclath	equ	0xFFA
 31230                           tblptru	equ	0xFF8
 31231                           tblptrh	equ	0xFF7
 31232                           tblptrl	equ	0xFF6
 31233                           tablat	equ	0xFF5
 31234                           prodh	equ	0xFF4
 31235                           prodl	equ	0xFF3
 31236                           intcon	equ	0xFF2
 31237                           indf0	equ	0xFEF
 31238                           postinc0	equ	0xFEE
 31239                           fsr0h	equ	0xFEA
 31240                           fsr0l	equ	0xFE9
 31241                           wreg	equ	0xFE8
 31242                           indf1	equ	0xFE7
 31243                           postdec1	equ	0xFE5
 31244                           fsr1h	equ	0xFE2
 31245                           fsr1l	equ	0xFE1
 31246                           indf2	equ	0xFDF
 31247                           postinc2	equ	0xFDE
 31248                           postdec2	equ	0xFDD
 31249                           plusw2	equ	0xFDB
 31250                           fsr2h	equ	0xFDA
 31251                           fsr2l	equ	0xFD9
 31252                           status	equ	0xFD8


Data Sizes:
    Strings     241
    Constant    730
    Data        29
    BSS         824
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     63     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     256
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 76
		 -> STR_16(CODE[21]), STR_15(CODE[21]), STR_14(CODE[21]), STR_13(CODE[21]), 
		 -> STR_12(CODE[21]), STR_11(CODE[3]), STR_10(CODE[76]), STR_9(CODE[3]), 
		 -> STR_8(CODE[14]), STR_7(CODE[3]), STR_6(CODE[46]), STR_5(CODE[3]), 
		 -> STR_4(CODE[46]), STR_3(CODE[3]), STR_2(CODE[60]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _move_and_rotate->_irobot_rotate
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1
    _mode4->_findClosestWall

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2032195
                                              8 BANK3      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0  293376
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                           _delay_ms
                    _findClosestWall
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                           _safeToGo
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                     10    10      0  114120
                                              0 BANK3      6     6      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                      _irobot_rotate
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  113744
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      0     0      0   20100
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                       11     7      4    9721
                                             29 BANK0     11     7      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  175853
                                             44 BANK0      2     2      0
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                 _irobot_stop_motion
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3662
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  194792
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   93644
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    17     12    6795
                                             21 BANK0     20     8     12
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1249
                                             57 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    4447
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    1523
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4    8425
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3703
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  999008
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362768
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              1 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      5     2      3
                                              0 BANK1      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291732
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262269
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94893
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1774
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96823
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _delay_ms
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     49A      12        0.0%
DATA                 0      0     5C6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Sep 16 21:50:20 2017

                                 _update_angle 66C4                                  i2_Timer0_Stop 67C2  
                             SPI_Init@pChannel 00EB                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 3898                                              _A 004C  
                        __end_of_irobot_rotate 378C                                              l8 3F26  
                                 ___fldiv@aexp 00D2                                   ___fldiv@bexp 00D1  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6546                                   ___fldiv@sign 00C6  
                                           l11 30A6                                             l12 3090  
                                           l90 2FDC                                             l85 2ED8  
                                           l87 2F46                                             l89 2FB2  
                                 ___awdiv@sign 00BF                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00BC                                  _HMI_DIPSwitch 65E4  
                           LCD_DrawField@pSize 00D2                             LCD_DrawField@count 00D8  
                   __end_of_irobot_stop_motion 5E36                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 6760                           ADC_ClockDivision@reg 00BB  
                                          l120 4D0C                                            l121 4D22  
                                          l122 4D38                                            l220 595E  
                                          l117 4D4E                                            l221 5922  
                                          l118 4CF6                                            l230 5BBA  
                                          l222 596E                                            l223 5940  
                                  ?_LED_Toggle 0001                                            l234 5DDE  
                                          l235 5DAE                                            l227 5BD6  
                                          l403 2B66                                            l412 2842  
                                          l228 5B9E                                            l340 49BA  
                                          l404 2B06                                            l237 5DC6  
                                          l421 27D6                                            l413 26D8  
                                          l341 49C8                                            l405 2B96  
                                ??_Console_Tab 00C2                                            l430 409A  
                                          l414 285E                                            l350 4AC2  
                                          l342 49D6                                            l510 1D04  
                                          l406 2B1E                                            l415 26FE  
                                          l351 4A52                                            l343 49E4  
                                          l511 1E14                                            l407 2B36  
                                          l183 4B76                                            l432 40C4  
                                          l600 04B2                                            l344 49F2  
                                          l512 1D26                                            l408 2B4E  
                                          l184 4B50                                            l433 40F4  
                                          l417 276A                                            l601 0646  
                                          l353 4A60                                            l337 4A1C  
                                          l345 4A00                                            l610 06CE  
                                          l602 04E4                                            l354 4A6E  
                                          l346 4A0E                                            l338 49AC  
                                          l370 494C                                            l427 411E  
                                          l611 071C                                            l603 0658  
                                          l355 4A7C                                            l363 4976  
                                          l371 495A                                            l531 17BE  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 4A8A  
                                          l372 4968                                            l364 4906  
                                          l532 17E2                                            l516 1D6E  
                                          l357 4A98                                            l509 1DF8  
                                          l614 084C                                            l358 4AA6  
                                          l366 4914                                            l526 1802  
                                          l615 0844                                            l607 07B8  
                                          l359 4AB4                                            l367 4922  
                                          l519 1DB6                                            l616 085E  
                                          l608 0680                                            l368 4930  
                                          l528 1820                                            l393 5A90  
                                          l617 0848                                            l609 07D6  
                                          l369 493E                                            l529 179E  
                                          l483 1B64                                            l732 4C90  
                                          l900 18DC                                            l476 1C3C  
                                          l733 4C84                                            l901 18E0  
                                          l389 57E6                                            l477 1AAE  
                                          l397 5D5A                                            l910 1904  
                                          l902 18E4                                            l726 4524  
                                          l478 1C58                                            l486 1BD0  
                                          l654 638C                                            l911 1908  
                                          l903 18E8                                            l727 4518  
                                          l479 1AF8                                            l655 6384  
                                          l912 190C                                            l904 18EC  
                                          l824 571A                                            l832 5B48  
                                          l913 1910                                            l905 18F0  
                                          l921 5690                                            l673 6264  
                                          l657 6388                                            l681 55E8  
                                          l914 1914                                            l906 18F4  
                                          l922 565C                                            l930 3D64  
                                          l915 1918                                            l907 18F8  
                                          l819 522A                                            l916 191C  
                                          l908 18FC                                            l860 183C  
                                          l684 55FE                                            l781 60AE  
                                          l853 1924                                            l917 1920  
                                          l909 1900                                            l861 1840  
                                          l597 04C0                                            l870 1864  
                                          l862 1844                                            l854 1828  
                                          l598 04A8                                            l678 5624  
                                          l686 560E                                            l871 1868  
                                          l863 1848                                            l599 04D0  
                                          l679 55D8                                            l880 188C  
                                          l872 186C                                            l864 184C  
                                          l856 182C                                            l928 3DE4  
                                          l776 5E66                                            l881 1890  
                                          l873 1870                                            l865 1850  
                                          l857 1830                                            l929 3DB4  
                                          l890 18B4                                            l882 1894  
                                          l874 1874                                            l866 1854  
                                          l858 1834                                            l891 18B8  
                                          l883 1898                                            l875 1878  
                                          l867 1858                                            l859 1838  
                                          l892 18BC                                            l884 189C  
                                          l876 187C                                            l868 185C  
                                          l893 18C0                                            l885 18A0  
                                          l877 1880                                            l869 1860  
                                          l894 18C4                                            l886 18A4  
                                          l878 1884                                            l990 4E18  
                                          l895 18C8                                            l887 18A8  
                                          l879 1888                                            l983 4C14  
                                          l896 18CC                                            l888 18AC  
                                          l976 4F32                                            l992 4E28  
                                          l984 4B98                                            l897 18D0  
                                          l889 18B0                                            l985 4C10  
                                          l898 18D4                                            l978 4F42  
                                          l899 18D8                                            l997 59F6  
                                          l999 5A1A                                            _PR2 000FCB  
                                          _dip 033E                                            _val 007D  
                              __end_of_ADC_Off 67A2                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D3                                   _Word_GetPair 6082  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 00C1                     __end_of_ADC_ConversionTime 5DA8  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00CA                             Console_MakeField@y 00CB  
                                   _TXSTA1bits 000FAD                                _update_distance 66B2  
                                 Console_Tab@c 00C9                                   Console_Tab@i 00C8  
                          LCD_DrawField@pField 00CC                                   Console_Tab@t 00C7  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 00D5  
                                 ___flmul@bexp 00DA                                     i2_delay_us 5F88  
                         Port_Set@TypeRequired 00DC                                   ___flmul@sign 00D4  
                                 ___flmul@temp 00DF                                   ___flmul@prod 00DB  
                            Console_FormFeed@x 00BC                              Console_FormFeed@y 00BD  
                          LCD_DrawField@pPoint 00CE                                 ?_LCD_DrawField 00CC  
                        Port_SetPinType@Output 00E4                                Port_SetPin@Type 00CD  
                              Port_SetPin@pPin 00CB                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C3                                __end_of_LED_Set 5BE8  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 47B0  
                                 ___fltol@exp1 00F8                                   _Word_SetPair 5E36  
                                         l1000 5A36                                           l1010 418E  
                                         l1004 5886                                  ?_Byte_GetZone 00BA  
                                         l1005 58B4                                           l1200 4444  
                                         l1040 288C                                           l1201 4498  
                                         l1009 419A                                           l1041 2892  
                                         l1202 44B4                                           l1042 2898  
                                         l1043 289E                                           l1204 44DE  
                                         l1300 4FC4                                           l1036 29E8  
                                         l1044 28A4                                           l1205 44C4  
                                         l1301 4FC8                                           l1045 28AA  
                                         l1037 2886                                           l2021 5816  
                                         l2101 2D28                                           l1302 4FD2  
                                         l1062 20C0                                           l2110 5EFC  
                                         l2030 580E                                           l2022 57F2  
                                         l2102 2C6C                                           l1207 44F0  
                                         l1303 4FE0                                           l1063 20EE  
                                         l1047 2950                                           l2031 5812  
                                         l2103 2CB4                                           l1056 1F50  
                                         l2112 5EE8                                           l2024 57F6  
                                         l2040 39B4                                           l2104 2C72  
                                         l1313 5D88                                           l1153 232E  
                                         l3001 0462                                           l1057 2116  
                                         l2025 57FA                                           l2041 39BA  
                                         l3002 048C                                           l3010 23CA  
                                         l1082 4014                                           l1058 1F58  
                                         l1146 514C                                           l2114 5EF0  
                                         l2026 57FE                                           l2042 39C0  
                                         l3003 0482                                           l3011 23BA  
                                         l1059 1F82                                           l2027 5802  
                                         l2035 3A4C                                           l2051 3A20  
                                         l2043 39C6                                           l1084 401C  
                                         l2028 5806                                           l2044 39CC  
                                         l2036 399E                                           l3021 249A  
                                         l3013 2426                                           l1077 3FE4  
                                         l2029 580A                                           l1254 66A6  
                                         l2118 5704                                           l2310 48B8  
                                         l3022 24EC                                           l3014 2408  
                                         l3006 237A                                           l1158 6004  
                                         l2070 4EF2                                           l2062 4EAC  
                                         l2046 39E0                                           l2038 39A8  
                                         l2119 56C6                                           l3007 238A  
                                         l1079 3FF4                                           l2039 39AE  
                                         l1280 5046                                           l2144 5ACE  
                                         l3016 2474                                           l3008 23B2  
                                         l3017 2464                                           l2049 3A0C  
                                         l2401 3672                                           l2074 4F10  
                                         l2066 4ECC                                           l2058 4E92  
                                         l2162 3716                                           l2330 50DC  
                                         l1283 50A8                                           l2139 4630  
                                         l2323 5CAC                                           l2163 3702  
                                         l2331 50C8                                           l2411 3B7E  
                                         l2316 4238                                           l1276 502E  
                                         l2308 4886                                           l2156 36AE  
                                         l2340 0A3A                                           l2412 3B84  
                                         l2317 4264                                           l2173 5E1A  
                                         l2413 3B8A                                           l2318 4290  
                                         l1294 4FE8                                           l1630 34BA  
                                         l2430 250C                                           l2326 5CC8  
                                         l2166 3764                                           l2158 36B4  
                                         l2350 0BC0                                           l2342 0A84  
                                         l2414 3B90                                           l1295 4FAE  
                                         l1631 3516                                           l2431 2520  
                                         l2095 2C28                                           l2167 373E  
                                         l2159 36D6                                           l2407 3B72  
                                         l1296 5012                                           l1632 34FA  
                                         l2432 2550                                           l2440 254A  
                                         l2096 2BE2                                           l2352 0C46  
                                         l2344 0B46                                           l2408 3C1E  
                                         l1297 4FB8                                           l2441 25C4  
                                         l2361 0D6A                                           l2353 0C9C  
                                         l2345 0AA4                                           l2337 090C  
                                         l2409 3B78                                           l1298 4FBC  
                                         l1730 5F1C                                           l2098 2C58  
                                         l1299 4FC0                                           l1627 3562  
                                         l2443 25DE                                           l2099 2C3C  
                                         l2371 0EDE                                           l2363 0E0A  
                                         l2347 0ADC                                           l2339 09AE  
                                         l1724 6050                                           l1732 5F44  
                                         l1628 3558                                           l2620 42DA  
                                         l2364 0E3A                                           l1629 34D8  
                                         l2621 42F0                                           l2437 258C  
                                         l1726 607E                                           l2438 2528  
                                         l2366 0E86                                           l1735 657A  
                                         l2623 431A                                           l2447 2634  
                                         l2439 2540                                           l2359 0D36  
                                         l2624 430E                                           l2448 2692  
                                         l2376 1092                                           l2368 0F48  
                                         l2449 263A                                           l2377 0FF8  
                                         l2369 0EA6                                           l2385 3B42  
                                         l2386 3AF8                                           l2803 43BA  
                                         l1827 335A                                           l2627 4350  
                                         l2379 1030                                           l2395 35BC  
                                         l2804 43AA                                           l1828 337A  
                                         l2628 435E                                           l2396 35A4  
                                         l2629 4372                                           l2807 4414  
                                         l2808 4426                                           l1784 31F4  
                                         l1873 60F4                                           l1785 3202  
                                         l2690 3860                                           l2682 37B2  
                                         l1787 320C                                           l2691 3850  
                                         l2860 5308                                           l2684 3834  
                                         l2861 5316                                           l2693 3886  
                                         l2685 3820                                           l2870 59C8  
                                         l2871 59D6                                           l2951 11A6  
                                         l2943 10C6                                           l2856 52D2  
                                         l2944 10F4                                           l2857 52C6  
                                         l2961 1322                                           l2953 11D4  
                                         l2945 10EA                                           l2866 599E  
                                         l2970 13CC                                           l2962 12F8  
                                         l2954 12D6                                           l2867 5992  
                                         l2971 13FA                                           l2963 130E  
                                         l2955 1252                                           l2947 1124  
                                         l2972 1430                                           l2956 128A  
                                         l2948 1152                                           l2980 005A  
                                         l2973 1440                                           l2957 127E  
                                         l2949 1148                                           l2981 0078  
                                         l2974 1444                                           l2958 12D2  
                                         l2990 033A                                           l2982 00A2  
                                         l2991 0350                                           l2983 009C  
                                         l2968 137C                                           l2984 00B4  
                                         l2985 00DC                                           l2977 001E  
                                         l2978 0048                                           l2979 0042  
                                         l2996 03BE                                           l2989 0364  
                                         l2998 040E                                           l2999 0434  
                               ??_Console_Init 00BA                          Port_SetPinType@pInput 00E0  
                                         STR_1 FFFB                                           STR_2 FF59  
                                         STR_3 FFFB                                           STR_4 FF95  
                                         STR_5 FFFB                                           STR_6 FF95  
                                         STR_7 FFFB                                           STR_8 FFED  
                                         STR_9 FFFB                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _LATD 000F8C                                           _LATE 000F8D  
                                         _LATF 000F8E                    __size_of_MXK_InitTestButton 001E  
                                         _LATG 000F8F                            __end_of_GetPortPORT 4AF2  
                     __end_of_irobot_song_play 669E                                           _PIR1 000F9E  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u9040 3DD0                            __end_of_GetPortTRIS 49A6  
                                         u9050 5882                                           u9060 58AC  
                                         u9240 5D06                                           u9400 43C0  
                                         u9314 4DC8                                           u9315 4DC2  
                                         u9260 5B80                                           u9245 5D00  
                                         u9190 4320                                           u8720 4C5A  
                                         u8810 5EB0                                           u9370 5EDC  
                                         u8740 4CC0                                           u9540 33C6  
                                         u9460 5758                                           u8900 4E6C  
                                         u9525 3312                                           u8910 4E72  
                                         u8815 5EAA                                           u8727 4C50  
                                         u9560 61FE                                           u8745 4CBA  
                                         u8930 52D8                                           u8834 4560  
                                         u8835 455A                                           _SPI1 037A  
                                         u8764 58D4                                           u8844 4592  
                                         u8780 51C4                                           _SPI2 0385  
                                         u8765 58CE                                           u8845 458C  
                                         u9565 61F8                                           u8774 5906  
                                         u8775 5900                                           u8960 59A4  
                                         u9905 176A                                           u9770 5404  
                                         u9835 1496                                           u9748 3176  
                                         u9845 14AE                                           u9950 405E  
                                         u9855 14C6                                           u9960 406A  
                                         _TMR0 000FD6                                           u8985 66E4  
                                         u9865 14E8                                           u9698 303A  
                                         u8986 66E6                                           u9699 304E  
                                         u9875 1668                                           u9885 16E6  
                                         u9895 1728                                           u9995 515C  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 00BF  
                                         _gISR 0060                             Event_DIPSwitch@Bar 00D4  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 00BD  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 00C9                                           _dist 0069  
                                ?_Byte_SetByte 00BA                                  ?_Byte_SetPair 00C5  
                              __end_of_SPI_DCS 6272                                           _main 3B6E  
                   irobot_leds@powerLuminosity 00CC                                           _init 485A  
                                         _mode 033C                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 00C5                                           _itos 3D26  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 00BA  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 52A8                                  ??_Byte_SetBit 00BE  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 00BF                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 00CB                              Timer0_Init@DIVIDE 00D1  
                              ?_SPI_DisableISR 00BA                               Motor_Move@pMotor 00BD  
                          HMI_SetButton@pValue 00C0                                  Console_Init@x 00BC  
                                Console_Init@y 00BD                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FEFF                           Set_Rotation@rotation 00C0  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 6436  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 5B46  
                             __end_of_LCD_Init 3028                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 597E  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F5  
                      GetPortProperties@pInput 00BC                                  ??_Button_Poll 00D8  
                             __end_of_HMI_Init 2330                                          l14020 2AFC  
                                        l12254 4E1E                                          l13224 53DA  
                                        l12248 4E0E                                          l12434 44DE  
                                        l13228 53E8                                          l12382 3DD0  
                                        l14062 1F78                                          l14400 2F46  
                                        l12560 5B5A                                          l14410 2FEA  
                                        l13450 3FDA                                          l14316 25E4  
                                        l14260 3716                                          l14422 4F28  
                                        l12558 5B48                                          l13518 31F4  
                                        l13456 3FEA                                          l14450 2302  
                                        l14098 5FD2                                          l14428 4F38  
                                        l12780 571A                                          l13716 1430  
                                        l12862 335A                                          l12782 572C  
                                        l12688 6708                                          l13488 5144  
                                        l16330 0AA4                                          l12788 5758  
                             __end_of_HMI_Poll 5566                                          l16510 0FF8  
                                        l13980 5B16                                          l16372 0C9C  
                                        l16348 0B46                                          l13984 5B24  
                                        l16476 0EA6                                          l16494 0F48  
                                        _I2C1T 0040                                          _I2C2T 03CC  
                                ___fltol@sign1 00F7                                          ?_main 0001  
                                        ?_init 0001                                __end_of___fldiv 1468  
                              __end_of___awdiv 437C                          irobot_rotate@isScript 00DD  
                                        ?_itos 00C6                                          STR_10 FF0D  
                                        STR_11 FFFB                                          STR_12 FFD8  
                                        STR_13 FFC3                                          STR_14 FFC3  
                                        STR_15 FFC3                                          STR_16 FFC3  
                              __end_of___flmul 04A6                                __end_of___fltol 3898  
                                        u10000 519A                                _Event_DIPSwitch 62D2  
                              __end_of___lldiv 4438                                          u10040 3260  
                                        u11100 2620                                          u11020 3736  
                                        u10070 3498                                          u10310 13E0  
                                        u10080 34AC                                          u10320 140E  
                                        u11120 269E                                          u11040 3784  
                                        u11210 2ED6                                          u10090 34EC  
                                        u10410 00C8                                          u10500 0422  
                                        u10420 02DC                                          u10510 0448  
                                        u11150 37D2                                          u10280 1376  
                                        u10425 02D0                                          u11250 2FEA  
                                        u11155 37C6                        __size_of_HMI_LeftSwitch 0018  
                              ___awdiv@divisor 00BC                                          u10710 5B40  
                                        u10470 03B8                                          u11190 386A  
                                        u11280 4F9A                                          u10800 20FE  
                                        u11370 5CA0                                          u10740 2B9C  
                                        u11380 5CC2                                          u10590 2482  
                                        u10904 622A                                          u10905 6224  
                                        u10870 5D82                                          u10688 3F92  
                                        u11818 4214                                          u11819 4228  
                                        u13620 0B5A                                          u11838 4240  
                                        u10990 36A2                                          u11839 4254  
                                        u11858 426C                                          u13538 601A  
                                        u13650 0BD4                                          u11859 4280  
                                        u13539 6030                                          u13651 0BD2  
                                        u11878 4298                                          u13670 0C82  
                                        u11879 42AC                                          u13840 0F5C  
                                        u13940 35D2                                          u13980 35F2  
                                        _INDEX 008D                                __end_of___lwdiv 5320  
                                        _MASKS FD0F                                __end_of___lwmod 59E0  
                                        i2l430 47C8                                          i2l432 47EE  
                                        i2l433 4818                                          i2l427 483E  
                                        i2l732 536C                                          i2l733 5366  
                                        i2l832 5F8A                                          i2l781 62C0  
                              ___awdiv@counter 00BE                            ?_irobot_init_song_0 0001  
                                        _PORTA 000F80                                          _PORTB 000F81  
                                        _PORTC 000F82                                          _PORTD 000F83  
                                        _PORTE 000F84                                          _PORTF 000F85  
                                        _PORTG 000F86                        __size_of_HMI_DownSwitch 0018  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TRISD 000F95  
                                        _TRISE 000F96                                          _TRISF 000F97  
                                        _TRISG 000F98                               ??i2_Byte_GetPair 000D  
                             ??i2_Byte_GetZone 0006                             Port_TogglePin@pPin 00D0  
                              __end_of_getMode 42BE                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03B8                                          _PortB 03AE  
                                        _PortC 00A5                                          _PortD 009B  
                                        _PortE 0091                                          _PortF 03C2  
                                        _PortG 03A4                        __end_of_Port_SetPinType 2880  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 00C6  
                        ??_irobot_led_power_on 00CE                                          _angle 033A  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 00CF  
                              __end_of_dpowers FD0F                                 ??_Byte_GetZone 00BF  
                    irobot_move@moveTurnRadius 00CC                                          _mode1 0CD4  
                                        _mode2 3A88                                          _mode3 6674  
                                        _mode4 3574                                 Button_Poll@Pin 00DD  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 41FE  
                             __end_of_MXK_Init 2EB6                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 66E8                               __end_of_SPI_Init 08C4  
                             __end_of_SPI_Send 5642                          __end_ofi2_MXK_Release 67CE  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 56AE                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 00BD                              __end_of_ADC_Start 50AE  
                               ??_Byte_SetPair 00C9                                 ??_Byte_SetQuad 00C9  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00C0  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 5566  
                              _findClosestWall 08C4                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00BB  
                               _LCD_Word_Write 6492                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 1404                    __size_of_Port_CheckPairType 006A  
                                  mode1@moveto 03F8                            __size_of_HMI_SetBar 000A  
                                 ?_irobot_leds 00CA                                   ?_irobot_init 0001  
                              __initialization 4658                            __size_of_HMI_Render 003E  
                                 ?_irobot_move 00CA                            __end_of_Byte_GetBit 6210  
                       irobot_leds@powerColour 00CB                                   __end_of_main 3C4E  
                                 __end_of_init 4900               irobot_query_and_update@packetIDs 00CF  
                                 __end_of_itos 3DFE                           HMI_SetButton@reindex 00BC  
                                 SPI_Send9@dat 002D                            __end_of_Byte_SetBit 591C  
                             __end_of_InitList FCE5                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 66E8                                      ??_ADC_Off 00BA  
                      __end_of_update_distance 66C4                    __size_of_Port_CheckPortType 0048  
                                  HMI_Render@a 00C2                                         ??_main 03FE  
                                       ??_init 00F9                                         ??_itos 00CA  
                      _Console_MakeField$10974 00C8                                  __activetblptr 000003  
                            Port_SetPin@pInput 00C9                              __end_of_LCD_Reset 5C38  
                            Port_SetPin@pValue 00CC                                      ??_LED_Set 00CF  
                            _MXK_InitDIPSwitch 64EC                              GetPortPORT@pInput 00BC  
                       Port_CheckPairType@Pin1 00E4                         Port_CheckPairType@Pin2 00E5  
                            __end_of_LCD_Write 63F2                                    _GetPortPORT 4A4C  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 4900  
                              ??_LCD_DrawField 00D6                     __end_of_PortProperty_Valid 522E  
                             __end_of_Port_Set 1822                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 3FA8  
                          __end_of_Button_Poll 318E                              Word_GetPair@pPair 00C8  
                      LCD_FillRectangle@pPoint 00C5                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 4D6C                                      ??_SPI_DCS 00BC  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                           _angleToClosestWall 006B                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 67B6  
                                _HMI_SetNumber 6358                         Port_SetQuadType@Output 00F4  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00BA  
                                       ?_putch 0001                               ??_Console_Render 00DD  
                                ToSegment@pCHR 00BA                               _Console_FormFeed 4DFC  
                       Port_SetQuadType@pInput 00F0                                         i2l1630 38FE  
                                       i2l1631 394A                                         i2l1632 3936  
                                       i2l1730 61B8                                         i2l1627 3986  
                                       i2l1732 61D8                                         i2l1628 397C  
                                       i2l1629 3914                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l9670 5F9A                                         i2l9668 5F8A  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 64B0                                 _Timer0_Restart 6754  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 00F5  
                                       _TXREG1 000FAE                               __end_of___xxtofl 24FE  
                               i2_MXK_SwitchTo 61A6                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00BC                                     _Reset_High 64CE  
                           Console_Render@temp 00DF                                 ??_HMI_UpSwitch 00C0  
                               OutSeg@pSegment 00BD                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00D1                         ADC_SetChannel@pChannel 00BB  
                             __end_of_delay_ms 5782                                   LED_Init@pLED 00E7  
                             __end_of_delay_us 5B98                                  ??_Timer0_Init 00CB  
                                ??_Timer2_Init 00CB                                  ??_Timer0_Stop 00BA  
                                   _Timer0_ISR 6300                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00D4                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 5130  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3DFE  
                   __end_of_load_iRScriptStack 5718                                     _Motor_Move 6136  
                                       _iRWall 0035                                  ??_Motor_Speed 00D9  
                                   _Motor_Step 344E                            rx_assign@byteNumber 00BC  
                      __end_of_Event_DIPSwitch 6300                                         ___wmul 6170  
                              ??_HMI_DIPSwitch 00C0                  load_iRScriptStack@bytesToLoad 00C8  
                                    ??___fldiv 00C2                                      ??___awdiv 00BE  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 00D0                                         _lMotor 007F  
                                    ??___fltol 0100                                      ??___lldiv 00C2  
                                       _lQueue 0063                                     _TestButton 039A  
                                    ??___lwdiv 00BE                             __size_of_ToSegment 0284  
                                    ??___lwmod 00C5                       __end_of_Port_SetQuadType 1CFC  
                     i2Byte_GetZone@pChunkSize 0005                               __end_of_safeToGo 5CCE  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 4FA0  
                            GetPortTRIS@pInput 00BC                             __size_of_Reset_Low 001E  
                                       clear_0 46C0                                         clear_1 46D2  
                                       clear_2 46DE                                         clear_3 46EA  
                                       clear_4 46F6                               ___awdiv@quotient 00C0  
                   irobot_stop_motion@isScript 00D3                                  ?_eusart_getch 0001  
                                   Port_Init@i 0106                                     _iRDistance 0079  
                            __end_of_MXK_Queue 672E                     __end_ofHMI_SetButton@F7213 FD1C  
                                    ??_getMode 00DE                                     _iRBumpLeft 0087  
                                       _printf 24FE                                     _iRBumpDrop 0036  
                    __end_of_MXK_InitDIPSwitch 650A                                  _ADC_Calibrate 669E  
                                   _iRDropLeft 0085                                 HMI_SetButton@v 00C1  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 00BB  
                                  _Console_Tab 413C                            LCD_Word_Write@value 00BF  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 00BD                       Port_CheckPortType@Output 00F3  
                                    ?_ADC_Init 00BE                             _twos_complement_of 5EC2  
                              ??i2_Port_SetPin 0014                                   __mediumconst FC32  
                  __end_ofTimer2_Init@PRESCALE FD1F                       Port_CheckPortType@pDrive 00F2  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 00F0  
                                ??_Port_SetPin 00CD                                      ??_reverse 00BE  
                                   _StepRotate 0071                          Console_MakeField@Fill 0464  
                             ?_Port_SetPinType 00E0                                         putch@c 00CE  
                            Motor_Speed@pMotor 00D5                                 ?_HMI_SetNumber 00D0  
                               i2_Word_GetPair 62A2                        __end_of_Configure_GPIOs 55D6  
                          irobot_leds@isScript 00CD                        __end_of_findClosestWall 0CD4  
                             ??_MXK_TestButton 00C0                         __end_of_Timer0_Restart 6760  
                                Set_Rotation@m 00BF                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00BA                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 61DC  
                                 ___xxtofl@arg 00C4                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 00C3                                   ___xxtofl@val 00BA  
                        _update_bump_and_cliff 60FC                                ?_LCD_Word_Write 00BF  
                                   __accesstop 0060                        __end_of__initialization 46FC  
                                    ?_LCD_Fill 00C3          irobot_query_and_update@packetVariable 00D3  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 00EC  
                                  _Byte_GetBit 61DC                                     _Stepstomin 006F  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 676C  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 00C2  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00BA  
                                   ___fltol@f1 00F3                                    _Byte_SetBit 58B8  
                                __end_of_MASKS FD18                                 _PortA_Property FF0B  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 00C5  
                                    LCD_Fill@j 00C6                            load_iRScriptStack@i 00C9  
                                    LCD_Init@i 00F1                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF09                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 67A2                                   __pidataBANK3 673C  
            irobot_move_straight@straightSpeed 00D3                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 6546                                Console_Render@x 00E4  
                              Console_Render@y 00E5                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FCE5  
                         __end_of_Byte_GetZone 4CD4                                  __end_of_mode1 10A8  
                                __end_of_mode2 3B6E                                  __end_of_mode3 668A  
                                __end_of_mode4 3680                           ??_twos_complement_of 00BC  
                            irobot_leds@LEDBit 00CA                                 _PortC_Property FF07  
                          __end_of_Timer0_Init 32EE                                  __end_of_putch 66F6  
                               ??_eusart_getch 00BA                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 344E                            __end_of_Timer0_Stop 67B0  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 00E7  
                             ?_update_distance 0001                                      ?_SPI_Send 00BA  
                               ??_eusart_putch 00BA                                    _Button_Init 3ED4  
                            Port_SetType@pType 00F6                                    _Button_Poll 3028  
                         __end_of_Byte_SetByte 6720                           __end_of_Byte_SetPair 6414  
                               _HMI_LeftSwitch 6644                                 _PortD_Property FF05  
                         __end_of_Byte_SetQuad 6436                                   ??_LED_Toggle 00D2  
                                 ??_HMI_GetBar 00BA                     eusart_putch@eusartSendChar 00BA  
                         __end_of_Byte_SetZone 45A8                            __end_of_Motor_Speed 6358  
                               _HMI_DownSwitch 65FC                                  SPI_Send@pData 00BC  
                        __end_of_MXK_DIPSwitch 65E4                                   ??_HMI_SetBar 00BA  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 00C2  
                               _PortE_Property FF03                                     ??_ADC_Init 00C1  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 62D2  
                      irobot_rotate@angleTotal 00E0                                 _PortF_Property FF01  
                      Port_CheckQuadType@Pair1 00ED                        Port_CheckQuadType@Pair2 00EE  
                     MXK_BlockSwitchTo@pModule 00C1                                        ??_mode1 03F6  
                                      ??_mode2 00E6                                        ??_mode3 00E2  
                                      ??_mode4 00F9                                        ?_ADC_On 0001  
                            _Console_Backspace 59E0                                ?_Timer0_Restart 0001  
                                      ??_putch 00CE                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5F48                              __end_of_ToSegment 1AA6  
                               _PortG_Property FEFF                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5EC2                             _irobot_stop_motion 5DF0  
                      Port_CheckQuadType@pQuad 00EB                                reverse@iterator 00BF  
                             ??_SPI_DisableISR 00BC                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 64CE                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C5  
                                   ??_LCD_Init 00EF                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 413C                         __end_of_PortA_Property FF0D  
             irobot_led_power_on@powerOnColour 00CE                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00BA                                     ??_LED_Init 00E7  
                     ADC_ClockDivision@pDivide 00BA                             Byte_SetByte@pValue 00BC  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 5D60                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00F5                             ??_irobot_song_play 00BB  
                                   ??_HMI_Poll 00DE                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E7                         __end_of_PortB_Property FF0B  
                                ?_Timer0_Start 00BA                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2BB0                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00E2                             __end_of_LED_Toggle 5DF0  
                           __end_of_HMI_GetBar 67C2                       LCD_FillRectangle@pColour 00C3  
                                   _angleTotal 0073                            ??_Console_Backspace 00BC  
                            Set_Addr_Window@xe 00C0                              Set_Addr_Window@ye 00C1  
                            Set_Addr_Window@xs 00C2                              Set_Addr_Window@ys 00BF  
                                      ?_OutSeg 00BD                                    ?_Motor_Init 00E7  
                           Byte_SetPair@pInput 00C5                                    ?_Motor_Move 00BD  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 00C8  
                           __end_of_HMI_SetBar 678A                         __end_of_PortC_Property FF09  
                           Word_GetPair@pInput 00C6                             __end_of_HMI_Render 6006  
                               ??_Set_Rotation 00BF                                      ?_Port_Set 00C9  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 00BA  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 00BF  
                                 ??_ISR_Enable 00BA                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 665C                         __end_of_PortD_Property FF07  
                                      _ADC_AN0 00B5                                        _ADC_AN1 03DD  
                                      _ADC_AN2 03D8                                        _ADC_AN3 03D3  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00BA  
                            _Console_MakeField 3FA8                                        _ADC_Off 679A  
                            ??_Console_NewLine 00BA                       ADC_ClockDivision@unfound 00BC  
                       __end_of_HMI_DownSwitch 6614                                     ??_SPI_Init 00ED  
                       Event_TestButton@pState 00D3                                     ??_SPI_Send 00BD  
                                      ?_printf 00CF                              ??_HMI_InitButtons 00BA  
                   __size_of_MXK_InitDIPSwitch 001E                       __size_of_move_and_rotate 0082  
                       __end_of_PortE_Property FF05                            Console_Render@F6956 03EA  
                           ?_Console_MakeField 00BF                                        _COUNTER 0029  
                              ??_HMI_SetButton 00BA                           __end_of_HMI_UpSwitch 662C  
                         ??_irobot_stop_motion 00D3                                        _LED_Set 5B98  
                      _Console_IncrementCursor 5852                                      ?___xxtofl 00BA  
                       __end_of_PortF_Property FF03                                    _gBackcolour 0083  
                              ??_HMI_SetNumber 00D2                                      _I2C1_Done 0337  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0334  
                                    _I2C1_More 0331                                      _I2C2_More 032E  
                                    ?_delay_ms 00BA                      __end_of_Console_Backspace 5A3C  
                                    ?_delay_us 00BA                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 6528                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 00BA  
                       __end_of_PortG_Property FF01                            ??_Console_MakeField 00C1  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 006D  
                                      _SPI_DCS 6242                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 00BA                               ?_Configure_GPIOs 0001  
                             ?_findClosestWall 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 010C  
                             ADC_Init@pChannel 00C0                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00E5                             __end_of_ISR_Enable 6780  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 00BA                              Event_TestButton@j 0089  
                                    ?_safeToGo 0001                                     ??_Mode_Set 00BA  
                               ??_Timer2_Clear 00BA                                        _Font5x7 FD1F  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 00BB  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 00BD                           SPI_DisableISR@pInput 00BA  
                                ?_Port_GetQuad 00BA                                Byte_SetBit@pBit 00BC  
                         Port_TogglePin@pInput 00CE                          __end_ofi2_Byte_SetBit 5C84  
                                    _ADC_Start 502A                                        __Hparam 0000  
                            Port_GetQuad@pQuad 00BC                                    _Timer0_Init 318E  
                                  _Timer2_Init 32EE                                        __Lparam 0000  
                                  _Timer0_Stop 67AA                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD05  
                                      _iRAngle 0077                                  LCD_Write@mode 00BD  
                              __size_of_OutSeg 0082                                     ??_Port_Set 00CC  
                    __end_of_Console_MakeField 4078                              _Console_PrintChar 2880  
                                  _Motor_Speed 632E                                        _Stepper 00AF  
                                ?_Port_SetType 00F4                                        _gCursor 0047  
                                      ___fldiv 10A8                                        ___awdiv 42BE  
                        ??_Console_ClearCursor 00BA                                        ___flmul 0000  
                                      ___fltol 378C                                        _lBuffer 04AA  
                                      ___lldiv 437C                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 00BA                                        ___lwdiv 52A8  
                                      ___lwmod 597E                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4E8A                             ?_Console_PrintChar 0001  
                                      __pcinit 4658                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 41FE  
                                      __ptext0 3B6E                                        __ptext1 3574  
                                      __ptext2 08C4                                        __ptext3 6674  
                                      __ptext4 50AE                                        __ptext5 3680  
                                      __ptext6 3A88                                        __ptext7 65B4  
                                      __ptext8 0CD4                                        __ptext9 5C84  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 6562                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD05                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00CE                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00D3                                     ??___xxtofl 00BE  
                                 ?_GetPortPORT 00BA                                   ?_GetPortTRIS 00BA  
                          ??_Console_PrintChar 00CA                                    _Port_GetPin 5E7C  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03E6  
                          LCD_DrawRectangle@p4 03E2                                   ??i2_delay_us 0003  
                                   ??_delay_ms 00BC                                     ??_delay_us 00BC  
                                      _reverse 5642                                      _DIPSwitch 0390  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 4078  
                                  _iRBumpRight 0088                                 LCD_DrawField@i 00DC  
                                    _LCD_Reset 5BE8                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 63D0                                    _iRDropRight 0086  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 00BA  
                         end_of_initialization 46FC                            ADC_SetupIO@pChannel 00BC  
                            ??_get_packet_size 00BA  irobot_query_and_update@numberOfPacketRequests 00D2  
                                   delay_us@us 00BA                              ??_HMI_SetSegments 00BD  
                      Console_PrintChar@pInput 00CD                                   _Console_Init 4F16  
                         __end_of_eusart_getch 6792                        _irobot_query_and_update 2BB0  
                                   ??_safeToGo 00DE                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 57EC                           __end_of_eusart_putch 6712  
                                      itos@Out 00CE                                 ??_Port_GetQuad 00BD  
                           _PortProperty_Valid 51B2                             Byte_SetQuad@pInput 00C5  
                           SPI_MinSpeed@pInput 00C9                                      i2u1369_48 6318  
                           Byte_SetQuad@pValue 00C8                            __end_of_ADC_SetupIO 6242  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 00BE                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 00BC                              ??_HMI_RightSwitch 00C0  
                              ___lldiv@counter 00C6                      __end_of_Console_PrintChar 2A1E  
                          __end_of_ADC_Voltage 3D26                                 ??_Port_SetType 00F7  
                   __end_of_Port_CheckQuadType 5A96                                        printf@c 00E2  
                                      printf@f 00CF                                 Port_Init@pPort 0103  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 00C3                              __end_of_rx_assign 3A88  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00C9                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 5D60                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 5FC8                             Button_Init@pInitIO 0104  
                                _irobot_rotate 3680                          Timer0_Init@pFrequency 00C7  
                            ?_Port_SetQuadType 00F0                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00BE                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00F4  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00C0  
                        Console_Render@lCursor 00E0                             _load_iRScriptStack 56AE  
                                    _MXK_Queue 6720                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 00C2                               Byte_GetZone@pMax 00BC  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00C6                                _Set_Addr_Window 4706  
                               SPI_Init@pClock 00E7                               ??_LCD_Word_Write 00C1  
                              _sort_iRBumpDrop 4E8A                              ??_move_and_rotate 00E2  
                                  ___fldiv@grs 00CD                                    ___fldiv@rem 00C7  
                        __end_of_LCD_DrawField 4B96                                 Port_Set@pInput 00C9  
                               SPI_Init@pInput 00ED                           ??_PortProperty_Valid 00CD  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00CB  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 4D6C  
                                   ?_LCD_Write 00BD                                   _Byte_GetPair 6528  
                           HMI_SetButton@F7213 FD18                            ?_load_iRScriptStack 00BA  
                                 _Byte_GetZone 4C38                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00DA                              LCD_DrawField@ymax 00DB  
                               __end_of_ADC_On 67BC                                 _Port_TogglePin 6272  
                             _Event_TestButton 60C0                                    ___flmul@grs 00D6  
                         Port_SetPinType@Props 00E5                                   ?_Byte_GetBit 00BA  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 6712  
                                 _Byte_SetPair 63F2                                ADC_SetupIO@MASK 00BD  
                                 _Byte_SetQuad 6414                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 44F2                           Port_SetPinType@pType 00E3  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00BA  
                                ?_SPI_MaxSpeed 00C9                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00BA                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C9  
                        __end_ofi2_Timer0_Stop 67C8                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D7  
                               __end_of_OutSeg 51B2                           ??_load_iRScriptStack 00C4  
                 __end_of_irobot_move_straight 65CC                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 61A6                          __end_of_HMI_DIPSwitch 65FC  
                                __pidataCOMRAM 676C                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D5                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 6754                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 679A                                 __end_of_printf 26C0  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00BA  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C6  
                             ??_Timer0_Restart 00BA                           __end_of_Timer0_Start 63D0  
                           Port_SetType@Output 0100                            start_initialization 4658  
                                   ?_MXK_Queue 00BA                       PortProperty_Valid@Errors 00CF  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 5396  
                           Port_SetType@pInput 00F4                                 _ADC_SetChannel 657E  
                                   HMI_Init@in 00F5                            HMI_SetNumber@pInput 00D0  
                        __end_ofi2_Port_SetPin 485A                             __end_of_Event_NULL 1406  
                       rx_assign@packetIDValue 00BB                         __end_of_Port_TogglePin 62A2  
                                ?_Word_SetPair 00C9                              Byte_SetBit@pInput 00BA  
                                     ??_ADC_On 00BA                                 ??_MXK_SwitchTo 00C0  
                            Byte_SetBit@pValue 00BD                             ?_LCD_FillRectangle 00C3  
                    ??_irobot_query_and_update 00CA                            _Console_ResetCursor 6456  
                  PortProperty_Valid@pPinDrive 00CB                                    _ADC_SetupIO 6210  
                         MXK_BlockSwitchTo@CUR 00C0                       PortProperty_Valid@pInput 00C9  
                                i2_MXK_Release 67C8                                    _ADC_Voltage 3C4E  
                       LCD_FillRectangle@pSize 00C9                                 SPI_Send@pInput 00BA  
                                 ??_Reset_High 00CE                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 00CB                          Port_SetQuadType@pQuad 00F2  
                                    _ToSegment 1822                            ??_LCD_FillRectangle 00CD  
                        Port_SetQuadType@pType 00F3                                _Console_NewLine 4B96  
                               ??_SPI_MinSpeed 00CB                                    ??_ADC_Start 00BE  
                                 _HMI_UpSwitch 6614                                      _Reset_Low 64B0  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 67B0  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 00D7                                 ADC_Init@pInput 00BE  
                                    _gCharSize 03F2                               Timer2_Init@INDEX 008B  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 00EB                                       ??_OutSeg 00BE  
                                    OutSeg@out 00C1                        __size_of_Console_Render 0210  
                                 ??_Motor_Move 00C1                                   ??_Motor_Step 00CE  
                                    _iRAngleSS 031E                                      _iRCliffFL 0033  
                                    _iRCliffFR 0032                             Byte_SetZone@Offset 00C3  
                                     ??___wmul 00BE                           ?_Console_ResetCursor 0001  
                                    _Port_Init 2A1E                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03EA                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 00BD                                       ?_ADC_Off 0001  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 00BA  
                           Byte_SetZone@pValue 00BF                                  Mode_Set@pMode 00BA  
                                     ??_printf 00DB                        __end_of_Set_Addr_Window 47B0  
                     Port_CheckQuadType@Output 00EF                        __end_of_sort_iRBumpDrop 4F16  
                                    _gLineSize 03EE                       Port_CheckQuadType@pDrive 00EC  
                               ??_Word_GetPair 00C9                       Port_CheckQuadType@pInput 00E9  
                         __end_of_Port_GetQuad 5D18                                      ___fldiv@a 00BE  
                                    ___fldiv@b 00BA                      __end_of_LCD_FillRectangle 540A  
                                  __pbssBIGRAM 04AA                         __end_of_ADC_SetChannel 659A  
                                     ?_LED_Set 00CE                                      ___flmul@a 00CC  
                                    ___flmul@b 00C8                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 00BC                             __end_of_Reset_High 64EC  
                                __pcstackBANK0 00BA                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03F6  
                      ??_update_bump_and_cliff 00D7                                     itos@Length 00CC  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CD  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 632E                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00D3                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1F26                                       ?_SPI_DCS 00BA  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00CE  
                                ??_eusart_init 00BA                                    ??_LCD_Write 00BE  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 3ED4                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 6170                             __end_of_Motor_Step 3574  
                        Timer2_Init@pFrequency 00C7                                 ?i2_MXK_Release 0001  
                     Port_CheckPairType@Output 00E6              twos_complement_of@complementValue 00BA  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 00E3  
                     Port_CheckPairType@pInput 00E0                                 reverse@tempVar 00BE  
                           _MXK_InitTestButton 650A                                     ?_Reset_Low 0001  
                            __size_of_safeToGo 004A                                   ?_Timer0_Init 00C7  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 00C7  
                             ??_HMI_LeftSwitch 00C0                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 00BA                                  ??_irobot_leds 00CD  
                                ??_irobot_init 00BB                                ??_irobot_rotate 00DB  
                                ??_irobot_move 00CE                                  _lStepFunction 0066  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 00C7  
                             ??_HMI_DownSwitch 00C0                                      __pintcode 1408  
                                __pmediumconst FC32                                   ?_Motor_Speed 00D5  
                        ??_Console_ResetCursor 00BA                                       ?___fldiv 00BA  
                                     ?___awdiv 00BA                                      __ptext100 6792  
                                    __ptext101 6382                                      __ptext110 63F2  
                                    __ptext102 6242                                      __ptext111 5A3C  
                                    __ptext103 3ED4                                      __ptext120 657E  
                                    __ptext112 5782                                      __ptext104 64EC  
                                    __ptext121 5D60                                      __ptext113 51B2  
                                    __ptext105 67B0                                      __ptext130 65E4  
                                    __ptext122 4FA0                                      __ptext114 6414  
                                    __ptext106 650A                                      __ptext131 65FC  
                                    __ptext123 669E                                      __ptext115 44F2  
                                    __ptext107 26C0                                      __ptext140 6358  
                                    __ptext132 6614                                      __ptext124 67B6  
                                    __ptext116 4F16                                      __ptext108 1AA6  
                                    __ptext141 3D26                                      __ptext133 662C  
                                    __ptext125 679A                                      __ptext117 502A  
                                    __ptext109 5E36                                      __ptext150 4078  
                                    __ptext142 5642                                      __ptext134 6644  
                                    __ptext126 41FE                                      __ptext118 522E  
                                    __ptext151 6082                                      __ptext143 597E  
                                    __ptext135 665C                                      __ptext127 54F2  
                                    __ptext119 6210                                      __ptext160 3898  
                                    __ptext152 6528                                      __ptext144 52A8  
                                    __ptext136 5CCE                                      __ptext128 3028  
                                    __ptext161 67C2                                      __ptext153 4C38  
                                    __ptext145 4438                                      __ptext137 62D2  
                                    __ptext129 65CC                                      __ptext170 67C8  
                                    __ptext162 6760                                      __ptext154 58B8  
                                    __ptext146 1822                                      __ptext138 1404  
                                    __ptext171 672E                                      __ptext163 47B0  
                                    __ptext155 5E7C                                      __ptext147 4D6C  
                                    __ptext139 60C0                __end_of_irobot_query_and_update 2D36  
                                    __ptext172 0000                                      __ptext164 62A2  
                                    __ptext156 6780                                      __ptext148 5DA8  
                                    __ptext165 659A                                      __ptext157 67BC  
                                    __ptext149 6272                                      __ptext166 5320  
                                    _pShiftVal 007B                                      __ptext167 5C38  
                                    __ptext159 6300                                      __ptext168 61A6  
                                    __ptext169 5F88                                       ?___flmul 00C8  
                                     ?___fltol 00F3                                       ?___lldiv 00BA  
                                   ?_Port_Init 0101                           Timer0_Init@pCPUClock 00CD  
                                     ?___lwdiv 00BA                                       ?___lwmod 00C1  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 49A6                                       ?_getMode 0001  
                                 _eusart_getch 678A                    __end_ofTimer0_Init@PRESCALE FCF5  
                              _get_packet_size 57EC                                   _eusart_putch 6704  
                           ??_Console_FormFeed 00BA                                _HMI_SetSegments 4438  
                           ?_GetPortProperties 00BA                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00BD                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00BA                                       _ADC_Init 522E  
                 irobot_rotate@rotateDirection 00DE                          __end_of_HMI_SetButton 4DFC  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00BA  
                         irobot_move@moveSpeed 00CA                                   ?_Port_SetPin 00C9  
                        __end_of_HMI_SetNumber 6382                               ___lwdiv@quotient 00BF  
                              _HMI_RightSwitch 662C                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 03D4                                 __size_of_mode2 00E6  
                               __size_of_mode3 0016                                 __size_of_mode4 010C  
                          ??_GetPortProperties 00BC                        __end_of_Console_NewLine 4C38  
                         ??_MXK_InitTestButton 00E7                             Byte_GetPair@pInput 00C3  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 67B6  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 65B4  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 659A  
                                     _LCD_Fill 5AEE                                       _LCD_Init 2EB6  
                               ___wmul@product 00BE                                       _HMIBoard 0340  
                               i2_Byte_GetZone 5320                                       _LED_Init 591C  
                                    delay_ms@u 00BC                             Button_Poll@pButton 00D5  
                                    delay_us@u 00BC                                       _HMI_Init 2136  
                                     _HMI_Poll 54F2                             MXK_Queue@pCallback 00BA  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 6492  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5F88  
                     __size_of_Configure_GPIOs 0070                       __size_of_findClosestWall 0410  
                         __size_of_Byte_GetBit 0034                              Byte_SetQuad@pQuad 00C7  
                                     i2u510_40 5342                                       i2u510_47 5338  
                                     i2u512_40 538A                                       i2u512_45 5386  
                                     _PIR1bits 000F9E                                       _PIR3bits 000FA4  
                                     i2u634_44 5C4C                                       i2u634_45 5C48  
                                     i2u635_44 5C72                                       i2u635_45 5C6E  
                                     i2u638_40 5FB6                                       i2u737_40 38DC  
                                     i2u738_40 38F0                                       i2u739_40 3928  
                         __size_of_Byte_SetBit 0064                                       _RCONbits 000FD0  
                                  _mode1$15600 03FA                           i2Word_GetPair@pInput 000D  
                             __CFG_WDTPS$32768 000000                     irobot_song_play@songNumber 00BB  
                             HMI_SetBar@pValue 00BA                              Button_Init@pInput 0100  
                      __size_of_SPI_DisableISR 0028                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 00E4                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 4A4C  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 4CD4  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 5F48  
                           _Port_CheckPairType 5782                                       _MXK_Init 2D36  
                        __size_of_Timer0_Start 0026                                _move_and_rotate 50AE  
                              MXK_SwitchTo@CUR 00C0                          __end_of_ADC_Calibrate 66B2  
                          __end_of_irobot_leds 5AEE                                       _SPI_Init 04A6  
                          __end_of_irobot_init 6704                       __end_of_Event_TestButton 60FC  
                                     _SPI_Send 55D6                            __end_of_irobot_move 4658  
                                    _rx_assign 3998                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BF                              ___wmul@multiplier 00BA  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00BE  
                                   printf@flag 00DD                           Timer2_Init@pCPUClock 00D0  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 547E                                     printf@prec 00DC  
                        Motor_Speed@pFrequency 00D7                              Byte_GetBit@pInput 00BA  
                          Port_SetPinType@pPin 00E2                           __size_of_Button_Poll 0166  
                                _MXK_DIPSwitch 65CC                             _Port_CheckQuadType 5A3C  
                          ?_Port_CheckPairType 00E0                           __end_of_SPI_MinSpeed 54F2  
                                ??_MXK_Dequeue 00D0                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 5D18  
                         __end_of_update_angle 66D6                          Button_Poll@pIncrement 00D7  
                      PortProperty_Valid@F6830 FCF5                           __end_ofi2_Motor_Step 3998  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 466C                                      copy_data1 468C  
                                    copy_data2 46AC                                  ??_MXK_Release 00BA  
                       __end_ofi2_Byte_GetPair 65B4                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 00E9  
                        ?_irobot_move_straight 00D3                         __end_ofi2_Byte_GetZone 5396  
                          __end_ofi2_MXK_Queue 673C                                      mode2@dist 00E6  
                          ?_Port_CheckPortType 00F0                                itos@destination 00C8  
                                     _InitList FC33                     __end_of_irobot_init_song_0 6456  
                         _Motor_Step$intlevel0 3454                                       _Mode_Set 66D6  
                           Port_GetQuad@Output 00BF                              ??_update_distance 00D7  
                                  ??_ToSegment 00BA                                   _ISR_Function 1408  
                                 _Timer0_Clear 6748                             Port_GetQuad@pInput 00BA  
                                 _Timer2_Clear 6792                           __end_of_Word_GetPair 60C0  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00E4  
                                  ??_Reset_Low 00CE                                       __Hrparam 0000  
                                 _Timer0_Start 63AA                                   OutSeg@pInput 00C0  
                               _Console_Render 1F26                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00CC                                       _iRCliffL 0034  
                                     _iRCliffR 0031                                 LCD_Write@value 00BE  
                                     _Port_Set 1468                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 5E7C  
                      __end_of_get_packet_size 5852                                    ??_Port_Init 0104  
                      __end_of_HMI_SetSegments 44F2                           ??_Port_CheckQuadType 00ED  
                             __size_of___fldiv 03C0                               _irobot_song_play 668A  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 6044  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 00F3  
                             __size_of___lwmod 0062                                       _lBufferX 008F  
                                     _lBufferY 008E                            Timer2_Init@PRESCALE FD1C  
                        _findClosestWall$15599 03F8                                     ?_rx_assign 00BB  
                              LCD_Fill@pColour 00C3                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 0081  
                             __size_of_getMode 00C0                        __end_of_HMI_RightSwitch 6644  
                       Byte_GetZone@pChunkSize 00BE                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 00BE                          __size_of_Port_SetType 022A  
                                reverse@length 00BC                                      itos@input 00C6  
                        i2MXK_SwitchTo@pModule 0008                                       ___xxtofl 2330  
                          irobot_move@isScript 00D2                             Motor_Init@pAddress 00E9  
                                     _delay_ms 5718                                       _delay_us 5B46  
                                     _clearall 0090                                ___lwdiv@divisor 00BC  
                              ___lwdiv@counter 00BE                                Port_GetPin@pPin 00BC  
                                     __ptext10 66B2                                       __ptext11 60FC  
                                     __ptext20 5EC2                                       __ptext12 66C4  
                                     __ptext21 668A                                       __ptext13 2BB0  
                                     __ptext30 6456                                       __ptext22 24FE  
                                     __ptext14 3998                                       __ptext31 59E0  
                                     __ptext23 66E8                                       __ptext15 4E8A  
                                     __ptext40 5396                                       __ptext32 5F48  
                                     __ptext24 2880                                       __ptext16 57EC  
                                     __ptext41 4AF2                                       __ptext33 378C  
                                     __ptext25 413C                                       __ptext17 678A  
                                     __ptext50 6546                                       __ptext42 6170  
                                     __ptext34 632E                                       __ptext26 42BE  
                                     __ptext18 5DF0                                       __ptext51 5A96  
                                     __ptext43 3FA8                                       __ptext35 6136  
                                     __ptext27 5852                                       __ptext19 45A8  
                                     __ptext60 2D36                                       __ptext52 56AE  
                                     __ptext44 61DC                                       __ptext36 63AA  
                                     __ptext28 4B96                                       __ptext61 2A1E  
                                     __ptext53 6436                                       __ptext45 3C4E  
                                     __ptext37 5FC8                                       __ptext29 4DFC  
                                     __ptext70 5B98                                       __ptext62 1CFC  
                                     __ptext54 66F6                                       __ptext46 2330  
                                     __ptext38 5130                                       __ptext71 6006  
                                     __ptext63 5D18                                       __ptext55 6704  
                                     __ptext47 0000                                       __ptext39 1F26  
                          ??_MXK_BlockSwitchTo 00C0                                       __ptext80 2EB6  
                                     __ptext72 344E                                       __ptext64 1468  
                                     __ptext56 6474                                       __ptext48 10A8  
                                     __ptext81 4CD4                                       __ptext73 67AA  
                                     __ptext65 6712                                       __ptext57 3DFE  
                                     __ptext49 485A                                       __ptext90 5BE8  
                                     __ptext82 5AEE                                       __ptext74 6754  
                                     __ptext66 4900                                       __ptext58 318E  
                                     __ptext91 5718                                       __ptext83 4706  
                                     __ptext75 5F06                                       __ptext67 49A6  
                                     __ptext59 6748                                       __ptext92 64B0  
                                     __ptext84 6492                                       __ptext76 6562  
                                     __ptext68 4A4C                                       __ptext93 64CE  
                                     __ptext85 63D0                                       __ptext77 6720  
                                     __ptext69 591C                                       __ptext94 6776  
                                     __ptext86 55D6                                       __ptext78 6044  
                                     __ptext95 2136                                       __ptext87 66D6  
                                     __ptext79 5B46                                       __ptext96 547E  
                                     __ptext88 5566                                       __ptext97 04A6  
                                     __ptext89 540A                                       __ptext98 32EE  
                                     __ptext99 437C                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                            _ADC_ClockDivision 4FA0                                   ?_ADC_SetupIO 0001  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 6474                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                              ??_Event_DIPSwitch 00D3  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                             ?_ADC_ClockDivision 0001  
                                 ?_ADC_Voltage 00E1                            __end_of_MXK_Dequeue 6044  
                            HMI_SetSegments@in 00BE                          Button_Init@pThreshold 0102  
                                     _safeToGo 5C84                                  __size_of_main 00E0  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C5                         __end_of_Console_Render 2136  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 5CCE                            __end_of_MXK_Release 657E  
                               _MXK_TestButton 665C                                  i2_Byte_SetBit 5C38  
                      __end_of_move_and_rotate 5130                            ??_ADC_ClockDivision 00BA  
                                 _iRDistanceSS 0322                                    _irobot_leds 5A96  
                                  _irobot_init 66F6                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 45A8                                 ADC_Voltage@max 00E7  
                               ADC_Voltage@ref 00EB                      __end_of_MXK_BlockSwitchTo 6082  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer0_Init 0160  
                         __size_of_Timer2_Init 0160                                       int$flags 0051  
                         __size_of_Timer0_Stop 0006                                   _Port_SetType 1CFC  
                                 Port_Set@Type 00E0                     __size_of_GetPortProperties 00A6  
                       __size_of_LCD_DrawField 00A4                                   _iRDropCaster 002F  
                  __size_of_load_iRScriptStack 006A                              ??_Configure_GPIOs 00EF  
                            ??_findClosestWall 03F6                                      printf@val 00E0  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 032A                                 Timer0_Init@PRE 008C  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5DA8  
                                   _HMI_GetBar 67BC                           Button_Init@pGetState 0107  
                       PortProperty_Valid@Pair 00DF                               ??_Port_TogglePin 00D1  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 00CC                                     _HMI_SetBar 6780  
                                   _HMI_Render 5FC8                               Byte_SetZone@MASK 00C4  
                                  i2_MXK_Queue 672E                      __end_of_ADC_ClockDivision 502A  
                               Timer2_Init@DIV 0326                                 Timer2_Init@PRE 008A  
                             Byte_SetZone@pMax 00BC                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 00D5  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 010A  
                                     itos@Data 00CA                  __end_of_update_bump_and_cliff 6136  
                           LCD_FillRectangle@i 00CF                             LCD_FillRectangle@j 00D0  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 00BA                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 00C1                               ___lldiv@dividend 00BA  
                       __end_of_MXK_TestButton 6674                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 0400  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 00D6  
                     irobot_query_and_update@j 00D4                                 _SPI_DisableISR 6382  
                   __end_of_twos_complement_of 5F06                       irobot_rotate@rotateAngle 00D7  
                              Port_Init@pInput 0101                                       printf@ap 00DE  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 00D9                                     _ISR_Enable 6776  
                             ?_HMI_SetSegments 00BB                        Console_MakeField@Column 00C6  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 00BA  
                                SPI_DCS@pInput 00BA                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 00C0                                    ??_rx_assign 00BD  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00E1                        Console_MakeField@pInput 00C5  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 00C2  
                                ??_GetPortPORT 00BC                                ___lwmod@divisor 00C3  
                                ??_GetPortTRIS 00BC                          Timer0_Start@pFunction 00BA  
                           Word_SetPair@pInput 00C9                                ___lwmod@counter 00C5  
                           Word_SetPair@pValue 00CC                       ?_irobot_query_and_update 00C0  
                             Motor_Init@pMotor 00E7                                    _MXK_Dequeue 6006  
                            ADC_Voltage@output 00EF                                  _distanceTotal 0075  
                               LED_Toggle@pLED 00D2                                  _LCD_DrawField 4AF2  
                             _Port_SetQuadType 1AA6                                    _MXK_Release 6562  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5F06  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 00D5  
                           Byte_GetZone@Offset 00C1                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 00CB                                _Port_SetPinType 26C0  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 00C2  
                           Byte_GetZone@pChunk 00BD                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 6474                             Byte_GetZone@pInput 00BA  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 58B8  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 63AA  
                                 _SPI_MaxSpeed 540A              irobot_query_and_update@streamSize 00D1  
                                 _SPI_MinSpeed 547E                             Port_Set@TypeActual 00DE  
                             ?_move_and_rotate 0001  
