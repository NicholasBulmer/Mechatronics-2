

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Sep 12 12:36:01 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1,inline
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1,inline
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1,inline
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1,inline
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1,inline
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1,inline
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   195                           	psect	text171,global,reloc=2,class=CODE,delta=1
   196                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   197                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   198  0000                     
   199                           ; Version 1.43
   200                           ; Generated 25/07/2017 GMT
   201                           ; 
   202                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   203                           ; All rights reserved.
   204                           ; 
   205                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   206                           ; 
   207                           ; Redistribution and use in source and binary forms, with or without modification, are
   208                           ; permitted provided that the following conditions are met:
   209                           ; 
   210                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   211                           ;        conditions and the following disclaimer.
   212                           ; 
   213                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   214                           ;        of conditions and the following disclaimer in the documentation and/or other
   215                           ;        materials provided with the distribution.
   216                           ; 
   217                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   218                           ;        software without specific prior written permission.
   219                           ; 
   220                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   221                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   222                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   223                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   224                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   225                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   226                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   227                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   228                           ; 
   229                           ; 
   230                           ; Code-generator required, PIC18F67J50 Definitions
   231                           ; 
   232                           ; SFR Addresses
   233  0000                     
   234                           	psect	idataCOMRAM
   235  016506                     __pidataCOMRAM:
   236                           	opt stack 0
   237                           
   238                           ;initializer for _gCursor
   239  016506  0006               	dw	6
   240  016508  0006               	dw	6
   241                           
   242                           ;initializer for _Bus_State
   243  01650A  01                 	db	1
   244                           
   245                           ;initializer for _A
   246  01650B  41                 	db	65
   247                           
   248                           ;initializer for _a
   249  01650C  61                 	db	97
   250                           
   251                           ;initializer for _zero
   252  01650D  30                 	db	48
   253                           
   254                           ;initializer for _l
   255  01650E  80                 	db	128
   256                           
   257                           ;initializer for _w
   258  01650F  80                 	db	128
   259                           
   260                           	psect	idataBANK0
   261  01653C                     __pidataBANK0:
   262                           	opt stack 0
   263                           
   264                           ;initializer for _TimerX
   265  01653C  0008               	dw	8
   266                           
   267                           ;initializer for _MinDist
   268  01653E  03E8               	dw	1000
   269                           
   270                           ;initializer for _gForecolour
   271  016540  FFFF               	dw	65535
   272                           
   273                           ;initializer for _change
   274  016542  01                 	db	1
   275                           
   276                           	psect	idataBANK3
   277  0164D6                     __pidataBANK3:
   278                           	opt stack 0
   279                           
   280                           ;initializer for Console_Render@F6956
   281  0164D6  0006               	dw	6
   282  0164D8  0006               	dw	6
   283                           
   284                           ;initializer for _gLineSize
   285  0164DA  0080               	dw	128
   286  0164DC  0007               	dw	7
   287                           
   288                           ;initializer for _gCharSize
   289  0164DE  0005               	dw	5
   290  0164E0  0007               	dw	7
   291                           
   292                           	psect	mediumconst
   293  00FCC2                     __pmediumconst:
   294                           	opt stack 0
   295  00FCC2  00                 	db	0
   296  00FCC3                     _InitList:
   297                           	opt stack 0
   298  00FCC3  1100               	dw	4352
   299  00FCC5  0080               	dw	128
   300  00FCC7  012C               	dw	300
   301  00FCC9  B100               	dw	45312
   302  00FCCB  0002               	dw	2
   303  00FCCD  0035               	dw	53
   304  00FCCF  0036               	dw	54
   305  00FCD1  B200               	dw	45568
   306  00FCD3  0002               	dw	2
   307  00FCD5  0035               	dw	53
   308  00FCD7  0036               	dw	54
   309  00FCD9  B300               	dw	45824
   310  00FCDB  0002               	dw	2
   311  00FCDD  0035               	dw	53
   312  00FCDF  0036               	dw	54
   313  00FCE1  0002               	dw	2
   314  00FCE3  0035               	dw	53
   315  00FCE5  0036               	dw	54
   316  00FCE7  B400               	dw	46080
   317  00FCE9  0000               	dw	0
   318  00FCEB  C000               	dw	49152
   319  00FCED  00A2               	dw	162
   320  00FCEF  0002               	dw	2
   321  00FCF1  0084               	dw	132
   322  00FCF3  C100               	dw	49408
   323  00FCF5  00C5               	dw	197
   324  00FCF7  C200               	dw	49664
   325  00FCF9  000D               	dw	13
   326  00FCFB  0000               	dw	0
   327  00FCFD  C300               	dw	49920
   328  00FCFF  008D               	dw	141
   329  00FD01  002A               	dw	42
   330  00FD03  C400               	dw	50176
   331  00FD05  008D               	dw	141
   332  00FD07  00EE               	dw	238
   333  00FD09  C500               	dw	50432
   334  00FD0B  000A               	dw	10
   335  00FD0D  3600               	dw	13824
   336  00FD0F  00C8               	dw	200
   337  00FD11  E000               	dw	57344
   338  00FD13  0012               	dw	18
   339  00FD15  001C               	dw	28
   340  00FD17  0010               	dw	16
   341  00FD19  0018               	dw	24
   342  00FD1B  0033               	dw	51
   343  00FD1D  002C               	dw	44
   344  00FD1F  0025               	dw	37
   345  00FD21  0028               	dw	40
   346  00FD23  0028               	dw	40
   347  00FD25  0027               	dw	39
   348  00FD27  002F               	dw	47
   349  00FD29  003C               	dw	60
   350  00FD2B  0000               	dw	0
   351  00FD2D  0003               	dw	3
   352  00FD2F  0003               	dw	3
   353  00FD31  0010               	dw	16
   354  00FD33  0080               	dw	128
   355  00FD35  0078               	dw	120
   356  00FD37  E100               	dw	57600
   357  00FD39  0012               	dw	18
   358  00FD3B  001C               	dw	28
   359  00FD3D  0010               	dw	16
   360  00FD3F  0018               	dw	24
   361  00FD41  002D               	dw	45
   362  00FD43  0028               	dw	40
   363  00FD45  0023               	dw	35
   364  00FD47  0028               	dw	40
   365  00FD49  0028               	dw	40
   366  00FD4B  0026               	dw	38
   367  00FD4D  002F               	dw	47
   368  00FD4F  003B               	dw	59
   369  00FD51  0000               	dw	0
   370  00FD53  0003               	dw	3
   371  00FD55  0003               	dw	3
   372  00FD57  0010               	dw	16
   373  00FD59  3A00               	dw	14848
   374  00FD5B  0005               	dw	5
   375  00FD5D  2A00               	dw	10752
   376  00FD5F  0000               	dw	0
   377  00FD61  0002               	dw	2
   378  00FD63  0000               	dw	0
   379  00FD65  0081               	dw	129
   380  00FD67  2B00               	dw	11008
   381  00FD69  0000               	dw	0
   382  00FD6B  0003               	dw	3
   383  00FD6D  0000               	dw	0
   384  00FD6F  00A2               	dw	162
   385  00FD71  2900               	dw	10496
   386  00FD73  2C00               	dw	11264
   387  00FD75                     __end_of_InitList:
   388                           	opt stack 0
   389  00FD75                     Timer0_Init@PRESCALE:
   390                           	opt stack 0
   391  00FD75  0002               	dw	2
   392  00FD77  0004               	dw	4
   393  00FD79  0008               	dw	8
   394  00FD7B  0010               	dw	16
   395  00FD7D  0020               	dw	32
   396  00FD7F  0040               	dw	64
   397  00FD81  0080               	dw	128
   398  00FD83  0100               	dw	256
   399  00FD85                     __end_ofTimer0_Init@PRESCALE:
   400                           	opt stack 0
   401  00FD85                     PortProperty_Valid@F6830:
   402                           	opt stack 0
   403  00FD85  00                 	db	0
   404  00FD86  01                 	db	1
   405  00FD87  02                 	db	2
   406  00FD88  00                 	db	0
   407  00FD89  01                 	db	1
   408  00FD8A  00                 	db	0
   409  00FD8B  01                 	db	1
   410  00FD8C  00                 	db	0
   411  00FD8D  02                 	db	2
   412  00FD8E  02                 	db	2
   413  00FD8F  00                 	db	0
   414  00FD90  00                 	db	0
   415  00FD91  03                 	db	3
   416  00FD92  03                 	db	3
   417  00FD93  03                 	db	3
   418  00FD94  00                 	db	0
   419  00FD95                     __end_ofPortProperty_Valid@F6830:
   420                           	opt stack 0
   421  00FD95                     _dpowers:
   422                           	opt stack 0
   423  00FD95  0001               	dw	1
   424  00FD97  000A               	dw	10
   425  00FD99  0064               	dw	100
   426  00FD9B  03E8               	dw	1000
   427  00FD9D  2710               	dw	10000
   428  00FD9F                     __end_of_dpowers:
   429                           	opt stack 0
   430  00FD9F                     _MASKS:
   431                           	opt stack 0
   432  00FD9F  00                 	db	0
   433  00FDA0  01                 	db	1
   434  00FDA1  03                 	db	3
   435  00FDA2  07                 	db	7
   436  00FDA3  0F                 	db	15
   437  00FDA4  1F                 	db	31
   438  00FDA5  3F                 	db	63
   439  00FDA6  7F                 	db	127
   440  00FDA7  FF                 	db	255
   441  00FDA8                     __end_of_MASKS:
   442                           	opt stack 0
   443  00FDA8                     HMI_SetButton@F7213:
   444                           	opt stack 0
   445  00FDA8  00                 	db	0
   446  00FDA9  02                 	db	2
   447  00FDAA  01                 	db	1
   448  00FDAB  03                 	db	3
   449  00FDAC                     __end_ofHMI_SetButton@F7213:
   450                           	opt stack 0
   451  00FDAC                     Timer2_Init@PRESCALE:
   452                           	opt stack 0
   453  00FDAC  01                 	db	1
   454  00FDAD  04                 	db	4
   455  00FDAE  10                 	db	16
   456  00FDAF                     __end_ofTimer2_Init@PRESCALE:
   457                           	opt stack 0
   458  00FDAF                     _Font5x7:
   459                           	opt stack 0
   460  00FDAF  00                 	db	0
   461  00FDB0  00                 	db	0
   462  00FDB1  00                 	db	0
   463  00FDB2  00                 	db	0
   464  00FDB3  00                 	db	0
   465  00FDB4  00                 	db	0
   466  00FDB5  00                 	db	0
   467  00FDB6  5F                 	db	95
   468  00FDB7  00                 	db	0
   469  00FDB8  00                 	db	0
   470  00FDB9  00                 	db	0
   471  00FDBA  07                 	db	7
   472  00FDBB  00                 	db	0
   473  00FDBC  07                 	db	7
   474  00FDBD  00                 	db	0
   475  00FDBE  14                 	db	20
   476  00FDBF  7F                 	db	127
   477  00FDC0  14                 	db	20
   478  00FDC1  7F                 	db	127
   479  00FDC2  14                 	db	20
   480  00FDC3  24                 	db	36
   481  00FDC4  2A                 	db	42
   482  00FDC5  7F                 	db	127
   483  00FDC6  2A                 	db	42
   484  00FDC7  12                 	db	18
   485  00FDC8  23                 	db	35
   486  00FDC9  13                 	db	19
   487  00FDCA  08                 	db	8
   488  00FDCB  64                 	db	100
   489  00FDCC  62                 	db	98
   490  00FDCD  36                 	db	54
   491  00FDCE  49                 	db	73
   492  00FDCF  55                 	db	85
   493  00FDD0  22                 	db	34
   494  00FDD1  50                 	db	80
   495  00FDD2  00                 	db	0
   496  00FDD3  05                 	db	5
   497  00FDD4  03                 	db	3
   498  00FDD5  00                 	db	0
   499  00FDD6  00                 	db	0
   500  00FDD7  00                 	db	0
   501  00FDD8  1C                 	db	28
   502  00FDD9  22                 	db	34
   503  00FDDA  41                 	db	65
   504  00FDDB  00                 	db	0
   505  00FDDC  00                 	db	0
   506  00FDDD  41                 	db	65
   507  00FDDE  22                 	db	34
   508  00FDDF  1C                 	db	28
   509  00FDE0  00                 	db	0
   510  00FDE1  08                 	db	8
   511  00FDE2  2A                 	db	42
   512  00FDE3  1C                 	db	28
   513  00FDE4  2A                 	db	42
   514  00FDE5  08                 	db	8
   515  00FDE6  08                 	db	8
   516  00FDE7  08                 	db	8
   517  00FDE8  3E                 	db	62
   518  00FDE9  08                 	db	8
   519  00FDEA  08                 	db	8
   520  00FDEB  00                 	db	0
   521  00FDEC  50                 	db	80
   522  00FDED  30                 	db	48
   523  00FDEE  00                 	db	0
   524  00FDEF  00                 	db	0
   525  00FDF0  08                 	db	8
   526  00FDF1  08                 	db	8
   527  00FDF2  08                 	db	8
   528  00FDF3  08                 	db	8
   529  00FDF4  08                 	db	8
   530  00FDF5  00                 	db	0
   531  00FDF6  60                 	db	96
   532  00FDF7  60                 	db	96
   533  00FDF8  00                 	db	0
   534  00FDF9  00                 	db	0
   535  00FDFA  20                 	db	32
   536  00FDFB  10                 	db	16
   537  00FDFC  08                 	db	8
   538  00FDFD  04                 	db	4
   539  00FDFE  02                 	db	2
   540  00FDFF  3E                 	db	62
   541  00FE00  51                 	db	81
   542  00FE01  49                 	db	73
   543  00FE02  45                 	db	69
   544  00FE03  3E                 	db	62
   545  00FE04  00                 	db	0
   546  00FE05  42                 	db	66
   547  00FE06  7F                 	db	127
   548  00FE07  40                 	db	64
   549  00FE08  00                 	db	0
   550  00FE09  42                 	db	66
   551  00FE0A  61                 	db	97
   552  00FE0B  51                 	db	81
   553  00FE0C  49                 	db	73
   554  00FE0D  46                 	db	70
   555  00FE0E  21                 	db	33
   556  00FE0F  41                 	db	65
   557  00FE10  45                 	db	69
   558  00FE11  4B                 	db	75
   559  00FE12  31                 	db	49
   560  00FE13  18                 	db	24
   561  00FE14  14                 	db	20
   562  00FE15  12                 	db	18
   563  00FE16  7F                 	db	127
   564  00FE17  10                 	db	16
   565  00FE18  27                 	db	39
   566  00FE19  45                 	db	69
   567  00FE1A  45                 	db	69
   568  00FE1B  45                 	db	69
   569  00FE1C  39                 	db	57
   570  00FE1D  3C                 	db	60
   571  00FE1E  4A                 	db	74
   572  00FE1F  49                 	db	73
   573  00FE20  49                 	db	73
   574  00FE21  30                 	db	48
   575  00FE22  01                 	db	1
   576  00FE23  71                 	db	113
   577  00FE24  09                 	db	9
   578  00FE25  05                 	db	5
   579  00FE26  03                 	db	3
   580  00FE27  36                 	db	54
   581  00FE28  49                 	db	73
   582  00FE29  49                 	db	73
   583  00FE2A  49                 	db	73
   584  00FE2B  36                 	db	54
   585  00FE2C  06                 	db	6
   586  00FE2D  49                 	db	73
   587  00FE2E  49                 	db	73
   588  00FE2F  29                 	db	41
   589  00FE30  1E                 	db	30
   590  00FE31  00                 	db	0
   591  00FE32  36                 	db	54
   592  00FE33  36                 	db	54
   593  00FE34  00                 	db	0
   594  00FE35  00                 	db	0
   595  00FE36  00                 	db	0
   596  00FE37  56                 	db	86
   597  00FE38  36                 	db	54
   598  00FE39  00                 	db	0
   599  00FE3A  00                 	db	0
   600  00FE3B  00                 	db	0
   601  00FE3C  08                 	db	8
   602  00FE3D  14                 	db	20
   603  00FE3E  22                 	db	34
   604  00FE3F  41                 	db	65
   605  00FE40  14                 	db	20
   606  00FE41  14                 	db	20
   607  00FE42  14                 	db	20
   608  00FE43  14                 	db	20
   609  00FE44  14                 	db	20
   610  00FE45  41                 	db	65
   611  00FE46  22                 	db	34
   612  00FE47  14                 	db	20
   613  00FE48  08                 	db	8
   614  00FE49  00                 	db	0
   615  00FE4A  02                 	db	2
   616  00FE4B  01                 	db	1
   617  00FE4C  51                 	db	81
   618  00FE4D  09                 	db	9
   619  00FE4E  06                 	db	6
   620  00FE4F  32                 	db	50
   621  00FE50  49                 	db	73
   622  00FE51  79                 	db	121
   623  00FE52  41                 	db	65
   624  00FE53  3E                 	db	62
   625  00FE54  7E                 	db	126
   626  00FE55  11                 	db	17
   627  00FE56  11                 	db	17
   628  00FE57  11                 	db	17
   629  00FE58  7E                 	db	126
   630  00FE59  7F                 	db	127
   631  00FE5A  49                 	db	73
   632  00FE5B  49                 	db	73
   633  00FE5C  49                 	db	73
   634  00FE5D  36                 	db	54
   635  00FE5E  3E                 	db	62
   636  00FE5F  41                 	db	65
   637  00FE60  41                 	db	65
   638  00FE61  41                 	db	65
   639  00FE62  22                 	db	34
   640  00FE63  7F                 	db	127
   641  00FE64  41                 	db	65
   642  00FE65  41                 	db	65
   643  00FE66  22                 	db	34
   644  00FE67  1C                 	db	28
   645  00FE68  7F                 	db	127
   646  00FE69  49                 	db	73
   647  00FE6A  49                 	db	73
   648  00FE6B  49                 	db	73
   649  00FE6C  41                 	db	65
   650  00FE6D  7F                 	db	127
   651  00FE6E  09                 	db	9
   652  00FE6F  09                 	db	9
   653  00FE70  01                 	db	1
   654  00FE71  01                 	db	1
   655  00FE72  3E                 	db	62
   656  00FE73  41                 	db	65
   657  00FE74  41                 	db	65
   658  00FE75  51                 	db	81
   659  00FE76  32                 	db	50
   660  00FE77  7F                 	db	127
   661  00FE78  08                 	db	8
   662  00FE79  08                 	db	8
   663  00FE7A  08                 	db	8
   664  00FE7B  7F                 	db	127
   665  00FE7C  00                 	db	0
   666  00FE7D  41                 	db	65
   667  00FE7E  7F                 	db	127
   668  00FE7F  41                 	db	65
   669  00FE80  00                 	db	0
   670  00FE81  20                 	db	32
   671  00FE82  40                 	db	64
   672  00FE83  41                 	db	65
   673  00FE84  3F                 	db	63
   674  00FE85  01                 	db	1
   675  00FE86  7F                 	db	127
   676  00FE87  08                 	db	8
   677  00FE88  14                 	db	20
   678  00FE89  22                 	db	34
   679  00FE8A  41                 	db	65
   680  00FE8B  7F                 	db	127
   681  00FE8C  40                 	db	64
   682  00FE8D  40                 	db	64
   683  00FE8E  40                 	db	64
   684  00FE8F  40                 	db	64
   685  00FE90  7F                 	db	127
   686  00FE91  02                 	db	2
   687  00FE92  04                 	db	4
   688  00FE93  02                 	db	2
   689  00FE94  7F                 	db	127
   690  00FE95  7F                 	db	127
   691  00FE96  04                 	db	4
   692  00FE97  08                 	db	8
   693  00FE98  10                 	db	16
   694  00FE99  7F                 	db	127
   695  00FE9A  3E                 	db	62
   696  00FE9B  41                 	db	65
   697  00FE9C  41                 	db	65
   698  00FE9D  41                 	db	65
   699  00FE9E  3E                 	db	62
   700  00FE9F  7F                 	db	127
   701  00FEA0  09                 	db	9
   702  00FEA1  09                 	db	9
   703  00FEA2  09                 	db	9
   704  00FEA3  06                 	db	6
   705  00FEA4  3E                 	db	62
   706  00FEA5  41                 	db	65
   707  00FEA6  51                 	db	81
   708  00FEA7  21                 	db	33
   709  00FEA8  5E                 	db	94
   710  00FEA9  7F                 	db	127
   711  00FEAA  09                 	db	9
   712  00FEAB  19                 	db	25
   713  00FEAC  29                 	db	41
   714  00FEAD  46                 	db	70
   715  00FEAE  46                 	db	70
   716  00FEAF  49                 	db	73
   717  00FEB0  49                 	db	73
   718  00FEB1  49                 	db	73
   719  00FEB2  31                 	db	49
   720  00FEB3  01                 	db	1
   721  00FEB4  01                 	db	1
   722  00FEB5  7F                 	db	127
   723  00FEB6  01                 	db	1
   724  00FEB7  01                 	db	1
   725  00FEB8  3F                 	db	63
   726  00FEB9  40                 	db	64
   727  00FEBA  40                 	db	64
   728  00FEBB  40                 	db	64
   729  00FEBC  3F                 	db	63
   730  00FEBD  1F                 	db	31
   731  00FEBE  20                 	db	32
   732  00FEBF  40                 	db	64
   733  00FEC0  20                 	db	32
   734  00FEC1  1F                 	db	31
   735  00FEC2  7F                 	db	127
   736  00FEC3  20                 	db	32
   737  00FEC4  18                 	db	24
   738  00FEC5  20                 	db	32
   739  00FEC6  7F                 	db	127
   740  00FEC7  63                 	db	99
   741  00FEC8  14                 	db	20
   742  00FEC9  08                 	db	8
   743  00FECA  14                 	db	20
   744  00FECB  63                 	db	99
   745  00FECC  03                 	db	3
   746  00FECD  04                 	db	4
   747  00FECE  78                 	db	120
   748  00FECF  04                 	db	4
   749  00FED0  03                 	db	3
   750  00FED1  61                 	db	97
   751  00FED2  51                 	db	81
   752  00FED3  49                 	db	73
   753  00FED4  45                 	db	69
   754  00FED5  43                 	db	67
   755  00FED6  00                 	db	0
   756  00FED7  00                 	db	0
   757  00FED8  7F                 	db	127
   758  00FED9  41                 	db	65
   759  00FEDA  41                 	db	65
   760  00FEDB  02                 	db	2
   761  00FEDC  04                 	db	4
   762  00FEDD  08                 	db	8
   763  00FEDE  10                 	db	16
   764  00FEDF  20                 	db	32
   765  00FEE0  41                 	db	65
   766  00FEE1  41                 	db	65
   767  00FEE2  7F                 	db	127
   768  00FEE3  00                 	db	0
   769  00FEE4  00                 	db	0
   770  00FEE5  04                 	db	4
   771  00FEE6  02                 	db	2
   772  00FEE7  01                 	db	1
   773  00FEE8  02                 	db	2
   774  00FEE9  04                 	db	4
   775  00FEEA  40                 	db	64
   776  00FEEB  40                 	db	64
   777  00FEEC  40                 	db	64
   778  00FEED  40                 	db	64
   779  00FEEE  40                 	db	64
   780  00FEEF  00                 	db	0
   781  00FEF0  01                 	db	1
   782  00FEF1  02                 	db	2
   783  00FEF2  04                 	db	4
   784  00FEF3  00                 	db	0
   785  00FEF4  20                 	db	32
   786  00FEF5  54                 	db	84
   787  00FEF6  54                 	db	84
   788  00FEF7  54                 	db	84
   789  00FEF8  78                 	db	120
   790  00FEF9  7F                 	db	127
   791  00FEFA  48                 	db	72
   792  00FEFB  44                 	db	68
   793  00FEFC  44                 	db	68
   794  00FEFD  38                 	db	56
   795  00FEFE  38                 	db	56
   796  00FEFF  44                 	db	68
   797  00FF00  44                 	db	68
   798  00FF01  44                 	db	68
   799  00FF02  20                 	db	32
   800  00FF03  38                 	db	56
   801  00FF04  44                 	db	68
   802  00FF05  44                 	db	68
   803  00FF06  48                 	db	72
   804  00FF07  7F                 	db	127
   805  00FF08  38                 	db	56
   806  00FF09  54                 	db	84
   807  00FF0A  54                 	db	84
   808  00FF0B  54                 	db	84
   809  00FF0C  18                 	db	24
   810  00FF0D  08                 	db	8
   811  00FF0E  7E                 	db	126
   812  00FF0F  09                 	db	9
   813  00FF10  01                 	db	1
   814  00FF11  02                 	db	2
   815  00FF12  08                 	db	8
   816  00FF13  14                 	db	20
   817  00FF14  54                 	db	84
   818  00FF15  54                 	db	84
   819  00FF16  3C                 	db	60
   820  00FF17  7F                 	db	127
   821  00FF18  08                 	db	8
   822  00FF19  04                 	db	4
   823  00FF1A  04                 	db	4
   824  00FF1B  78                 	db	120
   825  00FF1C  00                 	db	0
   826  00FF1D  44                 	db	68
   827  00FF1E  7D                 	db	125
   828  00FF1F  40                 	db	64
   829  00FF20  00                 	db	0
   830  00FF21  20                 	db	32
   831  00FF22  40                 	db	64
   832  00FF23  44                 	db	68
   833  00FF24  3D                 	db	61
   834  00FF25  00                 	db	0
   835  00FF26  00                 	db	0
   836  00FF27  7F                 	db	127
   837  00FF28  10                 	db	16
   838  00FF29  28                 	db	40
   839  00FF2A  44                 	db	68
   840  00FF2B  00                 	db	0
   841  00FF2C  41                 	db	65
   842  00FF2D  7F                 	db	127
   843  00FF2E  40                 	db	64
   844  00FF2F  00                 	db	0
   845  00FF30  7C                 	db	124
   846  00FF31  04                 	db	4
   847  00FF32  18                 	db	24
   848  00FF33  04                 	db	4
   849  00FF34  78                 	db	120
   850  00FF35  7C                 	db	124
   851  00FF36  08                 	db	8
   852  00FF37  04                 	db	4
   853  00FF38  04                 	db	4
   854  00FF39  78                 	db	120
   855  00FF3A  38                 	db	56
   856  00FF3B  44                 	db	68
   857  00FF3C  44                 	db	68
   858  00FF3D  44                 	db	68
   859  00FF3E  38                 	db	56
   860  00FF3F  7C                 	db	124
   861  00FF40  14                 	db	20
   862  00FF41  14                 	db	20
   863  00FF42  14                 	db	20
   864  00FF43  08                 	db	8
   865  00FF44  08                 	db	8
   866  00FF45  14                 	db	20
   867  00FF46  14                 	db	20
   868  00FF47  18                 	db	24
   869  00FF48  7C                 	db	124
   870  00FF49  7C                 	db	124
   871  00FF4A  08                 	db	8
   872  00FF4B  04                 	db	4
   873  00FF4C  04                 	db	4
   874  00FF4D  08                 	db	8
   875  00FF4E  48                 	db	72
   876  00FF4F  54                 	db	84
   877  00FF50  54                 	db	84
   878  00FF51  54                 	db	84
   879  00FF52  20                 	db	32
   880  00FF53  04                 	db	4
   881  00FF54  3F                 	db	63
   882  00FF55  44                 	db	68
   883  00FF56  40                 	db	64
   884  00FF57  20                 	db	32
   885  00FF58  3C                 	db	60
   886  00FF59  40                 	db	64
   887  00FF5A  40                 	db	64
   888  00FF5B  20                 	db	32
   889  00FF5C  7C                 	db	124
   890  00FF5D  1C                 	db	28
   891  00FF5E  20                 	db	32
   892  00FF5F  40                 	db	64
   893  00FF60  20                 	db	32
   894  00FF61  1C                 	db	28
   895  00FF62  3C                 	db	60
   896  00FF63  40                 	db	64
   897  00FF64  30                 	db	48
   898  00FF65  40                 	db	64
   899  00FF66  3C                 	db	60
   900  00FF67  44                 	db	68
   901  00FF68  28                 	db	40
   902  00FF69  10                 	db	16
   903  00FF6A  28                 	db	40
   904  00FF6B  44                 	db	68
   905  00FF6C  0C                 	db	12
   906  00FF6D  50                 	db	80
   907  00FF6E  50                 	db	80
   908  00FF6F  50                 	db	80
   909  00FF70  3C                 	db	60
   910  00FF71  44                 	db	68
   911  00FF72  64                 	db	100
   912  00FF73  54                 	db	84
   913  00FF74  4C                 	db	76
   914  00FF75  44                 	db	68
   915  00FF76  00                 	db	0
   916  00FF77  08                 	db	8
   917  00FF78  36                 	db	54
   918  00FF79  41                 	db	65
   919  00FF7A  00                 	db	0
   920  00FF7B  00                 	db	0
   921  00FF7C  00                 	db	0
   922  00FF7D  7F                 	db	127
   923  00FF7E  00                 	db	0
   924  00FF7F  00                 	db	0
   925  00FF80  00                 	db	0
   926  00FF81  41                 	db	65
   927  00FF82  36                 	db	54
   928  00FF83  08                 	db	8
   929  00FF84  00                 	db	0
   930  00FF85  08                 	db	8
   931  00FF86  08                 	db	8
   932  00FF87  2A                 	db	42
   933  00FF88  1C                 	db	28
   934  00FF89  08                 	db	8
   935  00FF8A  08                 	db	8
   936  00FF8B  1C                 	db	28
   937  00FF8C  2A                 	db	42
   938  00FF8D  08                 	db	8
   939  00FF8E  08                 	db	8
   940  00FF8F                     __end_of_Font5x7:
   941                           	opt stack 0
   942  00FF8F                     _PortG_Property:
   943                           	opt stack 0
   944  00FF8F  FC00               	dw	64512
   945  00FF91                     __end_of_PortG_Property:
   946                           	opt stack 0
   947  00FF91                     _PortF_Property:
   948                           	opt stack 0
   949  00FF91  0FFF               	dw	4095
   950  00FF93                     __end_of_PortF_Property:
   951                           	opt stack 0
   952  00FF93                     _PortE_Property:
   953                           	opt stack 0
   954  00FF93  0000               	dw	0
   955  00FF95                     __end_of_PortE_Property:
   956                           	opt stack 0
   957  00FF95                     _PortD_Property:
   958                           	opt stack 0
   959  00FF95  FFFF               	dw	65535
   960  00FF97                     __end_of_PortD_Property:
   961                           	opt stack 0
   962  00FF97                     _PortC_Property:
   963                           	opt stack 0
   964  00FF97  FFF0               	dw	65520
   965  00FF99                     __end_of_PortC_Property:
   966                           	opt stack 0
   967  00FF99                     _PortB_Property:
   968                           	opt stack 0
   969  00FF99  FF00               	dw	65280
   970  00FF9B                     __end_of_PortB_Property:
   971                           	opt stack 0
   972  00FF9B                     _PortA_Property:
   973                           	opt stack 0
   974  00FF9B  00FF               	dw	255
   975  00FF9D                     __end_of_PortA_Property:
   976                           	opt stack 0
   977  0000                     _TMR0	set	4054
   978  0000                     _RCREG1	set	4015
   979  0000                     _TXREG1	set	4014
   980  0000                     _SPBRG1	set	4016
   981  0000                     _TXSTA1bits	set	4013
   982  0000                     _BAUDCON1bits	set	3966
   983  0000                     _RCSTA1	set	4012
   984  0000                     _TXSTA1	set	4013
   985  0000                     _TRISCbits	set	3988
   986  0000                     _PR2	set	4043
   987  0000                     _T2CONbits	set	4042
   988  0000                     _T0CONbits	set	4053
   989  0000                     _RCONbits	set	4048
   990  0000                     _OSCTUNEbits	set	3995
   991  0000                     _PIR3	set	4004
   992  0000                     _PIR2	set	4001
   993  0000                     _PIR1	set	3998
   994  0000                     _INTCONbits	set	4082
   995  0000                     _SSP2CON2bits	set	3947
   996  0000                     _SSP1CON2bits	set	4037
   997  0000                     _SSP1ADD	set	4040
   998  0000                     _ANCON0	set	4033
   999  0000                     _ADRESL	set	4035
  1000  0000                     _ADRESH	set	4036
  1001  0000                     _ADCON1bits	set	4033
  1002  0000                     _ADCON0bits	set	4034
  1003  0000                     _SSP2CON1bits	set	3948
  1004  0000                     _SSP1CON1bits	set	4038
  1005  0000                     _SSP2STATbits	set	3949
  1006  0000                     _SSP1STATbits	set	4039
  1007  0000                     _PIE3bits	set	4003
  1008  0000                     _PIE1bits	set	3997
  1009  0000                     _PIR3bits	set	4004
  1010  0000                     _PIR1bits	set	3998
  1011  0000                     _IPR3bits	set	4005
  1012  0000                     _IPR1bits	set	3999
  1013  0000                     _PORTFbits	set	3973
  1014  0000                     _SSP2CON2	set	3947
  1015  0000                     _SSP1CON2	set	4037
  1016  0000                     _SSP2BUF	set	3951
  1017  0000                     _SSP2CON1	set	3948
  1018  0000                     _SSP2STAT	set	3949
  1019  0000                     _SSP1BUF	set	4041
  1020  0000                     _SSP1CON1	set	4038
  1021  0000                     _SSP1STAT	set	4039
  1022  0000                     _LATG	set	3983
  1023  0000                     _LATF	set	3982
  1024  0000                     _LATE	set	3981
  1025  0000                     _LATD	set	3980
  1026  0000                     _LATC	set	3979
  1027  0000                     _LATB	set	3978
  1028  0000                     _LATA	set	3977
  1029  0000                     _TRISG	set	3992
  1030  0000                     _TRISF	set	3991
  1031  0000                     _TRISE	set	3990
  1032  0000                     _TRISD	set	3989
  1033  0000                     _TRISC	set	3988
  1034  0000                     _TRISB	set	3987
  1035  0000                     _TRISA	set	3986
  1036  0000                     _PORTG	set	3974
  1037  0000                     _PORTF	set	3973
  1038  0000                     _PORTE	set	3972
  1039  0000                     _PORTD	set	3971
  1040  0000                     _PORTC	set	3970
  1041  0000                     _PORTB	set	3969
  1042  0000                     _PORTA	set	3968
  1043  00FF9D                     STR_2:
  1044  00FF9D  54                 	db	84	;'T'
  1045  00FF9E  6F                 	db	111	;'o'
  1046  00FF9F  74                 	db	116	;'t'
  1047  00FFA0  61                 	db	97	;'a'
  1048  00FFA1  6C                 	db	108	;'l'
  1049  00FFA2  20                 	db	32
  1050  00FFA3  44                 	db	68	;'D'
  1051  00FFA4  69                 	db	105	;'i'
  1052  00FFA5  73                 	db	115	;'s'
  1053  00FFA6  74                 	db	116	;'t'
  1054  00FFA7  61                 	db	97	;'a'
  1055  00FFA8  6E                 	db	110	;'n'
  1056  00FFA9  63                 	db	99	;'c'
  1057  00FFAA  65                 	db	101	;'e'
  1058  00FFAB  3A                 	db	58	;':'
  1059  00FFAC  25                 	db	37
  1060  00FFAD  75                 	db	117	;'u'
  1061  00FFAE  0A                 	db	10
  1062  00FFAF  4C                 	db	76	;'L'
  1063  00FFB0  65                 	db	101	;'e'
  1064  00FFB1  66                 	db	102	;'f'
  1065  00FFB2  74                 	db	116	;'t'
  1066  00FFB3  20                 	db	32
  1067  00FFB4  42                 	db	66	;'B'
  1068  00FFB5  75                 	db	117	;'u'
  1069  00FFB6  6D                 	db	109	;'m'
  1070  00FFB7  70                 	db	112	;'p'
  1071  00FFB8  3A                 	db	58	;':'
  1072  00FFB9  25                 	db	37
  1073  00FFBA  75                 	db	117	;'u'
  1074  00FFBB  0A                 	db	10
  1075  00FFBC  52                 	db	82	;'R'
  1076  00FFBD  69                 	db	105	;'i'
  1077  00FFBE  67                 	db	103	;'g'
  1078  00FFBF  68                 	db	104	;'h'
  1079  00FFC0  74                 	db	116	;'t'
  1080  00FFC1  20                 	db	32
  1081  00FFC2  42                 	db	66	;'B'
  1082  00FFC3  75                 	db	117	;'u'
  1083  00FFC4  6D                 	db	109	;'m'
  1084  00FFC5  70                 	db	112	;'p'
  1085  00FFC6  3A                 	db	58	;':'
  1086  00FFC7  25                 	db	37
  1087  00FFC8  75                 	db	117	;'u'
  1088  00FFC9  0A                 	db	10
  1089  00FFCA  00                 	db	0
  1090  00FFCB                     STR_8:
  1091  00FFCB  43                 	db	67	;'C'
  1092  00FFCC  6C                 	db	108	;'l'
  1093  00FFCD  6F                 	db	111	;'o'
  1094  00FFCE  73                 	db	115	;'s'
  1095  00FFCF  65                 	db	101	;'e'
  1096  00FFD0  73                 	db	115	;'s'
  1097  00FFD1  74                 	db	116	;'t'
  1098  00FFD2  20                 	db	32
  1099  00FFD3  57                 	db	87	;'W'
  1100  00FFD4  61                 	db	97	;'a'
  1101  00FFD5  6C                 	db	108	;'l'
  1102  00FFD6  6C                 	db	108	;'l'
  1103  00FFD7  3A                 	db	58	;':'
  1104  00FFD8  25                 	db	37
  1105  00FFD9  75                 	db	117	;'u'
  1106  00FFDA  0A                 	db	10
  1107  00FFDB  43                 	db	67	;'C'
  1108  00FFDC  6C                 	db	108	;'l'
  1109  00FFDD  6F                 	db	111	;'o'
  1110  00FFDE  73                 	db	115	;'s'
  1111  00FFDF  65                 	db	101	;'e'
  1112  00FFE0  73                 	db	115	;'s'
  1113  00FFE1  74                 	db	116	;'t'
  1114  00FFE2  20                 	db	32
  1115  00FFE3  41                 	db	65	;'A'
  1116  00FFE4  6E                 	db	110	;'n'
  1117  00FFE5  67                 	db	103	;'g'
  1118  00FFE6  6C                 	db	108	;'l'
  1119  00FFE7  65                 	db	101	;'e'
  1120  00FFE8  3A                 	db	58	;':'
  1121  00FFE9  25                 	db	37
  1122  00FFEA  75                 	db	117	;'u'
  1123  00FFEB  0A                 	db	10
  1124  00FFEC  00                 	db	0
  1125  00FFED                     STR_6:
  1126  00FFED  44                 	db	68	;'D'
  1127  00FFEE  69                 	db	105	;'i'
  1128  00FFEF  73                 	db	115	;'s'
  1129  00FFF0  74                 	db	116	;'t'
  1130  00FFF1  61                 	db	97	;'a'
  1131  00FFF2  6E                 	db	110	;'n'
  1132  00FFF3  63                 	db	99	;'c'
  1133  00FFF4  65                 	db	101	;'e'
  1134  00FFF5  3A                 	db	58	;':'
  1135  00FFF6  20                 	db	32
  1136  00FFF7  25                 	db	37
  1137  00FFF8  64                 	db	100	;'d'
  1138  00FFF9  0A                 	db	10
  1139  00FFFA  00                 	db	0
  1140  00FFFB                     STR_1:
  1141  00FFFB  25                 	db	37
  1142  00FFFC  63                 	db	99	;'c'
  1143  00FFFD  00                 	db	0
  1144  0000                     
  1145                           ; #config settings
  1146  00FFFE  00                 	db	0	; dummy byte at the end
  1147  0000                     
  1148                           	psect	cinit
  1149  0143AE                     __pcinit:
  1150                           	opt stack 0
  1151  0143AE                     start_initialization:
  1152                           	opt stack 0
  1153  0143AE                     __initialization:
  1154                           	opt stack 0
  1155                           
  1156                           ; Initialize objects allocated to BANK3 (12 bytes)
  1157                           ; load TBLPTR registers with __pidataBANK3
  1158  0143AE  0ED6               	movlw	low __pidataBANK3
  1159  0143B0  6EF6               	movwf	tblptrl,c
  1160  0143B2  0E64               	movlw	high __pidataBANK3
  1161  0143B4  6EF7               	movwf	tblptrh,c
  1162  0143B6  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1163  0143B8  6EF8               	movwf	tblptru,c
  1164  0143BA  EE03  F0E5         	lfsr	0,__pdataBANK3
  1165  0143BE  EE10 F00C          	lfsr	1,12
  1166  0143C2                     copy_data0:
  1167  0143C2  0009               	tblrd		*+
  1168  0143C4  CFF5 FFEE          	movff	tablat,postinc0
  1169  0143C8  50E5               	movf	postdec1,w,c
  1170  0143CA  50E1               	movf	fsr1l,w,c
  1171  0143CC  E1FA               	bnz	copy_data0
  1172                           
  1173                           ; Initialize objects allocated to BANK0 (7 bytes)
  1174                           ; load TBLPTR registers with __pidataBANK0
  1175  0143CE  0E3C               	movlw	low __pidataBANK0
  1176  0143D0  6EF6               	movwf	tblptrl,c
  1177  0143D2  0E65               	movlw	high __pidataBANK0
  1178  0143D4  6EF7               	movwf	tblptrh,c
  1179  0143D6  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1180  0143D8  6EF8               	movwf	tblptru,c
  1181  0143DA  EE00  F0F9         	lfsr	0,__pdataBANK0
  1182  0143DE  EE10 F007          	lfsr	1,7
  1183  0143E2                     copy_data1:
  1184  0143E2  0009               	tblrd		*+
  1185  0143E4  CFF5 FFEE          	movff	tablat,postinc0
  1186  0143E8  50E5               	movf	postdec1,w,c
  1187  0143EA  50E1               	movf	fsr1l,w,c
  1188  0143EC  E1FA               	bnz	copy_data1
  1189                           
  1190                           ; Initialize objects allocated to COMRAM (10 bytes)
  1191                           ; load TBLPTR registers with __pidataCOMRAM
  1192  0143EE  0E06               	movlw	low __pidataCOMRAM
  1193  0143F0  6EF6               	movwf	tblptrl,c
  1194  0143F2  0E65               	movlw	high __pidataCOMRAM
  1195  0143F4  6EF7               	movwf	tblptrh,c
  1196  0143F6  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1197  0143F8  6EF8               	movwf	tblptru,c
  1198  0143FA  EE00  F047         	lfsr	0,__pdataCOMRAM
  1199  0143FE  EE10 F00A          	lfsr	1,10
  1200  014402                     copy_data2:
  1201  014402  0009               	tblrd		*+
  1202  014404  CFF5 FFEE          	movff	tablat,postinc0
  1203  014408  50E5               	movf	postdec1,w,c
  1204  01440A  50E1               	movf	fsr1l,w,c
  1205  01440C  E1FA               	bnz	copy_data2
  1206                           
  1207                           ; Clear objects allocated to BIGRAM (300 bytes)
  1208  01440E  EE04  F0C8         	lfsr	0,__pbssBIGRAM
  1209  014412  EE11 F02C          	lfsr	1,300
  1210  014416                     clear_0:
  1211  014416  6AEE               	clrf	postinc0,c
  1212  014418  50E5               	movf	postdec1,w,c
  1213  01441A  50E1               	movf	fsr1l,w,c
  1214  01441C  E1FC               	bnz	clear_0
  1215  01441E  50E2               	movf	fsr1h,w,c
  1216  014420  E1FA               	bnz	clear_0
  1217                           
  1218                           ; Clear objects allocated to BANK4 (200 bytes)
  1219  014422  EE04  F000         	lfsr	0,__pbssBANK4
  1220  014426  0EC8               	movlw	200
  1221  014428                     clear_1:
  1222  014428  6AEE               	clrf	postinc0,c
  1223  01442A  06E8               	decf	wreg,f,c
  1224  01442C  E1FD               	bnz	clear_1
  1225                           
  1226                           ; Clear objects allocated to BANK3 (229 bytes)
  1227  01442E  EE03  F000         	lfsr	0,__pbssBANK3
  1228  014432  0EE5               	movlw	229
  1229  014434                     clear_2:
  1230  014434  6AEE               	clrf	postinc0,c
  1231  014436  06E8               	decf	wreg,f,c
  1232  014438  E1FD               	bnz	clear_2
  1233                           
  1234                           ; Clear objects allocated to BANK0 (63 bytes)
  1235  01443A  EE00  F0BA         	lfsr	0,__pbssBANK0
  1236  01443E  0E3F               	movlw	63
  1237  014440                     clear_3:
  1238  014440  6AEE               	clrf	postinc0,c
  1239  014442  06E8               	decf	wreg,f,c
  1240  014444  E1FD               	bnz	clear_3
  1241                           
  1242                           ; Clear objects allocated to COMRAM (30 bytes)
  1243  014446  EE00  F029         	lfsr	0,__pbssCOMRAM
  1244  01444A  0E1E               	movlw	30
  1245  01444C                     clear_4:
  1246  01444C  6AEE               	clrf	postinc0,c
  1247  01444E  06E8               	decf	wreg,f,c
  1248  014450  E1FD               	bnz	clear_4
  1249  014452                     end_of_initialization:
  1250                           	opt stack 0
  1251  014452                     __end_of__initialization:
  1252                           	opt stack 0
  1253  014452  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1254  014454  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1255  014456  0100               	movlb	0
  1256  014458  EF3F  F0AC         	goto	_main	;jump to C main() function
  1257                           tblptru	equ	0xFF8
  1258                           tblptrh	equ	0xFF7
  1259                           tblptrl	equ	0xFF6
  1260                           tablat	equ	0xFF5
  1261                           postinc0	equ	0xFEE
  1262                           wreg	equ	0xFE8
  1263                           postdec1	equ	0xFE5
  1264                           fsr1h	equ	0xFE2
  1265                           fsr1l	equ	0xFE1
  1266                           
  1267                           	psect	bssCOMRAM
  1268  000029                     __pbssCOMRAM:
  1269                           	opt stack 0
  1270  000029                     _COUNTER:
  1271                           	opt stack 0
  1272  000029                     	ds	2
  1273  00002B                     HMI_GRender@a:
  1274                           	opt stack 0
  1275  00002B                     	ds	2
  1276  00002D                     SPI_Send9@dat:
  1277                           	opt stack 0
  1278  00002D                     	ds	2
  1279  00002F                     _iRDropCaster:
  1280                           	opt stack 0
  1281  00002F                     	ds	1
  1282  000030                     _iRVirtualWall:
  1283                           	opt stack 0
  1284  000030                     	ds	1
  1285  000031                     _iRCliffR:
  1286                           	opt stack 0
  1287  000031                     	ds	1
  1288  000032                     _iRCliffFR:
  1289                           	opt stack 0
  1290  000032                     	ds	1
  1291  000033                     _iRCliffFL:
  1292                           	opt stack 0
  1293  000033                     	ds	1
  1294  000034                     _iRCliffL:
  1295                           	opt stack 0
  1296  000034                     	ds	1
  1297  000035                     _iRWall:
  1298                           	opt stack 0
  1299  000035                     	ds	1
  1300  000036                     _iRBumpDrop:
  1301                           	opt stack 0
  1302  000036                     	ds	1
  1303  000037                     _iRScriptIndex:
  1304                           	opt stack 0
  1305  000037                     	ds	1
  1306  000038                     _u:
  1307                           	opt stack 0
  1308  000038                     	ds	1
  1309  000039                     _j:
  1310                           	opt stack 0
  1311  000039                     	ds	1
  1312  00003A                     _i:
  1313                           	opt stack 0
  1314  00003A                     	ds	1
  1315  00003B                     rand@screw:
  1316                           	opt stack 0
  1317  00003B                     	ds	1
  1318  00003C                     _ADC_Initialised:
  1319                           	opt stack 0
  1320  00003C                     	ds	1
  1321  00003D                     OutSeg@a:
  1322                           	opt stack 0
  1323  00003D                     	ds	1
  1324  00003E                     OutSeg@segset:
  1325                           	opt stack 0
  1326  00003E                     	ds	1
  1327  00003F                     OutSeg@cur:
  1328                           	opt stack 0
  1329  00003F                     	ds	1
  1330  000040                     _I2C1T:
  1331                           	opt stack 0
  1332  000040                     	ds	7
  1333                           tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1h	equ	0xFE2
  1341                           fsr1l	equ	0xFE1
  1342                           
  1343                           	psect	dataCOMRAM
  1344  000047                     __pdataCOMRAM:
  1345                           	opt stack 0
  1346  000047                     _gCursor:
  1347                           	opt stack 0
  1348  000047                     	ds	4
  1349  00004B                     _Bus_State:
  1350                           	opt stack 0
  1351  00004B                     	ds	1
  1352  00004C                     	ds	1
  1353  00004D                     	ds	1
  1354  00004E                     	ds	1
  1355  00004F                     _l:
  1356                           	opt stack 0
  1357  00004F                     	ds	1
  1358  000050                     _w:
  1359                           	opt stack 0
  1360  000050                     	ds	1
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           postdec1	equ	0xFE5
  1368                           fsr1h	equ	0xFE2
  1369                           fsr1l	equ	0xFE1
  1370                           
  1371                           	psect	bssBANK0
  1372  0000BA                     __pbssBANK0:
  1373                           	opt stack 0
  1374  0000BA                     _lQueue:
  1375                           	opt stack 0
  1376  0000BA                     	ds	3
  1377  0000BD                     _lStepFunction:
  1378                           	opt stack 0
  1379  0000BD                     	ds	3
  1380  0000C0                     _IRValue:
  1381                           	opt stack 0
  1382  0000C0                     	ds	2
  1383  0000C2                     _Stepstomin:
  1384                           	opt stack 0
  1385  0000C2                     	ds	2
  1386  0000C4                     _StepRotate:
  1387                           	opt stack 0
  1388  0000C4                     	ds	2
  1389  0000C6                     _angleTotal:
  1390                           	opt stack 0
  1391  0000C6                     	ds	2
  1392  0000C8                     _distanceTotal:
  1393                           	opt stack 0
  1394  0000C8                     	ds	2
  1395  0000CA                     _pShiftVal:
  1396                           	opt stack 0
  1397  0000CA                     	ds	2
  1398  0000CC                     _val:
  1399                           	opt stack 0
  1400  0000CC                     	ds	2
  1401  0000CE                     _lMotor:
  1402                           	opt stack 0
  1403  0000CE                     	ds	2
  1404  0000D0                     _lCurrent:
  1405                           	opt stack 0
  1406  0000D0                     	ds	2
  1407  0000D2                     _gBackcolour:
  1408                           	opt stack 0
  1409  0000D2                     	ds	2
  1410  0000D4                     _iRDropLeft:
  1411                           	opt stack 0
  1412  0000D4                     	ds	1
  1413  0000D5                     _iRDropRight:
  1414                           	opt stack 0
  1415  0000D5                     	ds	1
  1416  0000D6                     _iRBumpLeft:
  1417                           	opt stack 0
  1418  0000D6                     	ds	1
  1419  0000D7                     _iRBumpRight:
  1420                           	opt stack 0
  1421  0000D7                     	ds	1
  1422  0000D8                     Event_TestButton@j:
  1423                           	opt stack 0
  1424  0000D8                     	ds	1
  1425  0000D9                     Timer2_Init@PRE:
  1426                           	opt stack 0
  1427  0000D9                     	ds	1
  1428  0000DA                     Timer2_Init@INDEX:
  1429                           	opt stack 0
  1430  0000DA                     	ds	1
  1431  0000DB                     Timer0_Init@PRE:
  1432                           	opt stack 0
  1433  0000DB                     	ds	1
  1434  0000DC                     _INDEX:
  1435                           	opt stack 0
  1436  0000DC                     	ds	1
  1437  0000DD                     _lBufferY:
  1438                           	opt stack 0
  1439  0000DD                     	ds	1
  1440  0000DE                     _lBufferX:
  1441                           	opt stack 0
  1442  0000DE                     	ds	1
  1443  0000DF                     _clearall:
  1444                           	opt stack 0
  1445  0000DF                     	ds	1
  1446  0000E0                     _PortD:
  1447                           	opt stack 0
  1448  0000E0                     	ds	10
  1449  0000EA                     _PortC:
  1450                           	opt stack 0
  1451  0000EA                     	ds	10
  1452  0000F4                     _ADC_AN0:
  1453                           	opt stack 0
  1454  0000F4                     	ds	5
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           postinc0	equ	0xFEE
  1460                           wreg	equ	0xFE8
  1461                           postdec1	equ	0xFE5
  1462                           fsr1h	equ	0xFE2
  1463                           fsr1l	equ	0xFE1
  1464                           
  1465                           	psect	dataBANK0
  1466  0000F9                     __pdataBANK0:
  1467                           	opt stack 0
  1468  0000F9                     _TimerX:
  1469                           	opt stack 0
  1470  0000F9                     	ds	2
  1471  0000FB                     _MinDist:
  1472                           	opt stack 0
  1473  0000FB                     	ds	2
  1474  0000FD                     _gForecolour:
  1475                           	opt stack 0
  1476  0000FD                     	ds	2
  1477  0000FF                     _change:
  1478                           	opt stack 0
  1479  0000FF                     	ds	1
  1480                           tblptru	equ	0xFF8
  1481                           tblptrh	equ	0xFF7
  1482                           tblptrl	equ	0xFF6
  1483                           tablat	equ	0xFF5
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           postdec1	equ	0xFE5
  1487                           fsr1h	equ	0xFE2
  1488                           fsr1l	equ	0xFE1
  1489                           
  1490                           	psect	bssBANK3
  1491  000300                     __pbssBANK3:
  1492                           	opt stack 0
  1493  000300                     _stepsToMinDegrees:
  1494                           	opt stack 0
  1495  000300                     	ds	4
  1496  000304                     _iRAngleSS:
  1497                           	opt stack 0
  1498  000304                     	ds	4
  1499  000308                     _iRDistanceSS:
  1500                           	opt stack 0
  1501  000308                     	ds	4
  1502  00030C                     Timer2_Init@DIV:
  1503                           	opt stack 0
  1504  00030C                     	ds	4
  1505  000310                     Timer0_Init@DIV:
  1506                           	opt stack 0
  1507  000310                     	ds	4
  1508  000314                     _gISR:
  1509                           	opt stack 0
  1510  000314                     	ds	3
  1511  000317                     _I2C2_More:
  1512                           	opt stack 0
  1513  000317                     	ds	3
  1514  00031A                     _I2C1_More:
  1515                           	opt stack 0
  1516  00031A                     	ds	3
  1517  00031D                     _I2C2_Done:
  1518                           	opt stack 0
  1519  00031D                     	ds	3
  1520  000320                     _I2C1_Done:
  1521                           	opt stack 0
  1522  000320                     	ds	3
  1523  000323                     _mode:
  1524                           	opt stack 0
  1525  000323                     	ds	2
  1526  000325                     _dip:
  1527                           	opt stack 0
  1528  000325                     	ds	2
  1529  000327                     _iRAngle:
  1530                           	opt stack 0
  1531  000327                     	ds	2
  1532  000329                     _iRDistance:
  1533                           	opt stack 0
  1534  000329                     	ds	2
  1535  00032B                     _HMIBoard:
  1536                           	opt stack 0
  1537  00032B                     	ds	58
  1538  000365                     _SPI1:
  1539                           	opt stack 0
  1540  000365                     	ds	11
  1541  000370                     _SPI2:
  1542                           	opt stack 0
  1543  000370                     	ds	11
  1544  00037B                     _DIPSwitch:
  1545                           	opt stack 0
  1546  00037B                     	ds	10
  1547  000385                     _TestButton:
  1548                           	opt stack 0
  1549  000385                     	ds	10
  1550  00038F                     _PortG:
  1551                           	opt stack 0
  1552  00038F                     	ds	10
  1553  000399                     _PortE:
  1554                           	opt stack 0
  1555  000399                     	ds	10
  1556  0003A3                     _PortB:
  1557                           	opt stack 0
  1558  0003A3                     	ds	10
  1559  0003AD                     _PortA:
  1560                           	opt stack 0
  1561  0003AD                     	ds	10
  1562  0003B7                     _PortF:
  1563                           	opt stack 0
  1564  0003B7                     	ds	10
  1565  0003C1                     _I2C2T:
  1566                           	opt stack 0
  1567  0003C1                     	ds	7
  1568  0003C8                     _Stepper:
  1569                           	opt stack 0
  1570  0003C8                     	ds	6
  1571  0003CE                     _ADC_AN3:
  1572                           	opt stack 0
  1573  0003CE                     	ds	5
  1574  0003D3                     _ADC_AN2:
  1575                           	opt stack 0
  1576  0003D3                     	ds	5
  1577  0003D8                     _ADC_AN1:
  1578                           	opt stack 0
  1579  0003D8                     	ds	5
  1580  0003DD                     LCD_DrawRectangle@p4:
  1581                           	opt stack 0
  1582  0003DD                     	ds	4
  1583  0003E1                     LCD_DrawRectangle@p2:
  1584                           	opt stack 0
  1585  0003E1                     	ds	4
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           postdec1	equ	0xFE5
  1593                           fsr1h	equ	0xFE2
  1594                           fsr1l	equ	0xFE1
  1595                           
  1596                           	psect	dataBANK3
  1597  0003E5                     __pdataBANK3:
  1598                           	opt stack 0
  1599  0003E5                     Console_Render@F6956:
  1600                           	opt stack 0
  1601  0003E5                     	ds	4
  1602  0003E9                     _gLineSize:
  1603                           	opt stack 0
  1604  0003E9                     	ds	4
  1605  0003ED                     _gCharSize:
  1606                           	opt stack 0
  1607  0003ED                     	ds	4
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1h	equ	0xFE2
  1616                           fsr1l	equ	0xFE1
  1617                           
  1618                           	psect	bssBANK4
  1619  000400                     __pbssBANK4:
  1620                           	opt stack 0
  1621  000400                     _lCBuffer:
  1622                           	opt stack 0
  1623  000400                     	ds	30
  1624  00041E                     _iRScriptStack:
  1625                           	opt stack 0
  1626  00041E                     	ds	100
  1627  000482                     Console_MakeField@Fill:
  1628                           	opt stack 0
  1629  000482                     	ds	70
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1h	equ	0xFE2
  1638                           fsr1l	equ	0xFE1
  1639                           
  1640                           	psect	bssBIGRAM
  1641  0004C8                     __pbssBIGRAM:
  1642                           	opt stack 0
  1643  0004C8                     _lBuffer:
  1644                           	opt stack 0
  1645  0004C8                     	ds	300
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           postdec1	equ	0xFE5
  1653                           fsr1h	equ	0xFE2
  1654                           fsr1l	equ	0xFE1
  1655                           
  1656                           	psect	cstackBANK3
  1657  0003F1                     __pcstackBANK3:
  1658                           	opt stack 0
  1659  0003F1                     ??_mode1:
  1660  0003F1                     ??_mode4:
  1661                           
  1662                           ; 1 bytes @ 0x0
  1663  0003F1                     	ds	1
  1664  0003F2                     _mode4$15574:
  1665                           	opt stack 0
  1666                           
  1667                           ; 4 bytes @ 0x1
  1668  0003F2                     	ds	1
  1669  0003F3                     mode1@moveto:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x2
  1673  0003F3                     	ds	2
  1674  0003F5                     _mode1$15573:
  1675                           	opt stack 0
  1676                           
  1677                           ; 4 bytes @ 0x4
  1678  0003F5                     	ds	4
  1679  0003F9                     ??_main:
  1680                           
  1681                           ; 1 bytes @ 0x8
  1682  0003F9                     	ds	2
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1h	equ	0xFE2
  1691                           fsr1l	equ	0xFE1
  1692                           
  1693                           	psect	cstackBANK2
  1694  000200                     __pcstackBANK2:
  1695                           	opt stack 0
  1696  000200                     irobot_query_and_update@TXArray:
  1697                           	opt stack 0
  1698                           
  1699                           ; 256 bytes @ 0x0
  1700  000200                     	ds	256
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           postdec1	equ	0xFE5
  1708                           fsr1h	equ	0xFE2
  1709                           fsr1l	equ	0xFE1
  1710                           
  1711                           	psect	cstackBANK1
  1712  000100                     __pcstackBANK1:
  1713                           	opt stack 0
  1714  000100                     ___fltol@sign1:
  1715                           	opt stack 0
  1716  000100                     irobot_query_and_update@RXArray:
  1717                           	opt stack 0
  1718                           
  1719                           ; 256 bytes @ 0x0
  1720  000100                     	ds	1
  1721  000101                     ___fltol@exp1:
  1722                           	opt stack 0
  1723                           
  1724                           ; 1 bytes @ 0x1
  1725  000101                     	ds	1
  1726  000102                     irobot_rotate_to@rotateToAngle:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x2
  1730  000102                     	ds	2
  1731  000104                     irobot_rotate_to@rotateSpeed:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x4
  1735  000104                     	ds	252
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1h	equ	0xFE2
  1744                           fsr1l	equ	0xFE1
  1745                           
  1746                           	psect	cstackBANK0
  1747  000060                     __pcstackBANK0:
  1748                           	opt stack 0
  1749  000060                     ??_Console_ClearCursor:
  1750  000060                     ??_ADC_SetChannel:
  1751  000060                     ??_ADC_ConversionTime:
  1752  000060                     ??_ADC_SetupIO:
  1753  000060                     ??_sort_iRBumpDrop:
  1754  000060                     ?_load_iRScriptStack:
  1755                           	opt stack 0
  1756  000060                     ??_Console_Init:
  1757  000060                     ??_Console_NewLine:
  1758  000060                     ??_Console_FormFeed:
  1759  000060                     ??_HMI_SetButton:
  1760  000060                     ?_GetPortProperties:
  1761                           	opt stack 0
  1762  000060                     ?_GetPortPORT:
  1763                           	opt stack 0
  1764  000060                     ?_GetPortTRIS:
  1765                           	opt stack 0
  1766  000060                     ?_twos_complement_of:
  1767                           	opt stack 0
  1768  000060                     ?___wmul:
  1769                           	opt stack 0
  1770  000060                     ?___awdiv:
  1771                           	opt stack 0
  1772  000060                     ?___lwdiv:
  1773                           	opt stack 0
  1774  000060                     ?___lldiv:
  1775                           	opt stack 0
  1776  000060                     ?___xxtofl:
  1777                           	opt stack 0
  1778  000060                     Mode_Set@pMode:
  1779                           	opt stack 0
  1780  000060                     ToSegment@pCHR:
  1781                           	opt stack 0
  1782  000060                     HMI_SetBar@pValue:
  1783                           	opt stack 0
  1784  000060                     ADC_ClockDivision@pDivide:
  1785                           	opt stack 0
  1786  000060                     get_packet_size@packetID:
  1787                           	opt stack 0
  1788  000060                     eusart_putch@eusartSendChar:
  1789                           	opt stack 0
  1790  000060                     Port_GetPin@pInput:
  1791                           	opt stack 0
  1792  000060                     Port_GetQuad@pInput:
  1793                           	opt stack 0
  1794  000060                     SPI_DisableISR@pInput:
  1795                           	opt stack 0
  1796  000060                     SPI_DCS@pInput:
  1797                           	opt stack 0
  1798  000060                     SPI_Send@pInput:
  1799                           	opt stack 0
  1800  000060                     Byte_SetBit@pInput:
  1801                           	opt stack 0
  1802  000060                     Byte_GetBit@pInput:
  1803                           	opt stack 0
  1804  000060                     Byte_SetZone@pInput:
  1805                           	opt stack 0
  1806  000060                     Byte_GetZone@pInput:
  1807                           	opt stack 0
  1808  000060                     Byte_SetByte@pInput:
  1809                           	opt stack 0
  1810  000060                     delay_ms@ms:
  1811                           	opt stack 0
  1812  000060                     delay_us@us:
  1813                           	opt stack 0
  1814  000060                     reverse@input:
  1815                           	opt stack 0
  1816  000060                     twos_complement_of@complementValue:
  1817                           	opt stack 0
  1818  000060                     ___wmul@multiplier:
  1819                           	opt stack 0
  1820  000060                     ___awdiv@dividend:
  1821                           	opt stack 0
  1822  000060                     ___lwdiv@dividend:
  1823                           	opt stack 0
  1824  000060                     MXK_Queue@pCallback:
  1825                           	opt stack 0
  1826  000060                     Timer0_Start@pFunction:
  1827                           	opt stack 0
  1828  000060                     ___lldiv@dividend:
  1829                           	opt stack 0
  1830  000060                     ___xxtofl@val:
  1831                           	opt stack 0
  1832                           
  1833                           ; 4 bytes @ 0x0
  1834  000060                     	ds	1
  1835  000061                     ADC_SetChannel@pChannel:
  1836                           	opt stack 0
  1837  000061                     ADC_ClockDivision@reg:
  1838                           	opt stack 0
  1839  000061                     ADC_ConversionTime@pCount:
  1840                           	opt stack 0
  1841  000061                     rx_assign@packetIDValue:
  1842                           	opt stack 0
  1843  000061                     irobot_song_play@songNumber:
  1844                           	opt stack 0
  1845  000061                     HMI_SetSegments@pString:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x1
  1849  000061                     	ds	1
  1850  000062                     GetPortProperties@pInput:
  1851                           	opt stack 0
  1852  000062                     GetPortPORT@pInput:
  1853                           	opt stack 0
  1854  000062                     GetPortTRIS@pInput:
  1855                           	opt stack 0
  1856  000062                     Port_GetPin@pPin:
  1857                           	opt stack 0
  1858  000062                     Port_GetQuad@pQuad:
  1859                           	opt stack 0
  1860  000062                     SPI_Send@pData:
  1861                           	opt stack 0
  1862  000062                     Byte_SetBit@pBit:
  1863                           	opt stack 0
  1864  000062                     Byte_GetBit@pBit:
  1865                           	opt stack 0
  1866  000062                     Byte_SetZone@pMax:
  1867                           	opt stack 0
  1868  000062                     Byte_GetZone@pMax:
  1869                           	opt stack 0
  1870  000062                     Byte_SetByte@pValue:
  1871                           	opt stack 0
  1872  000062                     Console_Init@x:
  1873                           	opt stack 0
  1874  000062                     Console_FormFeed@x:
  1875                           	opt stack 0
  1876  000062                     ADC_SetupIO@pChannel:
  1877                           	opt stack 0
  1878  000062                     ADC_ClockDivision@unfound:
  1879                           	opt stack 0
  1880  000062                     rx_assign@byteNumber:
  1881                           	opt stack 0
  1882  000062                     reverse@length:
  1883                           	opt stack 0
  1884  000062                     ADC_Start@pInput:
  1885                           	opt stack 0
  1886  000062                     ___wmul@multiplicand:
  1887                           	opt stack 0
  1888  000062                     ___awdiv@divisor:
  1889                           	opt stack 0
  1890  000062                     ___lwdiv@divisor:
  1891                           	opt stack 0
  1892  000062                     delay_ms@u:
  1893                           	opt stack 0
  1894  000062                     delay_us@u:
  1895                           	opt stack 0
  1896  000062                     HMI_SetButton@reindex:
  1897                           	opt stack 0
  1898                           
  1899                           ; 4 bytes @ 0x2
  1900  000062                     	ds	1
  1901  000063                     ??_Port_GetPin:
  1902  000063                     ??_Port_GetQuad:
  1903  000063                     ??_Byte_GetBit:
  1904  000063                     ??_rx_assign:
  1905  000063                     LCD_Write@mode:
  1906                           	opt stack 0
  1907  000063                     Byte_SetBit@pValue:
  1908                           	opt stack 0
  1909  000063                     Byte_SetZone@pChunk:
  1910                           	opt stack 0
  1911  000063                     Byte_GetZone@pChunk:
  1912                           	opt stack 0
  1913  000063                     Console_Init@y:
  1914                           	opt stack 0
  1915  000063                     Console_FormFeed@y:
  1916                           	opt stack 0
  1917  000063                     OutSeg@pSegment:
  1918                           	opt stack 0
  1919  000063                     ADC_SetupIO@MASK:
  1920                           	opt stack 0
  1921  000063                     Motor_Move@pMotor:
  1922                           	opt stack 0
  1923                           
  1924                           ; 2 bytes @ 0x3
  1925  000063                     	ds	1
  1926  000064                     ??_Byte_SetBit:
  1927  000064                     ??_Console_IncrementCursor:
  1928  000064                     ??_OutSeg:
  1929  000064                     ??_ADC_Start:
  1930  000064                     ??___xxtofl:
  1931  000064                     LCD_Write@value:
  1932                           	opt stack 0
  1933  000064                     Byte_GetBit@Output:
  1934                           	opt stack 0
  1935  000064                     Byte_SetZone@pChunkSize:
  1936                           	opt stack 0
  1937  000064                     Byte_GetZone@pChunkSize:
  1938                           	opt stack 0
  1939  000064                     reverse@tempVar:
  1940                           	opt stack 0
  1941  000064                     ___awdiv@counter:
  1942                           	opt stack 0
  1943  000064                     ___lwdiv@counter:
  1944                           	opt stack 0
  1945  000064                     HMI_SetSegments@in:
  1946                           	opt stack 0
  1947  000064                     ADC_Init@pInput:
  1948                           	opt stack 0
  1949  000064                     ___wmul@product:
  1950                           	opt stack 0
  1951  000064                     ___lldiv@divisor:
  1952                           	opt stack 0
  1953                           
  1954                           ; 4 bytes @ 0x4
  1955  000064                     	ds	1
  1956  000065                     ??_Byte_GetZone:
  1957  000065                     ?_Console_MakeField:
  1958                           	opt stack 0
  1959  000065                     Set_Addr_Window@ys:
  1960                           	opt stack 0
  1961  000065                     Set_Rotation@m:
  1962                           	opt stack 0
  1963  000065                     Port_GetPin@Output:
  1964                           	opt stack 0
  1965  000065                     Port_GetQuad@Output:
  1966                           	opt stack 0
  1967  000065                     Byte_SetZone@pValue:
  1968                           	opt stack 0
  1969  000065                     rx_assign@packetID:
  1970                           	opt stack 0
  1971  000065                     ___awdiv@sign:
  1972                           	opt stack 0
  1973  000065                     LCD_Word_Write@value:
  1974                           	opt stack 0
  1975  000065                     reverse@iterator:
  1976                           	opt stack 0
  1977  000065                     Motor_Move@pDelta:
  1978                           	opt stack 0
  1979  000065                     ___lwdiv@quotient:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x5
  1983  000065                     	ds	1
  1984  000066                     ?_irobot_query_and_update:
  1985                           	opt stack 0
  1986  000066                     ??_Byte_SetZone:
  1987  000066                     Set_Addr_Window@xe:
  1988                           	opt stack 0
  1989  000066                     Set_Rotation@rotation:
  1990                           	opt stack 0
  1991  000066                     Byte_GetZone@MASK:
  1992                           	opt stack 0
  1993  000066                     OutSeg@pInput:
  1994                           	opt stack 0
  1995  000066                     HMI_SetButton@pValue:
  1996                           	opt stack 0
  1997  000066                     ADC_Init@pChannel:
  1998                           	opt stack 0
  1999  000066                     MXK_BlockSwitchTo@CUR:
  2000                           	opt stack 0
  2001  000066                     MXK_SwitchTo@CUR:
  2002                           	opt stack 0
  2003  000066                     ___awdiv@quotient:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x6
  2007  000066                     	ds	1
  2008  000067                     ??_Console_MakeField:
  2009  000067                     ?___lwmod:
  2010                           	opt stack 0
  2011  000067                     Set_Addr_Window@ye:
  2012                           	opt stack 0
  2013  000067                     Byte_GetZone@Offset:
  2014                           	opt stack 0
  2015  000067                     OutSeg@out:
  2016                           	opt stack 0
  2017  000067                     HMI_SetButton@v:
  2018                           	opt stack 0
  2019  000067                     MXK_BlockSwitchTo@pModule:
  2020                           	opt stack 0
  2021  000067                     MXK_SwitchTo@pModule:
  2022                           	opt stack 0
  2023  000067                     ___lwmod@dividend:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x7
  2027  000067                     	ds	1
  2028  000068                     ??_Console_Tab:
  2029  000068                     Set_Addr_Window@xs:
  2030                           	opt stack 0
  2031  000068                     Byte_GetZone@Output:
  2032                           	opt stack 0
  2033  000068                     ___xxtofl@sign:
  2034                           	opt stack 0
  2035  000068                     HMI_Render@a:
  2036                           	opt stack 0
  2037  000068                     ___lldiv@quotient:
  2038                           	opt stack 0
  2039                           
  2040                           ; 4 bytes @ 0x8
  2041  000068                     	ds	1
  2042  000069                     Byte_SetZone@Offset:
  2043                           	opt stack 0
  2044  000069                     ___xxtofl@exp:
  2045                           	opt stack 0
  2046  000069                     LCD_Fill@pColour:
  2047                           	opt stack 0
  2048  000069                     LCD_FillRectangle@pColour:
  2049                           	opt stack 0
  2050  000069                     Byte_GetPair@pInput:
  2051                           	opt stack 0
  2052  000069                     Console_MakeField@Index:
  2053                           	opt stack 0
  2054  000069                     ___lwmod@divisor:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x9
  2058  000069                     	ds	1
  2059  00006A                     ??_load_iRScriptStack:
  2060  00006A                     Byte_SetZone@MASK:
  2061                           	opt stack 0
  2062  00006A                     ___xxtofl@arg:
  2063                           	opt stack 0
  2064                           
  2065                           ; 4 bytes @ 0xA
  2066  00006A                     	ds	1
  2067  00006B                     LCD_Fill@i:
  2068                           	opt stack 0
  2069  00006B                     Byte_GetPair@pPair:
  2070                           	opt stack 0
  2071  00006B                     Console_MakeField@pInput:
  2072                           	opt stack 0
  2073  00006B                     ___lwmod@counter:
  2074                           	opt stack 0
  2075  00006B                     Byte_SetPair@pInput:
  2076                           	opt stack 0
  2077  00006B                     Byte_SetQuad@pInput:
  2078                           	opt stack 0
  2079  00006B                     LCD_FillRectangle@pPoint:
  2080                           	opt stack 0
  2081                           
  2082                           ; 4 bytes @ 0xB
  2083  00006B                     	ds	1
  2084  00006C                     LCD_Fill@j:
  2085                           	opt stack 0
  2086  00006C                     ___lldiv@counter:
  2087                           	opt stack 0
  2088  00006C                     Word_GetPair@pInput:
  2089                           	opt stack 0
  2090  00006C                     itos@input:
  2091                           	opt stack 0
  2092  00006C                     Console_MakeField@Column:
  2093                           	opt stack 0
  2094  00006C                     load_iRScriptStack@loadByte:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0xC
  2098  00006C                     	ds	1
  2099  00006D                     Byte_SetPair@pPair:
  2100                           	opt stack 0
  2101  00006D                     Byte_SetQuad@pQuad:
  2102                           	opt stack 0
  2103  00006D                     Console_Tab@t:
  2104                           	opt stack 0
  2105  00006D                     Timer0_Init@pFrequency:
  2106                           	opt stack 0
  2107  00006D                     Timer2_Init@pFrequency:
  2108                           	opt stack 0
  2109                           
  2110                           ; 4 bytes @ 0xD
  2111  00006D                     	ds	1
  2112  00006E                     ?___fldiv:
  2113                           	opt stack 0
  2114  00006E                     Byte_SetPair@pValue:
  2115                           	opt stack 0
  2116  00006E                     Byte_SetQuad@pValue:
  2117                           	opt stack 0
  2118  00006E                     Word_GetPair@pPair:
  2119                           	opt stack 0
  2120  00006E                     Console_Tab@i:
  2121                           	opt stack 0
  2122  00006E                     load_iRScriptStack@bytesToLoad:
  2123                           	opt stack 0
  2124  00006E                     itos@destination:
  2125                           	opt stack 0
  2126  00006E                     _Console_MakeField$10974:
  2127                           	opt stack 0
  2128  00006E                     ___fldiv@b:
  2129                           	opt stack 0
  2130                           
  2131                           ; 4 bytes @ 0xE
  2132  00006E                     	ds	1
  2133  00006F                     Console_Tab@c:
  2134                           	opt stack 0
  2135  00006F                     load_iRScriptStack@i:
  2136                           	opt stack 0
  2137  00006F                     Port_SetPin@pInput:
  2138                           	opt stack 0
  2139  00006F                     Port_Set@pInput:
  2140                           	opt stack 0
  2141  00006F                     SPI_MinSpeed@pInput:
  2142                           	opt stack 0
  2143  00006F                     SPI_MaxSpeed@pInput:
  2144                           	opt stack 0
  2145  00006F                     Word_SetPair@pInput:
  2146                           	opt stack 0
  2147  00006F                     PortProperty_Valid@pInput:
  2148                           	opt stack 0
  2149  00006F                     LCD_FillRectangle@pSize:
  2150                           	opt stack 0
  2151                           
  2152                           ; 4 bytes @ 0xF
  2153  00006F                     	ds	1
  2154  000070                     ??_irobot_query_and_update:
  2155  000070                     ??_Console_PrintChar:
  2156  000070                     Console_MakeField@x:
  2157                           	opt stack 0
  2158  000070                     irobot_leds@LEDBit:
  2159                           	opt stack 0
  2160  000070                     itos@Data:
  2161                           	opt stack 0
  2162  000070                     irobot_angle_wait@angleWait:
  2163                           	opt stack 0
  2164  000070                     irobot_move@moveSpeed:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x10
  2168  000070                     	ds	1
  2169  000071                     ??_Timer2_Init:
  2170  000071                     ??_Timer0_Init:
  2171  000071                     Port_SetPin@pPin:
  2172                           	opt stack 0
  2173  000071                     Port_Set@pValue:
  2174                           	opt stack 0
  2175  000071                     Word_SetPair@pPair:
  2176                           	opt stack 0
  2177  000071                     PortProperty_Valid@pPinDrive:
  2178                           	opt stack 0
  2179  000071                     Console_MakeField@y:
  2180                           	opt stack 0
  2181  000071                     irobot_leds@powerColour:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x11
  2185  000071                     	ds	1
  2186  000072                     ??_Port_Set:
  2187  000072                     ??_irobot_angle_wait:
  2188  000072                     Port_SetPin@pValue:
  2189                           	opt stack 0
  2190  000072                     Word_SetPair@pValue:
  2191                           	opt stack 0
  2192  000072                     PortProperty_Valid@pPin:
  2193                           	opt stack 0
  2194  000072                     irobot_leds@powerLuminosity:
  2195                           	opt stack 0
  2196  000072                     LCD_DrawField@pField:
  2197                           	opt stack 0
  2198  000072                     itos@Length:
  2199                           	opt stack 0
  2200  000072                     irobot_move@moveTurnRadius:
  2201                           	opt stack 0
  2202  000072                     Timer2_Init@RDIV:
  2203                           	opt stack 0
  2204  000072                     ___fldiv@a:
  2205                           	opt stack 0
  2206                           
  2207                           ; 4 bytes @ 0x12
  2208  000072                     	ds	1
  2209  000073                     ??_PortProperty_Valid:
  2210  000073                     ??_LCD_FillRectangle:
  2211  000073                     Port_SetPin@Type:
  2212                           	opt stack 0
  2213  000073                     Console_PrintChar@pInput:
  2214                           	opt stack 0
  2215  000073                     irobot_leds@isScript:
  2216                           	opt stack 0
  2217  000073                     Timer0_Init@pCPUClock:
  2218                           	opt stack 0
  2219                           
  2220                           ; 4 bytes @ 0x13
  2221  000073                     	ds	1
  2222  000074                     ??_irobot_move:
  2223  000074                     LED_Set@pValue:
  2224                           	opt stack 0
  2225  000074                     putch@c:
  2226                           	opt stack 0
  2227  000074                     irobot_led_power_on@powerOnColour:
  2228                           	opt stack 0
  2229  000074                     Port_TogglePin@pInput:
  2230                           	opt stack 0
  2231  000074                     itos@Out:
  2232                           	opt stack 0
  2233  000074                     LCD_DrawField@pPoint:
  2234                           	opt stack 0
  2235                           
  2236                           ; 4 bytes @ 0x14
  2237  000074                     	ds	1
  2238  000075                     ?_printf:
  2239                           	opt stack 0
  2240  000075                     LCD_FillRectangle@i:
  2241                           	opt stack 0
  2242  000075                     LED_Set@pLED:
  2243                           	opt stack 0
  2244  000075                     irobot_query_and_update@packetIDs:
  2245                           	opt stack 0
  2246  000075                     printf@f:
  2247                           	opt stack 0
  2248  000075                     PortProperty_Valid@Errors:
  2249                           	opt stack 0
  2250                           
  2251                           ; 16 bytes @ 0x15
  2252  000075                     	ds	1
  2253  000076                     ??___fldiv:
  2254  000076                     LCD_FillRectangle@j:
  2255                           	opt stack 0
  2256  000076                     Port_TogglePin@pPin:
  2257                           	opt stack 0
  2258  000076                     HMI_SetNumber@pInput:
  2259                           	opt stack 0
  2260  000076                     Timer2_Init@pCPUClock:
  2261                           	opt stack 0
  2262                           
  2263                           ; 4 bytes @ 0x16
  2264  000076                     	ds	1
  2265  000077                     Port_TogglePin@Value:
  2266                           	opt stack 0
  2267  000077                     irobot_query_and_update@streamSize:
  2268                           	opt stack 0
  2269  000077                     Timer0_Init@DIVIDE:
  2270                           	opt stack 0
  2271                           
  2272                           ; 4 bytes @ 0x17
  2273  000077                     	ds	1
  2274  000078                     LED_Toggle@pLED:
  2275                           	opt stack 0
  2276  000078                     irobot_query_and_update@numberOfPacketRequests:
  2277                           	opt stack 0
  2278  000078                     irobot_move@isScript:
  2279                           	opt stack 0
  2280  000078                     LCD_DrawField@pSize:
  2281                           	opt stack 0
  2282                           
  2283                           ; 4 bytes @ 0x18
  2284  000078                     	ds	1
  2285  000079                     Event_DIPSwitch@pState:
  2286                           	opt stack 0
  2287  000079                     Event_TestButton@pState:
  2288                           	opt stack 0
  2289  000079                     irobot_query_and_update@packetVariable:
  2290                           	opt stack 0
  2291  000079                     irobot_stop_motion@isScript:
  2292                           	opt stack 0
  2293  000079                     irobot_rotate@rotateAngle:
  2294                           	opt stack 0
  2295  000079                     irobot_move_straight@straightSpeed:
  2296                           	opt stack 0
  2297                           
  2298                           ; 2 bytes @ 0x19
  2299  000079                     	ds	1
  2300  00007A                     Event_DIPSwitch@Bar:
  2301                           	opt stack 0
  2302  00007A                     irobot_query_and_update@j:
  2303                           	opt stack 0
  2304  00007A                     ___fldiv@sign:
  2305                           	opt stack 0
  2306  00007A                     Timer2_Init@DIVIDE:
  2307                           	opt stack 0
  2308                           
  2309                           ; 4 bytes @ 0x1A
  2310  00007A                     	ds	1
  2311  00007B                     irobot_query_and_update@startIndex:
  2312                           	opt stack 0
  2313  00007B                     Button_Poll@pButton:
  2314                           	opt stack 0
  2315  00007B                     Motor_Speed@pMotor:
  2316                           	opt stack 0
  2317  00007B                     irobot_rotate@rotateSpeed:
  2318                           	opt stack 0
  2319  00007B                     ___fldiv@rem:
  2320                           	opt stack 0
  2321                           
  2322                           ; 4 bytes @ 0x1B
  2323  00007B                     	ds	1
  2324  00007C                     ??_LCD_DrawField:
  2325  00007C                     irobot_query_and_update@i:
  2326                           	opt stack 0
  2327                           
  2328                           ; 1 bytes @ 0x1C
  2329  00007C                     	ds	1
  2330  00007D                     ??_printf:
  2331  00007D                     Button_Poll@pIncrement:
  2332                           	opt stack 0
  2333  00007D                     irobot_rotate@isScript:
  2334                           	opt stack 0
  2335  00007D                     Motor_Speed@pFrequency:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x1D
  2339  00007D                     	ds	1
  2340  00007E                     ??_Button_Poll:
  2341  00007E                     printf@prec:
  2342                           	opt stack 0
  2343  00007E                     LCD_DrawField@count:
  2344                           	opt stack 0
  2345                           
  2346                           ; 2 bytes @ 0x1E
  2347  00007E                     	ds	1
  2348  00007F                     printf@flag:
  2349                           	opt stack 0
  2350  00007F                     ___fldiv@new_exp:
  2351                           	opt stack 0
  2352                           
  2353                           ; 2 bytes @ 0x1F
  2354  00007F                     	ds	1
  2355  000080                     LCD_DrawField@xmax:
  2356                           	opt stack 0
  2357  000080                     printf@ap:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x20
  2361  000080                     	ds	1
  2362  000081                     LCD_DrawField@ymax:
  2363                           	opt stack 0
  2364  000081                     ___fldiv@grs:
  2365                           	opt stack 0
  2366                           
  2367                           ; 4 bytes @ 0x21
  2368  000081                     	ds	1
  2369  000082                     LCD_DrawField@i:
  2370                           	opt stack 0
  2371  000082                     Port_Set@TypeRequired:
  2372                           	opt stack 0
  2373  000082                     printf@val:
  2374                           	opt stack 0
  2375                           
  2376                           ; 2 bytes @ 0x22
  2377  000082                     	ds	1
  2378  000083                     ??_Console_Render:
  2379  000083                     Button_Poll@Pin:
  2380                           	opt stack 0
  2381                           
  2382                           ; 1 bytes @ 0x23
  2383  000083                     	ds	1
  2384  000084                     printf@c:
  2385                           	opt stack 0
  2386  000084                     Port_Set@TypeActual:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0x24
  2390  000084                     	ds	1
  2391  000085                     PortProperty_Valid@Pair:
  2392                           	opt stack 0
  2393  000085                     Console_Render@temp:
  2394                           	opt stack 0
  2395  000085                     ___fldiv@bexp:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x25
  2399  000085                     	ds	1
  2400  000086                     Port_Set@Type:
  2401                           	opt stack 0
  2402  000086                     ___fldiv@aexp:
  2403                           	opt stack 0
  2404  000086                     Port_CheckPairType@pInput:
  2405                           	opt stack 0
  2406  000086                     Port_SetPinType@pInput:
  2407                           	opt stack 0
  2408  000086                     Console_Render@lCursor:
  2409                           	opt stack 0
  2410                           
  2411                           ; 4 bytes @ 0x26
  2412  000086                     	ds	1
  2413  000087                     ?___flmul:
  2414                           	opt stack 0
  2415  000087                     ___flmul@b:
  2416                           	opt stack 0
  2417                           
  2418                           ; 4 bytes @ 0x27
  2419  000087                     	ds	1
  2420  000088                     Port_CheckPairType@pPair:
  2421                           	opt stack 0
  2422  000088                     Port_SetPinType@pPin:
  2423                           	opt stack 0
  2424                           
  2425                           ; 1 bytes @ 0x28
  2426  000088                     	ds	1
  2427  000089                     Port_CheckPairType@pDrive:
  2428                           	opt stack 0
  2429  000089                     Port_SetPinType@pType:
  2430                           	opt stack 0
  2431                           
  2432                           ; 1 bytes @ 0x29
  2433  000089                     	ds	1
  2434  00008A                     Port_CheckPairType@Pin1:
  2435                           	opt stack 0
  2436  00008A                     Port_SetPinType@Output:
  2437                           	opt stack 0
  2438  00008A                     Console_Render@x:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x2A
  2442  00008A                     	ds	1
  2443  00008B                     Port_CheckPairType@Pin2:
  2444                           	opt stack 0
  2445  00008B                     Console_Render@y:
  2446                           	opt stack 0
  2447  00008B                     Port_SetPinType@Props:
  2448                           	opt stack 0
  2449  00008B                     ___flmul@a:
  2450                           	opt stack 0
  2451                           
  2452                           ; 4 bytes @ 0x2B
  2453  00008B                     	ds	1
  2454  00008C                     Port_CheckPairType@Output:
  2455                           	opt stack 0
  2456  00008C                     mode2@dist:
  2457                           	opt stack 0
  2458                           
  2459                           ; 2 bytes @ 0x2C
  2460  00008C                     	ds	1
  2461  00008D                     LED_Init@pLED:
  2462                           	opt stack 0
  2463  00008D                     Port_CheckPairType@Props:
  2464                           	opt stack 0
  2465  00008D                     Motor_Init@pMotor:
  2466                           	opt stack 0
  2467  00008D                     SPI_Init@pClock:
  2468                           	opt stack 0
  2469                           
  2470                           ; 4 bytes @ 0x2D
  2471  00008D                     	ds	2
  2472  00008F                     ??___flmul:
  2473  00008F                     Port_CheckQuadType@pInput:
  2474                           	opt stack 0
  2475  00008F                     Motor_Init@pAddress:
  2476                           	opt stack 0
  2477                           
  2478                           ; 2 bytes @ 0x2F
  2479  00008F                     	ds	2
  2480  000091                     Port_CheckQuadType@pQuad:
  2481                           	opt stack 0
  2482  000091                     SPI_Init@pChannel:
  2483                           	opt stack 0
  2484                           
  2485                           ; 1 bytes @ 0x31
  2486  000091                     	ds	1
  2487  000092                     Port_CheckQuadType@pDrive:
  2488                           	opt stack 0
  2489  000092                     SPI_Init@pMode:
  2490                           	opt stack 0
  2491                           
  2492                           ; 1 bytes @ 0x32
  2493  000092                     	ds	1
  2494  000093                     Port_CheckQuadType@Pair1:
  2495                           	opt stack 0
  2496  000093                     ___flmul@sign:
  2497                           	opt stack 0
  2498  000093                     SPI_Init@pInput:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0x33
  2502  000093                     	ds	1
  2503  000094                     Port_CheckQuadType@Pair2:
  2504                           	opt stack 0
  2505  000094                     ___flmul@aexp:
  2506                           	opt stack 0
  2507                           
  2508                           ; 1 bytes @ 0x34
  2509  000094                     	ds	1
  2510  000095                     ??_LCD_Init:
  2511  000095                     Port_CheckQuadType@Output:
  2512                           	opt stack 0
  2513  000095                     ___flmul@grs:
  2514                           	opt stack 0
  2515                           
  2516                           ; 4 bytes @ 0x35
  2517  000095                     	ds	1
  2518  000096                     Port_CheckPortType@pInput:
  2519                           	opt stack 0
  2520  000096                     Port_SetQuadType@pInput:
  2521                           	opt stack 0
  2522                           
  2523                           ; 2 bytes @ 0x36
  2524  000096                     	ds	1
  2525  000097                     LCD_Init@i:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x37
  2529  000097                     	ds	1
  2530  000098                     Port_CheckPortType@pDrive:
  2531                           	opt stack 0
  2532  000098                     Port_SetQuadType@pQuad:
  2533                           	opt stack 0
  2534                           
  2535                           ; 1 bytes @ 0x38
  2536  000098                     	ds	1
  2537  000099                     Port_CheckPortType@Output:
  2538                           	opt stack 0
  2539  000099                     Port_SetQuadType@pType:
  2540                           	opt stack 0
  2541  000099                     ___flmul@bexp:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x39
  2545  000099                     	ds	1
  2546  00009A                     Port_SetQuadType@Output:
  2547                           	opt stack 0
  2548  00009A                     Port_SetType@pInput:
  2549                           	opt stack 0
  2550  00009A                     ___flmul@prod:
  2551                           	opt stack 0
  2552                           
  2553                           ; 4 bytes @ 0x3A
  2554  00009A                     	ds	1
  2555  00009B                     Button_Init@pInput:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x3B
  2559  00009B                     	ds	1
  2560  00009C                     Port_SetType@pType:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x3C
  2564  00009C                     	ds	1
  2565  00009D                     ??_Port_SetType:
  2566  00009D                     Button_Init@pThreshold:
  2567                           	opt stack 0
  2568                           
  2569                           ; 2 bytes @ 0x3D
  2570  00009D                     	ds	1
  2571  00009E                     ___flmul@temp:
  2572                           	opt stack 0
  2573                           
  2574                           ; 2 bytes @ 0x3E
  2575  00009E                     	ds	1
  2576  00009F                     Port_SetType@Output:
  2577                           	opt stack 0
  2578  00009F                     Button_Init@pInitIO:
  2579                           	opt stack 0
  2580                           
  2581                           ; 3 bytes @ 0x3F
  2582  00009F                     	ds	1
  2583  0000A0                     ?_ADC_Voltage:
  2584                           	opt stack 0
  2585  0000A0                     Port_Init@pInput:
  2586                           	opt stack 0
  2587  0000A0                     ADC_Voltage@pInput:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x40
  2591  0000A0                     	ds	2
  2592  0000A2                     Port_Init@pPort:
  2593                           	opt stack 0
  2594  0000A2                     Button_Init@pGetState:
  2595                           	opt stack 0
  2596                           
  2597                           ; 3 bytes @ 0x42
  2598  0000A2                     	ds	1
  2599  0000A3                     ??_Port_Init:
  2600                           
  2601                           ; 1 bytes @ 0x43
  2602  0000A3                     	ds	1
  2603  0000A4                     ??_ADC_Voltage:
  2604                           
  2605                           ; 1 bytes @ 0x44
  2606  0000A4                     	ds	1
  2607  0000A5                     Port_Init@i:
  2608                           	opt stack 0
  2609  0000A5                     Button_Init@pFunction:
  2610                           	opt stack 0
  2611                           
  2612                           ; 3 bytes @ 0x45
  2613  0000A5                     	ds	1
  2614  0000A6                     ADC_Voltage@max:
  2615                           	opt stack 0
  2616                           
  2617                           ; 4 bytes @ 0x46
  2618  0000A6                     	ds	2
  2619  0000A8                     HMI_Init@in:
  2620                           	opt stack 0
  2621                           
  2622                           ; 2 bytes @ 0x48
  2623  0000A8                     	ds	2
  2624  0000AA                     ADC_Voltage@ref:
  2625                           	opt stack 0
  2626                           
  2627                           ; 4 bytes @ 0x4A
  2628  0000AA                     	ds	4
  2629  0000AE                     ADC_Voltage@output:
  2630                           	opt stack 0
  2631                           
  2632                           ; 4 bytes @ 0x4E
  2633  0000AE                     	ds	4
  2634  0000B2                     ?___fltol:
  2635                           	opt stack 0
  2636  0000B2                     ___fltol@f1:
  2637                           	opt stack 0
  2638                           
  2639                           ; 4 bytes @ 0x52
  2640  0000B2                     	ds	4
  2641  0000B6                     ??___fltol:
  2642                           
  2643                           ; 1 bytes @ 0x56
  2644  0000B6                     	ds	4
  2645  0000BA                     tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           postinc0	equ	0xFEE
  2650                           wreg	equ	0xFE8
  2651                           postdec1	equ	0xFE5
  2652                           fsr1h	equ	0xFE2
  2653                           fsr1l	equ	0xFE1
  2654                           
  2655                           ; 1 bytes @ 0x5A
  2656                           
  2657                           	psect	cstackCOMRAM
  2658  000001                     __pcstackCOMRAM:
  2659                           	opt stack 0
  2660  000001                     i2Byte_SetBit@pInput:
  2661                           	opt stack 0
  2662  000001                     i2Byte_GetZone@pInput:
  2663                           	opt stack 0
  2664  000001                     i2delay_us@us:
  2665                           	opt stack 0
  2666  000001                     i2MXK_Queue@pCallback:
  2667                           	opt stack 0
  2668                           
  2669                           ; 3 bytes @ 0x0
  2670  000001                     	ds	2
  2671  000003                     i2Byte_SetBit@pBit:
  2672                           	opt stack 0
  2673  000003                     i2Byte_GetZone@pMax:
  2674                           	opt stack 0
  2675  000003                     i2delay_us@u:
  2676                           	opt stack 0
  2677                           
  2678                           ; 4 bytes @ 0x2
  2679  000003                     	ds	1
  2680  000004                     i2Byte_SetBit@pValue:
  2681                           	opt stack 0
  2682  000004                     i2Byte_GetZone@pChunk:
  2683                           	opt stack 0
  2684                           
  2685                           ; 1 bytes @ 0x3
  2686  000004                     	ds	1
  2687  000005                     ??i2_Byte_SetBit:
  2688  000005                     i2Byte_GetZone@pChunkSize:
  2689                           	opt stack 0
  2690                           
  2691                           ; 1 bytes @ 0x4
  2692  000005                     	ds	1
  2693  000006                     ??i2_Byte_GetZone:
  2694                           
  2695                           ; 1 bytes @ 0x5
  2696  000006                     	ds	1
  2697  000007                     i2Byte_GetZone@MASK:
  2698                           	opt stack 0
  2699  000007                     i2MXK_SwitchTo@CUR:
  2700                           	opt stack 0
  2701                           
  2702                           ; 1 bytes @ 0x6
  2703  000007                     	ds	1
  2704  000008                     i2Byte_GetZone@Offset:
  2705                           	opt stack 0
  2706  000008                     i2MXK_SwitchTo@pModule:
  2707                           	opt stack 0
  2708                           
  2709                           ; 1 bytes @ 0x7
  2710  000008                     	ds	1
  2711  000009                     i2Byte_GetZone@Output:
  2712                           	opt stack 0
  2713                           
  2714                           ; 1 bytes @ 0x8
  2715  000009                     	ds	1
  2716  00000A                     i2Byte_GetPair@pInput:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x9
  2720  00000A                     	ds	2
  2721  00000C                     i2Byte_GetPair@pPair:
  2722                           	opt stack 0
  2723                           
  2724                           ; 1 bytes @ 0xB
  2725  00000C                     	ds	1
  2726  00000D                     i2Word_GetPair@pInput:
  2727                           	opt stack 0
  2728                           
  2729                           ; 2 bytes @ 0xC
  2730  00000D                     	ds	2
  2731  00000F                     i2Word_GetPair@pPair:
  2732                           	opt stack 0
  2733                           
  2734                           ; 1 bytes @ 0xE
  2735  00000F                     	ds	1
  2736  000010                     i2Port_SetPin@pInput:
  2737                           	opt stack 0
  2738                           
  2739                           ; 2 bytes @ 0xF
  2740  000010                     	ds	2
  2741  000012                     i2Port_SetPin@pPin:
  2742                           	opt stack 0
  2743                           
  2744                           ; 1 bytes @ 0x11
  2745  000012                     	ds	1
  2746  000013                     i2Port_SetPin@pValue:
  2747                           	opt stack 0
  2748                           
  2749                           ; 1 bytes @ 0x12
  2750  000013                     	ds	1
  2751  000014                     i2Port_SetPin@Type:
  2752                           	opt stack 0
  2753                           
  2754                           ; 1 bytes @ 0x13
  2755  000014                     	ds	1
  2756  000015                     
  2757                           ; 1 bytes @ 0x14
  2758  000015                     	ds	2
  2759  000017                     ??_ISR_Function:
  2760                           
  2761                           ; 1 bytes @ 0x16
  2762  000017                     	ds	18
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           postinc0	equ	0xFEE
  2768                           wreg	equ	0xFE8
  2769                           postdec1	equ	0xFE5
  2770                           fsr1h	equ	0xFE2
  2771                           fsr1l	equ	0xFE1
  2772                           
  2773 ;;
  2774 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2775 ;;
  2776 ;; *************** function _main *****************
  2777 ;; Defined at:
  2778 ;;		line 322 in file "main.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;Total ram usage:        2 bytes
  2797 ;; Hardware stack levels required when called:   18
  2798 ;; This function calls:
  2799 ;;		_getMode
  2800 ;;		_init
  2801 ;;		_mode1
  2802 ;;		_mode2
  2803 ;;		_mode3
  2804 ;;		_mode4
  2805 ;; This function is called by:
  2806 ;;		Startup code after reset
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text0
  2811  01587E                     __ptext0:
  2812                           	opt stack 0
  2813  01587E                     _main:
  2814                           	opt stack 13
  2815                           
  2816                           ;main.c: 323: init();
  2817                           
  2818                           ;incstack = 0
  2819  01587E  ECD8  F0A2         	call	_init	;wreg free
  2820  015882                     
  2821                           ;main.c: 325: getMode();
  2822  015882  EC69  F0A0         	call	_getMode	;wreg free
  2823                           
  2824                           ;main.c: 326: switch (mode) {
  2825  015886  D00C               	goto	l2387
  2826  015888                     
  2827                           ;main.c: 328: mode1();
  2828  015888  EC62  F084         	call	_mode1	;wreg free
  2829                           
  2830                           ;main.c: 329: break;
  2831  01588C  D7FA               	goto	l2386
  2832  01588E                     
  2833                           ;main.c: 331: mode2();
  2834  01588E  EC26  F09A         	call	_mode2	;wreg free
  2835                           
  2836                           ;main.c: 332: break;
  2837  015892  D7F7               	goto	l2386
  2838  015894                     
  2839                           ;main.c: 334: mode3();
  2840  015894  EC02  F00A         	call	_mode3	;wreg free
  2841                           
  2842                           ;main.c: 335: break;
  2843  015898  D7F4               	goto	l2386
  2844  01589A                     
  2845                           ;main.c: 337: mode4();
  2846  01589A  EC6E  F086         	call	_mode4	;wreg free
  2847                           
  2848                           ;main.c: 339: }
  2849                           
  2850                           ;main.c: 338: break;
  2851  01589E  D7F1               	goto	l2386
  2852  0158A0                     l2387:
  2853  0158A0  C323  F3F9         	movff	_mode,??_main
  2854  0158A4  C324  F3FA         	movff	_mode+1,??_main+1
  2855                           
  2856                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2857                           ; Switch size 1, requested type "space"
  2858                           ; Number of cases is 1, Range of values is 0 to 0
  2859                           ; switch strategies available:
  2860                           ; Name         Instructions Cycles
  2861                           ; simple_byte            4     3 (average)
  2862                           ;	Chosen strategy is simple_byte
  2863  0158A8  0103               	movlb	3	; () banked
  2864  0158AA  51FA               	movf	(??_main+1)& (0+255),w,b
  2865  0158AC  0A00               	xorlw	0	; case 0
  2866  0158AE  A4D8               	btfss	status,2,c
  2867  0158B0  D7E8               	goto	l2386
  2868                           
  2869                           ; BSR set to: 3
  2870                           ; Switch size 1, requested type "space"
  2871                           ; Number of cases is 4, Range of values is 1 to 4
  2872                           ; switch strategies available:
  2873                           ; Name         Instructions Cycles
  2874                           ; simple_byte           13     7 (average)
  2875                           ;	Chosen strategy is simple_byte
  2876  0158B2  0103               	movlb	3	; () banked
  2877  0158B4  51F9               	movf	??_main& (0+255),w,b
  2878  0158B6  0A01               	xorlw	1	; case 1
  2879  0158B8  B4D8               	btfsc	status,2,c
  2880  0158BA  D7E6               	goto	l2388
  2881  0158BC  0A03               	xorlw	3	; case 2
  2882  0158BE  B4D8               	btfsc	status,2,c
  2883  0158C0  D7E6               	goto	l2390
  2884  0158C2  0A01               	xorlw	1	; case 3
  2885  0158C4  B4D8               	btfsc	status,2,c
  2886  0158C6  D7E6               	goto	l2391
  2887  0158C8  0A07               	xorlw	7	; case 4
  2888  0158CA  B4D8               	btfsc	status,2,c
  2889  0158CC  D7E6               	goto	l2392
  2890                           
  2891                           ; BSR set to: 3
  2892                           ;main.c: 340: }
  2893  0158CE  D7D9               	goto	l2386
  2894  0158D0                     __end_of_main:
  2895                           	opt stack 0
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           postdec1	equ	0xFE5
  2903                           fsr1h	equ	0xFE2
  2904                           fsr1l	equ	0xFE1
  2905                           status	equ	0xFD8
  2906                           
  2907 ;; *************** function _mode4 *****************
  2908 ;; Defined at:
  2909 ;;		line 249 in file "main.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;Total ram usage:        5 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:   16
  2930 ;; This function calls:
  2931 ;;		_ADC_Start
  2932 ;;		_ADC_Voltage
  2933 ;;		_Console_Render
  2934 ;;		_HMI_Poll
  2935 ;;		_HMI_Render
  2936 ;;		_HMI_SetNumber
  2937 ;;		_MXK_Dequeue
  2938 ;;		_MXK_Release
  2939 ;;		_MXK_SwitchTo
  2940 ;;		_Motor_Move
  2941 ;;		_Motor_Speed
  2942 ;;		___fldiv
  2943 ;;		___flmul
  2944 ;;		___fltol
  2945 ;;		___xxtofl
  2946 ;;		_irobot_move_straight
  2947 ;;		_irobot_rotate_to
  2948 ;;		_irobot_song_play
  2949 ;;		_irobot_stop_motion
  2950 ;;		_printf
  2951 ;;		_update_angle
  2952 ;;		_update_bump_and_cliff
  2953 ;;		_update_distance
  2954 ;; This function is called by:
  2955 ;;		_main
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text1
  2960  010CDC                     __ptext1:
  2961                           	opt stack 0
  2962  010CDC                     _mode4:
  2963                           	opt stack 14
  2964                           
  2965                           ;main.c: 250: update_bump_and_cliff();
  2966                           
  2967                           ; BSR set to: 3
  2968                           ;incstack = 0
  2969  010CDC  EC41  F0AF         	call	_update_bump_and_cliff	;wreg free
  2970                           
  2971                           ;main.c: 251: update_distance();
  2972  010CE0  EC26  F0B2         	call	_update_distance	;wreg free
  2973                           
  2974                           ;main.c: 252: update_angle();
  2975  010CE4  EC2F  F0B2         	call	_update_angle	;wreg free
  2976                           
  2977                           ;main.c: 256: if (iRBumpLeft || iRBumpRight) {
  2978  010CE8  0100               	movlb	0	; () banked
  2979  010CEA  51D6               	movf	_iRBumpLeft& (0+255),w,b
  2980  010CEC  A4D8               	btfss	status,2,c
  2981  010CEE  D004               	goto	u13730
  2982                           
  2983                           ; BSR set to: 0
  2984  010CF0  0100               	movlb	0	; () banked
  2985  010CF2  51D7               	movf	_iRBumpRight& (0+255),w,b
  2986  010CF4  B4D8               	btfsc	status,2,c
  2987  010CF6  D006               	goto	l2356
  2988  010CF8                     u13730:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;main.c: 257: irobot_song_play(0);
  2992                           
  2993                           ; BSR set to: 0
  2994  010CF8  0E00               	movlw	0
  2995  010CFA  EC12  F0B2         	call	_irobot_song_play
  2996                           
  2997                           ;main.c: 258: irobot_stop_motion(0);
  2998  010CFE  0E00               	movlw	0
  2999  010D00  ECBB  F0AD         	call	_irobot_stop_motion
  3000  010D04                     l2356:
  3001                           
  3002                           ;main.c: 259: }
  3003                           ;main.c: 260: if (angleTotal > 83) {
  3004  010D04  0100               	movlb	0	; () banked
  3005  010D06  BFC7               	btfsc	(_angleTotal+1)& (0+255),7,b
  3006  010D08  D00B               	goto	l2359
  3007  010D0A  0100               	movlb	0	; () banked
  3008  010D0C  51C7               	movf	(_angleTotal+1)& (0+255),w,b
  3009  010D0E  E105               	bnz	u13740
  3010  010D10  0E54               	movlw	84
  3011  010D12  0100               	movlb	0	; () banked
  3012  010D14  5DC6               	subwf	_angleTotal& (0+255),w,b
  3013  010D16  A0D8               	btfss	status,0,c
  3014  010D18  D003               	goto	l2359
  3015  010D1A                     u13740:
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;main.c: 261: irobot_stop_motion(0);
  3019  010D1A  0E00               	movlw	0
  3020  010D1C  ECBB  F0AD         	call	_irobot_stop_motion
  3021  010D20                     l2359:
  3022                           
  3023                           ;main.c: 262: }
  3024                           ;main.c: 264: if (MXK_SwitchTo(eMXK_HMI)) {
  3025  010D20  0E01               	movlw	1
  3026  010D22  EC46  F0AE         	call	_MXK_SwitchTo
  3027  010D26  0900               	iorlw	0
  3028  010D28  B4D8               	btfsc	status,2,c
  3029  010D2A  D029               	goto	l2361
  3030                           
  3031                           ;main.c: 265: printf("%c", (char)35);
  3032  010D2C  0EFB               	movlw	low STR_1
  3033  010D2E  0100               	movlb	0	; () banked
  3034  010D30  6F75               	movwf	printf@f& (0+255),b
  3035  010D32  0EFF               	movlw	high STR_1
  3036  010D34  0100               	movlb	0	; () banked
  3037  010D36  6F76               	movwf	(printf@f+1)& (0+255),b
  3038  010D38  0E00               	movlw	0
  3039  010D3A  0100               	movlb	0	; () banked
  3040  010D3C  6F78               	movwf	(?_printf+3)& (0+255),b
  3041  010D3E  0E23               	movlw	35
  3042  010D40  6F77               	movwf	(?_printf+2)& (0+255),b
  3043  010D42  EC7E  F092         	call	_printf	;wreg free
  3044                           
  3045                           ;main.c: 266: printf("Closest Wall:%u\nClosest Angle:%u\n", MinDist, stepsToMinDegrees);
  3046  010D46  0ECB               	movlw	low STR_8
  3047  010D48  0100               	movlb	0	; () banked
  3048  010D4A  6F75               	movwf	printf@f& (0+255),b
  3049  010D4C  0EFF               	movlw	high STR_8
  3050  010D4E  0100               	movlb	0	; () banked
  3051  010D50  6F76               	movwf	(printf@f+1)& (0+255),b
  3052  010D52  C0FB  F077         	movff	_MinDist,?_printf+2
  3053  010D56  C0FC  F078         	movff	_MinDist+1,?_printf+3
  3054  010D5A  C300  F079         	movff	_stepsToMinDegrees,?_printf+4
  3055  010D5E  C301  F07A         	movff	_stepsToMinDegrees+1,?_printf+5
  3056  010D62  C302  F07B         	movff	_stepsToMinDegrees+2,?_printf+6
  3057  010D66  C303  F07C         	movff	_stepsToMinDegrees+3,?_printf+7
  3058  010D6A  EC7E  F092         	call	_printf	;wreg free
  3059                           
  3060                           ;main.c: 267: Console_Render();
  3061  010D6E  EC92  F08F         	call	_Console_Render	;wreg free
  3062                           
  3063                           ;main.c: 268: if (MXK_Release())
  3064  010D72  EC89  F0B1         	call	_MXK_Release	;wreg free
  3065  010D76  0900               	iorlw	0
  3066  010D78  A4D8               	btfss	status,2,c
  3067                           
  3068                           ;main.c: 269: MXK_Dequeue();
  3069  010D7A  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  3070  010D7E                     l2361:
  3071                           
  3072                           ;main.c: 270: }
  3073                           ;main.c: 271: HMI_Poll();
  3074  010D7E  EC35  F0A8         	call	_HMI_Poll	;wreg free
  3075                           
  3076                           ;main.c: 272: StepRotate = 0;
  3077  010D82  0E00               	movlw	0
  3078  010D84  0100               	movlb	0	; () banked
  3079  010D86  6FC5               	movwf	(_StepRotate+1)& (0+255),b
  3080  010D88  0E00               	movlw	0
  3081  010D8A  6FC4               	movwf	_StepRotate& (0+255),b
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;main.c: 273: MinDist = 1000;
  3085  010D8C  0E03               	movlw	3
  3086  010D8E  0100               	movlb	0	; () banked
  3087  010D90  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3088  010D92  0EE8               	movlw	232
  3089  010D94  6FFB               	movwf	_MinDist& (0+255),b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;main.c: 274: Stepstomin = 0;
  3093  010D96  0E00               	movlw	0
  3094  010D98  0100               	movlb	0	; () banked
  3095  010D9A  6FC3               	movwf	(_Stepstomin+1)& (0+255),b
  3096  010D9C  0E00               	movlw	0
  3097  010D9E  6FC2               	movwf	_Stepstomin& (0+255),b
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;main.c: 275: stepsToMinDegrees = ((float) Stepstomin / 400) * 360;
  3101  010DA0  0E00               	movlw	0
  3102  010DA2  0100               	movlb	0	; () banked
  3103  010DA4  6F72               	movwf	___fldiv@a& (0+255),b
  3104  010DA6  0E00               	movlw	0
  3105  010DA8  6F73               	movwf	(___fldiv@a+1)& (0+255),b
  3106  010DAA  0EC8               	movlw	200
  3107  010DAC  6F74               	movwf	(___fldiv@a+2)& (0+255),b
  3108  010DAE  0E43               	movlw	67
  3109  010DB0  6F75               	movwf	(___fldiv@a+3)& (0+255),b
  3110  010DB2  C0C2  F060         	movff	_Stepstomin,___xxtofl@val
  3111  010DB6  C0C3  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3112  010DBA  0100               	movlb	0	; () banked
  3113  010DBC  0E00               	movlw	0
  3114  010DBE  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3115  010DC0  0EFF               	movlw	-1
  3116  010DC2  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3117  010DC4  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3118  010DC6  0E01               	movlw	1
  3119  010DC8  EC97  F091         	call	___xxtofl
  3120  010DCC  C060  F06E         	movff	?___xxtofl,___fldiv@b
  3121  010DD0  C061  F06F         	movff	?___xxtofl+1,___fldiv@b+1
  3122  010DD4  C062  F070         	movff	?___xxtofl+2,___fldiv@b+2
  3123  010DD8  C063  F071         	movff	?___xxtofl+3,___fldiv@b+3
  3124  010DDC  EC53  F088         	call	___fldiv	;wreg free
  3125  010DE0  C06E  F087         	movff	?___fldiv,___flmul@b
  3126  010DE4  C06F  F088         	movff	?___fldiv+1,___flmul@b+1
  3127  010DE8  C070  F089         	movff	?___fldiv+2,___flmul@b+2
  3128  010DEC  C071  F08A         	movff	?___fldiv+3,___flmul@b+3
  3129  010DF0  0E00               	movlw	0
  3130  010DF2  0100               	movlb	0	; () banked
  3131  010DF4  6F8B               	movwf	___flmul@a& (0+255),b
  3132  010DF6  0E00               	movlw	0
  3133  010DF8  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3134  010DFA  0EB4               	movlw	180
  3135  010DFC  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3136  010DFE  0E43               	movlw	67
  3137  010E00  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3138  010E02  EC00  F080         	call	___flmul	;wreg free
  3139  010E06  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3140  010E0A  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3141  010E0E  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3142  010E12  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3143                           
  3144                           ;main.c: 276: IRValue = 0;
  3145  010E16  0E00               	movlw	0
  3146  010E18  0100               	movlb	0	; () banked
  3147  010E1A  6FC1               	movwf	(_IRValue+1)& (0+255),b
  3148  010E1C  0E00               	movlw	0
  3149  010E1E  6FC0               	movwf	_IRValue& (0+255),b
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;main.c: 277: TimerX = 8;
  3153  010E20  0E00               	movlw	0
  3154  010E22  0100               	movlb	0	; () banked
  3155  010E24  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3156  010E26  0E08               	movlw	8
  3157  010E28  6FF9               	movwf	_TimerX& (0+255),b
  3158                           
  3159                           ;main.c: 278: while (StepRotate < 400) {
  3160  010E2A  D0F8               	goto	u13850
  3161  010E2C                     
  3162                           ; BSR set to: 0
  3163                           ;main.c: 279: StepRotate++;
  3164                           
  3165                           ; BSR set to: 0
  3166  010E2C  0100               	movlb	0	; () banked
  3167  010E2E  4BC4               	infsnz	_StepRotate& (0+255),f,b
  3168  010E30  2BC5               	incf	(_StepRotate+1)& (0+255),f,b
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 280: ADC_Start(&ADC_AN0);
  3172  010E32  0EF4               	movlw	low _ADC_AN0
  3173  010E34  0100               	movlb	0	; () banked
  3174  010E36  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3175  010E38  0E00               	movlw	high _ADC_AN0
  3176  010E3A  0100               	movlb	0	; () banked
  3177  010E3C  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3178  010E3E  ECC0  F0A6         	call	_ADC_Start	;wreg free
  3179                           
  3180                           ;main.c: 281: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3181  010E42  0EF4               	movlw	low _ADC_AN0
  3182  010E44  0100               	movlb	0	; () banked
  3183  010E46  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3184  010E48  0E00               	movlw	high _ADC_AN0
  3185  010E4A  0100               	movlb	0	; () banked
  3186  010E4C  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3187  010E4E  EC40  F09D         	call	_ADC_Voltage	;wreg free
  3188  010E52  C0A0  F3F2         	movff	?_ADC_Voltage,_mode4$15574
  3189  010E56  C0A1  F3F3         	movff	?_ADC_Voltage+1,_mode4$15574+1
  3190  010E5A  C0A2  F3F4         	movff	?_ADC_Voltage+2,_mode4$15574+2
  3191  010E5E  C0A3  F3F5         	movff	?_ADC_Voltage+3,_mode4$15574+3
  3192                           
  3193                           ;main.c: 281: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3194  010E62  C3F2  F072         	movff	_mode4$15574,___fldiv@a
  3195  010E66  C3F3  F073         	movff	_mode4$15574+1,___fldiv@a+1
  3196  010E6A  C3F4  F074         	movff	_mode4$15574+2,___fldiv@a+2
  3197  010E6E  C3F5  F075         	movff	_mode4$15574+3,___fldiv@a+3
  3198  010E72  0E00               	movlw	0
  3199  010E74  0100               	movlb	0	; () banked
  3200  010E76  6F6E               	movwf	___fldiv@b& (0+255),b
  3201  010E78  0E00               	movlw	0
  3202  010E7A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3203  010E7C  0E6C               	movlw	108
  3204  010E7E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3205  010E80  0E42               	movlw	66
  3206  010E82  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3207  010E84  EC53  F088         	call	___fldiv	;wreg free
  3208  010E88  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3209  010E8C  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3210  010E90  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3211  010E94  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3212  010E98  EC56  F09B         	call	___fltol	;wreg free
  3213  010E9C  C0B2  F0C0         	movff	?___fltol,_IRValue
  3214  010EA0  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  3215                           
  3216                           ;main.c: 282: if (MXK_SwitchTo(eMXK_HMI)) {
  3217  010EA4  0E01               	movlw	1
  3218  010EA6  EC46  F0AE         	call	_MXK_SwitchTo
  3219  010EAA  0900               	iorlw	0
  3220  010EAC  B4D8               	btfsc	status,2,c
  3221  010EAE  D00E               	goto	l2365
  3222                           
  3223                           ;main.c: 283: HMI_SetNumber(IRValue);
  3224  010EB0  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3225  010EB4  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3226  010EB8  EC84  F0B0         	call	_HMI_SetNumber	;wreg free
  3227                           
  3228                           ;main.c: 284: HMI_Render();
  3229  010EBC  ECA7  F0AE         	call	_HMI_Render	;wreg free
  3230                           
  3231                           ;main.c: 285: if (MXK_Release())
  3232  010EC0  EC89  F0B1         	call	_MXK_Release	;wreg free
  3233  010EC4  0900               	iorlw	0
  3234  010EC6  A4D8               	btfss	status,2,c
  3235                           
  3236                           ;main.c: 286: MXK_Dequeue();
  3237  010EC8  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  3238  010ECC                     l2365:
  3239                           
  3240                           ;main.c: 287: }
  3241                           ;main.c: 288: if (IRValue < MinDist) {
  3242  010ECC  0100               	movlb	0	; () banked
  3243  010ECE  51FB               	movf	_MinDist& (0+255),w,b
  3244  010ED0  0100               	movlb	0	; () banked
  3245  010ED2  5DC0               	subwf	_IRValue& (0+255),w,b
  3246  010ED4  0100               	movlb	0	; () banked
  3247  010ED6  51C1               	movf	(_IRValue+1)& (0+255),w,b
  3248  010ED8  0A80               	xorlw	128
  3249  010EDA  0103               	movlb	3	; () banked
  3250  010EDC  6FF1               	movwf	??_mode4& (0+255),b
  3251  010EDE  0100               	movlb	0	; () banked
  3252  010EE0  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3253  010EE2  0A80               	xorlw	128
  3254  010EE4  0103               	movlb	3	; () banked
  3255  010EE6  59F1               	subwfb	??_mode4& (0+255),w,b
  3256  010EE8  B0D8               	btfsc	status,0,c
  3257  010EEA  D008               	goto	l2366
  3258                           
  3259                           ; BSR set to: 3
  3260                           ;main.c: 289: MinDist = IRValue;
  3261  010EEC  C0C0  F0FB         	movff	_IRValue,_MinDist
  3262  010EF0  C0C1  F0FC         	movff	_IRValue+1,_MinDist+1
  3263                           
  3264                           ;main.c: 290: Stepstomin = StepRotate;
  3265  010EF4  C0C4  F0C2         	movff	_StepRotate,_Stepstomin
  3266  010EF8  C0C5  F0C3         	movff	_StepRotate+1,_Stepstomin+1
  3267  010EFC                     l2366:
  3268                           
  3269                           ; BSR set to: 3
  3270                           ;main.c: 291: }
  3271                           ;main.c: 292: if (MXK_SwitchTo(eMXK_Motor)) {
  3272                           
  3273                           ; BSR set to: 3
  3274  010EFC  0E08               	movlw	8
  3275  010EFE  EC46  F0AE         	call	_MXK_SwitchTo
  3276  010F02  0900               	iorlw	0
  3277  010F04  B4D8               	btfsc	status,2,c
  3278  010F06  D01F               	goto	l2368
  3279                           
  3280                           ;main.c: 293: Motor_Speed(&Stepper, (50));
  3281  010F08  0EC8               	movlw	low _Stepper
  3282  010F0A  0100               	movlb	0	; () banked
  3283  010F0C  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3284  010F0E  0E03               	movlw	high _Stepper
  3285  010F10  0100               	movlb	0	; () banked
  3286  010F12  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3287  010F14  0E00               	movlw	0
  3288  010F16  0100               	movlb	0	; () banked
  3289  010F18  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3290  010F1A  0E32               	movlw	50
  3291  010F1C  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3292  010F1E  EC6F  F0B0         	call	_Motor_Speed	;wreg free
  3293                           
  3294                           ;main.c: 294: Motor_Move(&Stepper, -1);
  3295  010F22  0EC8               	movlw	low _Stepper
  3296  010F24  0100               	movlb	0	; () banked
  3297  010F26  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3298  010F28  0E03               	movlw	high _Stepper
  3299  010F2A  0100               	movlb	0	; () banked
  3300  010F2C  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3301  010F2E  0EFF               	movlw	255
  3302  010F30  0100               	movlb	0	; () banked
  3303  010F32  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3304  010F34  6965               	setf	Motor_Move@pDelta& (0+255),b
  3305  010F36  EC5E  F0AF         	call	_Motor_Move	;wreg free
  3306                           
  3307                           ;main.c: 295: if (MXK_Release())
  3308  010F3A  EC89  F0B1         	call	_MXK_Release	;wreg free
  3309  010F3E  0900               	iorlw	0
  3310  010F40  A4D8               	btfss	status,2,c
  3311                           
  3312                           ;main.c: 296: MXK_Dequeue();
  3313  010F42  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  3314  010F46                     l2368:
  3315                           
  3316                           ;main.c: 297: }
  3317                           ;main.c: 298: TimerX = 10;
  3318  010F46  0E00               	movlw	0
  3319  010F48  0100               	movlb	0	; () banked
  3320  010F4A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3321  010F4C  0E0A               	movlw	10
  3322  010F4E  6FF9               	movwf	_TimerX& (0+255),b
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;main.c: 299: if (TimerX > 0) {
  3326  010F50  0100               	movlb	0	; () banked
  3327  010F52  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3328  010F54  D063               	goto	u13850
  3329  010F56  0100               	movlb	0	; () banked
  3330  010F58  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3331  010F5A  E156               	bnz	l16416
  3332  010F5C  0100               	movlb	0	; () banked
  3333  010F5E  05F9               	decf	_TimerX& (0+255),w,b
  3334  010F60  B0D8               	btfsc	status,0,c
  3335  010F62  D052               	goto	l2370
  3336  010F64  D05B               	goto	u13850
  3337  010F66                     l16398:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;main.c: 301: ADC_Start(&ADC_AN0);
  3341  010F66  0EF4               	movlw	low _ADC_AN0
  3342  010F68  0100               	movlb	0	; () banked
  3343  010F6A  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3344  010F6C  0E00               	movlw	high _ADC_AN0
  3345  010F6E  0100               	movlb	0	; () banked
  3346  010F70  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3347  010F72  ECC0  F0A6         	call	_ADC_Start	;wreg free
  3348                           
  3349                           ;main.c: 302: if (MXK_SwitchTo(eMXK_HMI)) {
  3350  010F76  0E01               	movlw	1
  3351  010F78  EC46  F0AE         	call	_MXK_SwitchTo
  3352  010F7C  0900               	iorlw	0
  3353  010F7E  B4D8               	btfsc	status,2,c
  3354  010F80  D00E               	goto	l2373
  3355                           
  3356                           ;main.c: 303: HMI_SetNumber(IRValue);
  3357  010F82  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3358  010F86  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3359  010F8A  EC84  F0B0         	call	_HMI_SetNumber	;wreg free
  3360                           
  3361                           ;main.c: 304: HMI_Render();
  3362  010F8E  ECA7  F0AE         	call	_HMI_Render	;wreg free
  3363                           
  3364                           ;main.c: 305: if (MXK_Release())
  3365  010F92  EC89  F0B1         	call	_MXK_Release	;wreg free
  3366  010F96  0900               	iorlw	0
  3367  010F98  A4D8               	btfss	status,2,c
  3368                           
  3369                           ;main.c: 306: MXK_Dequeue();
  3370  010F9A  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  3371  010F9E                     l2373:
  3372                           
  3373                           ;main.c: 307: }
  3374                           ;main.c: 308: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3375  010F9E  0EF4               	movlw	low _ADC_AN0
  3376  010FA0  0100               	movlb	0	; () banked
  3377  010FA2  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3378  010FA4  0E00               	movlw	high _ADC_AN0
  3379  010FA6  0100               	movlb	0	; () banked
  3380  010FA8  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3381  010FAA  EC40  F09D         	call	_ADC_Voltage	;wreg free
  3382  010FAE  C0A0  F3F2         	movff	?_ADC_Voltage,_mode4$15574
  3383  010FB2  C0A1  F3F3         	movff	?_ADC_Voltage+1,_mode4$15574+1
  3384  010FB6  C0A2  F3F4         	movff	?_ADC_Voltage+2,_mode4$15574+2
  3385  010FBA  C0A3  F3F5         	movff	?_ADC_Voltage+3,_mode4$15574+3
  3386                           
  3387                           ;main.c: 307: }
  3388                           ;main.c: 308: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3389  010FBE  C3F2  F072         	movff	_mode4$15574,___fldiv@a
  3390  010FC2  C3F3  F073         	movff	_mode4$15574+1,___fldiv@a+1
  3391  010FC6  C3F4  F074         	movff	_mode4$15574+2,___fldiv@a+2
  3392  010FCA  C3F5  F075         	movff	_mode4$15574+3,___fldiv@a+3
  3393  010FCE  0E00               	movlw	0
  3394  010FD0  0100               	movlb	0	; () banked
  3395  010FD2  6F6E               	movwf	___fldiv@b& (0+255),b
  3396  010FD4  0E00               	movlw	0
  3397  010FD6  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3398  010FD8  0E6C               	movlw	108
  3399  010FDA  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3400  010FDC  0E42               	movlw	66
  3401  010FDE  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3402  010FE0  EC53  F088         	call	___fldiv	;wreg free
  3403  010FE4  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3404  010FE8  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3405  010FEC  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3406  010FF0  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3407  010FF4  EC56  F09B         	call	___fltol	;wreg free
  3408  010FF8  C0B2  F0C0         	movff	?___fltol,_IRValue
  3409  010FFC  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  3410                           
  3411                           ;main.c: 309: TimerX--;
  3412  011000  0100               	movlb	0	; () banked
  3413  011002  07F9               	decf	_TimerX& (0+255),f,b
  3414  011004  A0D8               	btfss	status,0,c
  3415  011006  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3416  011008                     l2370:
  3417  011008                     l16416:
  3418                           
  3419                           ; BSR set to: 0
  3420  011008  0100               	movlb	0	; () banked
  3421  01100A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3422  01100C  D007               	goto	u13850
  3423  01100E  0100               	movlb	0	; () banked
  3424  011010  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3425  011012  E1A9               	bnz	l16398
  3426  011014  0100               	movlb	0	; () banked
  3427  011016  05F9               	decf	_TimerX& (0+255),w,b
  3428  011018  B0D8               	btfsc	status,0,c
  3429  01101A  D7A5               	goto	l2371
  3430  01101C                     u13850:
  3431                           
  3432                           ; BSR set to: 0
  3433                           
  3434                           ; BSR set to: 0
  3435                           
  3436                           ; BSR set to: 0
  3437                           
  3438                           ; BSR set to: 0
  3439  01101C  0100               	movlb	0	; () banked
  3440  01101E  BFC5               	btfsc	(_StepRotate+1)& (0+255),7,b
  3441  011020  D705               	goto	l2363
  3442  011022  0E90               	movlw	144
  3443  011024  0100               	movlb	0	; () banked
  3444  011026  5DC4               	subwf	_StepRotate& (0+255),w,b
  3445  011028  0E01               	movlw	1
  3446  01102A  0100               	movlb	0	; () banked
  3447  01102C  59C5               	subwfb	(_StepRotate+1)& (0+255),w,b
  3448  01102E  A0D8               	btfss	status,0,c
  3449  011030  D6FD               	goto	l2363
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;main.c: 310: }
  3453                           ;main.c: 311: }
  3454                           ;main.c: 312: }
  3455                           ;main.c: 313: irobot_rotate_to((INT16) stepsToMinDegrees - 90, 5);
  3456                           
  3457                           ; BSR set to: 0
  3458  011032  C300  F0B2         	movff	_stepsToMinDegrees,___fltol@f1
  3459  011036  C301  F0B3         	movff	_stepsToMinDegrees+1,___fltol@f1+1
  3460  01103A  C302  F0B4         	movff	_stepsToMinDegrees+2,___fltol@f1+2
  3461  01103E  C303  F0B5         	movff	_stepsToMinDegrees+3,___fltol@f1+3
  3462  011042  EC56  F09B         	call	___fltol	;wreg free
  3463  011046  0EA6               	movlw	166
  3464  011048  0100               	movlb	0	; () banked
  3465  01104A  25B2               	addwf	?___fltol& (0+255),w,b
  3466  01104C  0101               	movlb	1	; () banked
  3467  01104E  6F02               	movwf	irobot_rotate_to@rotateToAngle& (0+255),b
  3468  011050  0EFF               	movlw	255
  3469  011052  0100               	movlb	0	; () banked
  3470  011054  21B3               	addwfc	(?___fltol+1)& (0+255),w,b
  3471  011056  0101               	movlb	1	; () banked
  3472  011058  6F03               	movwf	(irobot_rotate_to@rotateToAngle+1)& (0+255),b
  3473  01105A  0E00               	movlw	0
  3474  01105C  0101               	movlb	1	; () banked
  3475  01105E  6F05               	movwf	(irobot_rotate_to@rotateSpeed+1)& (0+255),b
  3476  011060  0E05               	movlw	5
  3477  011062  6F04               	movwf	irobot_rotate_to@rotateSpeed& (0+255),b
  3478  011064  EC5A  F0B0         	call	_irobot_rotate_to	;wreg free
  3479                           
  3480                           ;main.c: 314: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3481  011068  D007               	goto	l2376
  3482  01106A                     
  3483                           ;main.c: 315: irobot_move_straight(5);
  3484  01106A  0E00               	movlw	0
  3485  01106C  0100               	movlb	0	; () banked
  3486  01106E  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3487  011070  0E05               	movlw	5
  3488  011072  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3489  011074  ECB2  F0B1         	call	_irobot_move_straight	;wreg free
  3490  011078                     l2376:
  3491  011078  0100               	movlb	0	; () banked
  3492  01107A  51D6               	movf	_iRBumpLeft& (0+255),w,b
  3493  01107C  A4D8               	btfss	status,2,c
  3494  01107E  D00C               	goto	u13900
  3495                           
  3496                           ; BSR set to: 0
  3497  011080  0100               	movlb	0	; () banked
  3498  011082  51D7               	movf	_iRBumpRight& (0+255),w,b
  3499  011084  A4D8               	btfss	status,2,c
  3500  011086  D008               	goto	u13900
  3501                           
  3502                           ; BSR set to: 0
  3503  011088  0100               	movlb	0	; () banked
  3504  01108A  51D5               	movf	_iRDropRight& (0+255),w,b
  3505  01108C  A4D8               	btfss	status,2,c
  3506  01108E  D004               	goto	u13900
  3507                           
  3508                           ; BSR set to: 0
  3509  011090  0100               	movlb	0	; () banked
  3510  011092  51D4               	movf	_iRDropLeft& (0+255),w,b
  3511  011094  B4D8               	btfsc	status,2,c
  3512  011096  D7E9               	goto	l2377
  3513  011098                     u13900:
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;main.c: 316: }
  3517                           ;main.c: 317: irobot_song_play(0);
  3518                           
  3519                           ; BSR set to: 0
  3520                           
  3521                           ; BSR set to: 0
  3522  011098  0E00               	movlw	0
  3523  01109A  EC12  F0B2         	call	_irobot_song_play
  3524                           
  3525                           ;main.c: 318: irobot_stop_motion(0);
  3526  01109E  0E00               	movlw	0
  3527  0110A0  ECBB  F0AD         	call	_irobot_stop_motion
  3528  0110A4  0012               	return		;funcret
  3529  0110A6                     __end_of_mode4:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           postdec1	equ	0xFE5
  3538                           fsr1h	equ	0xFE2
  3539                           fsr1l	equ	0xFE1
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _irobot_rotate_to *****************
  3543 ;; Defined at:
  3544 ;;		line 335 in file "Library/iRobotSerial.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  rotateToAngl    2    2[BANK1 ] short 
  3547 ;;  rotateSpeed     2    4[BANK1 ] short 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      void 
  3552 ;; Registers used:
  3553 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3559 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;Total ram usage:        4 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:   10
  3566 ;; This function calls:
  3567 ;;		_irobot_angle_wait
  3568 ;;		_irobot_rotate
  3569 ;;		_irobot_stop_motion
  3570 ;; This function is called by:
  3571 ;;		_mode4
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text2
  3576  0160B4                     __ptext2:
  3577                           	opt stack 0
  3578  0160B4                     _irobot_rotate_to:
  3579                           	opt stack 19
  3580                           
  3581                           ;iRobotSerial.c: 336: irobot_rotate(1, rotateToAngle, rotateSpeed);
  3582                           
  3583                           ;incstack = 0
  3584  0160B4  C102  F079         	movff	irobot_rotate_to@rotateToAngle,irobot_rotate@rotateAngle
  3585  0160B8  C103  F07A         	movff	irobot_rotate_to@rotateToAngle+1,irobot_rotate@rotateAngle+1
  3586  0160BC  C104  F07B         	movff	irobot_rotate_to@rotateSpeed,irobot_rotate@rotateSpeed
  3587  0160C0  C105  F07C         	movff	irobot_rotate_to@rotateSpeed+1,irobot_rotate@rotateSpeed+1
  3588  0160C4  0E01               	movlw	1
  3589  0160C6  ECC6  F0AA         	call	_irobot_rotate
  3590                           
  3591                           ;iRobotSerial.c: 337: irobot_angle_wait(rotateToAngle);
  3592  0160CA  C102  F070         	movff	irobot_rotate_to@rotateToAngle,irobot_angle_wait@angleWait
  3593  0160CE  C103  F071         	movff	irobot_rotate_to@rotateToAngle+1,irobot_angle_wait@angleWait+1
  3594  0160D2  EC98  F0AD         	call	_irobot_angle_wait	;wreg free
  3595                           
  3596                           ;iRobotSerial.c: 338: irobot_stop_motion(1);
  3597  0160D6  0E01               	movlw	1
  3598  0160D8  ECBB  F0AD         	call	_irobot_stop_motion
  3599  0160DC  0012               	return		;funcret
  3600  0160DE                     __end_of_irobot_rotate_to:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           postinc0	equ	0xFEE
  3607                           wreg	equ	0xFE8
  3608                           postdec1	equ	0xFE5
  3609                           fsr1h	equ	0xFE2
  3610                           fsr1l	equ	0xFE1
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function _irobot_rotate *****************
  3614 ;; Defined at:
  3615 ;;		line 280 in file "Library/iRobotSerial.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  isScript        1    wreg     unsigned char 
  3618 ;;  rotateAngle     2   25[BANK0 ] short 
  3619 ;;  rotateSpeed     2   27[BANK0 ] short 
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;  isScript        1   29[BANK0 ] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      void 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3631 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;Total ram usage:        5 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    9
  3638 ;; This function calls:
  3639 ;;		_irobot_move
  3640 ;; This function is called by:
  3641 ;;		_irobot_rotate_to
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text3
  3646  01558C                     __ptext3:
  3647                           	opt stack 0
  3648  01558C                     _irobot_rotate:
  3649                           	opt stack 19
  3650                           
  3651                           ;incstack = 0
  3652                           ;irobot_rotate@isScript stored from wreg
  3653  01558C  0100               	movlb	0	; () banked
  3654  01558E  6F7D               	movwf	irobot_rotate@isScript& (0+255),b
  3655                           
  3656                           ;iRobotSerial.c: 281: (rotateAngle > 0) ? (rotateAngle = iR_CONST_CCW) : (rotateAngle = 
      +                          iR_CONST_CW);
  3657  015590  0100               	movlb	0	; () banked
  3658  015592  BF7A               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  3659  015594  D00D               	goto	l2152
  3660  015596  0100               	movlb	0	; () banked
  3661  015598  517A               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  3662  01559A  E104               	bnz	u10180
  3663  01559C  0100               	movlb	0	; () banked
  3664  01559E  0579               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  3665  0155A0  A0D8               	btfss	status,0,c
  3666  0155A2  D006               	goto	l2152
  3667  0155A4                     u10180:
  3668                           
  3669                           ; BSR set to: 0
  3670  0155A4  0E00               	movlw	0
  3671  0155A6  0100               	movlb	0	; () banked
  3672  0155A8  6F7A               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3673  0155AA  0E01               	movlw	1
  3674  0155AC  6F79               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3675  0155AE  D003               	goto	l2154
  3676  0155B0                     l2152:
  3677                           
  3678                           ; BSR set to: 0
  3679  0155B0  0100               	movlb	0	; () banked
  3680  0155B2  6979               	setf	irobot_rotate@rotateAngle& (0+255),b
  3681  0155B4  697A               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3682  0155B6                     l2154:
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;iRobotSerial.c: 282: (isScript) ?
  3686                           ;iRobotSerial.c: 283: irobot_move(1, rotateSpeed, rotateAngle) :
  3687                           ;iRobotSerial.c: 284: irobot_move(0, rotateSpeed, rotateAngle);
  3688                           
  3689                           ; BSR set to: 0
  3690  0155B6  0100               	movlb	0	; () banked
  3691  0155B8  517D               	movf	irobot_rotate@isScript& (0+255),w,b
  3692  0155BA  0100               	movlb	0	; () banked
  3693  0155BC  B4D8               	btfsc	status,2,c
  3694  0155BE  D00C               	goto	l2156
  3695                           
  3696                           ; BSR set to: 0
  3697  0155C0  C07B  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3698  0155C4  C07C  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3699  0155C8  C079  F072         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  3700  0155CC  C07A  F073         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  3701  0155D0  0E01               	movlw	1
  3702  0155D2  EC7F  F0A1         	call	_irobot_move
  3703  0155D6  0012               	return	
  3704  0155D8                     l2156:
  3705  0155D8  C07B  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3706  0155DC  C07C  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3707  0155E0  C079  F072         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  3708  0155E4  C07A  F073         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  3709  0155E8  0E00               	movlw	0
  3710  0155EA  EC7F  F0A1         	call	_irobot_move
  3711  0155EE  0012               	return	
  3712  0155F0                     __end_of_irobot_rotate:
  3713                           	opt stack 0
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           postinc0	equ	0xFEE
  3719                           wreg	equ	0xFE8
  3720                           postdec1	equ	0xFE5
  3721                           fsr1h	equ	0xFE2
  3722                           fsr1l	equ	0xFE1
  3723                           status	equ	0xFD8
  3724                           
  3725 ;; *************** function _irobot_angle_wait *****************
  3726 ;; Defined at:
  3727 ;;		line 204 in file "Library/iRobotSerial.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;  angleWait       2   16[BANK0 ] short 
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3741 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;Total ram usage:        4 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    8
  3748 ;; This function calls:
  3749 ;;		_load_iRScriptStack
  3750 ;;		_twos_complement_of
  3751 ;; This function is called by:
  3752 ;;		_irobot_rotate_to
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text4
  3757  015B30                     __ptext4:
  3758                           	opt stack 0
  3759  015B30                     _irobot_angle_wait:
  3760                           	opt stack 20
  3761                           
  3762                           ;iRobotSerial.c: 205: angleWait = twos_complement_of(angleWait);
  3763                           
  3764                           ;incstack = 0
  3765  015B30  C070  F060         	movff	irobot_angle_wait@angleWait,twos_complement_of@complementValue
  3766  015B34  C071  F061         	movff	irobot_angle_wait@angleWait+1,twos_complement_of@complementValue+1
  3767  015B38  EC24  F0AE         	call	_twos_complement_of	;wreg free
  3768  015B3C  C060  F070         	movff	?_twos_complement_of,irobot_angle_wait@angleWait
  3769  015B40  C061  F071         	movff	?_twos_complement_of+1,irobot_angle_wait@angleWait+1
  3770                           
  3771                           ;iRobotSerial.c: 207: load_iRScriptStack(3, iR_WAIT_ANGLE,
  3772                           ;iRobotSerial.c: 208: (((angleWait)>>8) & 0xFF), ((angleWait) & 0xFF));
  3773  015B44  0E00               	movlw	0
  3774  015B46  0100               	movlb	0	; () banked
  3775  015B48  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  3776  015B4A  0E9D               	movlw	157
  3777  015B4C  6F60               	movwf	?_load_iRScriptStack& (0+255),b
  3778  015B4E  C071  F072         	movff	irobot_angle_wait@angleWait+1,??_irobot_angle_wait
  3779  015B52  0100               	movlb	0	; () banked
  3780  015B54  6B73               	clrf	(??_irobot_angle_wait+1)& (0+255),b
  3781  015B56  BF72               	btfsc	??_irobot_angle_wait& (0+255),7,b
  3782  015B58  6973               	setf	(??_irobot_angle_wait+1)& (0+255),b
  3783  015B5A  0100               	movlb	0	; () banked
  3784  015B5C  5172               	movf	??_irobot_angle_wait& (0+255),w,b
  3785  015B5E  0100               	movlb	0	; () banked
  3786  015B60  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  3787  015B62  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  3788  015B64  0100               	movlb	0	; () banked
  3789  015B66  5170               	movf	irobot_angle_wait@angleWait& (0+255),w,b
  3790  015B68  0100               	movlb	0	; () banked
  3791  015B6A  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  3792  015B6C  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  3793  015B6E  0E03               	movlw	3
  3794  015B70  ECC1  F0A9         	call	_load_iRScriptStack
  3795  015B74  0012               	return		;funcret
  3796  015B76                     __end_of_irobot_angle_wait:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           tblptrh	equ	0xFF7
  3800                           tblptrl	equ	0xFF6
  3801                           tablat	equ	0xFF5
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           postdec1	equ	0xFE5
  3805                           fsr1h	equ	0xFE2
  3806                           fsr1l	equ	0xFE1
  3807                           status	equ	0xFD8
  3808                           
  3809 ;; *************** function _mode3 *****************
  3810 ;; Defined at:
  3811 ;;		line 243 in file "main.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;		None
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;		None
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      void 
  3818 ;; Registers used:
  3819 ;;		None
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;Total ram usage:        0 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    7
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_main
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text5
  3840  001404                     __ptext5:
  3841                           	opt stack 0
  3842  001404                     _mode3:
  3843                           	opt stack 23
  3844                           
  3845                           ;incstack = 0
  3846  001404  0012               	return		;funcret
  3847  001406                     __end_of_mode3:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           postinc0	equ	0xFEE
  3854                           wreg	equ	0xFE8
  3855                           postdec1	equ	0xFE5
  3856                           fsr1h	equ	0xFE2
  3857                           fsr1l	equ	0xFE1
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function _mode2 *****************
  3861 ;; Defined at:
  3862 ;;		line 205 in file "main.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;		None
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  dist            2   44[BANK0 ] int 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  1    wreg      void 
  3869 ;; Registers used:
  3870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;Total ram usage:        2 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:   16
  3883 ;; This function calls:
  3884 ;;		_Console_Render
  3885 ;;		_HMI_Poll
  3886 ;;		_MXK_Dequeue
  3887 ;;		_MXK_Release
  3888 ;;		_MXK_SwitchTo
  3889 ;;		_irobot_move_straight
  3890 ;;		_irobot_song_play
  3891 ;;		_irobot_stop_motion
  3892 ;;		_printf
  3893 ;;		_update_angle
  3894 ;;		_update_bump_and_cliff
  3895 ;;		_update_distance
  3896 ;; This function is called by:
  3897 ;;		_main
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text6
  3902  01344C                     __ptext6:
  3903                           	opt stack 0
  3904  01344C                     _mode2:
  3905                           	opt stack 14
  3906                           
  3907                           ;main.c: 206: update_bump_and_cliff();
  3908                           
  3909                           ;incstack = 0
  3910  01344C  EC41  F0AF         	call	_update_bump_and_cliff	;wreg free
  3911                           
  3912                           ;main.c: 207: update_distance();
  3913  013450  EC26  F0B2         	call	_update_distance	;wreg free
  3914                           
  3915                           ;main.c: 208: update_angle();
  3916  013454  EC2F  F0B2         	call	_update_angle	;wreg free
  3917                           
  3918                           ;main.c: 210: angleTotal += iRAngle;
  3919  013458  0103               	movlb	3	; () banked
  3920  01345A  5127               	movf	_iRAngle& (0+255),w,b
  3921  01345C  0100               	movlb	0	; () banked
  3922  01345E  27C6               	addwf	_angleTotal& (0+255),f,b
  3923  013460  0103               	movlb	3	; () banked
  3924  013462  5128               	movf	(_iRAngle+1)& (0+255),w,b
  3925  013464  0100               	movlb	0	; () banked
  3926  013466  23C7               	addwfc	(_angleTotal+1)& (0+255),f,b
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;main.c: 212: if (iRBumpLeft || iRBumpRight) {
  3930  013468  0100               	movlb	0	; () banked
  3931  01346A  51D6               	movf	_iRBumpLeft& (0+255),w,b
  3932  01346C  A4D8               	btfss	status,2,c
  3933  01346E  D004               	goto	u13670
  3934                           
  3935                           ; BSR set to: 0
  3936  013470  0100               	movlb	0	; () banked
  3937  013472  51D7               	movf	_iRBumpRight& (0+255),w,b
  3938  013474  B4D8               	btfsc	status,2,c
  3939  013476  D006               	goto	l2341
  3940  013478                     u13670:
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;main.c: 213: irobot_song_play(0);
  3944                           
  3945                           ; BSR set to: 0
  3946  013478  0E00               	movlw	0
  3947  01347A  EC12  F0B2         	call	_irobot_song_play
  3948                           
  3949                           ;main.c: 214: irobot_stop_motion(0);
  3950  01347E  0E00               	movlw	0
  3951  013480  ECBB  F0AD         	call	_irobot_stop_motion
  3952  013484                     l2341:
  3953                           
  3954                           ;main.c: 215: }
  3955                           ;main.c: 216: if (angleTotal > 90) {
  3956  013484  0100               	movlb	0	; () banked
  3957  013486  BFC7               	btfsc	(_angleTotal+1)& (0+255),7,b
  3958  013488  D00B               	goto	l2344
  3959  01348A  0100               	movlb	0	; () banked
  3960  01348C  51C7               	movf	(_angleTotal+1)& (0+255),w,b
  3961  01348E  E105               	bnz	u13680
  3962  013490  0E5B               	movlw	91
  3963  013492  0100               	movlb	0	; () banked
  3964  013494  5DC6               	subwf	_angleTotal& (0+255),w,b
  3965  013496  A0D8               	btfss	status,0,c
  3966  013498  D003               	goto	l2344
  3967  01349A                     u13680:
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;main.c: 217: irobot_stop_motion(0);
  3971  01349A  0E00               	movlw	0
  3972  01349C  ECBB  F0AD         	call	_irobot_stop_motion
  3973  0134A0                     l2344:
  3974                           
  3975                           ;main.c: 218: }
  3976                           ;main.c: 219: HMI_Poll();
  3977  0134A0  EC35  F0A8         	call	_HMI_Poll	;wreg free
  3978                           
  3979                           ;main.c: 220: if (MXK_SwitchTo(eMXK_HMI)) {
  3980  0134A4  0E01               	movlw	1
  3981  0134A6  EC46  F0AE         	call	_MXK_SwitchTo
  3982  0134AA  0900               	iorlw	0
  3983  0134AC  B4D8               	btfsc	status,2,c
  3984  0134AE  0012               	return	
  3985                           
  3986                           ;main.c: 221: printf("%c", (char)35);
  3987  0134B0  0EFB               	movlw	low STR_1
  3988  0134B2  0100               	movlb	0	; () banked
  3989  0134B4  6F75               	movwf	printf@f& (0+255),b
  3990  0134B6  0EFF               	movlw	high STR_1
  3991  0134B8  0100               	movlb	0	; () banked
  3992  0134BA  6F76               	movwf	(printf@f+1)& (0+255),b
  3993  0134BC  0E00               	movlw	0
  3994  0134BE  0100               	movlb	0	; () banked
  3995  0134C0  6F78               	movwf	(?_printf+3)& (0+255),b
  3996  0134C2  0E23               	movlw	35
  3997  0134C4  6F77               	movwf	(?_printf+2)& (0+255),b
  3998  0134C6  EC7E  F092         	call	_printf	;wreg free
  3999                           
  4000                           ;main.c: 222: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4001  0134CA  0E9D               	movlw	low STR_2
  4002  0134CC  0100               	movlb	0	; () banked
  4003  0134CE  6F75               	movwf	printf@f& (0+255),b
  4004  0134D0  0EFF               	movlw	high STR_2
  4005  0134D2  0100               	movlb	0	; () banked
  4006  0134D4  6F76               	movwf	(printf@f+1)& (0+255),b
  4007  0134D6  C0C8  F077         	movff	_distanceTotal,?_printf+2
  4008  0134DA  C0C9  F078         	movff	_distanceTotal+1,?_printf+3
  4009  0134DE  C0D6  F079         	movff	_iRBumpLeft,?_printf+4
  4010  0134E2  0100               	movlb	0	; () banked
  4011  0134E4  6B7A               	clrf	(?_printf+5)& (0+255),b
  4012  0134E6  C0D7  F07B         	movff	_iRBumpRight,?_printf+6
  4013  0134EA  0100               	movlb	0	; () banked
  4014  0134EC  6B7C               	clrf	(?_printf+7)& (0+255),b
  4015  0134EE  EC7E  F092         	call	_printf	;wreg free
  4016                           
  4017                           ;main.c: 223: Console_Render();
  4018  0134F2  EC92  F08F         	call	_Console_Render	;wreg free
  4019                           
  4020                           ;main.c: 225: int dist = 0;
  4021  0134F6  0E00               	movlw	0
  4022  0134F8  0100               	movlb	0	; () banked
  4023  0134FA  6F8D               	movwf	(mode2@dist+1)& (0+255),b
  4024  0134FC  0E00               	movlw	0
  4025  0134FE  6F8C               	movwf	mode2@dist& (0+255),b
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;main.c: 226: irobot_move_straight(200);
  4029  013500  0E00               	movlw	0
  4030  013502  0100               	movlb	0	; () banked
  4031  013504  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4032  013506  0EC8               	movlw	200
  4033  013508  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4034  01350A  ECB2  F0B1         	call	_irobot_move_straight	;wreg free
  4035                           
  4036                           ;main.c: 227: while (dist < 5000) {
  4037  01350E  D025               	goto	l2346
  4038  013510                     
  4039                           ;main.c: 228: update_distance();
  4040  013510  EC26  F0B2         	call	_update_distance	;wreg free
  4041                           
  4042                           ;main.c: 229: dist += iRDistance;
  4043  013514  0103               	movlb	3	; () banked
  4044  013516  5129               	movf	_iRDistance& (0+255),w,b
  4045  013518  0100               	movlb	0	; () banked
  4046  01351A  278C               	addwf	mode2@dist& (0+255),f,b
  4047  01351C  0103               	movlb	3	; () banked
  4048  01351E  512A               	movf	(_iRDistance+1)& (0+255),w,b
  4049  013520  0100               	movlb	0	; () banked
  4050  013522  238D               	addwfc	(mode2@dist+1)& (0+255),f,b
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;main.c: 230: printf("%c", (char)35);
  4054  013524  0EFB               	movlw	low STR_1
  4055  013526  0100               	movlb	0	; () banked
  4056  013528  6F75               	movwf	printf@f& (0+255),b
  4057  01352A  0EFF               	movlw	high STR_1
  4058  01352C  0100               	movlb	0	; () banked
  4059  01352E  6F76               	movwf	(printf@f+1)& (0+255),b
  4060  013530  0E00               	movlw	0
  4061  013532  0100               	movlb	0	; () banked
  4062  013534  6F78               	movwf	(?_printf+3)& (0+255),b
  4063  013536  0E23               	movlw	35
  4064  013538  6F77               	movwf	(?_printf+2)& (0+255),b
  4065  01353A  EC7E  F092         	call	_printf	;wreg free
  4066                           
  4067                           ;main.c: 231: printf("Distance: %d\n", dist);
  4068  01353E  0EED               	movlw	low STR_6
  4069  013540  0100               	movlb	0	; () banked
  4070  013542  6F75               	movwf	printf@f& (0+255),b
  4071  013544  0EFF               	movlw	high STR_6
  4072  013546  0100               	movlb	0	; () banked
  4073  013548  6F76               	movwf	(printf@f+1)& (0+255),b
  4074  01354A  C08C  F077         	movff	mode2@dist,?_printf+2
  4075  01354E  C08D  F078         	movff	mode2@dist+1,?_printf+3
  4076  013552  EC7E  F092         	call	_printf	;wreg free
  4077                           
  4078                           ;main.c: 232: Console_Render();
  4079  013556  EC92  F08F         	call	_Console_Render	;wreg free
  4080  01355A                     l2346:
  4081  01355A  0100               	movlb	0	; () banked
  4082  01355C  BF8D               	btfsc	(mode2@dist+1)& (0+255),7,b
  4083  01355E  D7D8               	goto	l2347
  4084  013560  0E88               	movlw	136
  4085  013562  0100               	movlb	0	; () banked
  4086  013564  5D8C               	subwf	mode2@dist& (0+255),w,b
  4087  013566  0E13               	movlw	19
  4088  013568  0100               	movlb	0	; () banked
  4089  01356A  598D               	subwfb	(mode2@dist+1)& (0+255),w,b
  4090  01356C  A0D8               	btfss	status,0,c
  4091  01356E  D7D0               	goto	l2347
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;main.c: 233: }
  4095                           ;main.c: 234: irobot_stop_motion(0);
  4096                           
  4097                           ; BSR set to: 0
  4098  013570  0E00               	movlw	0
  4099  013572  ECBB  F0AD         	call	_irobot_stop_motion
  4100                           
  4101                           ;main.c: 236: if (MXK_Release())
  4102  013576  EC89  F0B1         	call	_MXK_Release	;wreg free
  4103  01357A  0900               	iorlw	0
  4104  01357C  B4D8               	btfsc	status,2,c
  4105  01357E  0012               	return	
  4106                           
  4107                           ;main.c: 237: MXK_Dequeue();
  4108  013580  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  4109  013584  0012               	return	
  4110  013586                     __end_of_mode2:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           postinc0	equ	0xFEE
  4117                           wreg	equ	0xFE8
  4118                           postdec1	equ	0xFE5
  4119                           fsr1h	equ	0xFE2
  4120                           fsr1l	equ	0xFE1
  4121                           status	equ	0xFD8
  4122                           
  4123 ;; *************** function _irobot_move_straight *****************
  4124 ;; Defined at:
  4125 ;;		line 303 in file "Library/iRobotSerial.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;  straightSpee    2   25[BANK0 ] short 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;		None
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  1    wreg      void 
  4132 ;; Registers used:
  4133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4139 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4143 ;;Total ram usage:        2 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    9
  4146 ;; This function calls:
  4147 ;;		_irobot_move
  4148 ;; This function is called by:
  4149 ;;		_mode2
  4150 ;;		_mode4
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           	psect	text7
  4155  016364                     __ptext7:
  4156                           	opt stack 0
  4157  016364                     _irobot_move_straight:
  4158                           	opt stack 20
  4159                           
  4160                           ;iRobotSerial.c: 304: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4161                           
  4162                           ;incstack = 0
  4163  016364  C079  F070         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4164  016368  C07A  F071         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4165  01636C  0E7F               	movlw	127
  4166  01636E  0100               	movlb	0	; () banked
  4167  016370  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4168  016372  6972               	setf	irobot_move@moveTurnRadius& (0+255),b
  4169  016374  0E00               	movlw	0
  4170  016376  EC7F  F0A1         	call	_irobot_move
  4171  01637A  0012               	return		;funcret
  4172  01637C                     __end_of_irobot_move_straight:
  4173                           	opt stack 0
  4174                           tblptru	equ	0xFF8
  4175                           tblptrh	equ	0xFF7
  4176                           tblptrl	equ	0xFF6
  4177                           tablat	equ	0xFF5
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           postdec1	equ	0xFE5
  4181                           fsr1h	equ	0xFE2
  4182                           fsr1l	equ	0xFE1
  4183                           status	equ	0xFD8
  4184                           
  4185 ;; *************** function _mode1 *****************
  4186 ;; Defined at:
  4187 ;;		line 120 in file "main.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  moveto          2    2[BANK3 ] int 
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;Total ram usage:        8 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:   16
  4208 ;; This function calls:
  4209 ;;		_ADC_Start
  4210 ;;		_ADC_Voltage
  4211 ;;		_Console_Render
  4212 ;;		_HMI_Poll
  4213 ;;		_HMI_Render
  4214 ;;		_HMI_SetNumber
  4215 ;;		_MXK_Dequeue
  4216 ;;		_MXK_Release
  4217 ;;		_MXK_SwitchTo
  4218 ;;		_Motor_Move
  4219 ;;		_Motor_Speed
  4220 ;;		___fldiv
  4221 ;;		___fltol
  4222 ;;		_irobot_song_play
  4223 ;;		_irobot_stop_motion
  4224 ;;		_printf
  4225 ;;		_update_angle
  4226 ;;		_update_bump_and_cliff
  4227 ;;		_update_distance
  4228 ;; This function is called by:
  4229 ;;		_main
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           	psect	text8
  4234  0108C4                     __ptext8:
  4235                           	opt stack 0
  4236  0108C4                     _mode1:
  4237                           	opt stack 14
  4238                           
  4239                           ;main.c: 121: update_bump_and_cliff();
  4240                           
  4241                           ;incstack = 0
  4242  0108C4  EC41  F0AF         	call	_update_bump_and_cliff	;wreg free
  4243                           
  4244                           ;main.c: 122: update_distance();
  4245  0108C8  EC26  F0B2         	call	_update_distance	;wreg free
  4246                           
  4247                           ;main.c: 123: update_angle();
  4248  0108CC  EC2F  F0B2         	call	_update_angle	;wreg free
  4249                           
  4250                           ;main.c: 127: if (iRBumpLeft || iRBumpRight) {
  4251  0108D0  0100               	movlb	0	; () banked
  4252  0108D2  51D6               	movf	_iRBumpLeft& (0+255),w,b
  4253  0108D4  A4D8               	btfss	status,2,c
  4254  0108D6  D004               	goto	u13470
  4255                           
  4256                           ; BSR set to: 0
  4257  0108D8  0100               	movlb	0	; () banked
  4258  0108DA  51D7               	movf	_iRBumpRight& (0+255),w,b
  4259  0108DC  B4D8               	btfsc	status,2,c
  4260  0108DE  D006               	goto	l2311
  4261  0108E0                     u13470:
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;main.c: 128: irobot_song_play(0);
  4265                           
  4266                           ; BSR set to: 0
  4267  0108E0  0E00               	movlw	0
  4268  0108E2  EC12  F0B2         	call	_irobot_song_play
  4269                           
  4270                           ;main.c: 129: irobot_stop_motion(0);
  4271  0108E6  0E00               	movlw	0
  4272  0108E8  ECBB  F0AD         	call	_irobot_stop_motion
  4273  0108EC                     l2311:
  4274                           
  4275                           ;main.c: 130: }
  4276                           ;main.c: 131: if (angleTotal > 83) {
  4277  0108EC  0100               	movlb	0	; () banked
  4278  0108EE  BFC7               	btfsc	(_angleTotal+1)& (0+255),7,b
  4279  0108F0  D00B               	goto	l2314
  4280  0108F2  0100               	movlb	0	; () banked
  4281  0108F4  51C7               	movf	(_angleTotal+1)& (0+255),w,b
  4282  0108F6  E105               	bnz	u13480
  4283  0108F8  0E54               	movlw	84
  4284  0108FA  0100               	movlb	0	; () banked
  4285  0108FC  5DC6               	subwf	_angleTotal& (0+255),w,b
  4286  0108FE  A0D8               	btfss	status,0,c
  4287  010900  D003               	goto	l2314
  4288  010902                     u13480:
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;main.c: 132: irobot_stop_motion(0);
  4292  010902  0E00               	movlw	0
  4293  010904  ECBB  F0AD         	call	_irobot_stop_motion
  4294  010908                     l2314:
  4295                           
  4296                           ;main.c: 133: }
  4297                           ;main.c: 135: if (MXK_SwitchTo(eMXK_HMI)) {
  4298  010908  0E01               	movlw	1
  4299  01090A  EC46  F0AE         	call	_MXK_SwitchTo
  4300  01090E  0900               	iorlw	0
  4301  010910  B4D8               	btfsc	status,2,c
  4302  010912  D029               	goto	l2316
  4303                           
  4304                           ;main.c: 136: printf("%c", (char)35);
  4305  010914  0EFB               	movlw	low STR_1
  4306  010916  0100               	movlb	0	; () banked
  4307  010918  6F75               	movwf	printf@f& (0+255),b
  4308  01091A  0EFF               	movlw	high STR_1
  4309  01091C  0100               	movlb	0	; () banked
  4310  01091E  6F76               	movwf	(printf@f+1)& (0+255),b
  4311  010920  0E00               	movlw	0
  4312  010922  0100               	movlb	0	; () banked
  4313  010924  6F78               	movwf	(?_printf+3)& (0+255),b
  4314  010926  0E23               	movlw	35
  4315  010928  6F77               	movwf	(?_printf+2)& (0+255),b
  4316  01092A  EC7E  F092         	call	_printf	;wreg free
  4317                           
  4318                           ;main.c: 137: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4319  01092E  0E9D               	movlw	low STR_2
  4320  010930  0100               	movlb	0	; () banked
  4321  010932  6F75               	movwf	printf@f& (0+255),b
  4322  010934  0EFF               	movlw	high STR_2
  4323  010936  0100               	movlb	0	; () banked
  4324  010938  6F76               	movwf	(printf@f+1)& (0+255),b
  4325  01093A  C0C8  F077         	movff	_distanceTotal,?_printf+2
  4326  01093E  C0C9  F078         	movff	_distanceTotal+1,?_printf+3
  4327  010942  C0D6  F079         	movff	_iRBumpLeft,?_printf+4
  4328  010946  0100               	movlb	0	; () banked
  4329  010948  6B7A               	clrf	(?_printf+5)& (0+255),b
  4330  01094A  C0D7  F07B         	movff	_iRBumpRight,?_printf+6
  4331  01094E  0100               	movlb	0	; () banked
  4332  010950  6B7C               	clrf	(?_printf+7)& (0+255),b
  4333  010952  EC7E  F092         	call	_printf	;wreg free
  4334                           
  4335                           ;main.c: 138: Console_Render();
  4336  010956  EC92  F08F         	call	_Console_Render	;wreg free
  4337                           
  4338                           ;main.c: 139: if (MXK_Release())
  4339  01095A  EC89  F0B1         	call	_MXK_Release	;wreg free
  4340  01095E  0900               	iorlw	0
  4341  010960  A4D8               	btfss	status,2,c
  4342                           
  4343                           ;main.c: 140: MXK_Dequeue();
  4344  010962  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  4345  010966                     l2316:
  4346                           
  4347                           ;main.c: 141: }
  4348                           ;main.c: 142: HMI_Poll();
  4349  010966  EC35  F0A8         	call	_HMI_Poll	;wreg free
  4350                           
  4351                           ;main.c: 143: StepRotate = 0;
  4352  01096A  0E00               	movlw	0
  4353  01096C  0100               	movlb	0	; () banked
  4354  01096E  6FC5               	movwf	(_StepRotate+1)& (0+255),b
  4355  010970  0E00               	movlw	0
  4356  010972  6FC4               	movwf	_StepRotate& (0+255),b
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;main.c: 144: MinDist = 1000;
  4360  010974  0E03               	movlw	3
  4361  010976  0100               	movlb	0	; () banked
  4362  010978  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4363  01097A  0EE8               	movlw	232
  4364  01097C  6FFB               	movwf	_MinDist& (0+255),b
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;main.c: 145: Stepstomin = 0;
  4368  01097E  0E00               	movlw	0
  4369  010980  0100               	movlb	0	; () banked
  4370  010982  6FC3               	movwf	(_Stepstomin+1)& (0+255),b
  4371  010984  0E00               	movlw	0
  4372  010986  6FC2               	movwf	_Stepstomin& (0+255),b
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;main.c: 146: IRValue = 0;
  4376  010988  0E00               	movlw	0
  4377  01098A  0100               	movlb	0	; () banked
  4378  01098C  6FC1               	movwf	(_IRValue+1)& (0+255),b
  4379  01098E  0E00               	movlw	0
  4380  010990  6FC0               	movwf	_IRValue& (0+255),b
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;main.c: 147: TimerX = 8;
  4384  010992  0E00               	movlw	0
  4385  010994  0100               	movlb	0	; () banked
  4386  010996  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4387  010998  0E08               	movlw	8
  4388  01099A  6FF9               	movwf	_TimerX& (0+255),b
  4389                           
  4390                           ;main.c: 148: while (StepRotate < 400) {
  4391  01099C  D0F9               	goto	u13590
  4392  01099E                     
  4393                           ; BSR set to: 0
  4394                           ;main.c: 149: StepRotate++;
  4395                           
  4396                           ; BSR set to: 0
  4397  01099E  0100               	movlb	0	; () banked
  4398  0109A0  4BC4               	infsnz	_StepRotate& (0+255),f,b
  4399  0109A2  2BC5               	incf	(_StepRotate+1)& (0+255),f,b
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;main.c: 150: ADC_Start(&ADC_AN0);
  4403  0109A4  0EF4               	movlw	low _ADC_AN0
  4404  0109A6  0100               	movlb	0	; () banked
  4405  0109A8  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4406  0109AA  0E00               	movlw	high _ADC_AN0
  4407  0109AC  0100               	movlb	0	; () banked
  4408  0109AE  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4409  0109B0  ECC0  F0A6         	call	_ADC_Start	;wreg free
  4410                           
  4411                           ;main.c: 151: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4412  0109B4  0EF4               	movlw	low _ADC_AN0
  4413  0109B6  0100               	movlb	0	; () banked
  4414  0109B8  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4415  0109BA  0E00               	movlw	high _ADC_AN0
  4416  0109BC  0100               	movlb	0	; () banked
  4417  0109BE  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4418  0109C0  EC40  F09D         	call	_ADC_Voltage	;wreg free
  4419  0109C4  C0A0  F3F5         	movff	?_ADC_Voltage,_mode1$15573
  4420  0109C8  C0A1  F3F6         	movff	?_ADC_Voltage+1,_mode1$15573+1
  4421  0109CC  C0A2  F3F7         	movff	?_ADC_Voltage+2,_mode1$15573+2
  4422  0109D0  C0A3  F3F8         	movff	?_ADC_Voltage+3,_mode1$15573+3
  4423                           
  4424                           ;main.c: 151: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4425  0109D4  C3F5  F072         	movff	_mode1$15573,___fldiv@a
  4426  0109D8  C3F6  F073         	movff	_mode1$15573+1,___fldiv@a+1
  4427  0109DC  C3F7  F074         	movff	_mode1$15573+2,___fldiv@a+2
  4428  0109E0  C3F8  F075         	movff	_mode1$15573+3,___fldiv@a+3
  4429  0109E4  0E00               	movlw	0
  4430  0109E6  0100               	movlb	0	; () banked
  4431  0109E8  6F6E               	movwf	___fldiv@b& (0+255),b
  4432  0109EA  0E00               	movlw	0
  4433  0109EC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4434  0109EE  0E6C               	movlw	108
  4435  0109F0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4436  0109F2  0E42               	movlw	66
  4437  0109F4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4438  0109F6  EC53  F088         	call	___fldiv	;wreg free
  4439  0109FA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4440  0109FE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4441  010A02  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4442  010A06  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4443  010A0A  EC56  F09B         	call	___fltol	;wreg free
  4444  010A0E  C0B2  F0C0         	movff	?___fltol,_IRValue
  4445  010A12  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  4446                           
  4447                           ;main.c: 152: if (MXK_SwitchTo(eMXK_HMI)) {
  4448  010A16  0E01               	movlw	1
  4449  010A18  EC46  F0AE         	call	_MXK_SwitchTo
  4450  010A1C  0900               	iorlw	0
  4451  010A1E  B4D8               	btfsc	status,2,c
  4452  010A20  D00E               	goto	l2320
  4453                           
  4454                           ;main.c: 153: HMI_SetNumber(IRValue);
  4455  010A22  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4456  010A26  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4457  010A2A  EC84  F0B0         	call	_HMI_SetNumber	;wreg free
  4458                           
  4459                           ;main.c: 154: HMI_Render();
  4460  010A2E  ECA7  F0AE         	call	_HMI_Render	;wreg free
  4461                           
  4462                           ;main.c: 155: if (MXK_Release())
  4463  010A32  EC89  F0B1         	call	_MXK_Release	;wreg free
  4464  010A36  0900               	iorlw	0
  4465  010A38  A4D8               	btfss	status,2,c
  4466                           
  4467                           ;main.c: 156: MXK_Dequeue();
  4468  010A3A  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  4469  010A3E                     l2320:
  4470                           
  4471                           ;main.c: 157: }
  4472                           ;main.c: 158: if (IRValue < MinDist) {
  4473  010A3E  0100               	movlb	0	; () banked
  4474  010A40  51FB               	movf	_MinDist& (0+255),w,b
  4475  010A42  0100               	movlb	0	; () banked
  4476  010A44  5DC0               	subwf	_IRValue& (0+255),w,b
  4477  010A46  0100               	movlb	0	; () banked
  4478  010A48  51C1               	movf	(_IRValue+1)& (0+255),w,b
  4479  010A4A  0A80               	xorlw	128
  4480  010A4C  0103               	movlb	3	; () banked
  4481  010A4E  6FF1               	movwf	??_mode1& (0+255),b
  4482  010A50  0100               	movlb	0	; () banked
  4483  010A52  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4484  010A54  0A80               	xorlw	128
  4485  010A56  0103               	movlb	3	; () banked
  4486  010A58  59F1               	subwfb	??_mode1& (0+255),w,b
  4487  010A5A  B0D8               	btfsc	status,0,c
  4488  010A5C  D008               	goto	l2321
  4489                           
  4490                           ; BSR set to: 3
  4491                           ;main.c: 159: MinDist = IRValue;
  4492  010A5E  C0C0  F0FB         	movff	_IRValue,_MinDist
  4493  010A62  C0C1  F0FC         	movff	_IRValue+1,_MinDist+1
  4494                           
  4495                           ;main.c: 160: Stepstomin = StepRotate;
  4496  010A66  C0C4  F0C2         	movff	_StepRotate,_Stepstomin
  4497  010A6A  C0C5  F0C3         	movff	_StepRotate+1,_Stepstomin+1
  4498  010A6E                     l2321:
  4499                           
  4500                           ; BSR set to: 3
  4501                           ;main.c: 161: }
  4502                           ;main.c: 162: if (MXK_SwitchTo(eMXK_Motor)) {
  4503                           
  4504                           ; BSR set to: 3
  4505  010A6E  0E08               	movlw	8
  4506  010A70  EC46  F0AE         	call	_MXK_SwitchTo
  4507  010A74  0900               	iorlw	0
  4508  010A76  B4D8               	btfsc	status,2,c
  4509  010A78  D020               	goto	l2323
  4510                           
  4511                           ;main.c: 163: Motor_Speed(&Stepper, (50));
  4512  010A7A  0EC8               	movlw	low _Stepper
  4513  010A7C  0100               	movlb	0	; () banked
  4514  010A7E  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4515  010A80  0E03               	movlw	high _Stepper
  4516  010A82  0100               	movlb	0	; () banked
  4517  010A84  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4518  010A86  0E00               	movlw	0
  4519  010A88  0100               	movlb	0	; () banked
  4520  010A8A  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4521  010A8C  0E32               	movlw	50
  4522  010A8E  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4523  010A90  EC6F  F0B0         	call	_Motor_Speed	;wreg free
  4524                           
  4525                           ;main.c: 164: Motor_Move(&Stepper, 1);
  4526  010A94  0EC8               	movlw	low _Stepper
  4527  010A96  0100               	movlb	0	; () banked
  4528  010A98  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4529  010A9A  0E03               	movlw	high _Stepper
  4530  010A9C  0100               	movlb	0	; () banked
  4531  010A9E  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4532  010AA0  0E00               	movlw	0
  4533  010AA2  0100               	movlb	0	; () banked
  4534  010AA4  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4535  010AA6  0E01               	movlw	1
  4536  010AA8  6F65               	movwf	Motor_Move@pDelta& (0+255),b
  4537  010AAA  EC5E  F0AF         	call	_Motor_Move	;wreg free
  4538                           
  4539                           ;main.c: 165: if (MXK_Release())
  4540  010AAE  EC89  F0B1         	call	_MXK_Release	;wreg free
  4541  010AB2  0900               	iorlw	0
  4542  010AB4  A4D8               	btfss	status,2,c
  4543                           
  4544                           ;main.c: 166: MXK_Dequeue();
  4545  010AB6  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  4546  010ABA                     l2323:
  4547                           
  4548                           ;main.c: 167: }
  4549                           ;main.c: 168: TimerX = 10;
  4550  010ABA  0E00               	movlw	0
  4551  010ABC  0100               	movlb	0	; () banked
  4552  010ABE  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4553  010AC0  0E0A               	movlw	10
  4554  010AC2  6FF9               	movwf	_TimerX& (0+255),b
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;main.c: 169: if (TimerX > 0) {
  4558  010AC4  0100               	movlb	0	; () banked
  4559  010AC6  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4560  010AC8  D063               	goto	u13590
  4561  010ACA  0100               	movlb	0	; () banked
  4562  010ACC  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4563  010ACE  E156               	bnz	l16246
  4564  010AD0  0100               	movlb	0	; () banked
  4565  010AD2  05F9               	decf	_TimerX& (0+255),w,b
  4566  010AD4  B0D8               	btfsc	status,0,c
  4567  010AD6  D052               	goto	l2325
  4568  010AD8  D05B               	goto	u13590
  4569  010ADA                     l16228:
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;main.c: 171: ADC_Start(&ADC_AN0);
  4573  010ADA  0EF4               	movlw	low _ADC_AN0
  4574  010ADC  0100               	movlb	0	; () banked
  4575  010ADE  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4576  010AE0  0E00               	movlw	high _ADC_AN0
  4577  010AE2  0100               	movlb	0	; () banked
  4578  010AE4  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4579  010AE6  ECC0  F0A6         	call	_ADC_Start	;wreg free
  4580                           
  4581                           ;main.c: 172: if (MXK_SwitchTo(eMXK_HMI)) {
  4582  010AEA  0E01               	movlw	1
  4583  010AEC  EC46  F0AE         	call	_MXK_SwitchTo
  4584  010AF0  0900               	iorlw	0
  4585  010AF2  B4D8               	btfsc	status,2,c
  4586  010AF4  D00E               	goto	l2328
  4587                           
  4588                           ;main.c: 173: HMI_SetNumber(IRValue);
  4589  010AF6  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4590  010AFA  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4591  010AFE  EC84  F0B0         	call	_HMI_SetNumber	;wreg free
  4592                           
  4593                           ;main.c: 174: HMI_Render();
  4594  010B02  ECA7  F0AE         	call	_HMI_Render	;wreg free
  4595                           
  4596                           ;main.c: 175: if (MXK_Release())
  4597  010B06  EC89  F0B1         	call	_MXK_Release	;wreg free
  4598  010B0A  0900               	iorlw	0
  4599  010B0C  A4D8               	btfss	status,2,c
  4600                           
  4601                           ;main.c: 176: MXK_Dequeue();
  4602  010B0E  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  4603  010B12                     l2328:
  4604                           
  4605                           ;main.c: 177: }
  4606                           ;main.c: 178: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4607  010B12  0EF4               	movlw	low _ADC_AN0
  4608  010B14  0100               	movlb	0	; () banked
  4609  010B16  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4610  010B18  0E00               	movlw	high _ADC_AN0
  4611  010B1A  0100               	movlb	0	; () banked
  4612  010B1C  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4613  010B1E  EC40  F09D         	call	_ADC_Voltage	;wreg free
  4614  010B22  C0A0  F3F5         	movff	?_ADC_Voltage,_mode1$15573
  4615  010B26  C0A1  F3F6         	movff	?_ADC_Voltage+1,_mode1$15573+1
  4616  010B2A  C0A2  F3F7         	movff	?_ADC_Voltage+2,_mode1$15573+2
  4617  010B2E  C0A3  F3F8         	movff	?_ADC_Voltage+3,_mode1$15573+3
  4618                           
  4619                           ;main.c: 177: }
  4620                           ;main.c: 178: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4621  010B32  C3F5  F072         	movff	_mode1$15573,___fldiv@a
  4622  010B36  C3F6  F073         	movff	_mode1$15573+1,___fldiv@a+1
  4623  010B3A  C3F7  F074         	movff	_mode1$15573+2,___fldiv@a+2
  4624  010B3E  C3F8  F075         	movff	_mode1$15573+3,___fldiv@a+3
  4625  010B42  0E00               	movlw	0
  4626  010B44  0100               	movlb	0	; () banked
  4627  010B46  6F6E               	movwf	___fldiv@b& (0+255),b
  4628  010B48  0E00               	movlw	0
  4629  010B4A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4630  010B4C  0E6C               	movlw	108
  4631  010B4E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4632  010B50  0E42               	movlw	66
  4633  010B52  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4634  010B54  EC53  F088         	call	___fldiv	;wreg free
  4635  010B58  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4636  010B5C  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4637  010B60  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4638  010B64  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4639  010B68  EC56  F09B         	call	___fltol	;wreg free
  4640  010B6C  C0B2  F0C0         	movff	?___fltol,_IRValue
  4641  010B70  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  4642                           
  4643                           ;main.c: 179: TimerX--;
  4644  010B74  0100               	movlb	0	; () banked
  4645  010B76  07F9               	decf	_TimerX& (0+255),f,b
  4646  010B78  A0D8               	btfss	status,0,c
  4647  010B7A  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4648  010B7C                     l2325:
  4649  010B7C                     l16246:
  4650                           
  4651                           ; BSR set to: 0
  4652  010B7C  0100               	movlb	0	; () banked
  4653  010B7E  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4654  010B80  D007               	goto	u13590
  4655  010B82  0100               	movlb	0	; () banked
  4656  010B84  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4657  010B86  E1A9               	bnz	l16228
  4658  010B88  0100               	movlb	0	; () banked
  4659  010B8A  05F9               	decf	_TimerX& (0+255),w,b
  4660  010B8C  B0D8               	btfsc	status,0,c
  4661  010B8E  D7A5               	goto	l2326
  4662  010B90                     u13590:
  4663                           
  4664                           ; BSR set to: 0
  4665                           
  4666                           ; BSR set to: 0
  4667                           
  4668                           ; BSR set to: 0
  4669                           
  4670                           ; BSR set to: 0
  4671  010B90  0100               	movlb	0	; () banked
  4672  010B92  BFC5               	btfsc	(_StepRotate+1)& (0+255),7,b
  4673  010B94  D704               	goto	l2318
  4674  010B96  0E90               	movlw	144
  4675  010B98  0100               	movlb	0	; () banked
  4676  010B9A  5DC4               	subwf	_StepRotate& (0+255),w,b
  4677  010B9C  0E01               	movlw	1
  4678  010B9E  0100               	movlb	0	; () banked
  4679  010BA0  59C5               	subwfb	(_StepRotate+1)& (0+255),w,b
  4680  010BA2  A0D8               	btfss	status,0,c
  4681  010BA4  D6FC               	goto	l2318
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;main.c: 180: }
  4685                           ;main.c: 181: }
  4686                           ;main.c: 182: }
  4687                           ;main.c: 183: if (MXK_SwitchTo(eMXK_Motor)) {
  4688                           
  4689                           ; BSR set to: 0
  4690  010BA6  0E08               	movlw	8
  4691  010BA8  EC46  F0AE         	call	_MXK_SwitchTo
  4692  010BAC  0900               	iorlw	0
  4693  010BAE  B4D8               	btfsc	status,2,c
  4694  010BB0  D08A               	goto	l2333
  4695                           
  4696                           ;main.c: 184: Motor_Speed(&Stepper, (50));
  4697  010BB2  0EC8               	movlw	low _Stepper
  4698  010BB4  0100               	movlb	0	; () banked
  4699  010BB6  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4700  010BB8  0E03               	movlw	high _Stepper
  4701  010BBA  0100               	movlb	0	; () banked
  4702  010BBC  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4703  010BBE  0E00               	movlw	0
  4704  010BC0  0100               	movlb	0	; () banked
  4705  010BC2  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4706  010BC4  0E32               	movlw	50
  4707  010BC6  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4708  010BC8  EC6F  F0B0         	call	_Motor_Speed	;wreg free
  4709                           
  4710                           ;main.c: 185: int moveto = 400 - Stepstomin;
  4711  010BCC  C0C2  F3F1         	movff	_Stepstomin,??_mode1
  4712  010BD0  C0C3  F3F2         	movff	_Stepstomin+1,??_mode1+1
  4713  010BD4  0103               	movlb	3	; () banked
  4714  010BD6  1FF1               	comf	??_mode1& (0+255),f,b
  4715  010BD8  1FF2               	comf	(??_mode1+1)& (0+255),f,b
  4716  010BDA  4BF1               	infsnz	??_mode1& (0+255),f,b
  4717  010BDC  2BF2               	incf	(??_mode1+1)& (0+255),f,b
  4718  010BDE  0E90               	movlw	144
  4719  010BE0  0103               	movlb	3	; () banked
  4720  010BE2  25F1               	addwf	??_mode1& (0+255),w,b
  4721  010BE4  0103               	movlb	3	; () banked
  4722  010BE6  6FF3               	movwf	mode1@moveto& (0+255),b
  4723  010BE8  0E01               	movlw	1
  4724  010BEA  0103               	movlb	3	; () banked
  4725  010BEC  21F2               	addwfc	(??_mode1+1)& (0+255),w,b
  4726  010BEE  0103               	movlb	3	; () banked
  4727  010BF0  6FF4               	movwf	(mode1@moveto+1)& (0+255),b
  4728                           
  4729                           ; BSR set to: 3
  4730                           ;main.c: 187: Motor_Move(&Stepper, (-moveto));
  4731  010BF2  0EC8               	movlw	low _Stepper
  4732  010BF4  0100               	movlb	0	; () banked
  4733  010BF6  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4734  010BF8  0E03               	movlw	high _Stepper
  4735  010BFA  0100               	movlb	0	; () banked
  4736  010BFC  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4737  010BFE  C3F3  F3F1         	movff	mode1@moveto,??_mode1
  4738  010C02  C3F4  F3F2         	movff	mode1@moveto+1,??_mode1+1
  4739  010C06  0103               	movlb	3	; () banked
  4740  010C08  1FF1               	comf	??_mode1& (0+255),f,b
  4741  010C0A  1FF2               	comf	(??_mode1+1)& (0+255),f,b
  4742  010C0C  4BF1               	infsnz	??_mode1& (0+255),f,b
  4743  010C0E  2BF2               	incf	(??_mode1+1)& (0+255),f,b
  4744  010C10  C3F1  F065         	movff	??_mode1,Motor_Move@pDelta
  4745  010C14  C3F2  F066         	movff	??_mode1+1,Motor_Move@pDelta+1
  4746  010C18  EC5E  F0AF         	call	_Motor_Move	;wreg free
  4747                           
  4748                           ;main.c: 188: if (MXK_Release())
  4749  010C1C  EC89  F0B1         	call	_MXK_Release	;wreg free
  4750  010C20  0900               	iorlw	0
  4751  010C22  B4D8               	btfsc	status,2,c
  4752  010C24  D050               	goto	l2333
  4753                           
  4754                           ;main.c: 189: MXK_Dequeue();
  4755  010C26  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  4756                           
  4757                           ;main.c: 190: }
  4758                           ;main.c: 191: while (Stepper.mDelta > 0) {
  4759  010C2A  D04D               	goto	l2333
  4760  010C2C                     l16262:
  4761                           
  4762                           ;main.c: 192: ADC_Start(&ADC_AN0);
  4763  010C2C  0EF4               	movlw	low _ADC_AN0
  4764  010C2E  0100               	movlb	0	; () banked
  4765  010C30  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4766  010C32  0E00               	movlw	high _ADC_AN0
  4767  010C34  0100               	movlb	0	; () banked
  4768  010C36  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4769  010C38  ECC0  F0A6         	call	_ADC_Start	;wreg free
  4770                           
  4771                           ;main.c: 193: if (MXK_SwitchTo(eMXK_HMI)) {
  4772  010C3C  0E01               	movlw	1
  4773  010C3E  EC46  F0AE         	call	_MXK_SwitchTo
  4774  010C42  0900               	iorlw	0
  4775  010C44  B4D8               	btfsc	status,2,c
  4776  010C46  D00E               	goto	l2336
  4777                           
  4778                           ;main.c: 194: HMI_SetNumber(IRValue);
  4779  010C48  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4780  010C4C  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4781  010C50  EC84  F0B0         	call	_HMI_SetNumber	;wreg free
  4782                           
  4783                           ;main.c: 195: HMI_Render();
  4784  010C54  ECA7  F0AE         	call	_HMI_Render	;wreg free
  4785                           
  4786                           ;main.c: 196: if (MXK_Release())
  4787  010C58  EC89  F0B1         	call	_MXK_Release	;wreg free
  4788  010C5C  0900               	iorlw	0
  4789  010C5E  A4D8               	btfss	status,2,c
  4790                           
  4791                           ;main.c: 197: MXK_Dequeue();
  4792  010C60  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
  4793  010C64                     l2336:
  4794                           
  4795                           ;main.c: 198: }
  4796                           ;main.c: 199: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4797  010C64  0EF4               	movlw	low _ADC_AN0
  4798  010C66  0100               	movlb	0	; () banked
  4799  010C68  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4800  010C6A  0E00               	movlw	high _ADC_AN0
  4801  010C6C  0100               	movlb	0	; () banked
  4802  010C6E  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4803  010C70  EC40  F09D         	call	_ADC_Voltage	;wreg free
  4804  010C74  C0A0  F3F5         	movff	?_ADC_Voltage,_mode1$15573
  4805  010C78  C0A1  F3F6         	movff	?_ADC_Voltage+1,_mode1$15573+1
  4806  010C7C  C0A2  F3F7         	movff	?_ADC_Voltage+2,_mode1$15573+2
  4807  010C80  C0A3  F3F8         	movff	?_ADC_Voltage+3,_mode1$15573+3
  4808                           
  4809                           ;main.c: 198: }
  4810                           ;main.c: 199: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4811  010C84  C3F5  F072         	movff	_mode1$15573,___fldiv@a
  4812  010C88  C3F6  F073         	movff	_mode1$15573+1,___fldiv@a+1
  4813  010C8C  C3F7  F074         	movff	_mode1$15573+2,___fldiv@a+2
  4814  010C90  C3F8  F075         	movff	_mode1$15573+3,___fldiv@a+3
  4815  010C94  0E00               	movlw	0
  4816  010C96  0100               	movlb	0	; () banked
  4817  010C98  6F6E               	movwf	___fldiv@b& (0+255),b
  4818  010C9A  0E00               	movlw	0
  4819  010C9C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4820  010C9E  0E6C               	movlw	108
  4821  010CA0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4822  010CA2  0E42               	movlw	66
  4823  010CA4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4824  010CA6  EC53  F088         	call	___fldiv	;wreg free
  4825  010CAA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4826  010CAE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4827  010CB2  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4828  010CB6  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4829  010CBA  EC56  F09B         	call	___fltol	;wreg free
  4830  010CBE  C0B2  F0C0         	movff	?___fltol,_IRValue
  4831  010CC2  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  4832  010CC6                     l2333:
  4833  010CC6  0103               	movlb	3	; () banked
  4834  010CC8  BFC9               	btfsc	(_Stepper+1)& (0+255),7,b
  4835  010CCA  0012               	return	
  4836  010CCC  0103               	movlb	3	; () banked
  4837  010CCE  51C9               	movf	(_Stepper+1)& (0+255),w,b
  4838  010CD0  E1AD               	bnz	l16262
  4839  010CD2  0103               	movlb	3	; () banked
  4840  010CD4  05C8               	decf	_Stepper& (0+255),w,b
  4841  010CD6  A0D8               	btfss	status,0,c
  4842  010CD8  0012               	return	
  4843  010CDA  D7A8               	goto	l2334
  4844  010CDC                     __end_of_mode1:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           tblptrh	equ	0xFF7
  4848                           tblptrl	equ	0xFF6
  4849                           tablat	equ	0xFF5
  4850                           postinc0	equ	0xFEE
  4851                           wreg	equ	0xFE8
  4852                           postdec1	equ	0xFE5
  4853                           fsr1h	equ	0xFE2
  4854                           fsr1l	equ	0xFE1
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function _update_distance *****************
  4858 ;; Defined at:
  4859 ;;		line 315 in file "Library/iRobotSerial.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;		None
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;		None
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  1    wreg      void 
  4866 ;; Registers used:
  4867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;Total ram usage:        0 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:   10
  4880 ;; This function calls:
  4881 ;;		_irobot_query_and_update
  4882 ;; This function is called by:
  4883 ;;		_mode1
  4884 ;;		_mode2
  4885 ;;		_mode4
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text9
  4890  01644C                     __ptext9:
  4891                           	opt stack 0
  4892  01644C                     _update_distance:
  4893                           	opt stack 19
  4894                           
  4895                           ;iRobotSerial.c: 316: irobot_query_and_update(1, iR_PKT_DISTANCE);
  4896                           
  4897                           ; BSR set to: 3
  4898                           ;incstack = 0
  4899  01644C  0E00               	movlw	0
  4900  01644E  0100               	movlb	0	; () banked
  4901  016450  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4902  016452  0E13               	movlw	19
  4903  016454  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  4904  016456  0E01               	movlw	1
  4905  016458  ECD7  F095         	call	_irobot_query_and_update
  4906  01645C  0012               	return		;funcret
  4907  01645E                     __end_of_update_distance:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           postinc0	equ	0xFEE
  4914                           wreg	equ	0xFE8
  4915                           postdec1	equ	0xFE5
  4916                           fsr1h	equ	0xFE2
  4917                           fsr1l	equ	0xFE1
  4918                           status	equ	0xFD8
  4919                           
  4920 ;; *************** function _update_bump_and_cliff *****************
  4921 ;; Defined at:
  4922 ;;		line 308 in file "Library/iRobotSerial.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;		None
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;		None
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  1    wreg      void 
  4929 ;; Registers used:
  4930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;Total ram usage:        0 bytes
  4941 ;; Hardware stack levels used:    1
  4942 ;; Hardware stack levels required when called:   10
  4943 ;; This function calls:
  4944 ;;		_irobot_query_and_update
  4945 ;; This function is called by:
  4946 ;;		_mode1
  4947 ;;		_mode2
  4948 ;;		_mode4
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           	psect	text10
  4953  015E82                     __ptext10:
  4954                           	opt stack 0
  4955  015E82                     _update_bump_and_cliff:
  4956                           	opt stack 19
  4957                           
  4958                           ;iRobotSerial.c: 309: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  4959                           ;iRobotSerial.c: 310: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  4960                           ;iRobotSerial.c: 311: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  4961                           
  4962                           ;incstack = 0
  4963  015E82  0E00               	movlw	0
  4964  015E84  0100               	movlb	0	; () banked
  4965  015E86  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4966  015E88  0E07               	movlw	7
  4967  015E8A  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  4968  015E8C  0E00               	movlw	0
  4969  015E8E  0100               	movlb	0	; () banked
  4970  015E90  6F69               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  4971  015E92  0E09               	movlw	9
  4972  015E94  6F68               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  4973  015E96  0E00               	movlw	0
  4974  015E98  0100               	movlb	0	; () banked
  4975  015E9A  6F6B               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  4976  015E9C  0E0A               	movlw	10
  4977  015E9E  6F6A               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  4978  015EA0  0E00               	movlw	0
  4979  015EA2  0100               	movlb	0	; () banked
  4980  015EA4  6F6D               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  4981  015EA6  0E0B               	movlw	11
  4982  015EA8  6F6C               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  4983  015EAA  0E00               	movlw	0
  4984  015EAC  0100               	movlb	0	; () banked
  4985  015EAE  6F6F               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  4986  015EB0  0E0C               	movlw	12
  4987  015EB2  6F6E               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  4988  015EB4  0E05               	movlw	5
  4989  015EB6  ECD7  F095         	call	_irobot_query_and_update
  4990  015EBA  0012               	return		;funcret
  4991  015EBC                     __end_of_update_bump_and_cliff:
  4992                           	opt stack 0
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           postinc0	equ	0xFEE
  4998                           wreg	equ	0xFE8
  4999                           postdec1	equ	0xFE5
  5000                           fsr1h	equ	0xFE2
  5001                           fsr1l	equ	0xFE1
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _update_angle *****************
  5005 ;; Defined at:
  5006 ;;		line 320 in file "Library/iRobotSerial.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;Total ram usage:        0 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:   10
  5027 ;; This function calls:
  5028 ;;		_irobot_query_and_update
  5029 ;; This function is called by:
  5030 ;;		_mode1
  5031 ;;		_mode2
  5032 ;;		_mode4
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text11
  5037  01645E                     __ptext11:
  5038                           	opt stack 0
  5039  01645E                     _update_angle:
  5040                           	opt stack 19
  5041                           
  5042                           ;iRobotSerial.c: 321: irobot_query_and_update(1, iR_PKT_ANGLE);
  5043                           
  5044                           ;incstack = 0
  5045  01645E  0E00               	movlw	0
  5046  016460  0100               	movlb	0	; () banked
  5047  016462  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5048  016464  0E14               	movlw	20
  5049  016466  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5050  016468  0E01               	movlw	1
  5051  01646A  ECD7  F095         	call	_irobot_query_and_update
  5052  01646E  0012               	return		;funcret
  5053  016470                     __end_of_update_angle:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           postinc0	equ	0xFEE
  5060                           wreg	equ	0xFE8
  5061                           postdec1	equ	0xFE5
  5062                           fsr1h	equ	0xFE2
  5063                           fsr1l	equ	0xFE1
  5064                           status	equ	0xFD8
  5065                           
  5066 ;; *************** function _irobot_query_and_update *****************
  5067 ;; Defined at:
  5068 ;;		line 130 in file "Library/iRobotSerial.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  numberOfPack    1    wreg     unsigned char 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5073 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5074 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5075 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5076 ;;		 -> ?_irobot_query_and_update(1), 
  5077 ;;  i               1   28[BANK0 ] unsigned char 
  5078 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5079 ;;  j               1   26[BANK0 ] unsigned char 
  5080 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5081 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  1    wreg      void 
  5084 ;; Registers used:
  5085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5091 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;Total ram usage:      535 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:    9
  5098 ;; This function calls:
  5099 ;;		_eusart_getch
  5100 ;;		_eusart_putch
  5101 ;;		_get_packet_size
  5102 ;;		_rx_assign
  5103 ;; This function is called by:
  5104 ;;		_update_bump_and_cliff
  5105 ;;		_update_distance
  5106 ;;		_update_angle
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           	psect	text12
  5111  012BAE                     __ptext12:
  5112                           	opt stack 0
  5113  012BAE                     _irobot_query_and_update:
  5114                           	opt stack 19
  5115                           
  5116                           ;incstack = 0
  5117                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5118  012BAE  0100               	movlb	0	; () banked
  5119  012BB0  6F78               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5120                           
  5121                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5122  012BB2  0E00               	movlw	0
  5123  012BB4  0100               	movlb	0	; () banked
  5124  012BB6  6F77               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5125  012BB8  0E00               	movlw	0
  5126  012BBA  0100               	movlb	0	; () banked
  5127  012BBC  6F7B               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5128                           
  5129                           ;iRobotSerial.c: 133: va_list packetIDs;
  5130                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  5131  012BBE  0E66               	movlw	low ?_irobot_query_and_update
  5132  012BC0  0100               	movlb	0	; () banked
  5133  012BC2  6F75               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5134  012BC4  0E00               	movlw	high ?_irobot_query_and_update
  5135  012BC6  0100               	movlb	0	; () banked
  5136  012BC8  6F76               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  5140  012BCA  0E95               	movlw	149
  5141  012BCC  EC4F  F0B2         	call	_eusart_putch
  5142                           
  5143                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  5144  012BD0  0100               	movlb	0	; () banked
  5145  012BD2  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5146  012BD4  EC4F  F0B2         	call	_eusart_putch
  5147                           
  5148                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++) {
  5149  012BD8  0E00               	movlw	0
  5150  012BDA  0100               	movlb	0	; () banked
  5151  012BDC  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5152  012BDE  D023               	goto	l2091
  5153  012BE0                     
  5154                           ; BSR set to: 0
  5155                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5156                           
  5157                           ; BSR set to: 0
  5158  012BE0  C075  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5159  012BE4  C076  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5160  012BE8  50DF               	movf	indf2,w,c
  5161  012BEA  0100               	movlb	0	; () banked
  5162  012BEC  6F79               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5163                           
  5164                           ; BSR set to: 0
  5165  012BEE  0E02               	movlw	2
  5166  012BF0  0100               	movlb	0	; () banked
  5167  012BF2  2775               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5168  012BF4  0E00               	movlw	0
  5169  012BF6  2376               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  5173  012BF8  0100               	movlb	0	; () banked
  5174  012BFA  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5175  012BFC  EC60  F0AA         	call	_get_packet_size
  5176  012C00  0100               	movlb	0	; () banked
  5177  012C02  2777               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  5181  012C04  0100               	movlb	0	; () banked
  5182  012C06  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5183  012C08  0D01               	mullw	1
  5184  012C0A  0E00               	movlw	low irobot_query_and_update@TXArray
  5185  012C0C  24F3               	addwf	prodl,w,c
  5186  012C0E  6ED9               	movwf	fsr2l,c
  5187  012C10  0E02               	movlw	high irobot_query_and_update@TXArray
  5188  012C12  20F4               	addwfc	prodh,w,c
  5189  012C14  6EDA               	movwf	fsr2h,c
  5190  012C16  C079  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  5194  012C1A  0100               	movlb	0	; () banked
  5195  012C1C  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5196  012C1E  EC4F  F0B2         	call	_eusart_putch
  5197  012C22  0100               	movlb	0	; () banked
  5198  012C24  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5199  012C26                     l2091:
  5200                           
  5201                           ; BSR set to: 0
  5202                           
  5203                           ; BSR set to: 0
  5204  012C26  0100               	movlb	0	; () banked
  5205  012C28  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5206  012C2A  0100               	movlb	0	; () banked
  5207  012C2C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5208  012C2E  A0D8               	btfss	status,0,c
  5209  012C30  D7D7               	goto	l2092
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;iRobotSerial.c: 142: }
  5213                           ;iRobotSerial.c: 143: ;
  5214                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  5215                           
  5216                           ; BSR set to: 0
  5217  012C32  0E00               	movlw	0
  5218  012C34  0100               	movlb	0	; () banked
  5219  012C36  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5220  012C38  D00E               	goto	l2094
  5221  012C3A                     
  5222                           ; BSR set to: 0
  5223                           
  5224                           ; BSR set to: 0
  5225  012C3A  0100               	movlb	0	; () banked
  5226  012C3C  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5227  012C3E  0D01               	mullw	1
  5228  012C40  0E00               	movlw	low irobot_query_and_update@RXArray
  5229  012C42  24F3               	addwf	prodl,w,c
  5230  012C44  6ED9               	movwf	fsr2l,c
  5231  012C46  0E01               	movlw	high irobot_query_and_update@RXArray
  5232  012C48  20F4               	addwfc	prodh,w,c
  5233  012C4A  6EDA               	movwf	fsr2h,c
  5234  012C4C  EC92  F0B2         	call	_eusart_getch	;wreg free
  5235  012C50  6EDF               	movwf	indf2,c
  5236  012C52  0100               	movlb	0	; () banked
  5237  012C54  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5238  012C56                     l2094:
  5239                           
  5240                           ; BSR set to: 0
  5241                           
  5242                           ; BSR set to: 0
  5243  012C56  0100               	movlb	0	; () banked
  5244  012C58  5177               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5245  012C5A  0100               	movlb	0	; () banked
  5246  012C5C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5247  012C5E  A0D8               	btfss	status,0,c
  5248  012C60  D7EC               	goto	l2095
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++) {
  5252                           
  5253                           ; BSR set to: 0
  5254  012C62  0E00               	movlw	0
  5255  012C64  0100               	movlb	0	; () banked
  5256  012C66  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5257  012C68  D05E               	goto	l2097
  5258  012C6A                     l2098:
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5262  012C6A  C07B  F07A         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5263  012C6E  D021               	goto	l2099
  5264  012C70                     
  5265                           ; BSR set to: 0
  5266                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5267                           
  5268                           ; BSR set to: 0
  5269  012C70  0100               	movlb	0	; () banked
  5270  012C72  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5271  012C74  0D01               	mullw	1
  5272  012C76  0E00               	movlw	low irobot_query_and_update@RXArray
  5273  012C78  24F3               	addwf	prodl,w,c
  5274  012C7A  6ED9               	movwf	fsr2l,c
  5275  012C7C  0E01               	movlw	high irobot_query_and_update@RXArray
  5276  012C7E  20F4               	addwfc	prodh,w,c
  5277  012C80  6EDA               	movwf	fsr2h,c
  5278  012C82  50DF               	movf	indf2,w,c
  5279  012C84  0100               	movlb	0	; () banked
  5280  012C86  6F61               	movwf	rx_assign@packetIDValue& (0+255),b
  5281  012C88  0100               	movlb	0	; () banked
  5282  012C8A  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5283  012C8C  0800               	sublw	0
  5284  012C8E  0100               	movlb	0	; () banked
  5285  012C90  257A               	addwf	irobot_query_and_update@j& (0+255),w,b
  5286  012C92  0100               	movlb	0	; () banked
  5287  012C94  6F62               	movwf	rx_assign@byteNumber& (0+255),b
  5288  012C96  0100               	movlb	0	; () banked
  5289  012C98  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5290  012C9A  0D01               	mullw	1
  5291  012C9C  0E00               	movlw	low irobot_query_and_update@TXArray
  5292  012C9E  24F3               	addwf	prodl,w,c
  5293  012CA0  6ED9               	movwf	fsr2l,c
  5294  012CA2  0E02               	movlw	high irobot_query_and_update@TXArray
  5295  012CA4  20F4               	addwfc	prodh,w,c
  5296  012CA6  6EDA               	movwf	fsr2h,c
  5297  012CA8  50DF               	movf	indf2,w,c
  5298  012CAA  EC5C  F09C         	call	_rx_assign
  5299  012CAE  0100               	movlb	0	; () banked
  5300  012CB0  2B7A               	incf	irobot_query_and_update@j& (0+255),f,b
  5301  012CB2                     l2099:
  5302                           
  5303                           ; BSR set to: 0
  5304                           
  5305                           ; BSR set to: 0
  5306  012CB2  0100               	movlb	0	; () banked
  5307  012CB4  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5308  012CB6  0D01               	mullw	1
  5309  012CB8  0E00               	movlw	low irobot_query_and_update@TXArray
  5310  012CBA  24F3               	addwf	prodl,w,c
  5311  012CBC  6ED9               	movwf	fsr2l,c
  5312  012CBE  0E02               	movlw	high irobot_query_and_update@TXArray
  5313  012CC0  20F4               	addwfc	prodh,w,c
  5314  012CC2  6EDA               	movwf	fsr2h,c
  5315  012CC4  50DF               	movf	indf2,w,c
  5316  012CC6  EC60  F0AA         	call	_get_packet_size
  5317  012CCA  0100               	movlb	0	; () banked
  5318  012CCC  6F70               	movwf	??_irobot_query_and_update& (0+255),b
  5319  012CCE  6B71               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5320  012CD0  0100               	movlb	0	; () banked
  5321  012CD2  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5322  012CD4  0100               	movlb	0	; () banked
  5323  012CD6  2770               	addwf	??_irobot_query_and_update& (0+255),f,b
  5324  012CD8  0E00               	movlw	0
  5325  012CDA  2371               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5326  012CDC  0100               	movlb	0	; () banked
  5327  012CDE  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5328  012CE0  0100               	movlb	0	; () banked
  5329  012CE2  6F72               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5330  012CE4  6B73               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5331  012CE6  0100               	movlb	0	; () banked
  5332  012CE8  5170               	movf	??_irobot_query_and_update& (0+255),w,b
  5333  012CEA  0100               	movlb	0	; () banked
  5334  012CEC  5D72               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5335  012CEE  0100               	movlb	0	; () banked
  5336  012CF0  5173               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5337  012CF2  0A80               	xorlw	128
  5338  012CF4  0100               	movlb	0	; () banked
  5339  012CF6  6F74               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5340  012CF8  0100               	movlb	0	; () banked
  5341  012CFA  5171               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5342  012CFC  0A80               	xorlw	128
  5343  012CFE  0100               	movlb	0	; () banked
  5344  012D00  5974               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5345  012D02  A0D8               	btfss	status,0,c
  5346  012D04  D7B5               	goto	l2100
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;iRobotSerial.c: 150: }
  5350                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  5351                           
  5352                           ; BSR set to: 0
  5353  012D06  0100               	movlb	0	; () banked
  5354  012D08  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5355  012D0A  0D01               	mullw	1
  5356  012D0C  0E00               	movlw	low irobot_query_and_update@TXArray
  5357  012D0E  24F3               	addwf	prodl,w,c
  5358  012D10  6ED9               	movwf	fsr2l,c
  5359  012D12  0E02               	movlw	high irobot_query_and_update@TXArray
  5360  012D14  20F4               	addwfc	prodh,w,c
  5361  012D16  6EDA               	movwf	fsr2h,c
  5362  012D18  50DF               	movf	indf2,w,c
  5363  012D1A  EC60  F0AA         	call	_get_packet_size
  5364  012D1E  0100               	movlb	0	; () banked
  5365  012D20  277B               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5366                           
  5367                           ; BSR set to: 0
  5368  012D22  0100               	movlb	0	; () banked
  5369  012D24  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5370  012D26                     l2097:
  5371                           
  5372                           ; BSR set to: 0
  5373                           
  5374                           ; BSR set to: 0
  5375  012D26  0100               	movlb	0	; () banked
  5376  012D28  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5377  012D2A  0100               	movlb	0	; () banked
  5378  012D2C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5379  012D2E  B0D8               	btfsc	status,0,c
  5380  012D30  0012               	return	
  5381  012D32  D79B               	goto	l2098
  5382  012D34                     __end_of_irobot_query_and_update:
  5383                           	opt stack 0
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           prodh	equ	0xFF4
  5389                           prodl	equ	0xFF3
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           postdec1	equ	0xFE5
  5393                           fsr1h	equ	0xFE2
  5394                           fsr1l	equ	0xFE1
  5395                           indf2	equ	0xFDF
  5396                           fsr2h	equ	0xFDA
  5397                           fsr2l	equ	0xFD9
  5398                           status	equ	0xFD8
  5399                           
  5400 ;; *************** function _rx_assign *****************
  5401 ;; Defined at:
  5402 ;;		line 74 in file "Library/iRobotSerial.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  packetID        1    wreg     unsigned char 
  5405 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5406 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;  packetID        1    5[BANK0 ] unsigned char 
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  1    wreg      void 
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0, cstack
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5418 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;Total ram usage:        5 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    8
  5425 ;; This function calls:
  5426 ;;		_sort_iRBumpDrop
  5427 ;; This function is called by:
  5428 ;;		_irobot_query_and_update
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text13
  5433  0138B8                     __ptext13:
  5434                           	opt stack 0
  5435  0138B8                     _rx_assign:
  5436                           	opt stack 19
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;incstack = 0
  5440                           ;rx_assign@packetID stored from wreg
  5441  0138B8  0100               	movlb	0	; () banked
  5442  0138BA  6F65               	movwf	rx_assign@packetID& (0+255),b
  5443                           
  5444                           ;iRobotSerial.c: 75: switch (packetID) {
  5445  0138BC  D057               	goto	l2031
  5446  0138BE                     l2032:
  5447                           
  5448                           ; BSR set to: 0
  5449  0138BE  C061  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5450                           
  5451                           ; BSR set to: 0
  5452  0138C2  ECF0  F0A5         	call	_sort_iRBumpDrop	;wreg free
  5453  0138C6  0012               	return	
  5454  0138C8                     l2034:
  5455                           
  5456                           ; BSR set to: 0
  5457  0138C8  C061  F035         	movff	rx_assign@packetIDValue,_iRWall
  5458  0138CC  0012               	return	
  5459  0138CE                     l2035:
  5460                           
  5461                           ; BSR set to: 0
  5462  0138CE  C061  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5463  0138D2  0012               	return	
  5464  0138D4                     l2036:
  5465                           
  5466                           ; BSR set to: 0
  5467  0138D4  C061  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5468  0138D8  0012               	return	
  5469  0138DA                     l2037:
  5470                           
  5471                           ; BSR set to: 0
  5472  0138DA  C061  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5473  0138DE  0012               	return	
  5474  0138E0                     l2038:
  5475                           
  5476                           ; BSR set to: 0
  5477  0138E0  C061  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5478  0138E4  0012               	return	
  5479  0138E6                     l2039:
  5480                           
  5481                           ; BSR set to: 0
  5482  0138E6  C061  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5483  0138EA  0012               	return	
  5484  0138EC                     
  5485                           ; BSR set to: 0
  5486                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5487                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5488                           
  5489                           ; BSR set to: 0
  5490  0138EC  0100               	movlb	0	; () banked
  5491  0138EE  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5492  0138F0  0100               	movlb	0	; () banked
  5493  0138F2  A4D8               	btfss	status,2,c
  5494  0138F4  D005               	goto	l2042
  5495                           
  5496                           ; BSR set to: 0
  5497  0138F6  C061  F308         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5498  0138FA  0103               	movlb	3	; () banked
  5499  0138FC  6B09               	clrf	(_iRDistanceSS+1)& (0+255),b
  5500  0138FE  0012               	return	
  5501  013900                     l2042:
  5502                           
  5503                           ; BSR set to: 0
  5504  013900  C061  F30A         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5505  013904  0103               	movlb	3	; () banked
  5506  013906  6B0B               	clrf	(_iRDistanceSS+3)& (0+255),b
  5507                           
  5508                           ; BSR set to: 3
  5509  013908  0103               	movlb	3	; () banked
  5510  01390A  5108               	movf	_iRDistanceSS& (0+255),w,b
  5511  01390C  0100               	movlb	0	; () banked
  5512  01390E  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5513  013910  6B63               	clrf	??_rx_assign& (0+255),b
  5514  013912  0103               	movlb	3	; () banked
  5515  013914  510A               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5516  013916  0100               	movlb	0	; () banked
  5517  013918  2563               	addwf	??_rx_assign& (0+255),w,b
  5518  01391A  0103               	movlb	3	; () banked
  5519  01391C  6F29               	movwf	_iRDistance& (0+255),b
  5520  01391E  0103               	movlb	3	; () banked
  5521  013920  510B               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5522  013922  0100               	movlb	0	; () banked
  5523  013924  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5524  013926  0103               	movlb	3	; () banked
  5525  013928  6F2A               	movwf	(_iRDistance+1)& (0+255),b
  5526                           
  5527                           ; BSR set to: 3
  5528  01392A  0012               	return	
  5529  01392C                     
  5530                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5531                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5532                           
  5533                           ; BSR set to: 3
  5534  01392C  0100               	movlb	0	; () banked
  5535  01392E  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5536  013930  0100               	movlb	0	; () banked
  5537  013932  A4D8               	btfss	status,2,c
  5538  013934  D005               	goto	l2047
  5539                           
  5540                           ; BSR set to: 0
  5541  013936  C061  F304         	movff	rx_assign@packetIDValue,_iRAngleSS
  5542  01393A  0103               	movlb	3	; () banked
  5543  01393C  6B05               	clrf	(_iRAngleSS+1)& (0+255),b
  5544  01393E  0012               	return	
  5545  013940                     l2047:
  5546                           
  5547                           ; BSR set to: 0
  5548  013940  C061  F306         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  5549  013944  0103               	movlb	3	; () banked
  5550  013946  6B07               	clrf	(_iRAngleSS+3)& (0+255),b
  5551                           
  5552                           ; BSR set to: 3
  5553  013948  0103               	movlb	3	; () banked
  5554  01394A  5104               	movf	_iRAngleSS& (0+255),w,b
  5555  01394C  0100               	movlb	0	; () banked
  5556  01394E  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5557  013950  6B63               	clrf	??_rx_assign& (0+255),b
  5558  013952  0103               	movlb	3	; () banked
  5559  013954  5106               	movf	(_iRAngleSS+2)& (0+255),w,b
  5560  013956  0100               	movlb	0	; () banked
  5561  013958  2563               	addwf	??_rx_assign& (0+255),w,b
  5562  01395A  0103               	movlb	3	; () banked
  5563  01395C  6F27               	movwf	_iRAngle& (0+255),b
  5564  01395E  0103               	movlb	3	; () banked
  5565  013960  5107               	movf	(_iRAngleSS+3)& (0+255),w,b
  5566  013962  0100               	movlb	0	; () banked
  5567  013964  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5568  013966  0103               	movlb	3	; () banked
  5569  013968  6F28               	movwf	(_iRAngle+1)& (0+255),b
  5570                           
  5571                           ; BSR set to: 3
  5572                           ;iRobotSerial.c: 89: }
  5573                           
  5574                           ; BSR set to: 3
  5575  01396A  0012               	return	
  5576  01396C                     l2031:
  5577                           
  5578                           ; BSR set to: 3
  5579  01396C  0100               	movlb	0	; () banked
  5580  01396E  5165               	movf	rx_assign@packetID& (0+255),w,b
  5581                           
  5582                           ; Switch size 1, requested type "space"
  5583                           ; Number of cases is 9, Range of values is 7 to 20
  5584                           ; switch strategies available:
  5585                           ; Name         Instructions Cycles
  5586                           ; simple_byte           28    15 (average)
  5587                           ;	Chosen strategy is simple_byte
  5588  013970  0A07               	xorlw	7	; case 7
  5589  013972  B4D8               	btfsc	status,2,c
  5590  013974  D7A4               	goto	l2032
  5591  013976  0A0F               	xorlw	15	; case 8
  5592  013978  B4D8               	btfsc	status,2,c
  5593  01397A  D7A6               	goto	l2034
  5594  01397C  0A01               	xorlw	1	; case 9
  5595  01397E  B4D8               	btfsc	status,2,c
  5596  013980  D7A6               	goto	l2035
  5597  013982  0A03               	xorlw	3	; case 10
  5598  013984  B4D8               	btfsc	status,2,c
  5599  013986  D7A6               	goto	l2036
  5600  013988  0A01               	xorlw	1	; case 11
  5601  01398A  B4D8               	btfsc	status,2,c
  5602  01398C  D7A6               	goto	l2037
  5603  01398E  0A07               	xorlw	7	; case 12
  5604  013990  B4D8               	btfsc	status,2,c
  5605  013992  D7A6               	goto	l2038
  5606  013994  0A01               	xorlw	1	; case 13
  5607  013996  B4D8               	btfsc	status,2,c
  5608  013998  D7A6               	goto	l2039
  5609  01399A  0A1E               	xorlw	30	; case 19
  5610  01399C  B4D8               	btfsc	status,2,c
  5611  01399E  D7A6               	goto	l2040
  5612  0139A0  0A07               	xorlw	7	; case 20
  5613  0139A2  A4D8               	btfss	status,2,c
  5614  0139A4  0012               	return	
  5615  0139A6  D7C2               	goto	l2045
  5616  0139A8                     __end_of_rx_assign:
  5617                           	opt stack 0
  5618                           tblptru	equ	0xFF8
  5619                           tblptrh	equ	0xFF7
  5620                           tblptrl	equ	0xFF6
  5621                           tablat	equ	0xFF5
  5622                           prodh	equ	0xFF4
  5623                           prodl	equ	0xFF3
  5624                           postinc0	equ	0xFEE
  5625                           wreg	equ	0xFE8
  5626                           postdec1	equ	0xFE5
  5627                           fsr1h	equ	0xFE2
  5628                           fsr1l	equ	0xFE1
  5629                           indf2	equ	0xFDF
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           
  5634 ;; *************** function _sort_iRBumpDrop *****************
  5635 ;; Defined at:
  5636 ;;		line 92 in file "Library/iRobotSerial.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;		None
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;		None
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  1    wreg      void 
  5643 ;; Registers used:
  5644 ;;		wreg, status,2, status,0
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;Total ram usage:        1 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    7
  5657 ;; This function calls:
  5658 ;;		Nothing
  5659 ;; This function is called by:
  5660 ;;		_rx_assign
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text14
  5665  014BE0                     __ptext14:
  5666                           	opt stack 0
  5667  014BE0                     _sort_iRBumpDrop:
  5668                           	opt stack 19
  5669                           
  5670                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  5671                           
  5672                           ;incstack = 0
  5673  014BE0  A036               	btfss	_iRBumpDrop,0,c
  5674  014BE2  D002               	goto	l2054
  5675  014BE4  0E01               	movlw	1
  5676  014BE6  D001               	goto	L1
  5677  014BE8                     l2054:
  5678                           
  5679                           ; BSR set to: 0
  5680  014BE8  0E00               	movlw	0
  5681  014BEA                     L1:
  5682  014BEA  0100               	movlb	0	; () banked
  5683  014BEC  6FD7               	movwf	_iRBumpRight& (0+255),b
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  5687                           
  5688                           ; BSR set to: 0
  5689  014BEE  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5690  014BF2  0100               	movlb	0	; () banked
  5691  014BF4  90D8               	bcf	status,0,c
  5692  014BF6  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5693  014BF8  0100               	movlb	0	; () banked
  5694  014BFA  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5695  014BFC  D002               	goto	l2058
  5696                           
  5697                           ; BSR set to: 0
  5698  014BFE  0E01               	movlw	1
  5699  014C00  D001               	goto	L2
  5700  014C02                     l2058:
  5701                           
  5702                           ; BSR set to: 0
  5703                           
  5704                           ; BSR set to: 0
  5705  014C02  0E00               	movlw	0
  5706  014C04                     L2:
  5707  014C04  0100               	movlb	0	; () banked
  5708  014C06  6FD6               	movwf	_iRBumpLeft& (0+255),b
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  5712                           
  5713                           ; BSR set to: 0
  5714  014C08  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5715  014C0C  0100               	movlb	0	; () banked
  5716  014C0E  90D8               	bcf	status,0,c
  5717  014C10  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5718  014C12  0100               	movlb	0	; () banked
  5719  014C14  90D8               	bcf	status,0,c
  5720  014C16  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5721  014C18  0100               	movlb	0	; () banked
  5722  014C1A  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5723  014C1C  D002               	goto	l2062
  5724                           
  5725                           ; BSR set to: 0
  5726  014C1E  0E01               	movlw	1
  5727  014C20  D001               	goto	L3
  5728  014C22                     l2062:
  5729                           
  5730                           ; BSR set to: 0
  5731                           
  5732                           ; BSR set to: 0
  5733  014C22  0E00               	movlw	0
  5734  014C24                     L3:
  5735  014C24  0100               	movlb	0	; () banked
  5736  014C26  6FD5               	movwf	_iRDropRight& (0+255),b
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  5740                           
  5741                           ; BSR set to: 0
  5742  014C28  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5743  014C2C  0100               	movlb	0	; () banked
  5744  014C2E  90D8               	bcf	status,0,c
  5745  014C30  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5746  014C32  0100               	movlb	0	; () banked
  5747  014C34  90D8               	bcf	status,0,c
  5748  014C36  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5749  014C38  0100               	movlb	0	; () banked
  5750  014C3A  90D8               	bcf	status,0,c
  5751  014C3C  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5752  014C3E  0100               	movlb	0	; () banked
  5753  014C40  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5754  014C42  D002               	goto	l2066
  5755                           
  5756                           ; BSR set to: 0
  5757  014C44  0E01               	movlw	1
  5758  014C46  D001               	goto	L4
  5759  014C48                     l2066:
  5760                           
  5761                           ; BSR set to: 0
  5762                           
  5763                           ; BSR set to: 0
  5764  014C48  0E00               	movlw	0
  5765  014C4A                     L4:
  5766  014C4A  0100               	movlb	0	; () banked
  5767  014C4C  6FD4               	movwf	_iRDropLeft& (0+255),b
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  5771                           
  5772                           ; BSR set to: 0
  5773  014C4E  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5774  014C52  0100               	movlb	0	; () banked
  5775  014C54  3B60               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  5776  014C56  0E0F               	movlw	15
  5777  014C58  1760               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  5778  014C5A  0100               	movlb	0	; () banked
  5779  014C5C  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5780  014C5E  D003               	goto	l2070
  5781                           
  5782                           ; BSR set to: 0
  5783  014C60  0E01               	movlw	1
  5784  014C62  6E2F               	movwf	_iRDropCaster,c
  5785  014C64  0012               	return	
  5786  014C66                     l2070:
  5787                           
  5788                           ; BSR set to: 0
  5789                           
  5790                           ; BSR set to: 0
  5791  014C66  0E00               	movlw	0
  5792  014C68  6E2F               	movwf	_iRDropCaster,c
  5793  014C6A  0012               	return	
  5794  014C6C                     __end_of_sort_iRBumpDrop:
  5795                           	opt stack 0
  5796                           tblptru	equ	0xFF8
  5797                           tblptrh	equ	0xFF7
  5798                           tblptrl	equ	0xFF6
  5799                           tablat	equ	0xFF5
  5800                           prodh	equ	0xFF4
  5801                           prodl	equ	0xFF3
  5802                           postinc0	equ	0xFEE
  5803                           wreg	equ	0xFE8
  5804                           postdec1	equ	0xFE5
  5805                           fsr1h	equ	0xFE2
  5806                           fsr1l	equ	0xFE1
  5807                           indf2	equ	0xFDF
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function _get_packet_size *****************
  5813 ;; Defined at:
  5814 ;;		line 60 in file "Library/iRobotSerial.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  packetID        1    wreg     unsigned char 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  packetID        1    0[BANK0 ] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      unsigned char 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;Total ram usage:        1 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    7
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_irobot_query_and_update
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text15
  5843  0154C0                     __ptext15:
  5844                           	opt stack 0
  5845  0154C0                     _get_packet_size:
  5846                           	opt stack 20
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;incstack = 0
  5850                           ;get_packet_size@packetID stored from wreg
  5851  0154C0  0100               	movlb	0	; () banked
  5852  0154C2  6F60               	movwf	get_packet_size@packetID& (0+255),b
  5853                           
  5854                           ;iRobotSerial.c: 61: switch (packetID) {
  5855  0154C4  D012               	goto	l2017
  5856  0154C6  0E01               	movlw	1
  5857  0154C8  0012               	return	
  5858  0154CA  0E01               	movlw	1
  5859  0154CC  0012               	return	
  5860  0154CE  0E01               	movlw	1
  5861  0154D0  0012               	return	
  5862  0154D2  0E01               	movlw	1
  5863  0154D4  0012               	return	
  5864  0154D6  0E01               	movlw	1
  5865  0154D8  0012               	return	
  5866  0154DA  0E01               	movlw	1
  5867  0154DC  0012               	return	
  5868  0154DE  0E01               	movlw	1
  5869  0154E0  0012               	return	
  5870  0154E2  0E02               	movlw	2
  5871  0154E4  0012               	return	
  5872  0154E6  0E02               	movlw	2
  5873                           
  5874                           ;iRobotSerial.c: 71: }
  5875  0154E8  0012               	return	
  5876  0154EA                     l2017:
  5877  0154EA  0100               	movlb	0	; () banked
  5878  0154EC  5160               	movf	get_packet_size@packetID& (0+255),w,b
  5879                           
  5880                           ; Switch size 1, requested type "space"
  5881                           ; Number of cases is 9, Range of values is 7 to 20
  5882                           ; switch strategies available:
  5883                           ; Name         Instructions Cycles
  5884                           ; simple_byte           28    15 (average)
  5885                           ;	Chosen strategy is simple_byte
  5886  0154EE  0A07               	xorlw	7	; case 7
  5887  0154F0  B4D8               	btfsc	status,2,c
  5888  0154F2  D7E9               	goto	l2018
  5889  0154F4  0A0F               	xorlw	15	; case 8
  5890  0154F6  B4D8               	btfsc	status,2,c
  5891  0154F8  D7E8               	goto	l2020
  5892  0154FA  0A01               	xorlw	1	; case 9
  5893  0154FC  B4D8               	btfsc	status,2,c
  5894  0154FE  D7E7               	goto	l2021
  5895  015500  0A03               	xorlw	3	; case 10
  5896  015502  B4D8               	btfsc	status,2,c
  5897  015504  D7E6               	goto	l2022
  5898  015506  0A01               	xorlw	1	; case 11
  5899  015508  B4D8               	btfsc	status,2,c
  5900  01550A  D7E5               	goto	l2023
  5901  01550C  0A07               	xorlw	7	; case 12
  5902  01550E  B4D8               	btfsc	status,2,c
  5903  015510  D7E4               	goto	l2024
  5904  015512  0A01               	xorlw	1	; case 13
  5905  015514  B4D8               	btfsc	status,2,c
  5906  015516  D7E3               	goto	l2025
  5907  015518  0A1E               	xorlw	30	; case 19
  5908  01551A  B4D8               	btfsc	status,2,c
  5909  01551C  D7E2               	goto	l2026
  5910  01551E  0A07               	xorlw	7	; case 20
  5911  015520  A4D8               	btfss	status,2,c
  5912  015522  0012               	return	
  5913  015524  D7E0               	goto	l2027
  5914  015526                     __end_of_get_packet_size:
  5915                           	opt stack 0
  5916                           tblptru	equ	0xFF8
  5917                           tblptrh	equ	0xFF7
  5918                           tblptrl	equ	0xFF6
  5919                           tablat	equ	0xFF5
  5920                           prodh	equ	0xFF4
  5921                           prodl	equ	0xFF3
  5922                           postinc0	equ	0xFEE
  5923                           wreg	equ	0xFE8
  5924                           postdec1	equ	0xFE5
  5925                           fsr1h	equ	0xFE2
  5926                           fsr1l	equ	0xFE1
  5927                           indf2	equ	0xFDF
  5928                           fsr2h	equ	0xFDA
  5929                           fsr2l	equ	0xFD9
  5930                           status	equ	0xFD8
  5931                           
  5932 ;; *************** function _eusart_getch *****************
  5933 ;; Defined at:
  5934 ;;		line 125 in file "Library/iRobotSerial.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;		None
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      unsigned char 
  5941 ;; Registers used:
  5942 ;;		wreg, status,2
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;Total ram usage:        0 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:    7
  5955 ;; This function calls:
  5956 ;;		Nothing
  5957 ;; This function is called by:
  5958 ;;		_irobot_query_and_update
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text16
  5963  016524                     __ptext16:
  5964                           	opt stack 0
  5965  016524                     _eusart_getch:
  5966                           	opt stack 20
  5967                           
  5968                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  5969                           
  5970                           ;incstack = 0
  5971  016524  AA9E               	btfss	3998,5,c	;volatile
  5972  016526  D7FE               	goto	_eusart_getch
  5973                           
  5974                           ;iRobotSerial.c: 127: return RCREG1;
  5975  016528  50AF               	movf	4015,w,c	;volatile
  5976  01652A  0012               	return	
  5977  01652C                     __end_of_eusart_getch:
  5978                           	opt stack 0
  5979                           tblptru	equ	0xFF8
  5980                           tblptrh	equ	0xFF7
  5981                           tblptrl	equ	0xFF6
  5982                           tablat	equ	0xFF5
  5983                           prodh	equ	0xFF4
  5984                           prodl	equ	0xFF3
  5985                           postinc0	equ	0xFEE
  5986                           wreg	equ	0xFE8
  5987                           postdec1	equ	0xFE5
  5988                           fsr1h	equ	0xFE2
  5989                           fsr1l	equ	0xFE1
  5990                           indf2	equ	0xFDF
  5991                           fsr2h	equ	0xFDA
  5992                           fsr2l	equ	0xFD9
  5993                           status	equ	0xFD8
  5994                           
  5995 ;; *************** function _printf *****************
  5996 ;; Defined at:
  5997 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  6000 ;;		 -> STR_8(34), STR_7(3), STR_6(14), STR_5(3), 
  6001 ;;		 -> STR_4(46), STR_3(3), STR_2(46), STR_1(3), 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  tmpval          4    0        struct .
  6004 ;;  cp              3    0        PTR const unsigned char 
  6005 ;;  val             2   34[BANK0 ] unsigned int 
  6006 ;;  ap              2   32[BANK0 ] PTR void [1]
  6007 ;;		 -> ?_printf(2), 
  6008 ;;  len             2    0        unsigned int 
  6009 ;;  c               1   36[BANK0 ] char 
  6010 ;;  flag            1   31[BANK0 ] unsigned char 
  6011 ;;  prec            1   30[BANK0 ] char 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  2   21[BANK0 ] int 
  6014 ;; Registers used:
  6015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6021 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;Total ram usage:       16 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:   12
  6028 ;; This function calls:
  6029 ;;		___lwdiv
  6030 ;;		___lwmod
  6031 ;;		_putch
  6032 ;; This function is called by:
  6033 ;;		_mode1
  6034 ;;		_mode2
  6035 ;;		_mode4
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text17
  6040  0124FC                     __ptext17:
  6041                           	opt stack 0
  6042  0124FC                     _printf:
  6043                           	opt stack 17
  6044                           
  6045                           ;doprnt.c: 466: va_list ap;
  6046                           ;doprnt.c: 499: signed char c;
  6047                           ;doprnt.c: 506: signed char prec;
  6048                           ;doprnt.c: 508: unsigned char flag;
  6049                           ;doprnt.c: 523: union {
  6050                           ;doprnt.c: 524: unsigned long vd;
  6051                           ;doprnt.c: 525: double integ;
  6052                           ;doprnt.c: 526: } tmpval;
  6053                           ;doprnt.c: 528: unsigned int val;
  6054                           ;doprnt.c: 529: unsigned len;
  6055                           ;doprnt.c: 530: const char * cp;
  6056                           ;doprnt.c: 533: *ap = __va_start();
  6057                           
  6058                           ;incstack = 0
  6059  0124FC  0E77               	movlw	low (?_printf+2)
  6060  0124FE  0100               	movlb	0	; () banked
  6061  012500  6F80               	movwf	printf@ap& (0+255),b
  6062  012502  0E00               	movlw	high (?_printf+2)
  6063  012504  0100               	movlb	0	; () banked
  6064  012506  6F81               	movwf	(printf@ap+1)& (0+255),b
  6065                           
  6066                           ;doprnt.c: 536: while(c = *f++) {
  6067  012508  D0C9               	goto	u11110
  6068  01250A                     
  6069                           ; BSR set to: 0
  6070                           ;doprnt.c: 538: if(c != '%')
  6071                           
  6072                           ; BSR set to: 0
  6073  01250A  0E25               	movlw	37
  6074  01250C  0100               	movlb	0	; () banked
  6075  01250E  1984               	xorwf	printf@c& (0+255),w,b
  6076  012510  B4D8               	btfsc	status,2,c
  6077  012512  D005               	goto	l2407
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;doprnt.c: 540: {
  6081                           ;doprnt.c: 541: (putch(c) );
  6082  012514  0100               	movlb	0	; () banked
  6083  012516  5184               	movf	printf@c& (0+255),w,b
  6084  012518  EC41  F0B2         	call	_putch
  6085                           
  6086                           ;doprnt.c: 542: continue;
  6087  01251C  D0BF               	goto	u11110
  6088  01251E                     l2407:
  6089                           
  6090                           ;doprnt.c: 543: }
  6091                           ;doprnt.c: 548: flag = 0;
  6092  01251E  0E00               	movlw	0
  6093  012520  0100               	movlb	0	; () banked
  6094  012522  6F7F               	movwf	printf@flag& (0+255),b
  6095                           
  6096                           ;doprnt.c: 635: switch(c = *f++) {
  6097  012524  D014               	goto	l2408
  6098  012526                     
  6099                           ; BSR set to: 0
  6100                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6101                           
  6102                           ; BSR set to: 0
  6103  012526  C080  FFD9         	movff	printf@ap,fsr2l
  6104  01252A  C081  FFDA         	movff	printf@ap+1,fsr2h
  6105  01252E  50DF               	movf	indf2,w,c
  6106  012530  0100               	movlb	0	; () banked
  6107  012532  6F84               	movwf	printf@c& (0+255),b
  6108                           
  6109                           ; BSR set to: 0
  6110  012534  0E02               	movlw	2
  6111  012536  0100               	movlb	0	; () banked
  6112  012538  2780               	addwf	printf@ap& (0+255),f,b
  6113  01253A  0E00               	movlw	0
  6114  01253C  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6115  01253E                     
  6116                           ; BSR set to: 0
  6117                           ;doprnt.c: 809: (putch(c) );
  6118                           
  6119                           ; BSR set to: 0
  6120  01253E  0100               	movlb	0	; () banked
  6121  012540  5184               	movf	printf@c& (0+255),w,b
  6122  012542  EC41  F0B2         	call	_putch
  6123                           
  6124                           ;doprnt.c: 810: continue;
  6125  012546  D0AA               	goto	u11110
  6126  012548                     
  6127                           ;doprnt.c: 818: flag |= 0x40;
  6128  012548  0100               	movlb	0	; () banked
  6129  01254A  8D7F               	bsf	printf@flag& (0+255),6,b
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;doprnt.c: 822: }
  6133                           
  6134                           ;doprnt.c: 819: break;
  6135  01254C  D01E               	goto	l2413
  6136  01254E                     l2408:
  6137                           
  6138                           ; BSR set to: 0
  6139                           
  6140                           ; BSR set to: 0
  6141  01254E  C075  FFF6         	movff	printf@f,tblptrl
  6142  012552  C076  FFF7         	movff	printf@f+1,tblptrh
  6143  012556  0100               	movlb	0	; () banked
  6144  012558  4B75               	infsnz	printf@f& (0+255),f,b
  6145  01255A  2B76               	incf	(printf@f+1)& (0+255),f,b
  6146  01255C                     	if	0	;tblptru may be non-zero
  6147  01255C                     	endif
  6148  01255C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6149  01255C  0E00               	movlw	low (__mediumconst shr (0+16))
  6150  01255E  6EF8               	movwf	tblptru,c
  6151  012560                     	endif
  6152  012560  0008               	tblrd		*
  6153  012562  CFF5 F084          	movff	tablat,printf@c
  6154  012566  0100               	movlb	0	; () banked
  6155  012568  5184               	movf	printf@c& (0+255),w,b
  6156                           
  6157                           ; Switch size 1, requested type "space"
  6158                           ; Number of cases is 5, Range of values is 0 to 117
  6159                           ; switch strategies available:
  6160                           ; Name         Instructions Cycles
  6161                           ; simple_byte           16     9 (average)
  6162                           ;	Chosen strategy is simple_byte
  6163  01256A  0A00               	xorlw	0	; case 0
  6164  01256C  B4D8               	btfsc	status,2,c
  6165  01256E  0012               	return	
  6166  012570  0A63               	xorlw	99	; case 99
  6167  012572  B4D8               	btfsc	status,2,c
  6168  012574  D7D8               	goto	l2414
  6169  012576  0A07               	xorlw	7	; case 100
  6170  012578  B4D8               	btfsc	status,2,c
  6171  01257A  D007               	goto	l2413
  6172  01257C  0A0D               	xorlw	13	; case 105
  6173  01257E  B4D8               	btfsc	status,2,c
  6174  012580  D004               	goto	l2413
  6175  012582  0A1C               	xorlw	28	; case 117
  6176  012584  B4D8               	btfsc	status,2,c
  6177  012586  D7E0               	goto	l2416
  6178  012588  D7DA               	goto	l2415
  6179  01258A                     l2413:
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6183  01258A  0100               	movlb	0	; () banked
  6184  01258C  BD7F               	btfsc	printf@flag& (0+255),6,b
  6185  01258E  D019               	goto	l2417
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;doprnt.c: 1253: {
  6189                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6190  012590  C080  FFD9         	movff	printf@ap,fsr2l
  6191  012594  C081  FFDA         	movff	printf@ap+1,fsr2h
  6192  012598  CFDE F082          	movff	postinc2,printf@val
  6193  01259C  CFDD F083          	movff	postdec2,printf@val+1
  6194                           
  6195                           ; BSR set to: 0
  6196  0125A0  0E02               	movlw	2
  6197  0125A2  0100               	movlb	0	; () banked
  6198  0125A4  2780               	addwf	printf@ap& (0+255),f,b
  6199  0125A6  0E00               	movlw	0
  6200  0125A8  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;doprnt.c: 1261: if((int)val < 0) {
  6204  0125AA  0100               	movlb	0	; () banked
  6205  0125AC  AF83               	btfss	(printf@val+1)& (0+255),7,b
  6206  0125AE  D016               	goto	l2419
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;doprnt.c: 1262: flag |= 0x03;
  6210  0125B0  0E03               	movlw	3
  6211  0125B2  0100               	movlb	0	; () banked
  6212  0125B4  137F               	iorwf	printf@flag& (0+255),f,b
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;doprnt.c: 1263: val = -val;
  6216  0125B6  0100               	movlb	0	; () banked
  6217  0125B8  6D82               	negf	printf@val& (0+255),b
  6218  0125BA  1F83               	comf	(printf@val+1)& (0+255),f,b
  6219  0125BC  B0D8               	btfsc	status,0,c
  6220  0125BE  2B83               	incf	(printf@val+1)& (0+255),f,b
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;doprnt.c: 1264: }
  6224                           ;doprnt.c: 1266: }
  6225  0125C0  D00D               	goto	l2419
  6226  0125C2                     l2417:
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;doprnt.c: 1268: else
  6230                           ;doprnt.c: 1273: {
  6231                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6232                           
  6233                           ; BSR set to: 0
  6234  0125C2  C080  FFD9         	movff	printf@ap,fsr2l
  6235  0125C6  C081  FFDA         	movff	printf@ap+1,fsr2h
  6236  0125CA  CFDE F082          	movff	postinc2,printf@val
  6237  0125CE  CFDD F083          	movff	postdec2,printf@val+1
  6238                           
  6239                           ; BSR set to: 0
  6240  0125D2  0E02               	movlw	2
  6241  0125D4  0100               	movlb	0	; () banked
  6242  0125D6  2780               	addwf	printf@ap& (0+255),f,b
  6243  0125D8  0E00               	movlw	0
  6244  0125DA  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6245  0125DC                     l2419:
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;doprnt.c: 1287: }
  6249                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6250                           
  6251                           ; BSR set to: 0
  6252  0125DC  0E01               	movlw	1
  6253  0125DE  0100               	movlb	0	; () banked
  6254  0125E0  6F84               	movwf	printf@c& (0+255),b
  6255  0125E2                     l14374:
  6256                           
  6257                           ; BSR set to: 0
  6258  0125E2  0E05               	movlw	5
  6259  0125E4  0100               	movlb	0	; () banked
  6260  0125E6  1984               	xorwf	printf@c& (0+255),w,b
  6261  0125E8  B4D8               	btfsc	status,2,c
  6262  0125EA  D019               	goto	u11090
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;doprnt.c: 1306: if(val < dpowers[c])
  6266                           
  6267                           ; BSR set to: 0
  6268                           
  6269                           ; BSR set to: 0
  6270  0125EC  0100               	movlb	0	; () banked
  6271  0125EE  5184               	movf	printf@c& (0+255),w,b
  6272  0125F0  0D02               	mullw	2
  6273  0125F2  0E95               	movlw	low _dpowers
  6274  0125F4  24F3               	addwf	prodl,w,c
  6275  0125F6  6EF6               	movwf	tblptrl,c
  6276  0125F8  0EFD               	movlw	high _dpowers
  6277  0125FA  20F4               	addwfc	prodh,w,c
  6278  0125FC  6EF7               	movwf	tblptrh,c
  6279  0125FE                     	if	1	;There are 3 active tblptr bytes
  6280  0125FE  6AF8               	clrf	tblptru,c
  6281  012600  0E00               	movlw	low (__mediumconst shr (0+16))
  6282  012602  22F8               	addwfc	tblptru,f,c
  6283  012604                     	endif
  6284  012604  0009               	tblrd		*+
  6285  012606  50F5               	movf	tablat,w,c
  6286  012608  0100               	movlb	0	; () banked
  6287  01260A  5D82               	subwf	printf@val& (0+255),w,b
  6288  01260C  0009               	tblrd		*+
  6289  01260E  50F5               	movf	tablat,w,c
  6290  012610  0100               	movlb	0	; () banked
  6291  012612  5983               	subwfb	(printf@val+1)& (0+255),w,b
  6292  012614  A0D8               	btfss	status,0,c
  6293  012616  D003               	goto	u11090
  6294                           
  6295                           ; BSR set to: 0
  6296                           
  6297                           ; BSR set to: 0
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;doprnt.c: 1307: break;
  6301  012618  0100               	movlb	0	; () banked
  6302  01261A  2B84               	incf	printf@c& (0+255),f,b
  6303  01261C  D7E2               	goto	l14374
  6304  01261E                     u11090:
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;doprnt.c: 1422: {
  6308                           ;doprnt.c: 1438: if(flag & 0x03)
  6309                           
  6310                           ; BSR set to: 0
  6311  01261E  C07F  F07D         	movff	printf@flag,??_printf
  6312  012622  0E03               	movlw	3
  6313  012624  0100               	movlb	0	; () banked
  6314  012626  177D               	andwf	??_printf& (0+255),f,b
  6315  012628  B4D8               	btfsc	status,2,c
  6316  01262A  D003               	goto	l2423
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;doprnt.c: 1439: (putch('-') );
  6320  01262C  0E2D               	movlw	45
  6321  01262E  EC41  F0B2         	call	_putch
  6322  012632                     l2423:
  6323                           
  6324                           ;doprnt.c: 1469: }
  6325                           ;doprnt.c: 1472: prec = c;
  6326  012632  C084  F07E         	movff	printf@c,printf@prec
  6327                           
  6328                           ;doprnt.c: 1474: while(prec--) {
  6329  012636  D02C               	goto	l2424
  6330  012638                     
  6331                           ;doprnt.c: 1478: {
  6332                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6333  012638  0100               	movlb	0	; () banked
  6334  01263A  517E               	movf	printf@prec& (0+255),w,b
  6335  01263C  0D02               	mullw	2
  6336  01263E  0E95               	movlw	low _dpowers
  6337  012640  24F3               	addwf	prodl,w,c
  6338  012642  6EF6               	movwf	tblptrl,c
  6339  012644  0EFD               	movlw	high _dpowers
  6340  012646  20F4               	addwfc	prodh,w,c
  6341  012648  6EF7               	movwf	tblptrh,c
  6342  01264A                     	if	1	;There are 3 active tblptr bytes
  6343  01264A  6AF8               	clrf	tblptru,c
  6344  01264C  0E00               	movlw	low (__mediumconst shr (0+16))
  6345  01264E  22F8               	addwfc	tblptru,f,c
  6346  012650                     	endif
  6347  012650  0009               	tblrd		*+
  6348  012652  CFF5 F062          	movff	tablat,___lwdiv@divisor
  6349  012656  000A               	tblrd		*-
  6350  012658  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  6351  01265C  C082  F060         	movff	printf@val,___lwdiv@dividend
  6352  012660  C083  F061         	movff	printf@val+1,___lwdiv@dividend+1
  6353  012664  ECBE  F0A7         	call	___lwdiv	;wreg free
  6354  012668  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  6355  01266C  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  6356  012670  0E00               	movlw	0
  6357  012672  0100               	movlb	0	; () banked
  6358  012674  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6359  012676  0E0A               	movlw	10
  6360  012678  6F69               	movwf	___lwmod@divisor& (0+255),b
  6361  01267A  EC2A  F0AB         	call	___lwmod	;wreg free
  6362  01267E  0100               	movlb	0	; () banked
  6363  012680  5167               	movf	?___lwmod& (0+255),w,b
  6364  012682  0F30               	addlw	48
  6365  012684  0100               	movlb	0	; () banked
  6366  012686  6F84               	movwf	printf@c& (0+255),b
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;doprnt.c: 1523: }
  6370                           ;doprnt.c: 1524: (putch(c) );
  6371  012688  0100               	movlb	0	; () banked
  6372  01268A  5184               	movf	printf@c& (0+255),w,b
  6373  01268C  EC41  F0B2         	call	_putch
  6374  012690                     l2424:
  6375  012690  0100               	movlb	0	; () banked
  6376  012692  077E               	decf	printf@prec& (0+255),f,b
  6377  012694  0100               	movlb	0	; () banked
  6378  012696  297E               	incf	printf@prec& (0+255),w,b
  6379  012698  A4D8               	btfss	status,2,c
  6380  01269A  D7CE               	goto	l2425
  6381  01269C                     u11110:
  6382                           
  6383                           ; BSR set to: 0
  6384                           
  6385                           ; BSR set to: 0
  6386  01269C  C075  FFF6         	movff	printf@f,tblptrl
  6387  0126A0  C076  FFF7         	movff	printf@f+1,tblptrh
  6388  0126A4  0100               	movlb	0	; () banked
  6389  0126A6  4B75               	infsnz	printf@f& (0+255),f,b
  6390  0126A8  2B76               	incf	(printf@f+1)& (0+255),f,b
  6391  0126AA                     	if	0	;tblptru may be non-zero
  6392  0126AA                     	endif
  6393  0126AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6394  0126AA  0E00               	movlw	low (__mediumconst shr (0+16))
  6395  0126AC  6EF8               	movwf	tblptru,c
  6396  0126AE                     	endif
  6397  0126AE  0008               	tblrd		*
  6398  0126B0  CFF5 F084          	movff	tablat,printf@c
  6399  0126B4  0100               	movlb	0	; () banked
  6400  0126B6  5184               	movf	printf@c& (0+255),w,b
  6401  0126B8  B4D8               	btfsc	status,2,c
  6402  0126BA  0012               	return	
  6403  0126BC  D726               	goto	l2406
  6404  0126BE                     __end_of_printf:
  6405                           	opt stack 0
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           postinc0	equ	0xFEE
  6413                           wreg	equ	0xFE8
  6414                           postdec1	equ	0xFE5
  6415                           fsr1h	equ	0xFE2
  6416                           fsr1l	equ	0xFE1
  6417                           indf2	equ	0xFDF
  6418                           postinc2	equ	0xFDE
  6419                           postdec2	equ	0xFDD
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424 ;; *************** function _putch *****************
  6425 ;; Defined at:
  6426 ;;		line 454 in file "Library/Console.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  c               1    wreg     unsigned char 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  c               1   20[BANK0 ] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      void 
  6433 ;; Registers used:
  6434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;Total ram usage:        1 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:   11
  6447 ;; This function calls:
  6448 ;;		_Console_PrintChar
  6449 ;; This function is called by:
  6450 ;;		_printf
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text18
  6455  016482                     __ptext18:
  6456                           	opt stack 0
  6457  016482                     _putch:
  6458                           	opt stack 17
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;incstack = 0
  6462                           ;putch@c stored from wreg
  6463  016482  0100               	movlb	0	; () banked
  6464  016484  6F74               	movwf	putch@c& (0+255),b
  6465                           
  6466                           ;Console.c: 456: Console_PrintChar(c);
  6467  016486  0100               	movlb	0	; () banked
  6468  016488  5174               	movf	putch@c& (0+255),w,b
  6469  01648A  EC3F  F094         	call	_Console_PrintChar
  6470  01648E  0012               	return		;funcret
  6471  016490                     __end_of_putch:
  6472                           	opt stack 0
  6473                           tblptru	equ	0xFF8
  6474                           tblptrh	equ	0xFF7
  6475                           tblptrl	equ	0xFF6
  6476                           tablat	equ	0xFF5
  6477                           prodh	equ	0xFF4
  6478                           prodl	equ	0xFF3
  6479                           postinc0	equ	0xFEE
  6480                           wreg	equ	0xFE8
  6481                           postdec1	equ	0xFE5
  6482                           fsr1h	equ	0xFE2
  6483                           fsr1l	equ	0xFE1
  6484                           indf2	equ	0xFDF
  6485                           postinc2	equ	0xFDE
  6486                           postdec2	equ	0xFDD
  6487                           fsr2h	equ	0xFDA
  6488                           fsr2l	equ	0xFD9
  6489                           status	equ	0xFD8
  6490                           
  6491 ;; *************** function _Console_PrintChar *****************
  6492 ;; Defined at:
  6493 ;;		line 322 in file "Library/Console.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  pInput          1    wreg     unsigned char 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  pInput          1   19[BANK0 ] unsigned char 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  1    wreg      void 
  6500 ;; Registers used:
  6501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;Total ram usage:        4 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:   10
  6514 ;; This function calls:
  6515 ;;		_Console_Backspace
  6516 ;;		_Console_FormFeed
  6517 ;;		_Console_IncrementCursor
  6518 ;;		_Console_NewLine
  6519 ;;		_Console_ResetCursor
  6520 ;;		_Console_Tab
  6521 ;; This function is called by:
  6522 ;;		_putch
  6523 ;;		_Console_PrintString
  6524 ;; This function uses a non-reentrant model
  6525 ;;
  6526                           
  6527                           	psect	text19
  6528  01287E                     __ptext19:
  6529                           	opt stack 0
  6530  01287E                     _Console_PrintChar:
  6531                           	opt stack 17
  6532                           
  6533                           ;incstack = 0
  6534                           ;Console_PrintChar@pInput stored from wreg
  6535  01287E  0100               	movlb	0	; () banked
  6536  012880  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  6537                           
  6538                           ;Console.c: 324: switch(pInput)
  6539  012882  D0B1               	goto	l1036
  6540  012884                     
  6541                           ;Console.c: 327: case '\n':
  6542                           ;Console.c: 328: Console_NewLine();
  6543  012884  EC76  F0A4         	call	_Console_NewLine	;wreg free
  6544                           
  6545                           ;Console.c: 329: return;
  6546  012888  0012               	return	
  6547  01288A                     
  6548                           ;Console.c: 331: Console_Backspace();
  6549  01288A  EC8C  F0AB         	call	_Console_Backspace	;wreg free
  6550                           
  6551                           ;Console.c: 332: return;
  6552  01288E  0012               	return	
  6553  012890                     
  6554                           ;Console.c: 334: Console_FormFeed();
  6555  012890  ECA9  F0A5         	call	_Console_FormFeed	;wreg free
  6556                           
  6557                           ;Console.c: 335: return;
  6558  012894  0012               	return	
  6559  012896                     
  6560                           ;Console.c: 337: Console_Tab();
  6561  012896  EC4B  F09F         	call	_Console_Tab	;wreg free
  6562                           
  6563                           ;Console.c: 338: return;
  6564  01289A  0012               	return	
  6565  01289C                     
  6566                           ;Console.c: 340: Console_IncrementCursor();
  6567  01289C  EC93  F0AA         	call	_Console_IncrementCursor	;wreg free
  6568                           
  6569                           ;Console.c: 341: return;
  6570  0128A0  0012               	return	
  6571  0128A2                     
  6572                           ;Console.c: 343: Console_ResetCursor();
  6573  0128A2  EC03  F0B1         	call	_Console_ResetCursor	;wreg free
  6574                           
  6575                           ;Console.c: 344: return;
  6576  0128A6  0012               	return	
  6577  0128A8                     
  6578                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6579                           
  6580                           ;Console.c: 349: default:
  6581  0128A8  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6582  0128AC  0E7F               	movlw	127
  6583  0128AE  0100               	movlb	0	; () banked
  6584  0128B0  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6585  0128B2  0100               	movlb	0	; () banked
  6586  0128B4  51DD               	movf	_lBufferY& (0+255),w,b
  6587  0128B6  0D14               	mullw	20
  6588  0128B8  0EC8               	movlw	low _lBuffer
  6589  0128BA  0100               	movlb	0	; () banked
  6590  0128BC  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6591  0128BE  0E04               	movlw	high _lBuffer
  6592  0128C0  0100               	movlb	0	; () banked
  6593  0128C2  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6594  0128C4  50F3               	movf	prodl,w,c
  6595  0128C6  0100               	movlb	0	; () banked
  6596  0128C8  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6597  0128CA  50F4               	movf	prodh,w,c
  6598  0128CC  0100               	movlb	0	; () banked
  6599  0128CE  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6600  0128D0  0100               	movlb	0	; () banked
  6601  0128D2  51DE               	movf	_lBufferX& (0+255),w,b
  6602  0128D4  0D01               	mullw	1
  6603  0128D6  50F3               	movf	prodl,w,c
  6604  0128D8  0100               	movlb	0	; () banked
  6605  0128DA  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6606  0128DC  6ED9               	movwf	fsr2l,c
  6607  0128DE  50F4               	movf	prodh,w,c
  6608  0128E0  0100               	movlb	0	; () banked
  6609  0128E2  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6610  0128E4  6EDA               	movwf	fsr2h,c
  6611  0128E6  50DF               	movf	indf2,w,c
  6612  0128E8  0B7F               	andlw	127
  6613  0128EA  0100               	movlb	0	; () banked
  6614  0128EC  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6615  0128EE  B4D8               	btfsc	status,2,c
  6616  0128F0  D02E               	goto	l1047
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;Console.c: 351: {
  6620                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6621  0128F2  0E01               	movlw	1
  6622  0128F4  0100               	movlb	0	; () banked
  6623  0128F6  6FFF               	movwf	_change& (0+255),b
  6624                           
  6625                           ; BSR set to: 0
  6626  0128F8  0100               	movlb	0	; () banked
  6627  0128FA  51DD               	movf	_lBufferY& (0+255),w,b
  6628  0128FC  0D14               	mullw	20
  6629  0128FE  0EC8               	movlw	low _lBuffer
  6630  012900  0100               	movlb	0	; () banked
  6631  012902  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6632  012904  0E04               	movlw	high _lBuffer
  6633  012906  0100               	movlb	0	; () banked
  6634  012908  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6635  01290A  50F3               	movf	prodl,w,c
  6636  01290C  0100               	movlb	0	; () banked
  6637  01290E  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6638  012910  50F4               	movf	prodh,w,c
  6639  012912  0100               	movlb	0	; () banked
  6640  012914  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6641  012916  0100               	movlb	0	; () banked
  6642  012918  51DE               	movf	_lBufferX& (0+255),w,b
  6643  01291A  0D01               	mullw	1
  6644  01291C  50F3               	movf	prodl,w,c
  6645  01291E  0100               	movlb	0	; () banked
  6646  012920  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6647  012922  6ED9               	movwf	fsr2l,c
  6648  012924  50F4               	movf	prodh,w,c
  6649  012926  0100               	movlb	0	; () banked
  6650  012928  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6651  01292A  6EDA               	movwf	fsr2h,c
  6652  01292C  0100               	movlb	0	; () banked
  6653  01292E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6654  012930  0980               	iorlw	128
  6655  012932  6EDF               	movwf	indf2,c
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  6659  012934  0100               	movlb	0	; () banked
  6660  012936  51DD               	movf	_lBufferY& (0+255),w,b
  6661  012938  0D02               	mullw	2
  6662  01293A  0E00               	movlw	low _lCBuffer
  6663  01293C  24F3               	addwf	prodl,w,c
  6664  01293E  6ED9               	movwf	fsr2l,c
  6665  012940  0E04               	movlw	high _lCBuffer
  6666  012942  20F4               	addwfc	prodh,w,c
  6667  012944  6EDA               	movwf	fsr2h,c
  6668  012946  C0FD  FFDE         	movff	_gForecolour,postinc2
  6669  01294A  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  6670  01294E                     l1047:
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;Console.c: 354: }
  6674                           ;Console.c: 368: if(Console_IncrementCursor())
  6675                           
  6676                           ; BSR set to: 0
  6677  01294E  EC93  F0AA         	call	_Console_IncrementCursor	;wreg free
  6678  012952  0900               	iorlw	0
  6679  012954  B4D8               	btfsc	status,2,c
  6680  012956  0012               	return	
  6681                           
  6682                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6683  012958  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6684  01295C  0E7F               	movlw	127
  6685  01295E  0100               	movlb	0	; () banked
  6686  012960  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6687  012962  0100               	movlb	0	; () banked
  6688  012964  51DD               	movf	_lBufferY& (0+255),w,b
  6689  012966  0D14               	mullw	20
  6690  012968  0EC8               	movlw	low _lBuffer
  6691  01296A  0100               	movlb	0	; () banked
  6692  01296C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6693  01296E  0E04               	movlw	high _lBuffer
  6694  012970  0100               	movlb	0	; () banked
  6695  012972  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6696  012974  50F3               	movf	prodl,w,c
  6697  012976  0100               	movlb	0	; () banked
  6698  012978  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6699  01297A  50F4               	movf	prodh,w,c
  6700  01297C  0100               	movlb	0	; () banked
  6701  01297E  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6702  012980  0100               	movlb	0	; () banked
  6703  012982  51DE               	movf	_lBufferX& (0+255),w,b
  6704  012984  0D01               	mullw	1
  6705  012986  50F3               	movf	prodl,w,c
  6706  012988  0100               	movlb	0	; () banked
  6707  01298A  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6708  01298C  6ED9               	movwf	fsr2l,c
  6709  01298E  50F4               	movf	prodh,w,c
  6710  012990  0100               	movlb	0	; () banked
  6711  012992  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6712  012994  6EDA               	movwf	fsr2h,c
  6713  012996  50DF               	movf	indf2,w,c
  6714  012998  0B7F               	andlw	127
  6715  01299A  0100               	movlb	0	; () banked
  6716  01299C  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6717  01299E  B4D8               	btfsc	status,2,c
  6718  0129A0  0012               	return	
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6722  0129A2  0E01               	movlw	1
  6723  0129A4  0100               	movlb	0	; () banked
  6724  0129A6  6FFF               	movwf	_change& (0+255),b
  6725                           
  6726                           ; BSR set to: 0
  6727  0129A8  0100               	movlb	0	; () banked
  6728  0129AA  51DD               	movf	_lBufferY& (0+255),w,b
  6729  0129AC  0D14               	mullw	20
  6730  0129AE  0EC8               	movlw	low _lBuffer
  6731  0129B0  0100               	movlb	0	; () banked
  6732  0129B2  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6733  0129B4  0E04               	movlw	high _lBuffer
  6734  0129B6  0100               	movlb	0	; () banked
  6735  0129B8  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6736  0129BA  50F3               	movf	prodl,w,c
  6737  0129BC  0100               	movlb	0	; () banked
  6738  0129BE  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6739  0129C0  50F4               	movf	prodh,w,c
  6740  0129C2  0100               	movlb	0	; () banked
  6741  0129C4  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6742  0129C6  0100               	movlb	0	; () banked
  6743  0129C8  51DE               	movf	_lBufferX& (0+255),w,b
  6744  0129CA  0D01               	mullw	1
  6745  0129CC  50F3               	movf	prodl,w,c
  6746  0129CE  0100               	movlb	0	; () banked
  6747  0129D0  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6748  0129D2  6ED9               	movwf	fsr2l,c
  6749  0129D4  50F4               	movf	prodh,w,c
  6750  0129D6  0100               	movlb	0	; () banked
  6751  0129D8  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6752  0129DA  6EDA               	movwf	fsr2h,c
  6753  0129DC  0100               	movlb	0	; () banked
  6754  0129DE  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6755  0129E0  0980               	iorlw	128
  6756  0129E2  6EDF               	movwf	indf2,c
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;Console.c: 372: };
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;Console.c: 371: return;
  6763                           
  6764                           ; BSR set to: 0
  6765                           
  6766                           ; BSR set to: 0
  6767  0129E4  0012               	return	
  6768  0129E6                     l1036:
  6769                           
  6770                           ; BSR set to: 0
  6771  0129E6  0100               	movlb	0	; () banked
  6772  0129E8  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6773                           
  6774                           ; Switch size 1, requested type "space"
  6775                           ; Number of cases is 8, Range of values is 7 to 35
  6776                           ; switch strategies available:
  6777                           ; Name         Instructions Cycles
  6778                           ; simple_byte           25    13 (average)
  6779                           ;	Chosen strategy is simple_byte
  6780  0129EA  0A07               	xorlw	7	; case 7
  6781  0129EC  B4D8               	btfsc	status,2,c
  6782  0129EE  D756               	goto	l1043
  6783  0129F0  0A0F               	xorlw	15	; case 8
  6784  0129F2  B4D8               	btfsc	status,2,c
  6785  0129F4  D74A               	goto	l1040
  6786  0129F6  0A01               	xorlw	1	; case 9
  6787  0129F8  B4D8               	btfsc	status,2,c
  6788  0129FA  D74D               	goto	l1042
  6789  0129FC  0A03               	xorlw	3	; case 10
  6790  0129FE  B4D8               	btfsc	status,2,c
  6791  012A00  D741               	goto	l1037
  6792  012A02  0A06               	xorlw	6	; case 12
  6793  012A04  B4D8               	btfsc	status,2,c
  6794  012A06  D744               	goto	l1041
  6795  012A08  0A01               	xorlw	1	; case 13
  6796  012A0A  B4D8               	btfsc	status,2,c
  6797  012A0C  D73B               	goto	l1037
  6798  012A0E  0A2D               	xorlw	45	; case 32
  6799  012A10  B4D8               	btfsc	status,2,c
  6800  012A12  D74A               	goto	l1045
  6801  012A14  0A03               	xorlw	3	; case 35
  6802  012A16  B4D8               	btfsc	status,2,c
  6803  012A18  D744               	goto	l1044
  6804  012A1A  D746               	goto	l1045
  6805  012A1C                     __end_of_Console_PrintChar:
  6806                           	opt stack 0
  6807                           tblptru	equ	0xFF8
  6808                           tblptrh	equ	0xFF7
  6809                           tblptrl	equ	0xFF6
  6810                           tablat	equ	0xFF5
  6811                           prodh	equ	0xFF4
  6812                           prodl	equ	0xFF3
  6813                           postinc0	equ	0xFEE
  6814                           wreg	equ	0xFE8
  6815                           postdec1	equ	0xFE5
  6816                           fsr1h	equ	0xFE2
  6817                           fsr1l	equ	0xFE1
  6818                           indf2	equ	0xFDF
  6819                           postinc2	equ	0xFDE
  6820                           postdec2	equ	0xFDD
  6821                           fsr2h	equ	0xFDA
  6822                           fsr2l	equ	0xFD9
  6823                           status	equ	0xFD8
  6824                           
  6825 ;; *************** function _Console_Tab *****************
  6826 ;; Defined at:
  6827 ;;		line 260 in file "Library/Console.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  c               1   15[BANK0 ] unsigned char 
  6832 ;;  i               1   14[BANK0 ] unsigned char 
  6833 ;;  t               1   13[BANK0 ] unsigned char 
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      void 
  6836 ;; Registers used:
  6837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;Total ram usage:        8 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    9
  6850 ;; This function calls:
  6851 ;;		_Console_ClearCursor
  6852 ;;		_Console_IncrementCursor
  6853 ;;		___awdiv
  6854 ;; This function is called by:
  6855 ;;		_Console_PrintChar
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           	psect	text20
  6860  013E96                     __ptext20:
  6861                           	opt stack 0
  6862  013E96                     _Console_Tab:
  6863                           	opt stack 17
  6864                           
  6865                           ;Console.c: 262: UINT8 i = 0;
  6866                           
  6867                           ;incstack = 0
  6868  013E96  0E00               	movlw	0
  6869  013E98  0100               	movlb	0	; () banked
  6870  013E9A  6F6E               	movwf	Console_Tab@i& (0+255),b
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  6874  013E9C  0EFA               	movlw	250
  6875  013E9E  2447               	addwf	_gCursor,w,c
  6876  013EA0  0100               	movlb	0	; () banked
  6877  013EA2  6F60               	movwf	___awdiv@dividend& (0+255),b
  6878  013EA4  0EFF               	movlw	255
  6879  013EA6  2048               	addwfc	_gCursor+1,w,c
  6880  013EA8  0100               	movlb	0	; () banked
  6881  013EAA  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  6882  013EAC  0E00               	movlw	0
  6883  013EAE  0100               	movlb	0	; () banked
  6884  013EB0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6885  013EB2  0E06               	movlw	6
  6886  013EB4  6F62               	movwf	___awdiv@divisor& (0+255),b
  6887  013EB6  ECAC  F09F         	call	___awdiv	;wreg free
  6888  013EBA  0100               	movlb	0	; () banked
  6889  013EBC  5160               	movf	?___awdiv& (0+255),w,b
  6890  013EBE  0100               	movlb	0	; () banked
  6891  013EC0  6F6F               	movwf	Console_Tab@c& (0+255),b
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;Console.c: 264: UINT8 t = c/4;
  6895  013EC2  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  6896  013EC6  0100               	movlb	0	; () banked
  6897  013EC8  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  6898  013ECA  0E00               	movlw	0
  6899  013ECC  0100               	movlb	0	; () banked
  6900  013ECE  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6901  013ED0  0E04               	movlw	4
  6902  013ED2  6F62               	movwf	___awdiv@divisor& (0+255),b
  6903  013ED4  ECAC  F09F         	call	___awdiv	;wreg free
  6904  013ED8  0100               	movlb	0	; () banked
  6905  013EDA  5160               	movf	?___awdiv& (0+255),w,b
  6906  013EDC  0100               	movlb	0	; () banked
  6907  013EDE  6F6D               	movwf	Console_Tab@t& (0+255),b
  6908                           
  6909                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  6910  013EE0  0E00               	movlw	0
  6911  013EE2  0100               	movlb	0	; () banked
  6912  013EE4  6F6E               	movwf	Console_Tab@i& (0+255),b
  6913  013EE6  D006               	goto	l1009
  6914  013EE8                     
  6915                           ; BSR set to: 0
  6916                           ;Console.c: 266: {
  6917                           ;Console.c: 267: Console_ClearCursor();
  6918                           
  6919                           ; BSR set to: 0
  6920  013EE8  EC67  F0AE         	call	_Console_ClearCursor	;wreg free
  6921                           
  6922                           ;Console.c: 268: Console_IncrementCursor();
  6923  013EEC  EC93  F0AA         	call	_Console_IncrementCursor	;wreg free
  6924  013EF0  0100               	movlb	0	; () banked
  6925  013EF2  2B6E               	incf	Console_Tab@i& (0+255),f,b
  6926  013EF4                     l1009:
  6927                           
  6928                           ; BSR set to: 0
  6929                           
  6930                           ; BSR set to: 0
  6931  013EF4  0100               	movlb	0	; () banked
  6932  013EF6  516D               	movf	Console_Tab@t& (0+255),w,b
  6933  013EF8  0D04               	mullw	4
  6934  013EFA  1EF3               	comf	prodl,f,c
  6935  013EFC  1EF4               	comf	prodh,f,c
  6936  013EFE  4AF3               	infsnz	prodl,f,c
  6937  013F00  2AF4               	incf	prodh,f,c
  6938  013F02  0100               	movlb	0	; () banked
  6939  013F04  516F               	movf	Console_Tab@c& (0+255),w,b
  6940  013F06  0100               	movlb	0	; () banked
  6941  013F08  6F68               	movwf	??_Console_Tab& (0+255),b
  6942  013F0A  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  6943  013F0C  50F3               	movf	prodl,w,c
  6944  013F0E  0100               	movlb	0	; () banked
  6945  013F10  2768               	addwf	??_Console_Tab& (0+255),f,b
  6946  013F12  50F4               	movf	prodh,w,c
  6947  013F14  0100               	movlb	0	; () banked
  6948  013F16  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6949  013F18  0100               	movlb	0	; () banked
  6950  013F1A  1F68               	comf	??_Console_Tab& (0+255),f,b
  6951  013F1C  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  6952  013F1E  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  6953  013F20  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  6954  013F22  0E04               	movlw	4
  6955  013F24  0100               	movlb	0	; () banked
  6956  013F26  2768               	addwf	??_Console_Tab& (0+255),f,b
  6957  013F28  0E00               	movlw	0
  6958  013F2A  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6959  013F2C  0100               	movlb	0	; () banked
  6960  013F2E  516E               	movf	Console_Tab@i& (0+255),w,b
  6961  013F30  0100               	movlb	0	; () banked
  6962  013F32  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  6963  013F34  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  6964  013F36  0100               	movlb	0	; () banked
  6965  013F38  5168               	movf	??_Console_Tab& (0+255),w,b
  6966  013F3A  0100               	movlb	0	; () banked
  6967  013F3C  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  6968  013F3E  0100               	movlb	0	; () banked
  6969  013F40  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  6970  013F42  0A80               	xorlw	128
  6971  013F44  0100               	movlb	0	; () banked
  6972  013F46  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  6973  013F48  0100               	movlb	0	; () banked
  6974  013F4A  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  6975  013F4C  0A80               	xorlw	128
  6976  013F4E  0100               	movlb	0	; () banked
  6977  013F50  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  6978  013F52  B0D8               	btfsc	status,0,c
  6979  013F54  0012               	return	
  6980  013F56  D7C8               	goto	l1010
  6981  013F58                     __end_of_Console_Tab:
  6982                           	opt stack 0
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodh	equ	0xFF4
  6988                           prodl	equ	0xFF3
  6989                           postinc0	equ	0xFEE
  6990                           wreg	equ	0xFE8
  6991                           postdec1	equ	0xFE5
  6992                           fsr1h	equ	0xFE2
  6993                           fsr1l	equ	0xFE1
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           postdec2	equ	0xFDD
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8
  7000                           
  7001 ;; *************** function ___awdiv *****************
  7002 ;; Defined at:
  7003 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;  dividend        2    0[BANK0 ] int 
  7006 ;;  divisor         2    2[BANK0 ] int 
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;  quotient        2    6[BANK0 ] int 
  7009 ;;  sign            1    5[BANK0 ] unsigned char 
  7010 ;;  counter         1    4[BANK0 ] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  2    0[BANK0 ] int 
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7020 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;Total ram usage:        8 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    7
  7027 ;; This function calls:
  7028 ;;		Nothing
  7029 ;; This function is called by:
  7030 ;;		_Console_Tab
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text21
  7035  013F58                     __ptext21:
  7036                           	opt stack 0
  7037  013F58                     ___awdiv:
  7038                           	opt stack 18
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;incstack = 0
  7042  013F58  0E00               	movlw	0
  7043  013F5A  0100               	movlb	0	; () banked
  7044  013F5C  6F65               	movwf	___awdiv@sign& (0+255),b
  7045                           
  7046                           ; BSR set to: 0
  7047  013F5E  0100               	movlb	0	; () banked
  7048  013F60  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7049  013F62  D008               	goto	l2596
  7050                           
  7051                           ; BSR set to: 0
  7052  013F64  0100               	movlb	0	; () banked
  7053  013F66  6D62               	negf	___awdiv@divisor& (0+255),b
  7054  013F68  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7055  013F6A  B0D8               	btfsc	status,0,c
  7056  013F6C  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7057                           
  7058                           ; BSR set to: 0
  7059  013F6E  0E01               	movlw	1
  7060  013F70  0100               	movlb	0	; () banked
  7061  013F72  6F65               	movwf	___awdiv@sign& (0+255),b
  7062  013F74                     l2596:
  7063                           
  7064                           ; BSR set to: 0
  7065                           
  7066                           ; BSR set to: 0
  7067  013F74  0100               	movlb	0	; () banked
  7068  013F76  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7069  013F78  D008               	goto	l2597
  7070                           
  7071                           ; BSR set to: 0
  7072  013F7A  0100               	movlb	0	; () banked
  7073  013F7C  6D60               	negf	___awdiv@dividend& (0+255),b
  7074  013F7E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7075  013F80  B0D8               	btfsc	status,0,c
  7076  013F82  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7077                           
  7078                           ; BSR set to: 0
  7079  013F84  0E01               	movlw	1
  7080  013F86  0100               	movlb	0	; () banked
  7081  013F88  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  7082  013F8A                     l2597:
  7083                           
  7084                           ; BSR set to: 0
  7085                           
  7086                           ; BSR set to: 0
  7087  013F8A  0E00               	movlw	0
  7088  013F8C  0100               	movlb	0	; () banked
  7089  013F8E  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  7090  013F90  0E00               	movlw	0
  7091  013F92  6F66               	movwf	___awdiv@quotient& (0+255),b
  7092                           
  7093                           ; BSR set to: 0
  7094  013F94  0100               	movlb	0	; () banked
  7095  013F96  5162               	movf	___awdiv@divisor& (0+255),w,b
  7096  013F98  0100               	movlb	0	; () banked
  7097  013F9A  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7098  013F9C  B4D8               	btfsc	status,2,c
  7099  013F9E  D02C               	goto	l2604
  7100                           
  7101                           ; BSR set to: 0
  7102  013FA0  0E01               	movlw	1
  7103  013FA2  0100               	movlb	0	; () banked
  7104  013FA4  6F64               	movwf	___awdiv@counter& (0+255),b
  7105  013FA6  D006               	goto	l2599
  7106  013FA8                     
  7107                           ; BSR set to: 0
  7108                           
  7109                           ; BSR set to: 0
  7110  013FA8  0100               	movlb	0	; () banked
  7111  013FAA  90D8               	bcf	status,0,c
  7112  013FAC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  7113  013FAE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7114  013FB0  0100               	movlb	0	; () banked
  7115  013FB2  2B64               	incf	___awdiv@counter& (0+255),f,b
  7116  013FB4                     l2599:
  7117                           
  7118                           ; BSR set to: 0
  7119                           
  7120                           ; BSR set to: 0
  7121  013FB4  0100               	movlb	0	; () banked
  7122  013FB6  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7123  013FB8  D7F7               	goto	l2600
  7124  013FBA                     u9040:
  7125                           
  7126                           ; BSR set to: 0
  7127                           
  7128                           ; BSR set to: 0
  7129                           
  7130                           ; BSR set to: 0
  7131  013FBA  0100               	movlb	0	; () banked
  7132  013FBC  90D8               	bcf	status,0,c
  7133  013FBE  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  7134  013FC0  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7135                           
  7136                           ; BSR set to: 0
  7137  013FC2  0100               	movlb	0	; () banked
  7138  013FC4  5162               	movf	___awdiv@divisor& (0+255),w,b
  7139  013FC6  0100               	movlb	0	; () banked
  7140  013FC8  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  7141  013FCA  0100               	movlb	0	; () banked
  7142  013FCC  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7143  013FCE  0100               	movlb	0	; () banked
  7144  013FD0  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7145  013FD2  A0D8               	btfss	status,0,c
  7146  013FD4  D00A               	goto	l2603
  7147                           
  7148                           ; BSR set to: 0
  7149  013FD6  0100               	movlb	0	; () banked
  7150  013FD8  5162               	movf	___awdiv@divisor& (0+255),w,b
  7151  013FDA  0100               	movlb	0	; () banked
  7152  013FDC  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  7153  013FDE  0100               	movlb	0	; () banked
  7154  013FE0  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7155  013FE2  0100               	movlb	0	; () banked
  7156  013FE4  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7157                           
  7158                           ; BSR set to: 0
  7159  013FE6  0100               	movlb	0	; () banked
  7160  013FE8  8166               	bsf	___awdiv@quotient& (0+255),0,b
  7161  013FEA                     l2603:
  7162                           
  7163                           ; BSR set to: 0
  7164                           
  7165                           ; BSR set to: 0
  7166  013FEA  0100               	movlb	0	; () banked
  7167  013FEC  90D8               	bcf	status,0,c
  7168  013FEE  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7169  013FF0  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  7170                           
  7171                           ; BSR set to: 0
  7172  013FF2  0100               	movlb	0	; () banked
  7173  013FF4  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  7174  013FF6  D7E1               	goto	u9040
  7175  013FF8                     l2604:
  7176                           
  7177                           ; BSR set to: 0
  7178                           
  7179                           ; BSR set to: 0
  7180                           
  7181                           ; BSR set to: 0
  7182  013FF8  0100               	movlb	0	; () banked
  7183  013FFA  5165               	movf	___awdiv@sign& (0+255),w,b
  7184  013FFC  0100               	movlb	0	; () banked
  7185  013FFE  B4D8               	btfsc	status,2,c
  7186  014000  D005               	goto	l2605
  7187                           
  7188                           ; BSR set to: 0
  7189  014002  0100               	movlb	0	; () banked
  7190  014004  6D66               	negf	___awdiv@quotient& (0+255),b
  7191  014006  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7192  014008  B0D8               	btfsc	status,0,c
  7193  01400A  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7194  01400C                     l2605:
  7195                           
  7196                           ; BSR set to: 0
  7197                           
  7198                           ; BSR set to: 0
  7199  01400C  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7200  014010  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7201  014014  0012               	return	
  7202  014016                     __end_of___awdiv:
  7203                           	opt stack 0
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           postinc0	equ	0xFEE
  7211                           wreg	equ	0xFE8
  7212                           postdec1	equ	0xFE5
  7213                           fsr1h	equ	0xFE2
  7214                           fsr1l	equ	0xFE1
  7215                           indf2	equ	0xFDF
  7216                           postinc2	equ	0xFDE
  7217                           postdec2	equ	0xFDD
  7218                           fsr2h	equ	0xFDA
  7219                           fsr2l	equ	0xFD9
  7220                           status	equ	0xFD8
  7221                           
  7222 ;; *************** function _Console_IncrementCursor *****************
  7223 ;; Defined at:
  7224 ;;		line 243 in file "Library/Console.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;		None
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;		None
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  1    wreg      unsigned char 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7242 ;;Total ram usage:        2 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    8
  7245 ;; This function calls:
  7246 ;;		_Console_FormFeed
  7247 ;;		_Console_NewLine
  7248 ;; This function is called by:
  7249 ;;		_Console_Tab
  7250 ;;		_Console_PrintChar
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           	psect	text22
  7255  015526                     __ptext22:
  7256                           	opt stack 0
  7257  015526                     _Console_IncrementCursor:
  7258                           	opt stack 17
  7259                           
  7260                           ;Console.c: 246: lBufferX += 1;
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;incstack = 0
  7264  015526  0100               	movlb	0	; () banked
  7265  015528  2BDE               	incf	_lBufferX& (0+255),f,b
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;Console.c: 248: gCursor.x += 6;
  7269  01552A  0E06               	movlw	6
  7270  01552C  2647               	addwf	_gCursor,f,c
  7271  01552E  0E00               	movlw	0
  7272  015530  2248               	addwfc	_gCursor+1,f,c
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  7276  015532  0E06               	movlw	6
  7277  015534  2447               	addwf	_gCursor,w,c
  7278  015536  0100               	movlb	0	; () banked
  7279  015538  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7280  01553A  0E00               	movlw	0
  7281  01553C  2048               	addwfc	_gCursor+1,w,c
  7282  01553E  0100               	movlb	0	; () banked
  7283  015540  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7284  015542  0100               	movlb	0	; () banked
  7285  015544  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7286  015546  D009               	goto	l1004
  7287  015548  0100               	movlb	0	; () banked
  7288  01554A  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7289  01554C  E104               	bnz	u8950
  7290  01554E  0E80               	movlw	128
  7291  015550  0100               	movlb	0	; () banked
  7292  015552  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7293  015554  B0D8               	btfsc	status,0,c
  7294  015556                     u8950:
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;Console.c: 250: Console_NewLine();
  7298  015556  EC76  F0A4         	call	_Console_NewLine	;wreg free
  7299  01555A                     l1004:
  7300                           
  7301                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  7302  01555A  0E08               	movlw	8
  7303  01555C  2449               	addwf	_gCursor+2,w,c
  7304  01555E  0100               	movlb	0	; () banked
  7305  015560  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7306  015562  0E00               	movlw	0
  7307  015564  204A               	addwfc	_gCursor+3,w,c
  7308  015566  0100               	movlb	0	; () banked
  7309  015568  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7310  01556A  0100               	movlb	0	; () banked
  7311  01556C  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7312  01556E  D00C               	goto	l1005
  7313  015570  0100               	movlb	0	; () banked
  7314  015572  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7315  015574  E105               	bnz	u8960
  7316  015576  0E80               	movlw	128
  7317  015578  0100               	movlb	0	; () banked
  7318  01557A  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7319  01557C  A0D8               	btfss	status,0,c
  7320  01557E  D004               	goto	l1005
  7321  015580                     u8960:
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;Console.c: 252: {
  7325                           ;Console.c: 253: Console_FormFeed();
  7326  015580  ECA9  F0A5         	call	_Console_FormFeed	;wreg free
  7327                           
  7328                           ;Console.c: 254: return 1;
  7329  015584  0E01               	movlw	1
  7330  015586  0012               	return	
  7331  015588                     l1005:
  7332                           
  7333                           ;Console.c: 255: }
  7334                           ;Console.c: 257: return 0;
  7335  015588  0E00               	movlw	0
  7336  01558A  0012               	return	
  7337  01558C                     __end_of_Console_IncrementCursor:
  7338                           	opt stack 0
  7339                           tblptru	equ	0xFF8
  7340                           tblptrh	equ	0xFF7
  7341                           tblptrl	equ	0xFF6
  7342                           tablat	equ	0xFF5
  7343                           prodh	equ	0xFF4
  7344                           prodl	equ	0xFF3
  7345                           postinc0	equ	0xFEE
  7346                           wreg	equ	0xFE8
  7347                           postdec1	equ	0xFE5
  7348                           fsr1h	equ	0xFE2
  7349                           fsr1l	equ	0xFE1
  7350                           indf2	equ	0xFDF
  7351                           postinc2	equ	0xFDE
  7352                           postdec2	equ	0xFDD
  7353                           fsr2h	equ	0xFDA
  7354                           fsr2l	equ	0xFD9
  7355                           status	equ	0xFD8
  7356                           
  7357 ;; *************** function _Console_NewLine *****************
  7358 ;; Defined at:
  7359 ;;		line 175 in file "Library/Console.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;		None
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;		None
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      void 
  7366 ;; Registers used:
  7367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;Total ram usage:        2 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    7
  7380 ;; This function calls:
  7381 ;;		Nothing
  7382 ;; This function is called by:
  7383 ;;		_Console_IncrementCursor
  7384 ;;		_Console_PrintChar
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           	psect	text23
  7389  0148EC                     __ptext23:
  7390                           	opt stack 0
  7391  0148EC                     _Console_NewLine:
  7392                           	opt stack 17
  7393                           
  7394                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  7395                           
  7396                           ;incstack = 0
  7397  0148EC  D03E               	goto	l983
  7398  0148EE                     
  7399                           ;Console.c: 179: {
  7400                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  7401  0148EE  0100               	movlb	0	; () banked
  7402  0148F0  51DD               	movf	_lBufferY& (0+255),w,b
  7403  0148F2  0D14               	mullw	20
  7404  0148F4  0EC8               	movlw	low _lBuffer
  7405  0148F6  0100               	movlb	0	; () banked
  7406  0148F8  6F60               	movwf	??_Console_NewLine& (0+255),b
  7407  0148FA  0E04               	movlw	high _lBuffer
  7408  0148FC  0100               	movlb	0	; () banked
  7409  0148FE  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7410  014900  50F3               	movf	prodl,w,c
  7411  014902  0100               	movlb	0	; () banked
  7412  014904  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7413  014906  50F4               	movf	prodh,w,c
  7414  014908  0100               	movlb	0	; () banked
  7415  01490A  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7416  01490C  0100               	movlb	0	; () banked
  7417  01490E  51DE               	movf	_lBufferX& (0+255),w,b
  7418  014910  0D01               	mullw	1
  7419  014912  50F3               	movf	prodl,w,c
  7420  014914  0100               	movlb	0	; () banked
  7421  014916  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7422  014918  6ED9               	movwf	fsr2l,c
  7423  01491A  50F4               	movf	prodh,w,c
  7424  01491C  0100               	movlb	0	; () banked
  7425  01491E  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7426  014920  6EDA               	movwf	fsr2h,c
  7427  014922  50DF               	movf	indf2,w,c
  7428  014924  B4D8               	btfsc	status,2,c
  7429  014926  D01F               	goto	l985
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  7433  014928  0E01               	movlw	1
  7434  01492A  0100               	movlb	0	; () banked
  7435  01492C  6FFF               	movwf	_change& (0+255),b
  7436                           
  7437                           ; BSR set to: 0
  7438  01492E  0100               	movlb	0	; () banked
  7439  014930  51DD               	movf	_lBufferY& (0+255),w,b
  7440  014932  0D14               	mullw	20
  7441  014934  0EC8               	movlw	low _lBuffer
  7442  014936  0100               	movlb	0	; () banked
  7443  014938  6F60               	movwf	??_Console_NewLine& (0+255),b
  7444  01493A  0E04               	movlw	high _lBuffer
  7445  01493C  0100               	movlb	0	; () banked
  7446  01493E  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7447  014940  50F3               	movf	prodl,w,c
  7448  014942  0100               	movlb	0	; () banked
  7449  014944  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7450  014946  50F4               	movf	prodh,w,c
  7451  014948  0100               	movlb	0	; () banked
  7452  01494A  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7453  01494C  0100               	movlb	0	; () banked
  7454  01494E  51DE               	movf	_lBufferX& (0+255),w,b
  7455  014950  0D01               	mullw	1
  7456  014952  50F3               	movf	prodl,w,c
  7457  014954  0100               	movlb	0	; () banked
  7458  014956  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7459  014958  6ED9               	movwf	fsr2l,c
  7460  01495A  50F4               	movf	prodh,w,c
  7461  01495C  0100               	movlb	0	; () banked
  7462  01495E  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7463  014960  6EDA               	movwf	fsr2h,c
  7464  014962  0E80               	movlw	128
  7465  014964  6EDF               	movwf	indf2,c
  7466  014966                     l985:
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;Console.c: 182: lBufferX ++;
  7470                           
  7471                           ; BSR set to: 0
  7472  014966  0100               	movlb	0	; () banked
  7473  014968  2BDE               	incf	_lBufferX& (0+255),f,b
  7474  01496A                     l983:
  7475                           
  7476                           ; BSR set to: 0
  7477  01496A  0E13               	movlw	19
  7478  01496C  0100               	movlb	0	; () banked
  7479  01496E  65DE               	cpfsgt	_lBufferX& (0+255),b
  7480  014970  D7BE               	goto	l984
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;Console.c: 183: }
  7484                           ;Console.c: 185: lBufferX = 0;
  7485                           
  7486                           ; BSR set to: 0
  7487  014972  0E00               	movlw	0
  7488  014974  0100               	movlb	0	; () banked
  7489  014976  6FDE               	movwf	_lBufferX& (0+255),b
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;Console.c: 186: lBufferY ++;
  7493  014978  0100               	movlb	0	; () banked
  7494  01497A  2BDD               	incf	_lBufferY& (0+255),f,b
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;Console.c: 188: gCursor.y += 8;
  7498  01497C  0E08               	movlw	8
  7499  01497E  2649               	addwf	_gCursor+2,f,c
  7500  014980  0E00               	movlw	0
  7501  014982  224A               	addwfc	_gCursor+3,f,c
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;Console.c: 189: gCursor.x = 6;
  7505  014984  0E00               	movlw	0
  7506  014986  6E48               	movwf	_gCursor+1,c
  7507  014988  0E06               	movlw	6
  7508  01498A  6E47               	movwf	_gCursor,c
  7509                           
  7510                           ; BSR set to: 0
  7511  01498C  0012               	return		;funcret
  7512  01498E                     __end_of_Console_NewLine:
  7513                           	opt stack 0
  7514                           tblptru	equ	0xFF8
  7515                           tblptrh	equ	0xFF7
  7516                           tblptrl	equ	0xFF6
  7517                           tablat	equ	0xFF5
  7518                           prodh	equ	0xFF4
  7519                           prodl	equ	0xFF3
  7520                           postinc0	equ	0xFEE
  7521                           wreg	equ	0xFE8
  7522                           postdec1	equ	0xFE5
  7523                           fsr1h	equ	0xFE2
  7524                           fsr1l	equ	0xFE1
  7525                           indf2	equ	0xFDF
  7526                           postinc2	equ	0xFDE
  7527                           postdec2	equ	0xFDD
  7528                           fsr2h	equ	0xFDA
  7529                           fsr2l	equ	0xFD9
  7530                           status	equ	0xFD8
  7531                           
  7532 ;; *************** function _Console_FormFeed *****************
  7533 ;; Defined at:
  7534 ;;		line 192 in file "Library/Console.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;		None
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;  y               1    3[BANK0 ] unsigned char 
  7539 ;;  x               1    2[BANK0 ] unsigned char 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      void 
  7542 ;; Registers used:
  7543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;Total ram usage:        4 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    7
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_Console_IncrementCursor
  7560 ;;		_Console_PrintChar
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text24
  7565  014B52                     __ptext24:
  7566                           	opt stack 0
  7567  014B52                     _Console_FormFeed:
  7568                           	opt stack 17
  7569                           
  7570                           ;Console.c: 195: lBufferX = 0;
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;incstack = 0
  7574  014B52  0E00               	movlw	0
  7575  014B54  0100               	movlb	0	; () banked
  7576  014B56  6FDE               	movwf	_lBufferX& (0+255),b
  7577                           
  7578                           ;Console.c: 196: lBufferY = 0;
  7579  014B58  0E00               	movlw	0
  7580  014B5A  0100               	movlb	0	; () banked
  7581  014B5C  6FDD               	movwf	_lBufferY& (0+255),b
  7582                           
  7583                           ;Console.c: 197: UINT8 x, y;
  7584                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  7585  014B5E  0E00               	movlw	0
  7586  014B60  0100               	movlb	0	; () banked
  7587  014B62  6F63               	movwf	Console_FormFeed@y& (0+255),b
  7588  014B64                     l12122:
  7589                           
  7590                           ; BSR set to: 0
  7591  014B64  0E0E               	movlw	14
  7592  014B66  0100               	movlb	0	; () banked
  7593  014B68  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  7594  014B6A  D001               	goto	l990
  7595  014B6C  D02D               	goto	u8800
  7596  014B6E                     l990:
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  7600                           
  7601                           ; BSR set to: 0
  7602  014B6E  0E00               	movlw	0
  7603  014B70  0100               	movlb	0	; () banked
  7604  014B72  6F62               	movwf	Console_FormFeed@x& (0+255),b
  7605  014B74                     l12128:
  7606                           
  7607                           ; BSR set to: 0
  7608  014B74  0E13               	movlw	19
  7609  014B76  0100               	movlb	0	; () banked
  7610  014B78  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  7611  014B7A  D001               	goto	l992
  7612  014B7C  D022               	goto	u8790
  7613  014B7E                     l992:
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  7617                           
  7618                           ; BSR set to: 0
  7619  014B7E  0E01               	movlw	1
  7620  014B80  0100               	movlb	0	; () banked
  7621  014B82  6FFF               	movwf	_change& (0+255),b
  7622                           
  7623                           ; BSR set to: 0
  7624  014B84  0100               	movlb	0	; () banked
  7625  014B86  5163               	movf	Console_FormFeed@y& (0+255),w,b
  7626  014B88  0D14               	mullw	20
  7627  014B8A  0EC8               	movlw	low _lBuffer
  7628  014B8C  0100               	movlb	0	; () banked
  7629  014B8E  6F60               	movwf	??_Console_FormFeed& (0+255),b
  7630  014B90  0E04               	movlw	high _lBuffer
  7631  014B92  0100               	movlb	0	; () banked
  7632  014B94  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  7633  014B96  50F3               	movf	prodl,w,c
  7634  014B98  0100               	movlb	0	; () banked
  7635  014B9A  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  7636  014B9C  50F4               	movf	prodh,w,c
  7637  014B9E  0100               	movlb	0	; () banked
  7638  014BA0  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  7639  014BA2  0100               	movlb	0	; () banked
  7640  014BA4  5162               	movf	Console_FormFeed@x& (0+255),w,b
  7641  014BA6  0D01               	mullw	1
  7642  014BA8  50F3               	movf	prodl,w,c
  7643  014BAA  0100               	movlb	0	; () banked
  7644  014BAC  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  7645  014BAE  6ED9               	movwf	fsr2l,c
  7646  014BB0  50F4               	movf	prodh,w,c
  7647  014BB2  0100               	movlb	0	; () banked
  7648  014BB4  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  7649  014BB6  6EDA               	movwf	fsr2h,c
  7650  014BB8  0E80               	movlw	128
  7651  014BBA  6EDF               	movwf	indf2,c
  7652                           
  7653                           ; BSR set to: 0
  7654  014BBC  0100               	movlb	0	; () banked
  7655  014BBE  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  7656  014BC0  D7D9               	goto	l12128
  7657  014BC2                     u8790:
  7658                           
  7659                           ; BSR set to: 0
  7660                           
  7661                           ; BSR set to: 0
  7662  014BC2  0100               	movlb	0	; () banked
  7663  014BC4  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  7664  014BC6  D7CE               	goto	l12122
  7665  014BC8                     u8800:
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;Console.c: 204: clearall = 1;
  7669                           
  7670                           ; BSR set to: 0
  7671  014BC8  0E01               	movlw	1
  7672  014BCA  0100               	movlb	0	; () banked
  7673  014BCC  6FDF               	movwf	_clearall& (0+255),b
  7674                           
  7675                           ;Console.c: 205: gCursor.x = 6;
  7676  014BCE  0E00               	movlw	0
  7677  014BD0  6E48               	movwf	_gCursor+1,c
  7678  014BD2  0E06               	movlw	6
  7679  014BD4  6E47               	movwf	_gCursor,c
  7680                           
  7681                           ;Console.c: 206: gCursor.y = 6;
  7682  014BD6  0E00               	movlw	0
  7683  014BD8  6E4A               	movwf	_gCursor+3,c
  7684  014BDA  0E06               	movlw	6
  7685  014BDC  6E49               	movwf	_gCursor+2,c
  7686                           
  7687                           ; BSR set to: 0
  7688  014BDE  0012               	return		;funcret
  7689  014BE0                     __end_of_Console_FormFeed:
  7690                           	opt stack 0
  7691                           tblptru	equ	0xFF8
  7692                           tblptrh	equ	0xFF7
  7693                           tblptrl	equ	0xFF6
  7694                           tablat	equ	0xFF5
  7695                           prodh	equ	0xFF4
  7696                           prodl	equ	0xFF3
  7697                           postinc0	equ	0xFEE
  7698                           wreg	equ	0xFE8
  7699                           postdec1	equ	0xFE5
  7700                           fsr1h	equ	0xFE2
  7701                           fsr1l	equ	0xFE1
  7702                           indf2	equ	0xFDF
  7703                           postinc2	equ	0xFDE
  7704                           postdec2	equ	0xFDD
  7705                           fsr2h	equ	0xFDA
  7706                           fsr2l	equ	0xFD9
  7707                           status	equ	0xFD8
  7708                           
  7709 ;; *************** function _Console_ResetCursor *****************
  7710 ;; Defined at:
  7711 ;;		line 297 in file "Library/Console.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;		None
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;		None
  7716 ;; Return value:  Size  Location     Type
  7717 ;;                  1    wreg      void 
  7718 ;; Registers used:
  7719 ;;		wreg, status,2
  7720 ;; Tracked objects:
  7721 ;;		On entry : 0/0
  7722 ;;		On exit  : 0/0
  7723 ;;		Unchanged: 0/0
  7724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;Total ram usage:        0 bytes
  7730 ;; Hardware stack levels used:    1
  7731 ;; Hardware stack levels required when called:    7
  7732 ;; This function calls:
  7733 ;;		Nothing
  7734 ;; This function is called by:
  7735 ;;		_Console_PrintChar
  7736 ;; This function uses a non-reentrant model
  7737 ;;
  7738                           
  7739                           	psect	text25
  7740  016206                     __ptext25:
  7741                           	opt stack 0
  7742  016206                     _Console_ResetCursor:
  7743                           	opt stack 19
  7744                           
  7745                           ;Console.c: 299: gCursor.x = 6;
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;incstack = 0
  7749  016206  0E00               	movlw	0
  7750  016208  6E48               	movwf	_gCursor+1,c
  7751  01620A  0E06               	movlw	6
  7752  01620C  6E47               	movwf	_gCursor,c
  7753                           
  7754                           ;Console.c: 300: gCursor.y = 6;
  7755  01620E  0E00               	movlw	0
  7756  016210  6E4A               	movwf	_gCursor+3,c
  7757  016212  0E06               	movlw	6
  7758  016214  6E49               	movwf	_gCursor+2,c
  7759                           
  7760                           ;Console.c: 303: lBufferX = 0;
  7761  016216  0E00               	movlw	0
  7762  016218  0100               	movlb	0	; () banked
  7763  01621A  6FDE               	movwf	_lBufferX& (0+255),b
  7764                           
  7765                           ;Console.c: 304: lBufferY = 0;
  7766  01621C  0E00               	movlw	0
  7767  01621E  0100               	movlb	0	; () banked
  7768  016220  6FDD               	movwf	_lBufferY& (0+255),b
  7769                           
  7770                           ; BSR set to: 0
  7771  016222  0012               	return		;funcret
  7772  016224                     __end_of_Console_ResetCursor:
  7773                           	opt stack 0
  7774                           tblptru	equ	0xFF8
  7775                           tblptrh	equ	0xFF7
  7776                           tblptrl	equ	0xFF6
  7777                           tablat	equ	0xFF5
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           postinc0	equ	0xFEE
  7781                           wreg	equ	0xFE8
  7782                           postdec1	equ	0xFE5
  7783                           fsr1h	equ	0xFE2
  7784                           fsr1l	equ	0xFE1
  7785                           indf2	equ	0xFDF
  7786                           postinc2	equ	0xFDE
  7787                           postdec2	equ	0xFDD
  7788                           fsr2h	equ	0xFDA
  7789                           fsr2l	equ	0xFD9
  7790                           status	equ	0xFD8
  7791                           
  7792 ;; *************** function _Console_Backspace *****************
  7793 ;; Defined at:
  7794 ;;		line 209 in file "Library/Console.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;		None
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;		None
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  1    wreg      void 
  7801 ;; Registers used:
  7802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;Total ram usage:        0 bytes
  7813 ;; Hardware stack levels used:    1
  7814 ;; Hardware stack levels required when called:    8
  7815 ;; This function calls:
  7816 ;;		_Console_ClearCursor
  7817 ;; This function is called by:
  7818 ;;		_Console_PrintChar
  7819 ;; This function uses a non-reentrant model
  7820 ;;
  7821                           
  7822                           	psect	text26
  7823  015718                     __ptext26:
  7824                           	opt stack 0
  7825  015718                     _Console_Backspace:
  7826                           	opt stack 18
  7827                           
  7828                           ;Console.c: 211: if (lBufferX > 0)
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;incstack = 0
  7832  015718  0100               	movlb	0	; () banked
  7833  01571A  51DE               	movf	_lBufferX& (0+255),w,b
  7834  01571C  B4D8               	btfsc	status,2,c
  7835  01571E  D007               	goto	l997
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;Console.c: 212: {
  7839                           ;Console.c: 213: gCursor.x -= 6;
  7840  015720  0EFA               	movlw	250
  7841  015722  2647               	addwf	_gCursor,f,c
  7842  015724  0EFF               	movlw	255
  7843  015726  2248               	addwfc	_gCursor+1,f,c
  7844                           
  7845                           ; BSR set to: 0
  7846                           ;Console.c: 216: lBufferX --;
  7847  015728  0100               	movlb	0	; () banked
  7848  01572A  07DE               	decf	_lBufferX& (0+255),f,b
  7849                           
  7850                           ;Console.c: 218: }
  7851  01572C  D020               	goto	l1000
  7852  01572E                     l997:
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;Console.c: 219: else if (lBufferY > 0)
  7856                           
  7857                           ; BSR set to: 0
  7858  01572E  0100               	movlb	0	; () banked
  7859  015730  51DD               	movf	_lBufferY& (0+255),w,b
  7860  015732  B4D8               	btfsc	status,2,c
  7861  015734  D00E               	goto	l999
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;Console.c: 220: {
  7865                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  7866  015736  0E00               	movlw	0
  7867  015738  6E48               	movwf	_gCursor+1,c
  7868  01573A  0E72               	movlw	114
  7869  01573C  6E47               	movwf	_gCursor,c
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;Console.c: 222: gCursor.y -= 8;
  7873  01573E  0EF8               	movlw	248
  7874  015740  2649               	addwf	_gCursor+2,f,c
  7875  015742  0EFF               	movlw	255
  7876  015744  224A               	addwfc	_gCursor+3,f,c
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  7880  015746  0E13               	movlw	19
  7881  015748  0100               	movlb	0	; () banked
  7882  01574A  6FDE               	movwf	_lBufferX& (0+255),b
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;Console.c: 226: lBufferY --;
  7886  01574C  0100               	movlb	0	; () banked
  7887  01574E  07DD               	decf	_lBufferY& (0+255),f,b
  7888                           
  7889                           ;Console.c: 228: }
  7890  015750  D00E               	goto	l1000
  7891  015752                     l999:
  7892                           
  7893                           ; BSR set to: 0
  7894                           ;Console.c: 229: else
  7895                           ;Console.c: 230: {
  7896                           ;Console.c: 231: gCursor.x = 6;
  7897                           
  7898                           ; BSR set to: 0
  7899  015752  0E00               	movlw	0
  7900  015754  6E48               	movwf	_gCursor+1,c
  7901  015756  0E06               	movlw	6
  7902  015758  6E47               	movwf	_gCursor,c
  7903                           
  7904                           ;Console.c: 232: gCursor.y = 6;
  7905  01575A  0E00               	movlw	0
  7906  01575C  6E4A               	movwf	_gCursor+3,c
  7907  01575E  0E06               	movlw	6
  7908  015760  6E49               	movwf	_gCursor+2,c
  7909                           
  7910                           ;Console.c: 235: lBufferX = 0;
  7911  015762  0E00               	movlw	0
  7912  015764  0100               	movlb	0	; () banked
  7913  015766  6FDE               	movwf	_lBufferX& (0+255),b
  7914                           
  7915                           ;Console.c: 236: lBufferY = 0;
  7916  015768  0E00               	movlw	0
  7917  01576A  0100               	movlb	0	; () banked
  7918  01576C  6FDD               	movwf	_lBufferY& (0+255),b
  7919  01576E                     l1000:
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;Console.c: 238: }
  7923                           ;Console.c: 240: Console_ClearCursor();
  7924                           
  7925                           ; BSR set to: 0
  7926                           
  7927                           ; BSR set to: 0
  7928  01576E  EC67  F0AE         	call	_Console_ClearCursor	;wreg free
  7929  015772  0012               	return		;funcret
  7930  015774                     __end_of_Console_Backspace:
  7931                           	opt stack 0
  7932                           tblptru	equ	0xFF8
  7933                           tblptrh	equ	0xFF7
  7934                           tblptrl	equ	0xFF6
  7935                           tablat	equ	0xFF5
  7936                           prodh	equ	0xFF4
  7937                           prodl	equ	0xFF3
  7938                           postinc0	equ	0xFEE
  7939                           wreg	equ	0xFE8
  7940                           postdec1	equ	0xFE5
  7941                           fsr1h	equ	0xFE2
  7942                           fsr1l	equ	0xFE1
  7943                           indf2	equ	0xFDF
  7944                           postinc2	equ	0xFDE
  7945                           postdec2	equ	0xFDD
  7946                           fsr2h	equ	0xFDA
  7947                           fsr2l	equ	0xFD9
  7948                           status	equ	0xFD8
  7949                           
  7950 ;; *************** function _Console_ClearCursor *****************
  7951 ;; Defined at:
  7952 ;;		line 308 in file "Library/Console.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;		None
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;		None
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  1    wreg      void 
  7959 ;; Registers used:
  7960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;Total ram usage:        2 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    7
  7973 ;; This function calls:
  7974 ;;		Nothing
  7975 ;; This function is called by:
  7976 ;;		_Console_Backspace
  7977 ;;		_Console_Tab
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text27
  7982  015CCE                     __ptext27:
  7983                           	opt stack 0
  7984  015CCE                     _Console_ClearCursor:
  7985                           	opt stack 18
  7986                           
  7987                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  7988                           
  7989                           ;incstack = 0
  7990  015CCE  0E01               	movlw	1
  7991  015CD0  0100               	movlb	0	; () banked
  7992  015CD2  6FFF               	movwf	_change& (0+255),b
  7993                           
  7994                           ; BSR set to: 0
  7995  015CD4  0100               	movlb	0	; () banked
  7996  015CD6  51DD               	movf	_lBufferY& (0+255),w,b
  7997  015CD8  0D14               	mullw	20
  7998  015CDA  0EC8               	movlw	low _lBuffer
  7999  015CDC  0100               	movlb	0	; () banked
  8000  015CDE  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  8001  015CE0  0E04               	movlw	high _lBuffer
  8002  015CE2  0100               	movlb	0	; () banked
  8003  015CE4  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  8004  015CE6  50F3               	movf	prodl,w,c
  8005  015CE8  0100               	movlb	0	; () banked
  8006  015CEA  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  8007  015CEC  50F4               	movf	prodh,w,c
  8008  015CEE  0100               	movlb	0	; () banked
  8009  015CF0  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  8010  015CF2  0100               	movlb	0	; () banked
  8011  015CF4  51DE               	movf	_lBufferX& (0+255),w,b
  8012  015CF6  0D01               	mullw	1
  8013  015CF8  50F3               	movf	prodl,w,c
  8014  015CFA  0100               	movlb	0	; () banked
  8015  015CFC  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  8016  015CFE  6ED9               	movwf	fsr2l,c
  8017  015D00  50F4               	movf	prodh,w,c
  8018  015D02  0100               	movlb	0	; () banked
  8019  015D04  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  8020  015D06  6EDA               	movwf	fsr2h,c
  8021  015D08  0E80               	movlw	128
  8022  015D0A  6EDF               	movwf	indf2,c
  8023                           
  8024                           ; BSR set to: 0
  8025  015D0C  0012               	return		;funcret
  8026  015D0E                     __end_of_Console_ClearCursor:
  8027                           	opt stack 0
  8028                           tblptru	equ	0xFF8
  8029                           tblptrh	equ	0xFF7
  8030                           tblptrl	equ	0xFF6
  8031                           tablat	equ	0xFF5
  8032                           prodh	equ	0xFF4
  8033                           prodl	equ	0xFF3
  8034                           postinc0	equ	0xFEE
  8035                           wreg	equ	0xFE8
  8036                           postdec1	equ	0xFE5
  8037                           fsr1h	equ	0xFE2
  8038                           fsr1l	equ	0xFE1
  8039                           indf2	equ	0xFDF
  8040                           postinc2	equ	0xFDE
  8041                           postdec2	equ	0xFDD
  8042                           fsr2h	equ	0xFDA
  8043                           fsr2l	equ	0xFD9
  8044                           status	equ	0xFD8
  8045                           
  8046 ;; *************** function _irobot_stop_motion *****************
  8047 ;; Defined at:
  8048 ;;		line 288 in file "Library/iRobotSerial.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;  isScript        1    wreg     unsigned char 
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;  isScript        1   25[BANK0 ] unsigned char 
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      void 
  8055 ;; Registers used:
  8056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;Total ram usage:        1 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    9
  8069 ;; This function calls:
  8070 ;;		_irobot_move
  8071 ;; This function is called by:
  8072 ;;		_irobot_rotate_to
  8073 ;;		_mode1
  8074 ;;		_mode2
  8075 ;;		_mode4
  8076 ;;		_irobot_move_to_simple
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           	psect	text28
  8081  015B76                     __ptext28:
  8082                           	opt stack 0
  8083  015B76                     _irobot_stop_motion:
  8084                           	opt stack 20
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;incstack = 0
  8088                           ;irobot_stop_motion@isScript stored from wreg
  8089  015B76  0100               	movlb	0	; () banked
  8090  015B78  6F79               	movwf	irobot_stop_motion@isScript& (0+255),b
  8091                           
  8092                           ;iRobotSerial.c: 289: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  8093  015B7A  0100               	movlb	0	; () banked
  8094  015B7C  5179               	movf	irobot_stop_motion@isScript& (0+255),w,b
  8095  015B7E  0100               	movlb	0	; () banked
  8096  015B80  B4D8               	btfsc	status,2,c
  8097  015B82  D00E               	goto	l2163
  8098                           
  8099                           ; BSR set to: 0
  8100  015B84  0E00               	movlw	0
  8101  015B86  0100               	movlb	0	; () banked
  8102  015B88  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8103  015B8A  0E00               	movlw	0
  8104  015B8C  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8105  015B8E  0E00               	movlw	0
  8106  015B90  0100               	movlb	0	; () banked
  8107  015B92  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8108  015B94  0E00               	movlw	0
  8109  015B96  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8110  015B98  0E01               	movlw	1
  8111  015B9A  EC7F  F0A1         	call	_irobot_move
  8112  015B9E  0012               	return	
  8113  015BA0                     l2163:
  8114  015BA0  0E00               	movlw	0
  8115  015BA2  0100               	movlb	0	; () banked
  8116  015BA4  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8117  015BA6  0E00               	movlw	0
  8118  015BA8  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8119  015BAA  0E00               	movlw	0
  8120  015BAC  0100               	movlb	0	; () banked
  8121  015BAE  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8122  015BB0  0E00               	movlw	0
  8123  015BB2  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8124  015BB4  0E00               	movlw	0
  8125  015BB6  EC7F  F0A1         	call	_irobot_move
  8126  015BBA  0012               	return	
  8127  015BBC                     __end_of_irobot_stop_motion:
  8128                           	opt stack 0
  8129                           tblptru	equ	0xFF8
  8130                           tblptrh	equ	0xFF7
  8131                           tblptrl	equ	0xFF6
  8132                           tablat	equ	0xFF5
  8133                           prodh	equ	0xFF4
  8134                           prodl	equ	0xFF3
  8135                           postinc0	equ	0xFEE
  8136                           wreg	equ	0xFE8
  8137                           postdec1	equ	0xFE5
  8138                           fsr1h	equ	0xFE2
  8139                           fsr1l	equ	0xFE1
  8140                           indf2	equ	0xFDF
  8141                           postinc2	equ	0xFDE
  8142                           postdec2	equ	0xFDD
  8143                           fsr2h	equ	0xFDA
  8144                           fsr2l	equ	0xFD9
  8145                           status	equ	0xFD8
  8146                           
  8147 ;; *************** function _irobot_move *****************
  8148 ;; Defined at:
  8149 ;;		line 220 in file "Library/iRobotSerial.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  isScript        1    wreg     unsigned char 
  8152 ;;  moveSpeed       2   16[BANK0 ] short 
  8153 ;;  moveTurnRadi    2   18[BANK0 ] short 
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;  isScript        1   24[BANK0 ] unsigned char 
  8156 ;; Return value:  Size  Location     Type
  8157 ;;                  1    wreg      void 
  8158 ;; Registers used:
  8159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8165 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;Total ram usage:        9 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    8
  8172 ;; This function calls:
  8173 ;;		_eusart_putch
  8174 ;;		_load_iRScriptStack
  8175 ;;		_twos_complement_of
  8176 ;; This function is called by:
  8177 ;;		_irobot_rotate
  8178 ;;		_irobot_stop_motion
  8179 ;;		_irobot_move_straight
  8180 ;;		_irobot_move_to_simple
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text29
  8185  0142FE                     __ptext29:
  8186                           	opt stack 0
  8187  0142FE                     _irobot_move:
  8188                           	opt stack 20
  8189                           
  8190                           ;incstack = 0
  8191                           ;irobot_move@isScript stored from wreg
  8192  0142FE  0100               	movlb	0	; () banked
  8193  014300  6F78               	movwf	irobot_move@isScript& (0+255),b
  8194                           
  8195                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  8196  014302  C070  F060         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  8197  014306  C071  F061         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  8198  01430A  EC24  F0AE         	call	_twos_complement_of	;wreg free
  8199  01430E  C060  F070         	movff	?_twos_complement_of,irobot_move@moveSpeed
  8200  014312  C061  F071         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  8201                           
  8202                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  8203  014316  C072  F060         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  8204  01431A  C073  F061         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  8205  01431E  EC24  F0AE         	call	_twos_complement_of	;wreg free
  8206  014322  C060  F072         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  8207  014326  C061  F073         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  8208                           
  8209                           ;iRobotSerial.c: 224: if (isScript) {
  8210  01432A  0100               	movlb	0	; () banked
  8211  01432C  5178               	movf	irobot_move@isScript& (0+255),w,b
  8212  01432E  0100               	movlb	0	; () banked
  8213  014330  B4D8               	btfsc	status,2,c
  8214  014332  D029               	goto	l2135
  8215                           
  8216                           ; BSR set to: 0
  8217                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  8218                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  8219                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  8220  014334  0E00               	movlw	0
  8221  014336  0100               	movlb	0	; () banked
  8222  014338  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  8223  01433A  0E89               	movlw	137
  8224  01433C  6F60               	movwf	?_load_iRScriptStack& (0+255),b
  8225  01433E  C071  F074         	movff	irobot_move@moveSpeed+1,??_irobot_move
  8226  014342  0100               	movlb	0	; () banked
  8227  014344  6B75               	clrf	(??_irobot_move+1)& (0+255),b
  8228  014346  BF74               	btfsc	??_irobot_move& (0+255),7,b
  8229  014348  6975               	setf	(??_irobot_move+1)& (0+255),b
  8230  01434A  0100               	movlb	0	; () banked
  8231  01434C  5174               	movf	??_irobot_move& (0+255),w,b
  8232  01434E  0100               	movlb	0	; () banked
  8233  014350  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  8234  014352  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  8235  014354  0100               	movlb	0	; () banked
  8236  014356  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8237  014358  0100               	movlb	0	; () banked
  8238  01435A  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  8239  01435C  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  8240  01435E  C073  F076         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  8241  014362  0100               	movlb	0	; () banked
  8242  014364  6B77               	clrf	(??_irobot_move+3)& (0+255),b
  8243  014366  BF76               	btfsc	(??_irobot_move+2)& (0+255),7,b
  8244  014368  6977               	setf	(??_irobot_move+3)& (0+255),b
  8245  01436A  0100               	movlb	0	; () banked
  8246  01436C  5176               	movf	(??_irobot_move+2)& (0+255),w,b
  8247  01436E  0100               	movlb	0	; () banked
  8248  014370  6F66               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  8249  014372  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  8250  014374  0100               	movlb	0	; () banked
  8251  014376  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8252  014378  0100               	movlb	0	; () banked
  8253  01437A  6F68               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  8254  01437C  6B69               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  8255  01437E  0E05               	movlw	5
  8256  014380  ECC1  F0A9         	call	_load_iRScriptStack
  8257                           
  8258                           ;iRobotSerial.c: 228: }
  8259  014384  0012               	return	
  8260  014386                     l2135:
  8261                           
  8262                           ;iRobotSerial.c: 229: else{
  8263                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  8264  014386  0E89               	movlw	137
  8265  014388  EC4F  F0B2         	call	_eusart_putch
  8266                           
  8267                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  8268  01438C  0100               	movlb	0	; () banked
  8269  01438E  5171               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  8270  014390  EC4F  F0B2         	call	_eusart_putch
  8271                           
  8272                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  8273  014394  0100               	movlb	0	; () banked
  8274  014396  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8275  014398  EC4F  F0B2         	call	_eusart_putch
  8276                           
  8277                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  8278  01439C  0100               	movlb	0	; () banked
  8279  01439E  5173               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  8280  0143A0  EC4F  F0B2         	call	_eusart_putch
  8281                           
  8282                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  8283  0143A4  0100               	movlb	0	; () banked
  8284  0143A6  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8285  0143A8  EC4F  F0B2         	call	_eusart_putch
  8286  0143AC  0012               	return	
  8287  0143AE                     __end_of_irobot_move:
  8288                           	opt stack 0
  8289                           tblptru	equ	0xFF8
  8290                           tblptrh	equ	0xFF7
  8291                           tblptrl	equ	0xFF6
  8292                           tablat	equ	0xFF5
  8293                           prodh	equ	0xFF4
  8294                           prodl	equ	0xFF3
  8295                           postinc0	equ	0xFEE
  8296                           wreg	equ	0xFE8
  8297                           postdec1	equ	0xFE5
  8298                           fsr1h	equ	0xFE2
  8299                           fsr1l	equ	0xFE1
  8300                           indf2	equ	0xFDF
  8301                           postinc2	equ	0xFDE
  8302                           postdec2	equ	0xFDD
  8303                           fsr2h	equ	0xFDA
  8304                           fsr2l	equ	0xFD9
  8305                           status	equ	0xFD8
  8306                           
  8307 ;; *************** function _twos_complement_of *****************
  8308 ;; Defined at:
  8309 ;;		line 167 in file "Library/iRobotSerial.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  complementVa    2    0[BANK0 ] short 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;		None
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  2    0[BANK0 ] unsigned short 
  8316 ;; Registers used:
  8317 ;;		wreg, status,2, status,0
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8323 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;Total ram usage:        2 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    7
  8330 ;; This function calls:
  8331 ;;		Nothing
  8332 ;; This function is called by:
  8333 ;;		_irobot_angle_wait
  8334 ;;		_irobot_move
  8335 ;;		_irobot_distance_wait
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           	psect	text30
  8340  015C48                     __ptext30:
  8341                           	opt stack 0
  8342  015C48                     _twos_complement_of:
  8343                           	opt stack 20
  8344                           
  8345                           ;iRobotSerial.c: 168: if (complementValue < 0) {
  8346                           
  8347                           ;incstack = 0
  8348  015C48  0100               	movlb	0	; () banked
  8349  015C4A  AF61               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  8350  015C4C  D01A               	goto	l2106
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  8354  015C4E  0100               	movlb	0	; () banked
  8355  015C50  BF61               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  8356  015C52  D007               	goto	u9390
  8357  015C54  0100               	movlb	0	; () banked
  8358  015C56  5161               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  8359  015C58  E10A               	bnz	l2108
  8360  015C5A  0100               	movlb	0	; () banked
  8361  015C5C  0560               	decf	twos_complement_of@complementValue& (0+255),w,b
  8362  015C5E  B0D8               	btfsc	status,0,c
  8363  015C60  D006               	goto	l2108
  8364  015C62                     u9390:
  8365                           
  8366                           ; BSR set to: 0
  8367  015C62  0100               	movlb	0	; () banked
  8368  015C64  6D60               	negf	twos_complement_of@complementValue& (0+255),b
  8369  015C66  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8370  015C68  B0D8               	btfsc	status,0,c
  8371  015C6A  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8372  015C6C  D004               	goto	l2110
  8373  015C6E                     l2108:
  8374                           
  8375                           ; BSR set to: 0
  8376  015C6E  C060  F060         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  8377  015C72  C061  F061         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  8378  015C76                     l2110:
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  8382                           
  8383                           ; BSR set to: 0
  8384  015C76  0100               	movlb	0	; () banked
  8385  015C78  1F60               	comf	twos_complement_of@complementValue& (0+255),f,b
  8386  015C7A  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8387                           
  8388                           ;iRobotSerial.c: 171: complementValue += 1;
  8389  015C7C  0100               	movlb	0	; () banked
  8390  015C7E  4B60               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  8391  015C80  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8392  015C82                     l2106:
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;iRobotSerial.c: 172: }
  8396                           ;iRobotSerial.c: 173: return complementValue;
  8397                           
  8398                           ; BSR set to: 0
  8399  015C82  C060  F060         	movff	twos_complement_of@complementValue,?_twos_complement_of
  8400  015C86  C061  F061         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  8401  015C8A  0012               	return	
  8402  015C8C                     __end_of_twos_complement_of:
  8403                           	opt stack 0
  8404                           tblptru	equ	0xFF8
  8405                           tblptrh	equ	0xFF7
  8406                           tblptrl	equ	0xFF6
  8407                           tablat	equ	0xFF5
  8408                           prodh	equ	0xFF4
  8409                           prodl	equ	0xFF3
  8410                           postinc0	equ	0xFEE
  8411                           wreg	equ	0xFE8
  8412                           postdec1	equ	0xFE5
  8413                           fsr1h	equ	0xFE2
  8414                           fsr1l	equ	0xFE1
  8415                           indf2	equ	0xFDF
  8416                           postinc2	equ	0xFDE
  8417                           postdec2	equ	0xFDD
  8418                           fsr2h	equ	0xFDA
  8419                           fsr2l	equ	0xFD9
  8420                           status	equ	0xFD8
  8421                           
  8422 ;; *************** function _irobot_song_play *****************
  8423 ;; Defined at:
  8424 ;;		line 274 in file "Library/iRobotSerial.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;  songNumber      1    wreg     unsigned char 
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;  songNumber      1    1[BANK0 ] unsigned char 
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  1    wreg      void 
  8431 ;; Registers used:
  8432 ;;		wreg, status,2, cstack
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;Total ram usage:        1 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    8
  8445 ;; This function calls:
  8446 ;;		_eusart_putch
  8447 ;; This function is called by:
  8448 ;;		_mode1
  8449 ;;		_mode2
  8450 ;;		_mode4
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text31
  8455  016424                     __ptext31:
  8456                           	opt stack 0
  8457  016424                     _irobot_song_play:
  8458                           	opt stack 21
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;incstack = 0
  8462                           ;irobot_song_play@songNumber stored from wreg
  8463  016424  0100               	movlb	0	; () banked
  8464  016426  6F61               	movwf	irobot_song_play@songNumber& (0+255),b
  8465                           
  8466                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  8467  016428  0E8D               	movlw	141
  8468  01642A  EC4F  F0B2         	call	_eusart_putch
  8469                           
  8470                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  8471  01642E  0100               	movlb	0	; () banked
  8472  016430  5161               	movf	irobot_song_play@songNumber& (0+255),w,b
  8473  016432  EC4F  F0B2         	call	_eusart_putch
  8474  016436  0012               	return		;funcret
  8475  016438                     __end_of_irobot_song_play:
  8476                           	opt stack 0
  8477                           tblptru	equ	0xFF8
  8478                           tblptrh	equ	0xFF7
  8479                           tblptrl	equ	0xFF6
  8480                           tablat	equ	0xFF5
  8481                           prodh	equ	0xFF4
  8482                           prodl	equ	0xFF3
  8483                           postinc0	equ	0xFEE
  8484                           wreg	equ	0xFE8
  8485                           postdec1	equ	0xFE5
  8486                           fsr1h	equ	0xFE2
  8487                           fsr1l	equ	0xFE1
  8488                           indf2	equ	0xFDF
  8489                           postinc2	equ	0xFDE
  8490                           postdec2	equ	0xFDD
  8491                           fsr2h	equ	0xFDA
  8492                           fsr2l	equ	0xFD9
  8493                           status	equ	0xFD8
  8494                           
  8495 ;; *************** function ___fltol *****************
  8496 ;; Defined at:
  8497 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  f1              4   82[BANK0 ] void 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;  exp1            1    1[BANK1 ] unsigned char 
  8502 ;;  sign1           1    0[BANK1 ] unsigned char 
  8503 ;; Return value:  Size  Location     Type
  8504 ;;                  4   82[BANK0 ] long 
  8505 ;; Registers used:
  8506 ;;		wreg, status,2, status,0
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8512 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Totals:         0       8       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;Total ram usage:       10 bytes
  8517 ;; Hardware stack levels used:    1
  8518 ;; Hardware stack levels required when called:    7
  8519 ;; This function calls:
  8520 ;;		Nothing
  8521 ;; This function is called by:
  8522 ;;		_mode1
  8523 ;;		_mode4
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           	psect	text32
  8528  0136AC                     __ptext32:
  8529                           	opt stack 0
  8530  0136AC                     ___fltol:
  8531                           	opt stack 22
  8532                           
  8533                           ;incstack = 0
  8534  0136AC  0100               	movlb	0	; () banked
  8535  0136AE  35B4               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8536  0136B0  35B5               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8537  0136B2  0101               	movlb	1	; () banked
  8538  0136B4  6F01               	movwf	___fltol@exp1& (0+255),b
  8539  0136B6  0101               	movlb	1	; () banked
  8540  0136B8  5101               	movf	___fltol@exp1& (0+255),w,b
  8541  0136BA  A4D8               	btfss	status,2,c
  8542  0136BC  D00A               	goto	l2658
  8543                           
  8544                           ; BSR set to: 1
  8545  0136BE  0E00               	movlw	0
  8546  0136C0  0100               	movlb	0	; () banked
  8547  0136C2  6FB2               	movwf	?___fltol& (0+255),b
  8548  0136C4  0E00               	movlw	0
  8549  0136C6  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8550  0136C8  0E00               	movlw	0
  8551  0136CA  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8552  0136CC  0E00               	movlw	0
  8553  0136CE  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8554                           
  8555                           ; BSR set to: 0
  8556  0136D0  0012               	return	
  8557  0136D2                     l2658:
  8558                           
  8559                           ; BSR set to: 0
  8560  0136D2  C0B2  F0B6         	movff	___fltol@f1,??___fltol
  8561  0136D6  C0B3  F0B7         	movff	___fltol@f1+1,??___fltol+1
  8562  0136DA  C0B4  F0B8         	movff	___fltol@f1+2,??___fltol+2
  8563  0136DE  C0B5  F0B9         	movff	___fltol@f1+3,??___fltol+3
  8564  0136E2  0E20               	movlw	32
  8565  0136E4  D006               	goto	u11140
  8566  0136E6                     u11145:
  8567  0136E6  0100               	movlb	0	; () banked
  8568  0136E8  90D8               	bcf	status,0,c
  8569  0136EA  33B9               	rrcf	(??___fltol+3)& (0+255),f,b
  8570  0136EC  33B8               	rrcf	(??___fltol+2)& (0+255),f,b
  8571  0136EE  33B7               	rrcf	(??___fltol+1)& (0+255),f,b
  8572  0136F0  33B6               	rrcf	??___fltol& (0+255),f,b
  8573  0136F2                     u11140:
  8574  0136F2  2EE8               	decfsz	wreg,f,c
  8575  0136F4  D7F8               	goto	u11145
  8576  0136F6  0100               	movlb	0	; () banked
  8577  0136F8  51B6               	movf	??___fltol& (0+255),w,b
  8578  0136FA  0101               	movlb	1	; () banked
  8579  0136FC  6F00               	movwf	___fltol@sign1& (0+255),b
  8580                           
  8581                           ; BSR set to: 1
  8582  0136FE  0100               	movlb	0	; () banked
  8583  013700  8FB4               	bsf	(___fltol@f1+2)& (0+255),7,b
  8584                           
  8585                           ; BSR set to: 0
  8586  013702  0EFF               	movlw	255
  8587  013704  0100               	movlb	0	; () banked
  8588  013706  17B2               	andwf	___fltol@f1& (0+255),f,b
  8589  013708  0EFF               	movlw	255
  8590  01370A  17B3               	andwf	(___fltol@f1+1)& (0+255),f,b
  8591  01370C  0EFF               	movlw	255
  8592  01370E  17B4               	andwf	(___fltol@f1+2)& (0+255),f,b
  8593  013710  0E00               	movlw	0
  8594  013712  17B5               	andwf	(___fltol@f1+3)& (0+255),f,b
  8595                           
  8596                           ; BSR set to: 0
  8597  013714  0E96               	movlw	150
  8598  013716  0101               	movlb	1	; () banked
  8599  013718  5F01               	subwf	___fltol@exp1& (0+255),f,b
  8600                           
  8601                           ; BSR set to: 1
  8602  01371A  0101               	movlb	1	; () banked
  8603  01371C  AF01               	btfss	___fltol@exp1& (0+255),7,b
  8604  01371E  D01A               	goto	l2660
  8605                           
  8606                           ; BSR set to: 1
  8607  013720  0101               	movlb	1	; () banked
  8608  013722  5101               	movf	___fltol@exp1& (0+255),w,b
  8609  013724  0A80               	xorlw	128
  8610  013726  0F97               	addlw	151
  8611  013728  B0D8               	btfsc	status,0,c
  8612  01372A  D00A               	goto	l2661
  8613                           
  8614                           ; BSR set to: 1
  8615  01372C  0E00               	movlw	0
  8616  01372E  0100               	movlb	0	; () banked
  8617  013730  6FB2               	movwf	?___fltol& (0+255),b
  8618  013732  0E00               	movlw	0
  8619  013734  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8620  013736  0E00               	movlw	0
  8621  013738  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8622  01373A  0E00               	movlw	0
  8623  01373C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8624                           
  8625                           ; BSR set to: 0
  8626  01373E  0012               	return	
  8627  013740                     l2661:
  8628                           
  8629                           ; BSR set to: 0
  8630                           
  8631                           ; BSR set to: 0
  8632  013740  0100               	movlb	0	; () banked
  8633  013742  90D8               	bcf	status,0,c
  8634  013744  33B5               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8635  013746  33B4               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8636  013748  33B3               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8637  01374A  33B2               	rrcf	___fltol@f1& (0+255),f,b
  8638                           
  8639                           ; BSR set to: 0
  8640  01374C  0101               	movlb	1	; () banked
  8641  01374E  3F01               	incfsz	___fltol@exp1& (0+255),f,b
  8642  013750  D7F7               	goto	l2661
  8643                           
  8644                           ; BSR set to: 1
  8645  013752  D01B               	goto	u11180
  8646  013754                     l2660:
  8647                           
  8648                           ; BSR set to: 1
  8649                           
  8650                           ; BSR set to: 1
  8651  013754  0E1F               	movlw	31
  8652  013756  0101               	movlb	1	; () banked
  8653  013758  6501               	cpfsgt	___fltol@exp1& (0+255),b
  8654  01375A  D012               	goto	l2666
  8655                           
  8656                           ; BSR set to: 1
  8657  01375C  0E00               	movlw	0
  8658  01375E  0100               	movlb	0	; () banked
  8659  013760  6FB2               	movwf	?___fltol& (0+255),b
  8660  013762  0E00               	movlw	0
  8661  013764  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8662  013766  0E00               	movlw	0
  8663  013768  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8664  01376A  0E00               	movlw	0
  8665  01376C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8666                           
  8667                           ; BSR set to: 0
  8668  01376E  0012               	return	
  8669  013770                     
  8670                           ; BSR set to: 0
  8671  013770  0100               	movlb	0	; () banked
  8672  013772  90D8               	bcf	status,0,c
  8673  013774  37B2               	rlcf	___fltol@f1& (0+255),f,b
  8674  013776  37B3               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8675  013778  37B4               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8676  01377A  37B5               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8677  01377C  0101               	movlb	1	; () banked
  8678  01377E  0701               	decf	___fltol@exp1& (0+255),f,b
  8679  013780                     l2666:
  8680                           
  8681                           ; BSR set to: 1
  8682  013780  0101               	movlb	1	; () banked
  8683  013782  5101               	movf	___fltol@exp1& (0+255),w,b
  8684  013784  0101               	movlb	1	; () banked
  8685  013786  A4D8               	btfss	status,2,c
  8686  013788  D7F3               	goto	l2667
  8687  01378A                     u11180:
  8688                           
  8689                           ; BSR set to: 1
  8690                           
  8691                           ; BSR set to: 1
  8692                           
  8693                           ; BSR set to: 1
  8694  01378A  0101               	movlb	1	; () banked
  8695  01378C  5100               	movf	___fltol@sign1& (0+255),w,b
  8696  01378E  0101               	movlb	1	; () banked
  8697  013790  B4D8               	btfsc	status,2,c
  8698  013792  D009               	goto	l2669
  8699                           
  8700                           ; BSR set to: 1
  8701  013794  0100               	movlb	0	; () banked
  8702  013796  1FB5               	comf	(___fltol@f1+3)& (0+255),f,b
  8703  013798  1FB4               	comf	(___fltol@f1+2)& (0+255),f,b
  8704  01379A  1FB3               	comf	(___fltol@f1+1)& (0+255),f,b
  8705  01379C  6DB2               	negf	___fltol@f1& (0+255),b
  8706  01379E  0E00               	movlw	0
  8707  0137A0  23B3               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8708  0137A2  23B4               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8709  0137A4  23B5               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8710  0137A6                     l2669:
  8711                           
  8712                           ; BSR set to: 0
  8713  0137A6  C0B2  F0B2         	movff	___fltol@f1,?___fltol
  8714  0137AA  C0B3  F0B3         	movff	___fltol@f1+1,?___fltol+1
  8715  0137AE  C0B4  F0B4         	movff	___fltol@f1+2,?___fltol+2
  8716  0137B2  C0B5  F0B5         	movff	___fltol@f1+3,?___fltol+3
  8717  0137B6  0012               	return	
  8718  0137B8                     __end_of___fltol:
  8719                           	opt stack 0
  8720                           tblptru	equ	0xFF8
  8721                           tblptrh	equ	0xFF7
  8722                           tblptrl	equ	0xFF6
  8723                           tablat	equ	0xFF5
  8724                           prodh	equ	0xFF4
  8725                           prodl	equ	0xFF3
  8726                           postinc0	equ	0xFEE
  8727                           wreg	equ	0xFE8
  8728                           postdec1	equ	0xFE5
  8729                           fsr1h	equ	0xFE2
  8730                           fsr1l	equ	0xFE1
  8731                           indf2	equ	0xFDF
  8732                           postinc2	equ	0xFDE
  8733                           postdec2	equ	0xFDD
  8734                           fsr2h	equ	0xFDA
  8735                           fsr2l	equ	0xFD9
  8736                           status	equ	0xFD8
  8737                           
  8738 ;; *************** function _Motor_Speed *****************
  8739 ;; Defined at:
  8740 ;;		line 117 in file "Library/Motor.c"
  8741 ;; Parameters:    Size  Location     Type
  8742 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  8743 ;;		 -> Stepper(6), 
  8744 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;		None
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  1    wreg      unsigned char 
  8749 ;; Registers used:
  8750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8756 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;Total ram usage:        4 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    9
  8763 ;; This function calls:
  8764 ;;		_Timer0_Init
  8765 ;; This function is called by:
  8766 ;;		_mode1
  8767 ;;		_mode4
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text33
  8772  0160DE                     __ptext33:
  8773                           	opt stack 0
  8774  0160DE                     _Motor_Speed:
  8775                           	opt stack 20
  8776                           
  8777                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  8778                           
  8779                           ;incstack = 0
  8780  0160DE  0100               	movlb	0	; () banked
  8781  0160E0  EE20 F002          	lfsr	2,2
  8782  0160E4  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
  8783  0160E6  26D9               	addwf	fsr2l,f,c
  8784  0160E8  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  8785  0160EA  22DA               	addwfc	fsr2h,f,c
  8786  0160EC  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  8787  0160F0  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  8788                           
  8789                           ; BSR set to: 0
  8790                           ;Motor.c: 120: Timer0_Init(pFrequency);
  8791  0160F4  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  8792  0160F8  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  8793  0160FC  0100               	movlb	0	; () banked
  8794  0160FE  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  8795  016100  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  8796  016102  ECC6  F098         	call	_Timer0_Init	;wreg free
  8797  016106  0012               	return	
  8798  016108                     __end_of_Motor_Speed:
  8799                           	opt stack 0
  8800                           tblptru	equ	0xFF8
  8801                           tblptrh	equ	0xFF7
  8802                           tblptrl	equ	0xFF6
  8803                           tablat	equ	0xFF5
  8804                           prodh	equ	0xFF4
  8805                           prodl	equ	0xFF3
  8806                           postinc0	equ	0xFEE
  8807                           wreg	equ	0xFE8
  8808                           postdec1	equ	0xFE5
  8809                           fsr1h	equ	0xFE2
  8810                           fsr1l	equ	0xFE1
  8811                           indf2	equ	0xFDF
  8812                           postinc2	equ	0xFDE
  8813                           postdec2	equ	0xFDD
  8814                           fsr2h	equ	0xFDA
  8815                           fsr2l	equ	0xFD9
  8816                           status	equ	0xFD8
  8817                           
  8818 ;; *************** function _Motor_Move *****************
  8819 ;; Defined at:
  8820 ;;		line 51 in file "Library/Motor.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  8823 ;;		 -> Stepper(6), 
  8824 ;;  pDelta          2    5[BANK0 ] short 
  8825 ;; Auto vars:     Size  Location     Type
  8826 ;;		None
  8827 ;; Return value:  Size  Location     Type
  8828 ;;                  1    wreg      unsigned char 
  8829 ;; Registers used:
  8830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8831 ;; Tracked objects:
  8832 ;;		On entry : 0/0
  8833 ;;		On exit  : 0/0
  8834 ;;		Unchanged: 0/0
  8835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8836 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8838 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8839 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8840 ;;Total ram usage:        6 bytes
  8841 ;; Hardware stack levels used:    1
  8842 ;; Hardware stack levels required when called:    8
  8843 ;; This function calls:
  8844 ;;		_Timer0_Start
  8845 ;; This function is called by:
  8846 ;;		_mode1
  8847 ;;		_mode4
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           	psect	text34
  8852  015EBC                     __ptext34:
  8853                           	opt stack 0
  8854  015EBC                     _Motor_Move:
  8855                           	opt stack 21
  8856                           
  8857                           ;Motor.c: 54: lMotor = pMotor;
  8858                           
  8859                           ;incstack = 0
  8860  015EBC  C063  F0CE         	movff	Motor_Move@pMotor,_lMotor
  8861  015EC0  C064  F0CF         	movff	Motor_Move@pMotor+1,_lMotor+1
  8862                           
  8863                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  8864  015EC4  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8865  015EC8  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8866  015ECC  50DE               	movf	postinc2,w,c
  8867  015ECE  10DE               	iorwf	postinc2,w,c
  8868  015ED0  A4D8               	btfss	status,2,c
  8869  015ED2  0012               	return	
  8870                           
  8871                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  8872                           
  8873                           ;Motor.c: 59: return 0;
  8874                           ;	Return value of _Motor_Move is never used
  8875  015ED4  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8876  015ED8  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8877  015EDC  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
  8878  015EE0  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  8879                           
  8880                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  8881  015EE4  C0BD  F060         	movff	_lStepFunction,Timer0_Start@pFunction
  8882  015EE8  C0BE  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  8883  015EEC  C0BF  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  8884  015EF0  ECAD  F0B0         	call	_Timer0_Start	;wreg free
  8885  015EF4  0012               	return	
  8886  015EF6                     __end_of_Motor_Move:
  8887                           	opt stack 0
  8888                           tblptru	equ	0xFF8
  8889                           tblptrh	equ	0xFF7
  8890                           tblptrl	equ	0xFF6
  8891                           tablat	equ	0xFF5
  8892                           prodh	equ	0xFF4
  8893                           prodl	equ	0xFF3
  8894                           postinc0	equ	0xFEE
  8895                           wreg	equ	0xFE8
  8896                           postdec1	equ	0xFE5
  8897                           fsr1h	equ	0xFE2
  8898                           fsr1l	equ	0xFE1
  8899                           indf2	equ	0xFDF
  8900                           postinc2	equ	0xFDE
  8901                           postdec2	equ	0xFDD
  8902                           fsr2h	equ	0xFDA
  8903                           fsr2l	equ	0xFD9
  8904                           status	equ	0xFD8
  8905                           
  8906 ;; *************** function _Timer0_Start *****************
  8907 ;; Defined at:
  8908 ;;		line 75 in file "Library/Timer0.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  8911 ;;		 -> Absolute function(1), Motor_Step(1), 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;		None
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      void 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8923 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;Total ram usage:        3 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    7
  8930 ;; This function calls:
  8931 ;;		Nothing
  8932 ;; This function is called by:
  8933 ;;		_Motor_Move
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text35
  8938  01615A                     __ptext35:
  8939                           	opt stack 0
  8940  01615A                     _Timer0_Start:
  8941                           	opt stack 21
  8942                           
  8943                           ;Timer0.c: 77: gISR = pFunction;
  8944                           
  8945                           ;incstack = 0
  8946  01615A  C060  F314         	movff	Timer0_Start@pFunction,_gISR
  8947  01615E  C061  F315         	movff	Timer0_Start@pFunction+1,_gISR+1
  8948  016162  C062  F316         	movff	Timer0_Start@pFunction+2,_gISR+2
  8949                           
  8950                           ;Timer0.c: 78: TMR0 = COUNTER;
  8951  016166  C029  FFD6         	movff	_COUNTER,4054	;volatile
  8952  01616A  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  8953                           
  8954                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  8955  01616E  50D5               	movf	4053,w,c	;volatile
  8956  016170  0100               	movlb	0	; () banked
  8957  016172  19DC               	xorwf	_INDEX& (0+255),w,b
  8958  016174  0BF8               	andlw	-8
  8959  016176  19DC               	xorwf	_INDEX& (0+255),w,b
  8960  016178  6ED5               	movwf	4053,c	;volatile
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  8964  01617A  94F2               	bcf	intcon,2,c	;volatile
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  8968  01617C  8AF2               	bsf	intcon,5,c	;volatile
  8969                           
  8970                           ; BSR set to: 0
  8971  01617E  0012               	return		;funcret
  8972  016180                     __end_of_Timer0_Start:
  8973                           	opt stack 0
  8974                           tblptru	equ	0xFF8
  8975                           tblptrh	equ	0xFF7
  8976                           tblptrl	equ	0xFF6
  8977                           tablat	equ	0xFF5
  8978                           prodh	equ	0xFF4
  8979                           prodl	equ	0xFF3
  8980                           intcon	equ	0xFF2
  8981                           postinc0	equ	0xFEE
  8982                           wreg	equ	0xFE8
  8983                           postdec1	equ	0xFE5
  8984                           fsr1h	equ	0xFE2
  8985                           fsr1l	equ	0xFE1
  8986                           indf2	equ	0xFDF
  8987                           postinc2	equ	0xFDE
  8988                           postdec2	equ	0xFDD
  8989                           fsr2h	equ	0xFDA
  8990                           fsr2l	equ	0xFD9
  8991                           status	equ	0xFD8
  8992                           
  8993 ;; *************** function _HMI_Render *****************
  8994 ;; Defined at:
  8995 ;;		line 138 in file "HMI.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;		None
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;  a               2    8[BANK0 ] unsigned short 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      void 
  9002 ;; Registers used:
  9003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;Total ram usage:        2 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    9
  9016 ;; This function calls:
  9017 ;;		_OutSeg
  9018 ;; This function is called by:
  9019 ;;		_mode1
  9020 ;;		_mode4
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           	psect	text36
  9025  015D4E                     __ptext36:
  9026                           	opt stack 0
  9027  015D4E                     _HMI_Render:
  9028                           	opt stack 20
  9029                           
  9030                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;incstack = 0
  9034  015D4E  0E00               	movlw	0
  9035  015D50  0100               	movlb	0	; () banked
  9036  015D52  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
  9037  015D54  0E00               	movlw	0
  9038  015D56  6F68               	movwf	HMI_Render@a& (0+255),b
  9039  015D58                     l14100:
  9040                           
  9041                           ; BSR set to: 0
  9042  015D58  0100               	movlb	0	; () banked
  9043  015D5A  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
  9044  015D5C  E116               	bnz	l1158
  9045  015D5E  0E08               	movlw	8
  9046  015D60  0100               	movlb	0	; () banked
  9047  015D62  5D68               	subwf	HMI_Render@a& (0+255),w,b
  9048  015D64  B0D8               	btfsc	status,0,c
  9049  015D66  0012               	return	
  9050                           
  9051                           ; BSR set to: 0
  9052                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9053                           
  9054                           ; BSR set to: 0
  9055                           
  9056                           ; BSR set to: 0
  9057  015D68  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
  9058  015D6C  0E2B               	movlw	low _HMIBoard
  9059  015D6E  0100               	movlb	0	; () banked
  9060  015D70  2568               	addwf	HMI_Render@a& (0+255),w,b
  9061  015D72  6ED9               	movwf	fsr2l,c
  9062  015D74  0E03               	movlw	high _HMIBoard
  9063  015D76  0100               	movlb	0	; () banked
  9064  015D78  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9065  015D7A  6EDA               	movwf	fsr2h,c
  9066  015D7C  50DF               	movf	indf2,w,c
  9067  015D7E  EC02  F0A7         	call	_OutSeg
  9068  015D82  0100               	movlb	0	; () banked
  9069  015D84  4B68               	infsnz	HMI_Render@a& (0+255),f,b
  9070  015D86  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
  9071  015D88  D7E7               	goto	l14100
  9072  015D8A                     l1158:
  9073                           
  9074                           ; BSR set to: 0
  9075  015D8A  0012               	return		;funcret
  9076  015D8C                     __end_of_HMI_Render:
  9077                           	opt stack 0
  9078                           tblptru	equ	0xFF8
  9079                           tblptrh	equ	0xFF7
  9080                           tblptrl	equ	0xFF6
  9081                           tablat	equ	0xFF5
  9082                           prodh	equ	0xFF4
  9083                           prodl	equ	0xFF3
  9084                           intcon	equ	0xFF2
  9085                           postinc0	equ	0xFEE
  9086                           wreg	equ	0xFE8
  9087                           postdec1	equ	0xFE5
  9088                           fsr1h	equ	0xFE2
  9089                           fsr1l	equ	0xFE1
  9090                           indf2	equ	0xFDF
  9091                           postinc2	equ	0xFDE
  9092                           postdec2	equ	0xFDD
  9093                           fsr2h	equ	0xFDA
  9094                           fsr2l	equ	0xFD9
  9095                           status	equ	0xFD8
  9096                           
  9097 ;; *************** function _OutSeg *****************
  9098 ;; Defined at:
  9099 ;;		line 54 in file "HMI.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;  pInput          1    wreg     unsigned char 
  9102 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;  pInput          1    6[BANK0 ] unsigned char 
  9105 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9106 ;; Return value:  Size  Location     Type
  9107 ;;                  1    wreg      void 
  9108 ;; Registers used:
  9109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9110 ;; Tracked objects:
  9111 ;;		On entry : 0/0
  9112 ;;		On exit  : 0/0
  9113 ;;		Unchanged: 0/0
  9114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9115 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;Total ram usage:        5 bytes
  9120 ;; Hardware stack levels used:    1
  9121 ;; Hardware stack levels required when called:    8
  9122 ;; This function calls:
  9123 ;;		_SPI_Send
  9124 ;; This function is called by:
  9125 ;;		_HMI_Render
  9126 ;;		_HMI_GRender
  9127 ;; This function uses a non-reentrant model
  9128 ;;
  9129                           
  9130                           	psect	text37
  9131  014E04                     __ptext37:
  9132                           	opt stack 0
  9133  014E04                     _OutSeg:
  9134                           	opt stack 20
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;incstack = 0
  9138                           ;OutSeg@pInput stored from wreg
  9139  014E04  0100               	movlb	0	; () banked
  9140  014E06  6F66               	movwf	OutSeg@pInput& (0+255),b
  9141                           
  9142                           ;HMI.c: 58: static UINT8 cur;
  9143                           ;HMI.c: 59: volatile UINT8 out;
  9144                           ;HMI.c: 60: static UINT8 segset;
  9145                           ;HMI.c: 61: static UINT8 a;
  9146                           ;HMI.c: 83: if (pSegment <= 8)
  9147  014E08  0E09               	movlw	9
  9148  014E0A  0100               	movlb	0	; () banked
  9149  014E0C  6163               	cpfslt	OutSeg@pSegment& (0+255),b
  9150  014E0E  0012               	return	
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;HMI.c: 84: {
  9154                           ;HMI.c: 85: cur = pInput;
  9155  014E10  C066  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9159  014E14  0E00               	movlw	0
  9160  014E16  6E3D               	movwf	OutSeg@a,c
  9161  014E18                     l13454:
  9162                           
  9163                           ; BSR set to: 0
  9164  014E18  0E07               	movlw	7
  9165  014E1A  643D               	cpfsgt	OutSeg@a,c
  9166  014E1C  D001               	goto	l1146
  9167  014E1E  D027               	goto	u9960
  9168  014E20                     l1146:
  9169                           
  9170                           ;HMI.c: 87: {
  9171                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9172                           
  9173                           ; BSR set to: 0
  9174  014E20  C03F  F064         	movff	OutSeg@cur,??_OutSeg
  9175  014E24  0E01               	movlw	1
  9176  014E26  0100               	movlb	0	; () banked
  9177  014E28  1764               	andwf	??_OutSeg& (0+255),f,b
  9178  014E2A  0E06               	movlw	6
  9179  014E2C  0100               	movlb	0	; () banked
  9180  014E2E  6F65               	movwf	(??_OutSeg+1)& (0+255),b
  9181  014E30                     u9955:
  9182  014E30  0100               	movlb	0	; () banked
  9183  014E32  90D8               	bcf	status,0,c
  9184  014E34  3764               	rlcf	??_OutSeg& (0+255),f,b
  9185  014E36  0100               	movlb	0	; () banked
  9186  014E38  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9187  014E3A  D7FA               	goto	u9955
  9188  014E3C  0100               	movlb	0	; () banked
  9189  014E3E  5164               	movf	??_OutSeg& (0+255),w,b
  9190  014E40  6E3E               	movwf	OutSeg@segset,c
  9191                           
  9192                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9193  014E42  0100               	movlb	0	; () banked
  9194  014E44  3963               	swapf	OutSeg@pSegment& (0+255),w,b
  9195  014E46  42E8               	rrncf	wreg,f,c
  9196  014E48  0BF8               	andlw	248
  9197  014E4A  103D               	iorwf	OutSeg@a,w,c
  9198  014E4C  103E               	iorwf	OutSeg@segset,w,c
  9199  014E4E  0100               	movlb	0	; () banked
  9200  014E50  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
  9201                           
  9202                           ;HMI.c: 90: cur >>= 1;
  9203  014E52  90D8               	bcf	status,0,c
  9204  014E54  323F               	rrcf	OutSeg@cur,f,c
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9208  014E56  0E65               	movlw	low _SPI1
  9209  014E58  0100               	movlb	0	; () banked
  9210  014E5A  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9211  014E5C  0E03               	movlw	high _SPI1
  9212  014E5E  0100               	movlb	0	; () banked
  9213  014E60  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9214  014E62  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9215  014E66  EC8B  F0A9         	call	_SPI_Send	;wreg free
  9216  014E6A  2A3D               	incf	OutSeg@a,f,c
  9217  014E6C  D7D5               	goto	l13454
  9218  014E6E                     u9960:
  9219                           
  9220                           ;HMI.c: 96: }
  9221                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9222  014E6E  0E65               	movlw	low _SPI1
  9223  014E70  0100               	movlb	0	; () banked
  9224  014E72  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9225  014E74  0E03               	movlw	high _SPI1
  9226  014E76  0100               	movlb	0	; () banked
  9227  014E78  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9228  014E7A  0E00               	movlw	0
  9229  014E7C  0100               	movlb	0	; () banked
  9230  014E7E  6F62               	movwf	SPI_Send@pData& (0+255),b
  9231  014E80  EC8B  F0A9         	call	_SPI_Send	;wreg free
  9232  014E84  0012               	return	
  9233  014E86                     __end_of_OutSeg:
  9234                           	opt stack 0
  9235                           tblptru	equ	0xFF8
  9236                           tblptrh	equ	0xFF7
  9237                           tblptrl	equ	0xFF6
  9238                           tablat	equ	0xFF5
  9239                           prodh	equ	0xFF4
  9240                           prodl	equ	0xFF3
  9241                           intcon	equ	0xFF2
  9242                           postinc0	equ	0xFEE
  9243                           wreg	equ	0xFE8
  9244                           postdec1	equ	0xFE5
  9245                           fsr1h	equ	0xFE2
  9246                           fsr1l	equ	0xFE1
  9247                           indf2	equ	0xFDF
  9248                           postinc2	equ	0xFDE
  9249                           postdec2	equ	0xFDD
  9250                           fsr2h	equ	0xFDA
  9251                           fsr2l	equ	0xFD9
  9252                           status	equ	0xFD8
  9253                           
  9254 ;; *************** function _HMI_Poll *****************
  9255 ;; Defined at:
  9256 ;;		line 252 in file "HMI.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;		None
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;		None
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  1    wreg      void 
  9263 ;; Registers used:
  9264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9274 ;;Total ram usage:        0 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:   15
  9277 ;; This function calls:
  9278 ;;		_Button_Poll
  9279 ;; This function is called by:
  9280 ;;		_mode1
  9281 ;;		_mode2
  9282 ;;		_mode4
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           	psect	text38
  9287  01506A                     __ptext38:
  9288                           	opt stack 0
  9289  01506A                     _HMI_Poll:
  9290                           	opt stack 14
  9291                           
  9292                           ;HMI.c: 254: TRISE = 0xFC;
  9293                           
  9294                           ;incstack = 0
  9295  01506A  0EFC               	movlw	252
  9296  01506C  6E96               	movwf	3990,c	;volatile
  9297                           
  9298                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  9299  01506E  0E5B               	movlw	low (_HMIBoard+48)
  9300  015070  0100               	movlb	0	; () banked
  9301  015072  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9302  015074  0E03               	movlw	high (_HMIBoard+48)
  9303  015076  0100               	movlb	0	; () banked
  9304  015078  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9305  01507A  0E01               	movlw	1
  9306  01507C  0100               	movlb	0	; () banked
  9307  01507E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9308  015080  EC13  F098         	call	_Button_Poll	;wreg free
  9309                           
  9310                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  9311  015084  0E3D               	movlw	low (_HMIBoard+18)
  9312  015086  0100               	movlb	0	; () banked
  9313  015088  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9314  01508A  0E03               	movlw	high (_HMIBoard+18)
  9315  01508C  0100               	movlb	0	; () banked
  9316  01508E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9317  015090  0E01               	movlw	1
  9318  015092  0100               	movlb	0	; () banked
  9319  015094  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9320  015096  EC13  F098         	call	_Button_Poll	;wreg free
  9321                           
  9322                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  9323  01509A  0E33               	movlw	low (_HMIBoard+8)
  9324  01509C  0100               	movlb	0	; () banked
  9325  01509E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9326  0150A0  0E03               	movlw	high (_HMIBoard+8)
  9327  0150A2  0100               	movlb	0	; () banked
  9328  0150A4  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9329  0150A6  0E01               	movlw	1
  9330  0150A8  0100               	movlb	0	; () banked
  9331  0150AA  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9332  0150AC  EC13  F098         	call	_Button_Poll	;wreg free
  9333                           
  9334                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  9335  0150B0  0E47               	movlw	low (_HMIBoard+28)
  9336  0150B2  0100               	movlb	0	; () banked
  9337  0150B4  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9338  0150B6  0E03               	movlw	high (_HMIBoard+28)
  9339  0150B8  0100               	movlb	0	; () banked
  9340  0150BA  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9341  0150BC  0E01               	movlw	1
  9342  0150BE  0100               	movlb	0	; () banked
  9343  0150C0  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9344  0150C2  EC13  F098         	call	_Button_Poll	;wreg free
  9345                           
  9346                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  9347  0150C6  0E51               	movlw	low (_HMIBoard+38)
  9348  0150C8  0100               	movlb	0	; () banked
  9349  0150CA  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9350  0150CC  0E03               	movlw	high (_HMIBoard+38)
  9351  0150CE  0100               	movlb	0	; () banked
  9352  0150D0  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9353  0150D2  0E01               	movlw	1
  9354  0150D4  0100               	movlb	0	; () banked
  9355  0150D6  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9356  0150D8  EC13  F098         	call	_Button_Poll	;wreg free
  9357  0150DC  0012               	return		;funcret
  9358  0150DE                     __end_of_HMI_Poll:
  9359                           	opt stack 0
  9360                           tblptru	equ	0xFF8
  9361                           tblptrh	equ	0xFF7
  9362                           tblptrl	equ	0xFF6
  9363                           tablat	equ	0xFF5
  9364                           prodh	equ	0xFF4
  9365                           prodl	equ	0xFF3
  9366                           intcon	equ	0xFF2
  9367                           postinc0	equ	0xFEE
  9368                           wreg	equ	0xFE8
  9369                           postdec1	equ	0xFE5
  9370                           fsr1h	equ	0xFE2
  9371                           fsr1l	equ	0xFE1
  9372                           indf2	equ	0xFDF
  9373                           postinc2	equ	0xFDE
  9374                           postdec2	equ	0xFDD
  9375                           fsr2h	equ	0xFDA
  9376                           fsr2l	equ	0xFD9
  9377                           status	equ	0xFD8
  9378                           
  9379 ;; *************** function _Button_Poll *****************
  9380 ;; Defined at:
  9381 ;;		line 57 in file "Library/Button.c"
  9382 ;; Parameters:    Size  Location     Type
  9383 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  9384 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  9385 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;  Pin             1   35[BANK0 ] unsigned char 
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  1    wreg      unsigned char 
  9390 ;; Registers used:
  9391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9397 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;Total ram usage:        9 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:   14
  9404 ;; This function calls:
  9405 ;;		_Event_DIPSwitch
  9406 ;;		_Event_NULL
  9407 ;;		_Event_TestButton
  9408 ;;		_HMI_DIPSwitch
  9409 ;;		_HMI_DownSwitch
  9410 ;;		_HMI_LeftSwitch
  9411 ;;		_HMI_RightSwitch
  9412 ;;		_HMI_UpSwitch
  9413 ;;		_MXK_DIPSwitch
  9414 ;;		_MXK_TestButton
  9415 ;; This function is called by:
  9416 ;;		_HMI_Poll
  9417 ;;		_MXK_Poll
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           	psect	text39
  9422  013026                     __ptext39:
  9423                           	opt stack 0
  9424  013026                     _Button_Poll:
  9425                           	opt stack 14
  9426                           
  9427                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  9428                           
  9429                           ;incstack = 0
  9430  013026  0100               	movlb	0	; () banked
  9431  013028  EE20 F007          	lfsr	2,7
  9432  01302C  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9433  01302E  26D9               	addwf	fsr2l,f,c
  9434  013030  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9435  013032  22DA               	addwfc	fsr2h,f,c
  9436  013034  D801               	call	u9718
  9437  013036  D00A               	goto	u9719
  9438  013038                     u9718:
  9439  013038  0005               	push	
  9440  01303A  6EFA               	movwf	pclath,c
  9441  01303C  50DE               	movf	postinc2,w,c
  9442  01303E  6EFD               	movwf	tosl,c
  9443  013040  50DE               	movf	postinc2,w,c
  9444  013042  6EFE               	movwf	tosh,c
  9445  013044  50DE               	movf	postinc2,w,c
  9446  013046  6EFF               	movwf	tosu,c
  9447  013048  50FA               	movf	pclath,w,c
  9448  01304A  0012               	return		;indir
  9449  01304C                     u9719:
  9450  01304C  0100               	movlb	0	; () banked
  9451  01304E  6F83               	movwf	Button_Poll@Pin& (0+255),b
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;Button.c: 61: if (pButton->mState == Pin)
  9455  013050  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  9456  013054  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  9457  013058  0100               	movlb	0	; () banked
  9458  01305A  5183               	movf	Button_Poll@Pin& (0+255),w,b
  9459  01305C  18DE               	xorwf	postinc2,w,c
  9460  01305E  A4D8               	btfss	status,2,c
  9461  013060  D021               	goto	l11
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;Button.c: 62: {
  9465                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  9466  013062  0100               	movlb	0	; () banked
  9467  013064  EE20 F001          	lfsr	2,1
  9468  013068  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9469  01306A  26D9               	addwf	fsr2l,f,c
  9470  01306C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9471  01306E  22DA               	addwfc	fsr2h,f,c
  9472  013070  0100               	movlb	0	; () banked
  9473  013072  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9474  013074  5CDE               	subwf	postinc2,w,c
  9475  013076  B0D8               	btfsc	status,0,c
  9476  013078  D00A               	goto	l12
  9477                           
  9478                           ; BSR set to: 0
  9479                           ;Button.c: 66: pButton->mCount = 0;
  9480  01307A  0100               	movlb	0	; () banked
  9481  01307C  EE20 F001          	lfsr	2,1
  9482  013080  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9483  013082  26D9               	addwf	fsr2l,f,c
  9484  013084  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9485  013086  22DA               	addwfc	fsr2h,f,c
  9486  013088  0E00               	movlw	0
  9487  01308A  6EDF               	movwf	indf2,c
  9488  01308C  0012               	return	
  9489  01308E                     l12:
  9490                           
  9491                           ; BSR set to: 0
  9492                           ;Button.c: 67: else
  9493                           ;Button.c: 68: pButton->mCount -= pIncrement;
  9494                           
  9495                           ; BSR set to: 0
  9496  01308E  0100               	movlb	0	; () banked
  9497  013090  EE20 F001          	lfsr	2,1
  9498  013094  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9499  013096  26D9               	addwf	fsr2l,f,c
  9500  013098  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9501  01309A  22DA               	addwfc	fsr2h,f,c
  9502  01309C  0100               	movlb	0	; () banked
  9503  01309E  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9504  0130A0  5EDF               	subwf	indf2,f,c
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;Button.c: 69: }
  9508  0130A2  0012               	return	
  9509  0130A4                     l11:
  9510                           
  9511                           ; BSR set to: 0
  9512                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  9513                           
  9514                           ; BSR set to: 0
  9515  0130A4  0100               	movlb	0	; () banked
  9516  0130A6  EE20 F001          	lfsr	2,1
  9517  0130AA  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9518  0130AC  26D9               	addwf	fsr2l,f,c
  9519  0130AE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9520  0130B0  22DA               	addwfc	fsr2h,f,c
  9521  0130B2  50DF               	movf	indf2,w,c
  9522  0130B4  0100               	movlb	0	; () banked
  9523  0130B6  6F7E               	movwf	??_Button_Poll& (0+255),b
  9524  0130B8  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
  9525  0130BA  0100               	movlb	0	; () banked
  9526  0130BC  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9527  0130BE  0100               	movlb	0	; () banked
  9528  0130C0  277E               	addwf	??_Button_Poll& (0+255),f,b
  9529  0130C2  0E00               	movlw	0
  9530  0130C4  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  9531  0130C6  0100               	movlb	0	; () banked
  9532  0130C8  EE20 F001          	lfsr	2,1
  9533  0130CC  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9534  0130CE  26D9               	addwf	fsr2l,f,c
  9535  0130D0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9536  0130D2  22DA               	addwfc	fsr2h,f,c
  9537  0130D4  50DF               	movf	indf2,w,c
  9538  0130D6  0100               	movlb	0	; () banked
  9539  0130D8  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  9540  0130DA  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  9541  0130DC  0100               	movlb	0	; () banked
  9542  0130DE  517E               	movf	??_Button_Poll& (0+255),w,b
  9543  0130E0  0100               	movlb	0	; () banked
  9544  0130E2  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  9545  0130E4  0100               	movlb	0	; () banked
  9546  0130E6  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
  9547  0130E8  0A80               	xorlw	128
  9548  0130EA  0100               	movlb	0	; () banked
  9549  0130EC  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
  9550  0130EE  0100               	movlb	0	; () banked
  9551  0130F0  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
  9552  0130F2  0A80               	xorlw	128
  9553  0130F4  0100               	movlb	0	; () banked
  9554  0130F6  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  9555  0130F8  B0D8               	btfsc	status,0,c
  9556  0130FA  0012               	return	
  9557                           
  9558                           ; BSR set to: 0
  9559                           ;Button.c: 73: {
  9560                           ;Button.c: 75: pButton->mCount += pIncrement;
  9561  0130FC  0100               	movlb	0	; () banked
  9562  0130FE  EE20 F001          	lfsr	2,1
  9563  013102  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9564  013104  26D9               	addwf	fsr2l,f,c
  9565  013106  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9566  013108  22DA               	addwfc	fsr2h,f,c
  9567  01310A  0100               	movlb	0	; () banked
  9568  01310C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9569  01310E  26DF               	addwf	indf2,f,c
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  9573  013110  0100               	movlb	0	; () banked
  9574  013112  EE20 F002          	lfsr	2,2
  9575  013116  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9576  013118  26D9               	addwf	fsr2l,f,c
  9577  01311A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9578  01311C  22DA               	addwfc	fsr2h,f,c
  9579  01311E  0100               	movlb	0	; () banked
  9580  013120  EE10 F001          	lfsr	1,1
  9581  013124  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9582  013126  26E1               	addwf	fsr1l,f,c
  9583  013128  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9584  01312A  22E2               	addwfc	fsr1h,f,c
  9585  01312C  50E7               	movf	indf1,w,c
  9586  01312E  0100               	movlb	0	; () banked
  9587  013130  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  9588  013132  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  9589  013134  50DE               	movf	postinc2,w,c
  9590  013136  0100               	movlb	0	; () banked
  9591  013138  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  9592  01313A  50DE               	movf	postinc2,w,c
  9593  01313C  0100               	movlb	0	; () banked
  9594  01313E  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  9595  013140  A0D8               	btfss	status,0,c
  9596  013142  0012               	return	
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;Button.c: 77: {
  9600                           ;Button.c: 79: pButton->mState = Pin;
  9601  013144  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  9602  013148  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  9603  01314C  C083  FFDF         	movff	Button_Poll@Pin,indf2
  9604                           
  9605                           ; BSR set to: 0
  9606                           ;Button.c: 80: pButton->mCount = 0;
  9607  013150  0100               	movlb	0	; () banked
  9608  013152  EE20 F001          	lfsr	2,1
  9609  013156  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9610  013158  26D9               	addwf	fsr2l,f,c
  9611  01315A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9612  01315C  22DA               	addwfc	fsr2h,f,c
  9613  01315E  0E00               	movlw	0
  9614  013160  6EDF               	movwf	indf2,c
  9615                           
  9616                           ; BSR set to: 0
  9617                           ;Button.c: 83: pButton->mFunction(Pin);
  9618  013162  0100               	movlb	0	; () banked
  9619  013164  EE20 F004          	lfsr	2,4
  9620  013168  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9621  01316A  26D9               	addwf	fsr2l,f,c
  9622  01316C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9623  01316E  22DA               	addwfc	fsr2h,f,c
  9624  013170  D801               	call	u9768
  9625  013172  0012               	return	
  9626  013174                     u9768:
  9627  013174  0005               	push	
  9628  013176  6EFA               	movwf	pclath,c
  9629  013178  50DE               	movf	postinc2,w,c
  9630  01317A  6EFD               	movwf	tosl,c
  9631  01317C  50DE               	movf	postinc2,w,c
  9632  01317E  6EFE               	movwf	tosh,c
  9633  013180  50DE               	movf	postinc2,w,c
  9634  013182  6EFF               	movwf	tosu,c
  9635  013184  50FA               	movf	pclath,w,c
  9636  013186  0100               	movlb	0	; () banked
  9637  013188  5183               	movf	Button_Poll@Pin& (0+255),w,b
  9638  01318A  0012               	return		;indir
  9639  01318C                     __end_of_Button_Poll:
  9640                           	opt stack 0
  9641                           tosu	equ	0xFFF
  9642                           tosh	equ	0xFFE
  9643                           tosl	equ	0xFFD
  9644                           pclath	equ	0xFFA
  9645                           tblptru	equ	0xFF8
  9646                           tblptrh	equ	0xFF7
  9647                           tblptrl	equ	0xFF6
  9648                           tablat	equ	0xFF5
  9649                           prodh	equ	0xFF4
  9650                           prodl	equ	0xFF3
  9651                           intcon	equ	0xFF2
  9652                           postinc0	equ	0xFEE
  9653                           wreg	equ	0xFE8
  9654                           indf1	equ	0xFE7
  9655                           postdec1	equ	0xFE5
  9656                           fsr1h	equ	0xFE2
  9657                           fsr1l	equ	0xFE1
  9658                           indf2	equ	0xFDF
  9659                           postinc2	equ	0xFDE
  9660                           postdec2	equ	0xFDD
  9661                           fsr2h	equ	0xFDA
  9662                           fsr2l	equ	0xFD9
  9663                           status	equ	0xFD8
  9664                           
  9665 ;; *************** function _Event_DIPSwitch *****************
  9666 ;; Defined at:
  9667 ;;		line 22 in file "Events.c"
  9668 ;; Parameters:    Size  Location     Type
  9669 ;;  pState          1    wreg     unsigned char 
  9670 ;; Auto vars:     Size  Location     Type
  9671 ;;  pState          1   25[BANK0 ] unsigned char 
  9672 ;;  Bar             1   26[BANK0 ] unsigned char 
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9686 ;;Total ram usage:        2 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:   13
  9689 ;; This function calls:
  9690 ;;		_HMI_GetBar
  9691 ;;		_HMI_SetBar
  9692 ;;		_LED_Toggle
  9693 ;; This function is called by:
  9694 ;;		_FunctInitButton
  9695 ;;		_Button_Poll
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           	psect	text40
  9700  016058                     __ptext40:
  9701                           	opt stack 0
  9702  016058                     _Event_DIPSwitch:
  9703                           	opt stack 14
  9704                           
  9705                           ;incstack = 0
  9706                           ;Event_DIPSwitch@pState stored from wreg
  9707  016058  0100               	movlb	0	; () banked
  9708  01605A  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
  9709                           
  9710                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  9711  01605C  ECA2  F0B2         	call	_HMI_GetBar
  9712  016060  0100               	movlb	0	; () banked
  9713  016062  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
  9714                           
  9715                           ; BSR set to: 0
  9716                           ;Events.c: 25: Bar &= 0x0F;
  9717  016064  0E0F               	movlw	15
  9718  016066  0100               	movlb	0	; () banked
  9719  016068  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  9720                           
  9721                           ; BSR set to: 0
  9722                           ;Events.c: 26: pState <<= 4;
  9723  01606A  0100               	movlb	0	; () banked
  9724  01606C  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  9725  01606E  0EF0               	movlw	240
  9726  016070  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  9730  016072  0100               	movlb	0	; () banked
  9731  016074  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
  9732  016076  0100               	movlb	0	; () banked
  9733  016078  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  9734  01607A  EC88  F0B2         	call	_HMI_SetBar
  9735                           
  9736                           ;Events.c: 32: LED_Toggle(eLED1);
  9737  01607E  0E00               	movlw	0
  9738  016080  EC50  F0AD         	call	_LED_Toggle
  9739  016084  0012               	return		;funcret
  9740  016086                     __end_of_Event_DIPSwitch:
  9741                           	opt stack 0
  9742                           tosu	equ	0xFFF
  9743                           tosh	equ	0xFFE
  9744                           tosl	equ	0xFFD
  9745                           pclath	equ	0xFFA
  9746                           tblptru	equ	0xFF8
  9747                           tblptrh	equ	0xFF7
  9748                           tblptrl	equ	0xFF6
  9749                           tablat	equ	0xFF5
  9750                           prodh	equ	0xFF4
  9751                           prodl	equ	0xFF3
  9752                           intcon	equ	0xFF2
  9753                           postinc0	equ	0xFEE
  9754                           wreg	equ	0xFE8
  9755                           indf1	equ	0xFE7
  9756                           postdec1	equ	0xFE5
  9757                           fsr1h	equ	0xFE2
  9758                           fsr1l	equ	0xFE1
  9759                           indf2	equ	0xFDF
  9760                           postinc2	equ	0xFDE
  9761                           postdec2	equ	0xFDD
  9762                           fsr2h	equ	0xFDA
  9763                           fsr2l	equ	0xFD9
  9764                           status	equ	0xFD8
  9765                           
  9766 ;; *************** function _Event_NULL *****************
  9767 ;; Defined at:
  9768 ;;		line 9 in file "Events.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;  pState          1    wreg     unsigned char 
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;  pState          1    0[COMRAM] unsigned char 
  9773 ;; Return value:  Size  Location     Type
  9774 ;;                  1    wreg      void 
  9775 ;; Registers used:
  9776 ;;		wreg
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;Total ram usage:        0 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; Hardware stack levels required when called:    7
  9789 ;; This function calls:
  9790 ;;		Nothing
  9791 ;; This function is called by:
  9792 ;;		_HMI_Init
  9793 ;;		_Button_Poll
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text41
  9798  016568                     __ptext41:
  9799                           	opt stack 0
  9800  016568                     _Event_NULL:
  9801                           	opt stack 20
  9802                           
  9803                           ;incstack = 0
  9804  016568  0012               	return		;funcret
  9805  01656A                     __end_of_Event_NULL:
  9806                           	opt stack 0
  9807                           tosu	equ	0xFFF
  9808                           tosh	equ	0xFFE
  9809                           tosl	equ	0xFFD
  9810                           pclath	equ	0xFFA
  9811                           tblptru	equ	0xFF8
  9812                           tblptrh	equ	0xFF7
  9813                           tblptrl	equ	0xFF6
  9814                           tablat	equ	0xFF5
  9815                           prodh	equ	0xFF4
  9816                           prodl	equ	0xFF3
  9817                           intcon	equ	0xFF2
  9818                           postinc0	equ	0xFEE
  9819                           wreg	equ	0xFE8
  9820                           indf1	equ	0xFE7
  9821                           postdec1	equ	0xFE5
  9822                           fsr1h	equ	0xFE2
  9823                           fsr1l	equ	0xFE1
  9824                           indf2	equ	0xFDF
  9825                           postinc2	equ	0xFDE
  9826                           postdec2	equ	0xFDD
  9827                           fsr2h	equ	0xFDA
  9828                           fsr2l	equ	0xFD9
  9829                           status	equ	0xFD8
  9830                           
  9831 ;; *************** function _Event_TestButton *****************
  9832 ;; Defined at:
  9833 ;;		line 52 in file "Events.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;  pState          1    wreg     unsigned char 
  9836 ;; Auto vars:     Size  Location     Type
  9837 ;;  pState          1   25[BANK0 ] unsigned char 
  9838 ;; Return value:  Size  Location     Type
  9839 ;;                  1    wreg      void 
  9840 ;; Registers used:
  9841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9842 ;; Tracked objects:
  9843 ;;		On entry : 0/0
  9844 ;;		On exit  : 0/0
  9845 ;;		Unchanged: 0/0
  9846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9850 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9851 ;;Total ram usage:        1 bytes
  9852 ;; Hardware stack levels used:    1
  9853 ;; Hardware stack levels required when called:   13
  9854 ;; This function calls:
  9855 ;;		_HMI_SetButton
  9856 ;;		_HMI_SetNumber
  9857 ;;		_LED_Toggle
  9858 ;; This function is called by:
  9859 ;;		_FunctInitButton
  9860 ;;		_Button_Poll
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           	psect	text42
  9865  015E46                     __ptext42:
  9866                           	opt stack 0
  9867  015E46                     _Event_TestButton:
  9868                           	opt stack 14
  9869                           
  9870                           ;incstack = 0
  9871                           ;Event_TestButton@pState stored from wreg
  9872  015E46  0100               	movlb	0	; () banked
  9873  015E48  6F79               	movwf	Event_TestButton@pState& (0+255),b
  9874                           
  9875                           ;Events.c: 56: static UINT8 j = 0;
  9876                           ;Events.c: 60: if (pState == 0)
  9877  015E4A  0100               	movlb	0	; () banked
  9878  015E4C  5179               	movf	Event_TestButton@pState& (0+255),w,b
  9879  015E4E  0100               	movlb	0	; () banked
  9880  015E50  A4D8               	btfss	status,2,c
  9881  015E52  D013               	goto	l1873
  9882                           
  9883                           ; BSR set to: 0
  9884                           ;Events.c: 61: {
  9885                           ;Events.c: 62: j++;
  9886  015E54  0100               	movlb	0	; () banked
  9887  015E56  2BD8               	incf	Event_TestButton@j& (0+255),f,b
  9888                           
  9889                           ; BSR set to: 0
  9890                           ;Events.c: 63: val += j;
  9891  015E58  0100               	movlb	0	; () banked
  9892  015E5A  51D8               	movf	Event_TestButton@j& (0+255),w,b
  9893  015E5C  0100               	movlb	0	; () banked
  9894  015E5E  27CC               	addwf	_val& (0+255),f,b
  9895  015E60  0E00               	movlw	0
  9896  015E62  23CD               	addwfc	(_val+1)& (0+255),f,b
  9897                           
  9898                           ; BSR set to: 0
  9899                           ;Events.c: 64: HMI_SetNumber( val );
  9900  015E64  C0CC  F076         	movff	_val,HMI_SetNumber@pInput
  9901  015E68  C0CD  F077         	movff	_val+1,HMI_SetNumber@pInput+1
  9902  015E6C  EC84  F0B0         	call	_HMI_SetNumber	;wreg free
  9903                           
  9904                           ;Events.c: 67: HMI_SetButton( j & 3 );
  9905  015E70  0100               	movlb	0	; () banked
  9906  015E72  51D8               	movf	Event_TestButton@j& (0+255),w,b
  9907  015E74  0B03               	andlw	3
  9908  015E76  EC61  F0A5         	call	_HMI_SetButton
  9909  015E7A                     l1873:
  9910                           
  9911                           ;Events.c: 68: }
  9912                           ;Events.c: 72: LED_Toggle(eLED1);
  9913  015E7A  0E00               	movlw	0
  9914  015E7C  EC50  F0AD         	call	_LED_Toggle
  9915  015E80  0012               	return		;funcret
  9916  015E82                     __end_of_Event_TestButton:
  9917                           	opt stack 0
  9918                           tosu	equ	0xFFF
  9919                           tosh	equ	0xFFE
  9920                           tosl	equ	0xFFD
  9921                           pclath	equ	0xFFA
  9922                           tblptru	equ	0xFF8
  9923                           tblptrh	equ	0xFF7
  9924                           tblptrl	equ	0xFF6
  9925                           tablat	equ	0xFF5
  9926                           prodh	equ	0xFF4
  9927                           prodl	equ	0xFF3
  9928                           intcon	equ	0xFF2
  9929                           postinc0	equ	0xFEE
  9930                           wreg	equ	0xFE8
  9931                           indf1	equ	0xFE7
  9932                           postdec1	equ	0xFE5
  9933                           fsr1h	equ	0xFE2
  9934                           fsr1l	equ	0xFE1
  9935                           indf2	equ	0xFDF
  9936                           postinc2	equ	0xFDE
  9937                           postdec2	equ	0xFDD
  9938                           fsr2h	equ	0xFDA
  9939                           fsr2l	equ	0xFD9
  9940                           status	equ	0xFD8
  9941                           
  9942 ;; *************** function _HMI_SetNumber *****************
  9943 ;; Defined at:
  9944 ;;		line 221 in file "HMI.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;  pInput          2   22[BANK0 ] int 
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;		None
  9949 ;; Return value:  Size  Location     Type
  9950 ;;                  1    wreg      void 
  9951 ;; Registers used:
  9952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9958 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;Total ram usage:        2 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:    9
  9965 ;; This function calls:
  9966 ;;		_HMI_SetSegments
  9967 ;;		_itos
  9968 ;; This function is called by:
  9969 ;;		_Event_TestButton
  9970 ;;		_mode1
  9971 ;;		_mode4
  9972 ;;		_Event_HMI_UpButton
  9973 ;;		_Event_HMI_DownButton
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           	psect	text43
  9978  016108                     __ptext43:
  9979                           	opt stack 0
  9980  016108                     _HMI_SetNumber:
  9981                           	opt stack 20
  9982                           
  9983                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  9984                           
  9985                           ;incstack = 0
  9986  016108  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
  9987  01610C  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
  9988  016110  0E2B               	movlw	low _HMIBoard
  9989  016112  0100               	movlb	0	; () banked
  9990  016114  6F6E               	movwf	itos@destination& (0+255),b
  9991  016116  0E03               	movlw	high _HMIBoard
  9992  016118  0100               	movlb	0	; () banked
  9993  01611A  6F6F               	movwf	(itos@destination+1)& (0+255),b
  9994  01611C  ECD4  F09C         	call	_itos	;wreg free
  9995                           
  9996                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  9997  016120  0E2B               	movlw	low _HMIBoard
  9998  016122  0100               	movlb	0	; () banked
  9999  016124  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 10000  016126  0E03               	movlw	high _HMIBoard
 10001  016128  0100               	movlb	0	; () banked
 10002  01612A  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 10003  01612C  ECC7  F0A0         	call	_HMI_SetSegments	;wreg free
 10004  016130  0012               	return		;funcret
 10005  016132                     __end_of_HMI_SetNumber:
 10006                           	opt stack 0
 10007                           tosu	equ	0xFFF
 10008                           tosh	equ	0xFFE
 10009                           tosl	equ	0xFFD
 10010                           pclath	equ	0xFFA
 10011                           tblptru	equ	0xFF8
 10012                           tblptrh	equ	0xFF7
 10013                           tblptrl	equ	0xFF6
 10014                           tablat	equ	0xFF5
 10015                           prodh	equ	0xFF4
 10016                           prodl	equ	0xFF3
 10017                           intcon	equ	0xFF2
 10018                           postinc0	equ	0xFEE
 10019                           wreg	equ	0xFE8
 10020                           indf1	equ	0xFE7
 10021                           postdec1	equ	0xFE5
 10022                           fsr1h	equ	0xFE2
 10023                           fsr1l	equ	0xFE1
 10024                           indf2	equ	0xFDF
 10025                           postinc2	equ	0xFDE
 10026                           postdec2	equ	0xFDD
 10027                           fsr2h	equ	0xFDA
 10028                           fsr2l	equ	0xFD9
 10029                           status	equ	0xFD8
 10030                           
 10031 ;; *************** function _itos *****************
 10032 ;; Defined at:
 10033 ;;		line 369 in file "Library/Types.c"
 10034 ;; Parameters:    Size  Location     Type
 10035 ;;  input           2   12[BANK0 ] unsigned short 
 10036 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 10037 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;  Out             2   20[BANK0 ] unsigned short 
 10040 ;;  Length          2   18[BANK0 ] unsigned short 
 10041 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 10042 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10043 ;; Return value:  Size  Location     Type
 10044 ;;                  1    wreg      void 
 10045 ;; Registers used:
 10046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10047 ;; Tracked objects:
 10048 ;;		On entry : 0/0
 10049 ;;		On exit  : 0/0
 10050 ;;		Unchanged: 0/0
 10051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10052 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;Total ram usage:       10 bytes
 10057 ;; Hardware stack levels used:    1
 10058 ;; Hardware stack levels required when called:    8
 10059 ;; This function calls:
 10060 ;;		___lwdiv
 10061 ;;		___lwmod
 10062 ;;		_reverse
 10063 ;; This function is called by:
 10064 ;;		_HMI_SetNumber
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           	psect	text44
 10069  0139A8                     __ptext44:
 10070                           	opt stack 0
 10071  0139A8                     _itos:
 10072                           	opt stack 20
 10073                           
 10074                           ;Types.c: 371: UINT16 Out = input;
 10075                           
 10076                           ;incstack = 0
 10077  0139A8  C06C  F074         	movff	itos@input,itos@Out
 10078  0139AC  C06D  F075         	movff	itos@input+1,itos@Out+1
 10079                           
 10080                           ;Types.c: 372: UINT16 Length = 0;
 10081  0139B0  0E00               	movlw	0
 10082  0139B2  0100               	movlb	0	; () banked
 10083  0139B4  6F73               	movwf	(itos@Length+1)& (0+255),b
 10084  0139B6  0E00               	movlw	0
 10085  0139B8  6F72               	movwf	itos@Length& (0+255),b
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;Types.c: 373: char *Data = destination;
 10089  0139BA  C06E  F070         	movff	itos@destination,itos@Data
 10090  0139BE  C06F  F071         	movff	itos@destination+1,itos@Data+1
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;Types.c: 374: if(Out == 0)
 10094  0139C2  0100               	movlb	0	; () banked
 10095  0139C4  5174               	movf	itos@Out& (0+255),w,b
 10096  0139C6  0100               	movlb	0	; () banked
 10097  0139C8  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 10098  0139CA  A4D8               	btfss	status,2,c
 10099  0139CC  D034               	goto	l929
 10100                           
 10101                           ; BSR set to: 0
 10102                           ;Types.c: 375: {
 10103                           ;Types.c: 376: Data[0] = (UINT16)'0';
 10104  0139CE  C070  FFD9         	movff	itos@Data,fsr2l
 10105  0139D2  C071  FFDA         	movff	itos@Data+1,fsr2h
 10106  0139D6  0E30               	movlw	48
 10107  0139D8  6EDF               	movwf	indf2,c
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;Types.c: 377: Length = 1;
 10111  0139DA  0E00               	movlw	0
 10112  0139DC  0100               	movlb	0	; () banked
 10113  0139DE  6F73               	movwf	(itos@Length+1)& (0+255),b
 10114  0139E0  0E01               	movlw	1
 10115  0139E2  6F72               	movwf	itos@Length& (0+255),b
 10116                           
 10117                           ;Types.c: 378: }
 10118  0139E4  D040               	goto	l928
 10119  0139E6                     
 10120                           ; BSR set to: 0
 10121                           ;Types.c: 382: {
 10122                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 10123                           
 10124                           ; BSR set to: 0
 10125  0139E6  C074  F067         	movff	itos@Out,___lwmod@dividend
 10126  0139EA  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 10127  0139EE  0E00               	movlw	0
 10128  0139F0  0100               	movlb	0	; () banked
 10129  0139F2  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 10130  0139F4  0E0A               	movlw	10
 10131  0139F6  6F69               	movwf	___lwmod@divisor& (0+255),b
 10132  0139F8  EC2A  F0AB         	call	___lwmod	;wreg free
 10133  0139FC  0100               	movlb	0	; () banked
 10134  0139FE  5167               	movf	?___lwmod& (0+255),w,b
 10135  013A00  0F30               	addlw	48
 10136  013A02  C070  FFD9         	movff	itos@Data,fsr2l
 10137  013A06  C071  FFDA         	movff	itos@Data+1,fsr2h
 10138  013A0A  6EDF               	movwf	indf2,c
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;Types.c: 384: Out /= 10;
 10142  013A0C  C074  F060         	movff	itos@Out,___lwdiv@dividend
 10143  013A10  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 10144  013A14  0E00               	movlw	0
 10145  013A16  0100               	movlb	0	; () banked
 10146  013A18  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10147  013A1A  0E0A               	movlw	10
 10148  013A1C  6F62               	movwf	___lwdiv@divisor& (0+255),b
 10149  013A1E  ECBE  F0A7         	call	___lwdiv	;wreg free
 10150  013A22  C060  F074         	movff	?___lwdiv,itos@Out
 10151  013A26  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 10152                           
 10153                           ;Types.c: 385: Length ++;
 10154  013A2A  0100               	movlb	0	; () banked
 10155  013A2C  4B72               	infsnz	itos@Length& (0+255),f,b
 10156  013A2E  2B73               	incf	(itos@Length+1)& (0+255),f,b
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;Types.c: 386: Data++;
 10160  013A30  0100               	movlb	0	; () banked
 10161  013A32  4B70               	infsnz	itos@Data& (0+255),f,b
 10162  013A34  2B71               	incf	(itos@Data+1)& (0+255),f,b
 10163  013A36                     l929:
 10164                           
 10165                           ; BSR set to: 0
 10166                           
 10167                           ; BSR set to: 0
 10168  013A36  0100               	movlb	0	; () banked
 10169  013A38  5174               	movf	itos@Out& (0+255),w,b
 10170  013A3A  0100               	movlb	0	; () banked
 10171  013A3C  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 10172  013A3E  B4D8               	btfsc	status,2,c
 10173  013A40  D008               	goto	u8940
 10174                           
 10175                           ; BSR set to: 0
 10176  013A42  0100               	movlb	0	; () banked
 10177  013A44  5173               	movf	(itos@Length+1)& (0+255),w,b
 10178  013A46  E105               	bnz	l12260
 10179  013A48  0E06               	movlw	6
 10180  013A4A  0100               	movlb	0	; () banked
 10181  013A4C  5D72               	subwf	itos@Length& (0+255),w,b
 10182  013A4E  A0D8               	btfss	status,0,c
 10183  013A50  D7CA               	goto	l930
 10184  013A52                     u8940:
 10185  013A52                     l12260:
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;Types.c: 387: }
 10189                           ;Types.c: 388: reverse(destination, Length);
 10190  013A52  C06E  F060         	movff	itos@destination,reverse@input
 10191  013A56  C06F  F061         	movff	itos@destination+1,reverse@input+1
 10192  013A5A  C072  F062         	movff	itos@Length,reverse@length
 10193  013A5E  C073  F063         	movff	itos@Length+1,reverse@length+1
 10194  013A62  EC55  F0A9         	call	_reverse	;wreg free
 10195  013A66                     l928:
 10196                           
 10197                           ;Types.c: 389: }
 10198                           ;Types.c: 390: destination[Length] = '\0';
 10199  013A66  0100               	movlb	0	; () banked
 10200  013A68  5172               	movf	itos@Length& (0+255),w,b
 10201  013A6A  0100               	movlb	0	; () banked
 10202  013A6C  256E               	addwf	itos@destination& (0+255),w,b
 10203  013A6E  6ED9               	movwf	fsr2l,c
 10204  013A70  0100               	movlb	0	; () banked
 10205  013A72  5173               	movf	(itos@Length+1)& (0+255),w,b
 10206  013A74  0100               	movlb	0	; () banked
 10207  013A76  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 10208  013A78  6EDA               	movwf	fsr2h,c
 10209  013A7A  0E00               	movlw	0
 10210  013A7C  6EDF               	movwf	indf2,c
 10211                           
 10212                           ; BSR set to: 0
 10213  013A7E  0012               	return		;funcret
 10214  013A80                     __end_of_itos:
 10215                           	opt stack 0
 10216                           tosu	equ	0xFFF
 10217                           tosh	equ	0xFFE
 10218                           tosl	equ	0xFFD
 10219                           pclath	equ	0xFFA
 10220                           tblptru	equ	0xFF8
 10221                           tblptrh	equ	0xFF7
 10222                           tblptrl	equ	0xFF6
 10223                           tablat	equ	0xFF5
 10224                           prodh	equ	0xFF4
 10225                           prodl	equ	0xFF3
 10226                           intcon	equ	0xFF2
 10227                           postinc0	equ	0xFEE
 10228                           wreg	equ	0xFE8
 10229                           indf1	equ	0xFE7
 10230                           postdec1	equ	0xFE5
 10231                           fsr1h	equ	0xFE2
 10232                           fsr1l	equ	0xFE1
 10233                           indf2	equ	0xFDF
 10234                           postinc2	equ	0xFDE
 10235                           postdec2	equ	0xFDD
 10236                           fsr2h	equ	0xFDA
 10237                           fsr2l	equ	0xFD9
 10238                           status	equ	0xFD8
 10239                           
 10240 ;; *************** function _reverse *****************
 10241 ;; Defined at:
 10242 ;;		line 357 in file "Library/Types.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;  input           2    0[BANK0 ] PTR unsigned char 
 10245 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10246 ;;  length          2    2[BANK0 ] unsigned short 
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 10249 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10250 ;;  tempVar         1    4[BANK0 ] unsigned char 
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  1    wreg      void 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;Total ram usage:        7 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    7
 10267 ;; This function calls:
 10268 ;;		Nothing
 10269 ;; This function is called by:
 10270 ;;		_itos
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           	psect	text45
 10275  0152AA                     __ptext45:
 10276                           	opt stack 0
 10277  0152AA                     _reverse:
 10278                           	opt stack 20
 10279                           
 10280                           ;Types.c: 359: char tempVar,
 10281                           ;Types.c: 360: *iterator = input + length;
 10282                           
 10283                           ; BSR set to: 0
 10284                           ;incstack = 0
 10285  0152AA  0100               	movlb	0	; () banked
 10286  0152AC  5162               	movf	reverse@length& (0+255),w,b
 10287  0152AE  0100               	movlb	0	; () banked
 10288  0152B0  2560               	addwf	reverse@input& (0+255),w,b
 10289  0152B2  0100               	movlb	0	; () banked
 10290  0152B4  6F65               	movwf	reverse@iterator& (0+255),b
 10291  0152B6  0100               	movlb	0	; () banked
 10292  0152B8  5163               	movf	(reverse@length+1)& (0+255),w,b
 10293  0152BA  0100               	movlb	0	; () banked
 10294  0152BC  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 10295  0152BE  0100               	movlb	0	; () banked
 10296  0152C0  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 10297                           
 10298                           ;Types.c: 362: while ( --iterator > input )
 10299  0152C2  D01A               	goto	l921
 10300  0152C4                     
 10301                           ; BSR set to: 0
 10302                           ;Types.c: 363: {
 10303                           ;Types.c: 364: tempVar = *input;
 10304                           
 10305                           ; BSR set to: 0
 10306  0152C4  C060  FFD9         	movff	reverse@input,fsr2l
 10307  0152C8  C061  FFDA         	movff	reverse@input+1,fsr2h
 10308  0152CC  50DF               	movf	indf2,w,c
 10309  0152CE  0100               	movlb	0	; () banked
 10310  0152D0  6F64               	movwf	reverse@tempVar& (0+255),b
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;Types.c: 365: *input++=*iterator;
 10314  0152D2  C065  FFD9         	movff	reverse@iterator,fsr2l
 10315  0152D6  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 10316  0152DA  C060  FFE1         	movff	reverse@input,fsr1l
 10317  0152DE  C061  FFE2         	movff	reverse@input+1,fsr1h
 10318  0152E2  CFDF FFE7          	movff	indf2,indf1
 10319                           
 10320                           ; BSR set to: 0
 10321  0152E6  0100               	movlb	0	; () banked
 10322  0152E8  4B60               	infsnz	reverse@input& (0+255),f,b
 10323  0152EA  2B61               	incf	(reverse@input+1)& (0+255),f,b
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;Types.c: 366: *iterator=tempVar;
 10327  0152EC  C065  FFD9         	movff	reverse@iterator,fsr2l
 10328  0152F0  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 10329  0152F4  C064  FFDF         	movff	reverse@tempVar,indf2
 10330  0152F8                     l921:
 10331                           
 10332                           ; BSR set to: 0
 10333                           
 10334                           ; BSR set to: 0
 10335  0152F8  0100               	movlb	0	; () banked
 10336  0152FA  0765               	decf	reverse@iterator& (0+255),f,b
 10337  0152FC  A0D8               	btfss	status,0,c
 10338  0152FE  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 10339  015300  0100               	movlb	0	; () banked
 10340  015302  5165               	movf	reverse@iterator& (0+255),w,b
 10341  015304  0100               	movlb	0	; () banked
 10342  015306  5D60               	subwf	reverse@input& (0+255),w,b
 10343  015308  0100               	movlb	0	; () banked
 10344  01530A  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 10345  01530C  0100               	movlb	0	; () banked
 10346  01530E  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 10347  015310  B0D8               	btfsc	status,0,c
 10348  015312  0012               	return	
 10349  015314  D7D7               	goto	l922
 10350  015316                     __end_of_reverse:
 10351                           	opt stack 0
 10352                           tosu	equ	0xFFF
 10353                           tosh	equ	0xFFE
 10354                           tosl	equ	0xFFD
 10355                           pclath	equ	0xFFA
 10356                           tblptru	equ	0xFF8
 10357                           tblptrh	equ	0xFF7
 10358                           tblptrl	equ	0xFF6
 10359                           tablat	equ	0xFF5
 10360                           prodh	equ	0xFF4
 10361                           prodl	equ	0xFF3
 10362                           intcon	equ	0xFF2
 10363                           postinc0	equ	0xFEE
 10364                           wreg	equ	0xFE8
 10365                           indf1	equ	0xFE7
 10366                           postdec1	equ	0xFE5
 10367                           fsr1h	equ	0xFE2
 10368                           fsr1l	equ	0xFE1
 10369                           indf2	equ	0xFDF
 10370                           postinc2	equ	0xFDE
 10371                           postdec2	equ	0xFDD
 10372                           fsr2h	equ	0xFDA
 10373                           fsr2l	equ	0xFD9
 10374                           status	equ	0xFD8
 10375                           
 10376 ;; *************** function ___lwmod *****************
 10377 ;; Defined at:
 10378 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 10379 ;; Parameters:    Size  Location     Type
 10380 ;;  dividend        2    7[BANK0 ] unsigned int 
 10381 ;;  divisor         2    9[BANK0 ] unsigned int 
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;  counter         1   11[BANK0 ] unsigned char 
 10384 ;; Return value:  Size  Location     Type
 10385 ;;                  2    7[BANK0 ] unsigned int 
 10386 ;; Registers used:
 10387 ;;		wreg, status,2, status,0
 10388 ;; Tracked objects:
 10389 ;;		On entry : 0/0
 10390 ;;		On exit  : 0/0
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10393 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;Total ram usage:        5 bytes
 10398 ;; Hardware stack levels used:    1
 10399 ;; Hardware stack levels required when called:    7
 10400 ;; This function calls:
 10401 ;;		Nothing
 10402 ;; This function is called by:
 10403 ;;		_itos
 10404 ;;		_printf
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           	psect	text46
 10409  015654                     __ptext46:
 10410                           	opt stack 0
 10411  015654                     ___lwmod:
 10412                           	opt stack 21
 10413                           
 10414                           ; BSR set to: 0
 10415                           ;incstack = 0
 10416  015654  0100               	movlb	0	; () banked
 10417  015656  5169               	movf	___lwmod@divisor& (0+255),w,b
 10418  015658  0100               	movlb	0	; () banked
 10419  01565A  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10420  01565C  B4D8               	btfsc	status,2,c
 10421  01565E  D026               	goto	l2847
 10422                           
 10423                           ; BSR set to: 0
 10424  015660  0E01               	movlw	1
 10425  015662  0100               	movlb	0	; () banked
 10426  015664  6F6B               	movwf	___lwmod@counter& (0+255),b
 10427  015666  D006               	goto	l2842
 10428  015668                     
 10429                           ; BSR set to: 0
 10430                           
 10431                           ; BSR set to: 0
 10432  015668  0100               	movlb	0	; () banked
 10433  01566A  90D8               	bcf	status,0,c
 10434  01566C  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 10435  01566E  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10436  015670  0100               	movlb	0	; () banked
 10437  015672  2B6B               	incf	___lwmod@counter& (0+255),f,b
 10438  015674                     l2842:
 10439                           
 10440                           ; BSR set to: 0
 10441                           
 10442                           ; BSR set to: 0
 10443  015674  0100               	movlb	0	; () banked
 10444  015676  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10445  015678  D7F7               	goto	l2843
 10446  01567A                     u8850:
 10447                           
 10448                           ; BSR set to: 0
 10449                           
 10450                           ; BSR set to: 0
 10451                           
 10452                           ; BSR set to: 0
 10453  01567A  0100               	movlb	0	; () banked
 10454  01567C  5169               	movf	___lwmod@divisor& (0+255),w,b
 10455  01567E  0100               	movlb	0	; () banked
 10456  015680  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 10457  015682  0100               	movlb	0	; () banked
 10458  015684  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10459  015686  0100               	movlb	0	; () banked
 10460  015688  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10461  01568A  A0D8               	btfss	status,0,c
 10462  01568C  D008               	goto	l2846
 10463                           
 10464                           ; BSR set to: 0
 10465  01568E  0100               	movlb	0	; () banked
 10466  015690  5169               	movf	___lwmod@divisor& (0+255),w,b
 10467  015692  0100               	movlb	0	; () banked
 10468  015694  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 10469  015696  0100               	movlb	0	; () banked
 10470  015698  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10471  01569A  0100               	movlb	0	; () banked
 10472  01569C  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10473  01569E                     l2846:
 10474                           
 10475                           ; BSR set to: 0
 10476                           
 10477                           ; BSR set to: 0
 10478  01569E  0100               	movlb	0	; () banked
 10479  0156A0  90D8               	bcf	status,0,c
 10480  0156A2  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10481  0156A4  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 10482                           
 10483                           ; BSR set to: 0
 10484  0156A6  0100               	movlb	0	; () banked
 10485  0156A8  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 10486  0156AA  D7E7               	goto	u8850
 10487  0156AC                     l2847:
 10488                           
 10489                           ; BSR set to: 0
 10490                           
 10491                           ; BSR set to: 0
 10492  0156AC  C067  F067         	movff	___lwmod@dividend,?___lwmod
 10493  0156B0  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 10494                           
 10495                           ; BSR set to: 0
 10496  0156B4  0012               	return		;funcret
 10497  0156B6                     __end_of___lwmod:
 10498                           	opt stack 0
 10499                           tosu	equ	0xFFF
 10500                           tosh	equ	0xFFE
 10501                           tosl	equ	0xFFD
 10502                           pclath	equ	0xFFA
 10503                           tblptru	equ	0xFF8
 10504                           tblptrh	equ	0xFF7
 10505                           tblptrl	equ	0xFF6
 10506                           tablat	equ	0xFF5
 10507                           prodh	equ	0xFF4
 10508                           prodl	equ	0xFF3
 10509                           intcon	equ	0xFF2
 10510                           postinc0	equ	0xFEE
 10511                           wreg	equ	0xFE8
 10512                           indf1	equ	0xFE7
 10513                           postdec1	equ	0xFE5
 10514                           fsr1h	equ	0xFE2
 10515                           fsr1l	equ	0xFE1
 10516                           indf2	equ	0xFDF
 10517                           postinc2	equ	0xFDE
 10518                           postdec2	equ	0xFDD
 10519                           fsr2h	equ	0xFDA
 10520                           fsr2l	equ	0xFD9
 10521                           status	equ	0xFD8
 10522                           
 10523 ;; *************** function ___lwdiv *****************
 10524 ;; Defined at:
 10525 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;  dividend        2    0[BANK0 ] unsigned int 
 10528 ;;  divisor         2    2[BANK0 ] unsigned int 
 10529 ;; Auto vars:     Size  Location     Type
 10530 ;;  quotient        2    5[BANK0 ] unsigned int 
 10531 ;;  counter         1    4[BANK0 ] unsigned char 
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  2    0[BANK0 ] unsigned int 
 10534 ;; Registers used:
 10535 ;;		wreg, status,2, status,0
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10541 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;Total ram usage:        7 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:    7
 10548 ;; This function calls:
 10549 ;;		Nothing
 10550 ;; This function is called by:
 10551 ;;		_itos
 10552 ;;		_printf
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           	psect	text47
 10557  014F7C                     __ptext47:
 10558                           	opt stack 0
 10559  014F7C                     ___lwdiv:
 10560                           	opt stack 21
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;incstack = 0
 10564  014F7C  0E00               	movlw	0
 10565  014F7E  0100               	movlb	0	; () banked
 10566  014F80  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10567  014F82  0E00               	movlw	0
 10568  014F84  6F65               	movwf	___lwdiv@quotient& (0+255),b
 10569                           
 10570                           ; BSR set to: 0
 10571  014F86  0100               	movlb	0	; () banked
 10572  014F88  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10573  014F8A  0100               	movlb	0	; () banked
 10574  014F8C  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10575  014F8E  B4D8               	btfsc	status,2,c
 10576  014F90  D02C               	goto	l2837
 10577                           
 10578                           ; BSR set to: 0
 10579  014F92  0E01               	movlw	1
 10580  014F94  0100               	movlb	0	; () banked
 10581  014F96  6F64               	movwf	___lwdiv@counter& (0+255),b
 10582  014F98  D006               	goto	l2832
 10583  014F9A                     
 10584                           ; BSR set to: 0
 10585                           
 10586                           ; BSR set to: 0
 10587  014F9A  0100               	movlb	0	; () banked
 10588  014F9C  90D8               	bcf	status,0,c
 10589  014F9E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 10590  014FA0  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10591  014FA2  0100               	movlb	0	; () banked
 10592  014FA4  2B64               	incf	___lwdiv@counter& (0+255),f,b
 10593  014FA6                     l2832:
 10594                           
 10595                           ; BSR set to: 0
 10596                           
 10597                           ; BSR set to: 0
 10598  014FA6  0100               	movlb	0	; () banked
 10599  014FA8  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10600  014FAA  D7F7               	goto	l2833
 10601  014FAC                     u8820:
 10602                           
 10603                           ; BSR set to: 0
 10604                           
 10605                           ; BSR set to: 0
 10606                           
 10607                           ; BSR set to: 0
 10608  014FAC  0100               	movlb	0	; () banked
 10609  014FAE  90D8               	bcf	status,0,c
 10610  014FB0  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 10611  014FB2  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10612                           
 10613                           ; BSR set to: 0
 10614  014FB4  0100               	movlb	0	; () banked
 10615  014FB6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10616  014FB8  0100               	movlb	0	; () banked
 10617  014FBA  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 10618  014FBC  0100               	movlb	0	; () banked
 10619  014FBE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10620  014FC0  0100               	movlb	0	; () banked
 10621  014FC2  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10622  014FC4  A0D8               	btfss	status,0,c
 10623  014FC6  D00A               	goto	l2836
 10624                           
 10625                           ; BSR set to: 0
 10626  014FC8  0100               	movlb	0	; () banked
 10627  014FCA  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10628  014FCC  0100               	movlb	0	; () banked
 10629  014FCE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 10630  014FD0  0100               	movlb	0	; () banked
 10631  014FD2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10632  014FD4  0100               	movlb	0	; () banked
 10633  014FD6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10634                           
 10635                           ; BSR set to: 0
 10636  014FD8  0100               	movlb	0	; () banked
 10637  014FDA  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 10638  014FDC                     l2836:
 10639                           
 10640                           ; BSR set to: 0
 10641                           
 10642                           ; BSR set to: 0
 10643  014FDC  0100               	movlb	0	; () banked
 10644  014FDE  90D8               	bcf	status,0,c
 10645  014FE0  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10646  014FE2  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 10647                           
 10648                           ; BSR set to: 0
 10649  014FE4  0100               	movlb	0	; () banked
 10650  014FE6  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 10651  014FE8  D7E1               	goto	u8820
 10652  014FEA                     l2837:
 10653                           
 10654                           ; BSR set to: 0
 10655                           
 10656                           ; BSR set to: 0
 10657  014FEA  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 10658  014FEE  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10659                           
 10660                           ; BSR set to: 0
 10661  014FF2  0012               	return		;funcret
 10662  014FF4                     __end_of___lwdiv:
 10663                           	opt stack 0
 10664                           tosu	equ	0xFFF
 10665                           tosh	equ	0xFFE
 10666                           tosl	equ	0xFFD
 10667                           pclath	equ	0xFFA
 10668                           tblptru	equ	0xFF8
 10669                           tblptrh	equ	0xFF7
 10670                           tblptrl	equ	0xFF6
 10671                           tablat	equ	0xFF5
 10672                           prodh	equ	0xFF4
 10673                           prodl	equ	0xFF3
 10674                           intcon	equ	0xFF2
 10675                           postinc0	equ	0xFEE
 10676                           wreg	equ	0xFE8
 10677                           indf1	equ	0xFE7
 10678                           postdec1	equ	0xFE5
 10679                           fsr1h	equ	0xFE2
 10680                           fsr1l	equ	0xFE1
 10681                           indf2	equ	0xFDF
 10682                           postinc2	equ	0xFDE
 10683                           postdec2	equ	0xFDD
 10684                           fsr2h	equ	0xFDA
 10685                           fsr2l	equ	0xFD9
 10686                           status	equ	0xFD8
 10687                           
 10688 ;; *************** function _HMI_SetSegments *****************
 10689 ;; Defined at:
 10690 ;;		line 226 in file "HMI.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 10693 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;  in              2    4[BANK0 ] unsigned short 
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  1    wreg      void 
 10698 ;; Registers used:
 10699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10705 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10706 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10708 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10709 ;;Total ram usage:        5 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; Hardware stack levels required when called:    8
 10712 ;; This function calls:
 10713 ;;		_ToSegment
 10714 ;; This function is called by:
 10715 ;;		_HMI_SetNumber
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           	psect	text48
 10720  01418E                     __ptext48:
 10721                           	opt stack 0
 10722  01418E                     _HMI_SetSegments:
 10723                           	opt stack 20
 10724                           
 10725                           ;HMI.c: 228: UINT16 in=0;
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;incstack = 0
 10729  01418E  0E00               	movlw	0
 10730  014190  0100               	movlb	0	; () banked
 10731  014192  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 10732  014194  0E00               	movlw	0
 10733  014196  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 10734                           
 10735                           ;HMI.c: 229: while(*pString)
 10736  014198  D038               	goto	l1202
 10737  01419A                     
 10738                           ; BSR set to: 0
 10739                           ;HMI.c: 230: {
 10740                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 10741                           
 10742                           ; BSR set to: 0
 10743  01419A  0E2B               	movlw	low _HMIBoard
 10744  01419C  0100               	movlb	0	; () banked
 10745  01419E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10746  0141A0  6ED9               	movwf	fsr2l,c
 10747  0141A2  0E03               	movlw	high _HMIBoard
 10748  0141A4  0100               	movlb	0	; () banked
 10749  0141A6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10750  0141A8  6EDA               	movwf	fsr2h,c
 10751  0141AA  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 10752  0141AE  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 10753  0141B2  50E7               	movf	indf1,w,c
 10754  0141B4  EC10  F08C         	call	_ToSegment
 10755  0141B8  6EDF               	movwf	indf2,c
 10756                           
 10757                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 10758  0141BA  0E2B               	movlw	low _HMIBoard
 10759  0141BC  0100               	movlb	0	; () banked
 10760  0141BE  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10761  0141C0  6ED9               	movwf	fsr2l,c
 10762  0141C2  0E03               	movlw	high _HMIBoard
 10763  0141C4  0100               	movlb	0	; () banked
 10764  0141C6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10765  0141C8  6EDA               	movwf	fsr2h,c
 10766  0141CA  0E80               	movlw	128
 10767  0141CC  18DE               	xorwf	postinc2,w,c
 10768  0141CE  A4D8               	btfss	status,2,c
 10769  0141D0  D00E               	goto	l1201
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;HMI.c: 234: {
 10773                           ;HMI.c: 235: in--;
 10774  0141D2  0100               	movlb	0	; () banked
 10775  0141D4  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 10776  0141D6  A0D8               	btfss	status,0,c
 10777  0141D8  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 10781  0141DA  0E2B               	movlw	low _HMIBoard
 10782  0141DC  0100               	movlb	0	; () banked
 10783  0141DE  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10784  0141E0  6ED9               	movwf	fsr2l,c
 10785  0141E2  0E03               	movlw	high _HMIBoard
 10786  0141E4  0100               	movlb	0	; () banked
 10787  0141E6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10788  0141E8  6EDA               	movwf	fsr2h,c
 10789  0141EA  0E00               	movlw	0
 10790  0141EC  8EDB               	bsf	plusw2,7,c
 10791  0141EE                     l1201:
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;HMI.c: 237: }
 10795                           ;HMI.c: 239: pString++;
 10796                           
 10797                           ; BSR set to: 0
 10798  0141EE  0100               	movlb	0	; () banked
 10799  0141F0  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 10800  0141F2  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;HMI.c: 240: in++;
 10804  0141F4  0100               	movlb	0	; () banked
 10805  0141F6  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10806  0141F8  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;HMI.c: 241: if (in>=6)
 10810  0141FA  0100               	movlb	0	; () banked
 10811  0141FC  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10812  0141FE  E11A               	bnz	l12312
 10813  014200  0E06               	movlw	6
 10814  014202  0100               	movlb	0	; () banked
 10815  014204  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 10816  014206  B0D8               	btfsc	status,0,c
 10817  014208  D015               	goto	l1204
 10818  01420A                     l1202:
 10819                           
 10820                           ; BSR set to: 0
 10821                           
 10822                           ; BSR set to: 0
 10823                           
 10824                           ; BSR set to: 0
 10825  01420A  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 10826  01420E  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 10827  014212  50DF               	movf	indf2,w,c
 10828  014214  B4D8               	btfsc	status,2,c
 10829  014216  D00E               	goto	l1204
 10830  014218  D7C0               	goto	l1200
 10831  01421A                     
 10832                           ; BSR set to: 0
 10833                           ;HMI.c: 245: {
 10834                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 10835                           
 10836                           ; BSR set to: 0
 10837  01421A  0E2B               	movlw	low _HMIBoard
 10838  01421C  0100               	movlb	0	; () banked
 10839  01421E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10840  014220  6ED9               	movwf	fsr2l,c
 10841  014222  0E03               	movlw	high _HMIBoard
 10842  014224  0100               	movlb	0	; () banked
 10843  014226  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10844  014228  6EDA               	movwf	fsr2h,c
 10845  01422A  0E00               	movlw	0
 10846  01422C  6EDF               	movwf	indf2,c
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;HMI.c: 247: in++;
 10850  01422E  0100               	movlb	0	; () banked
 10851  014230  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10852  014232  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10853  014234                     l1204:
 10854  014234                     l12312:
 10855                           
 10856                           ; BSR set to: 0
 10857  014234  0100               	movlb	0	; () banked
 10858  014236  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10859  014238  E106               	bnz	l1207
 10860  01423A  0E06               	movlw	6
 10861  01423C  0100               	movlb	0	; () banked
 10862  01423E  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 10863  014240  B0D8               	btfsc	status,0,c
 10864  014242  0012               	return	
 10865  014244  D7EA               	goto	l1205
 10866  014246                     l1207:
 10867                           
 10868                           ; BSR set to: 0
 10869  014246  0012               	return		;funcret
 10870  014248                     __end_of_HMI_SetSegments:
 10871                           	opt stack 0
 10872                           tosu	equ	0xFFF
 10873                           tosh	equ	0xFFE
 10874                           tosl	equ	0xFFD
 10875                           pclath	equ	0xFFA
 10876                           tblptru	equ	0xFF8
 10877                           tblptrh	equ	0xFF7
 10878                           tblptrl	equ	0xFF6
 10879                           tablat	equ	0xFF5
 10880                           prodh	equ	0xFF4
 10881                           prodl	equ	0xFF3
 10882                           intcon	equ	0xFF2
 10883                           postinc0	equ	0xFEE
 10884                           wreg	equ	0xFE8
 10885                           indf1	equ	0xFE7
 10886                           postdec1	equ	0xFE5
 10887                           fsr1h	equ	0xFE2
 10888                           fsr1l	equ	0xFE1
 10889                           indf2	equ	0xFDF
 10890                           postinc2	equ	0xFDE
 10891                           postdec2	equ	0xFDD
 10892                           plusw2	equ	0xFDB
 10893                           fsr2h	equ	0xFDA
 10894                           fsr2l	equ	0xFD9
 10895                           status	equ	0xFD8
 10896                           
 10897 ;; *************** function _ToSegment *****************
 10898 ;; Defined at:
 10899 ;;		line 284 in file "Library/Types.c"
 10900 ;; Parameters:    Size  Location     Type
 10901 ;;  pCHR            1    wreg     unsigned char 
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;  pCHR            1    0[BANK0 ] unsigned char 
 10904 ;; Return value:  Size  Location     Type
 10905 ;;                  1    wreg      unsigned char 
 10906 ;; Registers used:
 10907 ;;		wreg, status,2, status,0
 10908 ;; Tracked objects:
 10909 ;;		On entry : 0/0
 10910 ;;		On exit  : 0/0
 10911 ;;		Unchanged: 0/0
 10912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10916 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10917 ;;Total ram usage:        1 bytes
 10918 ;; Hardware stack levels used:    1
 10919 ;; Hardware stack levels required when called:    7
 10920 ;; This function calls:
 10921 ;;		Nothing
 10922 ;; This function is called by:
 10923 ;;		_HMI_SetSegments
 10924 ;; This function uses a non-reentrant model
 10925 ;;
 10926                           
 10927                           	psect	text49
 10928  011820                     __ptext49:
 10929                           	opt stack 0
 10930  011820                     _ToSegment:
 10931                           	opt stack 20
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;incstack = 0
 10935                           ;ToSegment@pCHR stored from wreg
 10936  011820  0100               	movlb	0	; () banked
 10937  011822  6F60               	movwf	ToSegment@pCHR& (0+255),b
 10938                           
 10939                           ;Types.c: 286: switch(pCHR)
 10940  011824  D07E               	goto	l853
 10941  011826  0E3F               	movlw	63
 10942  011828  0012               	return	
 10943  01182A  0E06               	movlw	6
 10944  01182C  0012               	return	
 10945  01182E  0E5B               	movlw	91
 10946  011830  0012               	return	
 10947  011832  0E4F               	movlw	79
 10948  011834  0012               	return	
 10949  011836  0E66               	movlw	102
 10950  011838  0012               	return	
 10951  01183A  0E6D               	movlw	109
 10952  01183C  0012               	return	
 10953  01183E  0E7D               	movlw	125
 10954  011840  0012               	return	
 10955  011842  0E07               	movlw	7
 10956  011844  0012               	return	
 10957  011846  0E7F               	movlw	127
 10958  011848  0012               	return	
 10959  01184A  0E6F               	movlw	111
 10960  01184C  0012               	return	
 10961  01184E  0E5F               	movlw	95
 10962  011850  0012               	return	
 10963  011852  0E7C               	movlw	124
 10964  011854  0012               	return	
 10965  011856  0E58               	movlw	88
 10966  011858  0012               	return	
 10967  01185A  0E5E               	movlw	94
 10968  01185C  0012               	return	
 10969  01185E  0E7B               	movlw	123
 10970  011860  0012               	return	
 10971  011862  0E71               	movlw	113
 10972  011864  0012               	return	
 10973  011866  0E6F               	movlw	111
 10974  011868  0012               	return	
 10975  01186A  0E74               	movlw	116
 10976  01186C  0012               	return	
 10977  01186E  0E04               	movlw	4
 10978  011870  0012               	return	
 10979  011872  0E0E               	movlw	14
 10980  011874  0012               	return	
 10981  011876  0E7A               	movlw	122
 10982  011878  0012               	return	
 10983  01187A  0E06               	movlw	6
 10984  01187C  0012               	return	
 10985  01187E  0E14               	movlw	20
 10986  011880  0012               	return	
 10987  011882  0E54               	movlw	84
 10988  011884  0012               	return	
 10989  011886  0E5C               	movlw	92
 10990  011888  0012               	return	
 10991  01188A  0E73               	movlw	115
 10992  01188C  0012               	return	
 10993  01188E  0E67               	movlw	103
 10994  011890  0012               	return	
 10995  011892  0E50               	movlw	80
 10996  011894  0012               	return	
 10997  011896  0E6D               	movlw	109
 10998  011898  0012               	return	
 10999  01189A  0E78               	movlw	120
 11000  01189C  0012               	return	
 11001  01189E  0E1C               	movlw	28
 11002  0118A0  0012               	return	
 11003  0118A2  0E62               	movlw	98
 11004  0118A4  0012               	return	
 11005  0118A6  0E2A               	movlw	42
 11006  0118A8  0012               	return	
 11007  0118AA  0E64               	movlw	100
 11008  0118AC  0012               	return	
 11009  0118AE  0E6E               	movlw	110
 11010  0118B0  0012               	return	
 11011  0118B2  0E5B               	movlw	91
 11012  0118B4  0012               	return	
 11013  0118B6  0E77               	movlw	119
 11014  0118B8  0012               	return	
 11015  0118BA  0E7F               	movlw	127
 11016  0118BC  0012               	return	
 11017  0118BE  0E39               	movlw	57
 11018  0118C0  0012               	return	
 11019  0118C2  0E3F               	movlw	63
 11020  0118C4  0012               	return	
 11021  0118C6  0E79               	movlw	121
 11022  0118C8  0012               	return	
 11023  0118CA  0E71               	movlw	113
 11024  0118CC  0012               	return	
 11025  0118CE  0E3D               	movlw	61
 11026  0118D0  0012               	return	
 11027  0118D2  0E76               	movlw	118
 11028  0118D4  0012               	return	
 11029  0118D6  0E06               	movlw	6
 11030  0118D8  0012               	return	
 11031  0118DA  0E1E               	movlw	30
 11032  0118DC  0012               	return	
 11033  0118DE  0E57               	movlw	87
 11034  0118E0  0012               	return	
 11035  0118E2  0E38               	movlw	56
 11036  0118E4  0012               	return	
 11037  0118E6  0E76               	movlw	118
 11038  0118E8  0012               	return	
 11039  0118EA  0E76               	movlw	118
 11040  0118EC  0012               	return	
 11041  0118EE  0E3F               	movlw	63
 11042  0118F0  0012               	return	
 11043  0118F2  0E73               	movlw	115
 11044  0118F4  0012               	return	
 11045  0118F6  0E3F               	movlw	63
 11046  0118F8  0012               	return	
 11047  0118FA  0E77               	movlw	119
 11048  0118FC  0012               	return	
 11049  0118FE  0E6D               	movlw	109
 11050  011900  0012               	return	
 11051  011902  0E31               	movlw	49
 11052  011904  0012               	return	
 11053  011906  0E3E               	movlw	62
 11054  011908  0012               	return	
 11055  01190A  0E3E               	movlw	62
 11056  01190C  0012               	return	
 11057  01190E  0E7E               	movlw	126
 11058  011910  0012               	return	
 11059  011912  0E76               	movlw	118
 11060  011914  0012               	return	
 11061  011916  0E66               	movlw	102
 11062  011918  0012               	return	
 11063  01191A  0E5B               	movlw	91
 11064  01191C  0012               	return	
 11065  01191E  0E80               	movlw	128
 11066  011920  0012               	return	
 11067  011922                     l853:
 11068  011922  0100               	movlb	0	; () banked
 11069  011924  5160               	movf	ToSegment@pCHR& (0+255),w,b
 11070                           
 11071                           ; Switch size 1, requested type "space"
 11072                           ; Number of cases is 63, Range of values is 46 to 122
 11073                           ; switch strategies available:
 11074                           ; Name         Instructions Cycles
 11075                           ; simple_byte          190    96 (average)
 11076                           ;	Chosen strategy is simple_byte
 11077  011926  0A2E               	xorlw	46	; case 46
 11078  011928  B4D8               	btfsc	status,2,c
 11079  01192A  D7F9               	goto	l917
 11080  01192C  0A1E               	xorlw	30	; case 48
 11081  01192E  B4D8               	btfsc	status,2,c
 11082  011930  D77A               	goto	l854
 11083  011932  0A01               	xorlw	1	; case 49
 11084  011934  B4D8               	btfsc	status,2,c
 11085  011936  D779               	goto	l856
 11086  011938  0A03               	xorlw	3	; case 50
 11087  01193A  B4D8               	btfsc	status,2,c
 11088  01193C  D778               	goto	l857
 11089  01193E  0A01               	xorlw	1	; case 51
 11090  011940  B4D8               	btfsc	status,2,c
 11091  011942  D777               	goto	l858
 11092  011944  0A07               	xorlw	7	; case 52
 11093  011946  B4D8               	btfsc	status,2,c
 11094  011948  D776               	goto	l859
 11095  01194A  0A01               	xorlw	1	; case 53
 11096  01194C  B4D8               	btfsc	status,2,c
 11097  01194E  D775               	goto	l860
 11098  011950  0A03               	xorlw	3	; case 54
 11099  011952  B4D8               	btfsc	status,2,c
 11100  011954  D774               	goto	l861
 11101  011956  0A01               	xorlw	1	; case 55
 11102  011958  B4D8               	btfsc	status,2,c
 11103  01195A  D773               	goto	l862
 11104  01195C  0A0F               	xorlw	15	; case 56
 11105  01195E  B4D8               	btfsc	status,2,c
 11106  011960  D772               	goto	l863
 11107  011962  0A01               	xorlw	1	; case 57
 11108  011964  B4D8               	btfsc	status,2,c
 11109  011966  D771               	goto	l864
 11110  011968  0A78               	xorlw	120	; case 65
 11111  01196A  B4D8               	btfsc	status,2,c
 11112  01196C  D7A4               	goto	l891
 11113  01196E  0A03               	xorlw	3	; case 66
 11114  011970  B4D8               	btfsc	status,2,c
 11115  011972  D7A3               	goto	l892
 11116  011974  0A01               	xorlw	1	; case 67
 11117  011976  B4D8               	btfsc	status,2,c
 11118  011978  D7A2               	goto	l893
 11119  01197A  0A07               	xorlw	7	; case 68
 11120  01197C  B4D8               	btfsc	status,2,c
 11121  01197E  D7A1               	goto	l894
 11122  011980  0A01               	xorlw	1	; case 69
 11123  011982  B4D8               	btfsc	status,2,c
 11124  011984  D7A0               	goto	l895
 11125  011986  0A03               	xorlw	3	; case 70
 11126  011988  B4D8               	btfsc	status,2,c
 11127  01198A  D79F               	goto	l896
 11128  01198C  0A01               	xorlw	1	; case 71
 11129  01198E  B4D8               	btfsc	status,2,c
 11130  011990  D79E               	goto	l897
 11131  011992  0A0F               	xorlw	15	; case 72
 11132  011994  B4D8               	btfsc	status,2,c
 11133  011996  D79D               	goto	l898
 11134  011998  0A01               	xorlw	1	; case 73
 11135  01199A  B4D8               	btfsc	status,2,c
 11136  01199C  D79C               	goto	l899
 11137  01199E  0A03               	xorlw	3	; case 74
 11138  0119A0  B4D8               	btfsc	status,2,c
 11139  0119A2  D79B               	goto	l900
 11140  0119A4  0A01               	xorlw	1	; case 75
 11141  0119A6  B4D8               	btfsc	status,2,c
 11142  0119A8  D79A               	goto	l901
 11143  0119AA  0A07               	xorlw	7	; case 76
 11144  0119AC  B4D8               	btfsc	status,2,c
 11145  0119AE  D799               	goto	l902
 11146  0119B0  0A01               	xorlw	1	; case 77
 11147  0119B2  B4D8               	btfsc	status,2,c
 11148  0119B4  D798               	goto	l903
 11149  0119B6  0A03               	xorlw	3	; case 78
 11150  0119B8  B4D8               	btfsc	status,2,c
 11151  0119BA  D797               	goto	l904
 11152  0119BC  0A01               	xorlw	1	; case 79
 11153  0119BE  B4D8               	btfsc	status,2,c
 11154  0119C0  D796               	goto	l905
 11155  0119C2  0A1F               	xorlw	31	; case 80
 11156  0119C4  B4D8               	btfsc	status,2,c
 11157  0119C6  D795               	goto	l906
 11158  0119C8  0A01               	xorlw	1	; case 81
 11159  0119CA  B4D8               	btfsc	status,2,c
 11160  0119CC  D794               	goto	l907
 11161  0119CE  0A03               	xorlw	3	; case 82
 11162  0119D0  B4D8               	btfsc	status,2,c
 11163  0119D2  D793               	goto	l908
 11164  0119D4  0A01               	xorlw	1	; case 83
 11165  0119D6  B4D8               	btfsc	status,2,c
 11166  0119D8  D792               	goto	l909
 11167  0119DA  0A07               	xorlw	7	; case 84
 11168  0119DC  B4D8               	btfsc	status,2,c
 11169  0119DE  D791               	goto	l910
 11170  0119E0  0A01               	xorlw	1	; case 85
 11171  0119E2  B4D8               	btfsc	status,2,c
 11172  0119E4  D790               	goto	l911
 11173  0119E6  0A03               	xorlw	3	; case 86
 11174  0119E8  B4D8               	btfsc	status,2,c
 11175  0119EA  D78F               	goto	l912
 11176  0119EC  0A01               	xorlw	1	; case 87
 11177  0119EE  B4D8               	btfsc	status,2,c
 11178  0119F0  D78E               	goto	l913
 11179  0119F2  0A0F               	xorlw	15	; case 88
 11180  0119F4  B4D8               	btfsc	status,2,c
 11181  0119F6  D78D               	goto	l914
 11182  0119F8  0A01               	xorlw	1	; case 89
 11183  0119FA  B4D8               	btfsc	status,2,c
 11184  0119FC  D78C               	goto	l915
 11185  0119FE  0A03               	xorlw	3	; case 90
 11186  011A00  B4D8               	btfsc	status,2,c
 11187  011A02  D78B               	goto	l916
 11188  011A04  0A3B               	xorlw	59	; case 97
 11189  011A06  B4D8               	btfsc	status,2,c
 11190  011A08  D722               	goto	l865
 11191  011A0A  0A03               	xorlw	3	; case 98
 11192  011A0C  B4D8               	btfsc	status,2,c
 11193  011A0E  D721               	goto	l866
 11194  011A10  0A01               	xorlw	1	; case 99
 11195  011A12  B4D8               	btfsc	status,2,c
 11196  011A14  D720               	goto	l867
 11197  011A16  0A07               	xorlw	7	; case 100
 11198  011A18  B4D8               	btfsc	status,2,c
 11199  011A1A  D71F               	goto	l868
 11200  011A1C  0A01               	xorlw	1	; case 101
 11201  011A1E  B4D8               	btfsc	status,2,c
 11202  011A20  D71E               	goto	l869
 11203  011A22  0A03               	xorlw	3	; case 102
 11204  011A24  B4D8               	btfsc	status,2,c
 11205  011A26  D71D               	goto	l870
 11206  011A28  0A01               	xorlw	1	; case 103
 11207  011A2A  B4D8               	btfsc	status,2,c
 11208  011A2C  D71C               	goto	l871
 11209  011A2E  0A0F               	xorlw	15	; case 104
 11210  011A30  B4D8               	btfsc	status,2,c
 11211  011A32  D71B               	goto	l872
 11212  011A34  0A01               	xorlw	1	; case 105
 11213  011A36  B4D8               	btfsc	status,2,c
 11214  011A38  D71A               	goto	l873
 11215  011A3A  0A03               	xorlw	3	; case 106
 11216  011A3C  B4D8               	btfsc	status,2,c
 11217  011A3E  D719               	goto	l874
 11218  011A40  0A01               	xorlw	1	; case 107
 11219  011A42  B4D8               	btfsc	status,2,c
 11220  011A44  D718               	goto	l875
 11221  011A46  0A07               	xorlw	7	; case 108
 11222  011A48  B4D8               	btfsc	status,2,c
 11223  011A4A  D717               	goto	l876
 11224  011A4C  0A01               	xorlw	1	; case 109
 11225  011A4E  B4D8               	btfsc	status,2,c
 11226  011A50  D716               	goto	l877
 11227  011A52  0A03               	xorlw	3	; case 110
 11228  011A54  B4D8               	btfsc	status,2,c
 11229  011A56  D715               	goto	l878
 11230  011A58  0A01               	xorlw	1	; case 111
 11231  011A5A  B4D8               	btfsc	status,2,c
 11232  011A5C  D714               	goto	l879
 11233  011A5E  0A1F               	xorlw	31	; case 112
 11234  011A60  B4D8               	btfsc	status,2,c
 11235  011A62  D713               	goto	l880
 11236  011A64  0A01               	xorlw	1	; case 113
 11237  011A66  B4D8               	btfsc	status,2,c
 11238  011A68  D712               	goto	l881
 11239  011A6A  0A03               	xorlw	3	; case 114
 11240  011A6C  B4D8               	btfsc	status,2,c
 11241  011A6E  D711               	goto	l882
 11242  011A70  0A01               	xorlw	1	; case 115
 11243  011A72  B4D8               	btfsc	status,2,c
 11244  011A74  D710               	goto	l883
 11245  011A76  0A07               	xorlw	7	; case 116
 11246  011A78  B4D8               	btfsc	status,2,c
 11247  011A7A  D70F               	goto	l884
 11248  011A7C  0A01               	xorlw	1	; case 117
 11249  011A7E  B4D8               	btfsc	status,2,c
 11250  011A80  D70E               	goto	l885
 11251  011A82  0A03               	xorlw	3	; case 118
 11252  011A84  B4D8               	btfsc	status,2,c
 11253  011A86  D70D               	goto	l886
 11254  011A88  0A01               	xorlw	1	; case 119
 11255  011A8A  B4D8               	btfsc	status,2,c
 11256  011A8C  D70C               	goto	l887
 11257  011A8E  0A0F               	xorlw	15	; case 120
 11258  011A90  B4D8               	btfsc	status,2,c
 11259  011A92  D70B               	goto	l888
 11260  011A94  0A01               	xorlw	1	; case 121
 11261  011A96  B4D8               	btfsc	status,2,c
 11262  011A98  D70A               	goto	l889
 11263  011A9A  0A03               	xorlw	3	; case 122
 11264  011A9C  B4D8               	btfsc	status,2,c
 11265  011A9E  D709               	goto	l890
 11266                           
 11267                           ;Types.c: 354: return 0;
 11268                           
 11269                           ; BSR set to: 0
 11270  011AA0  0E00               	movlw	0
 11271  011AA2  0012               	return	
 11272  011AA4                     __end_of_ToSegment:
 11273                           	opt stack 0
 11274                           tosu	equ	0xFFF
 11275                           tosh	equ	0xFFE
 11276                           tosl	equ	0xFFD
 11277                           pclath	equ	0xFFA
 11278                           tblptru	equ	0xFF8
 11279                           tblptrh	equ	0xFF7
 11280                           tblptrl	equ	0xFF6
 11281                           tablat	equ	0xFF5
 11282                           prodh	equ	0xFF4
 11283                           prodl	equ	0xFF3
 11284                           intcon	equ	0xFF2
 11285                           postinc0	equ	0xFEE
 11286                           wreg	equ	0xFE8
 11287                           indf1	equ	0xFE7
 11288                           postdec1	equ	0xFE5
 11289                           fsr1h	equ	0xFE2
 11290                           fsr1l	equ	0xFE1
 11291                           indf2	equ	0xFDF
 11292                           postinc2	equ	0xFDE
 11293                           postdec2	equ	0xFDD
 11294                           plusw2	equ	0xFDB
 11295                           fsr2h	equ	0xFDA
 11296                           fsr2l	equ	0xFD9
 11297                           status	equ	0xFD8
 11298                           
 11299 ;; *************** function _HMI_SetButton *****************
 11300 ;; Defined at:
 11301 ;;		line 186 in file "HMI.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;  pValue          1    wreg     unsigned char 
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;  pValue          1    6[BANK0 ] unsigned char 
 11306 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 11307 ;;  v               1    7[BANK0 ] unsigned char 
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  1    wreg      void 
 11310 ;; Registers used:
 11311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;Total ram usage:        8 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; Hardware stack levels required when called:    7
 11324 ;; This function calls:
 11325 ;;		Nothing
 11326 ;; This function is called by:
 11327 ;;		_Event_TestButton
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           	psect	text50
 11332  014AC2                     __ptext50:
 11333                           	opt stack 0
 11334  014AC2                     _HMI_SetButton:
 11335                           	opt stack 19
 11336                           
 11337                           ;incstack = 0
 11338                           ;HMI_SetButton@pValue stored from wreg
 11339  014AC2  0100               	movlb	0	; () banked
 11340  014AC4  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 11341                           
 11342                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 11343  014AC6  0EA8               	movlw	low HMI_SetButton@F7213
 11344  014AC8  6EF6               	movwf	tblptrl,c
 11345  014ACA                     	if	1	;There is more than 1 active tblptr byte
 11346  014ACA  0EFD               	movlw	high HMI_SetButton@F7213
 11347  014ACC  6EF7               	movwf	tblptrh,c
 11348  014ACE                     	endif
 11349  014ACE                     	if	1	;There are 3 active tblptr bytes
 11350  014ACE  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 11351  014AD0  6EF8               	movwf	tblptru,c
 11352  014AD2                     	endif
 11353  014AD2  0009               	tblrd		*+
 11354  014AD4  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 11355  014AD8  0009               	tblrd		*+
 11356  014ADA  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 11357  014ADE  0009               	tblrd		*+
 11358  014AE0  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 11359  014AE4  000A               	tblrd		*-
 11360  014AE6  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 11361                           
 11362                           ;HMI.c: 189: UINT8 v = 0b00010001;
 11363  014AEA  0E11               	movlw	17
 11364  014AEC  0100               	movlb	0	; () banked
 11365  014AEE  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;HMI.c: 190: pValue &= 3;
 11369  014AF0  0E03               	movlw	3
 11370  014AF2  0100               	movlb	0	; () banked
 11371  014AF4  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;HMI.c: 191: v = v << reindex[pValue];
 11375  014AF6  0100               	movlb	0	; () banked
 11376  014AF8  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 11377  014AFA  0D01               	mullw	1
 11378  014AFC  0E62               	movlw	low HMI_SetButton@reindex
 11379  014AFE  24F3               	addwf	prodl,w,c
 11380  014B00  6ED9               	movwf	fsr2l,c
 11381  014B02  0E00               	movlw	high HMI_SetButton@reindex
 11382  014B04  20F4               	addwfc	prodh,w,c
 11383  014B06  6EDA               	movwf	fsr2h,c
 11384  014B08  50DF               	movf	indf2,w,c
 11385  014B0A  0100               	movlb	0	; () banked
 11386  014B0C  6F60               	movwf	??_HMI_SetButton& (0+255),b
 11387  014B0E  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 11388  014B12  0100               	movlb	0	; () banked
 11389  014B14  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 11390  014B16  D003               	goto	u9314
 11391  014B18                     u9315:
 11392  014B18  0100               	movlb	0	; () banked
 11393  014B1A  90D8               	bcf	status,0,c
 11394  014B1C  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 11395  014B1E                     u9314:
 11396  014B1E  0100               	movlb	0	; () banked
 11397  014B20  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 11398  014B22  D7FA               	goto	u9315
 11399  014B24  0100               	movlb	0	; () banked
 11400  014B26  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 11401  014B28  0100               	movlb	0	; () banked
 11402  014B2A  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11403                           
 11404                           ; BSR set to: 0
 11405                           ;HMI.c: 192: v = v >> 4;
 11406  014B2C  0100               	movlb	0	; () banked
 11407  014B2E  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 11408  014B30  0B0F               	andlw	15
 11409  014B32  0100               	movlb	0	; () banked
 11410  014B34  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11411                           
 11412                           ; BSR set to: 0
 11413                           ;HMI.c: 193: v = v & 0x0F;
 11414  014B36  0100               	movlb	0	; () banked
 11415  014B38  5167               	movf	HMI_SetButton@v& (0+255),w,b
 11416  014B3A  0B0F               	andlw	15
 11417  014B3C  0100               	movlb	0	; () banked
 11418  014B3E  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11419                           
 11420                           ; BSR set to: 0
 11421                           ;HMI.c: 194: HMIBoard.pButton = v;
 11422  014B40  0103               	movlb	3	; () banked
 11423  014B42  5131               	movf	(_HMIBoard+6)& (0+255),w,b
 11424  014B44  0100               	movlb	0	; () banked
 11425  014B46  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11426  014B48  0BF0               	andlw	-16
 11427  014B4A  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11428  014B4C  0103               	movlb	3	; () banked
 11429  014B4E  6F31               	movwf	(_HMIBoard+6)& (0+255),b
 11430                           
 11431                           ; BSR set to: 3
 11432  014B50  0012               	return		;funcret
 11433  014B52                     __end_of_HMI_SetButton:
 11434                           	opt stack 0
 11435                           tosu	equ	0xFFF
 11436                           tosh	equ	0xFFE
 11437                           tosl	equ	0xFFD
 11438                           pclath	equ	0xFFA
 11439                           tblptru	equ	0xFF8
 11440                           tblptrh	equ	0xFF7
 11441                           tblptrl	equ	0xFF6
 11442                           tablat	equ	0xFF5
 11443                           prodh	equ	0xFF4
 11444                           prodl	equ	0xFF3
 11445                           intcon	equ	0xFF2
 11446                           postinc0	equ	0xFEE
 11447                           wreg	equ	0xFE8
 11448                           indf1	equ	0xFE7
 11449                           postdec1	equ	0xFE5
 11450                           fsr1h	equ	0xFE2
 11451                           fsr1l	equ	0xFE1
 11452                           indf2	equ	0xFDF
 11453                           postinc2	equ	0xFDE
 11454                           postdec2	equ	0xFDD
 11455                           plusw2	equ	0xFDB
 11456                           fsr2h	equ	0xFDA
 11457                           fsr2l	equ	0xFD9
 11458                           status	equ	0xFD8
 11459                           
 11460 ;; *************** function _HMI_SetBar *****************
 11461 ;; Defined at:
 11462 ;;		line 205 in file "HMI.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;  pValue          1    wreg     unsigned char 
 11465 ;; Auto vars:     Size  Location     Type
 11466 ;;  pValue          1    0[BANK0 ] unsigned char 
 11467 ;; Return value:  Size  Location     Type
 11468 ;;                  1    wreg      void 
 11469 ;; Registers used:
 11470 ;;		wreg
 11471 ;; Tracked objects:
 11472 ;;		On entry : 0/0
 11473 ;;		On exit  : 0/0
 11474 ;;		Unchanged: 0/0
 11475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11479 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11480 ;;Total ram usage:        1 bytes
 11481 ;; Hardware stack levels used:    1
 11482 ;; Hardware stack levels required when called:    7
 11483 ;; This function calls:
 11484 ;;		Nothing
 11485 ;; This function is called by:
 11486 ;;		_Event_DIPSwitch
 11487 ;;		_Event_HMI_DIPSwitch
 11488 ;;		_Event_HMI_LeftButton
 11489 ;;		_Event_HMI_RightButton
 11490 ;; This function uses a non-reentrant model
 11491 ;;
 11492                           
 11493                           	psect	text51
 11494  016510                     __ptext51:
 11495                           	opt stack 0
 11496  016510                     _HMI_SetBar:
 11497                           	opt stack 19
 11498                           
 11499                           ; BSR set to: 3
 11500                           ;incstack = 0
 11501                           ;HMI_SetBar@pValue stored from wreg
 11502  016510  0100               	movlb	0	; () banked
 11503  016512  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 11504                           
 11505                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 11506  016514  C060  F332         	movff	HMI_SetBar@pValue,_HMIBoard+7
 11507  016518  0012               	return		;funcret
 11508  01651A                     __end_of_HMI_SetBar:
 11509                           	opt stack 0
 11510                           tosu	equ	0xFFF
 11511                           tosh	equ	0xFFE
 11512                           tosl	equ	0xFFD
 11513                           pclath	equ	0xFFA
 11514                           tblptru	equ	0xFF8
 11515                           tblptrh	equ	0xFF7
 11516                           tblptrl	equ	0xFF6
 11517                           tablat	equ	0xFF5
 11518                           prodh	equ	0xFF4
 11519                           prodl	equ	0xFF3
 11520                           intcon	equ	0xFF2
 11521                           postinc0	equ	0xFEE
 11522                           wreg	equ	0xFE8
 11523                           indf1	equ	0xFE7
 11524                           postdec1	equ	0xFE5
 11525                           fsr1h	equ	0xFE2
 11526                           fsr1l	equ	0xFE1
 11527                           indf2	equ	0xFDF
 11528                           postinc2	equ	0xFDE
 11529                           postdec2	equ	0xFDD
 11530                           plusw2	equ	0xFDB
 11531                           fsr2h	equ	0xFDA
 11532                           fsr2l	equ	0xFD9
 11533                           status	equ	0xFD8
 11534                           
 11535 ;; *************** function _HMI_GetBar *****************
 11536 ;; Defined at:
 11537 ;;		line 209 in file "HMI.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;		None
 11540 ;; Auto vars:     Size  Location     Type
 11541 ;;		None
 11542 ;; Return value:  Size  Location     Type
 11543 ;;                  1    wreg      unsigned char 
 11544 ;; Registers used:
 11545 ;;		wreg, status,2
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;Total ram usage:        0 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; Hardware stack levels required when called:    7
 11558 ;; This function calls:
 11559 ;;		Nothing
 11560 ;; This function is called by:
 11561 ;;		_Event_DIPSwitch
 11562 ;;		_Event_HMI_DIPSwitch
 11563 ;; This function uses a non-reentrant model
 11564 ;;
 11565                           
 11566                           	psect	text52
 11567  016544                     __ptext52:
 11568                           	opt stack 0
 11569  016544                     _HMI_GetBar:
 11570                           	opt stack 19
 11571                           
 11572                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 11573                           
 11574                           ;incstack = 0
 11575  016544  0103               	movlb	3	; () banked
 11576  016546  5132               	movf	(_HMIBoard+7)& (0+255),w,b
 11577  016548  0012               	return	
 11578  01654A                     __end_of_HMI_GetBar:
 11579                           	opt stack 0
 11580                           tosu	equ	0xFFF
 11581                           tosh	equ	0xFFE
 11582                           tosl	equ	0xFFD
 11583                           pclath	equ	0xFFA
 11584                           tblptru	equ	0xFF8
 11585                           tblptrh	equ	0xFF7
 11586                           tblptrl	equ	0xFF6
 11587                           tablat	equ	0xFF5
 11588                           prodh	equ	0xFF4
 11589                           prodl	equ	0xFF3
 11590                           intcon	equ	0xFF2
 11591                           postinc0	equ	0xFEE
 11592                           wreg	equ	0xFE8
 11593                           indf1	equ	0xFE7
 11594                           postdec1	equ	0xFE5
 11595                           fsr1h	equ	0xFE2
 11596                           fsr1l	equ	0xFE1
 11597                           indf2	equ	0xFDF
 11598                           postinc2	equ	0xFDE
 11599                           postdec2	equ	0xFDD
 11600                           plusw2	equ	0xFDB
 11601                           fsr2h	equ	0xFDA
 11602                           fsr2l	equ	0xFD9
 11603                           status	equ	0xFD8
 11604                           
 11605 ;; *************** function _Console_Render *****************
 11606 ;; Defined at:
 11607 ;;		line 377 in file "Library/Console.c"
 11608 ;; Parameters:    Size  Location     Type
 11609 ;;		None
 11610 ;; Auto vars:     Size  Location     Type
 11611 ;;  lCursor         4   38[BANK0 ] struct Point
 11612 ;;  y               1   43[BANK0 ] unsigned char 
 11613 ;;  x               1   42[BANK0 ] unsigned char 
 11614 ;;  temp            1   37[BANK0 ] unsigned char 
 11615 ;;  Temp            2    0        unsigned short 
 11616 ;; Return value:  Size  Location     Type
 11617 ;;                  1    wreg      void 
 11618 ;; Registers used:
 11619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11620 ;; Tracked objects:
 11621 ;;		On entry : 0/0
 11622 ;;		On exit  : 0/0
 11623 ;;		Unchanged: 0/0
 11624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11626 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11627 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11628 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11629 ;;Total ram usage:        9 bytes
 11630 ;; Hardware stack levels used:    1
 11631 ;; Hardware stack levels required when called:   11
 11632 ;; This function calls:
 11633 ;;		_Console_MakeField
 11634 ;;		_LCD_DrawField
 11635 ;;		_LCD_FillRectangle
 11636 ;; This function is called by:
 11637 ;;		_mode1
 11638 ;;		_mode2
 11639 ;;		_mode4
 11640 ;; This function uses a non-reentrant model
 11641 ;;
 11642                           
 11643                           	psect	text53
 11644  011F24                     __ptext53:
 11645                           	opt stack 0
 11646  011F24                     _Console_Render:
 11647                           	opt stack 18
 11648                           
 11649                           ;Console.c: 379: Colour Temp;
 11650                           ;Console.c: 380: if (change)
 11651                           
 11652                           ; BSR set to: 3
 11653                           ;incstack = 0
 11654  011F24  0100               	movlb	0	; () banked
 11655  011F26  51FF               	movf	_change& (0+255),w,b
 11656  011F28  B4D8               	btfsc	status,2,c
 11657  011F2A  0012               	return	
 11658                           
 11659                           ; BSR set to: 0
 11660                           ;Console.c: 381: {
 11661                           ;Console.c: 382: UINT8 x, y, temp;
 11662                           ;Console.c: 383: Point lCursor = {6,6};
 11663  011F2C  C3E5  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 11664  011F30  C3E6  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 11665  011F34  C3E7  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 11666  011F38  C3E8  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;Console.c: 385: if (clearall)
 11670  011F3C  0100               	movlb	0	; () banked
 11671  011F3E  51DF               	movf	_clearall& (0+255),w,b
 11672  011F40  B4D8               	btfsc	status,2,c
 11673  011F42  D005               	goto	l1056
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;Console.c: 386: {
 11677                           ;Console.c: 389: temp = lBufferY;
 11678  011F44  C0DD  F085         	movff	_lBufferY,Console_Render@temp
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 11682  011F48  0E0F               	movlw	15
 11683  011F4A  0100               	movlb	0	; () banked
 11684  011F4C  6FDD               	movwf	_lBufferY& (0+255),b
 11685  011F4E                     l1056:
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;Console.c: 391: }
 11689                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 11690  011F4E  0E00               	movlw	0
 11691  011F50  0100               	movlb	0	; () banked
 11692  011F52  6F8B               	movwf	Console_Render@y& (0+255),b
 11693  011F54  D0DF               	goto	l1057
 11694  011F56                     
 11695                           ; BSR set to: 0
 11696                           ;Console.c: 394: {
 11697                           ;Console.c: 395: gForecolour = lCBuffer[y];
 11698                           
 11699                           ; BSR set to: 0
 11700  011F56  0100               	movlb	0	; () banked
 11701  011F58  518B               	movf	Console_Render@y& (0+255),w,b
 11702  011F5A  0D02               	mullw	2
 11703  011F5C  0E00               	movlw	low _lCBuffer
 11704  011F5E  24F3               	addwf	prodl,w,c
 11705  011F60  6ED9               	movwf	fsr2l,c
 11706  011F62  0E04               	movlw	high _lCBuffer
 11707  011F64  20F4               	addwfc	prodh,w,c
 11708  011F66  6EDA               	movwf	fsr2h,c
 11709  011F68  CFDE F0FD          	movff	postinc2,_gForecolour
 11710  011F6C  CFDD F0FE          	movff	postdec2,_gForecolour+1
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 11714  011F70  0E00               	movlw	0
 11715  011F72  0100               	movlb	0	; () banked
 11716  011F74  6F8A               	movwf	Console_Render@x& (0+255),b
 11717  011F76                     l14046:
 11718                           
 11719                           ; BSR set to: 0
 11720  011F76  0E13               	movlw	19
 11721  011F78  0100               	movlb	0	; () banked
 11722  011F7A  658A               	cpfsgt	Console_Render@x& (0+255),b
 11723  011F7C  D001               	goto	l1059
 11724  011F7E  D0BE               	goto	u10870
 11725  011F80                     l1059:
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;Console.c: 397: {
 11729                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 11730                           
 11731                           ; BSR set to: 0
 11732  011F80  0100               	movlb	0	; () banked
 11733  011F82  518B               	movf	Console_Render@y& (0+255),w,b
 11734  011F84  0D14               	mullw	20
 11735  011F86  0EC8               	movlw	low _lBuffer
 11736  011F88  0100               	movlb	0	; () banked
 11737  011F8A  6F83               	movwf	??_Console_Render& (0+255),b
 11738  011F8C  0E04               	movlw	high _lBuffer
 11739  011F8E  0100               	movlb	0	; () banked
 11740  011F90  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11741  011F92  50F3               	movf	prodl,w,c
 11742  011F94  0100               	movlb	0	; () banked
 11743  011F96  2783               	addwf	??_Console_Render& (0+255),f,b
 11744  011F98  50F4               	movf	prodh,w,c
 11745  011F9A  0100               	movlb	0	; () banked
 11746  011F9C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11747  011F9E  0100               	movlb	0	; () banked
 11748  011FA0  518A               	movf	Console_Render@x& (0+255),w,b
 11749  011FA2  0D01               	mullw	1
 11750  011FA4  50F3               	movf	prodl,w,c
 11751  011FA6  0100               	movlb	0	; () banked
 11752  011FA8  2583               	addwf	??_Console_Render& (0+255),w,b
 11753  011FAA  6ED9               	movwf	fsr2l,c
 11754  011FAC  50F4               	movf	prodh,w,c
 11755  011FAE  0100               	movlb	0	; () banked
 11756  011FB0  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11757  011FB2  6EDA               	movwf	fsr2h,c
 11758  011FB4  AEDF               	btfss	indf2,7,c
 11759  011FB6  D09A               	goto	l1063
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;Console.c: 399: {
 11763                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 11764  011FB8  0100               	movlb	0	; () banked
 11765  011FBA  518B               	movf	Console_Render@y& (0+255),w,b
 11766  011FBC  0D14               	mullw	20
 11767  011FBE  0EC8               	movlw	low _lBuffer
 11768  011FC0  0100               	movlb	0	; () banked
 11769  011FC2  6F83               	movwf	??_Console_Render& (0+255),b
 11770  011FC4  0E04               	movlw	high _lBuffer
 11771  011FC6  0100               	movlb	0	; () banked
 11772  011FC8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11773  011FCA  50F3               	movf	prodl,w,c
 11774  011FCC  0100               	movlb	0	; () banked
 11775  011FCE  2783               	addwf	??_Console_Render& (0+255),f,b
 11776  011FD0  50F4               	movf	prodh,w,c
 11777  011FD2  0100               	movlb	0	; () banked
 11778  011FD4  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11779  011FD6  0100               	movlb	0	; () banked
 11780  011FD8  518A               	movf	Console_Render@x& (0+255),w,b
 11781  011FDA  0D01               	mullw	1
 11782  011FDC  50F3               	movf	prodl,w,c
 11783  011FDE  0100               	movlb	0	; () banked
 11784  011FE0  2583               	addwf	??_Console_Render& (0+255),w,b
 11785  011FE2  6ED9               	movwf	fsr2l,c
 11786  011FE4  50F4               	movf	prodh,w,c
 11787  011FE6  0100               	movlb	0	; () banked
 11788  011FE8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11789  011FEA  6EDA               	movwf	fsr2h,c
 11790  011FEC  0E7F               	movlw	127
 11791  011FEE  16DF               	andwf	indf2,f,c
 11792                           
 11793                           ;Console.c: 401: if (lBuffer[y][x])
 11794  011FF0  0100               	movlb	0	; () banked
 11795  011FF2  518B               	movf	Console_Render@y& (0+255),w,b
 11796  011FF4  0D14               	mullw	20
 11797  011FF6  0EC8               	movlw	low _lBuffer
 11798  011FF8  0100               	movlb	0	; () banked
 11799  011FFA  6F83               	movwf	??_Console_Render& (0+255),b
 11800  011FFC  0E04               	movlw	high _lBuffer
 11801  011FFE  0100               	movlb	0	; () banked
 11802  012000  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11803  012002  50F3               	movf	prodl,w,c
 11804  012004  0100               	movlb	0	; () banked
 11805  012006  2783               	addwf	??_Console_Render& (0+255),f,b
 11806  012008  50F4               	movf	prodh,w,c
 11807  01200A  0100               	movlb	0	; () banked
 11808  01200C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11809  01200E  0100               	movlb	0	; () banked
 11810  012010  518A               	movf	Console_Render@x& (0+255),w,b
 11811  012012  0D01               	mullw	1
 11812  012014  50F3               	movf	prodl,w,c
 11813  012016  0100               	movlb	0	; () banked
 11814  012018  2583               	addwf	??_Console_Render& (0+255),w,b
 11815  01201A  6ED9               	movwf	fsr2l,c
 11816  01201C  50F4               	movf	prodh,w,c
 11817  01201E  0100               	movlb	0	; () banked
 11818  012020  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11819  012022  6EDA               	movwf	fsr2h,c
 11820  012024  50DF               	movf	indf2,w,c
 11821  012026  B4D8               	btfsc	status,2,c
 11822  012028  D04A               	goto	l1062
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;Console.c: 402: {
 11826                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 11827  01202A  C0D2  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 11828  01202E  C0D3  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 11829  012032  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11830  012036  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11831  01203A  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11832  01203E  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11833  012042  C3ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 11834  012046  C3EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11835  01204A  C3EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11836  01204E  C3F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11837  012052  EC6F  F0A8         	call	_LCD_FillRectangle	;wreg free
 11838                           
 11839                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 11840  012056  0100               	movlb	0	; () banked
 11841  012058  518B               	movf	Console_Render@y& (0+255),w,b
 11842  01205A  0D14               	mullw	20
 11843  01205C  0EC8               	movlw	low _lBuffer
 11844  01205E  0100               	movlb	0	; () banked
 11845  012060  6F83               	movwf	??_Console_Render& (0+255),b
 11846  012062  0E04               	movlw	high _lBuffer
 11847  012064  0100               	movlb	0	; () banked
 11848  012066  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11849  012068  50F3               	movf	prodl,w,c
 11850  01206A  0100               	movlb	0	; () banked
 11851  01206C  2783               	addwf	??_Console_Render& (0+255),f,b
 11852  01206E  50F4               	movf	prodh,w,c
 11853  012070  0100               	movlb	0	; () banked
 11854  012072  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11855  012074  0100               	movlb	0	; () banked
 11856  012076  518A               	movf	Console_Render@x& (0+255),w,b
 11857  012078  0D01               	mullw	1
 11858  01207A  50F3               	movf	prodl,w,c
 11859  01207C  0100               	movlb	0	; () banked
 11860  01207E  2583               	addwf	??_Console_Render& (0+255),w,b
 11861  012080  6ED9               	movwf	fsr2l,c
 11862  012082  50F4               	movf	prodh,w,c
 11863  012084  0100               	movlb	0	; () banked
 11864  012086  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11865  012088  6EDA               	movwf	fsr2h,c
 11866  01208A  50DF               	movf	indf2,w,c
 11867  01208C  EC81  F09E         	call	_Console_MakeField
 11868  012090  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 11869  012094  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 11870  012098  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 11871  01209C  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 11872  0120A0  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 11873  0120A4  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 11874  0120A8  C3ED  F078         	movff	_gCharSize,LCD_DrawField@pSize
 11875  0120AC  C3EE  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 11876  0120B0  C3EF  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 11877  0120B4  C3F0  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 11878  0120B8  EC24  F0A4         	call	_LCD_DrawField	;wreg free
 11879                           
 11880                           ;Console.c: 405: }
 11881  0120BC  D017               	goto	l1063
 11882  0120BE                     l1062:
 11883                           
 11884                           ;Console.c: 406: else
 11885                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 11886  0120BE  0E00               	movlw	0
 11887  0120C0  0100               	movlb	0	; () banked
 11888  0120C2  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 11889  0120C4  0E00               	movlw	0
 11890  0120C6  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 11891  0120C8  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11892  0120CC  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11893  0120D0  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11894  0120D4  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11895  0120D8  C3ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 11896  0120DC  C3EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11897  0120E0  C3EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11898  0120E4  C3F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11899  0120E8  EC6F  F0A8         	call	_LCD_FillRectangle	;wreg free
 11900  0120EC                     l1063:
 11901                           
 11902                           ;Console.c: 408: }
 11903                           ;Console.c: 409: lCursor.x += (5 + 1);
 11904  0120EC  0E06               	movlw	6
 11905  0120EE  0100               	movlb	0	; () banked
 11906  0120F0  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 11907  0120F2  0E00               	movlw	0
 11908  0120F4  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 11909                           
 11910                           ; BSR set to: 0
 11911  0120F6  0100               	movlb	0	; () banked
 11912  0120F8  2B8A               	incf	Console_Render@x& (0+255),f,b
 11913  0120FA  D73D               	goto	l14046
 11914  0120FC                     u10870:
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;Console.c: 410: }
 11918                           ;Console.c: 411: lCursor.y += (7 + 1);
 11919                           
 11920                           ; BSR set to: 0
 11921  0120FC  0E08               	movlw	8
 11922  0120FE  0100               	movlb	0	; () banked
 11923  012100  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 11924  012102  0E00               	movlw	0
 11925  012104  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;Console.c: 412: lCursor.x = 6;
 11929  012106  0E00               	movlw	0
 11930  012108  0100               	movlb	0	; () banked
 11931  01210A  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 11932  01210C  0E06               	movlw	6
 11933  01210E  6F86               	movwf	Console_Render@lCursor& (0+255),b
 11934                           
 11935                           ; BSR set to: 0
 11936  012110  0100               	movlb	0	; () banked
 11937  012112  2B8B               	incf	Console_Render@y& (0+255),f,b
 11938  012114                     l1057:
 11939                           
 11940                           ; BSR set to: 0
 11941                           
 11942                           ; BSR set to: 0
 11943  012114  0100               	movlb	0	; () banked
 11944  012116  518B               	movf	Console_Render@y& (0+255),w,b
 11945  012118  0100               	movlb	0	; () banked
 11946  01211A  5DDD               	subwf	_lBufferY& (0+255),w,b
 11947  01211C  B0D8               	btfsc	status,0,c
 11948  01211E  D71B               	goto	l1058
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;Console.c: 413: }
 11952                           ;Console.c: 415: if (clearall)
 11953                           
 11954                           ; BSR set to: 0
 11955  012120  0100               	movlb	0	; () banked
 11956  012122  51DF               	movf	_clearall& (0+255),w,b
 11957  012124  B4D8               	btfsc	status,2,c
 11958  012126  0012               	return	
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;Console.c: 416: {
 11962                           ;Console.c: 417: clearall = 0;
 11963  012128  0E00               	movlw	0
 11964  01212A  0100               	movlb	0	; () banked
 11965  01212C  6FDF               	movwf	_clearall& (0+255),b
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;Console.c: 418: lBufferY = temp;
 11969  01212E  C085  F0DD         	movff	Console_Render@temp,_lBufferY
 11970                           
 11971                           ; BSR set to: 0
 11972  012132  0012               	return	
 11973  012134                     __end_of_Console_Render:
 11974                           	opt stack 0
 11975                           tosu	equ	0xFFF
 11976                           tosh	equ	0xFFE
 11977                           tosl	equ	0xFFD
 11978                           pclath	equ	0xFFA
 11979                           tblptru	equ	0xFF8
 11980                           tblptrh	equ	0xFF7
 11981                           tblptrl	equ	0xFF6
 11982                           tablat	equ	0xFF5
 11983                           prodh	equ	0xFF4
 11984                           prodl	equ	0xFF3
 11985                           intcon	equ	0xFF2
 11986                           postinc0	equ	0xFEE
 11987                           wreg	equ	0xFE8
 11988                           indf1	equ	0xFE7
 11989                           postdec1	equ	0xFE5
 11990                           fsr1h	equ	0xFE2
 11991                           fsr1l	equ	0xFE1
 11992                           indf2	equ	0xFDF
 11993                           postinc2	equ	0xFDE
 11994                           postdec2	equ	0xFDD
 11995                           plusw2	equ	0xFDB
 11996                           fsr2h	equ	0xFDA
 11997                           fsr2l	equ	0xFD9
 11998                           status	equ	0xFD8
 11999                           
 12000 ;; *************** function _LCD_FillRectangle *****************
 12001 ;; Defined at:
 12002 ;;		line 318 in file "Library/LCD.c"
 12003 ;; Parameters:    Size  Location     Type
 12004 ;;  pColour         2    9[BANK0 ] unsigned short 
 12005 ;;  pPoint          4   11[BANK0 ] struct Point
 12006 ;;  pSize           4   15[BANK0 ] struct Point
 12007 ;; Auto vars:     Size  Location     Type
 12008 ;;  j               1   22[BANK0 ] unsigned char 
 12009 ;;  i               1   21[BANK0 ] unsigned char 
 12010 ;; Return value:  Size  Location     Type
 12011 ;;                  1    wreg      void 
 12012 ;; Registers used:
 12013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12014 ;; Tracked objects:
 12015 ;;		On entry : 0/0
 12016 ;;		On exit  : 0/0
 12017 ;;		Unchanged: 0/0
 12018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12019 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12021 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12022 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12023 ;;Total ram usage:       14 bytes
 12024 ;; Hardware stack levels used:    1
 12025 ;; Hardware stack levels required when called:   10
 12026 ;; This function calls:
 12027 ;;		_LCD_Word_Write
 12028 ;;		_Set_Addr_Window
 12029 ;; This function is called by:
 12030 ;;		_Console_Render
 12031 ;;		_Console_ClearLine
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           	psect	text54
 12036  0150DE                     __ptext54:
 12037                           	opt stack 0
 12038  0150DE                     _LCD_FillRectangle:
 12039                           	opt stack 18
 12040                           
 12041                           ;LCD.c: 320: UINT8 i = 0x00;
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;incstack = 0
 12045  0150DE  0E00               	movlw	0
 12046  0150E0  0100               	movlb	0	; () banked
 12047  0150E2  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 12048                           
 12049                           ;LCD.c: 321: UINT8 j = 0x00;
 12050  0150E4  0E00               	movlw	0
 12051  0150E6  0100               	movlb	0	; () banked
 12052  0150E8  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 12056  0150EA  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 12057  0150EE  0100               	movlb	0	; () banked
 12058  0150F0  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 12059  0150F2  0100               	movlb	0	; () banked
 12060  0150F4  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 12061  0150F6  0100               	movlb	0	; () banked
 12062  0150F8  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 12063  0150FA  0100               	movlb	0	; () banked
 12064  0150FC  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 12065  0150FE  0100               	movlb	0	; () banked
 12066  015100  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 12067  015102  0100               	movlb	0	; () banked
 12068  015104  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 12069  015106  0100               	movlb	0	; () banked
 12070  015108  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 12071  01510A  0100               	movlb	0	; () banked
 12072  01510C  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 12073  01510E  0100               	movlb	0	; () banked
 12074  015110  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 12075  015112  0100               	movlb	0	; () banked
 12076  015114  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 12077  015116  0100               	movlb	0	; () banked
 12078  015118  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 12079  01511A  EC2E  F0A2         	call	_Set_Addr_Window
 12080                           
 12081                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 12082  01511E  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 12083  015122                     l13324:
 12084  015122  0100               	movlb	0	; () banked
 12085  015124  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 12086  015126  0100               	movlb	0	; () banked
 12087  015128  B4D8               	btfsc	status,2,c
 12088  01512A  0012               	return	
 12089                           
 12090                           ; BSR set to: 0
 12091                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 12092                           
 12093                           ; BSR set to: 0
 12094  01512C  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 12095  015130                     l13328:
 12096                           
 12097                           ; BSR set to: 0
 12098  015130  0100               	movlb	0	; () banked
 12099  015132  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 12100  015134  0100               	movlb	0	; () banked
 12101  015136  B4D8               	btfsc	status,2,c
 12102  015138  D009               	goto	u9830
 12103                           
 12104                           ; BSR set to: 0
 12105                           ;LCD.c: 333: LCD_Word_Write(pColour);
 12106                           
 12107                           ; BSR set to: 0
 12108                           
 12109                           ; BSR set to: 0
 12110  01513A  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 12111  01513E  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 12112  015142  EC21  F0B1         	call	_LCD_Word_Write	;wreg free
 12113  015146  0100               	movlb	0	; () banked
 12114  015148  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 12115  01514A  D7F2               	goto	l13328
 12116  01514C                     u9830:
 12117                           
 12118                           ; BSR set to: 0
 12119                           
 12120                           ; BSR set to: 0
 12121  01514C  0100               	movlb	0	; () banked
 12122  01514E  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 12123  015150  D7E8               	goto	l13324
 12124  015152                     __end_of_LCD_FillRectangle:
 12125                           	opt stack 0
 12126                           tosu	equ	0xFFF
 12127                           tosh	equ	0xFFE
 12128                           tosl	equ	0xFFD
 12129                           pclath	equ	0xFFA
 12130                           tblptru	equ	0xFF8
 12131                           tblptrh	equ	0xFF7
 12132                           tblptrl	equ	0xFF6
 12133                           tablat	equ	0xFF5
 12134                           prodh	equ	0xFF4
 12135                           prodl	equ	0xFF3
 12136                           intcon	equ	0xFF2
 12137                           postinc0	equ	0xFEE
 12138                           wreg	equ	0xFE8
 12139                           indf1	equ	0xFE7
 12140                           postdec1	equ	0xFE5
 12141                           fsr1h	equ	0xFE2
 12142                           fsr1l	equ	0xFE1
 12143                           indf2	equ	0xFDF
 12144                           postinc2	equ	0xFDE
 12145                           postdec2	equ	0xFDD
 12146                           plusw2	equ	0xFDB
 12147                           fsr2h	equ	0xFDA
 12148                           fsr2l	equ	0xFD9
 12149                           status	equ	0xFD8
 12150                           
 12151 ;; *************** function _LCD_DrawField *****************
 12152 ;; Defined at:
 12153 ;;		line 393 in file "Library/LCD.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 12156 ;;		 -> Console_MakeField@Fill(70), 
 12157 ;;  pPoint          4   20[BANK0 ] struct Point
 12158 ;;  pSize           4   24[BANK0 ] struct Point
 12159 ;; Auto vars:     Size  Location     Type
 12160 ;;  count           2   30[BANK0 ] unsigned short 
 12161 ;;  i               1   34[BANK0 ] unsigned char 
 12162 ;;  ymax            1   33[BANK0 ] unsigned char 
 12163 ;;  xmax            1   32[BANK0 ] unsigned char 
 12164 ;; Return value:  Size  Location     Type
 12165 ;;                  1    wreg      void 
 12166 ;; Registers used:
 12167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12168 ;; Tracked objects:
 12169 ;;		On entry : 0/0
 12170 ;;		On exit  : 0/0
 12171 ;;		Unchanged: 0/0
 12172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12173 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12174 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12175 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12176 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12177 ;;Total ram usage:       17 bytes
 12178 ;; Hardware stack levels used:    1
 12179 ;; Hardware stack levels required when called:   10
 12180 ;; This function calls:
 12181 ;;		_LCD_Word_Write
 12182 ;;		_Set_Addr_Window
 12183 ;;		___wmul
 12184 ;; This function is called by:
 12185 ;;		_Console_Render
 12186 ;; This function uses a non-reentrant model
 12187 ;;
 12188                           
 12189                           	psect	text55
 12190  014848                     __ptext55:
 12191                           	opt stack 0
 12192  014848                     _LCD_DrawField:
 12193                           	opt stack 18
 12194                           
 12195                           ;LCD.c: 396: UINT8 i = 0x00;
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;incstack = 0
 12199  014848  0E00               	movlw	0
 12200  01484A  0100               	movlb	0	; () banked
 12201  01484C  6F82               	movwf	LCD_DrawField@i& (0+255),b
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 12205  01484E  0100               	movlb	0	; () banked
 12206  014850  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 12207  014852  0100               	movlb	0	; () banked
 12208  014854  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 12209  014856  0100               	movlb	0	; () banked
 12210  014858  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 12214  01485A  0100               	movlb	0	; () banked
 12215  01485C  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 12216  01485E  0100               	movlb	0	; () banked
 12217  014860  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 12218  014862  0100               	movlb	0	; () banked
 12219  014864  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 12220                           
 12221                           ; BSR set to: 0
 12222                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 12223  014866  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 12224  01486A  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 12225  01486E  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 12226  014872  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 12227  014876  EC7B  F0AF         	call	___wmul	;wreg free
 12228  01487A  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 12229  01487E  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 12230                           
 12231                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 12232  014882  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 12233  014886  0100               	movlb	0	; () banked
 12234  014888  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 12235  01488A  0100               	movlb	0	; () banked
 12236  01488C  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 12237  01488E  0100               	movlb	0	; () banked
 12238  014890  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 12239  014892  0100               	movlb	0	; () banked
 12240  014894  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 12241  014896  0100               	movlb	0	; () banked
 12242  014898  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 12243  01489A  EC2E  F0A2         	call	_Set_Addr_Window
 12244                           
 12245                           ;LCD.c: 403: for(i = 0; i < count; i++)
 12246  01489E  0E00               	movlw	0
 12247  0148A0  0100               	movlb	0	; () banked
 12248  0148A2  6F82               	movwf	LCD_DrawField@i& (0+255),b
 12249  0148A4  D013               	goto	l183
 12250  0148A6                     
 12251                           ; BSR set to: 0
 12252                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 12253                           
 12254                           ; BSR set to: 0
 12255  0148A6  0100               	movlb	0	; () banked
 12256  0148A8  5182               	movf	LCD_DrawField@i& (0+255),w,b
 12257  0148AA  0D02               	mullw	2
 12258  0148AC  50F3               	movf	prodl,w,c
 12259  0148AE  0100               	movlb	0	; () banked
 12260  0148B0  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 12261  0148B2  6ED9               	movwf	fsr2l,c
 12262  0148B4  50F4               	movf	prodh,w,c
 12263  0148B6  0100               	movlb	0	; () banked
 12264  0148B8  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 12265  0148BA  6EDA               	movwf	fsr2h,c
 12266  0148BC  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 12267  0148C0  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 12268  0148C4  EC21  F0B1         	call	_LCD_Word_Write	;wreg free
 12269  0148C8  0100               	movlb	0	; () banked
 12270  0148CA  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 12271  0148CC                     l183:
 12272                           
 12273                           ; BSR set to: 0
 12274                           
 12275                           ; BSR set to: 0
 12276  0148CC  0100               	movlb	0	; () banked
 12277  0148CE  5182               	movf	LCD_DrawField@i& (0+255),w,b
 12278  0148D0  0100               	movlb	0	; () banked
 12279  0148D2  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 12280  0148D4  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 12281  0148D6  0100               	movlb	0	; () banked
 12282  0148D8  517E               	movf	LCD_DrawField@count& (0+255),w,b
 12283  0148DA  0100               	movlb	0	; () banked
 12284  0148DC  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 12285  0148DE  0100               	movlb	0	; () banked
 12286  0148E0  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 12287  0148E2  0100               	movlb	0	; () banked
 12288  0148E4  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 12289  0148E6  B0D8               	btfsc	status,0,c
 12290  0148E8  0012               	return	
 12291  0148EA  D7DD               	goto	l184
 12292  0148EC                     __end_of_LCD_DrawField:
 12293                           	opt stack 0
 12294                           tosu	equ	0xFFF
 12295                           tosh	equ	0xFFE
 12296                           tosl	equ	0xFFD
 12297                           pclath	equ	0xFFA
 12298                           tblptru	equ	0xFF8
 12299                           tblptrh	equ	0xFF7
 12300                           tblptrl	equ	0xFF6
 12301                           tablat	equ	0xFF5
 12302                           prodh	equ	0xFF4
 12303                           prodl	equ	0xFF3
 12304                           intcon	equ	0xFF2
 12305                           postinc0	equ	0xFEE
 12306                           wreg	equ	0xFE8
 12307                           indf1	equ	0xFE7
 12308                           postdec1	equ	0xFE5
 12309                           fsr1h	equ	0xFE2
 12310                           fsr1l	equ	0xFE1
 12311                           indf2	equ	0xFDF
 12312                           postinc2	equ	0xFDE
 12313                           postdec2	equ	0xFDD
 12314                           plusw2	equ	0xFDB
 12315                           fsr2h	equ	0xFDA
 12316                           fsr2l	equ	0xFD9
 12317                           status	equ	0xFD8
 12318                           
 12319 ;; *************** function ___wmul *****************
 12320 ;; Defined at:
 12321 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 12322 ;; Parameters:    Size  Location     Type
 12323 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12324 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12325 ;; Auto vars:     Size  Location     Type
 12326 ;;  product         2    4[BANK0 ] unsigned int 
 12327 ;; Return value:  Size  Location     Type
 12328 ;;                  2    0[BANK0 ] unsigned int 
 12329 ;; Registers used:
 12330 ;;		wreg, status,2, status,0, prodl, prodh
 12331 ;; Tracked objects:
 12332 ;;		On entry : 0/0
 12333 ;;		On exit  : 0/0
 12334 ;;		Unchanged: 0/0
 12335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12336 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12339 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12340 ;;Total ram usage:        6 bytes
 12341 ;; Hardware stack levels used:    1
 12342 ;; Hardware stack levels required when called:    7
 12343 ;; This function calls:
 12344 ;;		Nothing
 12345 ;; This function is called by:
 12346 ;;		_LCD_DrawField
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           	psect	text56
 12351  015EF6                     __ptext56:
 12352                           	opt stack 0
 12353  015EF6                     ___wmul:
 12354                           	opt stack 20
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;incstack = 0
 12358  015EF6  0100               	movlb	0	; () banked
 12359  015EF8  5160               	movf	___wmul@multiplier& (0+255),w,b
 12360  015EFA  0100               	movlb	0	; () banked
 12361  015EFC  0362               	mulwf	___wmul@multiplicand& (0+255),b
 12362  015EFE  CFF3 F064          	movff	prodl,___wmul@product
 12363  015F02  CFF4 F065          	movff	prodh,___wmul@product+1
 12364  015F06  0100               	movlb	0	; () banked
 12365  015F08  5160               	movf	___wmul@multiplier& (0+255),w,b
 12366  015F0A  0100               	movlb	0	; () banked
 12367  015F0C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 12368  015F0E  50F3               	movf	prodl,w,c
 12369  015F10  0100               	movlb	0	; () banked
 12370  015F12  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 12371  015F14  0100               	movlb	0	; () banked
 12372  015F16  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 12373  015F18  0100               	movlb	0	; () banked
 12374  015F1A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 12375  015F1C  50F3               	movf	prodl,w,c
 12376  015F1E  0100               	movlb	0	; () banked
 12377  015F20  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 12378                           
 12379                           ; BSR set to: 0
 12380  015F22  C064  F060         	movff	___wmul@product,?___wmul
 12381  015F26  C065  F061         	movff	___wmul@product+1,?___wmul+1
 12382  015F2A  0012               	return	
 12383  015F2C                     __end_of___wmul:
 12384                           	opt stack 0
 12385                           tosu	equ	0xFFF
 12386                           tosh	equ	0xFFE
 12387                           tosl	equ	0xFFD
 12388                           pclath	equ	0xFFA
 12389                           tblptru	equ	0xFF8
 12390                           tblptrh	equ	0xFF7
 12391                           tblptrl	equ	0xFF6
 12392                           tablat	equ	0xFF5
 12393                           prodh	equ	0xFF4
 12394                           prodl	equ	0xFF3
 12395                           intcon	equ	0xFF2
 12396                           postinc0	equ	0xFEE
 12397                           wreg	equ	0xFE8
 12398                           indf1	equ	0xFE7
 12399                           postdec1	equ	0xFE5
 12400                           fsr1h	equ	0xFE2
 12401                           fsr1l	equ	0xFE1
 12402                           indf2	equ	0xFDF
 12403                           postinc2	equ	0xFDE
 12404                           postdec2	equ	0xFDD
 12405                           plusw2	equ	0xFDB
 12406                           fsr2h	equ	0xFDA
 12407                           fsr2l	equ	0xFD9
 12408                           status	equ	0xFD8
 12409                           
 12410 ;; *************** function _Console_MakeField *****************
 12411 ;; Defined at:
 12412 ;;		line 435 in file "Library/Console.c"
 12413 ;; Parameters:    Size  Location     Type
 12414 ;;  pInput          1    wreg     unsigned char 
 12415 ;; Auto vars:     Size  Location     Type
 12416 ;;  pInput          1   11[BANK0 ] unsigned char 
 12417 ;;  y               1   17[BANK0 ] unsigned char 
 12418 ;;  x               1   16[BANK0 ] unsigned char 
 12419 ;;  Column          2   12[BANK0 ] PTR struct Byte
 12420 ;;		 -> Font5x7(480), 
 12421 ;;  Index           2    9[BANK0 ] unsigned short 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;                  2    5[BANK0 ] PTR unsigned short 
 12424 ;; Registers used:
 12425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12426 ;; Tracked objects:
 12427 ;;		On entry : 0/0
 12428 ;;		On exit  : 0/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12431 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12432 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;Total ram usage:       13 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    8
 12438 ;; This function calls:
 12439 ;;		_Byte_GetBit
 12440 ;; This function is called by:
 12441 ;;		_Console_Render
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           	psect	text57
 12446  013D02                     __ptext57:
 12447                           	opt stack 0
 12448  013D02                     _Console_MakeField:
 12449                           	opt stack 20
 12450                           
 12451                           ; BSR set to: 0
 12452                           ;incstack = 0
 12453                           ;Console_MakeField@pInput stored from wreg
 12454  013D02  0100               	movlb	0	; () banked
 12455  013D04  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 12456                           
 12457                           ;Console.c: 437: static Colour Fill[7][5];
 12458                           ;Console.c: 438: pInput -= 32;
 12459  013D06  0E20               	movlw	32
 12460  013D08  0100               	movlb	0	; () banked
 12461  013D0A  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 12465  013D0C  0100               	movlb	0	; () banked
 12466  013D0E  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 12467  013D10  0D05               	mullw	5
 12468  013D12  CFF3 F069          	movff	prodl,Console_MakeField@Index
 12469  013D16  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 12470                           
 12471                           ; BSR set to: 0
 12472                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 12473  013D1A  0EAF               	movlw	low _Font5x7
 12474  013D1C  0100               	movlb	0	; () banked
 12475  013D1E  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 12476  013D20  0100               	movlb	0	; () banked
 12477  013D22  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 12478  013D24  0EFD               	movlw	high _Font5x7
 12479  013D26  0100               	movlb	0	; () banked
 12480  013D28  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 12481  013D2A  0100               	movlb	0	; () banked
 12482  013D2C  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 12483                           
 12484                           ; BSR set to: 0
 12485                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 12486  013D2E  0E00               	movlw	0
 12487  013D30  0100               	movlb	0	; () banked
 12488  013D32  6F70               	movwf	Console_MakeField@x& (0+255),b
 12489  013D34                     l13418:
 12490                           
 12491                           ; BSR set to: 0
 12492  013D34  0E04               	movlw	4
 12493  013D36  0100               	movlb	0	; () banked
 12494  013D38  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 12495  013D3A  D001               	goto	l1077
 12496  013D3C  D043               	goto	u9920
 12497  013D3E                     l1077:
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;Console.c: 444: {
 12501                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 12502                           
 12503                           ; BSR set to: 0
 12504  013D3E  0E00               	movlw	0
 12505  013D40  0100               	movlb	0	; () banked
 12506  013D42  6F71               	movwf	Console_MakeField@y& (0+255),b
 12507  013D44                     l13424:
 12508                           
 12509                           ; BSR set to: 0
 12510  013D44  0E06               	movlw	6
 12511  013D46  0100               	movlb	0	; () banked
 12512  013D48  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 12513  013D4A  D001               	goto	l1079
 12514  013D4C  D035               	goto	u9910
 12515  013D4E                     l1079:
 12516                           
 12517                           ; BSR set to: 0
 12518                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 12519                           
 12520                           ; BSR set to: 0
 12521  013D4E  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 12522  013D52  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 12523  013D56  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 12524  013D5A  ECB1  F0AF         	call	_Byte_GetBit	;wreg free
 12525  013D5E  0900               	iorlw	0
 12526  013D60  A4D8               	btfss	status,2,c
 12527  013D62  D005               	goto	l1082
 12528  013D64  C0D2  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 12529  013D68  C0D3  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 12530  013D6C  D004               	goto	l1084
 12531  013D6E                     l1082:
 12532  013D6E  C0FD  F06E         	movff	_gForecolour,_Console_MakeField$10974
 12533  013D72  C0FE  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 12534  013D76                     l1084:
 12535  013D76  0100               	movlb	0	; () banked
 12536  013D78  5171               	movf	Console_MakeField@y& (0+255),w,b
 12537  013D7A  0D0A               	mullw	10
 12538  013D7C  0E82               	movlw	low Console_MakeField@Fill
 12539  013D7E  0100               	movlb	0	; () banked
 12540  013D80  6F67               	movwf	??_Console_MakeField& (0+255),b
 12541  013D82  0E04               	movlw	high Console_MakeField@Fill
 12542  013D84  0100               	movlb	0	; () banked
 12543  013D86  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 12544  013D88  50F3               	movf	prodl,w,c
 12545  013D8A  0100               	movlb	0	; () banked
 12546  013D8C  2767               	addwf	??_Console_MakeField& (0+255),f,b
 12547  013D8E  50F4               	movf	prodh,w,c
 12548  013D90  0100               	movlb	0	; () banked
 12549  013D92  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 12550  013D94  0100               	movlb	0	; () banked
 12551  013D96  5170               	movf	Console_MakeField@x& (0+255),w,b
 12552  013D98  0D02               	mullw	2
 12553  013D9A  50F3               	movf	prodl,w,c
 12554  013D9C  0100               	movlb	0	; () banked
 12555  013D9E  2567               	addwf	??_Console_MakeField& (0+255),w,b
 12556  013DA0  6ED9               	movwf	fsr2l,c
 12557  013DA2  50F4               	movf	prodh,w,c
 12558  013DA4  0100               	movlb	0	; () banked
 12559  013DA6  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 12560  013DA8  6EDA               	movwf	fsr2h,c
 12561  013DAA  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 12562  013DAE  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 12563                           
 12564                           ; BSR set to: 0
 12565  013DB2  0100               	movlb	0	; () banked
 12566  013DB4  2B71               	incf	Console_MakeField@y& (0+255),f,b
 12567  013DB6  D7C6               	goto	l13424
 12568  013DB8                     u9910:
 12569                           
 12570                           ; BSR set to: 0
 12571                           ;Console.c: 447: Column += 1;
 12572                           
 12573                           ; BSR set to: 0
 12574  013DB8  0100               	movlb	0	; () banked
 12575  013DBA  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 12576  013DBC  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 12577  013DBE  0100               	movlb	0	; () banked
 12578  013DC0  2B70               	incf	Console_MakeField@x& (0+255),f,b
 12579  013DC2  D7B8               	goto	l13418
 12580  013DC4                     u9920:
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;Console.c: 448: }
 12584                           ;Console.c: 449: return (ColourPtr)Fill;
 12585                           
 12586                           ; BSR set to: 0
 12587  013DC4  0E82               	movlw	low Console_MakeField@Fill
 12588  013DC6  0100               	movlb	0	; () banked
 12589  013DC8  6F65               	movwf	?_Console_MakeField& (0+255),b
 12590  013DCA  0E04               	movlw	high Console_MakeField@Fill
 12591  013DCC  0100               	movlb	0	; () banked
 12592  013DCE  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 12593  013DD0  0012               	return	
 12594  013DD2                     __end_of_Console_MakeField:
 12595                           	opt stack 0
 12596                           tosu	equ	0xFFF
 12597                           tosh	equ	0xFFE
 12598                           tosl	equ	0xFFD
 12599                           pclath	equ	0xFFA
 12600                           tblptru	equ	0xFF8
 12601                           tblptrh	equ	0xFF7
 12602                           tblptrl	equ	0xFF6
 12603                           tablat	equ	0xFF5
 12604                           prodh	equ	0xFF4
 12605                           prodl	equ	0xFF3
 12606                           intcon	equ	0xFF2
 12607                           postinc0	equ	0xFEE
 12608                           wreg	equ	0xFE8
 12609                           indf1	equ	0xFE7
 12610                           postdec1	equ	0xFE5
 12611                           fsr1h	equ	0xFE2
 12612                           fsr1l	equ	0xFE1
 12613                           indf2	equ	0xFDF
 12614                           postinc2	equ	0xFDE
 12615                           postdec2	equ	0xFDD
 12616                           plusw2	equ	0xFDB
 12617                           fsr2h	equ	0xFDA
 12618                           fsr2l	equ	0xFD9
 12619                           status	equ	0xFD8
 12620                           
 12621 ;; *************** function _Byte_GetBit *****************
 12622 ;; Defined at:
 12623 ;;		line 38 in file "Library/Types.c"
 12624 ;; Parameters:    Size  Location     Type
 12625 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 12626 ;;		 -> Font5x7(480), 
 12627 ;;  pBit            1    2[BANK0 ] unsigned char 
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;  Output          1    4[BANK0 ] unsigned char 
 12630 ;; Return value:  Size  Location     Type
 12631 ;;                  1    wreg      unsigned char 
 12632 ;; Registers used:
 12633 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12634 ;; Tracked objects:
 12635 ;;		On entry : 0/0
 12636 ;;		On exit  : 0/0
 12637 ;;		Unchanged: 0/0
 12638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12639 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12642 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12643 ;;Total ram usage:        5 bytes
 12644 ;; Hardware stack levels used:    1
 12645 ;; Hardware stack levels required when called:    7
 12646 ;; This function calls:
 12647 ;;		Nothing
 12648 ;; This function is called by:
 12649 ;;		_Console_MakeField
 12650 ;;		_Word_GetBit
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           	psect	text58
 12655  015F62                     __ptext58:
 12656                           	opt stack 0
 12657  015F62                     _Byte_GetBit:
 12658                           	opt stack 20
 12659                           
 12660                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;incstack = 0
 12664  015F62  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 12665  015F66  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 12666  015F6A                     	if	0	;tblptru may be non-zero
 12667  015F6A                     	endif
 12668  015F6A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12669  015F6A  0E00               	movlw	low (__mediumconst shr (0+16))
 12670  015F6C  6EF8               	movwf	tblptru,c
 12671  015F6E                     	endif
 12672  015F6E  0008               	tblrd		*
 12673  015F70  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 12674                           
 12675                           ;Types.c: 42: Output >>= pBit;
 12676  015F74  0100               	movlb	0	; () banked
 12677  015F76  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 12678  015F78  0100               	movlb	0	; () banked
 12679  015F7A  6F63               	movwf	??_Byte_GetBit& (0+255),b
 12680  015F7C  D003               	goto	u9530
 12681  015F7E                     u9535:
 12682  015F7E  0100               	movlb	0	; () banked
 12683  015F80  90D8               	bcf	status,0,c
 12684  015F82  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 12685  015F84                     u9530:
 12686  015F84  0100               	movlb	0	; () banked
 12687  015F86  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 12688  015F88  D7FA               	goto	u9535
 12689                           
 12690                           ;Types.c: 43: Output &= 1;
 12691  015F8A  0E01               	movlw	1
 12692  015F8C  0100               	movlb	0	; () banked
 12693  015F8E  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;Types.c: 44: return Output;
 12697  015F90  0100               	movlb	0	; () banked
 12698  015F92  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 12699  015F94  0012               	return	
 12700  015F96                     __end_of_Byte_GetBit:
 12701                           	opt stack 0
 12702                           tosu	equ	0xFFF
 12703                           tosh	equ	0xFFE
 12704                           tosl	equ	0xFFD
 12705                           pclath	equ	0xFFA
 12706                           tblptru	equ	0xFF8
 12707                           tblptrh	equ	0xFF7
 12708                           tblptrl	equ	0xFF6
 12709                           tablat	equ	0xFF5
 12710                           prodh	equ	0xFF4
 12711                           prodl	equ	0xFF3
 12712                           intcon	equ	0xFF2
 12713                           postinc0	equ	0xFEE
 12714                           wreg	equ	0xFE8
 12715                           indf1	equ	0xFE7
 12716                           postdec1	equ	0xFE5
 12717                           fsr1h	equ	0xFE2
 12718                           fsr1l	equ	0xFE1
 12719                           indf2	equ	0xFDF
 12720                           postinc2	equ	0xFDE
 12721                           postdec2	equ	0xFDD
 12722                           plusw2	equ	0xFDB
 12723                           fsr2h	equ	0xFDA
 12724                           fsr2l	equ	0xFD9
 12725                           status	equ	0xFD8
 12726                           
 12727 ;; *************** function _ADC_Voltage *****************
 12728 ;; Defined at:
 12729 ;;		line 259 in file "Library/ADC.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;  pInput          2   64[BANK0 ] PTR struct ADC
 12732 ;;		 -> ADC_AN0(5), 
 12733 ;; Auto vars:     Size  Location     Type
 12734 ;;  output          4   78[BANK0 ] float 
 12735 ;;  ref             4   74[BANK0 ] const float 
 12736 ;;  max             4   70[BANK0 ] const float 
 12737 ;; Return value:  Size  Location     Type
 12738 ;;                  4   64[BANK0 ] float 
 12739 ;; Registers used:
 12740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12741 ;; Tracked objects:
 12742 ;;		On entry : 0/0
 12743 ;;		On exit  : 0/0
 12744 ;;		Unchanged: 0/0
 12745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12746 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12747 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12749 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12750 ;;Total ram usage:       18 bytes
 12751 ;; Hardware stack levels used:    1
 12752 ;; Hardware stack levels required when called:    8
 12753 ;; This function calls:
 12754 ;;		___fldiv
 12755 ;;		___flmul
 12756 ;;		___xxtofl
 12757 ;; This function is called by:
 12758 ;;		_mode1
 12759 ;;		_mode4
 12760 ;; This function uses a non-reentrant model
 12761 ;;
 12762                           
 12763                           	psect	text59
 12764  013A80                     __ptext59:
 12765                           	opt stack 0
 12766  013A80                     _ADC_Voltage:
 12767                           	opt stack 21
 12768                           
 12769                           ;ADC.c: 261: const float max = 1024;
 12770                           
 12771                           ; BSR set to: 0
 12772                           ;incstack = 0
 12773  013A80  0E00               	movlw	0
 12774  013A82  0100               	movlb	0	; () banked
 12775  013A84  6FA6               	movwf	ADC_Voltage@max& (0+255),b
 12776  013A86  0E00               	movlw	0
 12777  013A88  6FA7               	movwf	(ADC_Voltage@max+1)& (0+255),b
 12778  013A8A  0E80               	movlw	128
 12779  013A8C  6FA8               	movwf	(ADC_Voltage@max+2)& (0+255),b
 12780  013A8E  0E44               	movlw	68
 12781  013A90  6FA9               	movwf	(ADC_Voltage@max+3)& (0+255),b
 12782                           
 12783                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 12784  013A92  0E33               	movlw	51
 12785  013A94  0100               	movlb	0	; () banked
 12786  013A96  6FAA               	movwf	ADC_Voltage@ref& (0+255),b
 12787  013A98  0E33               	movlw	51
 12788  013A9A  6FAB               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 12789  013A9C  0E53               	movlw	83
 12790  013A9E  6FAC               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 12791  013AA0  0E40               	movlw	64
 12792  013AA2  6FAD               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 12793                           
 12794                           ; BSR set to: 0
 12795                           ;ADC.c: 263: float output = pInput->mValue;
 12796  013AA4  0100               	movlb	0	; () banked
 12797  013AA6  EE20 F001          	lfsr	2,1
 12798  013AAA  51A0               	movf	ADC_Voltage@pInput& (0+255),w,b
 12799  013AAC  26D9               	addwf	fsr2l,f,c
 12800  013AAE  51A1               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 12801  013AB0  22DA               	addwfc	fsr2h,f,c
 12802  013AB2  CFDE F0A4          	movff	postinc2,??_ADC_Voltage
 12803  013AB6  CFDD F0A5          	movff	postdec2,??_ADC_Voltage+1
 12804  013ABA  C0A4  F060         	movff	??_ADC_Voltage,___xxtofl@val
 12805  013ABE  C0A5  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 12806  013AC2  0100               	movlb	0	; () banked
 12807  013AC4  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 12808  013AC6  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 12809  013AC8  0E00               	movlw	0
 12810  013ACA  EC97  F091         	call	___xxtofl
 12811  013ACE  C060  F0AE         	movff	?___xxtofl,ADC_Voltage@output
 12812  013AD2  C061  F0AF         	movff	?___xxtofl+1,ADC_Voltage@output+1
 12813  013AD6  C062  F0B0         	movff	?___xxtofl+2,ADC_Voltage@output+2
 12814  013ADA  C063  F0B1         	movff	?___xxtofl+3,ADC_Voltage@output+3
 12815                           
 12816                           ;ADC.c: 265: output /= max;
 12817  013ADE  C0AE  F06E         	movff	ADC_Voltage@output,___fldiv@b
 12818  013AE2  C0AF  F06F         	movff	ADC_Voltage@output+1,___fldiv@b+1
 12819  013AE6  C0B0  F070         	movff	ADC_Voltage@output+2,___fldiv@b+2
 12820  013AEA  C0B1  F071         	movff	ADC_Voltage@output+3,___fldiv@b+3
 12821  013AEE  C0A6  F072         	movff	ADC_Voltage@max,___fldiv@a
 12822  013AF2  C0A7  F073         	movff	ADC_Voltage@max+1,___fldiv@a+1
 12823  013AF6  C0A8  F074         	movff	ADC_Voltage@max+2,___fldiv@a+2
 12824  013AFA  C0A9  F075         	movff	ADC_Voltage@max+3,___fldiv@a+3
 12825  013AFE  EC53  F088         	call	___fldiv	;wreg free
 12826  013B02  C06E  F0AE         	movff	?___fldiv,ADC_Voltage@output
 12827  013B06  C06F  F0AF         	movff	?___fldiv+1,ADC_Voltage@output+1
 12828  013B0A  C070  F0B0         	movff	?___fldiv+2,ADC_Voltage@output+2
 12829  013B0E  C071  F0B1         	movff	?___fldiv+3,ADC_Voltage@output+3
 12830                           
 12831                           ;ADC.c: 266: output *= ref;
 12832  013B12  C0AE  F087         	movff	ADC_Voltage@output,___flmul@b
 12833  013B16  C0AF  F088         	movff	ADC_Voltage@output+1,___flmul@b+1
 12834  013B1A  C0B0  F089         	movff	ADC_Voltage@output+2,___flmul@b+2
 12835  013B1E  C0B1  F08A         	movff	ADC_Voltage@output+3,___flmul@b+3
 12836  013B22  C0AA  F08B         	movff	ADC_Voltage@ref,___flmul@a
 12837  013B26  C0AB  F08C         	movff	ADC_Voltage@ref+1,___flmul@a+1
 12838  013B2A  C0AC  F08D         	movff	ADC_Voltage@ref+2,___flmul@a+2
 12839  013B2E  C0AD  F08E         	movff	ADC_Voltage@ref+3,___flmul@a+3
 12840  013B32  EC00  F080         	call	___flmul	;wreg free
 12841  013B36  C087  F0AE         	movff	?___flmul,ADC_Voltage@output
 12842  013B3A  C088  F0AF         	movff	?___flmul+1,ADC_Voltage@output+1
 12843  013B3E  C089  F0B0         	movff	?___flmul+2,ADC_Voltage@output+2
 12844  013B42  C08A  F0B1         	movff	?___flmul+3,ADC_Voltage@output+3
 12845                           
 12846                           ;ADC.c: 268: return output + (float)0.000;
 12847  013B46  C0AE  F0A0         	movff	ADC_Voltage@output,?_ADC_Voltage
 12848  013B4A  C0AF  F0A1         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 12849  013B4E  C0B0  F0A2         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 12850  013B52  C0B1  F0A3         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 12851  013B56  0012               	return	
 12852  013B58                     __end_of_ADC_Voltage:
 12853                           	opt stack 0
 12854                           tosu	equ	0xFFF
 12855                           tosh	equ	0xFFE
 12856                           tosl	equ	0xFFD
 12857                           pclath	equ	0xFFA
 12858                           tblptru	equ	0xFF8
 12859                           tblptrh	equ	0xFF7
 12860                           tblptrl	equ	0xFF6
 12861                           tablat	equ	0xFF5
 12862                           prodh	equ	0xFF4
 12863                           prodl	equ	0xFF3
 12864                           intcon	equ	0xFF2
 12865                           postinc0	equ	0xFEE
 12866                           wreg	equ	0xFE8
 12867                           indf1	equ	0xFE7
 12868                           postdec1	equ	0xFE5
 12869                           fsr1h	equ	0xFE2
 12870                           fsr1l	equ	0xFE1
 12871                           indf2	equ	0xFDF
 12872                           postinc2	equ	0xFDE
 12873                           postdec2	equ	0xFDD
 12874                           plusw2	equ	0xFDB
 12875                           fsr2h	equ	0xFDA
 12876                           fsr2l	equ	0xFD9
 12877                           status	equ	0xFD8
 12878                           
 12879 ;; *************** function ___xxtofl *****************
 12880 ;; Defined at:
 12881 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 12882 ;; Parameters:    Size  Location     Type
 12883 ;;  sign            1    wreg     unsigned char 
 12884 ;;  val             4    0[BANK0 ] long 
 12885 ;; Auto vars:     Size  Location     Type
 12886 ;;  sign            1    8[BANK0 ] unsigned char 
 12887 ;;  arg             4   10[BANK0 ] unsigned long 
 12888 ;;  exp             1    9[BANK0 ] unsigned char 
 12889 ;; Return value:  Size  Location     Type
 12890 ;;                  4    0[BANK0 ] unsigned char 
 12891 ;; Registers used:
 12892 ;;		wreg, status,2, status,0
 12893 ;; Tracked objects:
 12894 ;;		On entry : 0/0
 12895 ;;		On exit  : 0/0
 12896 ;;		Unchanged: 0/0
 12897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12898 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12899 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12900 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12901 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12902 ;;Total ram usage:       14 bytes
 12903 ;; Hardware stack levels used:    1
 12904 ;; Hardware stack levels required when called:    7
 12905 ;; This function calls:
 12906 ;;		Nothing
 12907 ;; This function is called by:
 12908 ;;		_ADC_Voltage
 12909 ;;		_mode4
 12910 ;; This function uses a non-reentrant model
 12911 ;;
 12912                           
 12913                           	psect	text60
 12914  01232E                     __ptext60:
 12915                           	opt stack 0
 12916  01232E                     ___xxtofl:
 12917                           	opt stack 22
 12918                           
 12919                           ;incstack = 0
 12920                           ;___xxtofl@sign stored from wreg
 12921  01232E  0100               	movlb	0	; () banked
 12922  012330  6F68               	movwf	___xxtofl@sign& (0+255),b
 12923  012332  0100               	movlb	0	; () banked
 12924  012334  5168               	movf	___xxtofl@sign& (0+255),w,b
 12925  012336  0100               	movlb	0	; () banked
 12926  012338  B4D8               	btfsc	status,2,c
 12927  01233A  D01E               	goto	l2982
 12928                           
 12929                           ; BSR set to: 0
 12930  01233C  0100               	movlb	0	; () banked
 12931  01233E  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 12932  012340  D01B               	goto	l2982
 12933                           
 12934                           ; BSR set to: 0
 12935  012342  C060  F064         	movff	___xxtofl@val,??___xxtofl
 12936  012346  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 12937  01234A  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 12938  01234E  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 12939  012352  0100               	movlb	0	; () banked
 12940  012354  1F64               	comf	??___xxtofl& (0+255),f,b
 12941  012356  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 12942  012358  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 12943  01235A  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 12944  01235C  2B64               	incf	??___xxtofl& (0+255),f,b
 12945  01235E  0E00               	movlw	0
 12946  012360  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 12947  012362  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 12948  012364  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 12949  012366  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 12950  01236A  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 12951  01236E  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 12952  012372  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 12953  012376  D008               	goto	l2983
 12954  012378                     l2982:
 12955                           
 12956                           ; BSR set to: 0
 12957  012378  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 12958  01237C  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 12959  012380  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 12960  012384  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 12961  012388                     l2983:
 12962                           
 12963                           ; BSR set to: 0
 12964                           
 12965                           ; BSR set to: 0
 12966  012388  0100               	movlb	0	; () banked
 12967  01238A  5160               	movf	___xxtofl@val& (0+255),w,b
 12968  01238C  0100               	movlb	0	; () banked
 12969  01238E  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 12970  012390  0100               	movlb	0	; () banked
 12971  012392  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 12972  012394  0100               	movlb	0	; () banked
 12973  012396  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 12974  012398  A4D8               	btfss	status,2,c
 12975  01239A  D00A               	goto	l2984
 12976                           
 12977                           ; BSR set to: 0
 12978  01239C  0E00               	movlw	0
 12979  01239E  0100               	movlb	0	; () banked
 12980  0123A0  6F60               	movwf	?___xxtofl& (0+255),b
 12981  0123A2  0E00               	movlw	0
 12982  0123A4  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 12983  0123A6  0E00               	movlw	0
 12984  0123A8  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 12985  0123AA  0E00               	movlw	0
 12986  0123AC  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 12987                           
 12988                           ; BSR set to: 0
 12989  0123AE  0012               	return	
 12990  0123B0                     l2984:
 12991                           
 12992                           ; BSR set to: 0
 12993                           
 12994                           ; BSR set to: 0
 12995  0123B0  0E96               	movlw	150
 12996  0123B2  0100               	movlb	0	; () banked
 12997  0123B4  6F69               	movwf	___xxtofl@exp& (0+255),b
 12998  0123B6  D008               	goto	l2986
 12999  0123B8                     
 13000                           ; BSR set to: 0
 13001                           
 13002                           ; BSR set to: 0
 13003  0123B8  0100               	movlb	0	; () banked
 13004  0123BA  2B69               	incf	___xxtofl@exp& (0+255),f,b
 13005  0123BC  0100               	movlb	0	; () banked
 13006  0123BE  90D8               	bcf	status,0,c
 13007  0123C0  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 13008  0123C2  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 13009  0123C4  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 13010  0123C6  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 13011  0123C8                     l2986:
 13012                           
 13013                           ; BSR set to: 0
 13014                           
 13015                           ; BSR set to: 0
 13016  0123C8  0E00               	movlw	0
 13017  0123CA  0100               	movlb	0	; () banked
 13018  0123CC  156A               	andwf	___xxtofl@arg& (0+255),w,b
 13019  0123CE  0100               	movlb	0	; () banked
 13020  0123D0  6F64               	movwf	??___xxtofl& (0+255),b
 13021  0123D2  0E00               	movlw	0
 13022  0123D4  0100               	movlb	0	; () banked
 13023  0123D6  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 13024  0123D8  0100               	movlb	0	; () banked
 13025  0123DA  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 13026  0123DC  0E00               	movlw	0
 13027  0123DE  0100               	movlb	0	; () banked
 13028  0123E0  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 13029  0123E2  0100               	movlb	0	; () banked
 13030  0123E4  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 13031  0123E6  0EFE               	movlw	254
 13032  0123E8  0100               	movlb	0	; () banked
 13033  0123EA  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 13034  0123EC  0100               	movlb	0	; () banked
 13035  0123EE  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 13036  0123F0  0100               	movlb	0	; () banked
 13037  0123F2  5164               	movf	??___xxtofl& (0+255),w,b
 13038  0123F4  0100               	movlb	0	; () banked
 13039  0123F6  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 13040  0123F8  0100               	movlb	0	; () banked
 13041  0123FA  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 13042  0123FC  0100               	movlb	0	; () banked
 13043  0123FE  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 13044  012400  B4D8               	btfsc	status,2,c
 13045  012402  D010               	goto	l2989
 13046  012404  D7D9               	goto	l2987
 13047  012406                     
 13048                           ; BSR set to: 0
 13049                           
 13050                           ; BSR set to: 0
 13051  012406  0100               	movlb	0	; () banked
 13052  012408  2B69               	incf	___xxtofl@exp& (0+255),f,b
 13053                           
 13054                           ; BSR set to: 0
 13055  01240A  0E01               	movlw	1
 13056  01240C  0100               	movlb	0	; () banked
 13057  01240E  276A               	addwf	___xxtofl@arg& (0+255),f,b
 13058  012410  0E00               	movlw	0
 13059  012412  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 13060  012414  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 13061  012416  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 13062                           
 13063                           ; BSR set to: 0
 13064  012418  0100               	movlb	0	; () banked
 13065  01241A  90D8               	bcf	status,0,c
 13066  01241C  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 13067  01241E  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 13068  012420  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 13069  012422  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 13070  012424                     l2989:
 13071                           
 13072                           ; BSR set to: 0
 13073  012424  0E00               	movlw	0
 13074  012426  0100               	movlb	0	; () banked
 13075  012428  156A               	andwf	___xxtofl@arg& (0+255),w,b
 13076  01242A  0100               	movlb	0	; () banked
 13077  01242C  6F64               	movwf	??___xxtofl& (0+255),b
 13078  01242E  0E00               	movlw	0
 13079  012430  0100               	movlb	0	; () banked
 13080  012432  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 13081  012434  0100               	movlb	0	; () banked
 13082  012436  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 13083  012438  0E00               	movlw	0
 13084  01243A  0100               	movlb	0	; () banked
 13085  01243C  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 13086  01243E  0100               	movlb	0	; () banked
 13087  012440  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 13088  012442  0EFF               	movlw	255
 13089  012444  0100               	movlb	0	; () banked
 13090  012446  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 13091  012448  0100               	movlb	0	; () banked
 13092  01244A  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 13093  01244C  0100               	movlb	0	; () banked
 13094  01244E  5164               	movf	??___xxtofl& (0+255),w,b
 13095  012450  0100               	movlb	0	; () banked
 13096  012452  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 13097  012454  0100               	movlb	0	; () banked
 13098  012456  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 13099  012458  0100               	movlb	0	; () banked
 13100  01245A  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 13101  01245C  B4D8               	btfsc	status,2,c
 13102  01245E  D009               	goto	l2992
 13103  012460  D7D2               	goto	l2990
 13104  012462                     
 13105                           ; BSR set to: 0
 13106                           
 13107                           ; BSR set to: 0
 13108  012462  0100               	movlb	0	; () banked
 13109  012464  0769               	decf	___xxtofl@exp& (0+255),f,b
 13110  012466  0100               	movlb	0	; () banked
 13111  012468  90D8               	bcf	status,0,c
 13112  01246A  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 13113  01246C  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 13114  01246E  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 13115  012470  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 13116  012472                     l2992:
 13117                           
 13118                           ; BSR set to: 0
 13119                           
 13120                           ; BSR set to: 0
 13121  012472  0100               	movlb	0	; () banked
 13122  012474  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 13123  012476  D004               	goto	u10690
 13124                           
 13125                           ; BSR set to: 0
 13126  012478  0E02               	movlw	2
 13127  01247A  0100               	movlb	0	; () banked
 13128  01247C  6169               	cpfslt	___xxtofl@exp& (0+255),b
 13129  01247E  D7F1               	goto	l2993
 13130  012480                     u10690:
 13131                           
 13132                           ; BSR set to: 0
 13133                           
 13134                           ; BSR set to: 0
 13135  012480  0100               	movlb	0	; () banked
 13136  012482  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 13137  012484  D009               	goto	l2997
 13138                           
 13139                           ; BSR set to: 0
 13140  012486  0EFF               	movlw	255
 13141  012488  0100               	movlb	0	; () banked
 13142  01248A  176A               	andwf	___xxtofl@arg& (0+255),f,b
 13143  01248C  0EFF               	movlw	255
 13144  01248E  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 13145  012490  0E7F               	movlw	127
 13146  012492  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 13147  012494  0EFF               	movlw	255
 13148  012496  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 13149  012498                     l2997:
 13150                           
 13151                           ; BSR set to: 0
 13152  012498  0100               	movlb	0	; () banked
 13153  01249A  90D8               	bcf	status,0,c
 13154  01249C  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 13155  01249E  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 13156  0124A2  0100               	movlb	0	; () banked
 13157  0124A4  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 13158  0124A6  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 13159  0124A8  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 13160  0124AA  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 13161  0124AE  0100               	movlb	0	; () banked
 13162  0124B0  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 13163  0124B2  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 13164  0124B4  6B64               	clrf	??___xxtofl& (0+255),b
 13165  0124B6  0100               	movlb	0	; () banked
 13166  0124B8  5164               	movf	??___xxtofl& (0+255),w,b
 13167  0124BA  0100               	movlb	0	; () banked
 13168  0124BC  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 13169  0124BE  0100               	movlb	0	; () banked
 13170  0124C0  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 13171  0124C2  0100               	movlb	0	; () banked
 13172  0124C4  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 13173  0124C6  0100               	movlb	0	; () banked
 13174  0124C8  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 13175  0124CA  0100               	movlb	0	; () banked
 13176  0124CC  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 13177  0124CE  0100               	movlb	0	; () banked
 13178  0124D0  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 13179  0124D2  0100               	movlb	0	; () banked
 13180  0124D4  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 13181                           
 13182                           ; BSR set to: 0
 13183  0124D6  0100               	movlb	0	; () banked
 13184  0124D8  5168               	movf	___xxtofl@sign& (0+255),w,b
 13185  0124DA  0100               	movlb	0	; () banked
 13186  0124DC  B4D8               	btfsc	status,2,c
 13187  0124DE  D005               	goto	l2998
 13188                           
 13189                           ; BSR set to: 0
 13190  0124E0  0100               	movlb	0	; () banked
 13191  0124E2  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 13192  0124E4  D002               	goto	l2998
 13193                           
 13194                           ; BSR set to: 0
 13195  0124E6  0100               	movlb	0	; () banked
 13196  0124E8  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 13197  0124EA                     l2998:
 13198                           
 13199                           ; BSR set to: 0
 13200                           
 13201                           ; BSR set to: 0
 13202  0124EA  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 13203  0124EE  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 13204  0124F2  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 13205  0124F6  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 13206  0124FA  0012               	return	
 13207  0124FC                     __end_of___xxtofl:
 13208                           	opt stack 0
 13209                           tosu	equ	0xFFF
 13210                           tosh	equ	0xFFE
 13211                           tosl	equ	0xFFD
 13212                           pclath	equ	0xFFA
 13213                           tblptru	equ	0xFF8
 13214                           tblptrh	equ	0xFF7
 13215                           tblptrl	equ	0xFF6
 13216                           tablat	equ	0xFF5
 13217                           prodh	equ	0xFF4
 13218                           prodl	equ	0xFF3
 13219                           intcon	equ	0xFF2
 13220                           postinc0	equ	0xFEE
 13221                           wreg	equ	0xFE8
 13222                           indf1	equ	0xFE7
 13223                           postdec1	equ	0xFE5
 13224                           fsr1h	equ	0xFE2
 13225                           fsr1l	equ	0xFE1
 13226                           indf2	equ	0xFDF
 13227                           postinc2	equ	0xFDE
 13228                           postdec2	equ	0xFDD
 13229                           plusw2	equ	0xFDB
 13230                           fsr2h	equ	0xFDA
 13231                           fsr2l	equ	0xFD9
 13232                           status	equ	0xFD8
 13233                           
 13234 ;; *************** function ___flmul *****************
 13235 ;; Defined at:
 13236 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 13237 ;; Parameters:    Size  Location     Type
 13238 ;;  b               4   39[BANK0 ] unsigned char 
 13239 ;;  a               4   43[BANK0 ] unsigned char 
 13240 ;; Auto vars:     Size  Location     Type
 13241 ;;  prod            4   58[BANK0 ] struct .
 13242 ;;  grs             4   53[BANK0 ] unsigned long 
 13243 ;;  temp            2   62[BANK0 ] struct .
 13244 ;;  bexp            1   57[BANK0 ] unsigned char 
 13245 ;;  aexp            1   52[BANK0 ] unsigned char 
 13246 ;;  sign            1   51[BANK0 ] unsigned char 
 13247 ;; Return value:  Size  Location     Type
 13248 ;;                  4   39[BANK0 ] unsigned char 
 13249 ;; Registers used:
 13250 ;;		wreg, status,2, status,0, prodl, prodh
 13251 ;; Tracked objects:
 13252 ;;		On entry : 0/0
 13253 ;;		On exit  : 0/0
 13254 ;;		Unchanged: 0/0
 13255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13256 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13257 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13258 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13259 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13260 ;;Total ram usage:       25 bytes
 13261 ;; Hardware stack levels used:    1
 13262 ;; Hardware stack levels required when called:    7
 13263 ;; This function calls:
 13264 ;;		Nothing
 13265 ;; This function is called by:
 13266 ;;		_ADC_Voltage
 13267 ;;		_mode4
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           	psect	text61
 13272  010000                     __ptext61:
 13273                           	opt stack 0
 13274  010000                     ___flmul:
 13275                           	opt stack 22
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;incstack = 0
 13279  010000  0100               	movlb	0	; () banked
 13280  010002  518A               	movf	(___flmul@b+3)& (0+255),w,b
 13281  010004  0B80               	andlw	128
 13282  010006  0100               	movlb	0	; () banked
 13283  010008  6F93               	movwf	___flmul@sign& (0+255),b
 13284  01000A  0100               	movlb	0	; () banked
 13285  01000C  518A               	movf	(___flmul@b+3)& (0+255),w,b
 13286  01000E  258A               	addwf	(___flmul@b+3)& (0+255),w,b
 13287  010010  0100               	movlb	0	; () banked
 13288  010012  6F99               	movwf	___flmul@bexp& (0+255),b
 13289                           
 13290                           ; BSR set to: 0
 13291  010014  0100               	movlb	0	; () banked
 13292  010016  AF89               	btfss	(___flmul@b+2)& (0+255),7,b
 13293  010018  D002               	goto	l2953
 13294                           
 13295                           ; BSR set to: 0
 13296  01001A  0100               	movlb	0	; () banked
 13297  01001C  8199               	bsf	___flmul@bexp& (0+255),0,b
 13298  01001E                     l2953:
 13299                           
 13300                           ; BSR set to: 0
 13301                           
 13302                           ; BSR set to: 0
 13303  01001E  0100               	movlb	0	; () banked
 13304  010020  5199               	movf	___flmul@bexp& (0+255),w,b
 13305  010022  0100               	movlb	0	; () banked
 13306  010024  B4D8               	btfsc	status,2,c
 13307  010026  D010               	goto	l2954
 13308                           
 13309                           ; BSR set to: 0
 13310  010028  0100               	movlb	0	; () banked
 13311  01002A  2999               	incf	___flmul@bexp& (0+255),w,b
 13312  01002C  A4D8               	btfss	status,2,c
 13313  01002E  D009               	goto	l2955
 13314                           
 13315                           ; BSR set to: 0
 13316  010030  0E00               	movlw	0
 13317  010032  0100               	movlb	0	; () banked
 13318  010034  6F87               	movwf	___flmul@b& (0+255),b
 13319  010036  0E00               	movlw	0
 13320  010038  6F88               	movwf	(___flmul@b+1)& (0+255),b
 13321  01003A  0E00               	movlw	0
 13322  01003C  6F89               	movwf	(___flmul@b+2)& (0+255),b
 13323  01003E  0E00               	movlw	0
 13324  010040  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 13325  010042                     l2955:
 13326                           
 13327                           ; BSR set to: 0
 13328                           
 13329                           ; BSR set to: 0
 13330  010042  0100               	movlb	0	; () banked
 13331  010044  8F89               	bsf	(___flmul@b+2)& (0+255),7,b
 13332  010046  D009               	goto	l2956
 13333  010048                     l2954:
 13334                           
 13335                           ; BSR set to: 0
 13336                           
 13337                           ; BSR set to: 0
 13338  010048  0E00               	movlw	0
 13339  01004A  0100               	movlb	0	; () banked
 13340  01004C  6F87               	movwf	___flmul@b& (0+255),b
 13341  01004E  0E00               	movlw	0
 13342  010050  6F88               	movwf	(___flmul@b+1)& (0+255),b
 13343  010052  0E00               	movlw	0
 13344  010054  6F89               	movwf	(___flmul@b+2)& (0+255),b
 13345  010056  0E00               	movlw	0
 13346  010058  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 13347  01005A                     l2956:
 13348                           
 13349                           ; BSR set to: 0
 13350                           
 13351                           ; BSR set to: 0
 13352  01005A  0100               	movlb	0	; () banked
 13353  01005C  518E               	movf	(___flmul@a+3)& (0+255),w,b
 13354  01005E  0B80               	andlw	128
 13355  010060  0100               	movlb	0	; () banked
 13356  010062  1B93               	xorwf	___flmul@sign& (0+255),f,b
 13357                           
 13358                           ; BSR set to: 0
 13359  010064  0100               	movlb	0	; () banked
 13360  010066  518E               	movf	(___flmul@a+3)& (0+255),w,b
 13361  010068  258E               	addwf	(___flmul@a+3)& (0+255),w,b
 13362  01006A  0100               	movlb	0	; () banked
 13363  01006C  6F94               	movwf	___flmul@aexp& (0+255),b
 13364                           
 13365                           ; BSR set to: 0
 13366  01006E  0100               	movlb	0	; () banked
 13367  010070  AF8D               	btfss	(___flmul@a+2)& (0+255),7,b
 13368  010072  D002               	goto	l2957
 13369                           
 13370                           ; BSR set to: 0
 13371  010074  0100               	movlb	0	; () banked
 13372  010076  8194               	bsf	___flmul@aexp& (0+255),0,b
 13373  010078                     l2957:
 13374                           
 13375                           ; BSR set to: 0
 13376                           
 13377                           ; BSR set to: 0
 13378  010078  0100               	movlb	0	; () banked
 13379  01007A  5194               	movf	___flmul@aexp& (0+255),w,b
 13380  01007C  0100               	movlb	0	; () banked
 13381  01007E  B4D8               	btfsc	status,2,c
 13382  010080  D010               	goto	l2958
 13383                           
 13384                           ; BSR set to: 0
 13385  010082  0100               	movlb	0	; () banked
 13386  010084  2994               	incf	___flmul@aexp& (0+255),w,b
 13387  010086  A4D8               	btfss	status,2,c
 13388  010088  D009               	goto	l2959
 13389                           
 13390                           ; BSR set to: 0
 13391  01008A  0E00               	movlw	0
 13392  01008C  0100               	movlb	0	; () banked
 13393  01008E  6F8B               	movwf	___flmul@a& (0+255),b
 13394  010090  0E00               	movlw	0
 13395  010092  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 13396  010094  0E00               	movlw	0
 13397  010096  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 13398  010098  0E00               	movlw	0
 13399  01009A  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 13400  01009C                     l2959:
 13401                           
 13402                           ; BSR set to: 0
 13403                           
 13404                           ; BSR set to: 0
 13405  01009C  0100               	movlb	0	; () banked
 13406  01009E  8F8D               	bsf	(___flmul@a+2)& (0+255),7,b
 13407  0100A0  D009               	goto	l2960
 13408  0100A2                     l2958:
 13409                           
 13410                           ; BSR set to: 0
 13411                           
 13412                           ; BSR set to: 0
 13413  0100A2  0E00               	movlw	0
 13414  0100A4  0100               	movlb	0	; () banked
 13415  0100A6  6F8B               	movwf	___flmul@a& (0+255),b
 13416  0100A8  0E00               	movlw	0
 13417  0100AA  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 13418  0100AC  0E00               	movlw	0
 13419  0100AE  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 13420  0100B0  0E00               	movlw	0
 13421  0100B2  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 13422  0100B4                     l2960:
 13423                           
 13424                           ; BSR set to: 0
 13425  0100B4  0100               	movlb	0	; () banked
 13426  0100B6  5194               	movf	___flmul@aexp& (0+255),w,b
 13427  0100B8  0100               	movlb	0	; () banked
 13428  0100BA  B4D8               	btfsc	status,2,c
 13429  0100BC  D005               	goto	u10510
 13430                           
 13431                           ; BSR set to: 0
 13432  0100BE  0100               	movlb	0	; () banked
 13433  0100C0  5199               	movf	___flmul@bexp& (0+255),w,b
 13434  0100C2  0100               	movlb	0	; () banked
 13435  0100C4  A4D8               	btfss	status,2,c
 13436  0100C6  D00A               	goto	l2961
 13437  0100C8                     u10510:
 13438                           
 13439                           ; BSR set to: 0
 13440                           
 13441                           ; BSR set to: 0
 13442  0100C8  0E00               	movlw	0
 13443  0100CA  0100               	movlb	0	; () banked
 13444  0100CC  6F87               	movwf	?___flmul& (0+255),b
 13445  0100CE  0E00               	movlw	0
 13446  0100D0  6F88               	movwf	(?___flmul+1)& (0+255),b
 13447  0100D2  0E00               	movlw	0
 13448  0100D4  6F89               	movwf	(?___flmul+2)& (0+255),b
 13449  0100D6  0E00               	movlw	0
 13450  0100D8  6F8A               	movwf	(?___flmul+3)& (0+255),b
 13451                           
 13452                           ; BSR set to: 0
 13453  0100DA  0012               	return	
 13454  0100DC                     l2961:
 13455                           
 13456                           ; BSR set to: 0
 13457                           
 13458                           ; BSR set to: 0
 13459  0100DC  0100               	movlb	0	; () banked
 13460  0100DE  518D               	movf	(___flmul@a+2)& (0+255),w,b
 13461  0100E0  0100               	movlb	0	; () banked
 13462  0100E2  0387               	mulwf	___flmul@b& (0+255),b
 13463  0100E4  CFF3 F09E          	movff	prodl,___flmul@temp
 13464  0100E8  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13465                           
 13466                           ; BSR set to: 0
 13467  0100EC  0100               	movlb	0	; () banked
 13468  0100EE  519E               	movf	___flmul@temp& (0+255),w,b
 13469  0100F0  0100               	movlb	0	; () banked
 13470  0100F2  6F95               	movwf	___flmul@grs& (0+255),b
 13471  0100F4  6B96               	clrf	(___flmul@grs+1)& (0+255),b
 13472  0100F6  6B97               	clrf	(___flmul@grs+2)& (0+255),b
 13473  0100F8  6B98               	clrf	(___flmul@grs+3)& (0+255),b
 13474                           
 13475                           ; BSR set to: 0
 13476  0100FA  0100               	movlb	0	; () banked
 13477  0100FC  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13478  0100FE  0100               	movlb	0	; () banked
 13479  010100  6F9A               	movwf	___flmul@prod& (0+255),b
 13480  010102  6B9B               	clrf	(___flmul@prod+1)& (0+255),b
 13481  010104  6B9C               	clrf	(___flmul@prod+2)& (0+255),b
 13482  010106  6B9D               	clrf	(___flmul@prod+3)& (0+255),b
 13483  010108  0100               	movlb	0	; () banked
 13484  01010A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 13485  01010C  0100               	movlb	0	; () banked
 13486  01010E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 13487  010110  CFF3 F09E          	movff	prodl,___flmul@temp
 13488  010114  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13489                           
 13490                           ; BSR set to: 0
 13491  010118  0100               	movlb	0	; () banked
 13492  01011A  519E               	movf	___flmul@temp& (0+255),w,b
 13493  01011C  0100               	movlb	0	; () banked
 13494  01011E  2795               	addwf	___flmul@grs& (0+255),f,b
 13495  010120  0E00               	movlw	0
 13496  010122  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13497  010124  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13498  010126  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13499                           
 13500                           ; BSR set to: 0
 13501  010128  0100               	movlb	0	; () banked
 13502  01012A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13503  01012C  0100               	movlb	0	; () banked
 13504  01012E  279A               	addwf	___flmul@prod& (0+255),f,b
 13505  010130  0E00               	movlw	0
 13506  010132  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13507  010134  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13508  010136  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13509  010138  0100               	movlb	0	; () banked
 13510  01013A  518B               	movf	___flmul@a& (0+255),w,b
 13511  01013C  0100               	movlb	0	; () banked
 13512  01013E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 13513  010140  CFF3 F09E          	movff	prodl,___flmul@temp
 13514  010144  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13515                           
 13516                           ; BSR set to: 0
 13517  010148  0100               	movlb	0	; () banked
 13518  01014A  519E               	movf	___flmul@temp& (0+255),w,b
 13519  01014C  0100               	movlb	0	; () banked
 13520  01014E  2795               	addwf	___flmul@grs& (0+255),f,b
 13521  010150  0E00               	movlw	0
 13522  010152  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13523  010154  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13524  010156  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13525                           
 13526                           ; BSR set to: 0
 13527  010158  0100               	movlb	0	; () banked
 13528  01015A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13529  01015C  0100               	movlb	0	; () banked
 13530  01015E  279A               	addwf	___flmul@prod& (0+255),f,b
 13531  010160  0E00               	movlw	0
 13532  010162  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13533  010164  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13534  010166  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13535                           
 13536                           ; BSR set to: 0
 13537  010168  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 13538  01016C  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 13539  010170  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 13540  010174  0100               	movlb	0	; () banked
 13541  010176  6B95               	clrf	___flmul@grs& (0+255),b
 13542                           
 13543                           ; BSR set to: 0
 13544  010178  0100               	movlb	0	; () banked
 13545  01017A  518B               	movf	___flmul@a& (0+255),w,b
 13546  01017C  0100               	movlb	0	; () banked
 13547  01017E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 13548  010180  CFF3 F09E          	movff	prodl,___flmul@temp
 13549  010184  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13550                           
 13551                           ; BSR set to: 0
 13552  010188  0100               	movlb	0	; () banked
 13553  01018A  519E               	movf	___flmul@temp& (0+255),w,b
 13554  01018C  0100               	movlb	0	; () banked
 13555  01018E  2795               	addwf	___flmul@grs& (0+255),f,b
 13556  010190  0100               	movlb	0	; () banked
 13557  010192  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13558  010194  0100               	movlb	0	; () banked
 13559  010196  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13560  010198  0E00               	movlw	0
 13561  01019A  0100               	movlb	0	; () banked
 13562  01019C  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13563  01019E  0E00               	movlw	0
 13564  0101A0  0100               	movlb	0	; () banked
 13565  0101A2  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13566                           
 13567                           ; BSR set to: 0
 13568  0101A4  0100               	movlb	0	; () banked
 13569  0101A6  518C               	movf	(___flmul@a+1)& (0+255),w,b
 13570  0101A8  0100               	movlb	0	; () banked
 13571  0101AA  0387               	mulwf	___flmul@b& (0+255),b
 13572  0101AC  CFF3 F09E          	movff	prodl,___flmul@temp
 13573  0101B0  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13574                           
 13575                           ; BSR set to: 0
 13576  0101B4  0100               	movlb	0	; () banked
 13577  0101B6  519E               	movf	___flmul@temp& (0+255),w,b
 13578  0101B8  0100               	movlb	0	; () banked
 13579  0101BA  2795               	addwf	___flmul@grs& (0+255),f,b
 13580  0101BC  0100               	movlb	0	; () banked
 13581  0101BE  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13582  0101C0  0100               	movlb	0	; () banked
 13583  0101C2  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13584  0101C4  0E00               	movlw	0
 13585  0101C6  0100               	movlb	0	; () banked
 13586  0101C8  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13587  0101CA  0E00               	movlw	0
 13588  0101CC  0100               	movlb	0	; () banked
 13589  0101CE  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13590                           
 13591                           ; BSR set to: 0
 13592  0101D0  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 13593  0101D4  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 13594  0101D8  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 13595  0101DC  0100               	movlb	0	; () banked
 13596  0101DE  6B95               	clrf	___flmul@grs& (0+255),b
 13597  0101E0  0100               	movlb	0	; () banked
 13598  0101E2  518B               	movf	___flmul@a& (0+255),w,b
 13599  0101E4  0100               	movlb	0	; () banked
 13600  0101E6  0387               	mulwf	___flmul@b& (0+255),b
 13601  0101E8  CFF3 F09E          	movff	prodl,___flmul@temp
 13602  0101EC  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13603                           
 13604                           ; BSR set to: 0
 13605  0101F0  0100               	movlb	0	; () banked
 13606  0101F2  519E               	movf	___flmul@temp& (0+255),w,b
 13607  0101F4  0100               	movlb	0	; () banked
 13608  0101F6  2795               	addwf	___flmul@grs& (0+255),f,b
 13609  0101F8  0100               	movlb	0	; () banked
 13610  0101FA  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13611  0101FC  0100               	movlb	0	; () banked
 13612  0101FE  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13613  010200  0E00               	movlw	0
 13614  010202  0100               	movlb	0	; () banked
 13615  010204  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13616  010206  0E00               	movlw	0
 13617  010208  0100               	movlb	0	; () banked
 13618  01020A  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13619                           
 13620                           ; BSR set to: 0
 13621  01020C  0100               	movlb	0	; () banked
 13622  01020E  518D               	movf	(___flmul@a+2)& (0+255),w,b
 13623  010210  0100               	movlb	0	; () banked
 13624  010212  0388               	mulwf	(___flmul@b+1)& (0+255),b
 13625  010214  CFF3 F09E          	movff	prodl,___flmul@temp
 13626  010218  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13627  01021C  0100               	movlb	0	; () banked
 13628  01021E  519E               	movf	___flmul@temp& (0+255),w,b
 13629  010220  0100               	movlb	0	; () banked
 13630  010222  279A               	addwf	___flmul@prod& (0+255),f,b
 13631  010224  0100               	movlb	0	; () banked
 13632  010226  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13633  010228  0100               	movlb	0	; () banked
 13634  01022A  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13635  01022C  0E00               	movlw	0
 13636  01022E  0100               	movlb	0	; () banked
 13637  010230  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13638  010232  0E00               	movlw	0
 13639  010234  0100               	movlb	0	; () banked
 13640  010236  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13641                           
 13642                           ; BSR set to: 0
 13643  010238  0100               	movlb	0	; () banked
 13644  01023A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 13645  01023C  0100               	movlb	0	; () banked
 13646  01023E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 13647  010240  CFF3 F09E          	movff	prodl,___flmul@temp
 13648  010244  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13649                           
 13650                           ; BSR set to: 0
 13651  010248  0100               	movlb	0	; () banked
 13652  01024A  519E               	movf	___flmul@temp& (0+255),w,b
 13653  01024C  0100               	movlb	0	; () banked
 13654  01024E  279A               	addwf	___flmul@prod& (0+255),f,b
 13655  010250  0100               	movlb	0	; () banked
 13656  010252  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13657  010254  0100               	movlb	0	; () banked
 13658  010256  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13659  010258  0E00               	movlw	0
 13660  01025A  0100               	movlb	0	; () banked
 13661  01025C  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13662  01025E  0E00               	movlw	0
 13663  010260  0100               	movlb	0	; () banked
 13664  010262  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13665  010264  0100               	movlb	0	; () banked
 13666  010266  518D               	movf	(___flmul@a+2)& (0+255),w,b
 13667  010268  0100               	movlb	0	; () banked
 13668  01026A  0389               	mulwf	(___flmul@b+2)& (0+255),b
 13669  01026C  CFF3 F09E          	movff	prodl,___flmul@temp
 13670  010270  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13671                           
 13672                           ; BSR set to: 0
 13673  010274  0100               	movlb	0	; () banked
 13674  010276  519E               	movf	___flmul@temp& (0+255),w,b
 13675  010278  0100               	movlb	0	; () banked
 13676  01027A  6F8F               	movwf	??___flmul& (0+255),b
 13677  01027C  0100               	movlb	0	; () banked
 13678  01027E  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13679  010280  0100               	movlb	0	; () banked
 13680  010282  6F90               	movwf	(??___flmul+1)& (0+255),b
 13681  010284  0100               	movlb	0	; () banked
 13682  010286  6B91               	clrf	(??___flmul+2)& (0+255),b
 13683  010288  0100               	movlb	0	; () banked
 13684  01028A  6B92               	clrf	(??___flmul+3)& (0+255),b
 13685  01028C  C091  F092         	movff	??___flmul+2,??___flmul+3
 13686  010290  C090  F091         	movff	??___flmul+1,??___flmul+2
 13687  010294  C08F  F090         	movff	??___flmul,??___flmul+1
 13688  010298  0100               	movlb	0	; () banked
 13689  01029A  6B8F               	clrf	??___flmul& (0+255),b
 13690  01029C  0100               	movlb	0	; () banked
 13691  01029E  518F               	movf	??___flmul& (0+255),w,b
 13692  0102A0  0100               	movlb	0	; () banked
 13693  0102A2  279A               	addwf	___flmul@prod& (0+255),f,b
 13694  0102A4  0100               	movlb	0	; () banked
 13695  0102A6  5190               	movf	(??___flmul+1)& (0+255),w,b
 13696  0102A8  0100               	movlb	0	; () banked
 13697  0102AA  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13698  0102AC  0100               	movlb	0	; () banked
 13699  0102AE  5191               	movf	(??___flmul+2)& (0+255),w,b
 13700  0102B0  0100               	movlb	0	; () banked
 13701  0102B2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13702  0102B4  0100               	movlb	0	; () banked
 13703  0102B6  5192               	movf	(??___flmul+3)& (0+255),w,b
 13704  0102B8  0100               	movlb	0	; () banked
 13705  0102BA  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13706                           
 13707                           ; BSR set to: 0
 13708  0102BC  C095  F08F         	movff	___flmul@grs,??___flmul
 13709  0102C0  C096  F090         	movff	___flmul@grs+1,??___flmul+1
 13710  0102C4  C097  F091         	movff	___flmul@grs+2,??___flmul+2
 13711  0102C8  C098  F092         	movff	___flmul@grs+3,??___flmul+3
 13712  0102CC  0E19               	movlw	25
 13713  0102CE  D006               	goto	u10520
 13714  0102D0                     u10525:
 13715  0102D0  0100               	movlb	0	; () banked
 13716  0102D2  90D8               	bcf	status,0,c
 13717  0102D4  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 13718  0102D6  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 13719  0102D8  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 13720  0102DA  338F               	rrcf	??___flmul& (0+255),f,b
 13721  0102DC                     u10520:
 13722  0102DC  2EE8               	decfsz	wreg,f,c
 13723  0102DE  D7F8               	goto	u10525
 13724  0102E0  0100               	movlb	0	; () banked
 13725  0102E2  518F               	movf	??___flmul& (0+255),w,b
 13726  0102E4  0100               	movlb	0	; () banked
 13727  0102E6  279A               	addwf	___flmul@prod& (0+255),f,b
 13728  0102E8  0100               	movlb	0	; () banked
 13729  0102EA  5190               	movf	(??___flmul+1)& (0+255),w,b
 13730  0102EC  0100               	movlb	0	; () banked
 13731  0102EE  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13732  0102F0  0100               	movlb	0	; () banked
 13733  0102F2  5191               	movf	(??___flmul+2)& (0+255),w,b
 13734  0102F4  0100               	movlb	0	; () banked
 13735  0102F6  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13736  0102F8  0100               	movlb	0	; () banked
 13737  0102FA  5192               	movf	(??___flmul+3)& (0+255),w,b
 13738  0102FC  0100               	movlb	0	; () banked
 13739  0102FE  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13740                           
 13741                           ; BSR set to: 0
 13742  010300  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 13743  010304  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 13744  010308  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 13745  01030C  0100               	movlb	0	; () banked
 13746  01030E  6B95               	clrf	___flmul@grs& (0+255),b
 13747                           
 13748                           ; BSR set to: 0
 13749  010310  0100               	movlb	0	; () banked
 13750  010312  5194               	movf	___flmul@aexp& (0+255),w,b
 13751  010314  C099  F08F         	movff	___flmul@bexp,??___flmul
 13752  010318  0100               	movlb	0	; () banked
 13753  01031A  6B90               	clrf	(??___flmul+1)& (0+255),b
 13754  01031C  0100               	movlb	0	; () banked
 13755  01031E  278F               	addwf	??___flmul& (0+255),f,b
 13756  010320  0E00               	movlw	0
 13757  010322  2390               	addwfc	(??___flmul+1)& (0+255),f,b
 13758  010324  0E82               	movlw	130
 13759  010326  0100               	movlb	0	; () banked
 13760  010328  258F               	addwf	??___flmul& (0+255),w,b
 13761  01032A  0100               	movlb	0	; () banked
 13762  01032C  6F9E               	movwf	___flmul@temp& (0+255),b
 13763  01032E  0EFF               	movlw	255
 13764  010330  0100               	movlb	0	; () banked
 13765  010332  2190               	addwfc	(??___flmul+1)& (0+255),w,b
 13766  010334  0100               	movlb	0	; () banked
 13767  010336  6F9F               	movwf	(___flmul@temp+1)& (0+255),b
 13768  010338  D015               	goto	l2965
 13769  01033A                     
 13770                           ; BSR set to: 0
 13771                           
 13772                           ; BSR set to: 0
 13773  01033A  0100               	movlb	0	; () banked
 13774  01033C  90D8               	bcf	status,0,c
 13775  01033E  379A               	rlcf	___flmul@prod& (0+255),f,b
 13776  010340  379B               	rlcf	(___flmul@prod+1)& (0+255),f,b
 13777  010342  379C               	rlcf	(___flmul@prod+2)& (0+255),f,b
 13778  010344  379D               	rlcf	(___flmul@prod+3)& (0+255),f,b
 13779                           
 13780                           ; BSR set to: 0
 13781  010346  0100               	movlb	0	; () banked
 13782  010348  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 13783  01034A  D002               	goto	l2967
 13784                           
 13785                           ; BSR set to: 0
 13786  01034C  0100               	movlb	0	; () banked
 13787  01034E  819A               	bsf	___flmul@prod& (0+255),0,b
 13788  010350                     l2967:
 13789                           
 13790                           ; BSR set to: 0
 13791  010350  0100               	movlb	0	; () banked
 13792  010352  90D8               	bcf	status,0,c
 13793  010354  3795               	rlcf	___flmul@grs& (0+255),f,b
 13794  010356  3796               	rlcf	(___flmul@grs+1)& (0+255),f,b
 13795  010358  3797               	rlcf	(___flmul@grs+2)& (0+255),f,b
 13796  01035A  3798               	rlcf	(___flmul@grs+3)& (0+255),f,b
 13797  01035C  0100               	movlb	0	; () banked
 13798  01035E  079E               	decf	___flmul@temp& (0+255),f,b
 13799  010360  A0D8               	btfss	status,0,c
 13800  010362  079F               	decf	(___flmul@temp+1)& (0+255),f,b
 13801  010364                     l2965:
 13802                           
 13803                           ; BSR set to: 0
 13804                           
 13805                           ; BSR set to: 0
 13806  010364  0100               	movlb	0	; () banked
 13807  010366  AF9C               	btfss	(___flmul@prod+2)& (0+255),7,b
 13808  010368  D7E8               	goto	l2966
 13809                           
 13810                           ; BSR set to: 0
 13811                           
 13812                           ; BSR set to: 0
 13813  01036A  0E00               	movlw	0
 13814  01036C  0100               	movlb	0	; () banked
 13815  01036E  6F94               	movwf	___flmul@aexp& (0+255),b
 13816                           
 13817                           ; BSR set to: 0
 13818  010370  0100               	movlb	0	; () banked
 13819  010372  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 13820  010374  D024               	goto	l2972
 13821                           
 13822                           ; BSR set to: 0
 13823  010376  0EFF               	movlw	255
 13824  010378  0100               	movlb	0	; () banked
 13825  01037A  1595               	andwf	___flmul@grs& (0+255),w,b
 13826  01037C  0100               	movlb	0	; () banked
 13827  01037E  6F8F               	movwf	??___flmul& (0+255),b
 13828  010380  0EFF               	movlw	255
 13829  010382  0100               	movlb	0	; () banked
 13830  010384  1596               	andwf	(___flmul@grs+1)& (0+255),w,b
 13831  010386  0100               	movlb	0	; () banked
 13832  010388  6F90               	movwf	(??___flmul+1)& (0+255),b
 13833  01038A  0EFF               	movlw	255
 13834  01038C  0100               	movlb	0	; () banked
 13835  01038E  1597               	andwf	(___flmul@grs+2)& (0+255),w,b
 13836  010390  0100               	movlb	0	; () banked
 13837  010392  6F91               	movwf	(??___flmul+2)& (0+255),b
 13838  010394  0E7F               	movlw	127
 13839  010396  0100               	movlb	0	; () banked
 13840  010398  1598               	andwf	(___flmul@grs+3)& (0+255),w,b
 13841  01039A  0100               	movlb	0	; () banked
 13842  01039C  6F92               	movwf	(??___flmul+3)& (0+255),b
 13843  01039E  0100               	movlb	0	; () banked
 13844  0103A0  518F               	movf	??___flmul& (0+255),w,b
 13845  0103A2  0100               	movlb	0	; () banked
 13846  0103A4  1190               	iorwf	(??___flmul+1)& (0+255),w,b
 13847  0103A6  0100               	movlb	0	; () banked
 13848  0103A8  1191               	iorwf	(??___flmul+2)& (0+255),w,b
 13849  0103AA  0100               	movlb	0	; () banked
 13850  0103AC  1192               	iorwf	(??___flmul+3)& (0+255),w,b
 13851  0103AE  A4D8               	btfss	status,2,c
 13852  0103B0  D003               	goto	u10570
 13853                           
 13854                           ; BSR set to: 0
 13855                           
 13856                           ; BSR set to: 0
 13857  0103B2  0100               	movlb	0	; () banked
 13858  0103B4  A19A               	btfss	___flmul@prod& (0+255),0,b
 13859  0103B6  D003               	goto	l2972
 13860  0103B8                     u10570:
 13861                           
 13862                           ; BSR set to: 0
 13863  0103B8  0E01               	movlw	1
 13864  0103BA  0100               	movlb	0	; () banked
 13865  0103BC  6F94               	movwf	___flmul@aexp& (0+255),b
 13866  0103BE                     l2972:
 13867                           
 13868                           ; BSR set to: 0
 13869                           
 13870                           ; BSR set to: 0
 13871                           
 13872                           ; BSR set to: 0
 13873  0103BE  0100               	movlb	0	; () banked
 13874  0103C0  5194               	movf	___flmul@aexp& (0+255),w,b
 13875  0103C2  0100               	movlb	0	; () banked
 13876  0103C4  B4D8               	btfsc	status,2,c
 13877  0103C6  D023               	goto	l2974
 13878                           
 13879                           ; BSR set to: 0
 13880  0103C8  0E01               	movlw	1
 13881  0103CA  0100               	movlb	0	; () banked
 13882  0103CC  279A               	addwf	___flmul@prod& (0+255),f,b
 13883  0103CE  0E00               	movlw	0
 13884  0103D0  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13885  0103D2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13886  0103D4  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13887                           
 13888                           ; BSR set to: 0
 13889  0103D6  0100               	movlb	0	; () banked
 13890  0103D8  A19D               	btfss	(___flmul@prod+3)& (0+255),0,b
 13891  0103DA  D019               	goto	l2974
 13892                           
 13893                           ; BSR set to: 0
 13894  0103DC  C09A  F08F         	movff	___flmul@prod,??___flmul
 13895  0103E0  C09B  F090         	movff	___flmul@prod+1,??___flmul+1
 13896  0103E4  C09C  F091         	movff	___flmul@prod+2,??___flmul+2
 13897  0103E8  C09D  F092         	movff	___flmul@prod+3,??___flmul+3
 13898  0103EC  0100               	movlb	0	; () banked
 13899  0103EE  3592               	rlcf	(??___flmul+3)& (0+255),w,b
 13900  0103F0  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 13901  0103F2  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 13902  0103F4  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 13903  0103F6  338F               	rrcf	??___flmul& (0+255),f,b
 13904  0103F8  C08F  F09A         	movff	??___flmul,___flmul@prod
 13905  0103FC  C090  F09B         	movff	??___flmul+1,___flmul@prod+1
 13906  010400  C091  F09C         	movff	??___flmul+2,___flmul@prod+2
 13907  010404  C092  F09D         	movff	??___flmul+3,___flmul@prod+3
 13908                           
 13909                           ; BSR set to: 0
 13910  010408  0100               	movlb	0	; () banked
 13911  01040A  4B9E               	infsnz	___flmul@temp& (0+255),f,b
 13912  01040C  2B9F               	incf	(___flmul@temp+1)& (0+255),f,b
 13913  01040E                     l2974:
 13914                           
 13915                           ; BSR set to: 0
 13916                           
 13917                           ; BSR set to: 0
 13918                           
 13919                           ; BSR set to: 0
 13920  01040E  0100               	movlb	0	; () banked
 13921  010410  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13922  010412  D010               	goto	l2975
 13923  010414  0100               	movlb	0	; () banked
 13924  010416  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13925  010418  E104               	bnz	u10600
 13926  01041A  0100               	movlb	0	; () banked
 13927  01041C  299E               	incf	___flmul@temp& (0+255),w,b
 13928  01041E  A0D8               	btfss	status,0,c
 13929  010420  D009               	goto	l2975
 13930  010422                     u10600:
 13931                           
 13932                           ; BSR set to: 0
 13933  010422  0E00               	movlw	0
 13934  010424  0100               	movlb	0	; () banked
 13935  010426  6F9A               	movwf	___flmul@prod& (0+255),b
 13936  010428  0E00               	movlw	0
 13937  01042A  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 13938  01042C  0E80               	movlw	128
 13939  01042E  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 13940  010430  0E7F               	movlw	127
 13941  010432  D02B               	goto	L5
 13942  010434                     l2975:
 13943                           
 13944                           ; BSR set to: 0
 13945                           
 13946                           ; BSR set to: 0
 13947  010434  0100               	movlb	0	; () banked
 13948  010436  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13949  010438  D007               	goto	u10610
 13950  01043A  0100               	movlb	0	; () banked
 13951  01043C  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13952  01043E  E111               	bnz	l2977
 13953  010440  0100               	movlb	0	; () banked
 13954  010442  059E               	decf	___flmul@temp& (0+255),w,b
 13955  010444  B0D8               	btfsc	status,0,c
 13956  010446  D00D               	goto	l2977
 13957  010448                     u10610:
 13958                           
 13959                           ; BSR set to: 0
 13960  010448  0E00               	movlw	0
 13961  01044A  0100               	movlb	0	; () banked
 13962  01044C  6F9A               	movwf	___flmul@prod& (0+255),b
 13963  01044E  0E00               	movlw	0
 13964  010450  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 13965  010452  0E00               	movlw	0
 13966  010454  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 13967  010456  0E00               	movlw	0
 13968  010458  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 13969  01045A  0E00               	movlw	0
 13970  01045C  0100               	movlb	0	; () banked
 13971  01045E  6F93               	movwf	___flmul@sign& (0+255),b
 13972  010460  D015               	goto	l2978
 13973  010462                     l2977:
 13974                           
 13975                           ; BSR set to: 0
 13976  010462  C09E  F099         	movff	___flmul@temp,___flmul@bexp
 13977                           
 13978                           ; BSR set to: 0
 13979  010466  0EFF               	movlw	255
 13980  010468  0100               	movlb	0	; () banked
 13981  01046A  179A               	andwf	___flmul@prod& (0+255),f,b
 13982  01046C  0EFF               	movlw	255
 13983  01046E  179B               	andwf	(___flmul@prod+1)& (0+255),f,b
 13984  010470  0E7F               	movlw	127
 13985  010472  179C               	andwf	(___flmul@prod+2)& (0+255),f,b
 13986  010474  0E00               	movlw	0
 13987  010476  179D               	andwf	(___flmul@prod+3)& (0+255),f,b
 13988                           
 13989                           ; BSR set to: 0
 13990  010478  0100               	movlb	0	; () banked
 13991  01047A  A199               	btfss	___flmul@bexp& (0+255),0,b
 13992  01047C  D002               	goto	l2979
 13993                           
 13994                           ; BSR set to: 0
 13995  01047E  0100               	movlb	0	; () banked
 13996  010480  8F9C               	bsf	(___flmul@prod+2)& (0+255),7,b
 13997  010482                     l2979:
 13998                           
 13999                           ; BSR set to: 0
 14000                           
 14001                           ; BSR set to: 0
 14002  010482  0100               	movlb	0	; () banked
 14003  010484  90D8               	bcf	status,0,c
 14004  010486  3199               	rrcf	___flmul@bexp& (0+255),w,b
 14005  010488  0100               	movlb	0	; () banked
 14006  01048A                     L5:
 14007  01048A  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 14008  01048C                     l2978:
 14009                           
 14010                           ; BSR set to: 0
 14011                           
 14012                           ; BSR set to: 0
 14013                           
 14014                           ; BSR set to: 0
 14015  01048C  0100               	movlb	0	; () banked
 14016  01048E  5193               	movf	___flmul@sign& (0+255),w,b
 14017  010490  0100               	movlb	0	; () banked
 14018  010492  139D               	iorwf	(___flmul@prod+3)& (0+255),f,b
 14019                           
 14020                           ; BSR set to: 0
 14021  010494  C09A  F087         	movff	___flmul@prod,?___flmul
 14022  010498  C09B  F088         	movff	___flmul@prod+1,?___flmul+1
 14023  01049C  C09C  F089         	movff	___flmul@prod+2,?___flmul+2
 14024  0104A0  C09D  F08A         	movff	___flmul@prod+3,?___flmul+3
 14025  0104A4  0012               	return	
 14026  0104A6                     __end_of___flmul:
 14027                           	opt stack 0
 14028                           tosu	equ	0xFFF
 14029                           tosh	equ	0xFFE
 14030                           tosl	equ	0xFFD
 14031                           pclath	equ	0xFFA
 14032                           tblptru	equ	0xFF8
 14033                           tblptrh	equ	0xFF7
 14034                           tblptrl	equ	0xFF6
 14035                           tablat	equ	0xFF5
 14036                           prodh	equ	0xFF4
 14037                           prodl	equ	0xFF3
 14038                           intcon	equ	0xFF2
 14039                           postinc0	equ	0xFEE
 14040                           wreg	equ	0xFE8
 14041                           indf1	equ	0xFE7
 14042                           postdec1	equ	0xFE5
 14043                           fsr1h	equ	0xFE2
 14044                           fsr1l	equ	0xFE1
 14045                           indf2	equ	0xFDF
 14046                           postinc2	equ	0xFDE
 14047                           postdec2	equ	0xFDD
 14048                           plusw2	equ	0xFDB
 14049                           fsr2h	equ	0xFDA
 14050                           fsr2l	equ	0xFD9
 14051                           status	equ	0xFD8
 14052                           
 14053 ;; *************** function ___fldiv *****************
 14054 ;; Defined at:
 14055 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 14056 ;; Parameters:    Size  Location     Type
 14057 ;;  b               4   14[BANK0 ] unsigned char 
 14058 ;;  a               4   18[BANK0 ] unsigned char 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;  grs             4   33[BANK0 ] unsigned long 
 14061 ;;  rem             4   27[BANK0 ] unsigned long 
 14062 ;;  new_exp         2   31[BANK0 ] int 
 14063 ;;  aexp            1   38[BANK0 ] unsigned char 
 14064 ;;  bexp            1   37[BANK0 ] unsigned char 
 14065 ;;  sign            1   26[BANK0 ] unsigned char 
 14066 ;; Return value:  Size  Location     Type
 14067 ;;                  4   14[BANK0 ] unsigned char 
 14068 ;; Registers used:
 14069 ;;		wreg, status,2, status,0
 14070 ;; Tracked objects:
 14071 ;;		On entry : 0/0
 14072 ;;		On exit  : 0/0
 14073 ;;		Unchanged: 0/0
 14074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14075 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14076 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14077 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14078 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14079 ;;Total ram usage:       25 bytes
 14080 ;; Hardware stack levels used:    1
 14081 ;; Hardware stack levels required when called:    7
 14082 ;; This function calls:
 14083 ;;		Nothing
 14084 ;; This function is called by:
 14085 ;;		_ADC_Voltage
 14086 ;;		_mode1
 14087 ;;		_mode4
 14088 ;; This function uses a non-reentrant model
 14089 ;;
 14090                           
 14091                           	psect	text62
 14092  0110A6                     __ptext62:
 14093                           	opt stack 0
 14094  0110A6                     ___fldiv:
 14095                           	opt stack 22
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;incstack = 0
 14099  0110A6  0100               	movlb	0	; () banked
 14100  0110A8  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 14101  0110AA  0B80               	andlw	128
 14102  0110AC  0100               	movlb	0	; () banked
 14103  0110AE  6F7A               	movwf	___fldiv@sign& (0+255),b
 14104  0110B0  0100               	movlb	0	; () banked
 14105  0110B2  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 14106  0110B4  2571               	addwf	(___fldiv@b+3)& (0+255),w,b
 14107  0110B6  0100               	movlb	0	; () banked
 14108  0110B8  6F85               	movwf	___fldiv@bexp& (0+255),b
 14109                           
 14110                           ; BSR set to: 0
 14111  0110BA  0100               	movlb	0	; () banked
 14112  0110BC  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 14113  0110BE  D002               	goto	l2919
 14114                           
 14115                           ; BSR set to: 0
 14116  0110C0  0100               	movlb	0	; () banked
 14117  0110C2  8185               	bsf	___fldiv@bexp& (0+255),0,b
 14118  0110C4                     l2919:
 14119                           
 14120                           ; BSR set to: 0
 14121                           
 14122                           ; BSR set to: 0
 14123  0110C4  0100               	movlb	0	; () banked
 14124  0110C6  5185               	movf	___fldiv@bexp& (0+255),w,b
 14125  0110C8  0100               	movlb	0	; () banked
 14126  0110CA  B4D8               	btfsc	status,2,c
 14127  0110CC  D012               	goto	l2920
 14128                           
 14129                           ; BSR set to: 0
 14130  0110CE  0100               	movlb	0	; () banked
 14131  0110D0  2985               	incf	___fldiv@bexp& (0+255),w,b
 14132  0110D2  A4D8               	btfss	status,2,c
 14133  0110D4  D009               	goto	l2921
 14134                           
 14135                           ; BSR set to: 0
 14136  0110D6  0E00               	movlw	0
 14137  0110D8  0100               	movlb	0	; () banked
 14138  0110DA  6F6E               	movwf	___fldiv@b& (0+255),b
 14139  0110DC  0E00               	movlw	0
 14140  0110DE  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14141  0110E0  0E00               	movlw	0
 14142  0110E2  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14143  0110E4  0E00               	movlw	0
 14144  0110E6  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14145  0110E8                     l2921:
 14146                           
 14147                           ; BSR set to: 0
 14148                           
 14149                           ; BSR set to: 0
 14150  0110E8  0100               	movlb	0	; () banked
 14151  0110EA  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 14152                           
 14153                           ; BSR set to: 0
 14154  0110EC  0E00               	movlw	0
 14155  0110EE  0100               	movlb	0	; () banked
 14156  0110F0  D008               	goto	L6
 14157  0110F2                     l2920:
 14158                           
 14159                           ; BSR set to: 0
 14160                           
 14161                           ; BSR set to: 0
 14162  0110F2  0E00               	movlw	0
 14163  0110F4  0100               	movlb	0	; () banked
 14164  0110F6  6F6E               	movwf	___fldiv@b& (0+255),b
 14165  0110F8  0E00               	movlw	0
 14166  0110FA  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14167  0110FC  0E00               	movlw	0
 14168  0110FE  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14169  011100  0E00               	movlw	0
 14170  011102                     L6:
 14171  011102  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14172                           
 14173                           ; BSR set to: 0
 14174                           
 14175                           ; BSR set to: 0
 14176  011104  0100               	movlb	0	; () banked
 14177  011106  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14178  011108  0B80               	andlw	128
 14179  01110A  0100               	movlb	0	; () banked
 14180  01110C  1B7A               	xorwf	___fldiv@sign& (0+255),f,b
 14181                           
 14182                           ; BSR set to: 0
 14183  01110E  0100               	movlb	0	; () banked
 14184  011110  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14185  011112  2575               	addwf	(___fldiv@a+3)& (0+255),w,b
 14186  011114  0100               	movlb	0	; () banked
 14187  011116  6F86               	movwf	___fldiv@aexp& (0+255),b
 14188                           
 14189                           ; BSR set to: 0
 14190  011118  0100               	movlb	0	; () banked
 14191  01111A  AF74               	btfss	(___fldiv@a+2)& (0+255),7,b
 14192  01111C  D002               	goto	l2923
 14193                           
 14194                           ; BSR set to: 0
 14195  01111E  0100               	movlb	0	; () banked
 14196  011120  8186               	bsf	___fldiv@aexp& (0+255),0,b
 14197  011122                     l2923:
 14198                           
 14199                           ; BSR set to: 0
 14200                           
 14201                           ; BSR set to: 0
 14202  011122  0100               	movlb	0	; () banked
 14203  011124  5186               	movf	___fldiv@aexp& (0+255),w,b
 14204  011126  0100               	movlb	0	; () banked
 14205  011128  B4D8               	btfsc	status,2,c
 14206  01112A  D012               	goto	l2924
 14207                           
 14208                           ; BSR set to: 0
 14209  01112C  0100               	movlb	0	; () banked
 14210  01112E  2986               	incf	___fldiv@aexp& (0+255),w,b
 14211  011130  A4D8               	btfss	status,2,c
 14212  011132  D009               	goto	l2925
 14213                           
 14214                           ; BSR set to: 0
 14215  011134  0E00               	movlw	0
 14216  011136  0100               	movlb	0	; () banked
 14217  011138  6F72               	movwf	___fldiv@a& (0+255),b
 14218  01113A  0E00               	movlw	0
 14219  01113C  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 14220  01113E  0E00               	movlw	0
 14221  011140  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 14222  011142  0E00               	movlw	0
 14223  011144  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 14224  011146                     l2925:
 14225                           
 14226                           ; BSR set to: 0
 14227                           
 14228                           ; BSR set to: 0
 14229  011146  0100               	movlb	0	; () banked
 14230  011148  8F74               	bsf	(___fldiv@a+2)& (0+255),7,b
 14231                           
 14232                           ; BSR set to: 0
 14233  01114A  0E00               	movlw	0
 14234  01114C  0100               	movlb	0	; () banked
 14235  01114E  D008               	goto	L7
 14236  011150                     l2924:
 14237                           
 14238                           ; BSR set to: 0
 14239                           
 14240                           ; BSR set to: 0
 14241  011150  0E00               	movlw	0
 14242  011152  0100               	movlb	0	; () banked
 14243  011154  6F72               	movwf	___fldiv@a& (0+255),b
 14244  011156  0E00               	movlw	0
 14245  011158  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 14246  01115A  0E00               	movlw	0
 14247  01115C  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 14248  01115E  0E00               	movlw	0
 14249  011160                     L7:
 14250  011160  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 14251                           
 14252                           ; BSR set to: 0
 14253                           
 14254                           ; BSR set to: 0
 14255  011162  0100               	movlb	0	; () banked
 14256  011164  5172               	movf	___fldiv@a& (0+255),w,b
 14257  011166  0100               	movlb	0	; () banked
 14258  011168  1173               	iorwf	(___fldiv@a+1)& (0+255),w,b
 14259  01116A  0100               	movlb	0	; () banked
 14260  01116C  1174               	iorwf	(___fldiv@a+2)& (0+255),w,b
 14261  01116E  0100               	movlb	0	; () banked
 14262  011170  1175               	iorwf	(___fldiv@a+3)& (0+255),w,b
 14263  011172  A4D8               	btfss	status,2,c
 14264  011174  D017               	goto	l2927
 14265                           
 14266                           ; BSR set to: 0
 14267  011176  0E00               	movlw	0
 14268  011178  0100               	movlb	0	; () banked
 14269  01117A  6F6E               	movwf	___fldiv@b& (0+255),b
 14270  01117C  0E00               	movlw	0
 14271  01117E  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14272  011180  0E00               	movlw	0
 14273  011182  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14274  011184  0E00               	movlw	0
 14275  011186  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14276                           
 14277                           ; BSR set to: 0
 14278  011188  0100               	movlb	0	; () banked
 14279  01118A  0E80               	movlw	128
 14280  01118C  1370               	iorwf	(___fldiv@b+2)& (0+255),f,b
 14281  01118E  0E7F               	movlw	127
 14282  011190  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 14283                           
 14284                           ; BSR set to: 0
 14285  011192  C06E  F06E         	movff	___fldiv@b,?___fldiv
 14286  011196  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 14287  01119A  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 14288  01119E  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 14289                           
 14290                           ; BSR set to: 0
 14291  0111A2  0012               	return	
 14292  0111A4                     l2927:
 14293                           
 14294                           ; BSR set to: 0
 14295                           
 14296                           ; BSR set to: 0
 14297  0111A4  0100               	movlb	0	; () banked
 14298  0111A6  5185               	movf	___fldiv@bexp& (0+255),w,b
 14299  0111A8  0100               	movlb	0	; () banked
 14300  0111AA  A4D8               	btfss	status,2,c
 14301  0111AC  D012               	goto	l2929
 14302                           
 14303                           ; BSR set to: 0
 14304  0111AE  0E00               	movlw	0
 14305  0111B0  0100               	movlb	0	; () banked
 14306  0111B2  6F6E               	movwf	___fldiv@b& (0+255),b
 14307  0111B4  0E00               	movlw	0
 14308  0111B6  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14309  0111B8  0E00               	movlw	0
 14310  0111BA  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14311  0111BC  0E00               	movlw	0
 14312  0111BE  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14313                           
 14314                           ; BSR set to: 0
 14315  0111C0  C06E  F06E         	movff	___fldiv@b,?___fldiv
 14316  0111C4  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 14317  0111C8  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 14318  0111CC  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 14319                           
 14320                           ; BSR set to: 0
 14321  0111D0  0012               	return	
 14322  0111D2                     l2929:
 14323                           
 14324                           ; BSR set to: 0
 14325                           
 14326                           ; BSR set to: 0
 14327  0111D2  0100               	movlb	0	; () banked
 14328  0111D4  5186               	movf	___fldiv@aexp& (0+255),w,b
 14329  0111D6  0100               	movlb	0	; () banked
 14330  0111D8  6F76               	movwf	??___fldiv& (0+255),b
 14331  0111DA  6B77               	clrf	(??___fldiv+1)& (0+255),b
 14332  0111DC  0100               	movlb	0	; () banked
 14333  0111DE  1F76               	comf	??___fldiv& (0+255),f,b
 14334  0111E0  1F77               	comf	(??___fldiv+1)& (0+255),f,b
 14335  0111E2  4B76               	infsnz	??___fldiv& (0+255),f,b
 14336  0111E4  2B77               	incf	(??___fldiv+1)& (0+255),f,b
 14337  0111E6  0100               	movlb	0	; () banked
 14338  0111E8  5185               	movf	___fldiv@bexp& (0+255),w,b
 14339  0111EA  0100               	movlb	0	; () banked
 14340  0111EC  6F78               	movwf	(??___fldiv+2)& (0+255),b
 14341  0111EE  6B79               	clrf	(??___fldiv+3)& (0+255),b
 14342  0111F0  0100               	movlb	0	; () banked
 14343  0111F2  5176               	movf	??___fldiv& (0+255),w,b
 14344  0111F4  0100               	movlb	0	; () banked
 14345  0111F6  2778               	addwf	(??___fldiv+2)& (0+255),f,b
 14346  0111F8  0100               	movlb	0	; () banked
 14347  0111FA  5177               	movf	(??___fldiv+1)& (0+255),w,b
 14348  0111FC  0100               	movlb	0	; () banked
 14349  0111FE  2379               	addwfc	(??___fldiv+3)& (0+255),f,b
 14350  011200  0E7F               	movlw	127
 14351  011202  0100               	movlb	0	; () banked
 14352  011204  2578               	addwf	(??___fldiv+2)& (0+255),w,b
 14353  011206  0100               	movlb	0	; () banked
 14354  011208  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 14355  01120A  0E00               	movlw	0
 14356  01120C  0100               	movlb	0	; () banked
 14357  01120E  2179               	addwfc	(??___fldiv+3)& (0+255),w,b
 14358  011210  0100               	movlb	0	; () banked
 14359  011212  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14360                           
 14361                           ; BSR set to: 0
 14362  011214  C06E  F07B         	movff	___fldiv@b,___fldiv@rem
 14363  011218  C06F  F07C         	movff	___fldiv@b+1,___fldiv@rem+1
 14364  01121C  C070  F07D         	movff	___fldiv@b+2,___fldiv@rem+2
 14365  011220  C071  F07E         	movff	___fldiv@b+3,___fldiv@rem+3
 14366                           
 14367                           ; BSR set to: 0
 14368  011224  0E00               	movlw	0
 14369  011226  0100               	movlb	0	; () banked
 14370  011228  6F6E               	movwf	___fldiv@b& (0+255),b
 14371  01122A  0E00               	movlw	0
 14372  01122C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14373  01122E  0E00               	movlw	0
 14374  011230  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14375  011232  0E00               	movlw	0
 14376  011234  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14377                           
 14378                           ; BSR set to: 0
 14379  011236  0E00               	movlw	0
 14380  011238  0100               	movlb	0	; () banked
 14381  01123A  6F81               	movwf	___fldiv@grs& (0+255),b
 14382  01123C  0E00               	movlw	0
 14383  01123E  6F82               	movwf	(___fldiv@grs+1)& (0+255),b
 14384  011240  0E00               	movlw	0
 14385  011242  6F83               	movwf	(___fldiv@grs+2)& (0+255),b
 14386  011244  0E00               	movlw	0
 14387  011246  6F84               	movwf	(___fldiv@grs+3)& (0+255),b
 14388                           
 14389                           ; BSR set to: 0
 14390  011248  0E00               	movlw	0
 14391  01124A  0100               	movlb	0	; () banked
 14392  01124C  6F86               	movwf	___fldiv@aexp& (0+255),b
 14393  01124E  D042               	goto	l2930
 14394  011250                     
 14395                           ; BSR set to: 0
 14396                           
 14397                           ; BSR set to: 0
 14398  011250  0100               	movlb	0	; () banked
 14399  011252  5186               	movf	___fldiv@aexp& (0+255),w,b
 14400  011254  0100               	movlb	0	; () banked
 14401  011256  B4D8               	btfsc	status,2,c
 14402  011258  D017               	goto	l2932
 14403                           
 14404                           ; BSR set to: 0
 14405  01125A  0100               	movlb	0	; () banked
 14406  01125C  90D8               	bcf	status,0,c
 14407  01125E  377B               	rlcf	___fldiv@rem& (0+255),f,b
 14408  011260  377C               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 14409  011262  377D               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 14410  011264  377E               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 14411  011266  0100               	movlb	0	; () banked
 14412  011268  90D8               	bcf	status,0,c
 14413  01126A  376E               	rlcf	___fldiv@b& (0+255),f,b
 14414  01126C  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 14415  01126E  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 14416  011270  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 14417                           
 14418                           ; BSR set to: 0
 14419  011272  0100               	movlb	0	; () banked
 14420  011274  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 14421  011276  D002               	goto	l2933
 14422                           
 14423                           ; BSR set to: 0
 14424  011278  0100               	movlb	0	; () banked
 14425  01127A  816E               	bsf	___fldiv@b& (0+255),0,b
 14426  01127C                     l2933:
 14427                           
 14428                           ; BSR set to: 0
 14429  01127C  0100               	movlb	0	; () banked
 14430  01127E  90D8               	bcf	status,0,c
 14431  011280  3781               	rlcf	___fldiv@grs& (0+255),f,b
 14432  011282  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 14433  011284  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 14434  011286  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 14435  011288                     l2932:
 14436                           
 14437                           ; BSR set to: 0
 14438                           
 14439                           ; BSR set to: 0
 14440  011288  0100               	movlb	0	; () banked
 14441  01128A  5172               	movf	___fldiv@a& (0+255),w,b
 14442  01128C  0100               	movlb	0	; () banked
 14443  01128E  5D7B               	subwf	___fldiv@rem& (0+255),w,b
 14444  011290  0100               	movlb	0	; () banked
 14445  011292  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 14446  011294  0100               	movlb	0	; () banked
 14447  011296  597C               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 14448  011298  0100               	movlb	0	; () banked
 14449  01129A  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 14450  01129C  0100               	movlb	0	; () banked
 14451  01129E  597D               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 14452  0112A0  0100               	movlb	0	; () banked
 14453  0112A2  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14454  0112A4  0100               	movlb	0	; () banked
 14455  0112A6  597E               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 14456  0112A8  A0D8               	btfss	status,0,c
 14457  0112AA  D012               	goto	l2934
 14458                           
 14459                           ; BSR set to: 0
 14460  0112AC  0100               	movlb	0	; () banked
 14461  0112AE  8D84               	bsf	(___fldiv@grs+3)& (0+255),6,b
 14462                           
 14463                           ; BSR set to: 0
 14464  0112B0  0100               	movlb	0	; () banked
 14465  0112B2  5172               	movf	___fldiv@a& (0+255),w,b
 14466  0112B4  0100               	movlb	0	; () banked
 14467  0112B6  5F7B               	subwf	___fldiv@rem& (0+255),f,b
 14468  0112B8  0100               	movlb	0	; () banked
 14469  0112BA  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 14470  0112BC  0100               	movlb	0	; () banked
 14471  0112BE  5B7C               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 14472  0112C0  0100               	movlb	0	; () banked
 14473  0112C2  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 14474  0112C4  0100               	movlb	0	; () banked
 14475  0112C6  5B7D               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 14476  0112C8  0100               	movlb	0	; () banked
 14477  0112CA  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14478  0112CC  0100               	movlb	0	; () banked
 14479  0112CE  5B7E               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 14480  0112D0                     l2934:
 14481                           
 14482                           ; BSR set to: 0
 14483                           
 14484                           ; BSR set to: 0
 14485  0112D0  0100               	movlb	0	; () banked
 14486  0112D2  2B86               	incf	___fldiv@aexp& (0+255),f,b
 14487  0112D4                     l2930:
 14488                           
 14489                           ; BSR set to: 0
 14490  0112D4  0E19               	movlw	25
 14491  0112D6  0100               	movlb	0	; () banked
 14492  0112D8  6586               	cpfsgt	___fldiv@aexp& (0+255),b
 14493  0112DA  D7BA               	goto	l2931
 14494                           
 14495                           ; BSR set to: 0
 14496                           
 14497                           ; BSR set to: 0
 14498  0112DC  0100               	movlb	0	; () banked
 14499  0112DE  517B               	movf	___fldiv@rem& (0+255),w,b
 14500  0112E0  0100               	movlb	0	; () banked
 14501  0112E2  117C               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 14502  0112E4  0100               	movlb	0	; () banked
 14503  0112E6  117D               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 14504  0112E8  0100               	movlb	0	; () banked
 14505  0112EA  117E               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 14506  0112EC  B4D8               	btfsc	status,2,c
 14507  0112EE  D018               	goto	l2937
 14508                           
 14509                           ; BSR set to: 0
 14510  0112F0  0100               	movlb	0	; () banked
 14511  0112F2  8181               	bsf	___fldiv@grs& (0+255),0,b
 14512                           
 14513                           ; BSR set to: 0
 14514  0112F4  D015               	goto	l2937
 14515  0112F6                     
 14516                           ; BSR set to: 0
 14517                           
 14518                           ; BSR set to: 0
 14519  0112F6  0100               	movlb	0	; () banked
 14520  0112F8  90D8               	bcf	status,0,c
 14521  0112FA  376E               	rlcf	___fldiv@b& (0+255),f,b
 14522  0112FC  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 14523  0112FE  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 14524  011300  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 14525                           
 14526                           ; BSR set to: 0
 14527  011302  0100               	movlb	0	; () banked
 14528  011304  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 14529  011306  D002               	goto	l2939
 14530                           
 14531                           ; BSR set to: 0
 14532  011308  0100               	movlb	0	; () banked
 14533  01130A  816E               	bsf	___fldiv@b& (0+255),0,b
 14534  01130C                     l2939:
 14535                           
 14536                           ; BSR set to: 0
 14537  01130C  0100               	movlb	0	; () banked
 14538  01130E  90D8               	bcf	status,0,c
 14539  011310  3781               	rlcf	___fldiv@grs& (0+255),f,b
 14540  011312  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 14541  011314  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 14542  011316  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 14543  011318  0100               	movlb	0	; () banked
 14544  01131A  077F               	decf	___fldiv@new_exp& (0+255),f,b
 14545  01131C  A0D8               	btfss	status,0,c
 14546  01131E  0780               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 14547  011320                     l2937:
 14548                           
 14549                           ; BSR set to: 0
 14550                           
 14551                           ; BSR set to: 0
 14552  011320  0100               	movlb	0	; () banked
 14553  011322  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 14554  011324  D7E8               	goto	l2938
 14555                           
 14556                           ; BSR set to: 0
 14557                           
 14558                           ; BSR set to: 0
 14559  011326  0E00               	movlw	0
 14560  011328  0100               	movlb	0	; () banked
 14561  01132A  6F86               	movwf	___fldiv@aexp& (0+255),b
 14562                           
 14563                           ; BSR set to: 0
 14564  01132C  0100               	movlb	0	; () banked
 14565  01132E  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 14566  011330  D024               	goto	l2944
 14567                           
 14568                           ; BSR set to: 0
 14569  011332  0EFF               	movlw	255
 14570  011334  0100               	movlb	0	; () banked
 14571  011336  1581               	andwf	___fldiv@grs& (0+255),w,b
 14572  011338  0100               	movlb	0	; () banked
 14573  01133A  6F76               	movwf	??___fldiv& (0+255),b
 14574  01133C  0EFF               	movlw	255
 14575  01133E  0100               	movlb	0	; () banked
 14576  011340  1582               	andwf	(___fldiv@grs+1)& (0+255),w,b
 14577  011342  0100               	movlb	0	; () banked
 14578  011344  6F77               	movwf	(??___fldiv+1)& (0+255),b
 14579  011346  0EFF               	movlw	255
 14580  011348  0100               	movlb	0	; () banked
 14581  01134A  1583               	andwf	(___fldiv@grs+2)& (0+255),w,b
 14582  01134C  0100               	movlb	0	; () banked
 14583  01134E  6F78               	movwf	(??___fldiv+2)& (0+255),b
 14584  011350  0E7F               	movlw	127
 14585  011352  0100               	movlb	0	; () banked
 14586  011354  1584               	andwf	(___fldiv@grs+3)& (0+255),w,b
 14587  011356  0100               	movlb	0	; () banked
 14588  011358  6F79               	movwf	(??___fldiv+3)& (0+255),b
 14589  01135A  0100               	movlb	0	; () banked
 14590  01135C  5176               	movf	??___fldiv& (0+255),w,b
 14591  01135E  0100               	movlb	0	; () banked
 14592  011360  1177               	iorwf	(??___fldiv+1)& (0+255),w,b
 14593  011362  0100               	movlb	0	; () banked
 14594  011364  1178               	iorwf	(??___fldiv+2)& (0+255),w,b
 14595  011366  0100               	movlb	0	; () banked
 14596  011368  1179               	iorwf	(??___fldiv+3)& (0+255),w,b
 14597  01136A  A4D8               	btfss	status,2,c
 14598  01136C  D003               	goto	u10380
 14599                           
 14600                           ; BSR set to: 0
 14601                           
 14602                           ; BSR set to: 0
 14603  01136E  0100               	movlb	0	; () banked
 14604  011370  A16E               	btfss	___fldiv@b& (0+255),0,b
 14605  011372  D003               	goto	l2944
 14606  011374                     u10380:
 14607                           
 14608                           ; BSR set to: 0
 14609  011374  0E01               	movlw	1
 14610  011376  0100               	movlb	0	; () banked
 14611  011378  6F86               	movwf	___fldiv@aexp& (0+255),b
 14612  01137A                     l2944:
 14613                           
 14614                           ; BSR set to: 0
 14615                           
 14616                           ; BSR set to: 0
 14617                           
 14618                           ; BSR set to: 0
 14619  01137A  0100               	movlb	0	; () banked
 14620  01137C  5186               	movf	___fldiv@aexp& (0+255),w,b
 14621  01137E  0100               	movlb	0	; () banked
 14622  011380  B4D8               	btfsc	status,2,c
 14623  011382  D023               	goto	l2946
 14624                           
 14625                           ; BSR set to: 0
 14626  011384  0E01               	movlw	1
 14627  011386  0100               	movlb	0	; () banked
 14628  011388  276E               	addwf	___fldiv@b& (0+255),f,b
 14629  01138A  0E00               	movlw	0
 14630  01138C  236F               	addwfc	(___fldiv@b+1)& (0+255),f,b
 14631  01138E  2370               	addwfc	(___fldiv@b+2)& (0+255),f,b
 14632  011390  2371               	addwfc	(___fldiv@b+3)& (0+255),f,b
 14633                           
 14634                           ; BSR set to: 0
 14635  011392  0100               	movlb	0	; () banked
 14636  011394  A171               	btfss	(___fldiv@b+3)& (0+255),0,b
 14637  011396  D019               	goto	l2946
 14638                           
 14639                           ; BSR set to: 0
 14640  011398  C06E  F076         	movff	___fldiv@b,??___fldiv
 14641  01139C  C06F  F077         	movff	___fldiv@b+1,??___fldiv+1
 14642  0113A0  C070  F078         	movff	___fldiv@b+2,??___fldiv+2
 14643  0113A4  C071  F079         	movff	___fldiv@b+3,??___fldiv+3
 14644  0113A8  0100               	movlb	0	; () banked
 14645  0113AA  3579               	rlcf	(??___fldiv+3)& (0+255),w,b
 14646  0113AC  3379               	rrcf	(??___fldiv+3)& (0+255),f,b
 14647  0113AE  3378               	rrcf	(??___fldiv+2)& (0+255),f,b
 14648  0113B0  3377               	rrcf	(??___fldiv+1)& (0+255),f,b
 14649  0113B2  3376               	rrcf	??___fldiv& (0+255),f,b
 14650  0113B4  C076  F06E         	movff	??___fldiv,___fldiv@b
 14651  0113B8  C077  F06F         	movff	??___fldiv+1,___fldiv@b+1
 14652  0113BC  C078  F070         	movff	??___fldiv+2,___fldiv@b+2
 14653  0113C0  C079  F071         	movff	??___fldiv+3,___fldiv@b+3
 14654                           
 14655                           ; BSR set to: 0
 14656  0113C4  0100               	movlb	0	; () banked
 14657  0113C6  4B7F               	infsnz	___fldiv@new_exp& (0+255),f,b
 14658  0113C8  2B80               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 14659  0113CA                     l2946:
 14660                           
 14661                           ; BSR set to: 0
 14662                           
 14663                           ; BSR set to: 0
 14664                           
 14665                           ; BSR set to: 0
 14666  0113CA  0100               	movlb	0	; () banked
 14667  0113CC  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 14668  0113CE  D014               	goto	l2947
 14669  0113D0  0100               	movlb	0	; () banked
 14670  0113D2  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 14671  0113D4  E104               	bnz	u10410
 14672  0113D6  0100               	movlb	0	; () banked
 14673  0113D8  297F               	incf	___fldiv@new_exp& (0+255),w,b
 14674  0113DA  A0D8               	btfss	status,0,c
 14675  0113DC  D00D               	goto	l2947
 14676  0113DE                     u10410:
 14677                           
 14678                           ; BSR set to: 0
 14679  0113DE  0E00               	movlw	0
 14680  0113E0  0100               	movlb	0	; () banked
 14681  0113E2  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14682  0113E4  697F               	setf	___fldiv@new_exp& (0+255),b
 14683  0113E6  0E00               	movlw	0
 14684  0113E8  0100               	movlb	0	; () banked
 14685  0113EA  6F6E               	movwf	___fldiv@b& (0+255),b
 14686  0113EC  0E00               	movlw	0
 14687  0113EE  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14688  0113F0  0E00               	movlw	0
 14689  0113F2  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14690  0113F4  0E00               	movlw	0
 14691  0113F6  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14692  0113F8                     l2947:
 14693                           
 14694                           ; BSR set to: 0
 14695                           
 14696                           ; BSR set to: 0
 14697  0113F8  0100               	movlb	0	; () banked
 14698  0113FA  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 14699  0113FC  D007               	goto	u10420
 14700  0113FE  0100               	movlb	0	; () banked
 14701  011400  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 14702  011402  E115               	bnz	l13788
 14703  011404  0100               	movlb	0	; () banked
 14704  011406  057F               	decf	___fldiv@new_exp& (0+255),w,b
 14705  011408  B0D8               	btfsc	status,0,c
 14706  01140A  D011               	goto	l2948
 14707  01140C                     u10420:
 14708                           
 14709                           ; BSR set to: 0
 14710  01140C  0E00               	movlw	0
 14711  01140E  0100               	movlb	0	; () banked
 14712  011410  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14713  011412  0E00               	movlw	0
 14714  011414  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 14715  011416  0E00               	movlw	0
 14716  011418  0100               	movlb	0	; () banked
 14717  01141A  6F6E               	movwf	___fldiv@b& (0+255),b
 14718  01141C  0E00               	movlw	0
 14719  01141E  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14720  011420  0E00               	movlw	0
 14721  011422  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14722  011424  0E00               	movlw	0
 14723  011426  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14724  011428  0E00               	movlw	0
 14725  01142A  0100               	movlb	0	; () banked
 14726  01142C  6F7A               	movwf	___fldiv@sign& (0+255),b
 14727  01142E                     l2948:
 14728  01142E                     l13788:
 14729                           
 14730                           ; BSR set to: 0
 14731  01142E  C07F  F085         	movff	___fldiv@new_exp,___fldiv@bexp
 14732                           
 14733                           ; BSR set to: 0
 14734  011432  0100               	movlb	0	; () banked
 14735  011434  A185               	btfss	___fldiv@bexp& (0+255),0,b
 14736  011436  D003               	goto	l2949
 14737                           
 14738                           ; BSR set to: 0
 14739  011438  0100               	movlb	0	; () banked
 14740  01143A  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 14741  01143C  D002               	goto	l2950
 14742  01143E                     l2949:
 14743                           
 14744                           ; BSR set to: 0
 14745                           
 14746                           ; BSR set to: 0
 14747  01143E  0100               	movlb	0	; () banked
 14748  011440  9F70               	bcf	(___fldiv@b+2)& (0+255),7,b
 14749  011442                     l2950:
 14750                           
 14751                           ; BSR set to: 0
 14752                           
 14753                           ; BSR set to: 0
 14754  011442  0100               	movlb	0	; () banked
 14755  011444  90D8               	bcf	status,0,c
 14756  011446  3185               	rrcf	___fldiv@bexp& (0+255),w,b
 14757  011448  0100               	movlb	0	; () banked
 14758  01144A  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14759                           
 14760                           ; BSR set to: 0
 14761  01144C  0100               	movlb	0	; () banked
 14762  01144E  517A               	movf	___fldiv@sign& (0+255),w,b
 14763  011450  0100               	movlb	0	; () banked
 14764  011452  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 14765                           
 14766                           ; BSR set to: 0
 14767  011454  C06E  F06E         	movff	___fldiv@b,?___fldiv
 14768  011458  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 14769  01145C  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 14770  011460  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 14771  011464  0012               	return	
 14772  011466                     __end_of___fldiv:
 14773                           	opt stack 0
 14774                           tosu	equ	0xFFF
 14775                           tosh	equ	0xFFE
 14776                           tosl	equ	0xFFD
 14777                           pclath	equ	0xFFA
 14778                           tblptru	equ	0xFF8
 14779                           tblptrh	equ	0xFF7
 14780                           tblptrl	equ	0xFF6
 14781                           tablat	equ	0xFF5
 14782                           prodh	equ	0xFF4
 14783                           prodl	equ	0xFF3
 14784                           intcon	equ	0xFF2
 14785                           postinc0	equ	0xFEE
 14786                           wreg	equ	0xFE8
 14787                           indf1	equ	0xFE7
 14788                           postdec1	equ	0xFE5
 14789                           fsr1h	equ	0xFE2
 14790                           fsr1l	equ	0xFE1
 14791                           indf2	equ	0xFDF
 14792                           postinc2	equ	0xFDE
 14793                           postdec2	equ	0xFDD
 14794                           plusw2	equ	0xFDB
 14795                           fsr2h	equ	0xFDA
 14796                           fsr2l	equ	0xFD9
 14797                           status	equ	0xFD8
 14798                           
 14799 ;; *************** function _init *****************
 14800 ;; Defined at:
 14801 ;;		line 61 in file "main.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;		None
 14804 ;; Auto vars:     Size  Location     Type
 14805 ;;		None
 14806 ;; Return value:  Size  Location     Type
 14807 ;;                  1    wreg      void 
 14808 ;; Registers used:
 14809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 14810 ;; Tracked objects:
 14811 ;;		On entry : 0/0
 14812 ;;		On exit  : 0/0
 14813 ;;		Unchanged: 0/0
 14814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14819 ;;Total ram usage:        0 bytes
 14820 ;; Hardware stack levels used:    1
 14821 ;; Hardware stack levels required when called:   17
 14822 ;; This function calls:
 14823 ;;		_ADC_Init
 14824 ;;		_ADC_Start
 14825 ;;		_Console_Init
 14826 ;;		_HMI_Init
 14827 ;;		_ISR_Enable
 14828 ;;		_LCD_Init
 14829 ;;		_MXK_BlockSwitchTo
 14830 ;;		_MXK_Dequeue
 14831 ;;		_MXK_Init
 14832 ;;		_MXK_Release
 14833 ;;		_Motor_Init
 14834 ;;		_delay_ms
 14835 ;;		_eusart_init
 14836 ;;		_irobot_init
 14837 ;;		_irobot_init_song_0
 14838 ;;		_irobot_led_power_on
 14839 ;; This function is called by:
 14840 ;;		_main
 14841 ;; This function uses a non-reentrant model
 14842 ;;
 14843                           
 14844                           	psect	text63
 14845  0145B0                     __ptext63:
 14846                           	opt stack 0
 14847  0145B0                     _init:
 14848                           	opt stack 13
 14849                           
 14850                           ;main.c: 63: MXK_Init();
 14851                           
 14852                           ; BSR set to: 0
 14853                           ;incstack = 0
 14854  0145B0  EC9A  F096         	call	_MXK_Init	;wreg free
 14855                           
 14856                           ;main.c: 66: ISR_Enable();
 14857  0145B4  EC8D  F0B2         	call	_ISR_Enable	;wreg free
 14858                           
 14859                           ;main.c: 69: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 14860  0145B8  0E01               	movlw	1
 14861  0145BA  ECE5  F0AE         	call	_MXK_BlockSwitchTo
 14862  0145BE  0900               	iorlw	0
 14863  0145C0  B4D8               	btfsc	status,2,c
 14864  0145C2  D00C               	goto	l2296
 14865                           
 14866                           ;main.c: 70: Console_Init();
 14867  0145C4  EC36  F0A6         	call	_Console_Init	;wreg free
 14868                           
 14869                           ;main.c: 71: HMI_Init();
 14870  0145C8  EC9A  F090         	call	_HMI_Init	;wreg free
 14871                           
 14872                           ;main.c: 72: LCD_Init();
 14873  0145CC  EC5A  F097         	call	_LCD_Init	;wreg free
 14874                           
 14875                           ;main.c: 73: if (MXK_Release())
 14876  0145D0  EC89  F0B1         	call	_MXK_Release	;wreg free
 14877  0145D4  0900               	iorlw	0
 14878  0145D6  A4D8               	btfss	status,2,c
 14879                           
 14880                           ;main.c: 74: MXK_Dequeue();
 14881  0145D8  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
 14882  0145DC                     l2296:
 14883                           
 14884                           ;main.c: 75: }
 14885                           ;main.c: 78: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 14886  0145DC  0E08               	movlw	8
 14887  0145DE  ECE5  F0AE         	call	_MXK_BlockSwitchTo
 14888  0145E2  0900               	iorlw	0
 14889  0145E4  B4D8               	btfsc	status,2,c
 14890  0145E6  D013               	goto	l2298
 14891                           
 14892                           ;main.c: 79: Motor_Init(&Stepper, 0b1000);
 14893  0145E8  0EC8               	movlw	low _Stepper
 14894  0145EA  0100               	movlb	0	; () banked
 14895  0145EC  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
 14896  0145EE  0E03               	movlw	high _Stepper
 14897  0145F0  0100               	movlb	0	; () banked
 14898  0145F2  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 14899  0145F4  0E00               	movlw	0
 14900  0145F6  0100               	movlb	0	; () banked
 14901  0145F8  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 14902  0145FA  0E08               	movlw	8
 14903  0145FC  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
 14904  0145FE  ECAC  F09D         	call	_Motor_Init	;wreg free
 14905                           
 14906                           ;main.c: 80: if (MXK_Release())
 14907  014602  EC89  F0B1         	call	_MXK_Release	;wreg free
 14908  014606  0900               	iorlw	0
 14909  014608  A4D8               	btfss	status,2,c
 14910                           
 14911                           ;main.c: 81: MXK_Dequeue();
 14912  01460A  ECC6  F0AE         	call	_MXK_Dequeue	;wreg free
 14913  01460E                     l2298:
 14914                           
 14915                           ;main.c: 82: }
 14916                           ;main.c: 85: ADC_Init(&ADC_AN0, eADC_Ch0);
 14917  01460E  0EF4               	movlw	low _ADC_AN0
 14918  014610  0100               	movlb	0	; () banked
 14919  014612  6F64               	movwf	ADC_Init@pInput& (0+255),b
 14920  014614  0E00               	movlw	high _ADC_AN0
 14921  014616  0100               	movlb	0	; () banked
 14922  014618  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 14923  01461A  0E00               	movlw	0
 14924  01461C  0100               	movlb	0	; () banked
 14925  01461E  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 14926  014620  EC81  F0A7         	call	_ADC_Init	;wreg free
 14927                           
 14928                           ;main.c: 86: float ADC_Voltage(ADCPtr plnput);
 14929                           ;main.c: 87: ADC_Start(&ADC_AN0);
 14930  014624  0EF4               	movlw	low _ADC_AN0
 14931  014626  0100               	movlb	0	; () banked
 14932  014628  6F62               	movwf	ADC_Start@pInput& (0+255),b
 14933  01462A  0E00               	movlw	high _ADC_AN0
 14934  01462C  0100               	movlb	0	; () banked
 14935  01462E  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
 14936  014630  ECC0  F0A6         	call	_ADC_Start	;wreg free
 14937                           
 14938                           ;main.c: 89: eusart_init();
 14939  014634  EC12  F0B1         	call	_eusart_init	;wreg free
 14940                           
 14941                           ;main.c: 90: irobot_init();
 14942  014638  EC48  F0B2         	call	_irobot_init	;wreg free
 14943                           
 14944                           ;main.c: 92: irobot_led_power_on(0xA);
 14945  01463C  0E0A               	movlw	10
 14946  01463E  EC7B  F0B1         	call	_irobot_led_power_on
 14947                           
 14948                           ;main.c: 93: irobot_init_song_0();
 14949  014642  ECF3  F0B0         	call	_irobot_init_song_0	;wreg free
 14950                           
 14951                           ;main.c: 94: delay_ms(20);
 14952  014646  0E00               	movlw	0
 14953  014648  0100               	movlb	0	; () banked
 14954  01464A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14955  01464C  0E14               	movlw	20
 14956  01464E  6F60               	movwf	delay_ms@ms& (0+255),b
 14957  014650  ECF6  F0A9         	call	_delay_ms	;wreg free
 14958  014654  0012               	return		;funcret
 14959  014656                     __end_of_init:
 14960                           	opt stack 0
 14961                           tosu	equ	0xFFF
 14962                           tosh	equ	0xFFE
 14963                           tosl	equ	0xFFD
 14964                           pclath	equ	0xFFA
 14965                           tblptru	equ	0xFF8
 14966                           tblptrh	equ	0xFF7
 14967                           tblptrl	equ	0xFF6
 14968                           tablat	equ	0xFF5
 14969                           prodh	equ	0xFF4
 14970                           prodl	equ	0xFF3
 14971                           intcon	equ	0xFF2
 14972                           postinc0	equ	0xFEE
 14973                           wreg	equ	0xFE8
 14974                           indf1	equ	0xFE7
 14975                           postdec1	equ	0xFE5
 14976                           fsr1h	equ	0xFE2
 14977                           fsr1l	equ	0xFE1
 14978                           indf2	equ	0xFDF
 14979                           postinc2	equ	0xFDE
 14980                           postdec2	equ	0xFDD
 14981                           plusw2	equ	0xFDB
 14982                           fsr2h	equ	0xFDA
 14983                           fsr2l	equ	0xFD9
 14984                           status	equ	0xFD8
 14985                           
 14986 ;; *************** function _irobot_led_power_on *****************
 14987 ;; Defined at:
 14988 ;;		line 293 in file "Library/iRobotSerial.c"
 14989 ;; Parameters:    Size  Location     Type
 14990 ;;  powerOnColou    1    wreg     unsigned char 
 14991 ;; Auto vars:     Size  Location     Type
 14992 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 14993 ;; Return value:  Size  Location     Type
 14994 ;;                  1    wreg      void 
 14995 ;; Registers used:
 14996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14997 ;; Tracked objects:
 14998 ;;		On entry : 0/0
 14999 ;;		On exit  : 0/0
 15000 ;;		Unchanged: 0/0
 15001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15005 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15006 ;;Total ram usage:        1 bytes
 15007 ;; Hardware stack levels used:    1
 15008 ;; Hardware stack levels required when called:    9
 15009 ;; This function calls:
 15010 ;;		_irobot_leds
 15011 ;; This function is called by:
 15012 ;;		_init
 15013 ;; This function uses a non-reentrant model
 15014 ;;
 15015                           
 15016                           	psect	text64
 15017  0162F6                     __ptext64:
 15018                           	opt stack 0
 15019  0162F6                     _irobot_led_power_on:
 15020                           	opt stack 20
 15021                           
 15022                           ;incstack = 0
 15023                           ;irobot_led_power_on@powerOnColour stored from wreg
 15024  0162F6  0100               	movlb	0	; () banked
 15025  0162F8  6F74               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 15026                           
 15027                           ;iRobotSerial.c: 294: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 15028  0162FA  0E00               	movlw	0
 15029  0162FC  0100               	movlb	0	; () banked
 15030  0162FE  6F70               	movwf	irobot_leds@LEDBit& (0+255),b
 15031  016300  C074  F071         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 15032  016304  0EFF               	movlw	255
 15033  016306  0100               	movlb	0	; () banked
 15034  016308  6F72               	movwf	irobot_leds@powerLuminosity& (0+255),b
 15035  01630A  0E00               	movlw	0
 15036  01630C  ECE7  F0AB         	call	_irobot_leds
 15037  016310  0012               	return		;funcret
 15038  016312                     __end_of_irobot_led_power_on:
 15039                           	opt stack 0
 15040                           tosu	equ	0xFFF
 15041                           tosh	equ	0xFFE
 15042                           tosl	equ	0xFFD
 15043                           pclath	equ	0xFFA
 15044                           tblptru	equ	0xFF8
 15045                           tblptrh	equ	0xFF7
 15046                           tblptrl	equ	0xFF6
 15047                           tablat	equ	0xFF5
 15048                           prodh	equ	0xFF4
 15049                           prodl	equ	0xFF3
 15050                           intcon	equ	0xFF2
 15051                           postinc0	equ	0xFEE
 15052                           wreg	equ	0xFE8
 15053                           indf1	equ	0xFE7
 15054                           postdec1	equ	0xFE5
 15055                           fsr1h	equ	0xFE2
 15056                           fsr1l	equ	0xFE1
 15057                           indf2	equ	0xFDF
 15058                           postinc2	equ	0xFDE
 15059                           postdec2	equ	0xFDD
 15060                           plusw2	equ	0xFDB
 15061                           fsr2h	equ	0xFDA
 15062                           fsr2l	equ	0xFD9
 15063                           status	equ	0xFD8
 15064                           
 15065 ;; *************** function _irobot_leds *****************
 15066 ;; Defined at:
 15067 ;;		line 239 in file "Library/iRobotSerial.c"
 15068 ;; Parameters:    Size  Location     Type
 15069 ;;  isScript        1    wreg     unsigned char 
 15070 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 15071 ;;  powerColour     1   17[BANK0 ] unsigned char 
 15072 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  isScript        1   19[BANK0 ] unsigned char 
 15075 ;; Return value:  Size  Location     Type
 15076 ;;                  1    wreg      void 
 15077 ;; Registers used:
 15078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15079 ;; Tracked objects:
 15080 ;;		On entry : 0/0
 15081 ;;		On exit  : 0/0
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15084 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15087 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15088 ;;Total ram usage:        4 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; Hardware stack levels required when called:    8
 15091 ;; This function calls:
 15092 ;;		_eusart_putch
 15093 ;;		_load_iRScriptStack
 15094 ;; This function is called by:
 15095 ;;		_irobot_led_power_on
 15096 ;;		_irobot_led_power_off
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           	psect	text65
 15101  0157CE                     __ptext65:
 15102                           	opt stack 0
 15103  0157CE                     _irobot_leds:
 15104                           	opt stack 20
 15105                           
 15106                           ;incstack = 0
 15107                           ;irobot_leds@isScript stored from wreg
 15108  0157CE  0100               	movlb	0	; () banked
 15109  0157D0  6F73               	movwf	irobot_leds@isScript& (0+255),b
 15110                           
 15111                           ;iRobotSerial.c: 240: if (isScript) {
 15112  0157D2  0100               	movlb	0	; () banked
 15113  0157D4  5173               	movf	irobot_leds@isScript& (0+255),w,b
 15114  0157D6  0100               	movlb	0	; () banked
 15115  0157D8  B4D8               	btfsc	status,2,c
 15116  0157DA  D015               	goto	l2140
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 15120                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 15121  0157DC  0E00               	movlw	0
 15122  0157DE  0100               	movlb	0	; () banked
 15123  0157E0  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 15124  0157E2  0E8B               	movlw	139
 15125  0157E4  6F60               	movwf	?_load_iRScriptStack& (0+255),b
 15126  0157E6  C070  F062         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 15127  0157EA  0100               	movlb	0	; () banked
 15128  0157EC  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 15129  0157EE  C071  F064         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 15130  0157F2  0100               	movlb	0	; () banked
 15131  0157F4  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 15132  0157F6  C072  F066         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 15133  0157FA  0100               	movlb	0	; () banked
 15134  0157FC  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 15135  0157FE  0E04               	movlw	4
 15136  015800  ECC1  F0A9         	call	_load_iRScriptStack
 15137                           
 15138                           ;iRobotSerial.c: 243: }
 15139  015804  0012               	return	
 15140  015806                     l2140:
 15141                           
 15142                           ;iRobotSerial.c: 244: else{
 15143                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 15144  015806  0E8B               	movlw	139
 15145  015808  EC4F  F0B2         	call	_eusart_putch
 15146                           
 15147                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 15148  01580C  0100               	movlb	0	; () banked
 15149  01580E  5170               	movf	irobot_leds@LEDBit& (0+255),w,b
 15150  015810  EC4F  F0B2         	call	_eusart_putch
 15151                           
 15152                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 15153  015814  0100               	movlb	0	; () banked
 15154  015816  5171               	movf	irobot_leds@powerColour& (0+255),w,b
 15155  015818  EC4F  F0B2         	call	_eusart_putch
 15156                           
 15157                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 15158  01581C  0100               	movlb	0	; () banked
 15159  01581E  5172               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 15160  015820  EC4F  F0B2         	call	_eusart_putch
 15161  015824  0012               	return	
 15162  015826                     __end_of_irobot_leds:
 15163                           	opt stack 0
 15164                           tosu	equ	0xFFF
 15165                           tosh	equ	0xFFE
 15166                           tosl	equ	0xFFD
 15167                           pclath	equ	0xFFA
 15168                           tblptru	equ	0xFF8
 15169                           tblptrh	equ	0xFF7
 15170                           tblptrl	equ	0xFF6
 15171                           tablat	equ	0xFF5
 15172                           prodh	equ	0xFF4
 15173                           prodl	equ	0xFF3
 15174                           intcon	equ	0xFF2
 15175                           postinc0	equ	0xFEE
 15176                           wreg	equ	0xFE8
 15177                           indf1	equ	0xFE7
 15178                           postdec1	equ	0xFE5
 15179                           fsr1h	equ	0xFE2
 15180                           fsr1l	equ	0xFE1
 15181                           indf2	equ	0xFDF
 15182                           postinc2	equ	0xFDE
 15183                           postdec2	equ	0xFDD
 15184                           plusw2	equ	0xFDB
 15185                           fsr2h	equ	0xFDA
 15186                           fsr2l	equ	0xFD9
 15187                           status	equ	0xFD8
 15188                           
 15189 ;; *************** function _load_iRScriptStack *****************
 15190 ;; Defined at:
 15191 ;;		line 176 in file "Library/iRobotSerial.c"
 15192 ;; Parameters:    Size  Location     Type
 15193 ;;  bytesToLoad     1    wreg     unsigned char 
 15194 ;; Auto vars:     Size  Location     Type
 15195 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 15196 ;;  i               1   15[BANK0 ] unsigned char 
 15197 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 15198 ;;		 -> ?_load_iRScriptStack(1), 
 15199 ;; Return value:  Size  Location     Type
 15200 ;;                  1    wreg      void 
 15201 ;; Registers used:
 15202 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15208 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15209 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15210 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15211 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15212 ;;Total ram usage:       16 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    7
 15215 ;; This function calls:
 15216 ;;		Nothing
 15217 ;; This function is called by:
 15218 ;;		_irobot_angle_wait
 15219 ;;		_irobot_move
 15220 ;;		_irobot_leds
 15221 ;;		_irobot_distance_wait
 15222 ;; This function uses a non-reentrant model
 15223 ;;
 15224                           
 15225                           	psect	text66
 15226  015382                     __ptext66:
 15227                           	opt stack 0
 15228  015382                     _load_iRScriptStack:
 15229                           	opt stack 20
 15230                           
 15231                           ;incstack = 0
 15232                           ;load_iRScriptStack@bytesToLoad stored from wreg
 15233  015382  0100               	movlb	0	; () banked
 15234  015384  6F6E               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 15235                           
 15236                           ;iRobotSerial.c: 177: va_list loadByte;
 15237                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 15238  015386  0E60               	movlw	low ?_load_iRScriptStack
 15239  015388  0100               	movlb	0	; () banked
 15240  01538A  6F6C               	movwf	load_iRScriptStack@loadByte& (0+255),b
 15241  01538C  0E00               	movlw	high ?_load_iRScriptStack
 15242  01538E  0100               	movlb	0	; () banked
 15243  015390  6F6D               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 15244                           
 15245                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++) {
 15246  015392  0E00               	movlw	0
 15247  015394  0100               	movlb	0	; () banked
 15248  015396  6F6F               	movwf	load_iRScriptStack@i& (0+255),b
 15249  015398  D01F               	goto	l2114
 15250  01539A                     
 15251                           ; BSR set to: 0
 15252                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 15253                           
 15254                           ; BSR set to: 0
 15255  01539A  C06C  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 15256  01539E  C06D  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 15257  0153A2  0100               	movlb	0	; () banked
 15258  0153A4  516F               	movf	load_iRScriptStack@i& (0+255),w,b
 15259  0153A6  C037  F06A         	movff	_iRScriptIndex,??_load_iRScriptStack
 15260  0153AA  0100               	movlb	0	; () banked
 15261  0153AC  6B6B               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 15262  0153AE  0100               	movlb	0	; () banked
 15263  0153B0  276A               	addwf	??_load_iRScriptStack& (0+255),f,b
 15264  0153B2  0E00               	movlw	0
 15265  0153B4  236B               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 15266  0153B6  0E1E               	movlw	low _iRScriptStack
 15267  0153B8  0100               	movlb	0	; () banked
 15268  0153BA  256A               	addwf	??_load_iRScriptStack& (0+255),w,b
 15269  0153BC  6EE1               	movwf	fsr1l,c
 15270  0153BE  0E04               	movlw	high _iRScriptStack
 15271  0153C0  0100               	movlb	0	; () banked
 15272  0153C2  216B               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 15273  0153C4  6EE2               	movwf	fsr1h,c
 15274  0153C6  CFDF FFE7          	movff	indf2,indf1
 15275                           
 15276                           ; BSR set to: 0
 15277  0153CA  0E02               	movlw	2
 15278  0153CC  0100               	movlb	0	; () banked
 15279  0153CE  276C               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 15280  0153D0  0E00               	movlw	0
 15281  0153D2  236D               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 15282                           
 15283                           ; BSR set to: 0
 15284  0153D4  0100               	movlb	0	; () banked
 15285  0153D6  2B6F               	incf	load_iRScriptStack@i& (0+255),f,b
 15286  0153D8                     l2114:
 15287                           
 15288                           ; BSR set to: 0
 15289                           
 15290                           ; BSR set to: 0
 15291  0153D8  0100               	movlb	0	; () banked
 15292  0153DA  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 15293  0153DC  0100               	movlb	0	; () banked
 15294  0153DE  5D6F               	subwf	load_iRScriptStack@i& (0+255),w,b
 15295  0153E0  A0D8               	btfss	status,0,c
 15296  0153E2  D7DB               	goto	l2115
 15297                           
 15298                           ; BSR set to: 0
 15299                           ;iRobotSerial.c: 181: }
 15300                           ;iRobotSerial.c: 182: ;
 15301                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 15302                           
 15303                           ; BSR set to: 0
 15304  0153E4  0100               	movlb	0	; () banked
 15305  0153E6  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 15306  0153E8  2637               	addwf	_iRScriptIndex,f,c
 15307                           
 15308                           ; BSR set to: 0
 15309  0153EA  0012               	return		;funcret
 15310  0153EC                     __end_of_load_iRScriptStack:
 15311                           	opt stack 0
 15312                           tosu	equ	0xFFF
 15313                           tosh	equ	0xFFE
 15314                           tosl	equ	0xFFD
 15315                           pclath	equ	0xFFA
 15316                           tblptru	equ	0xFF8
 15317                           tblptrh	equ	0xFF7
 15318                           tblptrl	equ	0xFF6
 15319                           tablat	equ	0xFF5
 15320                           prodh	equ	0xFF4
 15321                           prodl	equ	0xFF3
 15322                           intcon	equ	0xFF2
 15323                           postinc0	equ	0xFEE
 15324                           wreg	equ	0xFE8
 15325                           indf1	equ	0xFE7
 15326                           postdec1	equ	0xFE5
 15327                           fsr1h	equ	0xFE2
 15328                           fsr1l	equ	0xFE1
 15329                           indf2	equ	0xFDF
 15330                           postinc2	equ	0xFDE
 15331                           postdec2	equ	0xFDD
 15332                           plusw2	equ	0xFDB
 15333                           fsr2h	equ	0xFDA
 15334                           fsr2l	equ	0xFD9
 15335                           status	equ	0xFD8
 15336                           
 15337 ;; *************** function _irobot_init_song_0 *****************
 15338 ;; Defined at:
 15339 ;;		line 252 in file "Library/iRobotSerial.c"
 15340 ;; Parameters:    Size  Location     Type
 15341 ;;		None
 15342 ;; Auto vars:     Size  Location     Type
 15343 ;;		None
 15344 ;; Return value:  Size  Location     Type
 15345 ;;                  1    wreg      void 
 15346 ;; Registers used:
 15347 ;;		wreg, cstack
 15348 ;; Tracked objects:
 15349 ;;		On entry : 0/0
 15350 ;;		On exit  : 0/0
 15351 ;;		Unchanged: 0/0
 15352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15357 ;;Total ram usage:        0 bytes
 15358 ;; Hardware stack levels used:    1
 15359 ;; Hardware stack levels required when called:    8
 15360 ;; This function calls:
 15361 ;;		_eusart_putch
 15362 ;; This function is called by:
 15363 ;;		_init
 15364 ;; This function uses a non-reentrant model
 15365 ;;
 15366                           
 15367                           	psect	text67
 15368  0161E6                     __ptext67:
 15369                           	opt stack 0
 15370  0161E6                     _irobot_init_song_0:
 15371                           	opt stack 21
 15372                           
 15373                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 15374                           
 15375                           ; BSR set to: 0
 15376                           ;incstack = 0
 15377  0161E6  0E8C               	movlw	140
 15378  0161E8  EC4F  F0B2         	call	_eusart_putch
 15379                           
 15380                           ;iRobotSerial.c: 254: eusart_putch(0);
 15381  0161EC  0E00               	movlw	0
 15382  0161EE  EC4F  F0B2         	call	_eusart_putch
 15383                           
 15384                           ;iRobotSerial.c: 255: eusart_putch(1);
 15385  0161F2  0E01               	movlw	1
 15386  0161F4  EC4F  F0B2         	call	_eusart_putch
 15387                           
 15388                           ;iRobotSerial.c: 256: eusart_putch(60);
 15389  0161F8  0E3C               	movlw	60
 15390  0161FA  EC4F  F0B2         	call	_eusart_putch
 15391                           
 15392                           ;iRobotSerial.c: 257: eusart_putch(4);
 15393  0161FE  0E04               	movlw	4
 15394  016200  EC4F  F0B2         	call	_eusart_putch
 15395  016204  0012               	return		;funcret
 15396  016206                     __end_of_irobot_init_song_0:
 15397                           	opt stack 0
 15398                           tosu	equ	0xFFF
 15399                           tosh	equ	0xFFE
 15400                           tosl	equ	0xFFD
 15401                           pclath	equ	0xFFA
 15402                           tblptru	equ	0xFF8
 15403                           tblptrh	equ	0xFF7
 15404                           tblptrl	equ	0xFF6
 15405                           tablat	equ	0xFF5
 15406                           prodh	equ	0xFF4
 15407                           prodl	equ	0xFF3
 15408                           intcon	equ	0xFF2
 15409                           postinc0	equ	0xFEE
 15410                           wreg	equ	0xFE8
 15411                           indf1	equ	0xFE7
 15412                           postdec1	equ	0xFE5
 15413                           fsr1h	equ	0xFE2
 15414                           fsr1l	equ	0xFE1
 15415                           indf2	equ	0xFDF
 15416                           postinc2	equ	0xFDE
 15417                           postdec2	equ	0xFDD
 15418                           plusw2	equ	0xFDB
 15419                           fsr2h	equ	0xFDA
 15420                           fsr2l	equ	0xFD9
 15421                           status	equ	0xFD8
 15422                           
 15423 ;; *************** function _irobot_init *****************
 15424 ;; Defined at:
 15425 ;;		line 198 in file "Library/iRobotSerial.c"
 15426 ;; Parameters:    Size  Location     Type
 15427 ;;		None
 15428 ;; Auto vars:     Size  Location     Type
 15429 ;;		None
 15430 ;; Return value:  Size  Location     Type
 15431 ;;                  1    wreg      void 
 15432 ;; Registers used:
 15433 ;;		wreg, cstack
 15434 ;; Tracked objects:
 15435 ;;		On entry : 0/0
 15436 ;;		On exit  : 0/0
 15437 ;;		Unchanged: 0/0
 15438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15443 ;;Total ram usage:        0 bytes
 15444 ;; Hardware stack levels used:    1
 15445 ;; Hardware stack levels required when called:    8
 15446 ;; This function calls:
 15447 ;;		_eusart_putch
 15448 ;; This function is called by:
 15449 ;;		_init
 15450 ;; This function uses a non-reentrant model
 15451 ;;
 15452                           
 15453                           	psect	text68
 15454  016490                     __ptext68:
 15455                           	opt stack 0
 15456  016490                     _irobot_init:
 15457                           	opt stack 21
 15458                           
 15459                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 15460                           
 15461                           ;incstack = 0
 15462  016490  0E80               	movlw	128
 15463  016492  EC4F  F0B2         	call	_eusart_putch
 15464                           
 15465                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 15466  016496  0E84               	movlw	132
 15467  016498  EC4F  F0B2         	call	_eusart_putch
 15468  01649C  0012               	return		;funcret
 15469  01649E                     __end_of_irobot_init:
 15470                           	opt stack 0
 15471                           tosu	equ	0xFFF
 15472                           tosh	equ	0xFFE
 15473                           tosl	equ	0xFFD
 15474                           pclath	equ	0xFFA
 15475                           tblptru	equ	0xFF8
 15476                           tblptrh	equ	0xFF7
 15477                           tblptrl	equ	0xFF6
 15478                           tablat	equ	0xFF5
 15479                           prodh	equ	0xFF4
 15480                           prodl	equ	0xFF3
 15481                           intcon	equ	0xFF2
 15482                           postinc0	equ	0xFEE
 15483                           wreg	equ	0xFE8
 15484                           indf1	equ	0xFE7
 15485                           postdec1	equ	0xFE5
 15486                           fsr1h	equ	0xFE2
 15487                           fsr1l	equ	0xFE1
 15488                           indf2	equ	0xFDF
 15489                           postinc2	equ	0xFDE
 15490                           postdec2	equ	0xFDD
 15491                           plusw2	equ	0xFDB
 15492                           fsr2h	equ	0xFDA
 15493                           fsr2l	equ	0xFD9
 15494                           status	equ	0xFD8
 15495                           
 15496 ;; *************** function _eusart_putch *****************
 15497 ;; Defined at:
 15498 ;;		line 120 in file "Library/iRobotSerial.c"
 15499 ;; Parameters:    Size  Location     Type
 15500 ;;  eusartSendCh    1    wreg     unsigned char 
 15501 ;; Auto vars:     Size  Location     Type
 15502 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 15503 ;; Return value:  Size  Location     Type
 15504 ;;                  1    wreg      void 
 15505 ;; Registers used:
 15506 ;;		wreg
 15507 ;; Tracked objects:
 15508 ;;		On entry : 0/0
 15509 ;;		On exit  : 0/0
 15510 ;;		Unchanged: 0/0
 15511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15515 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15516 ;;Total ram usage:        1 bytes
 15517 ;; Hardware stack levels used:    1
 15518 ;; Hardware stack levels required when called:    7
 15519 ;; This function calls:
 15520 ;;		Nothing
 15521 ;; This function is called by:
 15522 ;;		_irobot_query_and_update
 15523 ;;		_irobot_init
 15524 ;;		_irobot_move
 15525 ;;		_irobot_leds
 15526 ;;		_irobot_init_song_0
 15527 ;;		_irobot_song_play
 15528 ;;		_irobot_script_play
 15529 ;; This function uses a non-reentrant model
 15530 ;;
 15531                           
 15532                           	psect	text69
 15533  01649E                     __ptext69:
 15534                           	opt stack 0
 15535  01649E                     _eusart_putch:
 15536                           	opt stack 20
 15537                           
 15538                           ;incstack = 0
 15539                           ;eusart_putch@eusartSendChar stored from wreg
 15540  01649E  0100               	movlb	0	; () banked
 15541  0164A0  6F60               	movwf	eusart_putch@eusartSendChar& (0+255),b
 15542  0164A2                     
 15543                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 15544  0164A2  A2AD               	btfss	4013,1,c	;volatile
 15545  0164A4  D7FE               	goto	l12632
 15546                           
 15547                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 15548  0164A6  C060  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 15549  0164AA  0012               	return		;funcret
 15550  0164AC                     __end_of_eusart_putch:
 15551                           	opt stack 0
 15552                           tosu	equ	0xFFF
 15553                           tosh	equ	0xFFE
 15554                           tosl	equ	0xFFD
 15555                           pclath	equ	0xFFA
 15556                           tblptru	equ	0xFF8
 15557                           tblptrh	equ	0xFF7
 15558                           tblptrl	equ	0xFF6
 15559                           tablat	equ	0xFF5
 15560                           prodh	equ	0xFF4
 15561                           prodl	equ	0xFF3
 15562                           intcon	equ	0xFF2
 15563                           postinc0	equ	0xFEE
 15564                           wreg	equ	0xFE8
 15565                           indf1	equ	0xFE7
 15566                           postdec1	equ	0xFE5
 15567                           fsr1h	equ	0xFE2
 15568                           fsr1l	equ	0xFE1
 15569                           indf2	equ	0xFDF
 15570                           postinc2	equ	0xFDE
 15571                           postdec2	equ	0xFDD
 15572                           plusw2	equ	0xFDB
 15573                           fsr2h	equ	0xFDA
 15574                           fsr2l	equ	0xFD9
 15575                           status	equ	0xFD8
 15576                           
 15577 ;; *************** function _eusart_init *****************
 15578 ;; Defined at:
 15579 ;;		line 103 in file "Library/iRobotSerial.c"
 15580 ;; Parameters:    Size  Location     Type
 15581 ;;		None
 15582 ;; Auto vars:     Size  Location     Type
 15583 ;;		None
 15584 ;; Return value:  Size  Location     Type
 15585 ;;                  1    wreg      void 
 15586 ;; Registers used:
 15587 ;;		wreg, status,2
 15588 ;; Tracked objects:
 15589 ;;		On entry : 0/0
 15590 ;;		On exit  : 0/0
 15591 ;;		Unchanged: 0/0
 15592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15597 ;;Total ram usage:        0 bytes
 15598 ;; Hardware stack levels used:    1
 15599 ;; Hardware stack levels required when called:    7
 15600 ;; This function calls:
 15601 ;;		Nothing
 15602 ;; This function is called by:
 15603 ;;		_init
 15604 ;; This function uses a non-reentrant model
 15605 ;;
 15606                           
 15607                           	psect	text70
 15608  016224                     __ptext70:
 15609                           	opt stack 0
 15610  016224                     _eusart_init:
 15611                           	opt stack 22
 15612                           
 15613                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 15614                           
 15615                           ;incstack = 0
 15616  016224  9C94               	bcf	3988,6,c	;volatile
 15617                           
 15618                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 15619  016226  8E94               	bsf	3988,7,c	;volatile
 15620                           
 15621                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 15622  016228  0E24               	movlw	36
 15623  01622A  6EAD               	movwf	4013,c	;volatile
 15624                           
 15625                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 15626  01622C  0E98               	movlw	152
 15627  01622E  6EAC               	movwf	4012,c	;volatile
 15628                           
 15629                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 15630  016230  9A7E               	bcf	3966,5,c	;volatile
 15631                           
 15632                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 15633  016232  987E               	bcf	3966,4,c	;volatile
 15634                           
 15635                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 15636  016234  927E               	bcf	3966,1,c	;volatile
 15637                           
 15638                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 15639  016236  907E               	bcf	3966,0,c	;volatile
 15640                           
 15641                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 15642  016238  84AD               	bsf	4013,2,c	;volatile
 15643                           
 15644                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 15645  01623A  967E               	bcf	3966,3,c	;volatile
 15646                           
 15647                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 15648  01623C  0E33               	movlw	51
 15649  01623E  6EB0               	movwf	4016,c	;volatile
 15650  016240  0012               	return		;funcret
 15651  016242                     __end_of_eusart_init:
 15652                           	opt stack 0
 15653                           tosu	equ	0xFFF
 15654                           tosh	equ	0xFFE
 15655                           tosl	equ	0xFFD
 15656                           pclath	equ	0xFFA
 15657                           tblptru	equ	0xFF8
 15658                           tblptrh	equ	0xFF7
 15659                           tblptrl	equ	0xFF6
 15660                           tablat	equ	0xFF5
 15661                           prodh	equ	0xFF4
 15662                           prodl	equ	0xFF3
 15663                           intcon	equ	0xFF2
 15664                           postinc0	equ	0xFEE
 15665                           wreg	equ	0xFE8
 15666                           indf1	equ	0xFE7
 15667                           postdec1	equ	0xFE5
 15668                           fsr1h	equ	0xFE2
 15669                           fsr1l	equ	0xFE1
 15670                           indf2	equ	0xFDF
 15671                           postinc2	equ	0xFDE
 15672                           postdec2	equ	0xFDD
 15673                           plusw2	equ	0xFDB
 15674                           fsr2h	equ	0xFDA
 15675                           fsr2l	equ	0xFD9
 15676                           status	equ	0xFD8
 15677                           
 15678 ;; *************** function _Motor_Init *****************
 15679 ;; Defined at:
 15680 ;;		line 26 in file "Library/Motor.c"
 15681 ;; Parameters:    Size  Location     Type
 15682 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 15683 ;;		 -> Stepper(6), 
 15684 ;;  pAddress        2   47[BANK0 ] unsigned short 
 15685 ;; Auto vars:     Size  Location     Type
 15686 ;;		None
 15687 ;; Return value:  Size  Location     Type
 15688 ;;                  1    wreg      void 
 15689 ;; Registers used:
 15690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15691 ;; Tracked objects:
 15692 ;;		On entry : 0/0
 15693 ;;		On exit  : 0/0
 15694 ;;		Unchanged: 0/0
 15695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15696 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15699 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15700 ;;Total ram usage:        4 bytes
 15701 ;; Hardware stack levels used:    1
 15702 ;; Hardware stack levels required when called:   12
 15703 ;; This function calls:
 15704 ;;		_Port_SetPin
 15705 ;;		_Port_SetPinType
 15706 ;;		_Timer0_Init
 15707 ;; This function is called by:
 15708 ;;		_init
 15709 ;; This function uses a non-reentrant model
 15710 ;;
 15711                           
 15712                           	psect	text71
 15713  013B58                     __ptext71:
 15714                           	opt stack 0
 15715  013B58                     _Motor_Init:
 15716                           	opt stack 17
 15717                           
 15718                           ;Motor.c: 28: pMotor->mDelta = 0;
 15719                           
 15720                           ;incstack = 0
 15721  013B58  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
 15722  013B5C  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 15723  013B60  0E00               	movlw	0
 15724  013B62  6EDE               	movwf	postinc2,c
 15725  013B64  0E00               	movlw	0
 15726  013B66  6EDD               	movwf	postdec2,c
 15727                           
 15728                           ;Motor.c: 29: pMotor->mFrequency = 0;
 15729  013B68  0100               	movlb	0	; () banked
 15730  013B6A  EE20 F002          	lfsr	2,2
 15731  013B6E  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 15732  013B70  26D9               	addwf	fsr2l,f,c
 15733  013B72  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15734  013B74  22DA               	addwfc	fsr2h,f,c
 15735  013B76  0E00               	movlw	0
 15736  013B78  6EDE               	movwf	postinc2,c
 15737  013B7A  0E00               	movlw	0
 15738  013B7C  6EDD               	movwf	postdec2,c
 15739                           
 15740                           ; BSR set to: 0
 15741                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 15742  013B7E  0100               	movlb	0	; () banked
 15743  013B80  EE20 F004          	lfsr	2,4
 15744  013B84  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 15745  013B86  26D9               	addwf	fsr2l,f,c
 15746  013B88  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15747  013B8A  22DA               	addwfc	fsr2h,f,c
 15748  013B8C  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
 15749  013B90  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 15750                           
 15751                           ; BSR set to: 0
 15752                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 15753  013B94  0E99               	movlw	low _PortE
 15754  013B96  0100               	movlb	0	; () banked
 15755  013B98  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15756  013B9A  0E03               	movlw	high _PortE
 15757  013B9C  0100               	movlb	0	; () banked
 15758  013B9E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15759  013BA0  0E00               	movlw	0
 15760  013BA2  0100               	movlb	0	; () banked
 15761  013BA4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15762  013BA6  0E03               	movlw	3
 15763  013BA8  0100               	movlb	0	; () banked
 15764  013BAA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15765  013BAC  EC5F  F093         	call	_Port_SetPinType	;wreg free
 15766                           
 15767                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 15768  013BB0  0E99               	movlw	low _PortE
 15769  013BB2  0100               	movlb	0	; () banked
 15770  013BB4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15771  013BB6  0E03               	movlw	high _PortE
 15772  013BB8  0100               	movlb	0	; () banked
 15773  013BBA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15774  013BBC  0E01               	movlw	1
 15775  013BBE  0100               	movlb	0	; () banked
 15776  013BC0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15777  013BC2  0E03               	movlw	3
 15778  013BC4  0100               	movlb	0	; () banked
 15779  013BC6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15780  013BC8  EC5F  F093         	call	_Port_SetPinType	;wreg free
 15781                           
 15782                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 15783  013BCC  0E99               	movlw	low _PortE
 15784  013BCE  0100               	movlb	0	; () banked
 15785  013BD0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15786  013BD2  0E03               	movlw	high _PortE
 15787  013BD4  0100               	movlb	0	; () banked
 15788  013BD6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15789  013BD8  0E00               	movlw	0
 15790  013BDA  0100               	movlb	0	; () banked
 15791  013BDC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15792  013BDE  0E00               	movlw	0
 15793  013BE0  0100               	movlb	0	; () banked
 15794  013BE2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15795  013BE4  ECE9  F09E         	call	_Port_SetPin	;wreg free
 15796                           
 15797                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 15798  013BE8  0E99               	movlw	low _PortE
 15799  013BEA  0100               	movlb	0	; () banked
 15800  013BEC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15801  013BEE  0E03               	movlw	high _PortE
 15802  013BF0  0100               	movlb	0	; () banked
 15803  013BF2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15804  013BF4  0E01               	movlw	1
 15805  013BF6  0100               	movlb	0	; () banked
 15806  013BF8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15807  013BFA  0E00               	movlw	0
 15808  013BFC  0100               	movlb	0	; () banked
 15809  013BFE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15810  013C00  ECE9  F09E         	call	_Port_SetPin	;wreg free
 15811                           
 15812                           ;Motor.c: 38: lStepFunction = Motor_Step;
 15813  013C04  0E86               	movlw	low _Motor_Step
 15814  013C06  0100               	movlb	0	; () banked
 15815  013C08  6FBD               	movwf	_lStepFunction& (0+255),b
 15816  013C0A  0E35               	movlw	high _Motor_Step
 15817  013C0C  0100               	movlb	0	; () banked
 15818  013C0E  6FBE               	movwf	(_lStepFunction+1)& (0+255),b
 15819  013C10  0E01               	movlw	low (_Motor_Step shr (0+16))
 15820  013C12  0100               	movlb	0	; () banked
 15821  013C14  6FBF               	movwf	(_lStepFunction+2)& (0+255),b
 15822                           
 15823                           ; BSR set to: 0
 15824                           ;Motor.c: 39: Timer0_Init(1000);
 15825  013C16  0EE8               	movlw	232
 15826  013C18  0100               	movlb	0	; () banked
 15827  013C1A  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
 15828  013C1C  0E03               	movlw	3
 15829  013C1E  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 15830  013C20  0E00               	movlw	0
 15831  013C22  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 15832  013C24  0E00               	movlw	0
 15833  013C26  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 15834  013C28  ECC6  F098         	call	_Timer0_Init	;wreg free
 15835  013C2C  0012               	return		;funcret
 15836  013C2E                     __end_of_Motor_Init:
 15837                           	opt stack 0
 15838                           tosu	equ	0xFFF
 15839                           tosh	equ	0xFFE
 15840                           tosl	equ	0xFFD
 15841                           pclath	equ	0xFFA
 15842                           tblptru	equ	0xFF8
 15843                           tblptrh	equ	0xFF7
 15844                           tblptrl	equ	0xFF6
 15845                           tablat	equ	0xFF5
 15846                           prodh	equ	0xFF4
 15847                           prodl	equ	0xFF3
 15848                           intcon	equ	0xFF2
 15849                           postinc0	equ	0xFEE
 15850                           wreg	equ	0xFE8
 15851                           indf1	equ	0xFE7
 15852                           postdec1	equ	0xFE5
 15853                           fsr1h	equ	0xFE2
 15854                           fsr1l	equ	0xFE1
 15855                           indf2	equ	0xFDF
 15856                           postinc2	equ	0xFDE
 15857                           postdec2	equ	0xFDD
 15858                           plusw2	equ	0xFDB
 15859                           fsr2h	equ	0xFDA
 15860                           fsr2l	equ	0xFD9
 15861                           status	equ	0xFD8
 15862                           
 15863 ;; *************** function _Timer0_Init *****************
 15864 ;; Defined at:
 15865 ;;		line 25 in file "Library/Timer0.c"
 15866 ;; Parameters:    Size  Location     Type
 15867 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 15868 ;; Auto vars:     Size  Location     Type
 15869 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 15870 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 15871 ;; Return value:  Size  Location     Type
 15872 ;;                  1    wreg      void 
 15873 ;; Registers used:
 15874 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15875 ;; Tracked objects:
 15876 ;;		On entry : 0/0
 15877 ;;		On exit  : 0/0
 15878 ;;		Unchanged: 0/0
 15879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15880 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15881 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15883 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15884 ;;Total ram usage:       14 bytes
 15885 ;; Hardware stack levels used:    1
 15886 ;; Hardware stack levels required when called:    8
 15887 ;; This function calls:
 15888 ;;		_Timer0_Clear
 15889 ;;		___lldiv
 15890 ;; This function is called by:
 15891 ;;		_Motor_Init
 15892 ;;		_Motor_Speed
 15893 ;; This function uses a non-reentrant model
 15894 ;;
 15895                           
 15896                           	psect	text72
 15897  01318C                     __ptext72:
 15898                           	opt stack 0
 15899  01318C                     _Timer0_Init:
 15900                           	opt stack 20
 15901                           
 15902                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 15903                           
 15904                           ;incstack = 0
 15905  01318C  0E80               	movlw	128
 15906  01318E  0100               	movlb	0	; () banked
 15907  013190  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 15908  013192  0E8D               	movlw	141
 15909  013194  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 15910  013196  0E5B               	movlw	91
 15911  013198  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 15912  01319A  0E00               	movlw	0
 15913  01319C  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 15914                           
 15915                           ; BSR set to: 0
 15916                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 15917                           ;Timer0.c: 31: static UINT8 PRE = 0;
 15918                           ;Timer0.c: 32: static UINT32 DIV = 0;
 15919                           ;Timer0.c: 34: UINT32 DIVIDE;
 15920                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 15921  01319E  9ED5               	bcf	4053,7,c	;volatile
 15922                           
 15923                           ; BSR set to: 0
 15924                           ;Timer0.c: 38: if (pFrequency == 0)
 15925  0131A0  0100               	movlb	0	; () banked
 15926  0131A2  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 15927  0131A4  0100               	movlb	0	; () banked
 15928  0131A6  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 15929  0131A8  0100               	movlb	0	; () banked
 15930  0131AA  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 15931  0131AC  0100               	movlb	0	; () banked
 15932  0131AE  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 15933  0131B0  B4D8               	btfsc	status,2,c
 15934  0131B2  0012               	return	
 15935                           
 15936                           ; BSR set to: 0
 15937                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 15938                           
 15939                           ; BSR set to: 0
 15940                           ;Timer0.c: 39: return;
 15941  0131B4  96D5               	bcf	4053,3,c	;volatile
 15942                           
 15943                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 15944  0131B6  9CD5               	bcf	4053,6,c	;volatile
 15945                           
 15946                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 15947  0131B8  9AD5               	bcf	4053,5,c	;volatile
 15948                           
 15949                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 15950  0131BA  98D5               	bcf	4053,4,c	;volatile
 15951                           
 15952                           ; BSR set to: 0
 15953                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 15954  0131BC  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 15955  0131C0  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 15956  0131C4  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 15957  0131C8  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 15958  0131CC  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 15959  0131D0  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 15960  0131D4  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 15961  0131D8  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 15962  0131DC  EC0B  F0A0         	call	___lldiv	;wreg free
 15963  0131E0  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 15964  0131E4  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 15965  0131E8  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 15966  0131EC  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 15967                           
 15968                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 15969  0131F0  D00C               	goto	l1787
 15970  0131F2                     l13528:
 15971                           
 15972                           ;Timer0.c: 50: {
 15973                           ;Timer0.c: 51: INDEX ++;
 15974  0131F2  0100               	movlb	0	; () banked
 15975  0131F4  2BDC               	incf	_INDEX& (0+255),f,b
 15976                           
 15977                           ; BSR set to: 0
 15978                           ;Timer0.c: 52: if (INDEX >= 3)
 15979  0131F6  0E02               	movlw	2
 15980  0131F8  0100               	movlb	0	; () banked
 15981  0131FA  65DC               	cpfsgt	_INDEX& (0+255),b
 15982  0131FC  D001               	goto	l1785
 15983  0131FE  D02F               	goto	u10070
 15984  013200                     l1785:
 15985                           
 15986                           ; BSR set to: 0
 15987                           ;Timer0.c: 56: if (INDEX >= 8)
 15988                           
 15989                           ; BSR set to: 0
 15990  013200  0E07               	movlw	7
 15991  013202  0100               	movlb	0	; () banked
 15992  013204  65DC               	cpfsgt	_INDEX& (0+255),b
 15993  013206  D001               	goto	l1787
 15994  013208  0012               	return	
 15995  01320A                     l1787:
 15996                           
 15997                           ; BSR set to: 0
 15998                           
 15999                           ; BSR set to: 0
 16000  01320A  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 16001  01320E  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 16002  013212  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 16003  013216  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 16004  01321A  0100               	movlb	0	; () banked
 16005  01321C  51DC               	movf	_INDEX& (0+255),w,b
 16006  01321E  0D02               	mullw	2
 16007  013220  0E75               	movlw	low Timer0_Init@PRESCALE
 16008  013222  24F3               	addwf	prodl,w,c
 16009  013224  6EF6               	movwf	tblptrl,c
 16010  013226  0EFD               	movlw	high Timer0_Init@PRESCALE
 16011  013228  20F4               	addwfc	prodh,w,c
 16012  01322A  6EF7               	movwf	tblptrh,c
 16013  01322C                     	if	1	;There are 3 active tblptr bytes
 16014  01322C  6AF8               	clrf	tblptru,c
 16015  01322E  0E00               	movlw	low (__mediumconst shr (0+16))
 16016  013230  22F8               	addwfc	tblptru,f,c
 16017  013232                     	endif
 16018  013232  0009               	tblrd		*+
 16019  013234  CFF5 F071          	movff	tablat,??_Timer0_Init
 16020  013238  0009               	tblrd		*+
 16021  01323A  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 16022  01323E  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 16023  013242  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 16024  013246  0100               	movlb	0	; () banked
 16025  013248  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 16026  01324A  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 16027  01324C  EC0B  F0A0         	call	___lldiv	;wreg free
 16028  013250  0100               	movlb	0	; () banked
 16029  013252  5163               	movf	(?___lldiv+3)& (0+255),w,b
 16030  013254  E1CE               	bnz	l13528
 16031  013256  0100               	movlb	0	; () banked
 16032  013258  0562               	decf	(?___lldiv+2)& (0+255),w,b
 16033  01325A  B0D8               	btfsc	status,0,c
 16034  01325C  D7CA               	goto	l1784
 16035  01325E                     u10070:
 16036                           
 16037                           ; BSR set to: 0
 16038                           ;Timer0.c: 58: }
 16039                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 16040                           
 16041                           ; BSR set to: 0
 16042  01325E  0100               	movlb	0	; () banked
 16043  013260  51DC               	movf	_INDEX& (0+255),w,b
 16044  013262  0D02               	mullw	2
 16045  013264  0E75               	movlw	low Timer0_Init@PRESCALE
 16046  013266  24F3               	addwf	prodl,w,c
 16047  013268  6EF6               	movwf	tblptrl,c
 16048  01326A  0EFD               	movlw	high Timer0_Init@PRESCALE
 16049  01326C  20F4               	addwfc	prodh,w,c
 16050  01326E  6EF7               	movwf	tblptrh,c
 16051  013270                     	if	1	;There are 3 active tblptr bytes
 16052  013270  6AF8               	clrf	tblptru,c
 16053  013272  0E00               	movlw	low (__mediumconst shr (0+16))
 16054  013274  22F8               	addwfc	tblptru,f,c
 16055  013276                     	endif
 16056  013276  0008               	tblrd		*
 16057  013278  CFF5 F0DB          	movff	tablat,Timer0_Init@PRE
 16058                           
 16059                           ; BSR set to: 0
 16060                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 16061  01327C  0EFF               	movlw	255
 16062  01327E  0100               	movlb	0	; () banked
 16063  013280  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 16064  013282  0103               	movlb	3	; () banked
 16065  013284  6F10               	movwf	Timer0_Init@DIV& (0+255),b
 16066  013286  0EFF               	movlw	255
 16067  013288  0100               	movlb	0	; () banked
 16068  01328A  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 16069  01328C  0103               	movlb	3	; () banked
 16070  01328E  6F11               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 16071  013290  0EFF               	movlw	255
 16072  013292  0100               	movlb	0	; () banked
 16073  013294  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 16074  013296  0103               	movlb	3	; () banked
 16075  013298  6F12               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 16076  01329A  0EFF               	movlw	255
 16077  01329C  0100               	movlb	0	; () banked
 16078  01329E  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 16079  0132A0  0103               	movlb	3	; () banked
 16080  0132A2  6F13               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 16081                           
 16082                           ; BSR set to: 3
 16083                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 16084  0132A4  C310  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 16085  0132A8  C311  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 16086  0132AC  C312  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 16087  0132B0  C313  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 16088  0132B4  0100               	movlb	0	; () banked
 16089  0132B6  51DB               	movf	Timer0_Init@PRE& (0+255),w,b
 16090  0132B8  0100               	movlb	0	; () banked
 16091  0132BA  6F64               	movwf	___lldiv@divisor& (0+255),b
 16092  0132BC  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 16093  0132BE  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 16094  0132C0  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 16095  0132C2  EC0B  F0A0         	call	___lldiv	;wreg free
 16096  0132C6  0100               	movlb	0	; () banked
 16097  0132C8  1F60               	comf	?___lldiv& (0+255),f,b
 16098  0132CA  0100               	movlb	0	; () banked
 16099  0132CC  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 16100  0132CE  0100               	movlb	0	; () banked
 16101  0132D0  4B60               	infsnz	?___lldiv& (0+255),f,b
 16102  0132D2  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 16103  0132D4  0EFF               	movlw	255
 16104  0132D6  0100               	movlb	0	; () banked
 16105  0132D8  2560               	addwf	?___lldiv& (0+255),w,b
 16106  0132DA  6E29               	movwf	_COUNTER,c
 16107  0132DC  0EFF               	movlw	255
 16108  0132DE  0100               	movlb	0	; () banked
 16109  0132E0  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 16110  0132E2  6E2A               	movwf	_COUNTER+1,c
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;Timer0.c: 68: Timer0_Clear();
 16114  0132E4  EC71  F0B2         	call	_Timer0_Clear	;wreg free
 16115                           
 16116                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 16117  0132E8  8ED5               	bsf	4053,7,c	;volatile
 16118  0132EA  0012               	return		;funcret
 16119  0132EC                     __end_of_Timer0_Init:
 16120                           	opt stack 0
 16121                           tosu	equ	0xFFF
 16122                           tosh	equ	0xFFE
 16123                           tosl	equ	0xFFD
 16124                           pclath	equ	0xFFA
 16125                           tblptru	equ	0xFF8
 16126                           tblptrh	equ	0xFF7
 16127                           tblptrl	equ	0xFF6
 16128                           tablat	equ	0xFF5
 16129                           prodh	equ	0xFF4
 16130                           prodl	equ	0xFF3
 16131                           intcon	equ	0xFF2
 16132                           postinc0	equ	0xFEE
 16133                           wreg	equ	0xFE8
 16134                           indf1	equ	0xFE7
 16135                           postdec1	equ	0xFE5
 16136                           fsr1h	equ	0xFE2
 16137                           fsr1l	equ	0xFE1
 16138                           indf2	equ	0xFDF
 16139                           postinc2	equ	0xFDE
 16140                           postdec2	equ	0xFDD
 16141                           plusw2	equ	0xFDB
 16142                           fsr2h	equ	0xFDA
 16143                           fsr2l	equ	0xFD9
 16144                           status	equ	0xFD8
 16145                           
 16146 ;; *************** function _Timer0_Clear *****************
 16147 ;; Defined at:
 16148 ;;		line 20 in file "Library/Timer0.c"
 16149 ;; Parameters:    Size  Location     Type
 16150 ;;		None
 16151 ;; Auto vars:     Size  Location     Type
 16152 ;;		None
 16153 ;; Return value:  Size  Location     Type
 16154 ;;                  1    wreg      void 
 16155 ;; Registers used:
 16156 ;;		None
 16157 ;; Tracked objects:
 16158 ;;		On entry : 0/0
 16159 ;;		On exit  : 0/0
 16160 ;;		Unchanged: 0/0
 16161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16166 ;;Total ram usage:        0 bytes
 16167 ;; Hardware stack levels used:    1
 16168 ;; Hardware stack levels required when called:    7
 16169 ;; This function calls:
 16170 ;;		Nothing
 16171 ;; This function is called by:
 16172 ;;		_Timer0_Init
 16173 ;; This function uses a non-reentrant model
 16174 ;;
 16175                           
 16176                           	psect	text73
 16177  0164E2                     __ptext73:
 16178                           	opt stack 0
 16179  0164E2                     _Timer0_Clear:
 16180                           	opt stack 20
 16181                           
 16182                           ;Timer0.c: 22: TMR0 = COUNTER;
 16183                           
 16184                           ;incstack = 0
 16185  0164E2  C029  FFD6         	movff	_COUNTER,4054	;volatile
 16186  0164E6  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 16187                           
 16188                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 16189  0164EA  94F2               	bcf	intcon,2,c	;volatile
 16190  0164EC  0012               	return		;funcret
 16191  0164EE                     __end_of_Timer0_Clear:
 16192                           	opt stack 0
 16193                           tosu	equ	0xFFF
 16194                           tosh	equ	0xFFE
 16195                           tosl	equ	0xFFD
 16196                           pclath	equ	0xFFA
 16197                           tblptru	equ	0xFF8
 16198                           tblptrh	equ	0xFF7
 16199                           tblptrl	equ	0xFF6
 16200                           tablat	equ	0xFF5
 16201                           prodh	equ	0xFF4
 16202                           prodl	equ	0xFF3
 16203                           intcon	equ	0xFF2
 16204                           postinc0	equ	0xFEE
 16205                           wreg	equ	0xFE8
 16206                           indf1	equ	0xFE7
 16207                           postdec1	equ	0xFE5
 16208                           fsr1h	equ	0xFE2
 16209                           fsr1l	equ	0xFE1
 16210                           indf2	equ	0xFDF
 16211                           postinc2	equ	0xFDE
 16212                           postdec2	equ	0xFDD
 16213                           plusw2	equ	0xFDB
 16214                           fsr2h	equ	0xFDA
 16215                           fsr2l	equ	0xFD9
 16216                           status	equ	0xFD8
 16217                           
 16218 ;; *************** function _MXK_Init *****************
 16219 ;; Defined at:
 16220 ;;		line 33 in file "Library/MXK.c"
 16221 ;; Parameters:    Size  Location     Type
 16222 ;;		None
 16223 ;; Auto vars:     Size  Location     Type
 16224 ;;		None
 16225 ;; Return value:  Size  Location     Type
 16226 ;;                  1    wreg      void 
 16227 ;; Registers used:
 16228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16229 ;; Tracked objects:
 16230 ;;		On entry : 0/0
 16231 ;;		On exit  : 0/0
 16232 ;;		Unchanged: 0/0
 16233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16238 ;;Total ram usage:        0 bytes
 16239 ;; Hardware stack levels used:    1
 16240 ;; Hardware stack levels required when called:   16
 16241 ;; This function calls:
 16242 ;;		_LED_Init
 16243 ;;		_Port_Init
 16244 ;;		_Port_SetPin
 16245 ;;		_Port_SetPinType
 16246 ;;		_Port_SetQuadType
 16247 ;;		_Port_SetType
 16248 ;;		_delay_ms
 16249 ;; This function is called by:
 16250 ;;		_init
 16251 ;; This function uses a non-reentrant model
 16252 ;;
 16253                           
 16254                           	psect	text74
 16255  012D34                     __ptext74:
 16256                           	opt stack 0
 16257  012D34                     _MXK_Init:
 16258                           	opt stack 13
 16259                           
 16260                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 16261                           
 16262                           ;incstack = 0
 16263  012D34  0E01               	movlw	1
 16264  012D36  6E4B               	movwf	_Bus_State,c
 16265                           
 16266                           ;MXK.c: 36: lQueue = (Function)0;
 16267  012D38  0E00               	movlw	0
 16268  012D3A  0100               	movlb	0	; () banked
 16269  012D3C  6FBA               	movwf	_lQueue& (0+255),b	;volatile
 16270  012D3E  0E00               	movlw	0
 16271  012D40  0100               	movlb	0	; () banked
 16272  012D42  6FBB               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16273  012D44  0E00               	movlw	0
 16274  012D46  0100               	movlb	0	; () banked
 16275  012D48  6FBC               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16276                           
 16277                           ; BSR set to: 0
 16278                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 16279  012D4A  0EAD               	movlw	low _PortA
 16280  012D4C  0100               	movlb	0	; () banked
 16281  012D4E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16282  012D50  0E03               	movlw	high _PortA
 16283  012D52  0100               	movlb	0	; () banked
 16284  012D54  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16285  012D56  0E00               	movlw	0
 16286  012D58  0100               	movlb	0	; () banked
 16287  012D5A  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16288  012D5C  EC0E  F095         	call	_Port_Init	;wreg free
 16289                           
 16290                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 16291  012D60  0EA3               	movlw	low _PortB
 16292  012D62  0100               	movlb	0	; () banked
 16293  012D64  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16294  012D66  0E03               	movlw	high _PortB
 16295  012D68  0100               	movlb	0	; () banked
 16296  012D6A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16297  012D6C  0E01               	movlw	1
 16298  012D6E  0100               	movlb	0	; () banked
 16299  012D70  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16300  012D72  EC0E  F095         	call	_Port_Init	;wreg free
 16301                           
 16302                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 16303  012D76  0EEA               	movlw	low _PortC
 16304  012D78  0100               	movlb	0	; () banked
 16305  012D7A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16306  012D7C  0E00               	movlw	high _PortC
 16307  012D7E  0100               	movlb	0	; () banked
 16308  012D80  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16309  012D82  0E02               	movlw	2
 16310  012D84  0100               	movlb	0	; () banked
 16311  012D86  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16312  012D88  EC0E  F095         	call	_Port_Init	;wreg free
 16313                           
 16314                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 16315  012D8C  0EE0               	movlw	low _PortD
 16316  012D8E  0100               	movlb	0	; () banked
 16317  012D90  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16318  012D92  0E00               	movlw	high _PortD
 16319  012D94  0100               	movlb	0	; () banked
 16320  012D96  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16321  012D98  0E03               	movlw	3
 16322  012D9A  0100               	movlb	0	; () banked
 16323  012D9C  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16324  012D9E  EC0E  F095         	call	_Port_Init	;wreg free
 16325                           
 16326                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 16327  012DA2  0E99               	movlw	low _PortE
 16328  012DA4  0100               	movlb	0	; () banked
 16329  012DA6  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16330  012DA8  0E03               	movlw	high _PortE
 16331  012DAA  0100               	movlb	0	; () banked
 16332  012DAC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16333  012DAE  0E04               	movlw	4
 16334  012DB0  0100               	movlb	0	; () banked
 16335  012DB2  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16336  012DB4  EC0E  F095         	call	_Port_Init	;wreg free
 16337                           
 16338                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 16339  012DB8  0EB7               	movlw	low _PortF
 16340  012DBA  0100               	movlb	0	; () banked
 16341  012DBC  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16342  012DBE  0E03               	movlw	high _PortF
 16343  012DC0  0100               	movlb	0	; () banked
 16344  012DC2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16345  012DC4  0E05               	movlw	5
 16346  012DC6  0100               	movlb	0	; () banked
 16347  012DC8  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16348  012DCA  EC0E  F095         	call	_Port_Init	;wreg free
 16349                           
 16350                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 16351  012DCE  0E8F               	movlw	low _PortG
 16352  012DD0  0100               	movlb	0	; () banked
 16353  012DD2  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16354  012DD4  0E03               	movlw	high _PortG
 16355  012DD6  0100               	movlb	0	; () banked
 16356  012DD8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16357  012DDA  0E06               	movlw	6
 16358  012DDC  0100               	movlb	0	; () banked
 16359  012DDE  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16360  012DE0  EC0E  F095         	call	_Port_Init	;wreg free
 16361                           
 16362                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 16363  012DE4  0EB7               	movlw	low _PortF
 16364  012DE6  0100               	movlb	0	; () banked
 16365  012DE8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16366  012DEA  0E03               	movlw	high _PortF
 16367  012DEC  0100               	movlb	0	; () banked
 16368  012DEE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16369  012DF0  0E05               	movlw	5
 16370  012DF2  0100               	movlb	0	; () banked
 16371  012DF4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16372  012DF6  0E00               	movlw	0
 16373  012DF8  0100               	movlb	0	; () banked
 16374  012DFA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16375  012DFC  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16376                           
 16377                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 16378  012E00  0EA3               	movlw	low _PortB
 16379  012E02  0100               	movlb	0	; () banked
 16380  012E04  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 16381  012E06  0E03               	movlw	high _PortB
 16382  012E08  0100               	movlb	0	; () banked
 16383  012E0A  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16384  012E0C  0E00               	movlw	0
 16385  012E0E  0100               	movlb	0	; () banked
 16386  012E10  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16387  012E12  0E00               	movlw	0
 16388  012E14  0100               	movlb	0	; () banked
 16389  012E16  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 16390  012E18  EC52  F08D         	call	_Port_SetQuadType	;wreg free
 16391                           
 16392                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 16393  012E1C  0EB7               	movlw	low _PortF
 16394  012E1E  0100               	movlb	0	; () banked
 16395  012E20  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16396  012E22  0E03               	movlw	high _PortF
 16397  012E24  0100               	movlb	0	; () banked
 16398  012E26  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16399  012E28  0E06               	movlw	6
 16400  012E2A  0100               	movlb	0	; () banked
 16401  012E2C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16402  012E2E  0E03               	movlw	3
 16403  012E30  0100               	movlb	0	; () banked
 16404  012E32  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16405  012E34  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16406                           
 16407                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 16408  012E38  0E8F               	movlw	low _PortG
 16409  012E3A  0100               	movlb	0	; () banked
 16410  012E3C  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 16411  012E3E  0E03               	movlw	high _PortG
 16412  012E40  0100               	movlb	0	; () banked
 16413  012E42  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 16414  012E44  0E03               	movlw	3
 16415  012E46  0100               	movlb	0	; () banked
 16416  012E48  6F9C               	movwf	Port_SetType@pType& (0+255),b
 16417  012E4A  EC7D  F08E         	call	_Port_SetType	;wreg free
 16418                           
 16419                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 16420  012E4E  0E8F               	movlw	low _PortG
 16421  012E50  0100               	movlb	0	; () banked
 16422  012E52  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16423  012E54  0E03               	movlw	high _PortG
 16424  012E56  0100               	movlb	0	; () banked
 16425  012E58  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16426  012E5A  0E04               	movlw	4
 16427  012E5C  0100               	movlb	0	; () banked
 16428  012E5E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16429  012E60  0E00               	movlw	0
 16430  012E62  0100               	movlb	0	; () banked
 16431  012E64  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16432  012E66  ECE9  F09E         	call	_Port_SetPin	;wreg free
 16433                           
 16434                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 16435  012E6A  0EB7               	movlw	low _PortF
 16436  012E6C  0100               	movlb	0	; () banked
 16437  012E6E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16438  012E70  0E03               	movlw	high _PortF
 16439  012E72  0100               	movlb	0	; () banked
 16440  012E74  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16441  012E76  0E06               	movlw	6
 16442  012E78  0100               	movlb	0	; () banked
 16443  012E7A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16444  012E7C  0E01               	movlw	1
 16445  012E7E  0100               	movlb	0	; () banked
 16446  012E80  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16447  012E82  ECE9  F09E         	call	_Port_SetPin	;wreg free
 16448                           
 16449                           ;MXK.c: 55: LED_Init(eLED1);
 16450  012E86  0E00               	movlw	0
 16451  012E88  EC5B  F0AB         	call	_LED_Init
 16452                           
 16453                           ;MXK.c: 56: LED_Init(eLED2);
 16454  012E8C  0E01               	movlw	1
 16455  012E8E  EC5B  F0AB         	call	_LED_Init
 16456                           
 16457                           ;MXK.c: 58: PIR1 = 0;
 16458  012E92  0E00               	movlw	0
 16459  012E94  6E9E               	movwf	3998,c	;volatile
 16460                           
 16461                           ;MXK.c: 59: PIR2 = 0;
 16462  012E96  0E00               	movlw	0
 16463  012E98  6EA1               	movwf	4001,c	;volatile
 16464                           
 16465                           ;MXK.c: 60: PIR3 = 0;
 16466  012E9A  0E00               	movlw	0
 16467  012E9C  6EA4               	movwf	4004,c	;volatile
 16468                           
 16469                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 16470  012E9E  8E9B               	bsf	3995,7,c	;volatile
 16471                           
 16472                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 16473  012EA0  8C9B               	bsf	3995,6,c	;volatile
 16474                           
 16475                           ;MXK.c: 66: delay_ms(100);
 16476  012EA2  0E00               	movlw	0
 16477  012EA4  0100               	movlb	0	; () banked
 16478  012EA6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16479  012EA8  0E64               	movlw	100
 16480  012EAA  6F60               	movwf	delay_ms@ms& (0+255),b
 16481  012EAC  ECF6  F0A9         	call	_delay_ms	;wreg free
 16482                           
 16483                           ;MXK.c: 68: RCONbits.IPEN = 1;
 16484  012EB0  8ED0               	bsf	4048,7,c	;volatile
 16485  012EB2  0012               	return		;funcret
 16486  012EB4                     __end_of_MXK_Init:
 16487                           	opt stack 0
 16488                           tosu	equ	0xFFF
 16489                           tosh	equ	0xFFE
 16490                           tosl	equ	0xFFD
 16491                           pclath	equ	0xFFA
 16492                           tblptru	equ	0xFF8
 16493                           tblptrh	equ	0xFF7
 16494                           tblptrl	equ	0xFF6
 16495                           tablat	equ	0xFF5
 16496                           prodh	equ	0xFF4
 16497                           prodl	equ	0xFF3
 16498                           intcon	equ	0xFF2
 16499                           postinc0	equ	0xFEE
 16500                           wreg	equ	0xFE8
 16501                           indf1	equ	0xFE7
 16502                           postdec1	equ	0xFE5
 16503                           fsr1h	equ	0xFE2
 16504                           fsr1l	equ	0xFE1
 16505                           indf2	equ	0xFDF
 16506                           postinc2	equ	0xFDE
 16507                           postdec2	equ	0xFDD
 16508                           plusw2	equ	0xFDB
 16509                           fsr2h	equ	0xFDA
 16510                           fsr2l	equ	0xFD9
 16511                           status	equ	0xFD8
 16512                           
 16513 ;; *************** function _Port_Init *****************
 16514 ;; Defined at:
 16515 ;;		line 150 in file "Library/Port.c"
 16516 ;; Parameters:    Size  Location     Type
 16517 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 16518 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16519 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16520 ;;  pPort           1   66[BANK0 ] enum E6786
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;  i               1   69[BANK0 ] unsigned char 
 16523 ;; Return value:  Size  Location     Type
 16524 ;;                  1    wreg      void 
 16525 ;; Registers used:
 16526 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16527 ;; Tracked objects:
 16528 ;;		On entry : 0/0
 16529 ;;		On exit  : 0/0
 16530 ;;		Unchanged: 0/0
 16531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16532 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16535 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16536 ;;Total ram usage:        6 bytes
 16537 ;; Hardware stack levels used:    1
 16538 ;; Hardware stack levels required when called:   15
 16539 ;; This function calls:
 16540 ;;		_GetPortPORT
 16541 ;;		_GetPortProperties
 16542 ;;		_GetPortTRIS
 16543 ;;		_Port_Set
 16544 ;;		_Port_SetPinType
 16545 ;;		_Port_SetType
 16546 ;;		_Word_GetPair
 16547 ;; This function is called by:
 16548 ;;		_MXK_Init
 16549 ;; This function uses a non-reentrant model
 16550 ;;
 16551                           
 16552                           	psect	text75
 16553  012A1C                     __ptext75:
 16554                           	opt stack 0
 16555  012A1C                     _Port_Init:
 16556                           	opt stack 13
 16557                           
 16558                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 16559                           
 16560                           ;incstack = 0
 16561  012A1C  0100               	movlb	0	; () banked
 16562  012A1E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16563  012A20  EC7E  F0A3         	call	_GetPortProperties
 16564  012A24  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 16565  012A28  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 16566  012A2C  0100               	movlb	0	; () banked
 16567  012A2E  C060  FFDE         	movff	?_GetPortProperties,postinc2
 16568  012A32  0100               	movlb	0	; () banked
 16569  012A34  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 16570                           
 16571                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 16572  012A38  0100               	movlb	0	; () banked
 16573  012A3A  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16574  012A3C  ECD1  F0A3         	call	_GetPortPORT
 16575  012A40  0100               	movlb	0	; () banked
 16576  012A42  EE20 F006          	lfsr	2,6
 16577  012A46  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16578  012A48  26D9               	addwf	fsr2l,f,c
 16579  012A4A  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16580  012A4C  22DA               	addwfc	fsr2h,f,c
 16581  012A4E  0100               	movlb	0	; () banked
 16582  012A50  C060  FFDE         	movff	?_GetPortPORT,postinc2
 16583  012A54  0100               	movlb	0	; () banked
 16584  012A56  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 16585                           
 16586                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 16587  012A5A  0100               	movlb	0	; () banked
 16588  012A5C  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16589  012A5E  ECD1  F0A3         	call	_GetPortPORT
 16590  012A62  0100               	movlb	0	; () banked
 16591  012A64  EE20 F004          	lfsr	2,4
 16592  012A68  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16593  012A6A  26D9               	addwf	fsr2l,f,c
 16594  012A6C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16595  012A6E  22DA               	addwfc	fsr2h,f,c
 16596  012A70  0100               	movlb	0	; () banked
 16597  012A72  C060  FFDE         	movff	?_GetPortPORT,postinc2
 16598  012A76  0100               	movlb	0	; () banked
 16599  012A78  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 16600                           
 16601                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 16602  012A7C  0100               	movlb	0	; () banked
 16603  012A7E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16604  012A80  EC2B  F0A3         	call	_GetPortTRIS
 16605  012A84  0100               	movlb	0	; () banked
 16606  012A86  EE20 F002          	lfsr	2,2
 16607  012A8A  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16608  012A8C  26D9               	addwf	fsr2l,f,c
 16609  012A8E  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16610  012A90  22DA               	addwfc	fsr2h,f,c
 16611  012A92  0100               	movlb	0	; () banked
 16612  012A94  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 16613  012A98  0100               	movlb	0	; () banked
 16614  012A9A  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 16615                           
 16616                           ; BSR set to: 0
 16617                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 16618  012A9E  0100               	movlb	0	; () banked
 16619  012AA0  EE20 F004          	lfsr	2,4
 16620  012AA4  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16621  012AA6  26D9               	addwf	fsr2l,f,c
 16622  012AA8  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16623  012AAA  22DA               	addwfc	fsr2h,f,c
 16624  012AAC  CFDE F0A3          	movff	postinc2,??_Port_Init
 16625  012AB0  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 16626  012AB4  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 16627  012AB8  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 16628  012ABC  0E00               	movlw	0
 16629  012ABE  6EDF               	movwf	indf2,c
 16630                           
 16631                           ; BSR set to: 0
 16632                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 16633  012AC0  0100               	movlb	0	; () banked
 16634  012AC2  EE20 F002          	lfsr	2,2
 16635  012AC6  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16636  012AC8  26D9               	addwf	fsr2l,f,c
 16637  012ACA  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16638  012ACC  22DA               	addwfc	fsr2h,f,c
 16639  012ACE  CFDE F0A3          	movff	postinc2,??_Port_Init
 16640  012AD2  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 16641  012AD6  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 16642  012ADA  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 16643  012ADE  0EFF               	movlw	255
 16644  012AE0  6EDF               	movwf	indf2,c
 16645                           
 16646                           ; BSR set to: 0
 16647                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 16648  012AE2  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 16649  012AE6  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 16650  012AEA  0E00               	movlw	0
 16651  012AEC  0100               	movlb	0	; () banked
 16652  012AEE  6F9C               	movwf	Port_SetType@pType& (0+255),b
 16653  012AF0  EC7D  F08E         	call	_Port_SetType	;wreg free
 16654                           
 16655                           ;Port.c: 166: UINT8 i;
 16656                           ;Port.c: 167: for (i=0; i<8; i++)
 16657  012AF4  0E00               	movlw	0
 16658  012AF6  0100               	movlb	0	; () banked
 16659  012AF8  6FA5               	movwf	Port_Init@i& (0+255),b
 16660  012AFA                     l13382:
 16661                           
 16662                           ; BSR set to: 0
 16663  012AFA  0E07               	movlw	7
 16664  012AFC  0100               	movlb	0	; () banked
 16665  012AFE  65A5               	cpfsgt	Port_Init@i& (0+255),b
 16666  012B00  D031               	goto	l403
 16667  012B02  D04B               	goto	u9870
 16668  012B04                     
 16669                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 16670                           
 16671                           ; BSR set to: 0
 16672  012B04  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16673  012B08  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16674  012B0C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16675  012B10  0E03               	movlw	3
 16676  012B12  0100               	movlb	0	; () banked
 16677  012B14  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16678  012B16  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16679                           
 16680                           ;Port.c: 173: break;
 16681  012B1A  D03C               	goto	l405
 16682  012B1C                     
 16683                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 16684  012B1C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16685  012B20  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16686  012B24  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16687  012B28  0E02               	movlw	2
 16688  012B2A  0100               	movlb	0	; () banked
 16689  012B2C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16690  012B2E  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16691                           
 16692                           ;Port.c: 176: break;
 16693  012B32  D030               	goto	l405
 16694  012B34                     
 16695                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 16696  012B34  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16697  012B38  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16698  012B3C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16699  012B40  0E01               	movlw	1
 16700  012B42  0100               	movlb	0	; () banked
 16701  012B44  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16702  012B46  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16703                           
 16704                           ;Port.c: 179: break;
 16705  012B4A  D024               	goto	l405
 16706  012B4C                     
 16707                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 16708  012B4C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16709  012B50  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16710  012B54  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16711  012B58  0E00               	movlw	0
 16712  012B5A  0100               	movlb	0	; () banked
 16713  012B5C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16714  012B5E  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16715                           
 16716                           ;Port.c: 183: }
 16717                           
 16718                           ;Port.c: 182: break;
 16719  012B62  D018               	goto	l405
 16720  012B64                     l403:
 16721  012B64  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 16722  012B68  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 16723  012B6C  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 16724  012B70  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 16725  012B74  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 16726  012B78  EC04  F0AF         	call	_Word_GetPair	;wreg free
 16727                           
 16728                           ; Switch size 1, requested type "space"
 16729                           ; Number of cases is 4, Range of values is 0 to 3
 16730                           ; switch strategies available:
 16731                           ; Name         Instructions Cycles
 16732                           ; simple_byte           13     7 (average)
 16733                           ;	Chosen strategy is simple_byte
 16734  012B7C  0A00               	xorlw	0	; case 0
 16735  012B7E  B4D8               	btfsc	status,2,c
 16736  012B80  D7C1               	goto	l404
 16737  012B82  0A01               	xorlw	1	; case 1
 16738  012B84  B4D8               	btfsc	status,2,c
 16739  012B86  D7D6               	goto	l407
 16740  012B88  0A03               	xorlw	3	; case 2
 16741  012B8A  B4D8               	btfsc	status,2,c
 16742  012B8C  D7C7               	goto	l406
 16743  012B8E  0A01               	xorlw	1	; case 3
 16744  012B90  B4D8               	btfsc	status,2,c
 16745  012B92  D7DC               	goto	l408
 16746  012B94                     l405:
 16747  012B94  0100               	movlb	0	; () banked
 16748  012B96  2BA5               	incf	Port_Init@i& (0+255),f,b
 16749  012B98  D7B0               	goto	l13382
 16750  012B9A                     u9870:
 16751                           
 16752                           ; BSR set to: 0
 16753                           ;Port.c: 184: }
 16754                           ;Port.c: 185: Port_Set(pInput, 0x00);
 16755                           
 16756                           ; BSR set to: 0
 16757  012B9A  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 16758  012B9E  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 16759  012BA2  0E00               	movlw	0
 16760  012BA4  0100               	movlb	0	; () banked
 16761  012BA6  6F71               	movwf	Port_Set@pValue& (0+255),b
 16762  012BA8  EC33  F08A         	call	_Port_Set	;wreg free
 16763  012BAC  0012               	return		;funcret
 16764  012BAE                     __end_of_Port_Init:
 16765                           	opt stack 0
 16766                           tosu	equ	0xFFF
 16767                           tosh	equ	0xFFE
 16768                           tosl	equ	0xFFD
 16769                           pclath	equ	0xFFA
 16770                           tblptru	equ	0xFF8
 16771                           tblptrh	equ	0xFF7
 16772                           tblptrl	equ	0xFF6
 16773                           tablat	equ	0xFF5
 16774                           prodh	equ	0xFF4
 16775                           prodl	equ	0xFF3
 16776                           intcon	equ	0xFF2
 16777                           postinc0	equ	0xFEE
 16778                           wreg	equ	0xFE8
 16779                           indf1	equ	0xFE7
 16780                           postdec1	equ	0xFE5
 16781                           fsr1h	equ	0xFE2
 16782                           fsr1l	equ	0xFE1
 16783                           indf2	equ	0xFDF
 16784                           postinc2	equ	0xFDE
 16785                           postdec2	equ	0xFDD
 16786                           plusw2	equ	0xFDB
 16787                           fsr2h	equ	0xFDA
 16788                           fsr2l	equ	0xFD9
 16789                           status	equ	0xFD8
 16790                           
 16791 ;; *************** function _Port_SetType *****************
 16792 ;; Defined at:
 16793 ;;		line 513 in file "Library/Port.c"
 16794 ;; Parameters:    Size  Location     Type
 16795 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 16796 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16797 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16798 ;;  pType           1   60[BANK0 ] enum E6795
 16799 ;; Auto vars:     Size  Location     Type
 16800 ;;  Output          1   63[BANK0 ] enum E6475
 16801 ;; Return value:  Size  Location     Type
 16802 ;;                  1    wreg      enum E6475
 16803 ;; Registers used:
 16804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16810 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16813 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16814 ;;Total ram usage:        6 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:   14
 16817 ;; This function calls:
 16818 ;;		_Port_CheckPortType
 16819 ;;		_Word_SetPair
 16820 ;; This function is called by:
 16821 ;;		_Port_Init
 16822 ;;		_MXK_Init
 16823 ;; This function uses a non-reentrant model
 16824 ;;
 16825                           
 16826                           	psect	text76
 16827  011CFA                     __ptext76:
 16828                           	opt stack 0
 16829  011CFA                     _Port_SetType:
 16830                           	opt stack 14
 16831                           
 16832                           ;Port.c: 515: ePinError Output = ePinErrorState;
 16833                           
 16834                           ;incstack = 0
 16835  011CFA  0E05               	movlw	5
 16836  011CFC  0100               	movlb	0	; () banked
 16837  011CFE  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16838                           
 16839                           ;Port.c: 517: switch (pType)
 16840  011D00  D07A               	goto	l509
 16841  011D02                     
 16842                           ; BSR set to: 0
 16843                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 16844                           
 16845                           ; BSR set to: 0
 16846  011D02  0100               	movlb	0	; () banked
 16847  011D04  EE20 F002          	lfsr	2,2
 16848  011D08  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16849  011D0A  26D9               	addwf	fsr2l,f,c
 16850  011D0C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16851  011D0E  22DA               	addwfc	fsr2h,f,c
 16852  011D10  CFDE F09D          	movff	postinc2,??_Port_SetType
 16853  011D14  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16854  011D18  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16855  011D1C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16856  011D20  0EFF               	movlw	255
 16857  011D22  D067               	goto	L10
 16858  011D24                     
 16859                           ; BSR set to: 0
 16860                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 16861                           
 16862                           ; BSR set to: 0
 16863  011D24  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16864  011D28  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16865  011D2C  0E01               	movlw	1
 16866  011D2E  0100               	movlb	0	; () banked
 16867  011D30  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16868  011D32  EC2C  F0AD         	call	_Port_CheckPortType	;wreg free
 16869  011D36  0100               	movlb	0	; () banked
 16870  011D38  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16871  011D3A  0100               	movlb	0	; () banked
 16872  011D3C  519F               	movf	Port_SetType@Output& (0+255),w,b
 16873  011D3E  A4D8               	btfss	status,2,c
 16874  011D40  0012               	return	
 16875                           
 16876                           ; BSR set to: 0
 16877                           ;Port.c: 527: {
 16878                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 16879  011D42  0100               	movlb	0	; () banked
 16880  011D44  EE20 F002          	lfsr	2,2
 16881  011D48  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16882  011D4A  26D9               	addwf	fsr2l,f,c
 16883  011D4C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16884  011D4E  22DA               	addwfc	fsr2h,f,c
 16885  011D50  CFDE F09D          	movff	postinc2,??_Port_SetType
 16886  011D54  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16887  011D58  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16888  011D5C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16889  011D60  0E00               	movlw	0
 16890  011D62  6EDF               	movwf	indf2,c
 16891                           
 16892                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 16893  011D64  0100               	movlb	0	; () banked
 16894  011D66  EE20 F004          	lfsr	2,4
 16895  011D6A  D036               	goto	L21
 16896  011D6C                     
 16897                           ; BSR set to: 0
 16898                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 16899                           
 16900                           ; BSR set to: 0
 16901  011D6C  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16902  011D70  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16903  011D74  0E02               	movlw	2
 16904  011D76  0100               	movlb	0	; () banked
 16905  011D78  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16906  011D7A  EC2C  F0AD         	call	_Port_CheckPortType	;wreg free
 16907  011D7E  0100               	movlb	0	; () banked
 16908  011D80  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16909  011D82  0100               	movlb	0	; () banked
 16910  011D84  519F               	movf	Port_SetType@Output& (0+255),w,b
 16911  011D86  A4D8               	btfss	status,2,c
 16912  011D88  0012               	return	
 16913                           
 16914                           ; BSR set to: 0
 16915                           ;Port.c: 538: {
 16916                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 16917  011D8A  0100               	movlb	0	; () banked
 16918  011D8C  EE20 F002          	lfsr	2,2
 16919  011D90  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16920  011D92  26D9               	addwf	fsr2l,f,c
 16921  011D94  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16922  011D96  22DA               	addwfc	fsr2h,f,c
 16923  011D98  CFDE F09D          	movff	postinc2,??_Port_SetType
 16924  011D9C  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16925  011DA0  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16926  011DA4  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16927  011DA8  0EFF               	movlw	255
 16928  011DAA  6EDF               	movwf	indf2,c
 16929                           
 16930                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 16931  011DAC  0100               	movlb	0	; () banked
 16932  011DAE  EE20 F004          	lfsr	2,4
 16933  011DB2  D7AA               	goto	L11
 16934  011DB4                     
 16935                           ; BSR set to: 0
 16936                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 16937                           
 16938                           ; BSR set to: 0
 16939  011DB4  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16940  011DB8  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16941  011DBC  0E00               	movlw	0
 16942  011DBE  0100               	movlb	0	; () banked
 16943  011DC0  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16944  011DC2  EC2C  F0AD         	call	_Port_CheckPortType	;wreg free
 16945  011DC6  0100               	movlb	0	; () banked
 16946  011DC8  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16947  011DCA  0100               	movlb	0	; () banked
 16948  011DCC  519F               	movf	Port_SetType@Output& (0+255),w,b
 16949  011DCE  A4D8               	btfss	status,2,c
 16950  011DD0  0012               	return	
 16951                           
 16952                           ; BSR set to: 0
 16953                           ;Port.c: 549: {
 16954                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 16955  011DD2  0100               	movlb	0	; () banked
 16956  011DD4  EE20 F002          	lfsr	2,2
 16957  011DD8                     L21:
 16958  011DD8  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16959  011DDA  26D9               	addwf	fsr2l,f,c
 16960  011DDC  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16961  011DDE  22DA               	addwfc	fsr2h,f,c
 16962  011DE0  CFDE F09D          	movff	postinc2,??_Port_SetType
 16963  011DE4  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16964  011DE8  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16965  011DEC  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16966  011DF0  0E00               	movlw	0
 16967  011DF2                     L10:
 16968  011DF2  6EDF               	movwf	indf2,c
 16969                           
 16970                           ;Port.c: 552: }
 16971  011DF4  D00E               	goto	l511
 16972  011DF6                     l509:
 16973                           
 16974                           ; BSR set to: 0
 16975                           
 16976                           ; BSR set to: 0
 16977  011DF6  0100               	movlb	0	; () banked
 16978  011DF8  519C               	movf	Port_SetType@pType& (0+255),w,b
 16979                           
 16980                           ; Switch size 1, requested type "space"
 16981                           ; Number of cases is 4, Range of values is 0 to 3
 16982                           ; switch strategies available:
 16983                           ; Name         Instructions Cycles
 16984                           ; simple_byte           13     7 (average)
 16985                           ;	Chosen strategy is simple_byte
 16986  011DFA  0A00               	xorlw	0	; case 0
 16987  011DFC  B4D8               	btfsc	status,2,c
 16988  011DFE  D781               	goto	l510
 16989  011E00  0A01               	xorlw	1	; case 1
 16990  011E02  B4D8               	btfsc	status,2,c
 16991  011E04  D78F               	goto	l512
 16992  011E06  0A03               	xorlw	3	; case 2
 16993  011E08  B4D8               	btfsc	status,2,c
 16994  011E0A  D7B0               	goto	l516
 16995  011E0C  0A01               	xorlw	1	; case 3
 16996  011E0E  B4D8               	btfsc	status,2,c
 16997  011E10  D7D1               	goto	l519
 16998  011E12                     l511:
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 17002                           
 17003                           ; BSR set to: 0
 17004  011E12  0E08               	movlw	8
 17005  011E14  0100               	movlb	0	; () banked
 17006  011E16  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17007  011E18  0100               	movlb	0	; () banked
 17008  011E1A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17009  011E1C  0E00               	movlw	0
 17010  011E1E  0100               	movlb	0	; () banked
 17011  011E20  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17012  011E22  0100               	movlb	0	; () banked
 17013  011E24  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17014  011E26  0E00               	movlw	0
 17015  011E28  0100               	movlb	0	; () banked
 17016  011E2A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17017  011E2C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17018  011E30  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 17019                           
 17020                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 17021  011E34  0E08               	movlw	8
 17022  011E36  0100               	movlb	0	; () banked
 17023  011E38  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17024  011E3A  0100               	movlb	0	; () banked
 17025  011E3C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17026  011E3E  0E00               	movlw	0
 17027  011E40  0100               	movlb	0	; () banked
 17028  011E42  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17029  011E44  0100               	movlb	0	; () banked
 17030  011E46  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17031  011E48  0E01               	movlw	1
 17032  011E4A  0100               	movlb	0	; () banked
 17033  011E4C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17034  011E4E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17035  011E52  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 17036                           
 17037                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 17038  011E56  0E08               	movlw	8
 17039  011E58  0100               	movlb	0	; () banked
 17040  011E5A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17041  011E5C  0100               	movlb	0	; () banked
 17042  011E5E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17043  011E60  0E00               	movlw	0
 17044  011E62  0100               	movlb	0	; () banked
 17045  011E64  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17046  011E66  0100               	movlb	0	; () banked
 17047  011E68  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17048  011E6A  0E02               	movlw	2
 17049  011E6C  0100               	movlb	0	; () banked
 17050  011E6E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17051  011E70  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17052  011E74  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 17053                           
 17054                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 17055  011E78  0E08               	movlw	8
 17056  011E7A  0100               	movlb	0	; () banked
 17057  011E7C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17058  011E7E  0100               	movlb	0	; () banked
 17059  011E80  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17060  011E82  0E00               	movlw	0
 17061  011E84  0100               	movlb	0	; () banked
 17062  011E86  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17063  011E88  0100               	movlb	0	; () banked
 17064  011E8A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17065  011E8C  0E03               	movlw	3
 17066  011E8E  0100               	movlb	0	; () banked
 17067  011E90  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17068  011E92  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17069  011E96  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 17070                           
 17071                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 17072  011E9A  0E08               	movlw	8
 17073  011E9C  0100               	movlb	0	; () banked
 17074  011E9E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17075  011EA0  0100               	movlb	0	; () banked
 17076  011EA2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17077  011EA4  0E00               	movlw	0
 17078  011EA6  0100               	movlb	0	; () banked
 17079  011EA8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17080  011EAA  0100               	movlb	0	; () banked
 17081  011EAC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17082  011EAE  0E04               	movlw	4
 17083  011EB0  0100               	movlb	0	; () banked
 17084  011EB2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17085  011EB4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17086  011EB8  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 17087                           
 17088                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 17089  011EBC  0E08               	movlw	8
 17090  011EBE  0100               	movlb	0	; () banked
 17091  011EC0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17092  011EC2  0100               	movlb	0	; () banked
 17093  011EC4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17094  011EC6  0E00               	movlw	0
 17095  011EC8  0100               	movlb	0	; () banked
 17096  011ECA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17097  011ECC  0100               	movlb	0	; () banked
 17098  011ECE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17099  011ED0  0E05               	movlw	5
 17100  011ED2  0100               	movlb	0	; () banked
 17101  011ED4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17102  011ED6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17103  011EDA  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 17104                           
 17105                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 17106  011EDE  0E08               	movlw	8
 17107  011EE0  0100               	movlb	0	; () banked
 17108  011EE2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17109  011EE4  0100               	movlb	0	; () banked
 17110  011EE6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17111  011EE8  0E00               	movlw	0
 17112  011EEA  0100               	movlb	0	; () banked
 17113  011EEC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17114  011EEE  0100               	movlb	0	; () banked
 17115  011EF0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17116  011EF2  0E06               	movlw	6
 17117  011EF4  0100               	movlb	0	; () banked
 17118  011EF6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17119  011EF8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17120  011EFC  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 17121                           
 17122                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 17123  011F00  0E08               	movlw	8
 17124  011F02  0100               	movlb	0	; () banked
 17125  011F04  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17126  011F06  0100               	movlb	0	; () banked
 17127  011F08  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17128  011F0A  0E00               	movlw	0
 17129  011F0C  0100               	movlb	0	; () banked
 17130  011F0E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17131  011F10  0100               	movlb	0	; () banked
 17132  011F12  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17133  011F14  0E07               	movlw	7
 17134  011F16  0100               	movlb	0	; () banked
 17135  011F18  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17136  011F1A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17137  011F1E  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 17138  011F22  0012               	return	
 17139  011F24                     __end_of_Port_SetType:
 17140                           	opt stack 0
 17141                           tosu	equ	0xFFF
 17142                           tosh	equ	0xFFE
 17143                           tosl	equ	0xFFD
 17144                           pclath	equ	0xFFA
 17145                           tblptru	equ	0xFF8
 17146                           tblptrh	equ	0xFF7
 17147                           tblptrl	equ	0xFF6
 17148                           tablat	equ	0xFF5
 17149                           prodh	equ	0xFF4
 17150                           prodl	equ	0xFF3
 17151                           intcon	equ	0xFF2
 17152                           postinc0	equ	0xFEE
 17153                           wreg	equ	0xFE8
 17154                           indf1	equ	0xFE7
 17155                           postdec1	equ	0xFE5
 17156                           fsr1h	equ	0xFE2
 17157                           fsr1l	equ	0xFE1
 17158                           indf2	equ	0xFDF
 17159                           postinc2	equ	0xFDE
 17160                           postdec2	equ	0xFDD
 17161                           plusw2	equ	0xFDB
 17162                           fsr2h	equ	0xFDA
 17163                           fsr2l	equ	0xFD9
 17164                           status	equ	0xFD8
 17165                           
 17166 ;; *************** function _Port_CheckPortType *****************
 17167 ;; Defined at:
 17168 ;;		line 138 in file "Library/Port.c"
 17169 ;; Parameters:    Size  Location     Type
 17170 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 17171 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17172 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17173 ;;  pDrive          1   56[BANK0 ] enum E6469
 17174 ;; Auto vars:     Size  Location     Type
 17175 ;;  Output          1   57[BANK0 ] enum E6475
 17176 ;; Return value:  Size  Location     Type
 17177 ;;                  1    wreg      enum E6475
 17178 ;; Registers used:
 17179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17180 ;; Tracked objects:
 17181 ;;		On entry : 0/0
 17182 ;;		On exit  : 0/0
 17183 ;;		Unchanged: 0/0
 17184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17185 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17188 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17189 ;;Total ram usage:        4 bytes
 17190 ;; Hardware stack levels used:    1
 17191 ;; Hardware stack levels required when called:   13
 17192 ;; This function calls:
 17193 ;;		_Port_CheckQuadType
 17194 ;; This function is called by:
 17195 ;;		_Port_SetType
 17196 ;; This function uses a non-reentrant model
 17197 ;;
 17198                           
 17199                           	psect	text77
 17200  015A58                     __ptext77:
 17201                           	opt stack 0
 17202  015A58                     _Port_CheckPortType:
 17203                           	opt stack 14
 17204                           
 17205                           ;Port.c: 140: ePinError Output = ePinErrorState;
 17206                           
 17207                           ;incstack = 0
 17208  015A58  0E05               	movlw	5
 17209  015A5A  0100               	movlb	0	; () banked
 17210  015A5C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 17211                           
 17212                           ; BSR set to: 0
 17213                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 17214  015A5E  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 17215  015A62  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 17216  015A66  0E00               	movlw	0
 17217  015A68  0100               	movlb	0	; () banked
 17218  015A6A  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 17219  015A6C  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 17220  015A70  ECBA  F0AB         	call	_Port_CheckQuadType	;wreg free
 17221  015A74  0100               	movlb	0	; () banked
 17222  015A76  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 17223  015A78  0100               	movlb	0	; () banked
 17224  015A7A  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 17225  015A7C  A4D8               	btfss	status,2,c
 17226  015A7E  D00D               	goto	l397
 17227                           
 17228                           ; BSR set to: 0
 17229                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 17230  015A80  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 17231  015A84  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 17232  015A88  0E01               	movlw	1
 17233  015A8A  0100               	movlb	0	; () banked
 17234  015A8C  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 17235  015A8E  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 17236  015A92  ECBA  F0AB         	call	_Port_CheckQuadType	;wreg free
 17237  015A96  0100               	movlb	0	; () banked
 17238  015A98  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 17239  015A9A                     l397:
 17240                           
 17241                           ; BSR set to: 0
 17242                           ;Port.c: 146: return Output;
 17243                           
 17244                           ; BSR set to: 0
 17245  015A9A  0100               	movlb	0	; () banked
 17246  015A9C  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 17247  015A9E  0012               	return	
 17248  015AA0                     __end_of_Port_CheckPortType:
 17249                           	opt stack 0
 17250                           tosu	equ	0xFFF
 17251                           tosh	equ	0xFFE
 17252                           tosl	equ	0xFFD
 17253                           pclath	equ	0xFFA
 17254                           tblptru	equ	0xFF8
 17255                           tblptrh	equ	0xFF7
 17256                           tblptrl	equ	0xFF6
 17257                           tablat	equ	0xFF5
 17258                           prodh	equ	0xFF4
 17259                           prodl	equ	0xFF3
 17260                           intcon	equ	0xFF2
 17261                           postinc0	equ	0xFEE
 17262                           wreg	equ	0xFE8
 17263                           indf1	equ	0xFE7
 17264                           postdec1	equ	0xFE5
 17265                           fsr1h	equ	0xFE2
 17266                           fsr1l	equ	0xFE1
 17267                           indf2	equ	0xFDF
 17268                           postinc2	equ	0xFDE
 17269                           postdec2	equ	0xFDD
 17270                           plusw2	equ	0xFDB
 17271                           fsr2h	equ	0xFDA
 17272                           fsr2l	equ	0xFD9
 17273                           status	equ	0xFD8
 17274                           
 17275 ;; *************** function _Port_Set *****************
 17276 ;; Defined at:
 17277 ;;		line 570 in file "Library/Port.c"
 17278 ;; Parameters:    Size  Location     Type
 17279 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 17280 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17281 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17282 ;;  pValue          1   17[BANK0 ] unsigned char 
 17283 ;; Auto vars:     Size  Location     Type
 17284 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 17285 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 17286 ;;  Type            1   38[BANK0 ] enum E6795
 17287 ;; Return value:  Size  Location     Type
 17288 ;;                  1    wreg      void 
 17289 ;; Registers used:
 17290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17291 ;; Tracked objects:
 17292 ;;		On entry : 0/0
 17293 ;;		On exit  : 0/0
 17294 ;;		Unchanged: 0/0
 17295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17296 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17297 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17298 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17299 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17300 ;;Total ram usage:       24 bytes
 17301 ;; Hardware stack levels used:    1
 17302 ;; Hardware stack levels required when called:   10
 17303 ;; This function calls:
 17304 ;;		_Byte_SetByte
 17305 ;;		_Word_GetPair
 17306 ;; This function is called by:
 17307 ;;		_Port_Init
 17308 ;;		_Port_Toggle
 17309 ;; This function uses a non-reentrant model
 17310 ;;
 17311                           
 17312                           	psect	text78
 17313  011466                     __ptext78:
 17314                           	opt stack 0
 17315  011466                     _Port_Set:
 17316                           	opt stack 17
 17317                           
 17318                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 17319                           
 17320                           ; BSR set to: 0
 17321                           ;incstack = 0
 17322  011466  0E08               	movlw	8
 17323  011468  0100               	movlb	0	; () banked
 17324  01146A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17325  01146C  0100               	movlb	0	; () banked
 17326  01146E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17327  011470  0E00               	movlw	0
 17328  011472  0100               	movlb	0	; () banked
 17329  011474  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17330  011476  0100               	movlb	0	; () banked
 17331  011478  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17332  01147A  0E00               	movlw	0
 17333  01147C  0100               	movlb	0	; () banked
 17334  01147E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17335  011480  EC04  F0AF         	call	_Word_GetPair	;wreg free
 17336  011484  0100               	movlb	0	; () banked
 17337  011486  6F86               	movwf	Port_Set@Type& (0+255),b
 17338                           
 17339                           ; BSR set to: 0
 17340                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 17341  011488  0100               	movlb	0	; () banked
 17342  01148A  5186               	movf	Port_Set@Type& (0+255),w,b
 17343  01148C  0100               	movlb	0	; () banked
 17344  01148E  6F72               	movwf	??_Port_Set& (0+255),b
 17345  011490  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17346  011492  0E0E               	movlw	14
 17347  011494                     u9445:
 17348  011494  90D8               	bcf	status,0,c
 17349  011496  0100               	movlb	0	; () banked
 17350  011498  3772               	rlcf	??_Port_Set& (0+255),f,b
 17351  01149A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17352  01149C  2EE8               	decfsz	wreg,f,c
 17353  01149E  D7FA               	goto	u9445
 17354  0114A0  0100               	movlb	0	; () banked
 17355  0114A2  5186               	movf	Port_Set@Type& (0+255),w,b
 17356  0114A4  0100               	movlb	0	; () banked
 17357  0114A6  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 17358  0114A8  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 17359  0114AA  0E0C               	movlw	12
 17360  0114AC                     u9455:
 17361  0114AC  90D8               	bcf	status,0,c
 17362  0114AE  0100               	movlb	0	; () banked
 17363  0114B0  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 17364  0114B2  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 17365  0114B4  2EE8               	decfsz	wreg,f,c
 17366  0114B6  D7FA               	goto	u9455
 17367  0114B8  0100               	movlb	0	; () banked
 17368  0114BA  5186               	movf	Port_Set@Type& (0+255),w,b
 17369  0114BC  0100               	movlb	0	; () banked
 17370  0114BE  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 17371  0114C0  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 17372  0114C2  0E0A               	movlw	10
 17373  0114C4                     u9465:
 17374  0114C4  90D8               	bcf	status,0,c
 17375  0114C6  0100               	movlb	0	; () banked
 17376  0114C8  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 17377  0114CA  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 17378  0114CC  2EE8               	decfsz	wreg,f,c
 17379  0114CE  D7FA               	goto	u9465
 17380  0114D0  0100               	movlb	0	; () banked
 17381  0114D2  5186               	movf	Port_Set@Type& (0+255),w,b
 17382  0114D4  0100               	movlb	0	; () banked
 17383  0114D6  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 17384  0114D8  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 17385  0114DA  0100               	movlb	0	; () banked
 17386  0114DC  5186               	movf	Port_Set@Type& (0+255),w,b
 17387  0114DE  0100               	movlb	0	; () banked
 17388  0114E0  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 17389  0114E2  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 17390  0114E4  0E06               	movlw	6
 17391  0114E6                     u9475:
 17392  0114E6  90D8               	bcf	status,0,c
 17393  0114E8  0100               	movlb	0	; () banked
 17394  0114EA  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 17395  0114EC  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 17396  0114EE  2EE8               	decfsz	wreg,f,c
 17397  0114F0  D7FA               	goto	u9475
 17398  0114F2  0100               	movlb	0	; () banked
 17399  0114F4  5186               	movf	Port_Set@Type& (0+255),w,b
 17400  0114F6  0100               	movlb	0	; () banked
 17401  0114F8  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 17402  0114FA  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 17403  0114FC  0100               	movlb	0	; () banked
 17404  0114FE  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 17405  011500  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 17406  011502  0EF0               	movlw	240
 17407  011504  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 17408  011506  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 17409  011508  0B0F               	andlw	15
 17410  01150A  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 17411  01150C  0EF0               	movlw	240
 17412  01150E  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 17413  011510  0100               	movlb	0	; () banked
 17414  011512  5186               	movf	Port_Set@Type& (0+255),w,b
 17415  011514  0100               	movlb	0	; () banked
 17416  011516  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 17417  011518  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 17418  01151A  0100               	movlb	0	; () banked
 17419  01151C  90D8               	bcf	status,0,c
 17420  01151E  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 17421  011520  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 17422  011522  0100               	movlb	0	; () banked
 17423  011524  90D8               	bcf	status,0,c
 17424  011526  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 17425  011528  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 17426  01152A  0100               	movlb	0	; () banked
 17427  01152C  5186               	movf	Port_Set@Type& (0+255),w,b
 17428  01152E  0100               	movlb	0	; () banked
 17429  011530  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 17430  011532  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 17431  011534  0100               	movlb	0	; () banked
 17432  011536  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 17433  011538  0100               	movlb	0	; () banked
 17434  01153A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17435  01153C  0100               	movlb	0	; () banked
 17436  01153E  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 17437  011540  0100               	movlb	0	; () banked
 17438  011542  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17439  011544  0100               	movlb	0	; () banked
 17440  011546  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 17441  011548  0100               	movlb	0	; () banked
 17442  01154A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17443  01154C  0100               	movlb	0	; () banked
 17444  01154E  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 17445  011550  0100               	movlb	0	; () banked
 17446  011552  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17447  011554  0100               	movlb	0	; () banked
 17448  011556  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 17449  011558  0100               	movlb	0	; () banked
 17450  01155A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17451  01155C  0100               	movlb	0	; () banked
 17452  01155E  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 17453  011560  0100               	movlb	0	; () banked
 17454  011562  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17455  011564  0100               	movlb	0	; () banked
 17456  011566  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 17457  011568  0100               	movlb	0	; () banked
 17458  01156A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17459  01156C  0100               	movlb	0	; () banked
 17460  01156E  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 17461  011570  0100               	movlb	0	; () banked
 17462  011572  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17463  011574  0100               	movlb	0	; () banked
 17464  011576  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 17465  011578  0100               	movlb	0	; () banked
 17466  01157A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17467  01157C  0100               	movlb	0	; () banked
 17468  01157E  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 17469  011580  0100               	movlb	0	; () banked
 17470  011582  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17471  011584  0100               	movlb	0	; () banked
 17472  011586  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 17473  011588  0100               	movlb	0	; () banked
 17474  01158A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17475  01158C  0100               	movlb	0	; () banked
 17476  01158E  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 17477  011590  0100               	movlb	0	; () banked
 17478  011592  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17479  011594  0100               	movlb	0	; () banked
 17480  011596  5172               	movf	??_Port_Set& (0+255),w,b
 17481  011598  0100               	movlb	0	; () banked
 17482  01159A  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 17483  01159C  0100               	movlb	0	; () banked
 17484  01159E  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 17485  0115A0  0100               	movlb	0	; () banked
 17486  0115A2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17487  0115A4  0100               	movlb	0	; () banked
 17488  0115A6  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 17489  0115A8  0100               	movlb	0	; () banked
 17490  0115AA  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 17491                           
 17492                           ; BSR set to: 0
 17493                           ;Port.c: 574: UINT16 TypeActual = Type;
 17494  0115AC  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 17495  0115B0  0100               	movlb	0	; () banked
 17496  0115B2  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 17497                           
 17498                           ; BSR set to: 0
 17499                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 17500  0115B4  0E08               	movlw	8
 17501  0115B6  0100               	movlb	0	; () banked
 17502  0115B8  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17503  0115BA  0100               	movlb	0	; () banked
 17504  0115BC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17505  0115BE  0E00               	movlw	0
 17506  0115C0  0100               	movlb	0	; () banked
 17507  0115C2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17508  0115C4  0100               	movlb	0	; () banked
 17509  0115C6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17510  0115C8  0E01               	movlw	1
 17511  0115CA  0100               	movlb	0	; () banked
 17512  0115CC  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17513  0115CE  EC04  F0AF         	call	_Word_GetPair	;wreg free
 17514  0115D2  0100               	movlb	0	; () banked
 17515  0115D4  6F72               	movwf	??_Port_Set& (0+255),b
 17516  0115D6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17517  0115D8  0100               	movlb	0	; () banked
 17518  0115DA  90D8               	bcf	status,0,c
 17519  0115DC  3772               	rlcf	??_Port_Set& (0+255),f,b
 17520  0115DE  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17521  0115E0  0100               	movlb	0	; () banked
 17522  0115E2  90D8               	bcf	status,0,c
 17523  0115E4  3772               	rlcf	??_Port_Set& (0+255),f,b
 17524  0115E6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17525  0115E8  0100               	movlb	0	; () banked
 17526  0115EA  5172               	movf	??_Port_Set& (0+255),w,b
 17527  0115EC  0100               	movlb	0	; () banked
 17528  0115EE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17529  0115F0  0100               	movlb	0	; () banked
 17530  0115F2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17531  0115F4  0100               	movlb	0	; () banked
 17532  0115F6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17533                           
 17534                           ; BSR set to: 0
 17535                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 17536  0115F8  0E08               	movlw	8
 17537  0115FA  0100               	movlb	0	; () banked
 17538  0115FC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17539  0115FE  0100               	movlb	0	; () banked
 17540  011600  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17541  011602  0E00               	movlw	0
 17542  011604  0100               	movlb	0	; () banked
 17543  011606  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17544  011608  0100               	movlb	0	; () banked
 17545  01160A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17546  01160C  0E02               	movlw	2
 17547  01160E  0100               	movlb	0	; () banked
 17548  011610  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17549  011612  EC04  F0AF         	call	_Word_GetPair	;wreg free
 17550  011616  0100               	movlb	0	; () banked
 17551  011618  6F72               	movwf	??_Port_Set& (0+255),b
 17552  01161A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17553  01161C  0100               	movlb	0	; () banked
 17554  01161E  3B72               	swapf	??_Port_Set& (0+255),f,b
 17555  011620  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 17556  011622  0EF0               	movlw	240
 17557  011624  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 17558  011626  5172               	movf	??_Port_Set& (0+255),w,b
 17559  011628  0B0F               	andlw	15
 17560  01162A  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 17561  01162C  0EF0               	movlw	240
 17562  01162E  1772               	andwf	??_Port_Set& (0+255),f,b
 17563  011630  0100               	movlb	0	; () banked
 17564  011632  5172               	movf	??_Port_Set& (0+255),w,b
 17565  011634  0100               	movlb	0	; () banked
 17566  011636  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17567  011638  0100               	movlb	0	; () banked
 17568  01163A  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17569  01163C  0100               	movlb	0	; () banked
 17570  01163E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17571                           
 17572                           ; BSR set to: 0
 17573                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 17574  011640  0E08               	movlw	8
 17575  011642  0100               	movlb	0	; () banked
 17576  011644  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17577  011646  0100               	movlb	0	; () banked
 17578  011648  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17579  01164A  0E00               	movlw	0
 17580  01164C  0100               	movlb	0	; () banked
 17581  01164E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17582  011650  0100               	movlb	0	; () banked
 17583  011652  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17584  011654  0E03               	movlw	3
 17585  011656  0100               	movlb	0	; () banked
 17586  011658  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17587  01165A  EC04  F0AF         	call	_Word_GetPair	;wreg free
 17588  01165E  0100               	movlb	0	; () banked
 17589  011660  6F72               	movwf	??_Port_Set& (0+255),b
 17590  011662  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17591  011664  0E06               	movlw	6
 17592  011666                     u9485:
 17593  011666  90D8               	bcf	status,0,c
 17594  011668  0100               	movlb	0	; () banked
 17595  01166A  3772               	rlcf	??_Port_Set& (0+255),f,b
 17596  01166C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17597  01166E  2EE8               	decfsz	wreg,f,c
 17598  011670  D7FA               	goto	u9485
 17599  011672  0100               	movlb	0	; () banked
 17600  011674  5172               	movf	??_Port_Set& (0+255),w,b
 17601  011676  0100               	movlb	0	; () banked
 17602  011678  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17603  01167A  0100               	movlb	0	; () banked
 17604  01167C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17605  01167E  0100               	movlb	0	; () banked
 17606  011680  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 17610  011682  0E08               	movlw	8
 17611  011684  0100               	movlb	0	; () banked
 17612  011686  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17613  011688  0100               	movlb	0	; () banked
 17614  01168A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17615  01168C  0E00               	movlw	0
 17616  01168E  0100               	movlb	0	; () banked
 17617  011690  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17618  011692  0100               	movlb	0	; () banked
 17619  011694  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17620  011696  0E04               	movlw	4
 17621  011698  0100               	movlb	0	; () banked
 17622  01169A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17623  01169C  EC04  F0AF         	call	_Word_GetPair	;wreg free
 17624  0116A0  0100               	movlb	0	; () banked
 17625  0116A2  6F72               	movwf	??_Port_Set& (0+255),b
 17626  0116A4  0100               	movlb	0	; () banked
 17627  0116A6  5172               	movf	??_Port_Set& (0+255),w,b
 17628  0116A8  0100               	movlb	0	; () banked
 17629  0116AA  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 17630  0116AC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17631  0116AE  0100               	movlb	0	; () banked
 17632  0116B0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17633  0116B2  0100               	movlb	0	; () banked
 17634  0116B4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17635  0116B6  0100               	movlb	0	; () banked
 17636  0116B8  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 17637  0116BA  0100               	movlb	0	; () banked
 17638  0116BC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17639                           
 17640                           ; BSR set to: 0
 17641                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 17642  0116BE  0E08               	movlw	8
 17643  0116C0  0100               	movlb	0	; () banked
 17644  0116C2  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17645  0116C4  0100               	movlb	0	; () banked
 17646  0116C6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17647  0116C8  0E00               	movlw	0
 17648  0116CA  0100               	movlb	0	; () banked
 17649  0116CC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17650  0116CE  0100               	movlb	0	; () banked
 17651  0116D0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17652  0116D2  0E05               	movlw	5
 17653  0116D4  0100               	movlb	0	; () banked
 17654  0116D6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17655  0116D8  EC04  F0AF         	call	_Word_GetPair	;wreg free
 17656  0116DC  0100               	movlb	0	; () banked
 17657  0116DE  6F72               	movwf	??_Port_Set& (0+255),b
 17658  0116E0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17659  0116E2  0E0A               	movlw	10
 17660  0116E4                     u9495:
 17661  0116E4  90D8               	bcf	status,0,c
 17662  0116E6  0100               	movlb	0	; () banked
 17663  0116E8  3772               	rlcf	??_Port_Set& (0+255),f,b
 17664  0116EA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17665  0116EC  2EE8               	decfsz	wreg,f,c
 17666  0116EE  D7FA               	goto	u9495
 17667  0116F0  0100               	movlb	0	; () banked
 17668  0116F2  5172               	movf	??_Port_Set& (0+255),w,b
 17669  0116F4  0100               	movlb	0	; () banked
 17670  0116F6  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17671  0116F8  0100               	movlb	0	; () banked
 17672  0116FA  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17673  0116FC  0100               	movlb	0	; () banked
 17674  0116FE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17675                           
 17676                           ; BSR set to: 0
 17677                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 17678  011700  0E08               	movlw	8
 17679  011702  0100               	movlb	0	; () banked
 17680  011704  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17681  011706  0100               	movlb	0	; () banked
 17682  011708  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17683  01170A  0E00               	movlw	0
 17684  01170C  0100               	movlb	0	; () banked
 17685  01170E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17686  011710  0100               	movlb	0	; () banked
 17687  011712  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17688  011714  0E06               	movlw	6
 17689  011716  0100               	movlb	0	; () banked
 17690  011718  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17691  01171A  EC04  F0AF         	call	_Word_GetPair	;wreg free
 17692  01171E  0100               	movlb	0	; () banked
 17693  011720  6F72               	movwf	??_Port_Set& (0+255),b
 17694  011722  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17695  011724  0E0C               	movlw	12
 17696  011726                     u9505:
 17697  011726  90D8               	bcf	status,0,c
 17698  011728  0100               	movlb	0	; () banked
 17699  01172A  3772               	rlcf	??_Port_Set& (0+255),f,b
 17700  01172C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17701  01172E  2EE8               	decfsz	wreg,f,c
 17702  011730  D7FA               	goto	u9505
 17703  011732  0100               	movlb	0	; () banked
 17704  011734  5172               	movf	??_Port_Set& (0+255),w,b
 17705  011736  0100               	movlb	0	; () banked
 17706  011738  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17707  01173A  0100               	movlb	0	; () banked
 17708  01173C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17709  01173E  0100               	movlb	0	; () banked
 17710  011740  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17711                           
 17712                           ; BSR set to: 0
 17713                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 17714  011742  0E08               	movlw	8
 17715  011744  0100               	movlb	0	; () banked
 17716  011746  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17717  011748  0100               	movlb	0	; () banked
 17718  01174A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17719  01174C  0E00               	movlw	0
 17720  01174E  0100               	movlb	0	; () banked
 17721  011750  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17722  011752  0100               	movlb	0	; () banked
 17723  011754  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17724  011756  0E07               	movlw	7
 17725  011758  0100               	movlb	0	; () banked
 17726  01175A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17727  01175C  EC04  F0AF         	call	_Word_GetPair	;wreg free
 17728  011760  0100               	movlb	0	; () banked
 17729  011762  6F72               	movwf	??_Port_Set& (0+255),b
 17730  011764  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17731  011766  0E0E               	movlw	14
 17732  011768                     u9515:
 17733  011768  90D8               	bcf	status,0,c
 17734  01176A  0100               	movlb	0	; () banked
 17735  01176C  3772               	rlcf	??_Port_Set& (0+255),f,b
 17736  01176E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17737  011770  2EE8               	decfsz	wreg,f,c
 17738  011772  D7FA               	goto	u9515
 17739  011774  0100               	movlb	0	; () banked
 17740  011776  5172               	movf	??_Port_Set& (0+255),w,b
 17741  011778  0100               	movlb	0	; () banked
 17742  01177A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17743  01177C  0100               	movlb	0	; () banked
 17744  01177E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17745  011780  0100               	movlb	0	; () banked
 17746  011782  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17747                           
 17748                           ;Port.c: 584: if (TypeRequired == TypeActual)
 17749  011784  0100               	movlb	0	; () banked
 17750  011786  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 17751  011788  0100               	movlb	0	; () banked
 17752  01178A  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 17753  01178C  E148               	bnz	l528
 17754  01178E  0100               	movlb	0	; () banked
 17755  011790  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 17756  011792  0100               	movlb	0	; () banked
 17757  011794  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 17758  011796  A4D8               	btfss	status,2,c
 17759  011798  0012               	return	
 17760  01179A  D032               	goto	l526
 17761  01179C                     
 17762                           ; BSR set to: 0
 17763                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 17764                           
 17765                           ; BSR set to: 0
 17766  01179C  0100               	movlb	0	; () banked
 17767  01179E  EE20 F002          	lfsr	2,2
 17768  0117A2  516F               	movf	Port_Set@pInput& (0+255),w,b
 17769  0117A4  26D9               	addwf	fsr2l,f,c
 17770  0117A6  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17771  0117A8  22DA               	addwfc	fsr2h,f,c
 17772  0117AA  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17773  0117AE  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17774  0117B2  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17775  0117B6  EC56  F0B2         	call	_Byte_SetByte	;wreg free
 17776                           
 17777                           ;Port.c: 594: break;
 17778  0117BA  0012               	return	
 17779  0117BC                     
 17780                           ;Port.c: 597: pValue = ~pValue;
 17781  0117BC  0100               	movlb	0	; () banked
 17782  0117BE  1F71               	comf	Port_Set@pValue& (0+255),f,b
 17783                           
 17784                           ; BSR set to: 0
 17785                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 17786  0117C0  0100               	movlb	0	; () banked
 17787  0117C2  EE20 F002          	lfsr	2,2
 17788  0117C6  516F               	movf	Port_Set@pInput& (0+255),w,b
 17789  0117C8  26D9               	addwf	fsr2l,f,c
 17790  0117CA  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17791  0117CC  22DA               	addwfc	fsr2h,f,c
 17792  0117CE  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17793  0117D2  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17794  0117D6  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17795  0117DA  EC56  F0B2         	call	_Byte_SetByte	;wreg free
 17796                           
 17797                           ;Port.c: 599: break;
 17798  0117DE  0012               	return	
 17799  0117E0                     
 17800                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 17801  0117E0  0100               	movlb	0	; () banked
 17802  0117E2  EE20 F004          	lfsr	2,4
 17803  0117E6  516F               	movf	Port_Set@pInput& (0+255),w,b
 17804  0117E8  26D9               	addwf	fsr2l,f,c
 17805  0117EA  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17806  0117EC  22DA               	addwfc	fsr2h,f,c
 17807  0117EE  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17808  0117F2  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17809  0117F6  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17810  0117FA  EC56  F0B2         	call	_Byte_SetByte	;wreg free
 17811                           
 17812                           ;Port.c: 606: }
 17813                           
 17814                           ;Port.c: 605: break;
 17815                           
 17816                           ;Port.c: 604: default:
 17817                           
 17818                           ;Port.c: 603: break;
 17819  0117FE  0012               	return	
 17820  011800                     l526:
 17821  011800  0100               	movlb	0	; () banked
 17822  011802  5186               	movf	Port_Set@Type& (0+255),w,b
 17823                           
 17824                           ; Switch size 1, requested type "space"
 17825                           ; Number of cases is 4, Range of values is 0 to 3
 17826                           ; switch strategies available:
 17827                           ; Name         Instructions Cycles
 17828                           ; simple_byte           13     7 (average)
 17829                           ;	Chosen strategy is simple_byte
 17830  011804  0A00               	xorlw	0	; case 0
 17831  011806  B4D8               	btfsc	status,2,c
 17832  011808  0012               	return	
 17833  01180A  0A01               	xorlw	1	; case 1
 17834  01180C  B4D8               	btfsc	status,2,c
 17835  01180E  D7C6               	goto	l529
 17836  011810  0A03               	xorlw	3	; case 2
 17837  011812  B4D8               	btfsc	status,2,c
 17838  011814  D7D3               	goto	l531
 17839  011816  0A01               	xorlw	1	; case 3
 17840  011818  A4D8               	btfss	status,2,c
 17841                           
 17842                           ; BSR set to: 0
 17843                           
 17844                           ; BSR set to: 0
 17845                           ;Port.c: 607: }
 17846  01181A  0012               	return	
 17847  01181C  D7E1               	goto	l532
 17848  01181E                     l528:
 17849  01181E  0012               	return		;funcret
 17850  011820                     __end_of_Port_Set:
 17851                           	opt stack 0
 17852                           tosu	equ	0xFFF
 17853                           tosh	equ	0xFFE
 17854                           tosl	equ	0xFFD
 17855                           pclath	equ	0xFFA
 17856                           tblptru	equ	0xFF8
 17857                           tblptrh	equ	0xFF7
 17858                           tblptrl	equ	0xFF6
 17859                           tablat	equ	0xFF5
 17860                           prodh	equ	0xFF4
 17861                           prodl	equ	0xFF3
 17862                           intcon	equ	0xFF2
 17863                           postinc0	equ	0xFEE
 17864                           wreg	equ	0xFE8
 17865                           indf1	equ	0xFE7
 17866                           postdec1	equ	0xFE5
 17867                           fsr1h	equ	0xFE2
 17868                           fsr1l	equ	0xFE1
 17869                           indf2	equ	0xFDF
 17870                           postinc2	equ	0xFDE
 17871                           postdec2	equ	0xFDD
 17872                           plusw2	equ	0xFDB
 17873                           fsr2h	equ	0xFDA
 17874                           fsr2l	equ	0xFD9
 17875                           status	equ	0xFD8
 17876                           
 17877 ;; *************** function _Byte_SetByte *****************
 17878 ;; Defined at:
 17879 ;;		line 110 in file "Library/Types.c"
 17880 ;; Parameters:    Size  Location     Type
 17881 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17882 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 17883 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17884 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17885 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17886 ;;		 -> NULL(0), 
 17887 ;;  pValue          1    2[BANK0 ] unsigned char 
 17888 ;; Auto vars:     Size  Location     Type
 17889 ;;		None
 17890 ;; Return value:  Size  Location     Type
 17891 ;;                  1    wreg      void 
 17892 ;; Registers used:
 17893 ;;		fsr2l, fsr2h
 17894 ;; Tracked objects:
 17895 ;;		On entry : 0/0
 17896 ;;		On exit  : 0/0
 17897 ;;		Unchanged: 0/0
 17898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17899 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17903 ;;Total ram usage:        3 bytes
 17904 ;; Hardware stack levels used:    1
 17905 ;; Hardware stack levels required when called:    7
 17906 ;; This function calls:
 17907 ;;		Nothing
 17908 ;; This function is called by:
 17909 ;;		_Port_Set
 17910 ;;		_I2C_Init
 17911 ;; This function uses a non-reentrant model
 17912 ;;
 17913                           
 17914                           	psect	text79
 17915  0164AC                     __ptext79:
 17916                           	opt stack 0
 17917  0164AC                     _Byte_SetByte:
 17918                           	opt stack 19
 17919                           
 17920                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 17921                           
 17922                           ;incstack = 0
 17923  0164AC  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 17924  0164B0  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 17925  0164B4  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 17926  0164B8  0012               	return		;funcret
 17927  0164BA                     __end_of_Byte_SetByte:
 17928                           	opt stack 0
 17929                           tosu	equ	0xFFF
 17930                           tosh	equ	0xFFE
 17931                           tosl	equ	0xFFD
 17932                           pclath	equ	0xFFA
 17933                           tblptru	equ	0xFF8
 17934                           tblptrh	equ	0xFF7
 17935                           tblptrl	equ	0xFF6
 17936                           tablat	equ	0xFF5
 17937                           prodh	equ	0xFF4
 17938                           prodl	equ	0xFF3
 17939                           intcon	equ	0xFF2
 17940                           postinc0	equ	0xFEE
 17941                           wreg	equ	0xFE8
 17942                           indf1	equ	0xFE7
 17943                           postdec1	equ	0xFE5
 17944                           fsr1h	equ	0xFE2
 17945                           fsr1l	equ	0xFE1
 17946                           indf2	equ	0xFDF
 17947                           postinc2	equ	0xFDE
 17948                           postdec2	equ	0xFDD
 17949                           plusw2	equ	0xFDB
 17950                           fsr2h	equ	0xFDA
 17951                           fsr2l	equ	0xFD9
 17952                           status	equ	0xFD8
 17953                           
 17954 ;; *************** function _GetPortTRIS *****************
 17955 ;; Defined at:
 17956 ;;		line 67 in file "Library/Port.c"
 17957 ;; Parameters:    Size  Location     Type
 17958 ;;  pInput          1    wreg     enum E6786
 17959 ;; Auto vars:     Size  Location     Type
 17960 ;;  pInput          1    2[BANK0 ] enum E6786
 17961 ;; Return value:  Size  Location     Type
 17962 ;;                  2    0[BANK0 ] PTR struct Byte
 17963 ;; Registers used:
 17964 ;;		wreg, status,2, status,0
 17965 ;; Tracked objects:
 17966 ;;		On entry : 0/0
 17967 ;;		On exit  : 0/0
 17968 ;;		Unchanged: 0/0
 17969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17970 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17973 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17974 ;;Total ram usage:        3 bytes
 17975 ;; Hardware stack levels used:    1
 17976 ;; Hardware stack levels required when called:    7
 17977 ;; This function calls:
 17978 ;;		Nothing
 17979 ;; This function is called by:
 17980 ;;		_Port_Init
 17981 ;; This function uses a non-reentrant model
 17982 ;;
 17983                           
 17984                           	psect	text80
 17985  014656                     __ptext80:
 17986                           	opt stack 0
 17987  014656                     _GetPortTRIS:
 17988                           	opt stack 20
 17989                           
 17990                           ;incstack = 0
 17991                           ;GetPortTRIS@pInput stored from wreg
 17992  014656  0100               	movlb	0	; () banked
 17993  014658  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 17994                           
 17995                           ;Port.c: 69: switch (pInput)
 17996  01465A  D038               	goto	l363
 17997  01465C                     
 17998                           ;Port.c: 72: return (BytePtr)&TRISA;
 17999  01465C  0E92               	movlw	146
 18000  01465E  0100               	movlb	0	; () banked
 18001  014660  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18002  014662  0E0F               	movlw	15
 18003  014664  0100               	movlb	0	; () banked
 18004  014666  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18005                           
 18006                           ; BSR set to: 0
 18007  014668  0012               	return	
 18008  01466A                     
 18009                           ; BSR set to: 0
 18010                           ;Port.c: 74: return (BytePtr)&TRISB;
 18011                           
 18012                           ; BSR set to: 0
 18013  01466A  0E93               	movlw	147
 18014  01466C  0100               	movlb	0	; () banked
 18015  01466E  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18016  014670  0E0F               	movlw	15
 18017  014672  0100               	movlb	0	; () banked
 18018  014674  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18019                           
 18020                           ; BSR set to: 0
 18021  014676  0012               	return	
 18022  014678                     
 18023                           ; BSR set to: 0
 18024                           ;Port.c: 76: return (BytePtr)&TRISC;
 18025                           
 18026                           ; BSR set to: 0
 18027  014678  0E94               	movlw	148
 18028  01467A  0100               	movlb	0	; () banked
 18029  01467C  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18030  01467E  0E0F               	movlw	15
 18031  014680  0100               	movlb	0	; () banked
 18032  014682  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18033                           
 18034                           ; BSR set to: 0
 18035  014684  0012               	return	
 18036  014686                     
 18037                           ; BSR set to: 0
 18038                           ;Port.c: 78: return (BytePtr)&TRISD;
 18039                           
 18040                           ; BSR set to: 0
 18041  014686  0E95               	movlw	149
 18042  014688  0100               	movlb	0	; () banked
 18043  01468A  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18044  01468C  0E0F               	movlw	15
 18045  01468E  0100               	movlb	0	; () banked
 18046  014690  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18047                           
 18048                           ; BSR set to: 0
 18049  014692  0012               	return	
 18050  014694                     
 18051                           ; BSR set to: 0
 18052                           ;Port.c: 80: return (BytePtr)&TRISE;
 18053                           
 18054                           ; BSR set to: 0
 18055  014694  0E96               	movlw	150
 18056  014696  0100               	movlb	0	; () banked
 18057  014698  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18058  01469A  0E0F               	movlw	15
 18059  01469C  0100               	movlb	0	; () banked
 18060  01469E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18061                           
 18062                           ; BSR set to: 0
 18063  0146A0  0012               	return	
 18064  0146A2                     
 18065                           ; BSR set to: 0
 18066                           ;Port.c: 82: return (BytePtr)&TRISF;
 18067                           
 18068                           ; BSR set to: 0
 18069  0146A2  0E97               	movlw	151
 18070  0146A4  0100               	movlb	0	; () banked
 18071  0146A6  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18072  0146A8  0E0F               	movlw	15
 18073  0146AA  0100               	movlb	0	; () banked
 18074  0146AC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18075                           
 18076                           ; BSR set to: 0
 18077  0146AE  0012               	return	
 18078  0146B0                     
 18079                           ; BSR set to: 0
 18080                           ;Port.c: 84: return (BytePtr)&TRISG;
 18081                           
 18082                           ; BSR set to: 0
 18083  0146B0  0E98               	movlw	152
 18084  0146B2  0100               	movlb	0	; () banked
 18085  0146B4  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18086  0146B6  0E0F               	movlw	15
 18087  0146B8  0100               	movlb	0	; () banked
 18088  0146BA  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18089                           
 18090                           ; BSR set to: 0
 18091  0146BC  0012               	return	
 18092  0146BE                     
 18093                           ; BSR set to: 0
 18094                           ;Port.c: 86: return (void*)0;
 18095                           
 18096                           ; BSR set to: 0
 18097  0146BE  0E00               	movlw	0
 18098  0146C0  0100               	movlb	0	; () banked
 18099  0146C2  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18100  0146C4  0E00               	movlw	0
 18101  0146C6  0100               	movlb	0	; () banked
 18102  0146C8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;Port.c: 87: }
 18106                           
 18107                           ; BSR set to: 0
 18108  0146CA  0012               	return	
 18109  0146CC                     l363:
 18110                           
 18111                           ; BSR set to: 0
 18112  0146CC  0100               	movlb	0	; () banked
 18113  0146CE  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 18114                           
 18115                           ; Switch size 1, requested type "space"
 18116                           ; Number of cases is 7, Range of values is 0 to 6
 18117                           ; switch strategies available:
 18118                           ; Name         Instructions Cycles
 18119                           ; simple_byte           22    12 (average)
 18120                           ;	Chosen strategy is simple_byte
 18121  0146D0  0A00               	xorlw	0	; case 0
 18122  0146D2  B4D8               	btfsc	status,2,c
 18123  0146D4  D7C3               	goto	l364
 18124  0146D6  0A01               	xorlw	1	; case 1
 18125  0146D8  B4D8               	btfsc	status,2,c
 18126  0146DA  D7C7               	goto	l366
 18127  0146DC  0A03               	xorlw	3	; case 2
 18128  0146DE  B4D8               	btfsc	status,2,c
 18129  0146E0  D7CB               	goto	l367
 18130  0146E2  0A01               	xorlw	1	; case 3
 18131  0146E4  B4D8               	btfsc	status,2,c
 18132  0146E6  D7CF               	goto	l368
 18133  0146E8  0A07               	xorlw	7	; case 4
 18134  0146EA  B4D8               	btfsc	status,2,c
 18135  0146EC  D7D3               	goto	l369
 18136  0146EE  0A01               	xorlw	1	; case 5
 18137  0146F0  B4D8               	btfsc	status,2,c
 18138  0146F2  D7D7               	goto	l370
 18139  0146F4  0A03               	xorlw	3	; case 6
 18140  0146F6  B4D8               	btfsc	status,2,c
 18141  0146F8  D7DB               	goto	l371
 18142  0146FA  D7E1               	goto	l372
 18143  0146FC                     __end_of_GetPortTRIS:
 18144                           	opt stack 0
 18145                           tosu	equ	0xFFF
 18146                           tosh	equ	0xFFE
 18147                           tosl	equ	0xFFD
 18148                           pclath	equ	0xFFA
 18149                           tblptru	equ	0xFF8
 18150                           tblptrh	equ	0xFF7
 18151                           tblptrl	equ	0xFF6
 18152                           tablat	equ	0xFF5
 18153                           prodh	equ	0xFF4
 18154                           prodl	equ	0xFF3
 18155                           intcon	equ	0xFF2
 18156                           postinc0	equ	0xFEE
 18157                           wreg	equ	0xFE8
 18158                           indf1	equ	0xFE7
 18159                           postdec1	equ	0xFE5
 18160                           fsr1h	equ	0xFE2
 18161                           fsr1l	equ	0xFE1
 18162                           indf2	equ	0xFDF
 18163                           postinc2	equ	0xFDE
 18164                           postdec2	equ	0xFDD
 18165                           plusw2	equ	0xFDB
 18166                           fsr2h	equ	0xFDA
 18167                           fsr2l	equ	0xFD9
 18168                           status	equ	0xFD8
 18169                           
 18170 ;; *************** function _GetPortProperties *****************
 18171 ;; Defined at:
 18172 ;;		line 21 in file "Library/Port.c"
 18173 ;; Parameters:    Size  Location     Type
 18174 ;;  pInput          1    wreg     enum E6786
 18175 ;; Auto vars:     Size  Location     Type
 18176 ;;  pInput          1    2[BANK0 ] enum E6786
 18177 ;; Return value:  Size  Location     Type
 18178 ;;                  2    0[BANK0 ] PTR struct PortProperty
 18179 ;; Registers used:
 18180 ;;		wreg, status,2, status,0
 18181 ;; Tracked objects:
 18182 ;;		On entry : 0/0
 18183 ;;		On exit  : 0/0
 18184 ;;		Unchanged: 0/0
 18185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18186 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18189 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18190 ;;Total ram usage:        3 bytes
 18191 ;; Hardware stack levels used:    1
 18192 ;; Hardware stack levels required when called:    7
 18193 ;; This function calls:
 18194 ;;		Nothing
 18195 ;; This function is called by:
 18196 ;;		_Port_Init
 18197 ;; This function uses a non-reentrant model
 18198 ;;
 18199                           
 18200                           	psect	text81
 18201  0146FC                     __ptext81:
 18202                           	opt stack 0
 18203  0146FC                     _GetPortProperties:
 18204                           	opt stack 20
 18205                           
 18206                           ; BSR set to: 0
 18207                           ;incstack = 0
 18208                           ;GetPortProperties@pInput stored from wreg
 18209  0146FC  0100               	movlb	0	; () banked
 18210  0146FE  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 18211                           
 18212                           ;Port.c: 23: switch (pInput)
 18213  014700  D038               	goto	l337
 18214  014702                     
 18215                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 18216  014702  0E9B               	movlw	low _PortA_Property
 18217  014704  0100               	movlb	0	; () banked
 18218  014706  6F60               	movwf	?_GetPortProperties& (0+255),b
 18219  014708  0EFF               	movlw	high _PortA_Property
 18220  01470A  0100               	movlb	0	; () banked
 18221  01470C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18222                           
 18223                           ; BSR set to: 0
 18224  01470E  0012               	return	
 18225  014710                     
 18226                           ; BSR set to: 0
 18227                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 18228                           
 18229                           ; BSR set to: 0
 18230  014710  0E99               	movlw	low _PortB_Property
 18231  014712  0100               	movlb	0	; () banked
 18232  014714  6F60               	movwf	?_GetPortProperties& (0+255),b
 18233  014716  0EFF               	movlw	high _PortB_Property
 18234  014718  0100               	movlb	0	; () banked
 18235  01471A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18236                           
 18237                           ; BSR set to: 0
 18238  01471C  0012               	return	
 18239  01471E                     
 18240                           ; BSR set to: 0
 18241                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 18242                           
 18243                           ; BSR set to: 0
 18244  01471E  0E97               	movlw	low _PortC_Property
 18245  014720  0100               	movlb	0	; () banked
 18246  014722  6F60               	movwf	?_GetPortProperties& (0+255),b
 18247  014724  0EFF               	movlw	high _PortC_Property
 18248  014726  0100               	movlb	0	; () banked
 18249  014728  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18250                           
 18251                           ; BSR set to: 0
 18252  01472A  0012               	return	
 18253  01472C                     
 18254                           ; BSR set to: 0
 18255                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 18256                           
 18257                           ; BSR set to: 0
 18258  01472C  0E95               	movlw	low _PortD_Property
 18259  01472E  0100               	movlb	0	; () banked
 18260  014730  6F60               	movwf	?_GetPortProperties& (0+255),b
 18261  014732  0EFF               	movlw	high _PortD_Property
 18262  014734  0100               	movlb	0	; () banked
 18263  014736  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18264                           
 18265                           ; BSR set to: 0
 18266  014738  0012               	return	
 18267  01473A                     
 18268                           ; BSR set to: 0
 18269                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 18270                           
 18271                           ; BSR set to: 0
 18272  01473A  0E93               	movlw	low _PortE_Property
 18273  01473C  0100               	movlb	0	; () banked
 18274  01473E  6F60               	movwf	?_GetPortProperties& (0+255),b
 18275  014740  0EFF               	movlw	high _PortE_Property
 18276  014742  0100               	movlb	0	; () banked
 18277  014744  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18278                           
 18279                           ; BSR set to: 0
 18280  014746  0012               	return	
 18281  014748                     
 18282                           ; BSR set to: 0
 18283                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 18284                           
 18285                           ; BSR set to: 0
 18286  014748  0E91               	movlw	low _PortF_Property
 18287  01474A  0100               	movlb	0	; () banked
 18288  01474C  6F60               	movwf	?_GetPortProperties& (0+255),b
 18289  01474E  0EFF               	movlw	high _PortF_Property
 18290  014750  0100               	movlb	0	; () banked
 18291  014752  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18292                           
 18293                           ; BSR set to: 0
 18294  014754  0012               	return	
 18295  014756                     
 18296                           ; BSR set to: 0
 18297                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 18298                           
 18299                           ; BSR set to: 0
 18300  014756  0E8F               	movlw	low _PortG_Property
 18301  014758  0100               	movlb	0	; () banked
 18302  01475A  6F60               	movwf	?_GetPortProperties& (0+255),b
 18303  01475C  0EFF               	movlw	high _PortG_Property
 18304  01475E  0100               	movlb	0	; () banked
 18305  014760  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18306                           
 18307                           ; BSR set to: 0
 18308  014762  0012               	return	
 18309  014764                     
 18310                           ; BSR set to: 0
 18311                           ;Port.c: 40: return (void*)0;
 18312                           
 18313                           ; BSR set to: 0
 18314  014764  0E00               	movlw	0
 18315  014766  0100               	movlb	0	; () banked
 18316  014768  6F60               	movwf	?_GetPortProperties& (0+255),b
 18317  01476A  0E00               	movlw	0
 18318  01476C  0100               	movlb	0	; () banked
 18319  01476E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18320                           
 18321                           ; BSR set to: 0
 18322                           ;Port.c: 41: }
 18323                           
 18324                           ; BSR set to: 0
 18325  014770  0012               	return	
 18326  014772                     l337:
 18327                           
 18328                           ; BSR set to: 0
 18329  014772  0100               	movlb	0	; () banked
 18330  014774  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 18331                           
 18332                           ; Switch size 1, requested type "space"
 18333                           ; Number of cases is 7, Range of values is 0 to 6
 18334                           ; switch strategies available:
 18335                           ; Name         Instructions Cycles
 18336                           ; simple_byte           22    12 (average)
 18337                           ;	Chosen strategy is simple_byte
 18338  014776  0A00               	xorlw	0	; case 0
 18339  014778  B4D8               	btfsc	status,2,c
 18340  01477A  D7C3               	goto	l338
 18341  01477C  0A01               	xorlw	1	; case 1
 18342  01477E  B4D8               	btfsc	status,2,c
 18343  014780  D7C7               	goto	l340
 18344  014782  0A03               	xorlw	3	; case 2
 18345  014784  B4D8               	btfsc	status,2,c
 18346  014786  D7CB               	goto	l341
 18347  014788  0A01               	xorlw	1	; case 3
 18348  01478A  B4D8               	btfsc	status,2,c
 18349  01478C  D7CF               	goto	l342
 18350  01478E  0A07               	xorlw	7	; case 4
 18351  014790  B4D8               	btfsc	status,2,c
 18352  014792  D7D3               	goto	l343
 18353  014794  0A01               	xorlw	1	; case 5
 18354  014796  B4D8               	btfsc	status,2,c
 18355  014798  D7D7               	goto	l344
 18356  01479A  0A03               	xorlw	3	; case 6
 18357  01479C  B4D8               	btfsc	status,2,c
 18358  01479E  D7DB               	goto	l345
 18359  0147A0  D7E1               	goto	l346
 18360  0147A2                     __end_of_GetPortProperties:
 18361                           	opt stack 0
 18362                           tosu	equ	0xFFF
 18363                           tosh	equ	0xFFE
 18364                           tosl	equ	0xFFD
 18365                           pclath	equ	0xFFA
 18366                           tblptru	equ	0xFF8
 18367                           tblptrh	equ	0xFF7
 18368                           tblptrl	equ	0xFF6
 18369                           tablat	equ	0xFF5
 18370                           prodh	equ	0xFF4
 18371                           prodl	equ	0xFF3
 18372                           intcon	equ	0xFF2
 18373                           postinc0	equ	0xFEE
 18374                           wreg	equ	0xFE8
 18375                           indf1	equ	0xFE7
 18376                           postdec1	equ	0xFE5
 18377                           fsr1h	equ	0xFE2
 18378                           fsr1l	equ	0xFE1
 18379                           indf2	equ	0xFDF
 18380                           postinc2	equ	0xFDE
 18381                           postdec2	equ	0xFDD
 18382                           plusw2	equ	0xFDB
 18383                           fsr2h	equ	0xFDA
 18384                           fsr2l	equ	0xFD9
 18385                           status	equ	0xFD8
 18386                           
 18387 ;; *************** function _GetPortPORT *****************
 18388 ;; Defined at:
 18389 ;;		line 44 in file "Library/Port.c"
 18390 ;; Parameters:    Size  Location     Type
 18391 ;;  pInput          1    wreg     enum E6786
 18392 ;; Auto vars:     Size  Location     Type
 18393 ;;  pInput          1    2[BANK0 ] enum E6786
 18394 ;; Return value:  Size  Location     Type
 18395 ;;                  2    0[BANK0 ] PTR struct Byte
 18396 ;; Registers used:
 18397 ;;		wreg, status,2, status,0
 18398 ;; Tracked objects:
 18399 ;;		On entry : 0/0
 18400 ;;		On exit  : 0/0
 18401 ;;		Unchanged: 0/0
 18402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18403 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18406 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18407 ;;Total ram usage:        3 bytes
 18408 ;; Hardware stack levels used:    1
 18409 ;; Hardware stack levels required when called:    7
 18410 ;; This function calls:
 18411 ;;		Nothing
 18412 ;; This function is called by:
 18413 ;;		_Port_Init
 18414 ;; This function uses a non-reentrant model
 18415 ;;
 18416                           
 18417                           	psect	text82
 18418  0147A2                     __ptext82:
 18419                           	opt stack 0
 18420  0147A2                     _GetPortPORT:
 18421                           	opt stack 20
 18422                           
 18423                           ; BSR set to: 0
 18424                           ;incstack = 0
 18425                           ;GetPortPORT@pInput stored from wreg
 18426  0147A2  0100               	movlb	0	; () banked
 18427  0147A4  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 18428                           
 18429                           ;Port.c: 46: switch (pInput)
 18430  0147A6  D038               	goto	l350
 18431  0147A8                     
 18432                           ;Port.c: 49: return (BytePtr)&PORTA;
 18433  0147A8  0E80               	movlw	128
 18434  0147AA  0100               	movlb	0	; () banked
 18435  0147AC  6F60               	movwf	?_GetPortPORT& (0+255),b
 18436  0147AE  0E0F               	movlw	15
 18437  0147B0  0100               	movlb	0	; () banked
 18438  0147B2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18439                           
 18440                           ; BSR set to: 0
 18441  0147B4  0012               	return	
 18442  0147B6                     
 18443                           ; BSR set to: 0
 18444                           ;Port.c: 51: return (BytePtr)&PORTB;
 18445                           
 18446                           ; BSR set to: 0
 18447  0147B6  0E81               	movlw	129
 18448  0147B8  0100               	movlb	0	; () banked
 18449  0147BA  6F60               	movwf	?_GetPortPORT& (0+255),b
 18450  0147BC  0E0F               	movlw	15
 18451  0147BE  0100               	movlb	0	; () banked
 18452  0147C0  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18453                           
 18454                           ; BSR set to: 0
 18455  0147C2  0012               	return	
 18456  0147C4                     
 18457                           ; BSR set to: 0
 18458                           ;Port.c: 53: return (BytePtr)&PORTC;
 18459                           
 18460                           ; BSR set to: 0
 18461  0147C4  0E82               	movlw	130
 18462  0147C6  0100               	movlb	0	; () banked
 18463  0147C8  6F60               	movwf	?_GetPortPORT& (0+255),b
 18464  0147CA  0E0F               	movlw	15
 18465  0147CC  0100               	movlb	0	; () banked
 18466  0147CE  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18467                           
 18468                           ; BSR set to: 0
 18469  0147D0  0012               	return	
 18470  0147D2                     
 18471                           ; BSR set to: 0
 18472                           ;Port.c: 55: return (BytePtr)&PORTD;
 18473                           
 18474                           ; BSR set to: 0
 18475  0147D2  0E83               	movlw	131
 18476  0147D4  0100               	movlb	0	; () banked
 18477  0147D6  6F60               	movwf	?_GetPortPORT& (0+255),b
 18478  0147D8  0E0F               	movlw	15
 18479  0147DA  0100               	movlb	0	; () banked
 18480  0147DC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18481                           
 18482                           ; BSR set to: 0
 18483  0147DE  0012               	return	
 18484  0147E0                     
 18485                           ; BSR set to: 0
 18486                           ;Port.c: 57: return (BytePtr)&PORTE;
 18487                           
 18488                           ; BSR set to: 0
 18489  0147E0  0E84               	movlw	132
 18490  0147E2  0100               	movlb	0	; () banked
 18491  0147E4  6F60               	movwf	?_GetPortPORT& (0+255),b
 18492  0147E6  0E0F               	movlw	15
 18493  0147E8  0100               	movlb	0	; () banked
 18494  0147EA  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18495                           
 18496                           ; BSR set to: 0
 18497  0147EC  0012               	return	
 18498  0147EE                     
 18499                           ; BSR set to: 0
 18500                           ;Port.c: 59: return (BytePtr)&PORTF;
 18501                           
 18502                           ; BSR set to: 0
 18503  0147EE  0E85               	movlw	133
 18504  0147F0  0100               	movlb	0	; () banked
 18505  0147F2  6F60               	movwf	?_GetPortPORT& (0+255),b
 18506  0147F4  0E0F               	movlw	15
 18507  0147F6  0100               	movlb	0	; () banked
 18508  0147F8  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18509                           
 18510                           ; BSR set to: 0
 18511  0147FA  0012               	return	
 18512  0147FC                     
 18513                           ; BSR set to: 0
 18514                           ;Port.c: 61: return (BytePtr)&PORTG;
 18515                           
 18516                           ; BSR set to: 0
 18517  0147FC  0E86               	movlw	134
 18518  0147FE  0100               	movlb	0	; () banked
 18519  014800  6F60               	movwf	?_GetPortPORT& (0+255),b
 18520  014802  0E0F               	movlw	15
 18521  014804  0100               	movlb	0	; () banked
 18522  014806  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18523                           
 18524                           ; BSR set to: 0
 18525  014808  0012               	return	
 18526  01480A                     
 18527                           ; BSR set to: 0
 18528                           ;Port.c: 63: return (void*)0;
 18529                           
 18530                           ; BSR set to: 0
 18531  01480A  0E00               	movlw	0
 18532  01480C  0100               	movlb	0	; () banked
 18533  01480E  6F60               	movwf	?_GetPortPORT& (0+255),b
 18534  014810  0E00               	movlw	0
 18535  014812  0100               	movlb	0	; () banked
 18536  014814  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18537                           
 18538                           ; BSR set to: 0
 18539                           ;Port.c: 64: }
 18540                           
 18541                           ; BSR set to: 0
 18542  014816  0012               	return	
 18543  014818                     l350:
 18544                           
 18545                           ; BSR set to: 0
 18546  014818  0100               	movlb	0	; () banked
 18547  01481A  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 18548                           
 18549                           ; Switch size 1, requested type "space"
 18550                           ; Number of cases is 7, Range of values is 0 to 6
 18551                           ; switch strategies available:
 18552                           ; Name         Instructions Cycles
 18553                           ; simple_byte           22    12 (average)
 18554                           ;	Chosen strategy is simple_byte
 18555  01481C  0A00               	xorlw	0	; case 0
 18556  01481E  B4D8               	btfsc	status,2,c
 18557  014820  D7C3               	goto	l351
 18558  014822  0A01               	xorlw	1	; case 1
 18559  014824  B4D8               	btfsc	status,2,c
 18560  014826  D7C7               	goto	l353
 18561  014828  0A03               	xorlw	3	; case 2
 18562  01482A  B4D8               	btfsc	status,2,c
 18563  01482C  D7CB               	goto	l354
 18564  01482E  0A01               	xorlw	1	; case 3
 18565  014830  B4D8               	btfsc	status,2,c
 18566  014832  D7CF               	goto	l355
 18567  014834  0A07               	xorlw	7	; case 4
 18568  014836  B4D8               	btfsc	status,2,c
 18569  014838  D7D3               	goto	l356
 18570  01483A  0A01               	xorlw	1	; case 5
 18571  01483C  B4D8               	btfsc	status,2,c
 18572  01483E  D7D7               	goto	l357
 18573  014840  0A03               	xorlw	3	; case 6
 18574  014842  B4D8               	btfsc	status,2,c
 18575  014844  D7DB               	goto	l358
 18576  014846  D7E1               	goto	l359
 18577  014848                     __end_of_GetPortPORT:
 18578                           	opt stack 0
 18579                           tosu	equ	0xFFF
 18580                           tosh	equ	0xFFE
 18581                           tosl	equ	0xFFD
 18582                           pclath	equ	0xFFA
 18583                           tblptru	equ	0xFF8
 18584                           tblptrh	equ	0xFF7
 18585                           tblptrl	equ	0xFF6
 18586                           tablat	equ	0xFF5
 18587                           prodh	equ	0xFF4
 18588                           prodl	equ	0xFF3
 18589                           intcon	equ	0xFF2
 18590                           postinc0	equ	0xFEE
 18591                           wreg	equ	0xFE8
 18592                           indf1	equ	0xFE7
 18593                           postdec1	equ	0xFE5
 18594                           fsr1h	equ	0xFE2
 18595                           fsr1l	equ	0xFE1
 18596                           indf2	equ	0xFDF
 18597                           postinc2	equ	0xFDE
 18598                           postdec2	equ	0xFDD
 18599                           plusw2	equ	0xFDB
 18600                           fsr2h	equ	0xFDA
 18601                           fsr2l	equ	0xFD9
 18602                           status	equ	0xFD8
 18603                           
 18604 ;; *************** function _LED_Init *****************
 18605 ;; Defined at:
 18606 ;;		line 15 in file "Library/LED.c"
 18607 ;; Parameters:    Size  Location     Type
 18608 ;;  pLED            1    wreg     enum E6739
 18609 ;; Auto vars:     Size  Location     Type
 18610 ;;  pLED            1   45[BANK0 ] enum E6739
 18611 ;; Return value:  Size  Location     Type
 18612 ;;                  1    wreg      void 
 18613 ;; Registers used:
 18614 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18615 ;; Tracked objects:
 18616 ;;		On entry : 0/0
 18617 ;;		On exit  : 0/0
 18618 ;;		Unchanged: 0/0
 18619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18623 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18624 ;;Total ram usage:        1 bytes
 18625 ;; Hardware stack levels used:    1
 18626 ;; Hardware stack levels required when called:   12
 18627 ;; This function calls:
 18628 ;;		_LED_Set
 18629 ;;		_Port_SetPinType
 18630 ;; This function is called by:
 18631 ;;		_MXK_Init
 18632 ;; This function uses a non-reentrant model
 18633 ;;
 18634                           
 18635                           	psect	text83
 18636  0156B6                     __ptext83:
 18637                           	opt stack 0
 18638  0156B6                     _LED_Init:
 18639                           	opt stack 16
 18640                           
 18641                           ; BSR set to: 0
 18642                           ;incstack = 0
 18643                           ;LED_Init@pLED stored from wreg
 18644  0156B6  0100               	movlb	0	; () banked
 18645  0156B8  6F8D               	movwf	LED_Init@pLED& (0+255),b
 18646                           
 18647                           ;LED.c: 17: switch (pLED)
 18648  0156BA  D01E               	goto	l220
 18649  0156BC                     
 18650                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 18651  0156BC  0EEA               	movlw	low _PortC
 18652  0156BE  0100               	movlb	0	; () banked
 18653  0156C0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18654  0156C2  0E00               	movlw	high _PortC
 18655  0156C4  0100               	movlb	0	; () banked
 18656  0156C6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18657  0156C8  0E00               	movlw	0
 18658  0156CA  0100               	movlb	0	; () banked
 18659  0156CC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18660  0156CE  0E03               	movlw	3
 18661  0156D0  0100               	movlb	0	; () banked
 18662  0156D2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18663  0156D4  EC5F  F093         	call	_Port_SetPinType	;wreg free
 18664                           
 18665                           ;LED.c: 21: break;
 18666  0156D8  D017               	goto	l222
 18667  0156DA                     
 18668                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 18669  0156DA  0EEA               	movlw	low _PortC
 18670  0156DC  0100               	movlb	0	; () banked
 18671  0156DE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18672  0156E0  0E00               	movlw	high _PortC
 18673  0156E2  0100               	movlb	0	; () banked
 18674  0156E4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18675  0156E6  0E01               	movlw	1
 18676  0156E8  0100               	movlb	0	; () banked
 18677  0156EA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18678  0156EC  0E03               	movlw	3
 18679  0156EE  0100               	movlb	0	; () banked
 18680  0156F0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18681  0156F2  EC5F  F093         	call	_Port_SetPinType	;wreg free
 18682                           
 18683                           ;LED.c: 25: }
 18684                           
 18685                           ;LED.c: 24: break;
 18686  0156F6  D008               	goto	l222
 18687  0156F8                     l220:
 18688  0156F8  0100               	movlb	0	; () banked
 18689  0156FA  518D               	movf	LED_Init@pLED& (0+255),w,b
 18690                           
 18691                           ; Switch size 1, requested type "space"
 18692                           ; Number of cases is 2, Range of values is 0 to 1
 18693                           ; switch strategies available:
 18694                           ; Name         Instructions Cycles
 18695                           ; simple_byte            7     4 (average)
 18696                           ;	Chosen strategy is simple_byte
 18697  0156FC  0A00               	xorlw	0	; case 0
 18698  0156FE  B4D8               	btfsc	status,2,c
 18699  015700  D7DD               	goto	l221
 18700  015702  0A01               	xorlw	1	; case 1
 18701  015704  B4D8               	btfsc	status,2,c
 18702  015706  D7E9               	goto	l223
 18703  015708                     l222:
 18704                           
 18705                           ;LED.c: 26: LED_Set(pLED, 0);
 18706                           
 18707                           ; BSR set to: 0
 18708  015708  0E00               	movlw	0
 18709  01570A  0100               	movlb	0	; () banked
 18710  01570C  6F74               	movwf	LED_Set@pValue& (0+255),b
 18711  01570E  0100               	movlb	0	; () banked
 18712  015710  518D               	movf	LED_Init@pLED& (0+255),w,b
 18713  015712  EC91  F0AC         	call	_LED_Set
 18714  015716  0012               	return		;funcret
 18715  015718                     __end_of_LED_Init:
 18716                           	opt stack 0
 18717                           tosu	equ	0xFFF
 18718                           tosh	equ	0xFFE
 18719                           tosl	equ	0xFFD
 18720                           pclath	equ	0xFFA
 18721                           tblptru	equ	0xFF8
 18722                           tblptrh	equ	0xFF7
 18723                           tblptrl	equ	0xFF6
 18724                           tablat	equ	0xFF5
 18725                           prodh	equ	0xFF4
 18726                           prodl	equ	0xFF3
 18727                           intcon	equ	0xFF2
 18728                           postinc0	equ	0xFEE
 18729                           wreg	equ	0xFE8
 18730                           indf1	equ	0xFE7
 18731                           postdec1	equ	0xFE5
 18732                           fsr1h	equ	0xFE2
 18733                           fsr1l	equ	0xFE1
 18734                           indf2	equ	0xFDF
 18735                           postinc2	equ	0xFDE
 18736                           postdec2	equ	0xFDD
 18737                           plusw2	equ	0xFDB
 18738                           fsr2h	equ	0xFDA
 18739                           fsr2l	equ	0xFD9
 18740                           status	equ	0xFD8
 18741                           
 18742 ;; *************** function _LED_Set *****************
 18743 ;; Defined at:
 18744 ;;		line 33 in file "Library/LED.c"
 18745 ;; Parameters:    Size  Location     Type
 18746 ;;  pLED            1    wreg     enum E6739
 18747 ;;  pValue          1   20[BANK0 ] unsigned char 
 18748 ;; Auto vars:     Size  Location     Type
 18749 ;;  pLED            1   21[BANK0 ] enum E6739
 18750 ;; Return value:  Size  Location     Type
 18751 ;;                  1    wreg      void 
 18752 ;; Registers used:
 18753 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18754 ;; Tracked objects:
 18755 ;;		On entry : 0/0
 18756 ;;		On exit  : 0/0
 18757 ;;		Unchanged: 0/0
 18758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18759 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18760 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18762 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18763 ;;Total ram usage:        2 bytes
 18764 ;; Hardware stack levels used:    1
 18765 ;; Hardware stack levels required when called:   11
 18766 ;; This function calls:
 18767 ;;		_Port_SetPin
 18768 ;; This function is called by:
 18769 ;;		_LED_Init
 18770 ;;		_SYSTEM_Initialize
 18771 ;; This function uses a non-reentrant model
 18772 ;;
 18773                           
 18774                           	psect	text84
 18775  015922                     __ptext84:
 18776                           	opt stack 0
 18777  015922                     _LED_Set:
 18778                           	opt stack 16
 18779                           
 18780                           ;incstack = 0
 18781                           ;LED_Set@pLED stored from wreg
 18782  015922  0100               	movlb	0	; () banked
 18783  015924  6F75               	movwf	LED_Set@pLED& (0+255),b
 18784                           
 18785                           ;LED.c: 35: switch (pLED)
 18786  015926  D01C               	goto	l227
 18787  015928                     
 18788                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 18789  015928  0EEA               	movlw	low _PortC
 18790  01592A  0100               	movlb	0	; () banked
 18791  01592C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18792  01592E  0E00               	movlw	high _PortC
 18793  015930  0100               	movlb	0	; () banked
 18794  015932  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18795  015934  0E00               	movlw	0
 18796  015936  0100               	movlb	0	; () banked
 18797  015938  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18798  01593A  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 18799  01593E  ECE9  F09E         	call	_Port_SetPin	;wreg free
 18800                           
 18801                           ;LED.c: 39: break;
 18802  015942  0012               	return	
 18803  015944                     
 18804                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 18805  015944  0EEA               	movlw	low _PortC
 18806  015946  0100               	movlb	0	; () banked
 18807  015948  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18808  01594A  0E00               	movlw	high _PortC
 18809  01594C  0100               	movlb	0	; () banked
 18810  01594E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18811  015950  0E01               	movlw	1
 18812  015952  0100               	movlb	0	; () banked
 18813  015954  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18814  015956  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 18815  01595A  ECE9  F09E         	call	_Port_SetPin	;wreg free
 18816                           
 18817                           ;LED.c: 43: }
 18818                           
 18819                           ;LED.c: 42: break;
 18820  01595E  0012               	return	
 18821  015960                     l227:
 18822  015960  0100               	movlb	0	; () banked
 18823  015962  5175               	movf	LED_Set@pLED& (0+255),w,b
 18824                           
 18825                           ; Switch size 1, requested type "space"
 18826                           ; Number of cases is 2, Range of values is 0 to 1
 18827                           ; switch strategies available:
 18828                           ; Name         Instructions Cycles
 18829                           ; simple_byte            7     4 (average)
 18830                           ;	Chosen strategy is simple_byte
 18831  015964  0A00               	xorlw	0	; case 0
 18832  015966  B4D8               	btfsc	status,2,c
 18833  015968  D7DF               	goto	l228
 18834  01596A  0A01               	xorlw	1	; case 1
 18835  01596C  A4D8               	btfss	status,2,c
 18836  01596E  0012               	return	
 18837  015970  D7E9               	goto	l230
 18838  015972                     __end_of_LED_Set:
 18839                           	opt stack 0
 18840                           tosu	equ	0xFFF
 18841                           tosh	equ	0xFFE
 18842                           tosl	equ	0xFFD
 18843                           pclath	equ	0xFFA
 18844                           tblptru	equ	0xFF8
 18845                           tblptrh	equ	0xFF7
 18846                           tblptrl	equ	0xFF6
 18847                           tablat	equ	0xFF5
 18848                           prodh	equ	0xFF4
 18849                           prodl	equ	0xFF3
 18850                           intcon	equ	0xFF2
 18851                           postinc0	equ	0xFEE
 18852                           wreg	equ	0xFE8
 18853                           indf1	equ	0xFE7
 18854                           postdec1	equ	0xFE5
 18855                           fsr1h	equ	0xFE2
 18856                           fsr1l	equ	0xFE1
 18857                           indf2	equ	0xFDF
 18858                           postinc2	equ	0xFDE
 18859                           postdec2	equ	0xFDD
 18860                           plusw2	equ	0xFDB
 18861                           fsr2h	equ	0xFDA
 18862                           fsr2l	equ	0xFD9
 18863                           status	equ	0xFD8
 18864                           
 18865 ;; *************** function _MXK_Dequeue *****************
 18866 ;; Defined at:
 18867 ;;		line 153 in file "Library/MXK.c"
 18868 ;; Parameters:    Size  Location     Type
 18869 ;;		None
 18870 ;; Auto vars:     Size  Location     Type
 18871 ;;		None
 18872 ;; Return value:  Size  Location     Type
 18873 ;;                  1    wreg      void 
 18874 ;; Registers used:
 18875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18876 ;; Tracked objects:
 18877 ;;		On entry : 0/0
 18878 ;;		On exit  : 0/0
 18879 ;;		Unchanged: 0/0
 18880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18885 ;;Total ram usage:        0 bytes
 18886 ;; Hardware stack levels used:    1
 18887 ;; Hardware stack levels required when called:   12
 18888 ;; This function calls:
 18889 ;;		Absolute function
 18890 ;;		_Motor_Step
 18891 ;; This function is called by:
 18892 ;;		_init
 18893 ;;		_mode1
 18894 ;;		_mode2
 18895 ;;		_mode4
 18896 ;; This function uses a non-reentrant model
 18897 ;;
 18898                           
 18899                           	psect	text85
 18900  015D8C                     __ptext85:
 18901                           	opt stack 0
 18902  015D8C                     _MXK_Dequeue:
 18903                           	opt stack 17
 18904                           
 18905                           ;MXK.c: 155: if (lQueue)
 18906                           
 18907                           ;incstack = 0
 18908  015D8C  0100               	movlb	0	; () banked
 18909  015D8E  51BA               	movf	_lQueue& (0+255),w,b	;volatile
 18910  015D90  0100               	movlb	0	; () banked
 18911  015D92  11BB               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 18912  015D94  0100               	movlb	0	; () banked
 18913  015D96  11BC               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 18914  015D98  B4D8               	btfsc	status,2,c
 18915  015D9A  D00D               	goto	u13399
 18916                           
 18917                           ; BSR set to: 0
 18918                           ;MXK.c: 156: lQueue();
 18919  015D9C  D801               	call	u13398
 18920  015D9E  D00B               	goto	u13399
 18921  015DA0                     u13398:
 18922  015DA0  0005               	push	
 18923  015DA2  6EFA               	movwf	pclath,c
 18924  015DA4  0100               	movlb	0	; () banked
 18925  015DA6  51BA               	movf	_lQueue& (0+255),w,b	;volatile
 18926  015DA8  6EFD               	movwf	tosl,c
 18927  015DAA  51BB               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 18928  015DAC  6EFE               	movwf	tosh,c
 18929  015DAE  51BC               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 18930  015DB0  6EFF               	movwf	tosu,c
 18931  015DB2  50FA               	movf	pclath,w,c
 18932  015DB4  0012               	return		;indir
 18933  015DB6                     u13399:
 18934                           
 18935                           ;MXK.c: 157: lQueue = 0;
 18936  015DB6  0E00               	movlw	0
 18937  015DB8  0100               	movlb	0	; () banked
 18938  015DBA  6FBA               	movwf	_lQueue& (0+255),b	;volatile
 18939  015DBC  0E00               	movlw	0
 18940  015DBE  0100               	movlb	0	; () banked
 18941  015DC0  6FBB               	movwf	(_lQueue+1)& (0+255),b	;volatile
 18942  015DC2  0E00               	movlw	0
 18943  015DC4  0100               	movlb	0	; () banked
 18944  015DC6  6FBC               	movwf	(_lQueue+2)& (0+255),b	;volatile
 18945                           
 18946                           ; BSR set to: 0
 18947  015DC8  0012               	return		;funcret
 18948  015DCA                     __end_of_MXK_Dequeue:
 18949                           	opt stack 0
 18950                           tosu	equ	0xFFF
 18951                           tosh	equ	0xFFE
 18952                           tosl	equ	0xFFD
 18953                           pclath	equ	0xFFA
 18954                           tblptru	equ	0xFF8
 18955                           tblptrh	equ	0xFF7
 18956                           tblptrl	equ	0xFF6
 18957                           tablat	equ	0xFF5
 18958                           prodh	equ	0xFF4
 18959                           prodl	equ	0xFF3
 18960                           intcon	equ	0xFF2
 18961                           postinc0	equ	0xFEE
 18962                           wreg	equ	0xFE8
 18963                           indf1	equ	0xFE7
 18964                           postdec1	equ	0xFE5
 18965                           fsr1h	equ	0xFE2
 18966                           fsr1l	equ	0xFE1
 18967                           indf2	equ	0xFDF
 18968                           postinc2	equ	0xFDE
 18969                           postdec2	equ	0xFDD
 18970                           plusw2	equ	0xFDB
 18971                           fsr2h	equ	0xFDA
 18972                           fsr2l	equ	0xFD9
 18973                           status	equ	0xFD8
 18974                           
 18975 ;; *************** function _Motor_Step *****************
 18976 ;; Defined at:
 18977 ;;		line 75 in file "Library/Motor.c"
 18978 ;; Parameters:    Size  Location     Type
 18979 ;;		None
 18980 ;; Auto vars:     Size  Location     Type
 18981 ;;		None
 18982 ;; Return value:  Size  Location     Type
 18983 ;;                  1    wreg      void 
 18984 ;; Registers used:
 18985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18986 ;; Tracked objects:
 18987 ;;		On entry : 0/0
 18988 ;;		On exit  : 0/0
 18989 ;;		Unchanged: 0/0
 18990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18993 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18994 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18995 ;;Total ram usage:        2 bytes
 18996 ;; Hardware stack levels used:    1
 18997 ;; Hardware stack levels required when called:   11
 18998 ;; This function calls:
 18999 ;;		_MXK_Queue
 19000 ;;		_MXK_Release
 19001 ;;		_MXK_SwitchTo
 19002 ;;		_Port_SetPin
 19003 ;;		_Timer0_Restart
 19004 ;;		_Timer0_Stop
 19005 ;; This function is called by:
 19006 ;;		_Motor_Init
 19007 ;;		_MXK_Dequeue
 19008 ;;		_Timer0_ISR
 19009 ;; This function uses a non-reentrant model
 19010 ;;
 19011                           
 19012                           	psect	text86
 19013  013586                     __ptext86:
 19014                           	opt stack 0
 19015  013586                     _Motor_Step:
 19016                           	opt stack 0
 19017                           
 19018                           ; BSR set to: 0
 19019                           ;Skip over the trampoline to the duplicate function for level 2
 19020  013586  B251               	btfsc	btemp,1,c
 19021  013588  EFDC  F09B         	goto	i2_Motor_Step
 19022  01358C                     _Motor_Step$intlevel0:
 19023                           	opt stack 17
 19024                           
 19025                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 19026                           
 19027                           ;incstack = 0
 19028  01358C  0100               	movlb	0	; () banked
 19029  01358E  EE20 F004          	lfsr	2,4
 19030  013592  51CE               	movf	_lMotor& (0+255),w,b
 19031  013594  26D9               	addwf	fsr2l,f,c
 19032  013596  51CF               	movf	(_lMotor+1)& (0+255),w,b
 19033  013598  22DA               	addwfc	fsr2h,f,c
 19034  01359A  50DF               	movf	indf2,w,c
 19035  01359C  EC46  F0AE         	call	_MXK_SwitchTo
 19036  0135A0  0900               	iorlw	0
 19037  0135A2  B4D8               	btfsc	status,2,c
 19038  0135A4  D07A               	goto	l1627
 19039                           
 19040                           ;Motor.c: 78: {
 19041                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 19042  0135A6  C0CE  FFD9         	movff	_lMotor,fsr2l
 19043  0135AA  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19044  0135AE  50DE               	movf	postinc2,w,c
 19045  0135B0  10DE               	iorwf	postinc2,w,c
 19046  0135B2  B4D8               	btfsc	status,2,c
 19047  0135B4  D06D               	goto	l1628
 19048                           
 19049                           ;Motor.c: 80: {
 19050                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 19051  0135B6  C0CE  FFD9         	movff	_lMotor,fsr2l
 19052  0135BA  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19053  0135BE  0E01               	movlw	1
 19054  0135C0  BEDB               	btfsc	plusw2,7,c
 19055  0135C2  D026               	goto	l1629
 19056  0135C4  0E01               	movlw	1
 19057  0135C6  50DB               	movf	plusw2,w,c
 19058  0135C8  E103               	bnz	u10100
 19059  0135CA  04DE               	decf	postinc2,w,c
 19060  0135CC  A0D8               	btfss	status,0,c
 19061  0135CE  D020               	goto	l1629
 19062  0135D0                     u10100:
 19063                           
 19064                           ;Motor.c: 83: {
 19065                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 19066  0135D0  C0CE  FFD9         	movff	_lMotor,fsr2l
 19067  0135D4  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19068  0135D8  28DE               	incf	postinc2,w,c
 19069  0135DA  E104               	bnz	u10110
 19070  0135DC  0E7F               	movlw	127
 19071  0135DE  18DE               	xorwf	postinc2,w,c
 19072  0135E0  B4D8               	btfsc	status,2,c
 19073  0135E2  D007               	goto	l1630
 19074  0135E4                     u10110:
 19075                           
 19076                           ;Motor.c: 85: lMotor->mDelta --;
 19077  0135E4  C0CE  FFD9         	movff	_lMotor,fsr2l
 19078  0135E8  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19079  0135EC  06DE               	decf	postinc2,f,c
 19080  0135EE  0E00               	movlw	0
 19081  0135F0  5ADD               	subwfb	postdec2,f,c
 19082  0135F2                     l1630:
 19083                           
 19084                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 19085  0135F2  0E99               	movlw	low _PortE
 19086  0135F4  0100               	movlb	0	; () banked
 19087  0135F6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19088  0135F8  0E03               	movlw	high _PortE
 19089  0135FA  0100               	movlb	0	; () banked
 19090  0135FC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19091  0135FE  0E00               	movlw	0
 19092  013600  0100               	movlb	0	; () banked
 19093  013602  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19094  013604  0E01               	movlw	1
 19095  013606  0100               	movlb	0	; () banked
 19096  013608  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19097  01360A  ECE9  F09E         	call	_Port_SetPin	;wreg free
 19098                           
 19099                           ;Motor.c: 88: }
 19100  01360E  D01F               	goto	l1631
 19101  013610                     l1629:
 19102                           
 19103                           ;Motor.c: 89: else
 19104                           ;Motor.c: 90: {
 19105                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 19106  013610  C0CE  FFD9         	movff	_lMotor,fsr2l
 19107  013614  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19108  013618  04DE               	decf	postinc2,w,c
 19109  01361A  E104               	bnz	u10120
 19110  01361C  0E80               	movlw	128
 19111  01361E  18DE               	xorwf	postinc2,w,c
 19112  013620  B4D8               	btfsc	status,2,c
 19113  013622  D007               	goto	l1632
 19114  013624                     u10120:
 19115                           
 19116                           ;Motor.c: 92: lMotor->mDelta ++;
 19117  013624  C0CE  FFD9         	movff	_lMotor,fsr2l
 19118  013628  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19119  01362C  2ADE               	incf	postinc2,f,c
 19120  01362E  0E00               	movlw	0
 19121  013630  22DD               	addwfc	postdec2,f,c
 19122  013632                     l1632:
 19123                           
 19124                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 19125  013632  0E99               	movlw	low _PortE
 19126  013634  0100               	movlb	0	; () banked
 19127  013636  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19128  013638  0E03               	movlw	high _PortE
 19129  01363A  0100               	movlb	0	; () banked
 19130  01363C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19131  01363E  0E00               	movlw	0
 19132  013640  0100               	movlb	0	; () banked
 19133  013642  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19134  013644  0E00               	movlw	0
 19135  013646  0100               	movlb	0	; () banked
 19136  013648  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19137  01364A  ECE9  F09E         	call	_Port_SetPin	;wreg free
 19138  01364E                     l1631:
 19139                           
 19140                           ;Motor.c: 95: }
 19141                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 19142  01364E  0E99               	movlw	low _PortE
 19143  013650  0100               	movlb	0	; () banked
 19144  013652  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19145  013654  0E03               	movlw	high _PortE
 19146  013656  0100               	movlb	0	; () banked
 19147  013658  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19148  01365A  0E01               	movlw	1
 19149  01365C  0100               	movlb	0	; () banked
 19150  01365E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19151  013660  0E01               	movlw	1
 19152  013662  0100               	movlb	0	; () banked
 19153  013664  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19154  013666  ECE9  F09E         	call	_Port_SetPin	;wreg free
 19155                           
 19156                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 19157  01366A  0E99               	movlw	low _PortE
 19158  01366C  0100               	movlb	0	; () banked
 19159  01366E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19160  013670  0E03               	movlw	high _PortE
 19161  013672  0100               	movlb	0	; () banked
 19162  013674  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19163  013676  0E01               	movlw	1
 19164  013678  0100               	movlb	0	; () banked
 19165  01367A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19166  01367C  0E00               	movlw	0
 19167  01367E  0100               	movlb	0	; () banked
 19168  013680  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19169  013682  ECE9  F09E         	call	_Port_SetPin	;wreg free
 19170                           
 19171                           ;Motor.c: 101: MXK_Release();
 19172  013686  EC89  F0B1         	call	_MXK_Release	;wreg free
 19173                           
 19174                           ;Motor.c: 102: Timer0_Restart();
 19175  01368A  EC77  F0B2         	call	_Timer0_Restart	;wreg free
 19176                           
 19177                           ;Motor.c: 103: return;
 19178  01368E  0012               	return	
 19179  013690                     l1628:
 19180                           
 19181                           ;Motor.c: 104: }
 19182                           ;Motor.c: 105: MXK_Release();
 19183  013690  EC89  F0B1         	call	_MXK_Release	;wreg free
 19184                           
 19185                           ;Motor.c: 106: Timer0_Stop();
 19186  013694  ECA5  F0B2         	call	_Timer0_Stop	;wreg free
 19187                           
 19188                           ;Motor.c: 107: return;
 19189  013698  0012               	return	
 19190  01369A                     l1627:
 19191                           
 19192                           ;Motor.c: 108: }
 19193                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 19194  01369A  C0BD  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 19195  01369E  C0BE  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 19196  0136A2  C0BF  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 19197  0136A6  EC5D  F0B2         	call	_MXK_Queue	;wreg free
 19198  0136AA  0012               	return		;funcret
 19199  0136AC                     __end_of_Motor_Step:
 19200                           	opt stack 0
 19201                           tosu	equ	0xFFF
 19202                           tosh	equ	0xFFE
 19203                           tosl	equ	0xFFD
 19204                           pclath	equ	0xFFA
 19205                           tblptru	equ	0xFF8
 19206                           tblptrh	equ	0xFF7
 19207                           tblptrl	equ	0xFF6
 19208                           tablat	equ	0xFF5
 19209                           prodh	equ	0xFF4
 19210                           prodl	equ	0xFF3
 19211                           intcon	equ	0xFF2
 19212                           postinc0	equ	0xFEE
 19213                           wreg	equ	0xFE8
 19214                           indf1	equ	0xFE7
 19215                           postdec1	equ	0xFE5
 19216                           fsr1h	equ	0xFE2
 19217                           fsr1l	equ	0xFE1
 19218                           indf2	equ	0xFDF
 19219                           postinc2	equ	0xFDE
 19220                           postdec2	equ	0xFDD
 19221                           plusw2	equ	0xFDB
 19222                           fsr2h	equ	0xFDA
 19223                           fsr2l	equ	0xFD9
 19224                           status	equ	0xFD8
 19225                           
 19226 ;; *************** function _Timer0_Stop *****************
 19227 ;; Defined at:
 19228 ;;		line 89 in file "Library/Timer0.c"
 19229 ;; Parameters:    Size  Location     Type
 19230 ;;		None
 19231 ;; Auto vars:     Size  Location     Type
 19232 ;;		None
 19233 ;; Return value:  Size  Location     Type
 19234 ;;                  1    wreg      void 
 19235 ;; Registers used:
 19236 ;;		None
 19237 ;; Tracked objects:
 19238 ;;		On entry : 0/0
 19239 ;;		On exit  : 0/0
 19240 ;;		Unchanged: 0/0
 19241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19246 ;;Total ram usage:        0 bytes
 19247 ;; Hardware stack levels used:    1
 19248 ;; Hardware stack levels required when called:    7
 19249 ;; This function calls:
 19250 ;;		Nothing
 19251 ;; This function is called by:
 19252 ;;		_Motor_Step
 19253 ;; This function uses a non-reentrant model
 19254 ;;
 19255                           
 19256                           	psect	text87
 19257  01654A                     __ptext87:
 19258                           	opt stack 0
 19259  01654A                     _Timer0_Stop:
 19260                           	opt stack 20
 19261                           
 19262                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 19263                           
 19264                           ;incstack = 0
 19265  01654A  9AF2               	bcf	intcon,5,c	;volatile
 19266                           
 19267                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 19268  01654C  94F2               	bcf	intcon,2,c	;volatile
 19269  01654E  0012               	return		;funcret
 19270  016550                     __end_of_Timer0_Stop:
 19271                           	opt stack 0
 19272                           tosu	equ	0xFFF
 19273                           tosh	equ	0xFFE
 19274                           tosl	equ	0xFFD
 19275                           pclath	equ	0xFFA
 19276                           tblptru	equ	0xFF8
 19277                           tblptrh	equ	0xFF7
 19278                           tblptrl	equ	0xFF6
 19279                           tablat	equ	0xFF5
 19280                           prodh	equ	0xFF4
 19281                           prodl	equ	0xFF3
 19282                           intcon	equ	0xFF2
 19283                           postinc0	equ	0xFEE
 19284                           wreg	equ	0xFE8
 19285                           indf1	equ	0xFE7
 19286                           postdec1	equ	0xFE5
 19287                           fsr1h	equ	0xFE2
 19288                           fsr1l	equ	0xFE1
 19289                           indf2	equ	0xFDF
 19290                           postinc2	equ	0xFDE
 19291                           postdec2	equ	0xFDD
 19292                           plusw2	equ	0xFDB
 19293                           fsr2h	equ	0xFDA
 19294                           fsr2l	equ	0xFD9
 19295                           status	equ	0xFD8
 19296                           
 19297 ;; *************** function _Timer0_Restart *****************
 19298 ;; Defined at:
 19299 ;;		line 83 in file "Library/Timer0.c"
 19300 ;; Parameters:    Size  Location     Type
 19301 ;;		None
 19302 ;; Auto vars:     Size  Location     Type
 19303 ;;		None
 19304 ;; Return value:  Size  Location     Type
 19305 ;;                  1    wreg      void 
 19306 ;; Registers used:
 19307 ;;		None
 19308 ;; Tracked objects:
 19309 ;;		On entry : 0/0
 19310 ;;		On exit  : 0/0
 19311 ;;		Unchanged: 0/0
 19312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19317 ;;Total ram usage:        0 bytes
 19318 ;; Hardware stack levels used:    1
 19319 ;; Hardware stack levels required when called:    7
 19320 ;; This function calls:
 19321 ;;		Nothing
 19322 ;; This function is called by:
 19323 ;;		_Motor_Step
 19324 ;; This function uses a non-reentrant model
 19325 ;;
 19326                           
 19327                           	psect	text88
 19328  0164EE                     __ptext88:
 19329                           	opt stack 0
 19330  0164EE                     _Timer0_Restart:
 19331                           	opt stack 20
 19332                           
 19333                           ;Timer0.c: 85: TMR0 = COUNTER;
 19334                           
 19335                           ;incstack = 0
 19336  0164EE  C029  FFD6         	movff	_COUNTER,4054	;volatile
 19337  0164F2  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 19338                           
 19339                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 19340  0164F6  8AF2               	bsf	intcon,5,c	;volatile
 19341  0164F8  0012               	return		;funcret
 19342  0164FA                     __end_of_Timer0_Restart:
 19343                           	opt stack 0
 19344                           tosu	equ	0xFFF
 19345                           tosh	equ	0xFFE
 19346                           tosl	equ	0xFFD
 19347                           pclath	equ	0xFFA
 19348                           tblptru	equ	0xFF8
 19349                           tblptrh	equ	0xFF7
 19350                           tblptrl	equ	0xFF6
 19351                           tablat	equ	0xFF5
 19352                           prodh	equ	0xFF4
 19353                           prodl	equ	0xFF3
 19354                           intcon	equ	0xFF2
 19355                           postinc0	equ	0xFEE
 19356                           wreg	equ	0xFE8
 19357                           indf1	equ	0xFE7
 19358                           postdec1	equ	0xFE5
 19359                           fsr1h	equ	0xFE2
 19360                           fsr1l	equ	0xFE1
 19361                           indf2	equ	0xFDF
 19362                           postinc2	equ	0xFDE
 19363                           postdec2	equ	0xFDD
 19364                           plusw2	equ	0xFDB
 19365                           fsr2h	equ	0xFDA
 19366                           fsr2l	equ	0xFD9
 19367                           status	equ	0xFD8
 19368                           
 19369 ;; *************** function _MXK_SwitchTo *****************
 19370 ;; Defined at:
 19371 ;;		line 105 in file "Library/MXK.c"
 19372 ;; Parameters:    Size  Location     Type
 19373 ;;  pModule         1    wreg     enum E6927
 19374 ;; Auto vars:     Size  Location     Type
 19375 ;;  pModule         1    7[BANK0 ] enum E6927
 19376 ;;  CUR             1    6[BANK0 ] unsigned char 
 19377 ;; Return value:  Size  Location     Type
 19378 ;;                  1    wreg      unsigned char 
 19379 ;; Registers used:
 19380 ;;		wreg, status,2, status,0, cstack
 19381 ;; Tracked objects:
 19382 ;;		On entry : 0/0
 19383 ;;		On exit  : 0/0
 19384 ;;		Unchanged: 0/0
 19385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19387 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19389 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19390 ;;Total ram usage:        2 bytes
 19391 ;; Hardware stack levels used:    1
 19392 ;; Hardware stack levels required when called:    8
 19393 ;; This function calls:
 19394 ;;		_delay_us
 19395 ;; This function is called by:
 19396 ;;		_Motor_Step
 19397 ;;		_mode1
 19398 ;;		_mode2
 19399 ;;		_mode4
 19400 ;; This function uses a non-reentrant model
 19401 ;;
 19402                           
 19403                           	psect	text89
 19404  015C8C                     __ptext89:
 19405                           	opt stack 0
 19406  015C8C                     _MXK_SwitchTo:
 19407                           	opt stack 21
 19408                           
 19409                           ;incstack = 0
 19410                           ;MXK_SwitchTo@pModule stored from wreg
 19411  015C8C  0100               	movlb	0	; () banked
 19412  015C8E  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 19413                           
 19414                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 19415  015C90  5086               	movf	3974,w,c	;volatile
 19416  015C92  0B0F               	andlw	15
 19417  015C94  0100               	movlb	0	; () banked
 19418  015C96  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 19419                           
 19420                           ; BSR set to: 0
 19421                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 19422  015C98  504B               	movf	_Bus_State,w,c
 19423  015C9A  A4D8               	btfss	status,2,c
 19424  015C9C  D002               	goto	l1730
 19425                           
 19426                           ; BSR set to: 0
 19427                           ;MXK.c: 110: return 0;
 19428  015C9E  0E00               	movlw	0
 19429                           
 19430                           ; BSR set to: 0
 19431  015CA0  0012               	return	
 19432  015CA2                     l1730:
 19433                           
 19434                           ; BSR set to: 0
 19435                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 19436                           
 19437                           ; BSR set to: 0
 19438  015CA2  0E00               	movlw	0
 19439  015CA4  6E4B               	movwf	_Bus_State,c
 19440                           
 19441                           ; BSR set to: 0
 19442                           ;MXK.c: 114: if (CUR != pModule)
 19443  015CA6  0100               	movlb	0	; () banked
 19444  015CA8  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 19445  015CAA  0100               	movlb	0	; () banked
 19446  015CAC  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 19447  015CAE  B4D8               	btfsc	status,2,c
 19448  015CB0  D00C               	goto	l1732
 19449                           
 19450                           ; BSR set to: 0
 19451                           ;MXK.c: 115: {
 19452                           ;MXK.c: 116: PORTG &= ~(0xF);
 19453  015CB2  0EF0               	movlw	240
 19454  015CB4  1686               	andwf	3974,f,c	;volatile
 19455                           
 19456                           ;MXK.c: 117: PORTG |= pModule;
 19457  015CB6  0100               	movlb	0	; () banked
 19458  015CB8  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 19459  015CBA  1286               	iorwf	3974,f,c	;volatile
 19460                           
 19461                           ; BSR set to: 0
 19462                           ;MXK.c: 120: delay_us(10);
 19463  015CBC  0E00               	movlw	0
 19464  015CBE  0100               	movlb	0	; () banked
 19465  015CC0  6F61               	movwf	(delay_us@us+1)& (0+255),b
 19466  015CC2  0E0A               	movlw	10
 19467  015CC4  6F60               	movwf	delay_us@us& (0+255),b
 19468  015CC6  EC68  F0AC         	call	_delay_us	;wreg free
 19469  015CCA                     l1732:
 19470                           
 19471                           ;MXK.c: 121: }
 19472                           ;MXK.c: 122: return 1;
 19473  015CCA  0E01               	movlw	1
 19474  015CCC  0012               	return	
 19475  015CCE                     __end_of_MXK_SwitchTo:
 19476                           	opt stack 0
 19477                           tosu	equ	0xFFF
 19478                           tosh	equ	0xFFE
 19479                           tosl	equ	0xFFD
 19480                           pclath	equ	0xFFA
 19481                           tblptru	equ	0xFF8
 19482                           tblptrh	equ	0xFF7
 19483                           tblptrl	equ	0xFF6
 19484                           tablat	equ	0xFF5
 19485                           prodh	equ	0xFF4
 19486                           prodl	equ	0xFF3
 19487                           intcon	equ	0xFF2
 19488                           postinc0	equ	0xFEE
 19489                           wreg	equ	0xFE8
 19490                           indf1	equ	0xFE7
 19491                           postdec1	equ	0xFE5
 19492                           fsr1h	equ	0xFE2
 19493                           fsr1l	equ	0xFE1
 19494                           indf2	equ	0xFDF
 19495                           postinc2	equ	0xFDE
 19496                           postdec2	equ	0xFDD
 19497                           plusw2	equ	0xFDB
 19498                           fsr2h	equ	0xFDA
 19499                           fsr2l	equ	0xFD9
 19500                           status	equ	0xFD8
 19501                           
 19502 ;; *************** function _MXK_Release *****************
 19503 ;; Defined at:
 19504 ;;		line 130 in file "Library/MXK.c"
 19505 ;; Parameters:    Size  Location     Type
 19506 ;;		None
 19507 ;; Auto vars:     Size  Location     Type
 19508 ;;		None
 19509 ;; Return value:  Size  Location     Type
 19510 ;;                  1    wreg      unsigned char 
 19511 ;; Registers used:
 19512 ;;		wreg, status,2, status,0
 19513 ;; Tracked objects:
 19514 ;;		On entry : 0/0
 19515 ;;		On exit  : 0/0
 19516 ;;		Unchanged: 0/0
 19517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19522 ;;Total ram usage:        0 bytes
 19523 ;; Hardware stack levels used:    1
 19524 ;; Hardware stack levels required when called:    7
 19525 ;; This function calls:
 19526 ;;		Nothing
 19527 ;; This function is called by:
 19528 ;;		_Motor_Step
 19529 ;;		_init
 19530 ;;		_mode1
 19531 ;;		_mode2
 19532 ;;		_mode4
 19533 ;; This function uses a non-reentrant model
 19534 ;;
 19535                           
 19536                           	psect	text90
 19537  016312                     __ptext90:
 19538                           	opt stack 0
 19539  016312                     _MXK_Release:
 19540                           	opt stack 22
 19541                           
 19542                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 19543                           
 19544                           ;incstack = 0
 19545  016312  0E01               	movlw	1
 19546  016314  6E4B               	movwf	_Bus_State,c
 19547                           
 19548                           ;MXK.c: 134: if (lQueue != 0)
 19549  016316  0100               	movlb	0	; () banked
 19550  016318  51BA               	movf	_lQueue& (0+255),w,b	;volatile
 19551  01631A  0100               	movlb	0	; () banked
 19552  01631C  11BB               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 19553  01631E  0100               	movlb	0	; () banked
 19554  016320  11BC               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 19555  016322  B4D8               	btfsc	status,2,c
 19556  016324  D002               	goto	l1735
 19557                           
 19558                           ; BSR set to: 0
 19559                           ;MXK.c: 135: return 1;
 19560  016326  0E01               	movlw	1
 19561                           
 19562                           ; BSR set to: 0
 19563  016328  0012               	return	
 19564  01632A                     l1735:
 19565                           
 19566                           ; BSR set to: 0
 19567                           ;MXK.c: 137: return 0;
 19568                           
 19569                           ; BSR set to: 0
 19570  01632A  0E00               	movlw	0
 19571  01632C  0012               	return	
 19572  01632E                     __end_of_MXK_Release:
 19573                           	opt stack 0
 19574                           tosu	equ	0xFFF
 19575                           tosh	equ	0xFFE
 19576                           tosl	equ	0xFFD
 19577                           pclath	equ	0xFFA
 19578                           tblptru	equ	0xFF8
 19579                           tblptrh	equ	0xFF7
 19580                           tblptrl	equ	0xFF6
 19581                           tablat	equ	0xFF5
 19582                           prodh	equ	0xFF4
 19583                           prodl	equ	0xFF3
 19584                           intcon	equ	0xFF2
 19585                           postinc0	equ	0xFEE
 19586                           wreg	equ	0xFE8
 19587                           indf1	equ	0xFE7
 19588                           postdec1	equ	0xFE5
 19589                           fsr1h	equ	0xFE2
 19590                           fsr1l	equ	0xFE1
 19591                           indf2	equ	0xFDF
 19592                           postinc2	equ	0xFDE
 19593                           postdec2	equ	0xFDD
 19594                           plusw2	equ	0xFDB
 19595                           fsr2h	equ	0xFDA
 19596                           fsr2l	equ	0xFD9
 19597                           status	equ	0xFD8
 19598                           
 19599 ;; *************** function _MXK_Queue *****************
 19600 ;; Defined at:
 19601 ;;		line 144 in file "Library/MXK.c"
 19602 ;; Parameters:    Size  Location     Type
 19603 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 19604 ;;		 -> Absolute function(1), Motor_Step(1), 
 19605 ;; Auto vars:     Size  Location     Type
 19606 ;;		None
 19607 ;; Return value:  Size  Location     Type
 19608 ;;                  1    wreg      void 
 19609 ;; Registers used:
 19610 ;;		wreg, status,2, status,0
 19611 ;; Tracked objects:
 19612 ;;		On entry : 0/0
 19613 ;;		On exit  : 0/0
 19614 ;;		Unchanged: 0/0
 19615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19616 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19619 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19620 ;;Total ram usage:        3 bytes
 19621 ;; Hardware stack levels used:    1
 19622 ;; Hardware stack levels required when called:    7
 19623 ;; This function calls:
 19624 ;;		Nothing
 19625 ;; This function is called by:
 19626 ;;		_Motor_Step
 19627 ;; This function uses a non-reentrant model
 19628 ;;
 19629                           
 19630                           	psect	text91
 19631  0164BA                     __ptext91:
 19632                           	opt stack 0
 19633  0164BA                     _MXK_Queue:
 19634                           	opt stack 20
 19635                           
 19636                           ;MXK.c: 146: lQueue = pCallback;
 19637                           
 19638                           ; BSR set to: 0
 19639                           ;incstack = 0
 19640  0164BA  C060  F0BA         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 19641  0164BE  C061  F0BB         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 19642  0164C2  C062  F0BC         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 19643  0164C6  0012               	return		;funcret
 19644  0164C8                     __end_of_MXK_Queue:
 19645                           	opt stack 0
 19646                           tosu	equ	0xFFF
 19647                           tosh	equ	0xFFE
 19648                           tosl	equ	0xFFD
 19649                           pclath	equ	0xFFA
 19650                           tblptru	equ	0xFF8
 19651                           tblptrh	equ	0xFF7
 19652                           tblptrl	equ	0xFF6
 19653                           tablat	equ	0xFF5
 19654                           prodh	equ	0xFF4
 19655                           prodl	equ	0xFF3
 19656                           intcon	equ	0xFF2
 19657                           postinc0	equ	0xFEE
 19658                           wreg	equ	0xFE8
 19659                           indf1	equ	0xFE7
 19660                           postdec1	equ	0xFE5
 19661                           fsr1h	equ	0xFE2
 19662                           fsr1l	equ	0xFE1
 19663                           indf2	equ	0xFDF
 19664                           postinc2	equ	0xFDE
 19665                           postdec2	equ	0xFDD
 19666                           plusw2	equ	0xFDB
 19667                           fsr2h	equ	0xFDA
 19668                           fsr2l	equ	0xFD9
 19669                           status	equ	0xFD8
 19670                           
 19671 ;; *************** function _MXK_BlockSwitchTo *****************
 19672 ;; Defined at:
 19673 ;;		line 82 in file "Library/MXK.c"
 19674 ;; Parameters:    Size  Location     Type
 19675 ;;  pModule         1    wreg     enum E6927
 19676 ;; Auto vars:     Size  Location     Type
 19677 ;;  pModule         1    7[BANK0 ] enum E6927
 19678 ;;  CUR             1    6[BANK0 ] unsigned char 
 19679 ;; Return value:  Size  Location     Type
 19680 ;;                  1    wreg      unsigned char 
 19681 ;; Registers used:
 19682 ;;		wreg, status,2, status,0, cstack
 19683 ;; Tracked objects:
 19684 ;;		On entry : 0/0
 19685 ;;		On exit  : 0/0
 19686 ;;		Unchanged: 0/0
 19687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19689 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19692 ;;Total ram usage:        2 bytes
 19693 ;; Hardware stack levels used:    1
 19694 ;; Hardware stack levels required when called:    8
 19695 ;; This function calls:
 19696 ;;		_delay_us
 19697 ;; This function is called by:
 19698 ;;		_init
 19699 ;; This function uses a non-reentrant model
 19700 ;;
 19701                           
 19702                           	psect	text92
 19703  015DCA                     __ptext92:
 19704                           	opt stack 0
 19705  015DCA                     _MXK_BlockSwitchTo:
 19706                           	opt stack 21
 19707                           
 19708                           ;incstack = 0
 19709                           ;MXK_BlockSwitchTo@pModule stored from wreg
 19710  015DCA  0100               	movlb	0	; () banked
 19711  015DCC  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 19712                           
 19713                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 19714  015DCE  5086               	movf	3974,w,c	;volatile
 19715  015DD0  0B0F               	andlw	15
 19716  015DD2  0100               	movlb	0	; () banked
 19717  015DD4  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 19718  015DD6                     
 19719                           ; BSR set to: 0
 19720                           
 19721                           ; BSR set to: 0
 19722  015DD6  504B               	movf	_Bus_State,w,c
 19723  015DD8  B4D8               	btfsc	status,2,c
 19724  015DDA  D7FD               	goto	l1724
 19725                           
 19726                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 19727  015DDC  0E00               	movlw	0
 19728  015DDE  6E4B               	movwf	_Bus_State,c
 19729                           
 19730                           ;MXK.c: 90: if (CUR != pModule)
 19731  015DE0  0100               	movlb	0	; () banked
 19732  015DE2  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19733  015DE4  0100               	movlb	0	; () banked
 19734  015DE6  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 19735  015DE8  B4D8               	btfsc	status,2,c
 19736  015DEA  D00C               	goto	l1726
 19737                           
 19738                           ; BSR set to: 0
 19739                           ;MXK.c: 91: {
 19740                           ;MXK.c: 92: PORTG &= ~(0xF);
 19741  015DEC  0EF0               	movlw	240
 19742  015DEE  1686               	andwf	3974,f,c	;volatile
 19743                           
 19744                           ;MXK.c: 93: PORTG |= pModule;
 19745  015DF0  0100               	movlb	0	; () banked
 19746  015DF2  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19747  015DF4  1286               	iorwf	3974,f,c	;volatile
 19748                           
 19749                           ; BSR set to: 0
 19750                           ;MXK.c: 96: delay_us(10);
 19751  015DF6  0E00               	movlw	0
 19752  015DF8  0100               	movlb	0	; () banked
 19753  015DFA  6F61               	movwf	(delay_us@us+1)& (0+255),b
 19754  015DFC  0E0A               	movlw	10
 19755  015DFE  6F60               	movwf	delay_us@us& (0+255),b
 19756  015E00  EC68  F0AC         	call	_delay_us	;wreg free
 19757  015E04                     l1726:
 19758                           
 19759                           ;MXK.c: 97: }
 19760                           ;MXK.c: 98: return 1;
 19761  015E04  0E01               	movlw	1
 19762  015E06  0012               	return	
 19763  015E08                     __end_of_MXK_BlockSwitchTo:
 19764                           	opt stack 0
 19765                           tosu	equ	0xFFF
 19766                           tosh	equ	0xFFE
 19767                           tosl	equ	0xFFD
 19768                           pclath	equ	0xFFA
 19769                           tblptru	equ	0xFF8
 19770                           tblptrh	equ	0xFF7
 19771                           tblptrl	equ	0xFF6
 19772                           tablat	equ	0xFF5
 19773                           prodh	equ	0xFF4
 19774                           prodl	equ	0xFF3
 19775                           intcon	equ	0xFF2
 19776                           postinc0	equ	0xFEE
 19777                           wreg	equ	0xFE8
 19778                           indf1	equ	0xFE7
 19779                           postdec1	equ	0xFE5
 19780                           fsr1h	equ	0xFE2
 19781                           fsr1l	equ	0xFE1
 19782                           indf2	equ	0xFDF
 19783                           postinc2	equ	0xFDE
 19784                           postdec2	equ	0xFDD
 19785                           plusw2	equ	0xFDB
 19786                           fsr2h	equ	0xFDA
 19787                           fsr2l	equ	0xFD9
 19788                           status	equ	0xFD8
 19789                           
 19790 ;; *************** function _delay_us *****************
 19791 ;; Defined at:
 19792 ;;		line 255 in file "Library/Types.c"
 19793 ;; Parameters:    Size  Location     Type
 19794 ;;  us              2    0[BANK0 ] unsigned short 
 19795 ;; Auto vars:     Size  Location     Type
 19796 ;;  u               4    2[BANK0 ] unsigned long 
 19797 ;; Return value:  Size  Location     Type
 19798 ;;                  1    wreg      void 
 19799 ;; Registers used:
 19800 ;;		wreg, status,2, status,0
 19801 ;; Tracked objects:
 19802 ;;		On entry : 0/0
 19803 ;;		On exit  : 0/0
 19804 ;;		Unchanged: 0/0
 19805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19806 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19807 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19809 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19810 ;;Total ram usage:        6 bytes
 19811 ;; Hardware stack levels used:    1
 19812 ;; Hardware stack levels required when called:    7
 19813 ;; This function calls:
 19814 ;;		Nothing
 19815 ;; This function is called by:
 19816 ;;		_MXK_BlockSwitchTo
 19817 ;;		_MXK_SwitchTo
 19818 ;; This function uses a non-reentrant model
 19819 ;;
 19820                           
 19821                           	psect	text93
 19822  0158D0                     __ptext93:
 19823                           	opt stack 0
 19824  0158D0                     _delay_us:
 19825                           	opt stack 21
 19826                           
 19827                           ;Types.c: 256: unsigned long u;
 19828                           ;Types.c: 257: while (us--) {
 19829                           
 19830                           ;incstack = 0
 19831  0158D0  D01C               	goto	u9260
 19832  0158D2                     l12536:
 19833                           
 19834                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 19835  0158D2  0E00               	movlw	0
 19836  0158D4  0100               	movlb	0	; () banked
 19837  0158D6  6F62               	movwf	delay_us@u& (0+255),b
 19838  0158D8  0E00               	movlw	0
 19839  0158DA  6F63               	movwf	(delay_us@u+1)& (0+255),b
 19840  0158DC  0E00               	movlw	0
 19841  0158DE  6F64               	movwf	(delay_us@u+2)& (0+255),b
 19842  0158E0  0E00               	movlw	0
 19843  0158E2  6F65               	movwf	(delay_us@u+3)& (0+255),b
 19844  0158E4                     l12538:
 19845                           
 19846                           ; BSR set to: 0
 19847  0158E4  0100               	movlb	0	; () banked
 19848  0158E6  5162               	movf	delay_us@u& (0+255),w,b
 19849  0158E8  0100               	movlb	0	; () banked
 19850  0158EA  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 19851  0158EC  0100               	movlb	0	; () banked
 19852  0158EE  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 19853  0158F0  0100               	movlb	0	; () banked
 19854  0158F2  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 19855  0158F4  A4D8               	btfss	status,2,c
 19856  0158F6  D009               	goto	u9260
 19857                           
 19858                           ; BSR set to: 0
 19859                           
 19860                           ; BSR set to: 0
 19861  0158F8  F000               	nop		; ;# 
 19862  0158FA  0E01               	movlw	1
 19863  0158FC  0100               	movlb	0	; () banked
 19864  0158FE  2762               	addwf	delay_us@u& (0+255),f,b
 19865  015900  0E00               	movlw	0
 19866  015902  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 19867  015904  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 19868  015906  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 19869  015908  D7ED               	goto	l12538
 19870  01590A                     u9260:
 19871                           
 19872                           ; BSR set to: 0
 19873                           
 19874                           ; BSR set to: 0
 19875  01590A  0100               	movlb	0	; () banked
 19876  01590C  0760               	decf	delay_us@us& (0+255),f,b
 19877  01590E  A0D8               	btfss	status,0,c
 19878  015910  0761               	decf	(delay_us@us+1)& (0+255),f,b
 19879  015912  0100               	movlb	0	; () banked
 19880  015914  2960               	incf	delay_us@us& (0+255),w,b
 19881  015916  E1DD               	bnz	l12536
 19882  015918  0100               	movlb	0	; () banked
 19883  01591A  2961               	incf	(delay_us@us+1)& (0+255),w,b
 19884  01591C  B4D8               	btfsc	status,2,c
 19885  01591E  0012               	return	
 19886  015920  D7D8               	goto	l832
 19887  015922                     __end_of_delay_us:
 19888                           	opt stack 0
 19889                           tosu	equ	0xFFF
 19890                           tosh	equ	0xFFE
 19891                           tosl	equ	0xFFD
 19892                           pclath	equ	0xFFA
 19893                           tblptru	equ	0xFF8
 19894                           tblptrh	equ	0xFF7
 19895                           tblptrl	equ	0xFF6
 19896                           tablat	equ	0xFF5
 19897                           prodh	equ	0xFF4
 19898                           prodl	equ	0xFF3
 19899                           intcon	equ	0xFF2
 19900                           postinc0	equ	0xFEE
 19901                           wreg	equ	0xFE8
 19902                           indf1	equ	0xFE7
 19903                           postdec1	equ	0xFE5
 19904                           fsr1h	equ	0xFE2
 19905                           fsr1l	equ	0xFE1
 19906                           indf2	equ	0xFDF
 19907                           postinc2	equ	0xFDE
 19908                           postdec2	equ	0xFDD
 19909                           plusw2	equ	0xFDB
 19910                           fsr2h	equ	0xFDA
 19911                           fsr2l	equ	0xFD9
 19912                           status	equ	0xFD8
 19913                           
 19914 ;; *************** function _LCD_Init *****************
 19915 ;; Defined at:
 19916 ;;		line 172 in file "Library/LCD.c"
 19917 ;; Parameters:    Size  Location     Type
 19918 ;;		None
 19919 ;; Auto vars:     Size  Location     Type
 19920 ;;  i               2   55[BANK0 ] unsigned short 
 19921 ;; Return value:  Size  Location     Type
 19922 ;;                  1    wreg      void 
 19923 ;; Registers used:
 19924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19925 ;; Tracked objects:
 19926 ;;		On entry : 0/0
 19927 ;;		On exit  : 0/0
 19928 ;;		Unchanged: 0/0
 19929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19932 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19933 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19934 ;;Total ram usage:        4 bytes
 19935 ;; Hardware stack levels used:    1
 19936 ;; Hardware stack levels required when called:   15
 19937 ;; This function calls:
 19938 ;;		_Configure_GPIOs
 19939 ;;		_LCD_Fill
 19940 ;;		_LCD_Write
 19941 ;;		_Set_Rotation
 19942 ;;		_delay_ms
 19943 ;; This function is called by:
 19944 ;;		_init
 19945 ;; This function uses a non-reentrant model
 19946 ;;
 19947                           
 19948                           	psect	text94
 19949  012EB4                     __ptext94:
 19950                           	opt stack 0
 19951  012EB4                     _LCD_Init:
 19952                           	opt stack 14
 19953                           
 19954                           ;LCD.c: 174: UINT16 i;
 19955                           ;LCD.c: 175: Configure_GPIOs();
 19956                           
 19957                           ; BSR set to: 0
 19958                           ;incstack = 0
 19959  012EB4  EC1D  F0A9         	call	_Configure_GPIOs	;wreg free
 19960                           
 19961                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 19962  012EB8  0E00               	movlw	0
 19963  012EBA  0100               	movlb	0	; () banked
 19964  012EBC  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 19965  012EBE  0E00               	movlw	0
 19966  012EC0  6F97               	movwf	LCD_Init@i& (0+255),b
 19967                           
 19968                           ; BSR set to: 0
 19969  012EC2  0100               	movlb	0	; () banked
 19970  012EC4  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 19971  012EC6  E106               	bnz	u10730
 19972  012EC8  0E59               	movlw	89
 19973  012ECA  0100               	movlb	0	; () banked
 19974  012ECC  5D97               	subwf	LCD_Init@i& (0+255),w,b
 19975  012ECE  B0D8               	btfsc	status,0,c
 19976  012ED0  D08B               	goto	u10770
 19977  012ED2  D001               	goto	l85
 19978  012ED4                     u10730:
 19979                           
 19980                           ; BSR set to: 0
 19981  012ED4  D089               	goto	u10770
 19982  012ED6                     l85:
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;LCD.c: 178: {
 19986                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 19987                           
 19988                           ; BSR set to: 0
 19989  012ED6  90D8               	bcf	status,0,c
 19990  012ED8  0100               	movlb	0	; () banked
 19991  012EDA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19992  012EDC  6EF6               	movwf	tblptrl,c
 19993  012EDE  0100               	movlb	0	; () banked
 19994  012EE0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19995  012EE2  6EF7               	movwf	tblptrh,c
 19996  012EE4  0EC3               	movlw	low _InitList
 19997  012EE6  26F6               	addwf	tblptrl,f,c
 19998  012EE8  0EFC               	movlw	high _InitList
 19999  012EEA  22F7               	addwfc	tblptrh,f,c
 20000  012EEC                     	if	1	;There are 3 active tblptr bytes
 20001  012EEC  6AF8               	clrf	tblptru,c
 20002  012EEE  0E00               	movlw	low (__mediumconst shr (0+16))
 20003  012EF0  22F8               	addwfc	tblptru,f,c
 20004  012EF2                     	endif
 20005  012EF2  0009               	tblrd		*+
 20006  012EF4  0E80               	movlw	128
 20007  012EF6  18F5               	xorwf	tablat,w,c
 20008  012EF8  0009               	tblrd		*+
 20009  012EFA  10F5               	iorwf	tablat,w,c
 20010  012EFC  A4D8               	btfss	status,2,c
 20011  012EFE  D022               	goto	l87
 20012                           
 20013                           ; BSR set to: 0
 20014  012F00  0100               	movlb	0	; () banked
 20015  012F02  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 20016  012F04  E11F               	bnz	l13990
 20017  012F06  0E58               	movlw	88
 20018  012F08  0100               	movlb	0	; () banked
 20019  012F0A  5D97               	subwf	LCD_Init@i& (0+255),w,b
 20020  012F0C  B0D8               	btfsc	status,0,c
 20021  012F0E  D01A               	goto	l87
 20022                           
 20023                           ; BSR set to: 0
 20024                           ;LCD.c: 180: delay_ms(InitList[++i]);
 20025  012F10  0100               	movlb	0	; () banked
 20026  012F12  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 20027  012F14  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 20028  012F16  90D8               	bcf	status,0,c
 20029  012F18  0100               	movlb	0	; () banked
 20030  012F1A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 20031  012F1C  6EF6               	movwf	tblptrl,c
 20032  012F1E  0100               	movlb	0	; () banked
 20033  012F20  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20034  012F22  6EF7               	movwf	tblptrh,c
 20035  012F24  0EC3               	movlw	low _InitList
 20036  012F26  26F6               	addwf	tblptrl,f,c
 20037  012F28  0EFC               	movlw	high _InitList
 20038  012F2A  22F7               	addwfc	tblptrh,f,c
 20039  012F2C                     	if	1	;There are 3 active tblptr bytes
 20040  012F2C  6AF8               	clrf	tblptru,c
 20041  012F2E  0E00               	movlw	low (__mediumconst shr (0+16))
 20042  012F30  22F8               	addwfc	tblptru,f,c
 20043  012F32                     	endif
 20044  012F32  0009               	tblrd		*+
 20045  012F34  CFF5 F060          	movff	tablat,delay_ms@ms
 20046  012F38  000A               	tblrd		*-
 20047  012F3A  CFF5 F061          	movff	tablat,delay_ms@ms+1
 20048  012F3E  ECF6  F0A9         	call	_delay_ms	;wreg free
 20049  012F42  D04B               	goto	l90
 20050  012F44                     l87:
 20051  012F44                     l13990:
 20052                           
 20053                           ;LCD.c: 181: else
 20054                           ;LCD.c: 182: {
 20055                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 20056  012F44  90D8               	bcf	status,0,c
 20057  012F46  0100               	movlb	0	; () banked
 20058  012F48  3597               	rlcf	LCD_Init@i& (0+255),w,b
 20059  012F4A  6EF6               	movwf	tblptrl,c
 20060  012F4C  0100               	movlb	0	; () banked
 20061  012F4E  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20062  012F50  6EF7               	movwf	tblptrh,c
 20063  012F52  0EC3               	movlw	low _InitList
 20064  012F54  26F6               	addwf	tblptrl,f,c
 20065  012F56  0EFC               	movlw	high _InitList
 20066  012F58  22F7               	addwfc	tblptrh,f,c
 20067  012F5A                     	if	1	;There are 3 active tblptr bytes
 20068  012F5A  6AF8               	clrf	tblptru,c
 20069  012F5C  0E00               	movlw	low (__mediumconst shr (0+16))
 20070  012F5E  22F8               	addwfc	tblptru,f,c
 20071  012F60                     	endif
 20072  012F60  0009               	tblrd		*+
 20073  012F62  0E00               	movlw	0
 20074  012F64  5EF5               	subwf	tablat,f,c
 20075  012F66  0009               	tblrd		*+
 20076  012F68  0E01               	movlw	1
 20077  012F6A  5AF5               	subwfb	tablat,f,c
 20078  012F6C  A0D8               	btfss	status,0,c
 20079  012F6E  D020               	goto	l89
 20080                           
 20081                           ; BSR set to: 0
 20082  012F70  0E00               	movlw	0
 20083  012F72  0100               	movlb	0	; () banked
 20084  012F74  6F63               	movwf	LCD_Write@mode& (0+255),b
 20085  012F76  90D8               	bcf	status,0,c
 20086  012F78  0100               	movlb	0	; () banked
 20087  012F7A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 20088  012F7C  6EF6               	movwf	tblptrl,c
 20089  012F7E  0100               	movlb	0	; () banked
 20090  012F80  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20091  012F82  6EF7               	movwf	tblptrh,c
 20092  012F84  0EC3               	movlw	low _InitList
 20093  012F86  26F6               	addwf	tblptrl,f,c
 20094  012F88  0EFC               	movlw	high _InitList
 20095  012F8A  22F7               	addwfc	tblptrh,f,c
 20096  012F8C                     	if	1	;There are 3 active tblptr bytes
 20097  012F8C  6AF8               	clrf	tblptru,c
 20098  012F8E  0E00               	movlw	low (__mediumconst shr (0+16))
 20099  012F90  22F8               	addwfc	tblptru,f,c
 20100  012F92                     	endif
 20101  012F92  0009               	tblrd		*+
 20102  012F94  CFF5 F095          	movff	tablat,??_LCD_Init
 20103  012F98  0009               	tblrd		*+
 20104  012F9A  CFF5 F096          	movff	tablat,??_LCD_Init+1
 20105  012F9E  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 20106  012FA2  0100               	movlb	0	; () banked
 20107  012FA4  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 20108  012FA6  0100               	movlb	0	; () banked
 20109  012FA8  5195               	movf	??_LCD_Init& (0+255),w,b
 20110  012FAA  ECC0  F0B0         	call	_LCD_Write
 20111  012FAE  D015               	goto	l90
 20112  012FB0                     l89:
 20113                           
 20114                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 20115  012FB0  0E01               	movlw	1
 20116  012FB2  0100               	movlb	0	; () banked
 20117  012FB4  6F63               	movwf	LCD_Write@mode& (0+255),b
 20118  012FB6  90D8               	bcf	status,0,c
 20119  012FB8  0100               	movlb	0	; () banked
 20120  012FBA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 20121  012FBC  6EF6               	movwf	tblptrl,c
 20122  012FBE  0100               	movlb	0	; () banked
 20123  012FC0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20124  012FC2  6EF7               	movwf	tblptrh,c
 20125  012FC4  0EC3               	movlw	low _InitList
 20126  012FC6  26F6               	addwf	tblptrl,f,c
 20127  012FC8  0EFC               	movlw	high _InitList
 20128  012FCA  22F7               	addwfc	tblptrh,f,c
 20129  012FCC                     	if	1	;There are 3 active tblptr bytes
 20130  012FCC  6AF8               	clrf	tblptru,c
 20131  012FCE  0E00               	movlw	low (__mediumconst shr (0+16))
 20132  012FD0  22F8               	addwfc	tblptru,f,c
 20133  012FD2                     	endif
 20134  012FD2  0008               	tblrd		*
 20135  012FD4  50F5               	movf	tablat,w,c
 20136  012FD6  ECC0  F0B0         	call	_LCD_Write
 20137  012FDA                     l90:
 20138  012FDA  0100               	movlb	0	; () banked
 20139  012FDC  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 20140  012FDE  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 20141                           
 20142                           ; BSR set to: 0
 20143  012FE0  0100               	movlb	0	; () banked
 20144  012FE2  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 20145  012FE4  E101               	bnz	l14000
 20146  012FE6  D770               	goto	L12
 20147  012FE8                     u10770:
 20148  012FE8                     l14000:
 20149                           
 20150                           ; BSR set to: 0
 20151                           ;LCD.c: 185: }
 20152                           ;LCD.c: 186: }
 20153                           ;LCD.c: 187: delay_ms(100);
 20154  012FE8  0E00               	movlw	0
 20155  012FEA  0100               	movlb	0	; () banked
 20156  012FEC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 20157  012FEE  0E64               	movlw	100
 20158  012FF0  6F60               	movwf	delay_ms@ms& (0+255),b
 20159  012FF2  ECF6  F0A9         	call	_delay_ms	;wreg free
 20160                           
 20161                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 20162  012FF6  0E00               	movlw	0
 20163  012FF8  0100               	movlb	0	; () banked
 20164  012FFA  6F63               	movwf	LCD_Write@mode& (0+255),b
 20165  012FFC  0E29               	movlw	41
 20166  012FFE  ECC0  F0B0         	call	_LCD_Write
 20167                           
 20168                           ;LCD.c: 189: Set_Rotation(1);
 20169  013002  0E01               	movlw	1
 20170  013004  EC15  F0A5         	call	_Set_Rotation
 20171                           
 20172                           ;LCD.c: 191: delay_ms(100);
 20173  013008  0E00               	movlw	0
 20174  01300A  0100               	movlb	0	; () banked
 20175  01300C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 20176  01300E  0E64               	movlw	100
 20177  013010  6F60               	movwf	delay_ms@ms& (0+255),b
 20178  013012  ECF6  F0A9         	call	_delay_ms	;wreg free
 20179                           
 20180                           ;LCD.c: 192: LCD_Fill(0x0000);
 20181  013016  0E00               	movlw	0
 20182  013018  0100               	movlb	0	; () banked
 20183  01301A  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 20184  01301C  0E00               	movlw	0
 20185  01301E  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 20186  013020  EC13  F0AC         	call	_LCD_Fill	;wreg free
 20187  013024  0012               	return		;funcret
 20188  013026                     __end_of_LCD_Init:
 20189                           	opt stack 0
 20190                           tosu	equ	0xFFF
 20191                           tosh	equ	0xFFE
 20192                           tosl	equ	0xFFD
 20193                           pclath	equ	0xFFA
 20194                           tblptru	equ	0xFF8
 20195                           tblptrh	equ	0xFF7
 20196                           tblptrl	equ	0xFF6
 20197                           tablat	equ	0xFF5
 20198                           prodh	equ	0xFF4
 20199                           prodl	equ	0xFF3
 20200                           intcon	equ	0xFF2
 20201                           postinc0	equ	0xFEE
 20202                           wreg	equ	0xFE8
 20203                           indf1	equ	0xFE7
 20204                           postdec1	equ	0xFE5
 20205                           fsr1h	equ	0xFE2
 20206                           fsr1l	equ	0xFE1
 20207                           indf2	equ	0xFDF
 20208                           postinc2	equ	0xFDE
 20209                           postdec2	equ	0xFDD
 20210                           plusw2	equ	0xFDB
 20211                           fsr2h	equ	0xFDA
 20212                           fsr2l	equ	0xFD9
 20213                           status	equ	0xFD8
 20214                           
 20215 ;; *************** function _Set_Rotation *****************
 20216 ;; Defined at:
 20217 ;;		line 248 in file "Library/LCD.c"
 20218 ;; Parameters:    Size  Location     Type
 20219 ;;  m               1    wreg     unsigned char 
 20220 ;; Auto vars:     Size  Location     Type
 20221 ;;  m               1    5[BANK0 ] unsigned char 
 20222 ;;  rotation        1    6[BANK0 ] unsigned char 
 20223 ;; Return value:  Size  Location     Type
 20224 ;;                  1    wreg      void 
 20225 ;; Registers used:
 20226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20227 ;; Tracked objects:
 20228 ;;		On entry : 0/0
 20229 ;;		On exit  : 0/0
 20230 ;;		Unchanged: 0/0
 20231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20236 ;;Total ram usage:        2 bytes
 20237 ;; Hardware stack levels used:    1
 20238 ;; Hardware stack levels required when called:    9
 20239 ;; This function calls:
 20240 ;;		_LCD_Write
 20241 ;; This function is called by:
 20242 ;;		_LCD_Init
 20243 ;; This function uses a non-reentrant model
 20244 ;;
 20245                           
 20246                           	psect	text95
 20247  014A2A                     __ptext95:
 20248                           	opt stack 0
 20249  014A2A                     _Set_Rotation:
 20250                           	opt stack 19
 20251                           
 20252                           ;incstack = 0
 20253                           ;Set_Rotation@m stored from wreg
 20254  014A2A  0100               	movlb	0	; () banked
 20255  014A2C  6F65               	movwf	Set_Rotation@m& (0+255),b
 20256                           
 20257                           ;LCD.c: 250: UINT8 rotation = 0x00;
 20258  014A2E  0E00               	movlw	0
 20259  014A30  0100               	movlb	0	; () banked
 20260  014A32  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 20261                           
 20262                           ; BSR set to: 0
 20263                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 20264  014A34  0E00               	movlw	0
 20265  014A36  0100               	movlb	0	; () banked
 20266  014A38  6F63               	movwf	LCD_Write@mode& (0+255),b
 20267  014A3A  0E36               	movlw	54
 20268  014A3C  ECC0  F0B0         	call	_LCD_Write
 20269                           
 20270                           ;LCD.c: 253: rotation = (m % 4);
 20271  014A40  0100               	movlb	0	; () banked
 20272  014A42  5165               	movf	Set_Rotation@m& (0+255),w,b
 20273  014A44  0B03               	andlw	3
 20274  014A46  0100               	movlb	0	; () banked
 20275  014A48  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 20276                           
 20277                           ;LCD.c: 255: switch(rotation)
 20278  014A4A  D02C               	goto	l117
 20279  014A4C                     
 20280                           ; BSR set to: 0
 20281                           ;LCD.c: 258: {
 20282                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 20283                           
 20284                           ; BSR set to: 0
 20285  014A4C  0E01               	movlw	1
 20286  014A4E  0100               	movlb	0	; () banked
 20287  014A50  6F63               	movwf	LCD_Write@mode& (0+255),b
 20288  014A52  0EC8               	movlw	200
 20289  014A54  ECC0  F0B0         	call	_LCD_Write
 20290                           
 20291                           ;LCD.c: 260: w = 128;
 20292  014A58  0E80               	movlw	128
 20293  014A5A  6E50               	movwf	_w,c
 20294                           
 20295                           ;LCD.c: 261: l = 128;
 20296  014A5C  0E80               	movlw	128
 20297  014A5E  6E4F               	movwf	_l,c
 20298                           
 20299                           ;LCD.c: 262: break;
 20300  014A60  0012               	return	
 20301  014A62                     
 20302                           ;LCD.c: 265: {
 20303                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 20304  014A62  0E01               	movlw	1
 20305  014A64  0100               	movlb	0	; () banked
 20306  014A66  6F63               	movwf	LCD_Write@mode& (0+255),b
 20307  014A68  0EA8               	movlw	168
 20308  014A6A  ECC0  F0B0         	call	_LCD_Write
 20309                           
 20310                           ;LCD.c: 267: w = 128;
 20311  014A6E  0E80               	movlw	128
 20312  014A70  6E50               	movwf	_w,c
 20313                           
 20314                           ;LCD.c: 268: l = 128;
 20315  014A72  0E80               	movlw	128
 20316  014A74  6E4F               	movwf	_l,c
 20317                           
 20318                           ;LCD.c: 269: break;
 20319  014A76  0012               	return	
 20320  014A78                     
 20321                           ;LCD.c: 272: {
 20322                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 20323  014A78  0E01               	movlw	1
 20324  014A7A  0100               	movlb	0	; () banked
 20325  014A7C  6F63               	movwf	LCD_Write@mode& (0+255),b
 20326  014A7E  0E08               	movlw	8
 20327  014A80  ECC0  F0B0         	call	_LCD_Write
 20328                           
 20329                           ;LCD.c: 274: w = 128;
 20330  014A84  0E80               	movlw	128
 20331  014A86  6E50               	movwf	_w,c
 20332                           
 20333                           ;LCD.c: 275: l = 128;
 20334  014A88  0E80               	movlw	128
 20335  014A8A  6E4F               	movwf	_l,c
 20336                           
 20337                           ;LCD.c: 276: break;
 20338  014A8C  0012               	return	
 20339  014A8E                     
 20340                           ;LCD.c: 279: {
 20341                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 20342  014A8E  0E01               	movlw	1
 20343  014A90  0100               	movlb	0	; () banked
 20344  014A92  6F63               	movwf	LCD_Write@mode& (0+255),b
 20345  014A94  0E68               	movlw	104
 20346  014A96  ECC0  F0B0         	call	_LCD_Write
 20347                           
 20348                           ;LCD.c: 281: w = 128;
 20349  014A9A  0E80               	movlw	128
 20350  014A9C  6E50               	movwf	_w,c
 20351                           
 20352                           ;LCD.c: 282: l = 128;
 20353  014A9E  0E80               	movlw	128
 20354  014AA0  6E4F               	movwf	_l,c
 20355                           
 20356                           ;LCD.c: 284: }
 20357                           ;LCD.c: 285: }
 20358                           
 20359                           ;LCD.c: 283: break;
 20360  014AA2  0012               	return	
 20361  014AA4                     l117:
 20362  014AA4  0100               	movlb	0	; () banked
 20363  014AA6  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 20364                           
 20365                           ; Switch size 1, requested type "space"
 20366                           ; Number of cases is 4, Range of values is 0 to 3
 20367                           ; switch strategies available:
 20368                           ; Name         Instructions Cycles
 20369                           ; simple_byte           13     7 (average)
 20370                           ;	Chosen strategy is simple_byte
 20371  014AA8  0A00               	xorlw	0	; case 0
 20372  014AAA  B4D8               	btfsc	status,2,c
 20373  014AAC  D7CF               	goto	l118
 20374  014AAE  0A01               	xorlw	1	; case 1
 20375  014AB0  B4D8               	btfsc	status,2,c
 20376  014AB2  D7D7               	goto	l120
 20377  014AB4  0A03               	xorlw	3	; case 2
 20378  014AB6  B4D8               	btfsc	status,2,c
 20379  014AB8  D7DF               	goto	l121
 20380  014ABA  0A01               	xorlw	1	; case 3
 20381  014ABC  A4D8               	btfss	status,2,c
 20382  014ABE  0012               	return	
 20383  014AC0  D7E6               	goto	l122
 20384  014AC2                     __end_of_Set_Rotation:
 20385                           	opt stack 0
 20386                           tosu	equ	0xFFF
 20387                           tosh	equ	0xFFE
 20388                           tosl	equ	0xFFD
 20389                           pclath	equ	0xFFA
 20390                           tblptru	equ	0xFF8
 20391                           tblptrh	equ	0xFF7
 20392                           tblptrl	equ	0xFF6
 20393                           tablat	equ	0xFF5
 20394                           prodh	equ	0xFF4
 20395                           prodl	equ	0xFF3
 20396                           intcon	equ	0xFF2
 20397                           postinc0	equ	0xFEE
 20398                           wreg	equ	0xFE8
 20399                           indf1	equ	0xFE7
 20400                           postdec1	equ	0xFE5
 20401                           fsr1h	equ	0xFE2
 20402                           fsr1l	equ	0xFE1
 20403                           indf2	equ	0xFDF
 20404                           postinc2	equ	0xFDE
 20405                           postdec2	equ	0xFDD
 20406                           plusw2	equ	0xFDB
 20407                           fsr2h	equ	0xFDA
 20408                           fsr2l	equ	0xFD9
 20409                           status	equ	0xFD8
 20410                           
 20411 ;; *************** function _LCD_Fill *****************
 20412 ;; Defined at:
 20413 ;;		line 287 in file "Library/LCD.c"
 20414 ;; Parameters:    Size  Location     Type
 20415 ;;  pColour         2    9[BANK0 ] unsigned short 
 20416 ;; Auto vars:     Size  Location     Type
 20417 ;;  j               1   12[BANK0 ] unsigned char 
 20418 ;;  i               1   11[BANK0 ] unsigned char 
 20419 ;; Return value:  Size  Location     Type
 20420 ;;                  1    wreg      void 
 20421 ;; Registers used:
 20422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20423 ;; Tracked objects:
 20424 ;;		On entry : 0/0
 20425 ;;		On exit  : 0/0
 20426 ;;		Unchanged: 0/0
 20427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20428 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20429 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20431 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20432 ;;Total ram usage:        4 bytes
 20433 ;; Hardware stack levels used:    1
 20434 ;; Hardware stack levels required when called:   10
 20435 ;; This function calls:
 20436 ;;		_LCD_Word_Write
 20437 ;;		_Set_Addr_Window
 20438 ;; This function is called by:
 20439 ;;		_LCD_Init
 20440 ;; This function uses a non-reentrant model
 20441 ;;
 20442                           
 20443                           	psect	text96
 20444  015826                     __ptext96:
 20445                           	opt stack 0
 20446  015826                     _LCD_Fill:
 20447                           	opt stack 18
 20448                           
 20449                           ;LCD.c: 296: UINT8 i = 0x00;
 20450                           
 20451                           ;incstack = 0
 20452  015826  0E00               	movlw	0
 20453  015828  0100               	movlb	0	; () banked
 20454  01582A  6F6B               	movwf	LCD_Fill@i& (0+255),b
 20455                           
 20456                           ;LCD.c: 297: UINT8 j = 0x00;
 20457  01582C  0E00               	movlw	0
 20458  01582E  0100               	movlb	0	; () banked
 20459  015830  6F6C               	movwf	LCD_Fill@j& (0+255),b
 20460                           
 20461                           ; BSR set to: 0
 20462                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 20463  015832  0E00               	movlw	0
 20464  015834  0100               	movlb	0	; () banked
 20465  015836  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 20466  015838  0450               	decf	_w,w,c
 20467  01583A  0100               	movlb	0	; () banked
 20468  01583C  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20469  01583E  044F               	decf	_l,w,c
 20470  015840  0100               	movlb	0	; () banked
 20471  015842  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20472  015844  0E00               	movlw	0
 20473  015846  EC2E  F0A2         	call	_Set_Addr_Window
 20474                           
 20475                           ;LCD.c: 299: for (j = l; j > 0; j--)
 20476  01584A  C04F  F06C         	movff	_l,LCD_Fill@j
 20477  01584E                     l13300:
 20478  01584E  0100               	movlb	0	; () banked
 20479  015850  516C               	movf	LCD_Fill@j& (0+255),w,b
 20480  015852  0100               	movlb	0	; () banked
 20481  015854  B4D8               	btfsc	status,2,c
 20482  015856  0012               	return	
 20483                           
 20484                           ; BSR set to: 0
 20485                           ;LCD.c: 300: for (i = w; i > 0; i--)
 20486                           
 20487                           ; BSR set to: 0
 20488  015858  C050  F06B         	movff	_w,LCD_Fill@i
 20489  01585C                     l13304:
 20490                           
 20491                           ; BSR set to: 0
 20492  01585C  0100               	movlb	0	; () banked
 20493  01585E  516B               	movf	LCD_Fill@i& (0+255),w,b
 20494  015860  0100               	movlb	0	; () banked
 20495  015862  B4D8               	btfsc	status,2,c
 20496  015864  D009               	goto	u9790
 20497                           
 20498                           ; BSR set to: 0
 20499                           ;LCD.c: 301: LCD_Word_Write(pColour);
 20500                           
 20501                           ; BSR set to: 0
 20502                           
 20503                           ; BSR set to: 0
 20504  015866  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 20505  01586A  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 20506  01586E  EC21  F0B1         	call	_LCD_Word_Write	;wreg free
 20507  015872  0100               	movlb	0	; () banked
 20508  015874  076B               	decf	LCD_Fill@i& (0+255),f,b
 20509  015876  D7F2               	goto	l13304
 20510  015878                     u9790:
 20511                           
 20512                           ; BSR set to: 0
 20513                           
 20514                           ; BSR set to: 0
 20515  015878  0100               	movlb	0	; () banked
 20516  01587A  076C               	decf	LCD_Fill@j& (0+255),f,b
 20517  01587C  D7E8               	goto	l13300
 20518  01587E                     __end_of_LCD_Fill:
 20519                           	opt stack 0
 20520                           tosu	equ	0xFFF
 20521                           tosh	equ	0xFFE
 20522                           tosl	equ	0xFFD
 20523                           pclath	equ	0xFFA
 20524                           tblptru	equ	0xFF8
 20525                           tblptrh	equ	0xFF7
 20526                           tblptrl	equ	0xFF6
 20527                           tablat	equ	0xFF5
 20528                           prodh	equ	0xFF4
 20529                           prodl	equ	0xFF3
 20530                           intcon	equ	0xFF2
 20531                           postinc0	equ	0xFEE
 20532                           wreg	equ	0xFE8
 20533                           indf1	equ	0xFE7
 20534                           postdec1	equ	0xFE5
 20535                           fsr1h	equ	0xFE2
 20536                           fsr1l	equ	0xFE1
 20537                           indf2	equ	0xFDF
 20538                           postinc2	equ	0xFDE
 20539                           postdec2	equ	0xFDD
 20540                           plusw2	equ	0xFDB
 20541                           fsr2h	equ	0xFDA
 20542                           fsr2l	equ	0xFD9
 20543                           status	equ	0xFD8
 20544                           
 20545 ;; *************** function _Set_Addr_Window *****************
 20546 ;; Defined at:
 20547 ;;		line 214 in file "Library/LCD.c"
 20548 ;; Parameters:    Size  Location     Type
 20549 ;;  xs              1    wreg     unsigned char 
 20550 ;;  ys              1    5[BANK0 ] unsigned char 
 20551 ;;  xe              1    6[BANK0 ] unsigned char 
 20552 ;;  ye              1    7[BANK0 ] unsigned char 
 20553 ;; Auto vars:     Size  Location     Type
 20554 ;;  xs              1    8[BANK0 ] unsigned char 
 20555 ;; Return value:  Size  Location     Type
 20556 ;;                  1    wreg      void 
 20557 ;; Registers used:
 20558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20559 ;; Tracked objects:
 20560 ;;		On entry : 0/0
 20561 ;;		On exit  : 0/0
 20562 ;;		Unchanged: 0/0
 20563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20564 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20567 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20568 ;;Total ram usage:        4 bytes
 20569 ;; Hardware stack levels used:    1
 20570 ;; Hardware stack levels required when called:    9
 20571 ;; This function calls:
 20572 ;;		_LCD_Write
 20573 ;; This function is called by:
 20574 ;;		_LCD_Fill
 20575 ;;		_LCD_FillRectangle
 20576 ;;		_LCD_DrawField
 20577 ;;		_RAM_Address_Set
 20578 ;;		_LCD_DrawPixel
 20579 ;; This function uses a non-reentrant model
 20580 ;;
 20581                           
 20582                           	psect	text97
 20583  01445C                     __ptext97:
 20584                           	opt stack 0
 20585  01445C                     _Set_Addr_Window:
 20586                           	opt stack 18
 20587                           
 20588                           ; BSR set to: 0
 20589                           ;incstack = 0
 20590                           ;Set_Addr_Window@xs stored from wreg
 20591  01445C  0100               	movlb	0	; () banked
 20592  01445E  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 20593                           
 20594                           ;LCD.c: 216: ys+=2;
 20595  014460  0E02               	movlw	2
 20596  014462  0100               	movlb	0	; () banked
 20597  014464  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20598                           
 20599                           ;LCD.c: 217: ye+=2;
 20600  014466  0E02               	movlw	2
 20601  014468  0100               	movlb	0	; () banked
 20602  01446A  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20603                           
 20604                           ;LCD.c: 218: xs+=3;
 20605  01446C  0E03               	movlw	3
 20606  01446E  0100               	movlb	0	; () banked
 20607  014470  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20608                           
 20609                           ;LCD.c: 219: xe+=3;
 20610  014472  0E03               	movlw	3
 20611  014474  0100               	movlb	0	; () banked
 20612  014476  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20613                           
 20614                           ; BSR set to: 0
 20615                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20616  014478  0E00               	movlw	0
 20617  01447A  0100               	movlb	0	; () banked
 20618  01447C  6F63               	movwf	LCD_Write@mode& (0+255),b
 20619  01447E  0E2A               	movlw	42
 20620  014480  ECC0  F0B0         	call	_LCD_Write
 20621                           
 20622                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20623  014484  0E01               	movlw	1
 20624  014486  0100               	movlb	0	; () banked
 20625  014488  6F63               	movwf	LCD_Write@mode& (0+255),b
 20626  01448A  0E00               	movlw	0
 20627  01448C  ECC0  F0B0         	call	_LCD_Write
 20628                           
 20629                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20630  014490  0E01               	movlw	1
 20631  014492  0100               	movlb	0	; () banked
 20632  014494  6F63               	movwf	LCD_Write@mode& (0+255),b
 20633  014496  0100               	movlb	0	; () banked
 20634  014498  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 20635  01449A  ECC0  F0B0         	call	_LCD_Write
 20636                           
 20637                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20638  01449E  0E01               	movlw	1
 20639  0144A0  0100               	movlb	0	; () banked
 20640  0144A2  6F63               	movwf	LCD_Write@mode& (0+255),b
 20641  0144A4  0E00               	movlw	0
 20642  0144A6  ECC0  F0B0         	call	_LCD_Write
 20643                           
 20644                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20645  0144AA  0E01               	movlw	1
 20646  0144AC  0100               	movlb	0	; () banked
 20647  0144AE  6F63               	movwf	LCD_Write@mode& (0+255),b
 20648  0144B0  0100               	movlb	0	; () banked
 20649  0144B2  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 20650  0144B4  ECC0  F0B0         	call	_LCD_Write
 20651                           
 20652                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20653  0144B8  0E00               	movlw	0
 20654  0144BA  0100               	movlb	0	; () banked
 20655  0144BC  6F63               	movwf	LCD_Write@mode& (0+255),b
 20656  0144BE  0E2B               	movlw	43
 20657  0144C0  ECC0  F0B0         	call	_LCD_Write
 20658                           
 20659                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20660  0144C4  0E01               	movlw	1
 20661  0144C6  0100               	movlb	0	; () banked
 20662  0144C8  6F63               	movwf	LCD_Write@mode& (0+255),b
 20663  0144CA  0E00               	movlw	0
 20664  0144CC  ECC0  F0B0         	call	_LCD_Write
 20665                           
 20666                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20667  0144D0  0E01               	movlw	1
 20668  0144D2  0100               	movlb	0	; () banked
 20669  0144D4  6F63               	movwf	LCD_Write@mode& (0+255),b
 20670  0144D6  0100               	movlb	0	; () banked
 20671  0144D8  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 20672  0144DA  ECC0  F0B0         	call	_LCD_Write
 20673                           
 20674                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20675  0144DE  0E01               	movlw	1
 20676  0144E0  0100               	movlb	0	; () banked
 20677  0144E2  6F63               	movwf	LCD_Write@mode& (0+255),b
 20678  0144E4  0E00               	movlw	0
 20679  0144E6  ECC0  F0B0         	call	_LCD_Write
 20680                           
 20681                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20682  0144EA  0E01               	movlw	1
 20683  0144EC  0100               	movlb	0	; () banked
 20684  0144EE  6F63               	movwf	LCD_Write@mode& (0+255),b
 20685  0144F0  0100               	movlb	0	; () banked
 20686  0144F2  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 20687  0144F4  ECC0  F0B0         	call	_LCD_Write
 20688                           
 20689                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20690  0144F8  0E00               	movlw	0
 20691  0144FA  0100               	movlb	0	; () banked
 20692  0144FC  6F63               	movwf	LCD_Write@mode& (0+255),b
 20693  0144FE  0E2C               	movlw	44
 20694  014500  ECC0  F0B0         	call	_LCD_Write
 20695  014504  0012               	return		;funcret
 20696  014506                     __end_of_Set_Addr_Window:
 20697                           	opt stack 0
 20698                           tosu	equ	0xFFF
 20699                           tosh	equ	0xFFE
 20700                           tosl	equ	0xFFD
 20701                           pclath	equ	0xFFA
 20702                           tblptru	equ	0xFF8
 20703                           tblptrh	equ	0xFF7
 20704                           tblptrl	equ	0xFF6
 20705                           tablat	equ	0xFF5
 20706                           prodh	equ	0xFF4
 20707                           prodl	equ	0xFF3
 20708                           intcon	equ	0xFF2
 20709                           postinc0	equ	0xFEE
 20710                           wreg	equ	0xFE8
 20711                           indf1	equ	0xFE7
 20712                           postdec1	equ	0xFE5
 20713                           fsr1h	equ	0xFE2
 20714                           fsr1l	equ	0xFE1
 20715                           indf2	equ	0xFDF
 20716                           postinc2	equ	0xFDE
 20717                           postdec2	equ	0xFDD
 20718                           plusw2	equ	0xFDB
 20719                           fsr2h	equ	0xFDA
 20720                           fsr2l	equ	0xFD9
 20721                           status	equ	0xFD8
 20722                           
 20723 ;; *************** function _LCD_Word_Write *****************
 20724 ;; Defined at:
 20725 ;;		line 198 in file "Library/LCD.c"
 20726 ;; Parameters:    Size  Location     Type
 20727 ;;  value           2    5[BANK0 ] unsigned short 
 20728 ;; Auto vars:     Size  Location     Type
 20729 ;;		None
 20730 ;; Return value:  Size  Location     Type
 20731 ;;                  1    wreg      void 
 20732 ;; Registers used:
 20733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20734 ;; Tracked objects:
 20735 ;;		On entry : 0/0
 20736 ;;		On exit  : 0/0
 20737 ;;		Unchanged: 0/0
 20738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20739 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20743 ;;Total ram usage:        2 bytes
 20744 ;; Hardware stack levels used:    1
 20745 ;; Hardware stack levels required when called:    9
 20746 ;; This function calls:
 20747 ;;		_LCD_Write
 20748 ;; This function is called by:
 20749 ;;		_LCD_Fill
 20750 ;;		_LCD_FillRectangle
 20751 ;;		_LCD_DrawField
 20752 ;;		_LCD_DrawPixel
 20753 ;; This function uses a non-reentrant model
 20754 ;;
 20755                           
 20756                           	psect	text98
 20757  016242                     __ptext98:
 20758                           	opt stack 0
 20759  016242                     _LCD_Word_Write:
 20760                           	opt stack 18
 20761                           
 20762                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20763                           
 20764                           ;incstack = 0
 20765  016242  0E01               	movlw	1
 20766  016244  0100               	movlb	0	; () banked
 20767  016246  6F63               	movwf	LCD_Write@mode& (0+255),b
 20768  016248  0100               	movlb	0	; () banked
 20769  01624A  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20770  01624C  ECC0  F0B0         	call	_LCD_Write
 20771                           
 20772                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20773  016250  0E01               	movlw	1
 20774  016252  0100               	movlb	0	; () banked
 20775  016254  6F63               	movwf	LCD_Write@mode& (0+255),b
 20776  016256  0100               	movlb	0	; () banked
 20777  016258  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 20778  01625A  ECC0  F0B0         	call	_LCD_Write
 20779  01625E  0012               	return		;funcret
 20780  016260                     __end_of_LCD_Word_Write:
 20781                           	opt stack 0
 20782                           tosu	equ	0xFFF
 20783                           tosh	equ	0xFFE
 20784                           tosl	equ	0xFFD
 20785                           pclath	equ	0xFFA
 20786                           tblptru	equ	0xFF8
 20787                           tblptrh	equ	0xFF7
 20788                           tblptrl	equ	0xFF6
 20789                           tablat	equ	0xFF5
 20790                           prodh	equ	0xFF4
 20791                           prodl	equ	0xFF3
 20792                           intcon	equ	0xFF2
 20793                           postinc0	equ	0xFEE
 20794                           wreg	equ	0xFE8
 20795                           indf1	equ	0xFE7
 20796                           postdec1	equ	0xFE5
 20797                           fsr1h	equ	0xFE2
 20798                           fsr1l	equ	0xFE1
 20799                           indf2	equ	0xFDF
 20800                           postinc2	equ	0xFDE
 20801                           postdec2	equ	0xFDD
 20802                           plusw2	equ	0xFDB
 20803                           fsr2h	equ	0xFDA
 20804                           fsr2l	equ	0xFD9
 20805                           status	equ	0xFD8
 20806                           
 20807 ;; *************** function _LCD_Write *****************
 20808 ;; Defined at:
 20809 ;;		line 67 in file "Library/LCD.c"
 20810 ;; Parameters:    Size  Location     Type
 20811 ;;  value           1    wreg     unsigned char 
 20812 ;;  mode            1    3[BANK0 ] enum E6761
 20813 ;; Auto vars:     Size  Location     Type
 20814 ;;  value           1    4[BANK0 ] unsigned char 
 20815 ;; Return value:  Size  Location     Type
 20816 ;;                  1    wreg      void 
 20817 ;; Registers used:
 20818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20819 ;; Tracked objects:
 20820 ;;		On entry : 0/0
 20821 ;;		On exit  : 0/0
 20822 ;;		Unchanged: 0/0
 20823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20824 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20828 ;;Total ram usage:        2 bytes
 20829 ;; Hardware stack levels used:    1
 20830 ;; Hardware stack levels required when called:    8
 20831 ;; This function calls:
 20832 ;;		_Mode_Set
 20833 ;;		_SPI_Send
 20834 ;; This function is called by:
 20835 ;;		_LCD_Init
 20836 ;;		_LCD_Word_Write
 20837 ;;		_Set_Addr_Window
 20838 ;;		_Set_Rotation
 20839 ;;		_LCD_WriteCMD
 20840 ;;		_LCD_WriteData
 20841 ;;		_LCD_Data_Write
 20842 ;;		_LCD_Data_Write_4k
 20843 ;;		_Invert_Display
 20844 ;; This function uses a non-reentrant model
 20845 ;;
 20846                           
 20847                           	psect	text99
 20848  016180                     __ptext99:
 20849                           	opt stack 0
 20850  016180                     _LCD_Write:
 20851                           	opt stack 18
 20852                           
 20853                           ;incstack = 0
 20854                           ;LCD_Write@value stored from wreg
 20855  016180  0100               	movlb	0	; () banked
 20856  016182  6F64               	movwf	LCD_Write@value& (0+255),b
 20857                           
 20858                           ;LCD.c: 89: Mode_Set(mode);
 20859  016184  0100               	movlb	0	; () banked
 20860  016186  5163               	movf	LCD_Write@mode& (0+255),w,b
 20861  016188  EC38  F0B2         	call	_Mode_Set
 20862                           
 20863                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 20864  01618C  0E70               	movlw	low _SPI2
 20865  01618E  0100               	movlb	0	; () banked
 20866  016190  6F60               	movwf	SPI_Send@pInput& (0+255),b
 20867  016192  0E03               	movlw	high _SPI2
 20868  016194  0100               	movlb	0	; () banked
 20869  016196  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 20870  016198  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 20871  01619C  EC8B  F0A9         	call	_SPI_Send	;wreg free
 20872  0161A0  0012               	return		;funcret
 20873  0161A2                     __end_of_LCD_Write:
 20874                           	opt stack 0
 20875                           tosu	equ	0xFFF
 20876                           tosh	equ	0xFFE
 20877                           tosl	equ	0xFFD
 20878                           pclath	equ	0xFFA
 20879                           tblptru	equ	0xFF8
 20880                           tblptrh	equ	0xFF7
 20881                           tblptrl	equ	0xFF6
 20882                           tablat	equ	0xFF5
 20883                           prodh	equ	0xFF4
 20884                           prodl	equ	0xFF3
 20885                           intcon	equ	0xFF2
 20886                           postinc0	equ	0xFEE
 20887                           wreg	equ	0xFE8
 20888                           indf1	equ	0xFE7
 20889                           postdec1	equ	0xFE5
 20890                           fsr1h	equ	0xFE2
 20891                           fsr1l	equ	0xFE1
 20892                           indf2	equ	0xFDF
 20893                           postinc2	equ	0xFDE
 20894                           postdec2	equ	0xFDD
 20895                           plusw2	equ	0xFDB
 20896                           fsr2h	equ	0xFDA
 20897                           fsr2l	equ	0xFD9
 20898                           status	equ	0xFD8
 20899                           
 20900 ;; *************** function _SPI_Send *****************
 20901 ;; Defined at:
 20902 ;;		line 226 in file "Library/SPI.c"
 20903 ;; Parameters:    Size  Location     Type
 20904 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20905 ;;		 -> SPI1(11), SPI2(11), 
 20906 ;;  pData           1    2[BANK0 ] unsigned char 
 20907 ;; Auto vars:     Size  Location     Type
 20908 ;;		None
 20909 ;; Return value:  Size  Location     Type
 20910 ;;                  1    wreg      unsigned char 
 20911 ;; Registers used:
 20912 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20913 ;; Tracked objects:
 20914 ;;		On entry : 0/0
 20915 ;;		On exit  : 0/0
 20916 ;;		Unchanged: 0/0
 20917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20918 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20921 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20922 ;;Total ram usage:        3 bytes
 20923 ;; Hardware stack levels used:    1
 20924 ;; Hardware stack levels required when called:    7
 20925 ;; This function calls:
 20926 ;;		Nothing
 20927 ;; This function is called by:
 20928 ;;		_LCD_Write
 20929 ;;		_OutSeg
 20930 ;; This function uses a non-reentrant model
 20931 ;;
 20932                           
 20933                           	psect	text100
 20934  015316                     __ptext100:
 20935                           	opt stack 0
 20936  015316                     _SPI_Send:
 20937                           	opt stack 20
 20938                           
 20939                           ;SPI.c: 253: switch (pInput->mChannel)
 20940                           
 20941                           ;incstack = 0
 20942  015316  D026               	goto	l678
 20943  015318                     
 20944                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 20945  015318  C0EE  FFD9         	movff	_PortC+4,fsr2l
 20946  01531C  C0EF  FFDA         	movff	_PortC+5,fsr2h
 20947  015320  0100               	movlb	0	; () banked
 20948  015322  94DF               	bcf	indf2,2,c
 20949                           
 20950                           ; BSR set to: 0
 20951                           ;SPI.c: 257: SSP1BUF = pData;
 20952  015324  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 20953  015328                     
 20954                           ; BSR set to: 0
 20955  015328  A0C7               	btfss	4039,0,c	;volatile
 20956  01532A  D7FE               	goto	l681
 20957                           
 20958                           ;SPI.c: 259: pData = SSP1BUF;
 20959  01532C  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 20960                           
 20961                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 20962  015330  C0EE  FFD9         	movff	_PortC+4,fsr2l
 20963  015334  C0EF  FFDA         	movff	_PortC+5,fsr2h
 20964  015338  0100               	movlb	0	; () banked
 20965  01533A  84DF               	bsf	indf2,2,c
 20966                           
 20967                           ; BSR set to: 0
 20968                           ;SPI.c: 261: return pData;
 20969                           ;	Return value of _SPI_Send is never used
 20970  01533C  0012               	return	
 20971  01533E                     
 20972                           ; BSR set to: 0
 20973                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 20974                           
 20975                           ; BSR set to: 0
 20976  01533E  C0E4  FFD9         	movff	_PortD+4,fsr2l
 20977  015342  C0E5  FFDA         	movff	_PortD+5,fsr2h
 20978  015346  0100               	movlb	0	; () banked
 20979  015348  9EDF               	bcf	indf2,7,c
 20980                           
 20981                           ; BSR set to: 0
 20982                           ;SPI.c: 264: SSP2BUF = pData;
 20983  01534A  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 20984  01534E                     
 20985                           ; BSR set to: 0
 20986  01534E  A06D               	btfss	3949,0,c	;volatile
 20987  015350  D7FE               	goto	l686
 20988                           
 20989                           ;SPI.c: 266: pData = SSP2BUF;
 20990  015352  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 20991                           
 20992                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 20993  015356  C0E4  FFD9         	movff	_PortD+4,fsr2l
 20994  01535A  C0E5  FFDA         	movff	_PortD+5,fsr2h
 20995  01535E  0100               	movlb	0	; () banked
 20996  015360  8EDF               	bsf	indf2,7,c
 20997                           
 20998                           ; BSR set to: 0
 20999                           ;SPI.c: 269: };
 21000                           
 21001                           ; BSR set to: 0
 21002                           ;SPI.c: 268: return pData;
 21003                           ;	Return value of _SPI_Send is never used
 21004  015362  0012               	return	
 21005  015364                     l678:
 21006                           
 21007                           ; BSR set to: 0
 21008  015364  0100               	movlb	0	; () banked
 21009  015366  EE20 F002          	lfsr	2,2
 21010  01536A  5160               	movf	SPI_Send@pInput& (0+255),w,b
 21011  01536C  26D9               	addwf	fsr2l,f,c
 21012  01536E  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 21013  015370  22DA               	addwfc	fsr2h,f,c
 21014  015372  50DF               	movf	indf2,w,c
 21015                           
 21016                           ; Switch size 1, requested type "space"
 21017                           ; Number of cases is 2, Range of values is 0 to 1
 21018                           ; switch strategies available:
 21019                           ; Name         Instructions Cycles
 21020                           ; simple_byte            7     4 (average)
 21021                           ;	Chosen strategy is simple_byte
 21022  015374  0A00               	xorlw	0	; case 0
 21023  015376  B4D8               	btfsc	status,2,c
 21024  015378  D7CF               	goto	l679
 21025  01537A  0A01               	xorlw	1	; case 1
 21026  01537C  A4D8               	btfss	status,2,c
 21027  01537E  0012               	return	
 21028  015380  D7DE               	goto	l684
 21029  015382                     __end_of_SPI_Send:
 21030                           	opt stack 0
 21031                           tosu	equ	0xFFF
 21032                           tosh	equ	0xFFE
 21033                           tosl	equ	0xFFD
 21034                           pclath	equ	0xFFA
 21035                           tblptru	equ	0xFF8
 21036                           tblptrh	equ	0xFF7
 21037                           tblptrl	equ	0xFF6
 21038                           tablat	equ	0xFF5
 21039                           prodh	equ	0xFF4
 21040                           prodl	equ	0xFF3
 21041                           intcon	equ	0xFF2
 21042                           postinc0	equ	0xFEE
 21043                           wreg	equ	0xFE8
 21044                           indf1	equ	0xFE7
 21045                           postdec1	equ	0xFE5
 21046                           fsr1h	equ	0xFE2
 21047                           fsr1l	equ	0xFE1
 21048                           indf2	equ	0xFDF
 21049                           postinc2	equ	0xFDE
 21050                           postdec2	equ	0xFDD
 21051                           plusw2	equ	0xFDB
 21052                           fsr2h	equ	0xFDA
 21053                           fsr2l	equ	0xFD9
 21054                           status	equ	0xFD8
 21055                           
 21056 ;; *************** function _Mode_Set *****************
 21057 ;; Defined at:
 21058 ;;		line 40 in file "Library/LCD.c"
 21059 ;; Parameters:    Size  Location     Type
 21060 ;;  pMode           1    wreg     enum E6761
 21061 ;; Auto vars:     Size  Location     Type
 21062 ;;  pMode           1    0[BANK0 ] enum E6761
 21063 ;; Return value:  Size  Location     Type
 21064 ;;                  1    wreg      void 
 21065 ;; Registers used:
 21066 ;;		wreg
 21067 ;; Tracked objects:
 21068 ;;		On entry : 0/0
 21069 ;;		On exit  : 0/0
 21070 ;;		Unchanged: 0/0
 21071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21075 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21076 ;;Total ram usage:        1 bytes
 21077 ;; Hardware stack levels used:    1
 21078 ;; Hardware stack levels required when called:    7
 21079 ;; This function calls:
 21080 ;;		Nothing
 21081 ;; This function is called by:
 21082 ;;		_LCD_Write
 21083 ;; This function uses a non-reentrant model
 21084 ;;
 21085                           
 21086                           	psect	text101
 21087  016470                     __ptext101:
 21088                           	opt stack 0
 21089  016470                     _Mode_Set:
 21090                           	opt stack 18
 21091                           
 21092                           ; BSR set to: 0
 21093                           ;incstack = 0
 21094                           ;Mode_Set@pMode stored from wreg
 21095  016470  0100               	movlb	0	; () banked
 21096  016472  6F60               	movwf	Mode_Set@pMode& (0+255),b
 21097                           
 21098                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21099  016474  0100               	movlb	0	; () banked
 21100  016476  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 21101  016478  D002               	bra	u8875
 21102  01647A  9E85               	bcf	3973,7,c	;volatile
 21103  01647C  D001               	bra	u8876
 21104  01647E                     u8875:
 21105  01647E  8E85               	bsf	3973,7,c	;volatile
 21106  016480                     u8876:
 21107  016480  0012               	return		;funcret
 21108  016482                     __end_of_Mode_Set:
 21109                           	opt stack 0
 21110                           tosu	equ	0xFFF
 21111                           tosh	equ	0xFFE
 21112                           tosl	equ	0xFFD
 21113                           pclath	equ	0xFFA
 21114                           tblptru	equ	0xFF8
 21115                           tblptrh	equ	0xFF7
 21116                           tblptrl	equ	0xFF6
 21117                           tablat	equ	0xFF5
 21118                           prodh	equ	0xFF4
 21119                           prodl	equ	0xFF3
 21120                           intcon	equ	0xFF2
 21121                           postinc0	equ	0xFEE
 21122                           wreg	equ	0xFE8
 21123                           indf1	equ	0xFE7
 21124                           postdec1	equ	0xFE5
 21125                           fsr1h	equ	0xFE2
 21126                           fsr1l	equ	0xFE1
 21127                           indf2	equ	0xFDF
 21128                           postinc2	equ	0xFDE
 21129                           postdec2	equ	0xFDD
 21130                           plusw2	equ	0xFDB
 21131                           fsr2h	equ	0xFDA
 21132                           fsr2l	equ	0xFD9
 21133                           status	equ	0xFD8
 21134                           
 21135 ;; *************** function _Configure_GPIOs *****************
 21136 ;; Defined at:
 21137 ;;		line 46 in file "Library/LCD.c"
 21138 ;; Parameters:    Size  Location     Type
 21139 ;;		None
 21140 ;; Auto vars:     Size  Location     Type
 21141 ;;		None
 21142 ;; Return value:  Size  Location     Type
 21143 ;;                  1    wreg      void 
 21144 ;; Registers used:
 21145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21146 ;; Tracked objects:
 21147 ;;		On entry : 0/0
 21148 ;;		On exit  : 0/0
 21149 ;;		Unchanged: 0/0
 21150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21155 ;;Total ram usage:        0 bytes
 21156 ;; Hardware stack levels used:    1
 21157 ;; Hardware stack levels required when called:   14
 21158 ;; This function calls:
 21159 ;;		_LCD_Reset
 21160 ;;		_Port_SetPinType
 21161 ;;		_SPI_Init
 21162 ;;		_SPI_MaxSpeed
 21163 ;; This function is called by:
 21164 ;;		_LCD_Init
 21165 ;; This function uses a non-reentrant model
 21166 ;;
 21167                           
 21168                           	psect	text102
 21169  01523A                     __ptext102:
 21170                           	opt stack 0
 21171  01523A                     _Configure_GPIOs:
 21172                           	opt stack 14
 21173                           
 21174                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 21175                           
 21176                           ;incstack = 0
 21177  01523A  0EB7               	movlw	low _PortF
 21178  01523C  0100               	movlb	0	; () banked
 21179  01523E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21180  015240  0E03               	movlw	high _PortF
 21181  015242  0100               	movlb	0	; () banked
 21182  015244  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21183  015246  0E07               	movlw	7
 21184  015248  0100               	movlb	0	; () banked
 21185  01524A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21186  01524C  0E03               	movlw	3
 21187  01524E  0100               	movlb	0	; () banked
 21188  015250  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21189  015252  EC5F  F093         	call	_Port_SetPinType	;wreg free
 21190                           
 21191                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 21192  015256  0EB7               	movlw	low _PortF
 21193  015258  0100               	movlb	0	; () banked
 21194  01525A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21195  01525C  0E03               	movlw	high _PortF
 21196  01525E  0100               	movlb	0	; () banked
 21197  015260  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21198  015262  0E06               	movlw	6
 21199  015264  0100               	movlb	0	; () banked
 21200  015266  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21201  015268  0E03               	movlw	3
 21202  01526A  0100               	movlb	0	; () banked
 21203  01526C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21204  01526E  EC5F  F093         	call	_Port_SetPinType	;wreg free
 21205                           
 21206                           ;LCD.c: 55: LCD_Reset();
 21207  015272  ECB9  F0AC         	call	_LCD_Reset	;wreg free
 21208                           
 21209                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 21210  015276  0EC0               	movlw	192
 21211  015278  0100               	movlb	0	; () banked
 21212  01527A  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 21213  01527C  0EC6               	movlw	198
 21214  01527E  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 21215  015280  0E2D               	movlw	45
 21216  015282  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 21217  015284  0E00               	movlw	0
 21218  015286  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 21219  015288  0E01               	movlw	1
 21220  01528A  0100               	movlb	0	; () banked
 21221  01528C  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 21222  01528E  0E01               	movlw	1
 21223  015290  0100               	movlb	0	; () banked
 21224  015292  6F92               	movwf	SPI_Init@pMode& (0+255),b
 21225  015294  EC53  F082         	call	_SPI_Init	;wreg free
 21226                           
 21227                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 21228  015298  0E70               	movlw	low _SPI2
 21229  01529A  0100               	movlb	0	; () banked
 21230  01529C  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 21231  01529E  0E03               	movlw	high _SPI2
 21232  0152A0  0100               	movlb	0	; () banked
 21233  0152A2  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 21234  0152A4  ECA9  F0A8         	call	_SPI_MaxSpeed	;wreg free
 21235  0152A8  0012               	return		;funcret
 21236  0152AA                     __end_of_Configure_GPIOs:
 21237                           	opt stack 0
 21238                           tosu	equ	0xFFF
 21239                           tosh	equ	0xFFE
 21240                           tosl	equ	0xFFD
 21241                           pclath	equ	0xFFA
 21242                           tblptru	equ	0xFF8
 21243                           tblptrh	equ	0xFF7
 21244                           tblptrl	equ	0xFF6
 21245                           tablat	equ	0xFF5
 21246                           prodh	equ	0xFF4
 21247                           prodl	equ	0xFF3
 21248                           intcon	equ	0xFF2
 21249                           postinc0	equ	0xFEE
 21250                           wreg	equ	0xFE8
 21251                           indf1	equ	0xFE7
 21252                           postdec1	equ	0xFE5
 21253                           fsr1h	equ	0xFE2
 21254                           fsr1l	equ	0xFE1
 21255                           indf2	equ	0xFDF
 21256                           postinc2	equ	0xFDE
 21257                           postdec2	equ	0xFDD
 21258                           plusw2	equ	0xFDB
 21259                           fsr2h	equ	0xFDA
 21260                           fsr2l	equ	0xFD9
 21261                           status	equ	0xFD8
 21262                           
 21263 ;; *************** function _SPI_MaxSpeed *****************
 21264 ;; Defined at:
 21265 ;;		line 201 in file "Library/SPI.c"
 21266 ;; Parameters:    Size  Location     Type
 21267 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 21268 ;;		 -> SPI2(11), 
 21269 ;; Auto vars:     Size  Location     Type
 21270 ;;		None
 21271 ;; Return value:  Size  Location     Type
 21272 ;;                  1    wreg      void 
 21273 ;; Registers used:
 21274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21275 ;; Tracked objects:
 21276 ;;		On entry : 0/0
 21277 ;;		On exit  : 0/0
 21278 ;;		Unchanged: 0/0
 21279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21280 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21283 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21284 ;;Total ram usage:        2 bytes
 21285 ;; Hardware stack levels used:    1
 21286 ;; Hardware stack levels required when called:    9
 21287 ;; This function calls:
 21288 ;;		_Byte_SetBit
 21289 ;;		_Byte_SetQuad
 21290 ;; This function is called by:
 21291 ;;		_Configure_GPIOs
 21292 ;; This function uses a non-reentrant model
 21293 ;;
 21294                           
 21295                           	psect	text103
 21296  015152                     __ptext103:
 21297                           	opt stack 0
 21298  015152                     _SPI_MaxSpeed:
 21299                           	opt stack 18
 21300                           
 21301                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21302                           
 21303                           ;incstack = 0
 21304  015152  0100               	movlb	0	; () banked
 21305  015154  EE20 F006          	lfsr	2,6
 21306  015158  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 21307  01515A  26D9               	addwf	fsr2l,f,c
 21308  01515C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 21309  01515E  22DA               	addwfc	fsr2h,f,c
 21310  015160  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21311  015164  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21312  015168  0E05               	movlw	5
 21313  01516A  0100               	movlb	0	; () banked
 21314  01516C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 21315  01516E  0E00               	movlw	0
 21316  015170  0100               	movlb	0	; () banked
 21317  015172  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21318  015174  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 21319                           
 21320                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 21321  015178  0100               	movlb	0	; () banked
 21322  01517A  EE20 F006          	lfsr	2,6
 21323  01517E  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 21324  015180  26D9               	addwf	fsr2l,f,c
 21325  015182  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 21326  015184  22DA               	addwfc	fsr2h,f,c
 21327  015186  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 21328  01518A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 21329  01518E  0E00               	movlw	0
 21330  015190  0100               	movlb	0	; () banked
 21331  015192  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21332  015194  0E00               	movlw	0
 21333  015196  0100               	movlb	0	; () banked
 21334  015198  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 21335  01519A  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 21336                           
 21337                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21338  01519E  0100               	movlb	0	; () banked
 21339  0151A0  EE20 F006          	lfsr	2,6
 21340  0151A4  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 21341  0151A6  26D9               	addwf	fsr2l,f,c
 21342  0151A8  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 21343  0151AA  22DA               	addwfc	fsr2h,f,c
 21344  0151AC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21345  0151B0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21346  0151B4  0E05               	movlw	5
 21347  0151B6  0100               	movlb	0	; () banked
 21348  0151B8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 21349  0151BA  0E01               	movlw	1
 21350  0151BC  0100               	movlb	0	; () banked
 21351  0151BE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21352  0151C0  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 21353  0151C4  0012               	return		;funcret
 21354  0151C6                     __end_of_SPI_MaxSpeed:
 21355                           	opt stack 0
 21356                           tosu	equ	0xFFF
 21357                           tosh	equ	0xFFE
 21358                           tosl	equ	0xFFD
 21359                           pclath	equ	0xFFA
 21360                           tblptru	equ	0xFF8
 21361                           tblptrh	equ	0xFF7
 21362                           tblptrl	equ	0xFF6
 21363                           tablat	equ	0xFF5
 21364                           prodh	equ	0xFF4
 21365                           prodl	equ	0xFF3
 21366                           intcon	equ	0xFF2
 21367                           postinc0	equ	0xFEE
 21368                           wreg	equ	0xFE8
 21369                           indf1	equ	0xFE7
 21370                           postdec1	equ	0xFE5
 21371                           fsr1h	equ	0xFE2
 21372                           fsr1l	equ	0xFE1
 21373                           indf2	equ	0xFDF
 21374                           postinc2	equ	0xFDE
 21375                           postdec2	equ	0xFDD
 21376                           plusw2	equ	0xFDB
 21377                           fsr2h	equ	0xFDA
 21378                           fsr2l	equ	0xFD9
 21379                           status	equ	0xFD8
 21380                           
 21381 ;; *************** function _LCD_Reset *****************
 21382 ;; Defined at:
 21383 ;;		line 95 in file "Library/LCD.c"
 21384 ;; Parameters:    Size  Location     Type
 21385 ;;		None
 21386 ;; Auto vars:     Size  Location     Type
 21387 ;;		None
 21388 ;; Return value:  Size  Location     Type
 21389 ;;                  1    wreg      void 
 21390 ;; Registers used:
 21391 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21392 ;; Tracked objects:
 21393 ;;		On entry : 0/0
 21394 ;;		On exit  : 0/0
 21395 ;;		Unchanged: 0/0
 21396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21401 ;;Total ram usage:        0 bytes
 21402 ;; Hardware stack levels used:    1
 21403 ;; Hardware stack levels required when called:   13
 21404 ;; This function calls:
 21405 ;;		_LED_Toggle
 21406 ;;		_Reset_High
 21407 ;;		_Reset_Low
 21408 ;;		_delay_ms
 21409 ;; This function is called by:
 21410 ;;		_Configure_GPIOs
 21411 ;; This function uses a non-reentrant model
 21412 ;;
 21413                           
 21414                           	psect	text104
 21415  015972                     __ptext104:
 21416                           	opt stack 0
 21417  015972                     _LCD_Reset:
 21418                           	opt stack 14
 21419                           
 21420                           ;LCD.c: 97: Reset_High();
 21421                           
 21422                           ;incstack = 0
 21423  015972  EC3F  F0B1         	call	_Reset_High	;wreg free
 21424                           
 21425                           ;LCD.c: 98: LED_Toggle(eLED2);
 21426  015976  0E01               	movlw	1
 21427  015978  EC50  F0AD         	call	_LED_Toggle
 21428                           
 21429                           ;LCD.c: 99: delay_ms(0x80);
 21430  01597C  0E00               	movlw	0
 21431  01597E  0100               	movlb	0	; () banked
 21432  015980  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 21433  015982  0E80               	movlw	128
 21434  015984  6F60               	movwf	delay_ms@ms& (0+255),b
 21435  015986  ECF6  F0A9         	call	_delay_ms	;wreg free
 21436                           
 21437                           ;LCD.c: 100: LED_Toggle(eLED2);
 21438  01598A  0E01               	movlw	1
 21439  01598C  EC50  F0AD         	call	_LED_Toggle
 21440                           
 21441                           ;LCD.c: 101: Reset_Low();
 21442  015990  EC30  F0B1         	call	_Reset_Low	;wreg free
 21443                           
 21444                           ;LCD.c: 102: delay_ms(0x80);
 21445  015994  0E00               	movlw	0
 21446  015996  0100               	movlb	0	; () banked
 21447  015998  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 21448  01599A  0E80               	movlw	128
 21449  01599C  6F60               	movwf	delay_ms@ms& (0+255),b
 21450  01599E  ECF6  F0A9         	call	_delay_ms	;wreg free
 21451                           
 21452                           ;LCD.c: 103: LED_Toggle(eLED2);
 21453  0159A2  0E01               	movlw	1
 21454  0159A4  EC50  F0AD         	call	_LED_Toggle
 21455                           
 21456                           ;LCD.c: 104: Reset_High();
 21457  0159A8  EC3F  F0B1         	call	_Reset_High	;wreg free
 21458                           
 21459                           ;LCD.c: 105: delay_ms(0x80);
 21460  0159AC  0E00               	movlw	0
 21461  0159AE  0100               	movlb	0	; () banked
 21462  0159B0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 21463  0159B2  0E80               	movlw	128
 21464  0159B4  6F60               	movwf	delay_ms@ms& (0+255),b
 21465  0159B6  ECF6  F0A9         	call	_delay_ms	;wreg free
 21466                           
 21467                           ;LCD.c: 106: LED_Toggle(eLED2);
 21468  0159BA  0E01               	movlw	1
 21469  0159BC  EC50  F0AD         	call	_LED_Toggle
 21470  0159C0  0012               	return		;funcret
 21471  0159C2                     __end_of_LCD_Reset:
 21472                           	opt stack 0
 21473                           tosu	equ	0xFFF
 21474                           tosh	equ	0xFFE
 21475                           tosl	equ	0xFFD
 21476                           pclath	equ	0xFFA
 21477                           tblptru	equ	0xFF8
 21478                           tblptrh	equ	0xFF7
 21479                           tblptrl	equ	0xFF6
 21480                           tablat	equ	0xFF5
 21481                           prodh	equ	0xFF4
 21482                           prodl	equ	0xFF3
 21483                           intcon	equ	0xFF2
 21484                           postinc0	equ	0xFEE
 21485                           wreg	equ	0xFE8
 21486                           indf1	equ	0xFE7
 21487                           postdec1	equ	0xFE5
 21488                           fsr1h	equ	0xFE2
 21489                           fsr1l	equ	0xFE1
 21490                           indf2	equ	0xFDF
 21491                           postinc2	equ	0xFDE
 21492                           postdec2	equ	0xFDD
 21493                           plusw2	equ	0xFDB
 21494                           fsr2h	equ	0xFDA
 21495                           fsr2l	equ	0xFD9
 21496                           status	equ	0xFD8
 21497                           
 21498 ;; *************** function _delay_ms *****************
 21499 ;; Defined at:
 21500 ;;		line 240 in file "Library/Types.c"
 21501 ;; Parameters:    Size  Location     Type
 21502 ;;  ms              2    0[BANK0 ] unsigned short 
 21503 ;; Auto vars:     Size  Location     Type
 21504 ;;  u               4    2[BANK0 ] volatile unsigned long 
 21505 ;; Return value:  Size  Location     Type
 21506 ;;                  1    wreg      void 
 21507 ;; Registers used:
 21508 ;;		wreg, status,2, status,0
 21509 ;; Tracked objects:
 21510 ;;		On entry : 0/0
 21511 ;;		On exit  : 0/0
 21512 ;;		Unchanged: 0/0
 21513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21514 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21515 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21517 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21518 ;;Total ram usage:        6 bytes
 21519 ;; Hardware stack levels used:    1
 21520 ;; Hardware stack levels required when called:    7
 21521 ;; This function calls:
 21522 ;;		Nothing
 21523 ;; This function is called by:
 21524 ;;		_LCD_Reset
 21525 ;;		_LCD_Init
 21526 ;;		_MXK_Init
 21527 ;;		_init
 21528 ;; This function uses a non-reentrant model
 21529 ;;
 21530                           
 21531                           	psect	text105
 21532  0153EC                     __ptext105:
 21533                           	opt stack 0
 21534  0153EC                     _delay_ms:
 21535                           	opt stack 22
 21536                           
 21537                           ;Types.c: 242: volatile unsigned long u;
 21538                           ;Types.c: 243: while (ms--)
 21539                           
 21540                           ;incstack = 0
 21541  0153EC  D01F               	goto	u9140
 21542  0153EE                     l12432:
 21543                           
 21544                           ;Types.c: 244: {
 21545                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 21546  0153EE  0E00               	movlw	0
 21547  0153F0  0100               	movlb	0	; () banked
 21548  0153F2  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 21549  0153F4  0E00               	movlw	0
 21550  0153F6  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 21551  0153F8  0E00               	movlw	0
 21552  0153FA  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 21553  0153FC  0E00               	movlw	0
 21554  0153FE  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 21555  015400                     l12434:
 21556                           
 21557                           ; BSR set to: 0
 21558  015400  0100               	movlb	0	; () banked
 21559  015402  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 21560  015404  0100               	movlb	0	; () banked
 21561  015406  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 21562  015408  E111               	bnz	l12440
 21563  01540A  0EB0               	movlw	176
 21564  01540C  0100               	movlb	0	; () banked
 21565  01540E  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 21566  015410  0E04               	movlw	4
 21567  015412  0100               	movlb	0	; () banked
 21568  015414  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 21569  015416  B0D8               	btfsc	status,0,c
 21570  015418  D009               	goto	u9140
 21571                           
 21572                           ; BSR set to: 0
 21573                           
 21574                           ; BSR set to: 0
 21575  01541A  F000               	nop		; ;# 
 21576  01541C  0E01               	movlw	1
 21577  01541E  0100               	movlb	0	; () banked
 21578  015420  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 21579  015422  0E00               	movlw	0
 21580  015424  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 21581  015426  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 21582  015428  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 21583  01542A  D7EA               	goto	l12434
 21584  01542C                     u9140:
 21585  01542C                     l12440:
 21586  01542C  0100               	movlb	0	; () banked
 21587  01542E  0760               	decf	delay_ms@ms& (0+255),f,b
 21588  015430  A0D8               	btfss	status,0,c
 21589  015432  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 21590  015434  0100               	movlb	0	; () banked
 21591  015436  2960               	incf	delay_ms@ms& (0+255),w,b
 21592  015438  E1DA               	bnz	l12432
 21593  01543A  0100               	movlb	0	; () banked
 21594  01543C  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 21595  01543E  A4D8               	btfss	status,2,c
 21596  015440  D7D6               	goto	l824
 21597                           
 21598                           ; BSR set to: 0
 21599                           ;Types.c: 251: }
 21600                           ;Types.c: 252: }
 21601                           ;Types.c: 253: u = 0x8008;
 21602                           
 21603                           ; BSR set to: 0
 21604  015442  0E08               	movlw	8
 21605  015444  0100               	movlb	0	; () banked
 21606  015446  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 21607  015448  0E80               	movlw	128
 21608  01544A  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 21609  01544C  0E00               	movlw	0
 21610  01544E  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 21611  015450  0E00               	movlw	0
 21612  015452  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 21613                           
 21614                           ; BSR set to: 0
 21615  015454  0012               	return		;funcret
 21616  015456                     __end_of_delay_ms:
 21617                           	opt stack 0
 21618                           tosu	equ	0xFFF
 21619                           tosh	equ	0xFFE
 21620                           tosl	equ	0xFFD
 21621                           pclath	equ	0xFFA
 21622                           tblptru	equ	0xFF8
 21623                           tblptrh	equ	0xFF7
 21624                           tblptrl	equ	0xFF6
 21625                           tablat	equ	0xFF5
 21626                           prodh	equ	0xFF4
 21627                           prodl	equ	0xFF3
 21628                           intcon	equ	0xFF2
 21629                           postinc0	equ	0xFEE
 21630                           wreg	equ	0xFE8
 21631                           indf1	equ	0xFE7
 21632                           postdec1	equ	0xFE5
 21633                           fsr1h	equ	0xFE2
 21634                           fsr1l	equ	0xFE1
 21635                           indf2	equ	0xFDF
 21636                           postinc2	equ	0xFDE
 21637                           postdec2	equ	0xFDD
 21638                           plusw2	equ	0xFDB
 21639                           fsr2h	equ	0xFDA
 21640                           fsr2l	equ	0xFD9
 21641                           status	equ	0xFD8
 21642                           
 21643 ;; *************** function _Reset_Low *****************
 21644 ;; Defined at:
 21645 ;;		line 32 in file "Library/LCD.c"
 21646 ;; Parameters:    Size  Location     Type
 21647 ;;		None
 21648 ;; Auto vars:     Size  Location     Type
 21649 ;;		None
 21650 ;; Return value:  Size  Location     Type
 21651 ;;                  1    wreg      void 
 21652 ;; Registers used:
 21653 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21654 ;; Tracked objects:
 21655 ;;		On entry : 0/0
 21656 ;;		On exit  : 0/0
 21657 ;;		Unchanged: 0/0
 21658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21663 ;;Total ram usage:        0 bytes
 21664 ;; Hardware stack levels used:    1
 21665 ;; Hardware stack levels required when called:   11
 21666 ;; This function calls:
 21667 ;;		_Port_SetPin
 21668 ;; This function is called by:
 21669 ;;		_LCD_Reset
 21670 ;; This function uses a non-reentrant model
 21671 ;;
 21672                           
 21673                           	psect	text106
 21674  016260                     __ptext106:
 21675                           	opt stack 0
 21676  016260                     _Reset_Low:
 21677                           	opt stack 15
 21678                           
 21679                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 21680                           
 21681                           ; BSR set to: 0
 21682                           ;incstack = 0
 21683  016260  0EB7               	movlw	low _PortF
 21684  016262  0100               	movlb	0	; () banked
 21685  016264  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21686  016266  0E03               	movlw	high _PortF
 21687  016268  0100               	movlb	0	; () banked
 21688  01626A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21689  01626C  0E06               	movlw	6
 21690  01626E  0100               	movlb	0	; () banked
 21691  016270  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21692  016272  0E01               	movlw	1
 21693  016274  0100               	movlb	0	; () banked
 21694  016276  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21695  016278  ECE9  F09E         	call	_Port_SetPin	;wreg free
 21696  01627C  0012               	return		;funcret
 21697  01627E                     __end_of_Reset_Low:
 21698                           	opt stack 0
 21699                           tosu	equ	0xFFF
 21700                           tosh	equ	0xFFE
 21701                           tosl	equ	0xFFD
 21702                           pclath	equ	0xFFA
 21703                           tblptru	equ	0xFF8
 21704                           tblptrh	equ	0xFF7
 21705                           tblptrl	equ	0xFF6
 21706                           tablat	equ	0xFF5
 21707                           prodh	equ	0xFF4
 21708                           prodl	equ	0xFF3
 21709                           intcon	equ	0xFF2
 21710                           postinc0	equ	0xFEE
 21711                           wreg	equ	0xFE8
 21712                           indf1	equ	0xFE7
 21713                           postdec1	equ	0xFE5
 21714                           fsr1h	equ	0xFE2
 21715                           fsr1l	equ	0xFE1
 21716                           indf2	equ	0xFDF
 21717                           postinc2	equ	0xFDE
 21718                           postdec2	equ	0xFDD
 21719                           plusw2	equ	0xFDB
 21720                           fsr2h	equ	0xFDA
 21721                           fsr2l	equ	0xFD9
 21722                           status	equ	0xFD8
 21723                           
 21724 ;; *************** function _Reset_High *****************
 21725 ;; Defined at:
 21726 ;;		line 36 in file "Library/LCD.c"
 21727 ;; Parameters:    Size  Location     Type
 21728 ;;		None
 21729 ;; Auto vars:     Size  Location     Type
 21730 ;;		None
 21731 ;; Return value:  Size  Location     Type
 21732 ;;                  1    wreg      void 
 21733 ;; Registers used:
 21734 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21735 ;; Tracked objects:
 21736 ;;		On entry : 0/0
 21737 ;;		On exit  : 0/0
 21738 ;;		Unchanged: 0/0
 21739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21744 ;;Total ram usage:        0 bytes
 21745 ;; Hardware stack levels used:    1
 21746 ;; Hardware stack levels required when called:   11
 21747 ;; This function calls:
 21748 ;;		_Port_SetPin
 21749 ;; This function is called by:
 21750 ;;		_LCD_Reset
 21751 ;; This function uses a non-reentrant model
 21752 ;;
 21753                           
 21754                           	psect	text107
 21755  01627E                     __ptext107:
 21756                           	opt stack 0
 21757  01627E                     _Reset_High:
 21758                           	opt stack 15
 21759                           
 21760                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 21761                           
 21762                           ;incstack = 0
 21763  01627E  0EB7               	movlw	low _PortF
 21764  016280  0100               	movlb	0	; () banked
 21765  016282  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21766  016284  0E03               	movlw	high _PortF
 21767  016286  0100               	movlb	0	; () banked
 21768  016288  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21769  01628A  0E06               	movlw	6
 21770  01628C  0100               	movlb	0	; () banked
 21771  01628E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21772  016290  0E00               	movlw	0
 21773  016292  0100               	movlb	0	; () banked
 21774  016294  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21775  016296  ECE9  F09E         	call	_Port_SetPin	;wreg free
 21776  01629A  0012               	return		;funcret
 21777  01629C                     __end_of_Reset_High:
 21778                           	opt stack 0
 21779                           tosu	equ	0xFFF
 21780                           tosh	equ	0xFFE
 21781                           tosl	equ	0xFFD
 21782                           pclath	equ	0xFFA
 21783                           tblptru	equ	0xFF8
 21784                           tblptrh	equ	0xFF7
 21785                           tblptrl	equ	0xFF6
 21786                           tablat	equ	0xFF5
 21787                           prodh	equ	0xFF4
 21788                           prodl	equ	0xFF3
 21789                           intcon	equ	0xFF2
 21790                           postinc0	equ	0xFEE
 21791                           wreg	equ	0xFE8
 21792                           indf1	equ	0xFE7
 21793                           postdec1	equ	0xFE5
 21794                           fsr1h	equ	0xFE2
 21795                           fsr1l	equ	0xFE1
 21796                           indf2	equ	0xFDF
 21797                           postinc2	equ	0xFDE
 21798                           postdec2	equ	0xFDD
 21799                           plusw2	equ	0xFDB
 21800                           fsr2h	equ	0xFDA
 21801                           fsr2l	equ	0xFD9
 21802                           status	equ	0xFD8
 21803                           
 21804 ;; *************** function _LED_Toggle *****************
 21805 ;; Defined at:
 21806 ;;		line 50 in file "Library/LED.c"
 21807 ;; Parameters:    Size  Location     Type
 21808 ;;  pLED            1    wreg     enum E6739
 21809 ;; Auto vars:     Size  Location     Type
 21810 ;;  pLED            1   24[BANK0 ] enum E6739
 21811 ;; Return value:  Size  Location     Type
 21812 ;;                  1    wreg      void 
 21813 ;; Registers used:
 21814 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21815 ;; Tracked objects:
 21816 ;;		On entry : 0/0
 21817 ;;		On exit  : 0/0
 21818 ;;		Unchanged: 0/0
 21819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21823 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21824 ;;Total ram usage:        1 bytes
 21825 ;; Hardware stack levels used:    1
 21826 ;; Hardware stack levels required when called:   12
 21827 ;; This function calls:
 21828 ;;		_Port_TogglePin
 21829 ;; This function is called by:
 21830 ;;		_LCD_Reset
 21831 ;;		_Event_DIPSwitch
 21832 ;;		_Event_TestButton
 21833 ;;		_Event_ADCSequenceComplete
 21834 ;;		_Event_HMI_DIPSwitch
 21835 ;;		_Event_HMI_LeftButton
 21836 ;;		_Event_HMI_RightButton
 21837 ;;		_Event_HMI_UpButton
 21838 ;;		_Event_HMI_DownButton
 21839 ;; This function uses a non-reentrant model
 21840 ;;
 21841                           
 21842                           	psect	text108
 21843  015AA0                     __ptext108:
 21844                           	opt stack 0
 21845  015AA0                     _LED_Toggle:
 21846                           	opt stack 14
 21847                           
 21848                           ;incstack = 0
 21849                           ;LED_Toggle@pLED stored from wreg
 21850  015AA0  0100               	movlb	0	; () banked
 21851  015AA2  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 21852                           
 21853                           ;LED.c: 52: switch (pLED)
 21854  015AA4  D018               	goto	l234
 21855  015AA6                     
 21856                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 21857  015AA6  0EEA               	movlw	low _PortC
 21858  015AA8  0100               	movlb	0	; () banked
 21859  015AAA  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21860  015AAC  0E00               	movlw	high _PortC
 21861  015AAE  0100               	movlb	0	; () banked
 21862  015AB0  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21863  015AB2  0E00               	movlw	0
 21864  015AB4  0100               	movlb	0	; () banked
 21865  015AB6  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21866  015AB8  ECE4  F0AF         	call	_Port_TogglePin	;wreg free
 21867                           
 21868                           ;LED.c: 56: break;
 21869  015ABC  0012               	return	
 21870  015ABE                     
 21871                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 21872  015ABE  0EEA               	movlw	low _PortC
 21873  015AC0  0100               	movlb	0	; () banked
 21874  015AC2  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21875  015AC4  0E00               	movlw	high _PortC
 21876  015AC6  0100               	movlb	0	; () banked
 21877  015AC8  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21878  015ACA  0E01               	movlw	1
 21879  015ACC  0100               	movlb	0	; () banked
 21880  015ACE  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21881  015AD0  ECE4  F0AF         	call	_Port_TogglePin	;wreg free
 21882                           
 21883                           ;LED.c: 60: }
 21884                           
 21885                           ;LED.c: 59: break;
 21886  015AD4  0012               	return	
 21887  015AD6                     l234:
 21888  015AD6  0100               	movlb	0	; () banked
 21889  015AD8  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 21890                           
 21891                           ; Switch size 1, requested type "space"
 21892                           ; Number of cases is 2, Range of values is 0 to 1
 21893                           ; switch strategies available:
 21894                           ; Name         Instructions Cycles
 21895                           ; simple_byte            7     4 (average)
 21896                           ;	Chosen strategy is simple_byte
 21897  015ADA  0A00               	xorlw	0	; case 0
 21898  015ADC  B4D8               	btfsc	status,2,c
 21899  015ADE  D7E3               	goto	l235
 21900  015AE0  0A01               	xorlw	1	; case 1
 21901  015AE2  A4D8               	btfss	status,2,c
 21902  015AE4  0012               	return	
 21903  015AE6  D7EB               	goto	l237
 21904  015AE8                     __end_of_LED_Toggle:
 21905                           	opt stack 0
 21906                           tosu	equ	0xFFF
 21907                           tosh	equ	0xFFE
 21908                           tosl	equ	0xFFD
 21909                           pclath	equ	0xFFA
 21910                           tblptru	equ	0xFF8
 21911                           tblptrh	equ	0xFF7
 21912                           tblptrl	equ	0xFF6
 21913                           tablat	equ	0xFF5
 21914                           prodh	equ	0xFF4
 21915                           prodl	equ	0xFF3
 21916                           intcon	equ	0xFF2
 21917                           postinc0	equ	0xFEE
 21918                           wreg	equ	0xFE8
 21919                           indf1	equ	0xFE7
 21920                           postdec1	equ	0xFE5
 21921                           fsr1h	equ	0xFE2
 21922                           fsr1l	equ	0xFE1
 21923                           indf2	equ	0xFDF
 21924                           postinc2	equ	0xFDE
 21925                           postdec2	equ	0xFDD
 21926                           plusw2	equ	0xFDB
 21927                           fsr2h	equ	0xFDA
 21928                           fsr2l	equ	0xFD9
 21929                           status	equ	0xFD8
 21930                           
 21931 ;; *************** function _Port_TogglePin *****************
 21932 ;; Defined at:
 21933 ;;		line 278 in file "Library/Port.c"
 21934 ;; Parameters:    Size  Location     Type
 21935 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 21936 ;;		 -> PortC(10), 
 21937 ;;  pPin            1   22[BANK0 ] enum E6750
 21938 ;; Auto vars:     Size  Location     Type
 21939 ;;  Value           1   23[BANK0 ] unsigned char 
 21940 ;; Return value:  Size  Location     Type
 21941 ;;                  1    wreg      void 
 21942 ;; Registers used:
 21943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21944 ;; Tracked objects:
 21945 ;;		On entry : 0/0
 21946 ;;		On exit  : 0/0
 21947 ;;		Unchanged: 0/0
 21948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21949 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21952 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21953 ;;Total ram usage:        4 bytes
 21954 ;; Hardware stack levels used:    1
 21955 ;; Hardware stack levels required when called:   11
 21956 ;; This function calls:
 21957 ;;		_Port_GetPin
 21958 ;;		_Port_SetPin
 21959 ;; This function is called by:
 21960 ;;		_LED_Toggle
 21961 ;; This function uses a non-reentrant model
 21962 ;;
 21963                           
 21964                           	psect	text109
 21965  015FC8                     __ptext109:
 21966                           	opt stack 0
 21967  015FC8                     _Port_TogglePin:
 21968                           	opt stack 14
 21969                           
 21970                           ;Port.c: 280: UINT8 Value;
 21971                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 21972                           
 21973                           ;incstack = 0
 21974  015FC8  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 21975  015FCC  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 21976  015FD0  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 21977  015FD4  EC01  F0AE         	call	_Port_GetPin	;wreg free
 21978  015FD8  0100               	movlb	0	; () banked
 21979  015FDA  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 21980                           
 21981                           ; BSR set to: 0
 21982                           ;Port.c: 282: Value ^= 0x01;
 21983  015FDC  0E01               	movlw	1
 21984  015FDE  0100               	movlb	0	; () banked
 21985  015FE0  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 21986                           
 21987                           ; BSR set to: 0
 21988                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 21989  015FE2  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 21990  015FE6  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 21991  015FEA  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 21992  015FEE  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 21993  015FF2  ECE9  F09E         	call	_Port_SetPin	;wreg free
 21994  015FF6  0012               	return		;funcret
 21995  015FF8                     __end_of_Port_TogglePin:
 21996                           	opt stack 0
 21997                           tosu	equ	0xFFF
 21998                           tosh	equ	0xFFE
 21999                           tosl	equ	0xFFD
 22000                           pclath	equ	0xFFA
 22001                           tblptru	equ	0xFF8
 22002                           tblptrh	equ	0xFF7
 22003                           tblptrl	equ	0xFF6
 22004                           tablat	equ	0xFF5
 22005                           prodh	equ	0xFF4
 22006                           prodl	equ	0xFF3
 22007                           intcon	equ	0xFF2
 22008                           postinc0	equ	0xFEE
 22009                           wreg	equ	0xFE8
 22010                           indf1	equ	0xFE7
 22011                           postdec1	equ	0xFE5
 22012                           fsr1h	equ	0xFE2
 22013                           fsr1l	equ	0xFE1
 22014                           indf2	equ	0xFDF
 22015                           postinc2	equ	0xFDE
 22016                           postdec2	equ	0xFDD
 22017                           plusw2	equ	0xFDB
 22018                           fsr2h	equ	0xFDA
 22019                           fsr2l	equ	0xFD9
 22020                           status	equ	0xFD8
 22021                           
 22022 ;; *************** function _Port_SetPin *****************
 22023 ;; Defined at:
 22024 ;;		line 247 in file "Library/Port.c"
 22025 ;; Parameters:    Size  Location     Type
 22026 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 22027 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 22028 ;;  pPin            1   17[BANK0 ] enum E6750
 22029 ;;  pValue          1   18[BANK0 ] unsigned char 
 22030 ;; Auto vars:     Size  Location     Type
 22031 ;;  Type            1   19[BANK0 ] enum E6795
 22032 ;; Return value:  Size  Location     Type
 22033 ;;                  1    wreg      void 
 22034 ;; Registers used:
 22035 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22036 ;; Tracked objects:
 22037 ;;		On entry : 0/0
 22038 ;;		On exit  : 0/0
 22039 ;;		Unchanged: 0/0
 22040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22041 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22044 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22045 ;;Total ram usage:        5 bytes
 22046 ;; Hardware stack levels used:    1
 22047 ;; Hardware stack levels required when called:   10
 22048 ;; This function calls:
 22049 ;;		_Byte_SetBit
 22050 ;;		_Word_GetPair
 22051 ;; This function is called by:
 22052 ;;		_Reset_Low
 22053 ;;		_Reset_High
 22054 ;;		_LED_Set
 22055 ;;		_Port_TogglePin
 22056 ;;		_Motor_Init
 22057 ;;		_Motor_Step
 22058 ;;		_MXK_Init
 22059 ;; This function uses a non-reentrant model
 22060 ;;
 22061                           
 22062                           	psect	text110
 22063  013DD2                     __ptext110:
 22064                           	opt stack 0
 22065  013DD2                     _Port_SetPin:
 22066                           	opt stack 17
 22067                           
 22068                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 22069                           
 22070                           ;incstack = 0
 22071  013DD2  0E08               	movlw	8
 22072  013DD4  0100               	movlb	0	; () banked
 22073  013DD6  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 22074  013DD8  0100               	movlb	0	; () banked
 22075  013DDA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 22076  013DDC  0E00               	movlw	0
 22077  013DDE  0100               	movlb	0	; () banked
 22078  013DE0  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 22079  013DE2  0100               	movlb	0	; () banked
 22080  013DE4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 22081  013DE6  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 22082  013DEA  EC04  F0AF         	call	_Word_GetPair	;wreg free
 22083  013DEE  0100               	movlb	0	; () banked
 22084  013DF0  6F73               	movwf	Port_SetPin@Type& (0+255),b
 22085                           
 22086                           ;Port.c: 250: switch (Type)
 22087  013DF2  D042               	goto	l427
 22088  013DF4                     
 22089                           ; BSR set to: 0
 22090                           ;Port.c: 256: pValue &= 1;
 22091                           
 22092                           ; BSR set to: 0
 22093  013DF4  0E01               	movlw	1
 22094  013DF6  0100               	movlb	0	; () banked
 22095  013DF8  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22096                           
 22097                           ; BSR set to: 0
 22098                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22099  013DFA  0100               	movlb	0	; () banked
 22100  013DFC  EE20 F002          	lfsr	2,2
 22101  013E00  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22102  013E02  26D9               	addwf	fsr2l,f,c
 22103  013E04  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22104  013E06  22DA               	addwfc	fsr2h,f,c
 22105  013E08  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22106  013E0C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22107  013E10  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22108  013E14  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22109  013E18  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22110                           
 22111                           ;Port.c: 258: break;
 22112  013E1C  0012               	return	
 22113  013E1E                     
 22114                           ;Port.c: 261: pValue &= 1;
 22115  013E1E  0E01               	movlw	1
 22116  013E20  0100               	movlb	0	; () banked
 22117  013E22  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22118                           
 22119                           ;Port.c: 262: pValue ^= 1;
 22120  013E24  0E01               	movlw	1
 22121  013E26  0100               	movlb	0	; () banked
 22122  013E28  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 22123                           
 22124                           ; BSR set to: 0
 22125                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22126  013E2A  0100               	movlb	0	; () banked
 22127  013E2C  EE20 F002          	lfsr	2,2
 22128  013E30  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22129  013E32  26D9               	addwf	fsr2l,f,c
 22130  013E34  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22131  013E36  22DA               	addwfc	fsr2h,f,c
 22132  013E38  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22133  013E3C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22134  013E40  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22135  013E44  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22136  013E48  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22137                           
 22138                           ;Port.c: 264: break;
 22139  013E4C  0012               	return	
 22140  013E4E                     
 22141                           ;Port.c: 266: pValue &= 1;
 22142  013E4E  0E01               	movlw	1
 22143  013E50  0100               	movlb	0	; () banked
 22144  013E52  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22145                           
 22146                           ; BSR set to: 0
 22147                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 22148  013E54  0100               	movlb	0	; () banked
 22149  013E56  EE20 F004          	lfsr	2,4
 22150  013E5A  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22151  013E5C  26D9               	addwf	fsr2l,f,c
 22152  013E5E  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22153  013E60  22DA               	addwfc	fsr2h,f,c
 22154  013E62  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22155  013E66  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22156  013E6A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22157  013E6E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22158  013E72  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22159                           
 22160                           ;Port.c: 269: }
 22161                           
 22162                           ;Port.c: 268: break;
 22163  013E76  0012               	return	
 22164  013E78                     l427:
 22165  013E78  0100               	movlb	0	; () banked
 22166  013E7A  5173               	movf	Port_SetPin@Type& (0+255),w,b
 22167                           
 22168                           ; Switch size 1, requested type "space"
 22169                           ; Number of cases is 4, Range of values is 0 to 3
 22170                           ; switch strategies available:
 22171                           ; Name         Instructions Cycles
 22172                           ; simple_byte           13     7 (average)
 22173                           ;	Chosen strategy is simple_byte
 22174  013E7C  0A00               	xorlw	0	; case 0
 22175  013E7E  B4D8               	btfsc	status,2,c
 22176  013E80  0012               	return	
 22177  013E82  0A01               	xorlw	1	; case 1
 22178  013E84  B4D8               	btfsc	status,2,c
 22179  013E86  D7B6               	goto	l430
 22180  013E88  0A03               	xorlw	3	; case 2
 22181  013E8A  B4D8               	btfsc	status,2,c
 22182  013E8C  D7C8               	goto	l432
 22183  013E8E  0A01               	xorlw	1	; case 3
 22184  013E90  A4D8               	btfss	status,2,c
 22185  013E92  0012               	return	
 22186  013E94  D7DC               	goto	l433
 22187  013E96                     __end_of_Port_SetPin:
 22188                           	opt stack 0
 22189                           tosu	equ	0xFFF
 22190                           tosh	equ	0xFFE
 22191                           tosl	equ	0xFFD
 22192                           pclath	equ	0xFFA
 22193                           tblptru	equ	0xFF8
 22194                           tblptrh	equ	0xFF7
 22195                           tblptrl	equ	0xFF6
 22196                           tablat	equ	0xFF5
 22197                           prodh	equ	0xFF4
 22198                           prodl	equ	0xFF3
 22199                           intcon	equ	0xFF2
 22200                           postinc0	equ	0xFEE
 22201                           wreg	equ	0xFE8
 22202                           indf1	equ	0xFE7
 22203                           postdec1	equ	0xFE5
 22204                           fsr1h	equ	0xFE2
 22205                           fsr1l	equ	0xFE1
 22206                           indf2	equ	0xFDF
 22207                           postinc2	equ	0xFDE
 22208                           postdec2	equ	0xFDD
 22209                           plusw2	equ	0xFDB
 22210                           fsr2h	equ	0xFDA
 22211                           fsr2l	equ	0xFD9
 22212                           status	equ	0xFD8
 22213                           
 22214 ;; *************** function _ISR_Enable *****************
 22215 ;; Defined at:
 22216 ;;		line 27 in file "Library/ISR.c"
 22217 ;; Parameters:    Size  Location     Type
 22218 ;;		None
 22219 ;; Auto vars:     Size  Location     Type
 22220 ;;		None
 22221 ;; Return value:  Size  Location     Type
 22222 ;;                  1    wreg      void 
 22223 ;; Registers used:
 22224 ;;		None
 22225 ;; Tracked objects:
 22226 ;;		On entry : 0/0
 22227 ;;		On exit  : 0/0
 22228 ;;		Unchanged: 0/0
 22229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22234 ;;Total ram usage:        0 bytes
 22235 ;; Hardware stack levels used:    1
 22236 ;; Hardware stack levels required when called:    7
 22237 ;; This function calls:
 22238 ;;		Nothing
 22239 ;; This function is called by:
 22240 ;;		_init
 22241 ;; This function uses a non-reentrant model
 22242 ;;
 22243                           
 22244                           	psect	text111
 22245  01651A                     __ptext111:
 22246                           	opt stack 0
 22247  01651A                     _ISR_Enable:
 22248                           	opt stack 22
 22249                           
 22250                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 22251                           
 22252                           ;incstack = 0
 22253  01651A  8CF2               	bsf	intcon,6,c	;volatile
 22254                           
 22255                           ;ISR.c: 30: INTCONbits.GIE = 1;
 22256  01651C  8EF2               	bsf	intcon,7,c	;volatile
 22257                           
 22258                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 22259  01651E  88F2               	bsf	intcon,4,c	;volatile
 22260                           
 22261                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 22262  016520  92F2               	bcf	intcon,1,c	;volatile
 22263  016522  0012               	return		;funcret
 22264  016524                     __end_of_ISR_Enable:
 22265                           	opt stack 0
 22266                           tosu	equ	0xFFF
 22267                           tosh	equ	0xFFE
 22268                           tosl	equ	0xFFD
 22269                           pclath	equ	0xFFA
 22270                           tblptru	equ	0xFF8
 22271                           tblptrh	equ	0xFF7
 22272                           tblptrl	equ	0xFF6
 22273                           tablat	equ	0xFF5
 22274                           prodh	equ	0xFF4
 22275                           prodl	equ	0xFF3
 22276                           intcon	equ	0xFF2
 22277                           postinc0	equ	0xFEE
 22278                           wreg	equ	0xFE8
 22279                           indf1	equ	0xFE7
 22280                           postdec1	equ	0xFE5
 22281                           fsr1h	equ	0xFE2
 22282                           fsr1l	equ	0xFE1
 22283                           indf2	equ	0xFDF
 22284                           postinc2	equ	0xFDE
 22285                           postdec2	equ	0xFDD
 22286                           plusw2	equ	0xFDB
 22287                           fsr2h	equ	0xFDA
 22288                           fsr2l	equ	0xFD9
 22289                           status	equ	0xFD8
 22290                           
 22291 ;; *************** function _HMI_Init *****************
 22292 ;; Defined at:
 22293 ;;		line 104 in file "HMI.c"
 22294 ;; Parameters:    Size  Location     Type
 22295 ;;		None
 22296 ;; Auto vars:     Size  Location     Type
 22297 ;;  in              2   72[BANK0 ] unsigned short 
 22298 ;; Return value:  Size  Location     Type
 22299 ;;                  1    wreg      void 
 22300 ;; Registers used:
 22301 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22302 ;; Tracked objects:
 22303 ;;		On entry : 0/0
 22304 ;;		On exit  : 0/0
 22305 ;;		Unchanged: 0/0
 22306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22308 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22311 ;;Total ram usage:        2 bytes
 22312 ;; Hardware stack levels used:    1
 22313 ;; Hardware stack levels required when called:   16
 22314 ;; This function calls:
 22315 ;;		_Button_Init
 22316 ;;		_SPI_Init
 22317 ;;		_SPI_MinSpeed
 22318 ;; This function is called by:
 22319 ;;		_init
 22320 ;; This function uses a non-reentrant model
 22321 ;;
 22322                           
 22323                           	psect	text112
 22324  012134                     __ptext112:
 22325                           	opt stack 0
 22326  012134                     _HMI_Init:
 22327                           	opt stack 13
 22328                           
 22329                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 22330                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 22331                           
 22332                           ;incstack = 0
 22333  012134  0E5B               	movlw	low (_HMIBoard+48)
 22334  012136  0100               	movlb	0	; () banked
 22335  012138  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22336  01213A  0E03               	movlw	high (_HMIBoard+48)
 22337  01213C  0100               	movlb	0	; () banked
 22338  01213E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22339  012140  0E00               	movlw	0
 22340  012142  0100               	movlb	0	; () banked
 22341  012144  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22342  012146  0E02               	movlw	2
 22343  012148  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22344  01214A  0E50               	movlw	low _HMI_InitButtons
 22345  01214C  0100               	movlb	0	; () banked
 22346  01214E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22347  012150  0E65               	movlw	high _HMI_InitButtons
 22348  012152  0100               	movlb	0	; () banked
 22349  012154  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22350  012156  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22351  012158  0100               	movlb	0	; () banked
 22352  01215A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22353  01215C  0E94               	movlw	low _HMI_DIPSwitch
 22354  01215E  0100               	movlb	0	; () banked
 22355  012160  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22356  012162  0E63               	movlw	high _HMI_DIPSwitch
 22357  012164  0100               	movlb	0	; () banked
 22358  012166  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22359  012168  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 22360  01216A  0100               	movlb	0	; () banked
 22361  01216C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22362  01216E  0E68               	movlw	low _Event_NULL
 22363  012170  0100               	movlb	0	; () banked
 22364  012172  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22365  012174  0E65               	movlw	high _Event_NULL
 22366  012176  0100               	movlb	0	; () banked
 22367  012178  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22368  01217A  0E01               	movlw	low (_Event_NULL shr (0+16))
 22369  01217C  0100               	movlb	0	; () banked
 22370  01217E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22371  012180  EC17  F09E         	call	_Button_Init	;wreg free
 22372                           
 22373                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 22374                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 22375  012184  0E3D               	movlw	low (_HMIBoard+18)
 22376  012186  0100               	movlb	0	; () banked
 22377  012188  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22378  01218A  0E03               	movlw	high (_HMIBoard+18)
 22379  01218C  0100               	movlb	0	; () banked
 22380  01218E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22381  012190  0E00               	movlw	0
 22382  012192  0100               	movlb	0	; () banked
 22383  012194  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22384  012196  0E02               	movlw	2
 22385  012198  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22386  01219A  0E50               	movlw	low _HMI_InitButtons
 22387  01219C  0100               	movlb	0	; () banked
 22388  01219E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22389  0121A0  0E65               	movlw	high _HMI_InitButtons
 22390  0121A2  0100               	movlb	0	; () banked
 22391  0121A4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22392  0121A6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22393  0121A8  0100               	movlb	0	; () banked
 22394  0121AA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22395  0121AC  0EF4               	movlw	low _HMI_LeftSwitch
 22396  0121AE  0100               	movlb	0	; () banked
 22397  0121B0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22398  0121B2  0E63               	movlw	high _HMI_LeftSwitch
 22399  0121B4  0100               	movlb	0	; () banked
 22400  0121B6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22401  0121B8  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 22402  0121BA  0100               	movlb	0	; () banked
 22403  0121BC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22404  0121BE  0E68               	movlw	low _Event_NULL
 22405  0121C0  0100               	movlb	0	; () banked
 22406  0121C2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22407  0121C4  0E65               	movlw	high _Event_NULL
 22408  0121C6  0100               	movlb	0	; () banked
 22409  0121C8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22410  0121CA  0E01               	movlw	low (_Event_NULL shr (0+16))
 22411  0121CC  0100               	movlb	0	; () banked
 22412  0121CE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22413  0121D0  EC17  F09E         	call	_Button_Init	;wreg free
 22414                           
 22415                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 22416                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 22417  0121D4  0E33               	movlw	low (_HMIBoard+8)
 22418  0121D6  0100               	movlb	0	; () banked
 22419  0121D8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22420  0121DA  0E03               	movlw	high (_HMIBoard+8)
 22421  0121DC  0100               	movlb	0	; () banked
 22422  0121DE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22423  0121E0  0E00               	movlw	0
 22424  0121E2  0100               	movlb	0	; () banked
 22425  0121E4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22426  0121E6  0E02               	movlw	2
 22427  0121E8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22428  0121EA  0E50               	movlw	low _HMI_InitButtons
 22429  0121EC  0100               	movlb	0	; () banked
 22430  0121EE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22431  0121F0  0E65               	movlw	high _HMI_InitButtons
 22432  0121F2  0100               	movlb	0	; () banked
 22433  0121F4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22434  0121F6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22435  0121F8  0100               	movlb	0	; () banked
 22436  0121FA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22437  0121FC  0EDC               	movlw	low _HMI_RightSwitch
 22438  0121FE  0100               	movlb	0	; () banked
 22439  012200  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22440  012202  0E63               	movlw	high _HMI_RightSwitch
 22441  012204  0100               	movlb	0	; () banked
 22442  012206  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22443  012208  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 22444  01220A  0100               	movlb	0	; () banked
 22445  01220C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22446  01220E  0E68               	movlw	low _Event_NULL
 22447  012210  0100               	movlb	0	; () banked
 22448  012212  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22449  012214  0E65               	movlw	high _Event_NULL
 22450  012216  0100               	movlb	0	; () banked
 22451  012218  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22452  01221A  0E01               	movlw	low (_Event_NULL shr (0+16))
 22453  01221C  0100               	movlb	0	; () banked
 22454  01221E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22455  012220  EC17  F09E         	call	_Button_Init	;wreg free
 22456                           
 22457                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 22458                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 22459  012224  0E47               	movlw	low (_HMIBoard+28)
 22460  012226  0100               	movlb	0	; () banked
 22461  012228  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22462  01222A  0E03               	movlw	high (_HMIBoard+28)
 22463  01222C  0100               	movlb	0	; () banked
 22464  01222E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22465  012230  0E00               	movlw	0
 22466  012232  0100               	movlb	0	; () banked
 22467  012234  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22468  012236  0E02               	movlw	2
 22469  012238  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22470  01223A  0E50               	movlw	low _HMI_InitButtons
 22471  01223C  0100               	movlb	0	; () banked
 22472  01223E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22473  012240  0E65               	movlw	high _HMI_InitButtons
 22474  012242  0100               	movlb	0	; () banked
 22475  012244  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22476  012246  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22477  012248  0100               	movlb	0	; () banked
 22478  01224A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22479  01224C  0EC4               	movlw	low _HMI_UpSwitch
 22480  01224E  0100               	movlb	0	; () banked
 22481  012250  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22482  012252  0E63               	movlw	high _HMI_UpSwitch
 22483  012254  0100               	movlb	0	; () banked
 22484  012256  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22485  012258  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 22486  01225A  0100               	movlb	0	; () banked
 22487  01225C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22488  01225E  0E68               	movlw	low _Event_NULL
 22489  012260  0100               	movlb	0	; () banked
 22490  012262  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22491  012264  0E65               	movlw	high _Event_NULL
 22492  012266  0100               	movlb	0	; () banked
 22493  012268  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22494  01226A  0E01               	movlw	low (_Event_NULL shr (0+16))
 22495  01226C  0100               	movlb	0	; () banked
 22496  01226E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22497  012270  EC17  F09E         	call	_Button_Init	;wreg free
 22498                           
 22499                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 22500                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 22501  012274  0E51               	movlw	low (_HMIBoard+38)
 22502  012276  0100               	movlb	0	; () banked
 22503  012278  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22504  01227A  0E03               	movlw	high (_HMIBoard+38)
 22505  01227C  0100               	movlb	0	; () banked
 22506  01227E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22507  012280  0E00               	movlw	0
 22508  012282  0100               	movlb	0	; () banked
 22509  012284  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22510  012286  0E02               	movlw	2
 22511  012288  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22512  01228A  0E50               	movlw	low _HMI_InitButtons
 22513  01228C  0100               	movlb	0	; () banked
 22514  01228E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22515  012290  0E65               	movlw	high _HMI_InitButtons
 22516  012292  0100               	movlb	0	; () banked
 22517  012294  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22518  012296  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22519  012298  0100               	movlb	0	; () banked
 22520  01229A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22521  01229C  0EAC               	movlw	low _HMI_DownSwitch
 22522  01229E  0100               	movlb	0	; () banked
 22523  0122A0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22524  0122A2  0E63               	movlw	high _HMI_DownSwitch
 22525  0122A4  0100               	movlb	0	; () banked
 22526  0122A6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22527  0122A8  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 22528  0122AA  0100               	movlb	0	; () banked
 22529  0122AC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22530  0122AE  0E68               	movlw	low _Event_NULL
 22531  0122B0  0100               	movlb	0	; () banked
 22532  0122B2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22533  0122B4  0E65               	movlw	high _Event_NULL
 22534  0122B6  0100               	movlb	0	; () banked
 22535  0122B8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22536  0122BA  0E01               	movlw	low (_Event_NULL shr (0+16))
 22537  0122BC  0100               	movlb	0	; () banked
 22538  0122BE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22539  0122C0  EC17  F09E         	call	_Button_Init	;wreg free
 22540                           
 22541                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 22542  0122C4  0EA0               	movlw	160
 22543  0122C6  0100               	movlb	0	; () banked
 22544  0122C8  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 22545  0122CA  0E86               	movlw	134
 22546  0122CC  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 22547  0122CE  0E01               	movlw	1
 22548  0122D0  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 22549  0122D2  0E00               	movlw	0
 22550  0122D4  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 22551  0122D6  0E00               	movlw	0
 22552  0122D8  0100               	movlb	0	; () banked
 22553  0122DA  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 22554  0122DC  0E02               	movlw	2
 22555  0122DE  0100               	movlb	0	; () banked
 22556  0122E0  6F92               	movwf	SPI_Init@pMode& (0+255),b
 22557  0122E2  EC53  F082         	call	_SPI_Init	;wreg free
 22558                           
 22559                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 22560  0122E6  0E65               	movlw	low _SPI1
 22561  0122E8  0100               	movlb	0	; () banked
 22562  0122EA  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 22563  0122EC  0E03               	movlw	high _SPI1
 22564  0122EE  0100               	movlb	0	; () banked
 22565  0122F0  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 22566  0122F2  ECE3  F0A8         	call	_SPI_MinSpeed	;wreg free
 22567                           
 22568                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 22569  0122F6  0E00               	movlw	0
 22570  0122F8  0100               	movlb	0	; () banked
 22571  0122FA  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 22572  0122FC  0E00               	movlw	0
 22573  0122FE  6FA8               	movwf	HMI_Init@in& (0+255),b
 22574  012300                     l14088:
 22575                           
 22576                           ; BSR set to: 0
 22577  012300  0100               	movlb	0	; () banked
 22578  012302  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 22579  012304  E113               	bnz	l1153
 22580  012306  0E08               	movlw	8
 22581  012308  0100               	movlb	0	; () banked
 22582  01230A  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 22583  01230C  B0D8               	btfsc	status,0,c
 22584  01230E  0012               	return	
 22585                           
 22586                           ; BSR set to: 0
 22587                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 22588                           
 22589                           ; BSR set to: 0
 22590                           
 22591                           ; BSR set to: 0
 22592  012310  0E2B               	movlw	low _HMIBoard
 22593  012312  0100               	movlb	0	; () banked
 22594  012314  25A8               	addwf	HMI_Init@in& (0+255),w,b
 22595  012316  6ED9               	movwf	fsr2l,c
 22596  012318  0E03               	movlw	high _HMIBoard
 22597  01231A  0100               	movlb	0	; () banked
 22598  01231C  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 22599  01231E  6EDA               	movwf	fsr2h,c
 22600  012320  0E00               	movlw	0
 22601  012322  6EDF               	movwf	indf2,c
 22602                           
 22603                           ; BSR set to: 0
 22604  012324  0100               	movlb	0	; () banked
 22605  012326  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 22606  012328  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 22607  01232A  D7EA               	goto	l14088
 22608  01232C                     l1153:
 22609                           
 22610                           ; BSR set to: 0
 22611  01232C  0012               	return		;funcret
 22612  01232E                     __end_of_HMI_Init:
 22613                           	opt stack 0
 22614                           tosu	equ	0xFFF
 22615                           tosh	equ	0xFFE
 22616                           tosl	equ	0xFFD
 22617                           pclath	equ	0xFFA
 22618                           tblptru	equ	0xFF8
 22619                           tblptrh	equ	0xFF7
 22620                           tblptrl	equ	0xFF6
 22621                           tablat	equ	0xFF5
 22622                           prodh	equ	0xFF4
 22623                           prodl	equ	0xFF3
 22624                           intcon	equ	0xFF2
 22625                           postinc0	equ	0xFEE
 22626                           wreg	equ	0xFE8
 22627                           indf1	equ	0xFE7
 22628                           postdec1	equ	0xFE5
 22629                           fsr1h	equ	0xFE2
 22630                           fsr1l	equ	0xFE1
 22631                           indf2	equ	0xFDF
 22632                           postinc2	equ	0xFDE
 22633                           postdec2	equ	0xFDD
 22634                           plusw2	equ	0xFDB
 22635                           fsr2h	equ	0xFDA
 22636                           fsr2l	equ	0xFD9
 22637                           status	equ	0xFD8
 22638                           
 22639 ;; *************** function _SPI_MinSpeed *****************
 22640 ;; Defined at:
 22641 ;;		line 190 in file "Library/SPI.c"
 22642 ;; Parameters:    Size  Location     Type
 22643 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 22644 ;;		 -> SPI1(11), 
 22645 ;; Auto vars:     Size  Location     Type
 22646 ;;		None
 22647 ;; Return value:  Size  Location     Type
 22648 ;;                  1    wreg      void 
 22649 ;; Registers used:
 22650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22651 ;; Tracked objects:
 22652 ;;		On entry : 0/0
 22653 ;;		On exit  : 0/0
 22654 ;;		Unchanged: 0/0
 22655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22656 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22660 ;;Total ram usage:        2 bytes
 22661 ;; Hardware stack levels used:    1
 22662 ;; Hardware stack levels required when called:    9
 22663 ;; This function calls:
 22664 ;;		_Byte_SetBit
 22665 ;;		_Byte_SetQuad
 22666 ;; This function is called by:
 22667 ;;		_HMI_Init
 22668 ;; This function uses a non-reentrant model
 22669 ;;
 22670                           
 22671                           	psect	text113
 22672  0151C6                     __ptext113:
 22673                           	opt stack 0
 22674  0151C6                     _SPI_MinSpeed:
 22675                           	opt stack 19
 22676                           
 22677                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22678                           
 22679                           ; BSR set to: 0
 22680                           ;incstack = 0
 22681  0151C6  0100               	movlb	0	; () banked
 22682  0151C8  EE20 F006          	lfsr	2,6
 22683  0151CC  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22684  0151CE  26D9               	addwf	fsr2l,f,c
 22685  0151D0  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22686  0151D2  22DA               	addwfc	fsr2h,f,c
 22687  0151D4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22688  0151D8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22689  0151DC  0E05               	movlw	5
 22690  0151DE  0100               	movlb	0	; () banked
 22691  0151E0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22692  0151E2  0E00               	movlw	0
 22693  0151E4  0100               	movlb	0	; () banked
 22694  0151E6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22695  0151E8  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22696                           
 22697                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 22698  0151EC  0100               	movlb	0	; () banked
 22699  0151EE  EE20 F006          	lfsr	2,6
 22700  0151F2  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22701  0151F4  26D9               	addwf	fsr2l,f,c
 22702  0151F6  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22703  0151F8  22DA               	addwfc	fsr2h,f,c
 22704  0151FA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22705  0151FE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22706  015202  0E00               	movlw	0
 22707  015204  0100               	movlb	0	; () banked
 22708  015206  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22709  015208  0E02               	movlw	2
 22710  01520A  0100               	movlb	0	; () banked
 22711  01520C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22712  01520E  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 22713                           
 22714                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22715  015212  0100               	movlb	0	; () banked
 22716  015214  EE20 F006          	lfsr	2,6
 22717  015218  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22718  01521A  26D9               	addwf	fsr2l,f,c
 22719  01521C  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22720  01521E  22DA               	addwfc	fsr2h,f,c
 22721  015220  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22722  015224  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22723  015228  0E05               	movlw	5
 22724  01522A  0100               	movlb	0	; () banked
 22725  01522C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22726  01522E  0E01               	movlw	1
 22727  015230  0100               	movlb	0	; () banked
 22728  015232  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22729  015234  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22730  015238  0012               	return		;funcret
 22731  01523A                     __end_of_SPI_MinSpeed:
 22732                           	opt stack 0
 22733                           tosu	equ	0xFFF
 22734                           tosh	equ	0xFFE
 22735                           tosl	equ	0xFFD
 22736                           pclath	equ	0xFFA
 22737                           tblptru	equ	0xFF8
 22738                           tblptrh	equ	0xFF7
 22739                           tblptrl	equ	0xFF6
 22740                           tablat	equ	0xFF5
 22741                           prodh	equ	0xFF4
 22742                           prodl	equ	0xFF3
 22743                           intcon	equ	0xFF2
 22744                           postinc0	equ	0xFEE
 22745                           wreg	equ	0xFE8
 22746                           indf1	equ	0xFE7
 22747                           postdec1	equ	0xFE5
 22748                           fsr1h	equ	0xFE2
 22749                           fsr1l	equ	0xFE1
 22750                           indf2	equ	0xFDF
 22751                           postinc2	equ	0xFDE
 22752                           postdec2	equ	0xFDD
 22753                           plusw2	equ	0xFDB
 22754                           fsr2h	equ	0xFDA
 22755                           fsr2l	equ	0xFD9
 22756                           status	equ	0xFD8
 22757                           
 22758 ;; *************** function _SPI_Init *****************
 22759 ;; Defined at:
 22760 ;;		line 12 in file "Library/SPI.c"
 22761 ;; Parameters:    Size  Location     Type
 22762 ;;  pClock          4   45[BANK0 ] unsigned long 
 22763 ;;  pChannel        1   49[BANK0 ] enum E6744
 22764 ;;  pMode           1   50[BANK0 ] enum E6748
 22765 ;; Auto vars:     Size  Location     Type
 22766 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 22767 ;;		 -> SPI1(11), SPI2(11), 
 22768 ;; Return value:  Size  Location     Type
 22769 ;;                  1    wreg      void 
 22770 ;; Registers used:
 22771 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22772 ;; Tracked objects:
 22773 ;;		On entry : 0/0
 22774 ;;		On exit  : 0/0
 22775 ;;		Unchanged: 0/0
 22776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22777 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22780 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22781 ;;Total ram usage:        8 bytes
 22782 ;; Hardware stack levels used:    1
 22783 ;; Hardware stack levels required when called:   12
 22784 ;; This function calls:
 22785 ;;		_Byte_SetBit
 22786 ;;		_Byte_SetQuad
 22787 ;;		_Port_SetPinType
 22788 ;;		_SPI_DCS
 22789 ;;		_SPI_DisableISR
 22790 ;;		_Timer2_Init
 22791 ;; This function is called by:
 22792 ;;		_Configure_GPIOs
 22793 ;;		_HMI_Init
 22794 ;; This function uses a non-reentrant model
 22795 ;;
 22796                           
 22797                           	psect	text114
 22798  0104A6                     __ptext114:
 22799                           	opt stack 0
 22800  0104A6                     _SPI_Init:
 22801                           	opt stack 15
 22802                           
 22803                           ;SPI.c: 14: SPIPtr pInput;
 22804                           ;SPI.c: 16: switch (pChannel)
 22805                           
 22806                           ;incstack = 0
 22807  0104A6  D00C               	goto	l597
 22808  0104A8                     
 22809                           ;SPI.c: 19: pInput = &SPI1;
 22810  0104A8  0E65               	movlw	low _SPI1
 22811  0104AA  0100               	movlb	0	; () banked
 22812  0104AC  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22813  0104AE  0E03               	movlw	high _SPI1
 22814  0104B0  D004               	goto	L13
 22815  0104B2                     
 22816                           ; BSR set to: 0
 22817                           ;SPI.c: 22: pInput = &SPI2;
 22818                           
 22819                           ; BSR set to: 0
 22820  0104B2  0E70               	movlw	low _SPI2
 22821  0104B4  0100               	movlb	0	; () banked
 22822  0104B6  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22823  0104B8  0E03               	movlw	high _SPI2
 22824  0104BA                     L13:
 22825  0104BA  0100               	movlb	0	; () banked
 22826  0104BC  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 22827                           
 22828                           ; BSR set to: 0
 22829                           ;SPI.c: 24: };
 22830                           
 22831                           ;SPI.c: 23: break;
 22832  0104BE  D008               	goto	l599
 22833  0104C0                     l597:
 22834                           
 22835                           ; BSR set to: 0
 22836  0104C0  0100               	movlb	0	; () banked
 22837  0104C2  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 22838                           
 22839                           ; Switch size 1, requested type "space"
 22840                           ; Number of cases is 2, Range of values is 0 to 1
 22841                           ; switch strategies available:
 22842                           ; Name         Instructions Cycles
 22843                           ; simple_byte            7     4 (average)
 22844                           ;	Chosen strategy is simple_byte
 22845  0104C4  0A00               	xorlw	0	; case 0
 22846  0104C6  B4D8               	btfsc	status,2,c
 22847  0104C8  D7EF               	goto	l598
 22848  0104CA  0A01               	xorlw	1	; case 1
 22849  0104CC  B4D8               	btfsc	status,2,c
 22850  0104CE  D7F1               	goto	l600
 22851  0104D0                     l599:
 22852                           
 22853                           ; BSR set to: 0
 22854                           ;SPI.c: 26: pInput->mChannel = pChannel;
 22855                           
 22856                           ; BSR set to: 0
 22857  0104D0  0100               	movlb	0	; () banked
 22858  0104D2  EE20 F002          	lfsr	2,2
 22859  0104D6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22860  0104D8  26D9               	addwf	fsr2l,f,c
 22861  0104DA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22862  0104DC  22DA               	addwfc	fsr2h,f,c
 22863  0104DE  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 22864                           
 22865                           ;SPI.c: 35: switch (pChannel)
 22866  0104E2  D0B1               	goto	l601
 22867  0104E4                     
 22868                           ; BSR set to: 0
 22869                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 22870                           
 22871                           ; BSR set to: 0
 22872  0104E4  0EEA               	movlw	low _PortC
 22873  0104E6  0100               	movlb	0	; () banked
 22874  0104E8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22875  0104EA  0E00               	movlw	high _PortC
 22876  0104EC  0100               	movlb	0	; () banked
 22877  0104EE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22878  0104F0  0E02               	movlw	2
 22879  0104F2  0100               	movlb	0	; () banked
 22880  0104F4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22881  0104F6  0E03               	movlw	3
 22882  0104F8  0100               	movlb	0	; () banked
 22883  0104FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22884  0104FC  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22885                           
 22886                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 22887  010500  0EEA               	movlw	low _PortC
 22888  010502  0100               	movlb	0	; () banked
 22889  010504  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22890  010506  0E00               	movlw	high _PortC
 22891  010508  0100               	movlb	0	; () banked
 22892  01050A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22893  01050C  0E03               	movlw	3
 22894  01050E  0100               	movlb	0	; () banked
 22895  010510  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22896  010512  0E03               	movlw	3
 22897  010514  0100               	movlb	0	; () banked
 22898  010516  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22899  010518  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22900                           
 22901                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 22902  01051C  0EEA               	movlw	low _PortC
 22903  01051E  0100               	movlb	0	; () banked
 22904  010520  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22905  010522  0E00               	movlw	high _PortC
 22906  010524  0100               	movlb	0	; () banked
 22907  010526  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22908  010528  0E05               	movlw	5
 22909  01052A  0100               	movlb	0	; () banked
 22910  01052C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22911  01052E  0E03               	movlw	3
 22912  010530  0100               	movlb	0	; () banked
 22913  010532  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22914  010534  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22915                           
 22916                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 22917  010538  0EEA               	movlw	low _PortC
 22918  01053A  0100               	movlb	0	; () banked
 22919  01053C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22920  01053E  0E00               	movlw	high _PortC
 22921  010540  0100               	movlb	0	; () banked
 22922  010542  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22923  010544  0E04               	movlw	4
 22924  010546  0100               	movlb	0	; () banked
 22925  010548  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22926  01054A  0E00               	movlw	0
 22927  01054C  0100               	movlb	0	; () banked
 22928  01054E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22929  010550  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22930                           
 22931                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 22932  010554  0100               	movlb	0	; () banked
 22933  010556  EE20 F003          	lfsr	2,3
 22934  01055A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22935  01055C  26D9               	addwf	fsr2l,f,c
 22936  01055E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22937  010560  22DA               	addwfc	fsr2h,f,c
 22938  010562  0EC7               	movlw	199
 22939  010564  6EDE               	movwf	postinc2,c
 22940  010566  0E0F               	movlw	15
 22941  010568  6EDD               	movwf	postdec2,c
 22942                           
 22943                           ; BSR set to: 0
 22944                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 22945  01056A  0100               	movlb	0	; () banked
 22946  01056C  EE20 F006          	lfsr	2,6
 22947  010570  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22948  010572  26D9               	addwf	fsr2l,f,c
 22949  010574  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22950  010576  22DA               	addwfc	fsr2h,f,c
 22951  010578  0EC6               	movlw	198
 22952  01057A  6EDE               	movwf	postinc2,c
 22953  01057C  0E0F               	movlw	15
 22954  01057E  6EDD               	movwf	postdec2,c
 22955                           
 22956                           ; BSR set to: 0
 22957                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 22958  010580  0100               	movlb	0	; () banked
 22959  010582  EE20 F009          	lfsr	2,9
 22960  010586  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22961  010588  26D9               	addwf	fsr2l,f,c
 22962  01058A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22963  01058C  22DA               	addwfc	fsr2h,f,c
 22964  01058E  0EC9               	movlw	201
 22965  010590  D056               	goto	L14
 22966  010592                     
 22967                           ; BSR set to: 0
 22968                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 22969                           
 22970                           ; BSR set to: 0
 22971  010592  0EE0               	movlw	low _PortD
 22972  010594  0100               	movlb	0	; () banked
 22973  010596  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22974  010598  0E00               	movlw	high _PortD
 22975  01059A  0100               	movlb	0	; () banked
 22976  01059C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22977  01059E  0E07               	movlw	7
 22978  0105A0  0100               	movlb	0	; () banked
 22979  0105A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22980  0105A4  0E03               	movlw	3
 22981  0105A6  0100               	movlb	0	; () banked
 22982  0105A8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22983  0105AA  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22984                           
 22985                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 22986  0105AE  0EE0               	movlw	low _PortD
 22987  0105B0  0100               	movlb	0	; () banked
 22988  0105B2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22989  0105B4  0E00               	movlw	high _PortD
 22990  0105B6  0100               	movlb	0	; () banked
 22991  0105B8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22992  0105BA  0E06               	movlw	6
 22993  0105BC  0100               	movlb	0	; () banked
 22994  0105BE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22995  0105C0  0E03               	movlw	3
 22996  0105C2  0100               	movlb	0	; () banked
 22997  0105C4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22998  0105C6  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22999                           
 23000                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 23001  0105CA  0EE0               	movlw	low _PortD
 23002  0105CC  0100               	movlb	0	; () banked
 23003  0105CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23004  0105D0  0E00               	movlw	high _PortD
 23005  0105D2  0100               	movlb	0	; () banked
 23006  0105D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23007  0105D6  0E04               	movlw	4
 23008  0105D8  0100               	movlb	0	; () banked
 23009  0105DA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23010  0105DC  0E03               	movlw	3
 23011  0105DE  0100               	movlb	0	; () banked
 23012  0105E0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23013  0105E2  EC5F  F093         	call	_Port_SetPinType	;wreg free
 23014                           
 23015                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 23016  0105E6  0EE0               	movlw	low _PortD
 23017  0105E8  0100               	movlb	0	; () banked
 23018  0105EA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23019  0105EC  0E00               	movlw	high _PortD
 23020  0105EE  0100               	movlb	0	; () banked
 23021  0105F0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23022  0105F2  0E05               	movlw	5
 23023  0105F4  0100               	movlb	0	; () banked
 23024  0105F6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23025  0105F8  0E00               	movlw	0
 23026  0105FA  0100               	movlb	0	; () banked
 23027  0105FC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23028  0105FE  EC5F  F093         	call	_Port_SetPinType	;wreg free
 23029                           
 23030                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 23031  010602  0100               	movlb	0	; () banked
 23032  010604  EE20 F003          	lfsr	2,3
 23033  010608  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23034  01060A  26D9               	addwf	fsr2l,f,c
 23035  01060C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23036  01060E  22DA               	addwfc	fsr2h,f,c
 23037  010610  0E6D               	movlw	109
 23038  010612  6EDE               	movwf	postinc2,c
 23039  010614  0E0F               	movlw	15
 23040  010616  6EDD               	movwf	postdec2,c
 23041                           
 23042                           ; BSR set to: 0
 23043                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 23044  010618  0100               	movlb	0	; () banked
 23045  01061A  EE20 F006          	lfsr	2,6
 23046  01061E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23047  010620  26D9               	addwf	fsr2l,f,c
 23048  010622  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23049  010624  22DA               	addwfc	fsr2h,f,c
 23050  010626  0E6C               	movlw	108
 23051  010628  6EDE               	movwf	postinc2,c
 23052  01062A  0E0F               	movlw	15
 23053  01062C  6EDD               	movwf	postdec2,c
 23054                           
 23055                           ; BSR set to: 0
 23056                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 23057  01062E  0100               	movlb	0	; () banked
 23058  010630  EE20 F009          	lfsr	2,9
 23059  010634  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23060  010636  26D9               	addwf	fsr2l,f,c
 23061  010638  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23062  01063A  22DA               	addwfc	fsr2h,f,c
 23063  01063C  0E6F               	movlw	111
 23064  01063E                     L14:
 23065  01063E  6EDE               	movwf	postinc2,c
 23066  010640  0E0F               	movlw	15
 23067  010642  6EDD               	movwf	postdec2,c
 23068                           
 23069                           ;SPI.c: 68: break;
 23070  010644  D009               	goto	l603
 23071  010646                     l601:
 23072                           
 23073                           ; BSR set to: 0
 23074                           
 23075                           ; BSR set to: 0
 23076  010646  0100               	movlb	0	; () banked
 23077  010648  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 23078                           
 23079                           ; Switch size 1, requested type "space"
 23080                           ; Number of cases is 2, Range of values is 0 to 1
 23081                           ; switch strategies available:
 23082                           ; Name         Instructions Cycles
 23083                           ; simple_byte            7     4 (average)
 23084                           ;	Chosen strategy is simple_byte
 23085  01064A  0A00               	xorlw	0	; case 0
 23086  01064C  B4D8               	btfsc	status,2,c
 23087  01064E  D74A               	goto	l602
 23088  010650  0A01               	xorlw	1	; case 1
 23089  010652  A4D8               	btfss	status,2,c
 23090  010654  0012               	return	
 23091  010656  D79D               	goto	l604
 23092  010658                     l603:
 23093                           
 23094                           ; BSR set to: 0
 23095                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 23096                           
 23097                           ; BSR set to: 0
 23098  010658  0100               	movlb	0	; () banked
 23099  01065A  EE20 F006          	lfsr	2,6
 23100  01065E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23101  010660  26D9               	addwf	fsr2l,f,c
 23102  010662  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23103  010664  22DA               	addwfc	fsr2h,f,c
 23104  010666  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23105  01066A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23106  01066E  0E05               	movlw	5
 23107  010670  0100               	movlb	0	; () banked
 23108  010672  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23109  010674  0E00               	movlw	0
 23110  010676  0100               	movlb	0	; () banked
 23111  010678  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23112  01067A  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23113                           
 23114                           ;SPI.c: 77: switch(pMode)
 23115  01067E  D09C               	goto	l607
 23116  010680                     
 23117                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23118  010680  0100               	movlb	0	; () banked
 23119  010682  EE20 F006          	lfsr	2,6
 23120  010686  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23121  010688  26D9               	addwf	fsr2l,f,c
 23122  01068A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23123  01068C  22DA               	addwfc	fsr2h,f,c
 23124  01068E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23125  010692  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23126  010696  0E04               	movlw	4
 23127  010698  0100               	movlb	0	; () banked
 23128  01069A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23129  01069C  0E00               	movlw	0
 23130  01069E  0100               	movlb	0	; () banked
 23131  0106A0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23132  0106A2  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23133                           
 23134                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23135  0106A6  0100               	movlb	0	; () banked
 23136  0106A8  EE20 F003          	lfsr	2,3
 23137  0106AC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23138  0106AE  26D9               	addwf	fsr2l,f,c
 23139  0106B0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23140  0106B2  22DA               	addwfc	fsr2h,f,c
 23141  0106B4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23142  0106B8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23143  0106BC  0E06               	movlw	6
 23144  0106BE  0100               	movlb	0	; () banked
 23145  0106C0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23146  0106C2  0E00               	movlw	0
 23147  0106C4  0100               	movlb	0	; () banked
 23148  0106C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23149  0106C8  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23150                           
 23151                           ;SPI.c: 82: break;
 23152  0106CC  D084               	goto	l609
 23153  0106CE                     
 23154                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23155  0106CE  0100               	movlb	0	; () banked
 23156  0106D0  EE20 F006          	lfsr	2,6
 23157  0106D4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23158  0106D6  26D9               	addwf	fsr2l,f,c
 23159  0106D8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23160  0106DA  22DA               	addwfc	fsr2h,f,c
 23161  0106DC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23162  0106E0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23163  0106E4  0E04               	movlw	4
 23164  0106E6  0100               	movlb	0	; () banked
 23165  0106E8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23166  0106EA  0E00               	movlw	0
 23167  0106EC  0100               	movlb	0	; () banked
 23168  0106EE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23169  0106F0  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23170                           
 23171                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23172  0106F4  0100               	movlb	0	; () banked
 23173  0106F6  EE20 F003          	lfsr	2,3
 23174  0106FA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23175  0106FC  26D9               	addwf	fsr2l,f,c
 23176  0106FE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23177  010700  22DA               	addwfc	fsr2h,f,c
 23178  010702  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23179  010706  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23180  01070A  0E06               	movlw	6
 23181  01070C  0100               	movlb	0	; () banked
 23182  01070E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23183  010710  0E01               	movlw	1
 23184  010712  0100               	movlb	0	; () banked
 23185  010714  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23186  010716  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23187                           
 23188                           ;SPI.c: 86: break;
 23189  01071A  D05D               	goto	l609
 23190  01071C                     
 23191                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23192  01071C  0100               	movlb	0	; () banked
 23193  01071E  EE20 F006          	lfsr	2,6
 23194  010722  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23195  010724  26D9               	addwf	fsr2l,f,c
 23196  010726  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23197  010728  22DA               	addwfc	fsr2h,f,c
 23198  01072A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23199  01072E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23200  010732  0E04               	movlw	4
 23201  010734  0100               	movlb	0	; () banked
 23202  010736  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23203  010738  0E01               	movlw	1
 23204  01073A  0100               	movlb	0	; () banked
 23205  01073C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23206  01073E  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23207                           
 23208                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23209  010742  0100               	movlb	0	; () banked
 23210  010744  EE20 F003          	lfsr	2,3
 23211  010748  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23212  01074A  26D9               	addwf	fsr2l,f,c
 23213  01074C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23214  01074E  22DA               	addwfc	fsr2h,f,c
 23215  010750  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23216  010754  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23217  010758  0E06               	movlw	6
 23218  01075A  0100               	movlb	0	; () banked
 23219  01075C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23220  01075E  0E00               	movlw	0
 23221  010760  0100               	movlb	0	; () banked
 23222  010762  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23223  010764  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23224                           
 23225                           ;SPI.c: 90: break;
 23226  010768  D036               	goto	l609
 23227  01076A                     
 23228                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23229  01076A  0100               	movlb	0	; () banked
 23230  01076C  EE20 F006          	lfsr	2,6
 23231  010770  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23232  010772  26D9               	addwf	fsr2l,f,c
 23233  010774  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23234  010776  22DA               	addwfc	fsr2h,f,c
 23235  010778  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23236  01077C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23237  010780  0E04               	movlw	4
 23238  010782  0100               	movlb	0	; () banked
 23239  010784  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23240  010786  0E01               	movlw	1
 23241  010788  0100               	movlb	0	; () banked
 23242  01078A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23243  01078C  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23244                           
 23245                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23246  010790  0100               	movlb	0	; () banked
 23247  010792  EE20 F003          	lfsr	2,3
 23248  010796  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23249  010798  26D9               	addwf	fsr2l,f,c
 23250  01079A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23251  01079C  22DA               	addwfc	fsr2h,f,c
 23252  01079E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23253  0107A2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23254  0107A6  0E06               	movlw	6
 23255  0107A8  0100               	movlb	0	; () banked
 23256  0107AA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23257  0107AC  0E01               	movlw	1
 23258  0107AE  0100               	movlb	0	; () banked
 23259  0107B0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23260  0107B2  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23261                           
 23262                           ;SPI.c: 94: break;
 23263  0107B6  D00F               	goto	l609
 23264  0107B8                     l607:
 23265  0107B8  0100               	movlb	0	; () banked
 23266  0107BA  5192               	movf	SPI_Init@pMode& (0+255),w,b
 23267                           
 23268                           ; Switch size 1, requested type "space"
 23269                           ; Number of cases is 4, Range of values is 0 to 3
 23270                           ; switch strategies available:
 23271                           ; Name         Instructions Cycles
 23272                           ; simple_byte           13     7 (average)
 23273                           ;	Chosen strategy is simple_byte
 23274  0107BC  0A00               	xorlw	0	; case 0
 23275  0107BE  B4D8               	btfsc	status,2,c
 23276  0107C0  D75F               	goto	l608
 23277  0107C2  0A01               	xorlw	1	; case 1
 23278  0107C4  B4D8               	btfsc	status,2,c
 23279  0107C6  D783               	goto	l610
 23280  0107C8  0A03               	xorlw	3	; case 2
 23281  0107CA  B4D8               	btfsc	status,2,c
 23282  0107CC  D7A7               	goto	l611
 23283  0107CE  0A01               	xorlw	1	; case 3
 23284  0107D0  A4D8               	btfss	status,2,c
 23285  0107D2  0012               	return	
 23286  0107D4  D7CA               	goto	l612
 23287  0107D6                     l609:
 23288                           
 23289                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 23290                           
 23291                           ; BSR set to: 0
 23292  0107D6  0100               	movlb	0	; () banked
 23293  0107D8  EE20 F006          	lfsr	2,6
 23294  0107DC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23295  0107DE  26D9               	addwf	fsr2l,f,c
 23296  0107E0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23297  0107E2  22DA               	addwfc	fsr2h,f,c
 23298  0107E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23299  0107E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23300  0107EC  0E07               	movlw	7
 23301  0107EE  0100               	movlb	0	; () banked
 23302  0107F0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23303  0107F2  0E00               	movlw	0
 23304  0107F4  0100               	movlb	0	; () banked
 23305  0107F6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23306  0107F8  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23307                           
 23308                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 23309  0107FC  0100               	movlb	0	; () banked
 23310  0107FE  EE20 F006          	lfsr	2,6
 23311  010802  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23312  010804  26D9               	addwf	fsr2l,f,c
 23313  010806  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23314  010808  22DA               	addwfc	fsr2h,f,c
 23315  01080A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23316  01080E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23317  010812  0E06               	movlw	6
 23318  010814  0100               	movlb	0	; () banked
 23319  010816  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23320  010818  0E00               	movlw	0
 23321  01081A  0100               	movlb	0	; () banked
 23322  01081C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23323  01081E  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23324                           
 23325                           ;SPI.c: 106: Timer2_Init(pClock);
 23326  010822  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 23327  010826  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 23328  01082A  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 23329  01082E  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 23330  010832  EC76  F099         	call	_Timer2_Init	;wreg free
 23331                           
 23332                           ;SPI.c: 112: SPI_DisableISR(pInput);
 23333  010836  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 23334  01083A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 23335  01083E  EC99  F0B0         	call	_SPI_DisableISR	;wreg free
 23336                           
 23337                           ;SPI.c: 116: switch (pChannel)
 23338  010842  D004               	goto	l614
 23339  010844                     l615:
 23340                           
 23341                           ; BSR set to: 0
 23342  010844  869F               	bsf	3999,3,c	;volatile
 23343  010846  D00B               	goto	l616
 23344  010848                     l617:
 23345                           
 23346                           ; BSR set to: 0
 23347  010848  8EA5               	bsf	4005,7,c	;volatile
 23348  01084A  D009               	goto	l616
 23349  01084C                     l614:
 23350                           
 23351                           ; BSR set to: 0
 23352  01084C  0100               	movlb	0	; () banked
 23353  01084E  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 23354                           
 23355                           ; Switch size 1, requested type "space"
 23356                           ; Number of cases is 2, Range of values is 0 to 1
 23357                           ; switch strategies available:
 23358                           ; Name         Instructions Cycles
 23359                           ; simple_byte            7     4 (average)
 23360                           ;	Chosen strategy is simple_byte
 23361  010850  0A00               	xorlw	0	; case 0
 23362  010852  B4D8               	btfsc	status,2,c
 23363  010854  D7F7               	goto	l615
 23364  010856  0A01               	xorlw	1	; case 1
 23365  010858  A4D8               	btfss	status,2,c
 23366  01085A  0012               	return	
 23367  01085C  D7F5               	goto	l617
 23368  01085E                     l616:
 23369                           
 23370                           ; BSR set to: 0
 23371                           ;SPI.c: 124: SPI_DCS(pInput);
 23372                           
 23373                           ; BSR set to: 0
 23374  01085E  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 23375  010862  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 23376  010866  ECFC  F0AF         	call	_SPI_DCS	;wreg free
 23377                           
 23378                           ;SPI.c: 126: pInput->mBusy = 0;
 23379  01086A  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 23380  01086E  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 23381  010872  0E00               	movlw	0
 23382  010874  6EDF               	movwf	indf2,c
 23383                           
 23384                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 23385  010876  0100               	movlb	0	; () banked
 23386  010878  EE20 F006          	lfsr	2,6
 23387  01087C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23388  01087E  26D9               	addwf	fsr2l,f,c
 23389  010880  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23390  010882  22DA               	addwfc	fsr2h,f,c
 23391  010884  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 23392  010888  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 23393  01088C  0E00               	movlw	0
 23394  01088E  0100               	movlb	0	; () banked
 23395  010890  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 23396  010892  0E03               	movlw	3
 23397  010894  0100               	movlb	0	; () banked
 23398  010896  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 23399  010898  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 23400                           
 23401                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 23402  01089C  0100               	movlb	0	; () banked
 23403  01089E  EE20 F006          	lfsr	2,6
 23404  0108A2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23405  0108A4  26D9               	addwf	fsr2l,f,c
 23406  0108A6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23407  0108A8  22DA               	addwfc	fsr2h,f,c
 23408  0108AA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23409  0108AE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23410  0108B2  0E05               	movlw	5
 23411  0108B4  0100               	movlb	0	; () banked
 23412  0108B6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23413  0108B8  0E01               	movlw	1
 23414  0108BA  0100               	movlb	0	; () banked
 23415  0108BC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23416  0108BE  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23417  0108C2  0012               	return		;funcret
 23418  0108C4                     __end_of_SPI_Init:
 23419                           	opt stack 0
 23420                           tosu	equ	0xFFF
 23421                           tosh	equ	0xFFE
 23422                           tosl	equ	0xFFD
 23423                           pclath	equ	0xFFA
 23424                           tblptru	equ	0xFF8
 23425                           tblptrh	equ	0xFF7
 23426                           tblptrl	equ	0xFF6
 23427                           tablat	equ	0xFF5
 23428                           prodh	equ	0xFF4
 23429                           prodl	equ	0xFF3
 23430                           intcon	equ	0xFF2
 23431                           postinc0	equ	0xFEE
 23432                           wreg	equ	0xFE8
 23433                           indf1	equ	0xFE7
 23434                           postdec1	equ	0xFE5
 23435                           fsr1h	equ	0xFE2
 23436                           fsr1l	equ	0xFE1
 23437                           indf2	equ	0xFDF
 23438                           postinc2	equ	0xFDE
 23439                           postdec2	equ	0xFDD
 23440                           plusw2	equ	0xFDB
 23441                           fsr2h	equ	0xFDA
 23442                           fsr2l	equ	0xFD9
 23443                           status	equ	0xFD8
 23444                           
 23445 ;; *************** function _Timer2_Init *****************
 23446 ;; Defined at:
 23447 ;;		line 10 in file "Library/Timer2.c"
 23448 ;; Parameters:    Size  Location     Type
 23449 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 23450 ;; Auto vars:     Size  Location     Type
 23451 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 23452 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 23453 ;;  RDIV            4   18[BANK0 ] unsigned long 
 23454 ;; Return value:  Size  Location     Type
 23455 ;;                  1    wreg      void 
 23456 ;; Registers used:
 23457 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23458 ;; Tracked objects:
 23459 ;;		On entry : 0/0
 23460 ;;		On exit  : 0/0
 23461 ;;		Unchanged: 0/0
 23462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23463 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23464 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23465 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23466 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23467 ;;Total ram usage:       17 bytes
 23468 ;; Hardware stack levels used:    1
 23469 ;; Hardware stack levels required when called:    8
 23470 ;; This function calls:
 23471 ;;		_Timer2_Clear
 23472 ;;		___lldiv
 23473 ;; This function is called by:
 23474 ;;		_SPI_Init
 23475 ;; This function uses a non-reentrant model
 23476 ;;
 23477                           
 23478                           	psect	text115
 23479  0132EC                     __ptext115:
 23480                           	opt stack 0
 23481  0132EC                     _Timer2_Init:
 23482                           	opt stack 18
 23483                           
 23484                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 23485                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 23486                           ;Timer2.c: 14: static UINT8 PRE = 0;
 23487                           ;Timer2.c: 15: static UINT32 DIV = 0;
 23488                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 23489                           
 23490                           ;incstack = 0
 23491  0132EC  0E00               	movlw	0
 23492  0132EE  0100               	movlb	0	; () banked
 23493  0132F0  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 23494  0132F2  0E6C               	movlw	108
 23495  0132F4  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 23496  0132F6  0EDC               	movlw	220
 23497  0132F8  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 23498  0132FA  0E02               	movlw	2
 23499  0132FC  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 23500                           
 23501                           ; BSR set to: 0
 23502                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 23503                           ;Timer2.c: 20: pFrequency *= 2;
 23504  0132FE  0100               	movlb	0	; () banked
 23505  013300  90D8               	bcf	status,0,c
 23506  013302  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 23507  013304  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 23508  013306  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 23509  013308  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 23510                           
 23511                           ; BSR set to: 0
 23512                           ;Timer2.c: 23: pCPUClock /= 4;
 23513  01330A  0E02               	movlw	2
 23514  01330C  0100               	movlb	0	; () banked
 23515  01330E  6F71               	movwf	??_Timer2_Init& (0+255),b
 23516  013310                     u9215:
 23517  013310  90D8               	bcf	status,0,c
 23518  013312  0100               	movlb	0	; () banked
 23519  013314  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 23520  013316  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 23521  013318  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 23522  01331A  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 23523  01331C  0100               	movlb	0	; () banked
 23524  01331E  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 23525  013320  D7F7               	goto	u9215
 23526                           
 23527                           ; BSR set to: 0
 23528                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 23529  013322  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 23530  013326  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 23531  01332A  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 23532  01332E  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 23533  013332  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 23534  013336  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 23535  01333A  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 23536  01333E  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 23537  013342  EC0B  F0A0         	call	___lldiv	;wreg free
 23538  013346  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 23539  01334A  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 23540  01334E  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 23541  013352  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 23542                           
 23543                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 23544  013356  D010               	goto	l1828
 23545  013358                     l12498:
 23546                           
 23547                           ;Timer2.c: 28: {
 23548                           ;Timer2.c: 29: RDIV = 0;
 23549  013358  0E00               	movlw	0
 23550  01335A  0100               	movlb	0	; () banked
 23551  01335C  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 23552  01335E  0E00               	movlw	0
 23553  013360  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 23554  013362  0E00               	movlw	0
 23555  013364  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 23556  013366  0E00               	movlw	0
 23557  013368  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 23558                           
 23559                           ; BSR set to: 0
 23560                           ;Timer2.c: 30: INDEX ++;
 23561  01336A  0100               	movlb	0	; () banked
 23562  01336C  2BDA               	incf	Timer2_Init@INDEX& (0+255),f,b
 23563                           
 23564                           ; BSR set to: 0
 23565                           ;Timer2.c: 31: if (INDEX >= 3)
 23566  01336E  0E02               	movlw	2
 23567  013370  0100               	movlb	0	; () banked
 23568  013372  65DA               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 23569  013374  D001               	goto	l1828
 23570  013376  D026               	goto	u9230
 23571  013378                     l1828:
 23572                           
 23573                           ; BSR set to: 0
 23574                           
 23575                           ; BSR set to: 0
 23576  013378  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 23577  01337C  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 23578  013380  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 23579  013384  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 23580  013388  0100               	movlb	0	; () banked
 23581  01338A  51DA               	movf	Timer2_Init@INDEX& (0+255),w,b
 23582  01338C  0D01               	mullw	1
 23583  01338E  0EAC               	movlw	low Timer2_Init@PRESCALE
 23584  013390  24F3               	addwf	prodl,w,c
 23585  013392  6EF6               	movwf	tblptrl,c
 23586  013394  0EFD               	movlw	high Timer2_Init@PRESCALE
 23587  013396  20F4               	addwfc	prodh,w,c
 23588  013398  6EF7               	movwf	tblptrh,c
 23589  01339A                     	if	1	;There are 3 active tblptr bytes
 23590  01339A  6AF8               	clrf	tblptru,c
 23591  01339C  0E00               	movlw	low (__mediumconst shr (0+16))
 23592  01339E  22F8               	addwfc	tblptru,f,c
 23593  0133A0                     	endif
 23594  0133A0  0008               	tblrd		*
 23595  0133A2  50F5               	movf	tablat,w,c
 23596  0133A4  0100               	movlb	0	; () banked
 23597  0133A6  6F64               	movwf	___lldiv@divisor& (0+255),b
 23598  0133A8  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23599  0133AA  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23600  0133AC  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23601  0133AE  EC0B  F0A0         	call	___lldiv	;wreg free
 23602  0133B2  0100               	movlb	0	; () banked
 23603  0133B4  5163               	movf	(?___lldiv+3)& (0+255),w,b
 23604  0133B6  0100               	movlb	0	; () banked
 23605  0133B8  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 23606  0133BA  E1CE               	bnz	l12498
 23607  0133BC  0100               	movlb	0	; () banked
 23608  0133BE  0561               	decf	(?___lldiv+1)& (0+255),w,b
 23609  0133C0  B0D8               	btfsc	status,0,c
 23610  0133C2  D7CA               	goto	l1827
 23611  0133C4                     u9230:
 23612                           
 23613                           ; BSR set to: 0
 23614                           ;Timer2.c: 33: }
 23615                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 23616                           
 23617                           ; BSR set to: 0
 23618  0133C4  50CA               	movf	4042,w,c	;volatile
 23619  0133C6  0100               	movlb	0	; () banked
 23620  0133C8  19DA               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 23621  0133CA  0BFC               	andlw	-4
 23622  0133CC  19DA               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 23623  0133CE  6ECA               	movwf	4042,c	;volatile
 23624                           
 23625                           ; BSR set to: 0
 23626                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 23627  0133D0  84CA               	bsf	4042,2,c	;volatile
 23628                           
 23629                           ; BSR set to: 0
 23630                           ;Timer2.c: 44: Timer2_Clear();
 23631  0133D2  EC96  F0B2         	call	_Timer2_Clear	;wreg free
 23632                           
 23633                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 23634  0133D6  0100               	movlb	0	; () banked
 23635  0133D8  51DA               	movf	Timer2_Init@INDEX& (0+255),w,b
 23636  0133DA  0D01               	mullw	1
 23637  0133DC  0EAC               	movlw	low Timer2_Init@PRESCALE
 23638  0133DE  24F3               	addwf	prodl,w,c
 23639  0133E0  6EF6               	movwf	tblptrl,c
 23640  0133E2  0EFD               	movlw	high Timer2_Init@PRESCALE
 23641  0133E4  20F4               	addwfc	prodh,w,c
 23642  0133E6  6EF7               	movwf	tblptrh,c
 23643  0133E8                     	if	1	;There are 3 active tblptr bytes
 23644  0133E8  6AF8               	clrf	tblptru,c
 23645  0133EA  0E00               	movlw	low (__mediumconst shr (0+16))
 23646  0133EC  22F8               	addwfc	tblptru,f,c
 23647  0133EE                     	endif
 23648  0133EE  0008               	tblrd		*
 23649  0133F0  CFF5 F0D9          	movff	tablat,Timer2_Init@PRE
 23650                           
 23651                           ; BSR set to: 0
 23652                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 23653  0133F4  0EFF               	movlw	255
 23654  0133F6  0100               	movlb	0	; () banked
 23655  0133F8  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 23656  0133FA  0103               	movlb	3	; () banked
 23657  0133FC  6F0C               	movwf	Timer2_Init@DIV& (0+255),b
 23658  0133FE  0EFF               	movlw	255
 23659  013400  0100               	movlb	0	; () banked
 23660  013402  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 23661  013404  0103               	movlb	3	; () banked
 23662  013406  6F0D               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 23663  013408  0EFF               	movlw	255
 23664  01340A  0100               	movlb	0	; () banked
 23665  01340C  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 23666  01340E  0103               	movlb	3	; () banked
 23667  013410  6F0E               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 23668  013412  0EFF               	movlw	255
 23669  013414  0100               	movlb	0	; () banked
 23670  013416  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 23671  013418  0103               	movlb	3	; () banked
 23672  01341A  6F0F               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 23673                           
 23674                           ; BSR set to: 3
 23675                           ;Timer2.c: 48: INDEX = DIV/PRE;
 23676  01341C  C30C  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 23677  013420  C30D  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 23678  013424  C30E  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 23679  013428  C30F  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 23680  01342C  0100               	movlb	0	; () banked
 23681  01342E  51D9               	movf	Timer2_Init@PRE& (0+255),w,b
 23682  013430  0100               	movlb	0	; () banked
 23683  013432  6F64               	movwf	___lldiv@divisor& (0+255),b
 23684  013434  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23685  013436  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23686  013438  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23687  01343A  EC0B  F0A0         	call	___lldiv	;wreg free
 23688  01343E  0100               	movlb	0	; () banked
 23689  013440  5160               	movf	?___lldiv& (0+255),w,b
 23690  013442  0100               	movlb	0	; () banked
 23691  013444  6FDA               	movwf	Timer2_Init@INDEX& (0+255),b
 23692                           
 23693                           ; BSR set to: 0
 23694                           ;Timer2.c: 49: PR2 = INDEX;
 23695  013446  C0DA  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 23696                           
 23697                           ; BSR set to: 0
 23698  01344A  0012               	return		;funcret
 23699  01344C                     __end_of_Timer2_Init:
 23700                           	opt stack 0
 23701                           tosu	equ	0xFFF
 23702                           tosh	equ	0xFFE
 23703                           tosl	equ	0xFFD
 23704                           pclath	equ	0xFFA
 23705                           tblptru	equ	0xFF8
 23706                           tblptrh	equ	0xFF7
 23707                           tblptrl	equ	0xFF6
 23708                           tablat	equ	0xFF5
 23709                           prodh	equ	0xFF4
 23710                           prodl	equ	0xFF3
 23711                           intcon	equ	0xFF2
 23712                           postinc0	equ	0xFEE
 23713                           wreg	equ	0xFE8
 23714                           indf1	equ	0xFE7
 23715                           postdec1	equ	0xFE5
 23716                           fsr1h	equ	0xFE2
 23717                           fsr1l	equ	0xFE1
 23718                           indf2	equ	0xFDF
 23719                           postinc2	equ	0xFDE
 23720                           postdec2	equ	0xFDD
 23721                           plusw2	equ	0xFDB
 23722                           fsr2h	equ	0xFDA
 23723                           fsr2l	equ	0xFD9
 23724                           status	equ	0xFD8
 23725                           
 23726 ;; *************** function ___lldiv *****************
 23727 ;; Defined at:
 23728 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 23729 ;; Parameters:    Size  Location     Type
 23730 ;;  dividend        4    0[BANK0 ] unsigned long 
 23731 ;;  divisor         4    4[BANK0 ] unsigned long 
 23732 ;; Auto vars:     Size  Location     Type
 23733 ;;  quotient        4    8[BANK0 ] unsigned long 
 23734 ;;  counter         1   12[BANK0 ] unsigned char 
 23735 ;; Return value:  Size  Location     Type
 23736 ;;                  4    0[BANK0 ] unsigned long 
 23737 ;; Registers used:
 23738 ;;		wreg, status,2, status,0
 23739 ;; Tracked objects:
 23740 ;;		On entry : 0/0
 23741 ;;		On exit  : 0/0
 23742 ;;		Unchanged: 0/0
 23743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23744 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23745 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23747 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23748 ;;Total ram usage:       13 bytes
 23749 ;; Hardware stack levels used:    1
 23750 ;; Hardware stack levels required when called:    7
 23751 ;; This function calls:
 23752 ;;		Nothing
 23753 ;; This function is called by:
 23754 ;;		_Timer0_Init
 23755 ;;		_Timer2_Init
 23756 ;;		_rand_between
 23757 ;;		_I2C_Init
 23758 ;; This function uses a non-reentrant model
 23759 ;;
 23760                           
 23761                           	psect	text116
 23762  014016                     __ptext116:
 23763                           	opt stack 0
 23764  014016                     ___lldiv:
 23765                           	opt stack 20
 23766                           
 23767                           ; BSR set to: 0
 23768                           ;incstack = 0
 23769  014016  0E00               	movlw	0
 23770  014018  0100               	movlb	0	; () banked
 23771  01401A  6F68               	movwf	___lldiv@quotient& (0+255),b
 23772  01401C  0E00               	movlw	0
 23773  01401E  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 23774  014020  0E00               	movlw	0
 23775  014022  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 23776  014024  0E00               	movlw	0
 23777  014026  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 23778                           
 23779                           ; BSR set to: 0
 23780  014028  0100               	movlb	0	; () banked
 23781  01402A  5164               	movf	___lldiv@divisor& (0+255),w,b
 23782  01402C  0100               	movlb	0	; () banked
 23783  01402E  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23784  014030  0100               	movlb	0	; () banked
 23785  014032  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23786  014034  0100               	movlb	0	; () banked
 23787  014036  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 23788  014038  B4D8               	btfsc	status,2,c
 23789  01403A  D042               	goto	l2784
 23790                           
 23791                           ; BSR set to: 0
 23792  01403C  0E01               	movlw	1
 23793  01403E  0100               	movlb	0	; () banked
 23794  014040  6F6C               	movwf	___lldiv@counter& (0+255),b
 23795  014042  D008               	goto	l2779
 23796  014044                     
 23797                           ; BSR set to: 0
 23798                           
 23799                           ; BSR set to: 0
 23800  014044  0100               	movlb	0	; () banked
 23801  014046  90D8               	bcf	status,0,c
 23802  014048  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23803  01404A  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23804  01404C  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23805  01404E  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23806  014050  0100               	movlb	0	; () banked
 23807  014052  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23808  014054                     l2779:
 23809                           
 23810                           ; BSR set to: 0
 23811                           
 23812                           ; BSR set to: 0
 23813  014054  0100               	movlb	0	; () banked
 23814  014056  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23815  014058  D7F5               	goto	l2780
 23816  01405A                     u9080:
 23817                           
 23818                           ; BSR set to: 0
 23819                           
 23820                           ; BSR set to: 0
 23821                           
 23822                           ; BSR set to: 0
 23823  01405A  0100               	movlb	0	; () banked
 23824  01405C  90D8               	bcf	status,0,c
 23825  01405E  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23826  014060  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23827  014062  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23828  014064  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23829                           
 23830                           ; BSR set to: 0
 23831  014066  0100               	movlb	0	; () banked
 23832  014068  5164               	movf	___lldiv@divisor& (0+255),w,b
 23833  01406A  0100               	movlb	0	; () banked
 23834  01406C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23835  01406E  0100               	movlb	0	; () banked
 23836  014070  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23837  014072  0100               	movlb	0	; () banked
 23838  014074  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23839  014076  0100               	movlb	0	; () banked
 23840  014078  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23841  01407A  0100               	movlb	0	; () banked
 23842  01407C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23843  01407E  0100               	movlb	0	; () banked
 23844  014080  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23845  014082  0100               	movlb	0	; () banked
 23846  014084  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23847  014086  A0D8               	btfss	status,0,c
 23848  014088  D012               	goto	l2783
 23849                           
 23850                           ; BSR set to: 0
 23851  01408A  0100               	movlb	0	; () banked
 23852  01408C  5164               	movf	___lldiv@divisor& (0+255),w,b
 23853  01408E  0100               	movlb	0	; () banked
 23854  014090  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23855  014092  0100               	movlb	0	; () banked
 23856  014094  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23857  014096  0100               	movlb	0	; () banked
 23858  014098  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23859  01409A  0100               	movlb	0	; () banked
 23860  01409C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23861  01409E  0100               	movlb	0	; () banked
 23862  0140A0  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23863  0140A2  0100               	movlb	0	; () banked
 23864  0140A4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23865  0140A6  0100               	movlb	0	; () banked
 23866  0140A8  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23867                           
 23868                           ; BSR set to: 0
 23869  0140AA  0100               	movlb	0	; () banked
 23870  0140AC  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23871  0140AE                     l2783:
 23872                           
 23873                           ; BSR set to: 0
 23874                           
 23875                           ; BSR set to: 0
 23876  0140AE  0100               	movlb	0	; () banked
 23877  0140B0  90D8               	bcf	status,0,c
 23878  0140B2  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23879  0140B4  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23880  0140B6  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23881  0140B8  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23882                           
 23883                           ; BSR set to: 0
 23884  0140BA  0100               	movlb	0	; () banked
 23885  0140BC  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23886  0140BE  D7CD               	goto	u9080
 23887  0140C0                     l2784:
 23888                           
 23889                           ; BSR set to: 0
 23890                           
 23891                           ; BSR set to: 0
 23892  0140C0  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23893  0140C4  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23894  0140C8  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23895  0140CC  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23896                           
 23897                           ; BSR set to: 0
 23898  0140D0  0012               	return		;funcret
 23899  0140D2                     __end_of___lldiv:
 23900                           	opt stack 0
 23901                           tosu	equ	0xFFF
 23902                           tosh	equ	0xFFE
 23903                           tosl	equ	0xFFD
 23904                           pclath	equ	0xFFA
 23905                           tblptru	equ	0xFF8
 23906                           tblptrh	equ	0xFF7
 23907                           tblptrl	equ	0xFF6
 23908                           tablat	equ	0xFF5
 23909                           prodh	equ	0xFF4
 23910                           prodl	equ	0xFF3
 23911                           intcon	equ	0xFF2
 23912                           postinc0	equ	0xFEE
 23913                           wreg	equ	0xFE8
 23914                           indf1	equ	0xFE7
 23915                           postdec1	equ	0xFE5
 23916                           fsr1h	equ	0xFE2
 23917                           fsr1l	equ	0xFE1
 23918                           indf2	equ	0xFDF
 23919                           postinc2	equ	0xFDE
 23920                           postdec2	equ	0xFDD
 23921                           plusw2	equ	0xFDB
 23922                           fsr2h	equ	0xFDA
 23923                           fsr2l	equ	0xFD9
 23924                           status	equ	0xFD8
 23925                           
 23926 ;; *************** function _Timer2_Clear *****************
 23927 ;; Defined at:
 23928 ;;		line 3 in file "Library/Timer2.c"
 23929 ;; Parameters:    Size  Location     Type
 23930 ;;		None
 23931 ;; Auto vars:     Size  Location     Type
 23932 ;;		None
 23933 ;; Return value:  Size  Location     Type
 23934 ;;                  1    wreg      void 
 23935 ;; Registers used:
 23936 ;;		None
 23937 ;; Tracked objects:
 23938 ;;		On entry : 0/0
 23939 ;;		On exit  : 0/0
 23940 ;;		Unchanged: 0/0
 23941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23946 ;;Total ram usage:        0 bytes
 23947 ;; Hardware stack levels used:    1
 23948 ;; Hardware stack levels required when called:    7
 23949 ;; This function calls:
 23950 ;;		Nothing
 23951 ;; This function is called by:
 23952 ;;		_Timer2_Init
 23953 ;; This function uses a non-reentrant model
 23954 ;;
 23955                           
 23956                           	psect	text117
 23957  01652C                     __ptext117:
 23958                           	opt stack 0
 23959  01652C                     _Timer2_Clear:
 23960                           	opt stack 18
 23961                           
 23962                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 23963                           
 23964                           ; BSR set to: 0
 23965                           ;incstack = 0
 23966  01652C  929E               	bcf	3998,1,c	;volatile
 23967                           
 23968                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 23969  01652E  929D               	bcf	3997,1,c	;volatile
 23970                           
 23971                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 23972  016530  929F               	bcf	3999,1,c	;volatile
 23973  016532  0012               	return		;funcret
 23974  016534                     __end_of_Timer2_Clear:
 23975                           	opt stack 0
 23976                           tosu	equ	0xFFF
 23977                           tosh	equ	0xFFE
 23978                           tosl	equ	0xFFD
 23979                           pclath	equ	0xFFA
 23980                           tblptru	equ	0xFF8
 23981                           tblptrh	equ	0xFF7
 23982                           tblptrl	equ	0xFF6
 23983                           tablat	equ	0xFF5
 23984                           prodh	equ	0xFF4
 23985                           prodl	equ	0xFF3
 23986                           intcon	equ	0xFF2
 23987                           postinc0	equ	0xFEE
 23988                           wreg	equ	0xFE8
 23989                           indf1	equ	0xFE7
 23990                           postdec1	equ	0xFE5
 23991                           fsr1h	equ	0xFE2
 23992                           fsr1l	equ	0xFE1
 23993                           indf2	equ	0xFDF
 23994                           postinc2	equ	0xFDE
 23995                           postdec2	equ	0xFDD
 23996                           plusw2	equ	0xFDB
 23997                           fsr2h	equ	0xFDA
 23998                           fsr2l	equ	0xFD9
 23999                           status	equ	0xFD8
 24000                           
 24001 ;; *************** function _SPI_DisableISR *****************
 24002 ;; Defined at:
 24003 ;;		line 181 in file "Library/SPI.c"
 24004 ;; Parameters:    Size  Location     Type
 24005 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 24006 ;;		 -> SPI1(11), SPI2(11), 
 24007 ;; Auto vars:     Size  Location     Type
 24008 ;;		None
 24009 ;; Return value:  Size  Location     Type
 24010 ;;                  1    wreg      void 
 24011 ;; Registers used:
 24012 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24013 ;; Tracked objects:
 24014 ;;		On entry : 0/0
 24015 ;;		On exit  : 0/0
 24016 ;;		Unchanged: 0/0
 24017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24018 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24022 ;;Total ram usage:        2 bytes
 24023 ;; Hardware stack levels used:    1
 24024 ;; Hardware stack levels required when called:    7
 24025 ;; This function calls:
 24026 ;;		Nothing
 24027 ;; This function is called by:
 24028 ;;		_SPI_Init
 24029 ;; This function uses a non-reentrant model
 24030 ;;
 24031                           
 24032                           	psect	text118
 24033  016132                     __ptext118:
 24034                           	opt stack 0
 24035  016132                     _SPI_DisableISR:
 24036                           	opt stack 19
 24037                           
 24038                           ;SPI.c: 183: switch (pInput->mChannel)
 24039                           
 24040                           ;incstack = 0
 24041  016132  D004               	goto	l654
 24042  016134                     l655:
 24043                           
 24044                           ; BSR set to: 0
 24045  016134  969D               	bcf	3997,3,c	;volatile
 24046  016136  0012               	return	
 24047  016138                     l657:
 24048                           
 24049                           ; BSR set to: 0
 24050  016138  9EA3               	bcf	4003,7,c	;volatile
 24051                           
 24052                           ; BSR set to: 0
 24053                           ;SPI.c: 188: };
 24054                           
 24055                           ; BSR set to: 0
 24056                           
 24057                           ;SPI.c: 187: default: return;
 24058  01613A  0012               	return	
 24059  01613C                     l654:
 24060                           
 24061                           ; BSR set to: 0
 24062  01613C  0100               	movlb	0	; () banked
 24063  01613E  EE20 F002          	lfsr	2,2
 24064  016142  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 24065  016144  26D9               	addwf	fsr2l,f,c
 24066  016146  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 24067  016148  22DA               	addwfc	fsr2h,f,c
 24068  01614A  50DF               	movf	indf2,w,c
 24069                           
 24070                           ; Switch size 1, requested type "space"
 24071                           ; Number of cases is 2, Range of values is 0 to 1
 24072                           ; switch strategies available:
 24073                           ; Name         Instructions Cycles
 24074                           ; simple_byte            7     4 (average)
 24075                           ;	Chosen strategy is simple_byte
 24076  01614C  0A00               	xorlw	0	; case 0
 24077  01614E  B4D8               	btfsc	status,2,c
 24078  016150  D7F1               	goto	l655
 24079  016152  0A01               	xorlw	1	; case 1
 24080  016154  A4D8               	btfss	status,2,c
 24081  016156  0012               	return	
 24082  016158  D7EF               	goto	l657
 24083  01615A                     __end_of_SPI_DisableISR:
 24084                           	opt stack 0
 24085                           tosu	equ	0xFFF
 24086                           tosh	equ	0xFFE
 24087                           tosl	equ	0xFFD
 24088                           pclath	equ	0xFFA
 24089                           tblptru	equ	0xFF8
 24090                           tblptrh	equ	0xFF7
 24091                           tblptrl	equ	0xFF6
 24092                           tablat	equ	0xFF5
 24093                           prodh	equ	0xFF4
 24094                           prodl	equ	0xFF3
 24095                           intcon	equ	0xFF2
 24096                           postinc0	equ	0xFEE
 24097                           wreg	equ	0xFE8
 24098                           indf1	equ	0xFE7
 24099                           postdec1	equ	0xFE5
 24100                           fsr1h	equ	0xFE2
 24101                           fsr1l	equ	0xFE1
 24102                           indf2	equ	0xFDF
 24103                           postinc2	equ	0xFDE
 24104                           postdec2	equ	0xFDD
 24105                           plusw2	equ	0xFDB
 24106                           fsr2h	equ	0xFDA
 24107                           fsr2l	equ	0xFD9
 24108                           status	equ	0xFD8
 24109                           
 24110 ;; *************** function _SPI_DCS *****************
 24111 ;; Defined at:
 24112 ;;		line 219 in file "Library/SPI.c"
 24113 ;; Parameters:    Size  Location     Type
 24114 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 24115 ;;		 -> SPI1(11), SPI2(11), 
 24116 ;; Auto vars:     Size  Location     Type
 24117 ;;		None
 24118 ;; Return value:  Size  Location     Type
 24119 ;;                  1    wreg      void 
 24120 ;; Registers used:
 24121 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24122 ;; Tracked objects:
 24123 ;;		On entry : 0/0
 24124 ;;		On exit  : 0/0
 24125 ;;		Unchanged: 0/0
 24126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24127 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24130 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24131 ;;Total ram usage:        2 bytes
 24132 ;; Hardware stack levels used:    1
 24133 ;; Hardware stack levels required when called:    7
 24134 ;; This function calls:
 24135 ;;		Nothing
 24136 ;; This function is called by:
 24137 ;;		_SPI_Init
 24138 ;; This function uses a non-reentrant model
 24139 ;;
 24140                           
 24141                           	psect	text119
 24142  015FF8                     __ptext119:
 24143                           	opt stack 0
 24144  015FF8                     _SPI_DCS:
 24145                           	opt stack 19
 24146                           
 24147                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 24148                           
 24149                           ; BSR set to: 0
 24150                           ;incstack = 0
 24151  015FF8  0100               	movlb	0	; () banked
 24152  015FFA  EE20 F002          	lfsr	2,2
 24153  015FFE  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 24154  016000  26D9               	addwf	fsr2l,f,c
 24155  016002  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 24156  016004  22DA               	addwfc	fsr2h,f,c
 24157  016006  50DF               	movf	indf2,w,c
 24158  016008  A4D8               	btfss	status,2,c
 24159  01600A  D007               	goto	l673
 24160                           
 24161                           ; BSR set to: 0
 24162                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 24163  01600C  C0EE  FFD9         	movff	_PortC+4,fsr2l
 24164  016010  C0EF  FFDA         	movff	_PortC+5,fsr2h
 24165  016014  0100               	movlb	0	; () banked
 24166  016016  84DF               	bsf	indf2,2,c
 24167  016018  0012               	return	
 24168  01601A                     l673:
 24169                           
 24170                           ; BSR set to: 0
 24171                           ;SPI.c: 223: else
 24172                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 24173                           
 24174                           ; BSR set to: 0
 24175  01601A  C0E4  FFD9         	movff	_PortD+4,fsr2l
 24176  01601E  C0E5  FFDA         	movff	_PortD+5,fsr2h
 24177  016022  0100               	movlb	0	; () banked
 24178  016024  8EDF               	bsf	indf2,7,c
 24179  016026  0012               	return	
 24180  016028                     __end_of_SPI_DCS:
 24181                           	opt stack 0
 24182                           tosu	equ	0xFFF
 24183                           tosh	equ	0xFFE
 24184                           tosl	equ	0xFFD
 24185                           pclath	equ	0xFFA
 24186                           tblptru	equ	0xFF8
 24187                           tblptrh	equ	0xFF7
 24188                           tblptrl	equ	0xFF6
 24189                           tablat	equ	0xFF5
 24190                           prodh	equ	0xFF4
 24191                           prodl	equ	0xFF3
 24192                           intcon	equ	0xFF2
 24193                           postinc0	equ	0xFEE
 24194                           wreg	equ	0xFE8
 24195                           indf1	equ	0xFE7
 24196                           postdec1	equ	0xFE5
 24197                           fsr1h	equ	0xFE2
 24198                           fsr1l	equ	0xFE1
 24199                           indf2	equ	0xFDF
 24200                           postinc2	equ	0xFDE
 24201                           postdec2	equ	0xFDD
 24202                           plusw2	equ	0xFDB
 24203                           fsr2h	equ	0xFDA
 24204                           fsr2l	equ	0xFD9
 24205                           status	equ	0xFD8
 24206                           
 24207 ;; *************** function _Button_Init *****************
 24208 ;; Defined at:
 24209 ;;		line 18 in file "Library/Button.c"
 24210 ;; Parameters:    Size  Location     Type
 24211 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 24212 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 24213 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 24214 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 24215 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 24216 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 24217 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 24218 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 24219 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 24220 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 24221 ;; Auto vars:     Size  Location     Type
 24222 ;;		None
 24223 ;; Return value:  Size  Location     Type
 24224 ;;                  1    wreg      void 
 24225 ;; Registers used:
 24226 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24227 ;; Tracked objects:
 24228 ;;		On entry : 0/0
 24229 ;;		On exit  : 0/0
 24230 ;;		Unchanged: 0/0
 24231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24232 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24235 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24236 ;;Total ram usage:       13 bytes
 24237 ;; Hardware stack levels used:    1
 24238 ;; Hardware stack levels required when called:   15
 24239 ;; This function calls:
 24240 ;;		_HMI_InitButtons
 24241 ;;		_MXK_InitDIPSwitch
 24242 ;;		_MXK_InitTestButton
 24243 ;; This function is called by:
 24244 ;;		_HMI_Init
 24245 ;;		_FunctInitButton
 24246 ;; This function uses a non-reentrant model
 24247 ;;
 24248                           
 24249                           	psect	text120
 24250  013C2E                     __ptext120:
 24251                           	opt stack 0
 24252  013C2E                     _Button_Init:
 24253                           	opt stack 13
 24254                           
 24255                           ;Button.c: 21: if(pInput==(void*)0)
 24256                           
 24257                           ; BSR set to: 0
 24258                           ;incstack = 0
 24259  013C2E  0100               	movlb	0	; () banked
 24260  013C30  519B               	movf	Button_Init@pInput& (0+255),w,b
 24261  013C32  0100               	movlb	0	; () banked
 24262  013C34  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 24263  013C36  B4D8               	btfsc	status,2,c
 24264  013C38  0012               	return	
 24265                           
 24266                           ; BSR set to: 0
 24267                           ;Button.c: 23: if(pInitIO==(void*)0)
 24268                           
 24269                           ; BSR set to: 0
 24270                           
 24271                           ; BSR set to: 0
 24272                           ;Button.c: 22: return;
 24273  013C3A  0100               	movlb	0	; () banked
 24274  013C3C  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24275  013C3E  0100               	movlb	0	; () banked
 24276  013C40  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 24277  013C42  0100               	movlb	0	; () banked
 24278  013C44  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 24279  013C46  B4D8               	btfsc	status,2,c
 24280  013C48  0012               	return	
 24281                           
 24282                           ; BSR set to: 0
 24283                           ;Button.c: 25: if(pGetState==(void*)0)
 24284                           
 24285                           ; BSR set to: 0
 24286                           
 24287                           ; BSR set to: 0
 24288                           ;Button.c: 24: return;
 24289  013C4A  0100               	movlb	0	; () banked
 24290  013C4C  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 24291  013C4E  0100               	movlb	0	; () banked
 24292  013C50  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 24293  013C52  0100               	movlb	0	; () banked
 24294  013C54  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 24295  013C56  B4D8               	btfsc	status,2,c
 24296  013C58  0012               	return	
 24297                           
 24298                           ; BSR set to: 0
 24299                           ;Button.c: 27: if(pFunction==(void*)0)
 24300                           
 24301                           ; BSR set to: 0
 24302                           
 24303                           ; BSR set to: 0
 24304                           ;Button.c: 26: return;
 24305  013C5A  0100               	movlb	0	; () banked
 24306  013C5C  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 24307  013C5E  0100               	movlb	0	; () banked
 24308  013C60  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 24309  013C62  0100               	movlb	0	; () banked
 24310  013C64  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 24311  013C66  B4D8               	btfsc	status,2,c
 24312  013C68  0012               	return	
 24313                           
 24314                           ; BSR set to: 0
 24315                           ;Button.c: 30: if(pThreshold == 0)
 24316                           
 24317                           ; BSR set to: 0
 24318                           
 24319                           ; BSR set to: 0
 24320                           ;Button.c: 28: return;
 24321  013C6A  0100               	movlb	0	; () banked
 24322  013C6C  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 24323  013C6E  0100               	movlb	0	; () banked
 24324  013C70  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 24325  013C72  A4D8               	btfss	status,2,c
 24326  013C74  D005               	goto	l8
 24327                           
 24328                           ; BSR set to: 0
 24329                           ;Button.c: 31: pThreshold = 1;
 24330  013C76  0E00               	movlw	0
 24331  013C78  0100               	movlb	0	; () banked
 24332  013C7A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24333  013C7C  0E01               	movlw	1
 24334  013C7E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24335  013C80                     l8:
 24336                           
 24337                           ; BSR set to: 0
 24338                           ;Button.c: 34: pInput->mState = 0;
 24339                           
 24340                           ; BSR set to: 0
 24341  013C80  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 24342  013C84  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 24343  013C88  0E00               	movlw	0
 24344  013C8A  6EDF               	movwf	indf2,c
 24345                           
 24346                           ; BSR set to: 0
 24347                           ;Button.c: 35: pInput->mCount = 0;
 24348  013C8C  0100               	movlb	0	; () banked
 24349  013C8E  EE20 F001          	lfsr	2,1
 24350  013C92  519B               	movf	Button_Init@pInput& (0+255),w,b
 24351  013C94  26D9               	addwf	fsr2l,f,c
 24352  013C96  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24353  013C98  22DA               	addwfc	fsr2h,f,c
 24354  013C9A  0E00               	movlw	0
 24355  013C9C  6EDF               	movwf	indf2,c
 24356                           
 24357                           ; BSR set to: 0
 24358                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 24359  013C9E  0100               	movlb	0	; () banked
 24360  013CA0  EE20 F002          	lfsr	2,2
 24361  013CA4  519B               	movf	Button_Init@pInput& (0+255),w,b
 24362  013CA6  26D9               	addwf	fsr2l,f,c
 24363  013CA8  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24364  013CAA  22DA               	addwfc	fsr2h,f,c
 24365  013CAC  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 24366  013CB0  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 24367                           
 24368                           ; BSR set to: 0
 24369                           ;Button.c: 37: pInput->mFunction = pFunction;
 24370  013CB4  0100               	movlb	0	; () banked
 24371  013CB6  EE20 F004          	lfsr	2,4
 24372  013CBA  519B               	movf	Button_Init@pInput& (0+255),w,b
 24373  013CBC  26D9               	addwf	fsr2l,f,c
 24374  013CBE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24375  013CC0  22DA               	addwfc	fsr2h,f,c
 24376  013CC2  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 24377  013CC6  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 24378  013CCA  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 24379                           
 24380                           ; BSR set to: 0
 24381                           ;Button.c: 38: pInput->mGetState = pGetState;
 24382  013CCE  0100               	movlb	0	; () banked
 24383  013CD0  EE20 F007          	lfsr	2,7
 24384  013CD4  519B               	movf	Button_Init@pInput& (0+255),w,b
 24385  013CD6  26D9               	addwf	fsr2l,f,c
 24386  013CD8  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24387  013CDA  22DA               	addwfc	fsr2h,f,c
 24388  013CDC  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 24389  013CE0  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 24390  013CE4  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 24391                           
 24392                           ; BSR set to: 0
 24393                           ;Button.c: 41: pInitIO();
 24394  013CE8  D801               	call	u9708
 24395  013CEA  0012               	return	
 24396  013CEC                     u9708:
 24397  013CEC  0005               	push	
 24398  013CEE  6EFA               	movwf	pclath,c
 24399  013CF0  0100               	movlb	0	; () banked
 24400  013CF2  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24401  013CF4  6EFD               	movwf	tosl,c
 24402  013CF6  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 24403  013CF8  6EFE               	movwf	tosh,c
 24404  013CFA  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 24405  013CFC  6EFF               	movwf	tosu,c
 24406  013CFE  50FA               	movf	pclath,w,c
 24407  013D00  0012               	return		;indir
 24408  013D02                     __end_of_Button_Init:
 24409                           	opt stack 0
 24410                           tosu	equ	0xFFF
 24411                           tosh	equ	0xFFE
 24412                           tosl	equ	0xFFD
 24413                           pclath	equ	0xFFA
 24414                           tblptru	equ	0xFF8
 24415                           tblptrh	equ	0xFF7
 24416                           tblptrl	equ	0xFF6
 24417                           tablat	equ	0xFF5
 24418                           prodh	equ	0xFF4
 24419                           prodl	equ	0xFF3
 24420                           intcon	equ	0xFF2
 24421                           postinc0	equ	0xFEE
 24422                           wreg	equ	0xFE8
 24423                           indf1	equ	0xFE7
 24424                           postdec1	equ	0xFE5
 24425                           fsr1h	equ	0xFE2
 24426                           fsr1l	equ	0xFE1
 24427                           indf2	equ	0xFDF
 24428                           postinc2	equ	0xFDE
 24429                           postdec2	equ	0xFDD
 24430                           plusw2	equ	0xFDB
 24431                           fsr2h	equ	0xFDA
 24432                           fsr2l	equ	0xFD9
 24433                           status	equ	0xFD8
 24434                           
 24435 ;; *************** function _MXK_InitDIPSwitch *****************
 24436 ;; Defined at:
 24437 ;;		line 20 in file "Library/MXK.c"
 24438 ;; Parameters:    Size  Location     Type
 24439 ;;		None
 24440 ;; Auto vars:     Size  Location     Type
 24441 ;;		None
 24442 ;; Return value:  Size  Location     Type
 24443 ;;                  1    wreg      void 
 24444 ;; Registers used:
 24445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24446 ;; Tracked objects:
 24447 ;;		On entry : 0/0
 24448 ;;		On exit  : 0/0
 24449 ;;		Unchanged: 0/0
 24450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24455 ;;Total ram usage:        0 bytes
 24456 ;; Hardware stack levels used:    1
 24457 ;; Hardware stack levels required when called:   14
 24458 ;; This function calls:
 24459 ;;		_Port_SetQuadType
 24460 ;; This function is called by:
 24461 ;;		_FunctInitButton
 24462 ;;		_Button_Init
 24463 ;; This function uses a non-reentrant model
 24464 ;;
 24465                           
 24466                           	psect	text121
 24467  01629C                     __ptext121:
 24468                           	opt stack 0
 24469  01629C                     _MXK_InitDIPSwitch:
 24470                           	opt stack 13
 24471                           
 24472                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 24473                           
 24474                           ;incstack = 0
 24475  01629C  0EE0               	movlw	low _PortD
 24476  01629E  0100               	movlb	0	; () banked
 24477  0162A0  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 24478  0162A2  0E00               	movlw	high _PortD
 24479  0162A4  0100               	movlb	0	; () banked
 24480  0162A6  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 24481  0162A8  0E00               	movlw	0
 24482  0162AA  0100               	movlb	0	; () banked
 24483  0162AC  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 24484  0162AE  0E00               	movlw	0
 24485  0162B0  0100               	movlb	0	; () banked
 24486  0162B2  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 24487  0162B4  EC52  F08D         	call	_Port_SetQuadType	;wreg free
 24488  0162B8  0012               	return		;funcret
 24489  0162BA                     __end_of_MXK_InitDIPSwitch:
 24490                           	opt stack 0
 24491                           tosu	equ	0xFFF
 24492                           tosh	equ	0xFFE
 24493                           tosl	equ	0xFFD
 24494                           pclath	equ	0xFFA
 24495                           tblptru	equ	0xFF8
 24496                           tblptrh	equ	0xFF7
 24497                           tblptrl	equ	0xFF6
 24498                           tablat	equ	0xFF5
 24499                           prodh	equ	0xFF4
 24500                           prodl	equ	0xFF3
 24501                           intcon	equ	0xFF2
 24502                           postinc0	equ	0xFEE
 24503                           wreg	equ	0xFE8
 24504                           indf1	equ	0xFE7
 24505                           postdec1	equ	0xFE5
 24506                           fsr1h	equ	0xFE2
 24507                           fsr1l	equ	0xFE1
 24508                           indf2	equ	0xFDF
 24509                           postinc2	equ	0xFDE
 24510                           postdec2	equ	0xFDD
 24511                           plusw2	equ	0xFDB
 24512                           fsr2h	equ	0xFDA
 24513                           fsr2l	equ	0xFD9
 24514                           status	equ	0xFD8
 24515                           
 24516 ;; *************** function _HMI_InitButtons *****************
 24517 ;; Defined at:
 24518 ;;		line 21 in file "HMI.c"
 24519 ;; Parameters:    Size  Location     Type
 24520 ;;		None
 24521 ;; Auto vars:     Size  Location     Type
 24522 ;;		None
 24523 ;; Return value:  Size  Location     Type
 24524 ;;                  1    wreg      void 
 24525 ;; Registers used:
 24526 ;;		wreg, status,2
 24527 ;; Tracked objects:
 24528 ;;		On entry : 0/0
 24529 ;;		On exit  : 0/0
 24530 ;;		Unchanged: 0/0
 24531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24536 ;;Total ram usage:        0 bytes
 24537 ;; Hardware stack levels used:    1
 24538 ;; Hardware stack levels required when called:    7
 24539 ;; This function calls:
 24540 ;;		Nothing
 24541 ;; This function is called by:
 24542 ;;		_HMI_Init
 24543 ;;		_Button_Init
 24544 ;; This function uses a non-reentrant model
 24545 ;;
 24546                           
 24547                           	psect	text122
 24548  016550                     __ptext122:
 24549                           	opt stack 0
 24550  016550                     _HMI_InitButtons:
 24551                           	opt stack 20
 24552                           
 24553                           ;HMI.c: 23: TRISE = 0xFC;
 24554                           
 24555                           ;incstack = 0
 24556  016550  0EFC               	movlw	252
 24557  016552  6E96               	movwf	3990,c	;volatile
 24558  016554  0012               	return		;funcret
 24559  016556                     __end_of_HMI_InitButtons:
 24560                           	opt stack 0
 24561                           tosu	equ	0xFFF
 24562                           tosh	equ	0xFFE
 24563                           tosl	equ	0xFFD
 24564                           pclath	equ	0xFFA
 24565                           tblptru	equ	0xFF8
 24566                           tblptrh	equ	0xFF7
 24567                           tblptrl	equ	0xFF6
 24568                           tablat	equ	0xFF5
 24569                           prodh	equ	0xFF4
 24570                           prodl	equ	0xFF3
 24571                           intcon	equ	0xFF2
 24572                           postinc0	equ	0xFEE
 24573                           wreg	equ	0xFE8
 24574                           indf1	equ	0xFE7
 24575                           postdec1	equ	0xFE5
 24576                           fsr1h	equ	0xFE2
 24577                           fsr1l	equ	0xFE1
 24578                           indf2	equ	0xFDF
 24579                           postinc2	equ	0xFDE
 24580                           postdec2	equ	0xFDD
 24581                           plusw2	equ	0xFDB
 24582                           fsr2h	equ	0xFDA
 24583                           fsr2l	equ	0xFD9
 24584                           status	equ	0xFD8
 24585                           
 24586 ;; *************** function _MXK_InitTestButton *****************
 24587 ;; Defined at:
 24588 ;;		line 10 in file "Library/MXK.c"
 24589 ;; Parameters:    Size  Location     Type
 24590 ;;		None
 24591 ;; Auto vars:     Size  Location     Type
 24592 ;;		None
 24593 ;; Return value:  Size  Location     Type
 24594 ;;                  1    wreg      void 
 24595 ;; Registers used:
 24596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24597 ;; Tracked objects:
 24598 ;;		On entry : 0/0
 24599 ;;		On exit  : 0/0
 24600 ;;		Unchanged: 0/0
 24601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24606 ;;Total ram usage:        0 bytes
 24607 ;; Hardware stack levels used:    1
 24608 ;; Hardware stack levels required when called:   12
 24609 ;; This function calls:
 24610 ;;		_Port_SetPinType
 24611 ;; This function is called by:
 24612 ;;		_FunctInitButton
 24613 ;;		_Button_Init
 24614 ;; This function uses a non-reentrant model
 24615 ;;
 24616                           
 24617                           	psect	text123
 24618  0162BA                     __ptext123:
 24619                           	opt stack 0
 24620  0162BA                     _MXK_InitTestButton:
 24621                           	opt stack 15
 24622                           
 24623                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 24624                           
 24625                           ;incstack = 0
 24626  0162BA  0EA3               	movlw	low _PortB
 24627  0162BC  0100               	movlb	0	; () banked
 24628  0162BE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24629  0162C0  0E03               	movlw	high _PortB
 24630  0162C2  0100               	movlb	0	; () banked
 24631  0162C4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24632  0162C6  0E04               	movlw	4
 24633  0162C8  0100               	movlb	0	; () banked
 24634  0162CA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24635  0162CC  0E00               	movlw	0
 24636  0162CE  0100               	movlb	0	; () banked
 24637  0162D0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24638  0162D2  EC5F  F093         	call	_Port_SetPinType	;wreg free
 24639  0162D6  0012               	return		;funcret
 24640  0162D8                     __end_of_MXK_InitTestButton:
 24641                           	opt stack 0
 24642                           tosu	equ	0xFFF
 24643                           tosh	equ	0xFFE
 24644                           tosl	equ	0xFFD
 24645                           pclath	equ	0xFFA
 24646                           tblptru	equ	0xFF8
 24647                           tblptrh	equ	0xFF7
 24648                           tblptrl	equ	0xFF6
 24649                           tablat	equ	0xFF5
 24650                           prodh	equ	0xFF4
 24651                           prodl	equ	0xFF3
 24652                           intcon	equ	0xFF2
 24653                           postinc0	equ	0xFEE
 24654                           wreg	equ	0xFE8
 24655                           indf1	equ	0xFE7
 24656                           postdec1	equ	0xFE5
 24657                           fsr1h	equ	0xFE2
 24658                           fsr1l	equ	0xFE1
 24659                           indf2	equ	0xFDF
 24660                           postinc2	equ	0xFDE
 24661                           postdec2	equ	0xFDD
 24662                           plusw2	equ	0xFDB
 24663                           fsr2h	equ	0xFDA
 24664                           fsr2l	equ	0xFD9
 24665                           status	equ	0xFD8
 24666                           
 24667 ;; *************** function _Port_SetPinType *****************
 24668 ;; Defined at:
 24669 ;;		line 189 in file "Library/Port.c"
 24670 ;; Parameters:    Size  Location     Type
 24671 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 24672 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24673 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24674 ;;  pPin            1   40[BANK0 ] enum E6750
 24675 ;;  pType           1   41[BANK0 ] enum E6795
 24676 ;; Auto vars:     Size  Location     Type
 24677 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 24678 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 24679 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 24680 ;;  Output          1   42[BANK0 ] enum E6475
 24681 ;; Return value:  Size  Location     Type
 24682 ;;                  1    wreg      enum E6475
 24683 ;; Registers used:
 24684 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24685 ;; Tracked objects:
 24686 ;;		On entry : 0/0
 24687 ;;		On exit  : 0/0
 24688 ;;		Unchanged: 0/0
 24689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24690 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24691 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24693 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24694 ;;Total ram usage:        7 bytes
 24695 ;; Hardware stack levels used:    1
 24696 ;; Hardware stack levels required when called:   11
 24697 ;; This function calls:
 24698 ;;		_Byte_SetBit
 24699 ;;		_PortProperty_Valid
 24700 ;;		_Word_SetPair
 24701 ;; This function is called by:
 24702 ;;		_Configure_GPIOs
 24703 ;;		_LED_Init
 24704 ;;		_Port_Init
 24705 ;;		_SPI_Init
 24706 ;;		_Motor_Init
 24707 ;;		_MXK_InitTestButton
 24708 ;;		_MXK_Init
 24709 ;;		_I2C_Init
 24710 ;; This function uses a non-reentrant model
 24711 ;;
 24712                           
 24713                           	psect	text124
 24714  0126BE                     __ptext124:
 24715                           	opt stack 0
 24716  0126BE                     _Port_SetPinType:
 24717                           	opt stack 17
 24718                           
 24719                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 24720                           
 24721                           ;incstack = 0
 24722  0126BE  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 24723  0126C2  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 24724  0126C6  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 24725  0126CA  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 24726                           
 24727                           ;Port.c: 192: ePinError Output = ePinErrorState;
 24728  0126CE  0E05               	movlw	5
 24729  0126D0  0100               	movlb	0	; () banked
 24730  0126D2  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24731                           
 24732                           ;Port.c: 193: switch (pType)
 24733  0126D4  D0B5               	goto	l412
 24734  0126D6                     
 24735                           ; BSR set to: 0
 24736                           ;Port.c: 197: {
 24737                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24738                           
 24739                           ; BSR set to: 0
 24740  0126D6  0100               	movlb	0	; () banked
 24741  0126D8  EE20 F002          	lfsr	2,2
 24742  0126DC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24743  0126DE  26D9               	addwf	fsr2l,f,c
 24744  0126E0  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24745  0126E2  22DA               	addwfc	fsr2h,f,c
 24746  0126E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24747  0126E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24748  0126EC  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24749  0126F0  0E01               	movlw	1
 24750  0126F2  0100               	movlb	0	; () banked
 24751  0126F4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24752  0126F6  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24753                           
 24754                           ;Port.c: 203: break;
 24755  0126FA  D0B0               	goto	l414
 24756  0126FC                     
 24757                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 24758  0126FC  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24759  012700  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24760  012704  0E01               	movlw	1
 24761  012706  0100               	movlb	0	; () banked
 24762  012708  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24763  01270A  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24764  01270E  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 24765  012712  0100               	movlb	0	; () banked
 24766  012714  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24767  012716  0100               	movlb	0	; () banked
 24768  012718  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24769  01271A  A4D8               	btfss	status,2,c
 24770  01271C  0012               	return	
 24771                           
 24772                           ; BSR set to: 0
 24773                           ;Port.c: 208: {
 24774                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24775  01271E  0100               	movlb	0	; () banked
 24776  012720  EE20 F002          	lfsr	2,2
 24777  012724  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24778  012726  26D9               	addwf	fsr2l,f,c
 24779  012728  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24780  01272A  22DA               	addwfc	fsr2h,f,c
 24781  01272C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24782  012730  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24783  012734  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24784  012738  0E00               	movlw	0
 24785  01273A  0100               	movlb	0	; () banked
 24786  01273C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24787  01273E  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24788                           
 24789                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24790  012742  0100               	movlb	0	; () banked
 24791  012744  EE20 F004          	lfsr	2,4
 24792  012748  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24793  01274A  26D9               	addwf	fsr2l,f,c
 24794  01274C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24795  01274E  22DA               	addwfc	fsr2h,f,c
 24796  012750  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24797  012754  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24798  012758  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24799  01275C  0E00               	movlw	0
 24800  01275E  0100               	movlb	0	; () banked
 24801  012760  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24802  012762  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24803                           
 24804                           ;Port.c: 214: break;
 24805  012766  D07A               	goto	l414
 24806  012768                     
 24807                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 24808                           
 24809                           ;Port.c: 218: case eTypeOutputOpenSource:
 24810  012768  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24811  01276C  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24812  012770  0E02               	movlw	2
 24813  012772  0100               	movlb	0	; () banked
 24814  012774  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24815  012776  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24816  01277A  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 24817  01277E  0100               	movlb	0	; () banked
 24818  012780  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24819  012782  0100               	movlb	0	; () banked
 24820  012784  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24821  012786  A4D8               	btfss	status,2,c
 24822  012788  0012               	return	
 24823                           
 24824                           ; BSR set to: 0
 24825                           ;Port.c: 220: {
 24826                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24827  01278A  0100               	movlb	0	; () banked
 24828  01278C  EE20 F002          	lfsr	2,2
 24829  012790  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24830  012792  26D9               	addwf	fsr2l,f,c
 24831  012794  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24832  012796  22DA               	addwfc	fsr2h,f,c
 24833  012798  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24834  01279C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24835  0127A0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24836  0127A4  0E01               	movlw	1
 24837  0127A6  0100               	movlb	0	; () banked
 24838  0127A8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24839  0127AA  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24840                           
 24841                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 24842  0127AE  0100               	movlb	0	; () banked
 24843  0127B0  EE20 F004          	lfsr	2,4
 24844  0127B4  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24845  0127B6  26D9               	addwf	fsr2l,f,c
 24846  0127B8  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24847  0127BA  22DA               	addwfc	fsr2h,f,c
 24848  0127BC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24849  0127C0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24850  0127C4  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24851  0127C8  0E01               	movlw	1
 24852  0127CA  0100               	movlb	0	; () banked
 24853  0127CC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24854  0127CE  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24855                           
 24856                           ;Port.c: 226: break;
 24857  0127D2  D044               	goto	l414
 24858  0127D4                     
 24859                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 24860                           
 24861                           ;Port.c: 230: case eTypeOutputPushPull:
 24862  0127D4  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24863  0127D8  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24864  0127DC  0E00               	movlw	0
 24865  0127DE  0100               	movlb	0	; () banked
 24866  0127E0  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24867  0127E2  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24868  0127E6  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 24869  0127EA  0100               	movlb	0	; () banked
 24870  0127EC  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24871  0127EE  0100               	movlb	0	; () banked
 24872  0127F0  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24873  0127F2  A4D8               	btfss	status,2,c
 24874  0127F4  0012               	return	
 24875                           
 24876                           ; BSR set to: 0
 24877                           ;Port.c: 232: {
 24878                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24879  0127F6  0100               	movlb	0	; () banked
 24880  0127F8  EE20 F002          	lfsr	2,2
 24881  0127FC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24882  0127FE  26D9               	addwf	fsr2l,f,c
 24883  012800  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24884  012802  22DA               	addwfc	fsr2h,f,c
 24885  012804  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24886  012808  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24887  01280C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24888  012810  0E00               	movlw	0
 24889  012812  0100               	movlb	0	; () banked
 24890  012814  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24891  012816  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24892                           
 24893                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24894  01281A  0100               	movlb	0	; () banked
 24895  01281C  EE20 F004          	lfsr	2,4
 24896  012820  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24897  012822  26D9               	addwf	fsr2l,f,c
 24898  012824  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24899  012826  22DA               	addwfc	fsr2h,f,c
 24900  012828  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24901  01282C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24902  012830  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24903  012834  0E00               	movlw	0
 24904  012836  0100               	movlb	0	; () banked
 24905  012838  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24906  01283A  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24907                           
 24908                           ;Port.c: 239: }
 24909                           
 24910                           ;Port.c: 238: break;
 24911  01283E  D00E               	goto	l414
 24912  012840                     l412:
 24913  012840  0100               	movlb	0	; () banked
 24914  012842  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 24915                           
 24916                           ; Switch size 1, requested type "space"
 24917                           ; Number of cases is 4, Range of values is 0 to 3
 24918                           ; switch strategies available:
 24919                           ; Name         Instructions Cycles
 24920                           ; simple_byte           13     7 (average)
 24921                           ;	Chosen strategy is simple_byte
 24922  012844  0A00               	xorlw	0	; case 0
 24923  012846  B4D8               	btfsc	status,2,c
 24924  012848  D746               	goto	l413
 24925  01284A  0A01               	xorlw	1	; case 1
 24926  01284C  B4D8               	btfsc	status,2,c
 24927  01284E  D756               	goto	l415
 24928  012850  0A03               	xorlw	3	; case 2
 24929  012852  B4D8               	btfsc	status,2,c
 24930  012854  D789               	goto	l417
 24931  012856  0A01               	xorlw	1	; case 3
 24932  012858  B4D8               	btfsc	status,2,c
 24933  01285A  D7BC               	goto	l421
 24934  01285C                     l414:
 24935                           
 24936                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 24937                           
 24938                           ; BSR set to: 0
 24939  01285C  0E08               	movlw	8
 24940  01285E  0100               	movlb	0	; () banked
 24941  012860  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 24942  012862  0100               	movlb	0	; () banked
 24943  012864  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 24944  012866  0E00               	movlw	0
 24945  012868  0100               	movlb	0	; () banked
 24946  01286A  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 24947  01286C  0100               	movlb	0	; () banked
 24948  01286E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24949  012870  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 24950  012874  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 24951  012878  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 24952  01287C  0012               	return	
 24953  01287E                     __end_of_Port_SetPinType:
 24954                           	opt stack 0
 24955                           tosu	equ	0xFFF
 24956                           tosh	equ	0xFFE
 24957                           tosl	equ	0xFFD
 24958                           pclath	equ	0xFFA
 24959                           tblptru	equ	0xFF8
 24960                           tblptrh	equ	0xFF7
 24961                           tblptrl	equ	0xFF6
 24962                           tablat	equ	0xFF5
 24963                           prodh	equ	0xFF4
 24964                           prodl	equ	0xFF3
 24965                           intcon	equ	0xFF2
 24966                           postinc0	equ	0xFEE
 24967                           wreg	equ	0xFE8
 24968                           indf1	equ	0xFE7
 24969                           postdec1	equ	0xFE5
 24970                           fsr1h	equ	0xFE2
 24971                           fsr1l	equ	0xFE1
 24972                           indf2	equ	0xFDF
 24973                           postinc2	equ	0xFDE
 24974                           postdec2	equ	0xFDD
 24975                           plusw2	equ	0xFDB
 24976                           fsr2h	equ	0xFDA
 24977                           fsr2l	equ	0xFD9
 24978                           status	equ	0xFD8
 24979                           
 24980 ;; *************** function _Byte_SetBit *****************
 24981 ;; Defined at:
 24982 ;;		line 32 in file "Library/Types.c"
 24983 ;; Parameters:    Size  Location     Type
 24984 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 24985 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 24986 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 24987 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24988 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24989 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24990 ;;		 -> NULL(0), 
 24991 ;;  pBit            1    2[BANK0 ] unsigned char 
 24992 ;;  pValue          1    3[BANK0 ] unsigned char 
 24993 ;; Auto vars:     Size  Location     Type
 24994 ;;		None
 24995 ;; Return value:  Size  Location     Type
 24996 ;;                  1    wreg      void 
 24997 ;; Registers used:
 24998 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24999 ;; Tracked objects:
 25000 ;;		On entry : 0/0
 25001 ;;		On exit  : 0/0
 25002 ;;		Unchanged: 0/0
 25003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25004 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25006 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25007 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25008 ;;Total ram usage:        7 bytes
 25009 ;; Hardware stack levels used:    1
 25010 ;; Hardware stack levels required when called:    7
 25011 ;; This function calls:
 25012 ;;		Nothing
 25013 ;; This function is called by:
 25014 ;;		_Port_SetPinType
 25015 ;;		_Port_SetPin
 25016 ;;		_SPI_Init
 25017 ;;		_SPI_MinSpeed
 25018 ;;		_SPI_MaxSpeed
 25019 ;;		_Word_SetBit
 25020 ;;		_I2C_Init
 25021 ;; This function uses a non-reentrant model
 25022 ;;
 25023                           
 25024                           	psect	text125
 25025  0155F0                     __ptext125:
 25026                           	opt stack 0
 25027  0155F0                     _Byte_SetBit:
 25028                           	opt stack 19
 25029                           
 25030                           ;Types.c: 34: pValue &= 1;
 25031                           
 25032                           ;incstack = 0
 25033  0155F0  0E01               	movlw	1
 25034  0155F2  0100               	movlb	0	; () banked
 25035  0155F4  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 25036                           
 25037                           ; BSR set to: 0
 25038                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 25039  0155F6  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 25040  0155FA  0E01               	movlw	1
 25041  0155FC  0100               	movlb	0	; () banked
 25042  0155FE  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 25043  015600  0100               	movlb	0	; () banked
 25044  015602  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 25045  015604  D003               	goto	u8674
 25046  015606                     u8675:
 25047  015606  0100               	movlb	0	; () banked
 25048  015608  90D8               	bcf	status,0,c
 25049  01560A  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 25050  01560C                     u8674:
 25051  01560C  0100               	movlb	0	; () banked
 25052  01560E  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 25053  015610  D7FA               	goto	u8675
 25054  015612  0100               	movlb	0	; () banked
 25055  015614  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 25056  015616  0AFF               	xorlw	255
 25057  015618  0100               	movlb	0	; () banked
 25058  01561A  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 25059  01561C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 25060  015620  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 25061  015624  0100               	movlb	0	; () banked
 25062  015626  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 25063  015628  16DF               	andwf	indf2,f,c
 25064                           
 25065                           ; BSR set to: 0
 25066                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 25067  01562A  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 25068  01562E  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 25069  015632  0100               	movlb	0	; () banked
 25070  015634  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 25071  015636  D003               	goto	u8684
 25072  015638                     u8685:
 25073  015638  0100               	movlb	0	; () banked
 25074  01563A  90D8               	bcf	status,0,c
 25075  01563C  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 25076  01563E                     u8684:
 25077  01563E  0100               	movlb	0	; () banked
 25078  015640  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 25079  015642  D7FA               	goto	u8685
 25080  015644  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 25081  015648  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 25082  01564C  0100               	movlb	0	; () banked
 25083  01564E  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 25084  015650  12DF               	iorwf	indf2,f,c
 25085                           
 25086                           ; BSR set to: 0
 25087  015652  0012               	return		;funcret
 25088  015654                     __end_of_Byte_SetBit:
 25089                           	opt stack 0
 25090                           tosu	equ	0xFFF
 25091                           tosh	equ	0xFFE
 25092                           tosl	equ	0xFFD
 25093                           pclath	equ	0xFFA
 25094                           tblptru	equ	0xFF8
 25095                           tblptrh	equ	0xFF7
 25096                           tblptrl	equ	0xFF6
 25097                           tablat	equ	0xFF5
 25098                           prodh	equ	0xFF4
 25099                           prodl	equ	0xFF3
 25100                           intcon	equ	0xFF2
 25101                           postinc0	equ	0xFEE
 25102                           wreg	equ	0xFE8
 25103                           indf1	equ	0xFE7
 25104                           postdec1	equ	0xFE5
 25105                           fsr1h	equ	0xFE2
 25106                           fsr1l	equ	0xFE1
 25107                           indf2	equ	0xFDF
 25108                           postinc2	equ	0xFDE
 25109                           postdec2	equ	0xFDD
 25110                           plusw2	equ	0xFDB
 25111                           fsr2h	equ	0xFDA
 25112                           fsr2l	equ	0xFD9
 25113                           status	equ	0xFD8
 25114                           
 25115 ;; *************** function _Port_SetQuadType *****************
 25116 ;; Defined at:
 25117 ;;		line 399 in file "Library/Port.c"
 25118 ;; Parameters:    Size  Location     Type
 25119 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 25120 ;;		 -> PortB(10), PortD(10), 
 25121 ;;  pQuad           1   56[BANK0 ] enum E6776
 25122 ;;  pType           1   57[BANK0 ] enum E6795
 25123 ;; Auto vars:     Size  Location     Type
 25124 ;;  Output          1   58[BANK0 ] enum E6475
 25125 ;; Return value:  Size  Location     Type
 25126 ;;                  1    wreg      enum E6475
 25127 ;; Registers used:
 25128 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25129 ;; Tracked objects:
 25130 ;;		On entry : 0/0
 25131 ;;		On exit  : 0/0
 25132 ;;		Unchanged: 0/0
 25133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25134 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25135 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25137 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25138 ;;Total ram usage:        5 bytes
 25139 ;; Hardware stack levels used:    1
 25140 ;; Hardware stack levels required when called:   13
 25141 ;; This function calls:
 25142 ;;		_Byte_SetQuad
 25143 ;;		_Port_CheckQuadType
 25144 ;;		_Word_SetPair
 25145 ;; This function is called by:
 25146 ;;		_MXK_InitDIPSwitch
 25147 ;;		_MXK_Init
 25148 ;; This function uses a non-reentrant model
 25149 ;;
 25150                           
 25151                           	psect	text126
 25152  011AA4                     __ptext126:
 25153                           	opt stack 0
 25154  011AA4                     _Port_SetQuadType:
 25155                           	opt stack 15
 25156                           
 25157                           ;Port.c: 401: ePinError Output = ePinErrorState;
 25158                           
 25159                           ; BSR set to: 0
 25160                           ;incstack = 0
 25161  011AA4  0E05               	movlw	5
 25162  011AA6  0100               	movlb	0	; () banked
 25163  011AA8  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25164                           
 25165                           ;Port.c: 403: switch (pType)
 25166  011AAA  D0C7               	goto	l476
 25167  011AAC                     
 25168                           ; BSR set to: 0
 25169                           ;Port.c: 407: {
 25170                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25171                           
 25172                           ; BSR set to: 0
 25173  011AAC  0100               	movlb	0	; () banked
 25174  011AAE  EE20 F002          	lfsr	2,2
 25175  011AB2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25176  011AB4  26D9               	addwf	fsr2l,f,c
 25177  011AB6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25178  011AB8  22DA               	addwfc	fsr2h,f,c
 25179  011ABA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25180  011ABE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25181  011AC2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25182  011AC6  0E0F               	movlw	15
 25183  011AC8  0100               	movlb	0	; () banked
 25184  011ACA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25185  011ACC  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 25186                           
 25187                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25188  011AD0  0100               	movlb	0	; () banked
 25189  011AD2  EE20 F004          	lfsr	2,4
 25190  011AD6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25191  011AD8  26D9               	addwf	fsr2l,f,c
 25192  011ADA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25193  011ADC  22DA               	addwfc	fsr2h,f,c
 25194  011ADE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25195  011AE2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25196  011AE6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25197  011AEA  0E00               	movlw	0
 25198  011AEC  0100               	movlb	0	; () banked
 25199  011AEE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25200  011AF0  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 25201                           
 25202                           ;Port.c: 413: }
 25203                           ;Port.c: 415: break;
 25204  011AF4  D0B0               	goto	l478
 25205  011AF6                     
 25206                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25207  011AF6  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25208  011AFA  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25209  011AFE  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25210  011B02  0E03               	movlw	3
 25211  011B04  0100               	movlb	0	; () banked
 25212  011B06  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25213  011B08  ECBA  F0AB         	call	_Port_CheckQuadType	;wreg free
 25214  011B0C  0100               	movlb	0	; () banked
 25215  011B0E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25216  011B10  0100               	movlb	0	; () banked
 25217  011B12  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25218  011B14  A4D8               	btfss	status,2,c
 25219  011B16  0012               	return	
 25220                           
 25221                           ; BSR set to: 0
 25222                           ;Port.c: 418: {
 25223                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25224  011B18  0100               	movlb	0	; () banked
 25225  011B1A  EE20 F002          	lfsr	2,2
 25226  011B1E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25227  011B20  26D9               	addwf	fsr2l,f,c
 25228  011B22  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25229  011B24  22DA               	addwfc	fsr2h,f,c
 25230  011B26  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25231  011B2A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25232  011B2E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25233  011B32  0E00               	movlw	0
 25234  011B34  0100               	movlb	0	; () banked
 25235  011B36  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25236  011B38  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 25237                           
 25238                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25239  011B3C  0100               	movlb	0	; () banked
 25240  011B3E  EE20 F004          	lfsr	2,4
 25241  011B42  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25242  011B44  26D9               	addwf	fsr2l,f,c
 25243  011B46  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25244  011B48  22DA               	addwfc	fsr2h,f,c
 25245  011B4A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25246  011B4E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25247  011B52  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25248  011B56  0E00               	movlw	0
 25249  011B58  0100               	movlb	0	; () banked
 25250  011B5A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25251  011B5C  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 25252                           
 25253                           ;Port.c: 424: }
 25254  011B60  D07A               	goto	l478
 25255  011B62                     
 25256                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25257  011B62  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25258  011B66  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25259  011B6A  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25260  011B6E  0E03               	movlw	3
 25261  011B70  0100               	movlb	0	; () banked
 25262  011B72  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25263  011B74  ECBA  F0AB         	call	_Port_CheckQuadType	;wreg free
 25264  011B78  0100               	movlb	0	; () banked
 25265  011B7A  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25266  011B7C  0100               	movlb	0	; () banked
 25267  011B7E  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25268  011B80  A4D8               	btfss	status,2,c
 25269  011B82  0012               	return	
 25270                           
 25271                           ; BSR set to: 0
 25272                           ;Port.c: 429: {
 25273                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25274  011B84  0100               	movlb	0	; () banked
 25275  011B86  EE20 F002          	lfsr	2,2
 25276  011B8A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25277  011B8C  26D9               	addwf	fsr2l,f,c
 25278  011B8E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25279  011B90  22DA               	addwfc	fsr2h,f,c
 25280  011B92  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25281  011B96  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25282  011B9A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25283  011B9E  0E0F               	movlw	15
 25284  011BA0  0100               	movlb	0	; () banked
 25285  011BA2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25286  011BA4  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 25287                           
 25288                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 25289  011BA8  0100               	movlb	0	; () banked
 25290  011BAA  EE20 F004          	lfsr	2,4
 25291  011BAE  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25292  011BB0  26D9               	addwf	fsr2l,f,c
 25293  011BB2  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25294  011BB4  22DA               	addwfc	fsr2h,f,c
 25295  011BB6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25296  011BBA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25297  011BBE  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25298  011BC2  0E0F               	movlw	15
 25299  011BC4  0100               	movlb	0	; () banked
 25300  011BC6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25301  011BC8  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 25302                           
 25303                           ;Port.c: 435: }
 25304  011BCC  D044               	goto	l478
 25305  011BCE                     
 25306                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25307  011BCE  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25308  011BD2  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25309  011BD6  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25310  011BDA  0E03               	movlw	3
 25311  011BDC  0100               	movlb	0	; () banked
 25312  011BDE  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25313  011BE0  ECBA  F0AB         	call	_Port_CheckQuadType	;wreg free
 25314  011BE4  0100               	movlb	0	; () banked
 25315  011BE6  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25316  011BE8  0100               	movlb	0	; () banked
 25317  011BEA  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25318  011BEC  A4D8               	btfss	status,2,c
 25319  011BEE  0012               	return	
 25320                           
 25321                           ; BSR set to: 0
 25322                           ;Port.c: 440: {
 25323                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25324  011BF0  0100               	movlb	0	; () banked
 25325  011BF2  EE20 F002          	lfsr	2,2
 25326  011BF6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25327  011BF8  26D9               	addwf	fsr2l,f,c
 25328  011BFA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25329  011BFC  22DA               	addwfc	fsr2h,f,c
 25330  011BFE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25331  011C02  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25332  011C06  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25333  011C0A  0E00               	movlw	0
 25334  011C0C  0100               	movlb	0	; () banked
 25335  011C0E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25336  011C10  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 25337                           
 25338                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25339  011C14  0100               	movlb	0	; () banked
 25340  011C16  EE20 F004          	lfsr	2,4
 25341  011C1A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25342  011C1C  26D9               	addwf	fsr2l,f,c
 25343  011C1E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25344  011C20  22DA               	addwfc	fsr2h,f,c
 25345  011C22  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25346  011C26  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25347  011C2A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25348  011C2E  0E00               	movlw	0
 25349  011C30  0100               	movlb	0	; () banked
 25350  011C32  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25351  011C34  ECE2  F0B0         	call	_Byte_SetQuad	;wreg free
 25352                           
 25353                           ;Port.c: 446: }
 25354  011C38  D00E               	goto	l478
 25355  011C3A                     l476:
 25356  011C3A  0100               	movlb	0	; () banked
 25357  011C3C  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 25358                           
 25359                           ; Switch size 1, requested type "space"
 25360                           ; Number of cases is 4, Range of values is 0 to 3
 25361                           ; switch strategies available:
 25362                           ; Name         Instructions Cycles
 25363                           ; simple_byte           13     7 (average)
 25364                           ;	Chosen strategy is simple_byte
 25365  011C3E  0A00               	xorlw	0	; case 0
 25366  011C40  B4D8               	btfsc	status,2,c
 25367  011C42  D734               	goto	l477
 25368  011C44  0A01               	xorlw	1	; case 1
 25369  011C46  B4D8               	btfsc	status,2,c
 25370  011C48  D756               	goto	l479
 25371  011C4A  0A03               	xorlw	3	; case 2
 25372  011C4C  B4D8               	btfsc	status,2,c
 25373  011C4E  D789               	goto	l483
 25374  011C50  0A01               	xorlw	1	; case 3
 25375  011C52  B4D8               	btfsc	status,2,c
 25376  011C54  D7BC               	goto	l486
 25377  011C56                     l478:
 25378                           
 25379                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 25380                           
 25381                           ; BSR set to: 0
 25382  011C56  0E08               	movlw	8
 25383  011C58  0100               	movlb	0	; () banked
 25384  011C5A  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25385  011C5C  0100               	movlb	0	; () banked
 25386  011C5E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25387  011C60  0E00               	movlw	0
 25388  011C62  0100               	movlb	0	; () banked
 25389  011C64  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25390  011C66  0100               	movlb	0	; () banked
 25391  011C68  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25392  011C6A  0100               	movlb	0	; () banked
 25393  011C6C  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25394  011C6E  0D04               	mullw	4
 25395  011C70  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 25396  011C74  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25397  011C78  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 25398                           
 25399                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 25400  011C7C  0E08               	movlw	8
 25401  011C7E  0100               	movlb	0	; () banked
 25402  011C80  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25403  011C82  0100               	movlb	0	; () banked
 25404  011C84  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25405  011C86  0E00               	movlw	0
 25406  011C88  0100               	movlb	0	; () banked
 25407  011C8A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25408  011C8C  0100               	movlb	0	; () banked
 25409  011C8E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25410  011C90  0100               	movlb	0	; () banked
 25411  011C92  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25412  011C94  0D04               	mullw	4
 25413  011C96  28F3               	incf	prodl,w,c
 25414  011C98  0100               	movlb	0	; () banked
 25415  011C9A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25416  011C9C  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25417  011CA0  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 25418                           
 25419                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 25420  011CA4  0E08               	movlw	8
 25421  011CA6  0100               	movlb	0	; () banked
 25422  011CA8  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25423  011CAA  0100               	movlb	0	; () banked
 25424  011CAC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25425  011CAE  0E00               	movlw	0
 25426  011CB0  0100               	movlb	0	; () banked
 25427  011CB2  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25428  011CB4  0100               	movlb	0	; () banked
 25429  011CB6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25430  011CB8  0100               	movlb	0	; () banked
 25431  011CBA  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25432  011CBC  0D04               	mullw	4
 25433  011CBE  50F3               	movf	prodl,w,c
 25434  011CC0  0F02               	addlw	2
 25435  011CC2  0100               	movlb	0	; () banked
 25436  011CC4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25437  011CC6  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25438  011CCA  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 25439                           
 25440                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 25441  011CCE  0E08               	movlw	8
 25442  011CD0  0100               	movlb	0	; () banked
 25443  011CD2  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25444  011CD4  0100               	movlb	0	; () banked
 25445  011CD6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25446  011CD8  0E00               	movlw	0
 25447  011CDA  0100               	movlb	0	; () banked
 25448  011CDC  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25449  011CDE  0100               	movlb	0	; () banked
 25450  011CE0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25451  011CE2  0100               	movlb	0	; () banked
 25452  011CE4  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25453  011CE6  0D04               	mullw	4
 25454  011CE8  50F3               	movf	prodl,w,c
 25455  011CEA  0F03               	addlw	3
 25456  011CEC  0100               	movlb	0	; () banked
 25457  011CEE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25458  011CF0  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25459  011CF4  ECDE  F0AD         	call	_Word_SetPair	;wreg free
 25460  011CF8  0012               	return	
 25461  011CFA                     __end_of_Port_SetQuadType:
 25462                           	opt stack 0
 25463                           tosu	equ	0xFFF
 25464                           tosh	equ	0xFFE
 25465                           tosl	equ	0xFFD
 25466                           pclath	equ	0xFFA
 25467                           tblptru	equ	0xFF8
 25468                           tblptrh	equ	0xFF7
 25469                           tblptrl	equ	0xFF6
 25470                           tablat	equ	0xFF5
 25471                           prodh	equ	0xFF4
 25472                           prodl	equ	0xFF3
 25473                           intcon	equ	0xFF2
 25474                           postinc0	equ	0xFEE
 25475                           wreg	equ	0xFE8
 25476                           indf1	equ	0xFE7
 25477                           postdec1	equ	0xFE5
 25478                           fsr1h	equ	0xFE2
 25479                           fsr1l	equ	0xFE1
 25480                           indf2	equ	0xFDF
 25481                           postinc2	equ	0xFDE
 25482                           postdec2	equ	0xFDD
 25483                           plusw2	equ	0xFDB
 25484                           fsr2h	equ	0xFDA
 25485                           fsr2l	equ	0xFD9
 25486                           status	equ	0xFD8
 25487                           
 25488 ;; *************** function _Word_SetPair *****************
 25489 ;; Defined at:
 25490 ;;		line 149 in file "Library/Types.c"
 25491 ;; Parameters:    Size  Location     Type
 25492 ;;  pInput          2   15[BANK0 ] PTR struct Word
 25493 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25494 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25495 ;;  pPair           1   17[BANK0 ] unsigned char 
 25496 ;;  pValue          1   18[BANK0 ] unsigned char 
 25497 ;; Auto vars:     Size  Location     Type
 25498 ;;		None
 25499 ;; Return value:  Size  Location     Type
 25500 ;;                  1    wreg      void 
 25501 ;; Registers used:
 25502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25503 ;; Tracked objects:
 25504 ;;		On entry : 0/0
 25505 ;;		On exit  : 0/0
 25506 ;;		Unchanged: 0/0
 25507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25508 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25511 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25512 ;;Total ram usage:        4 bytes
 25513 ;; Hardware stack levels used:    1
 25514 ;; Hardware stack levels required when called:    9
 25515 ;; This function calls:
 25516 ;;		_Byte_SetPair
 25517 ;; This function is called by:
 25518 ;;		_Port_SetPinType
 25519 ;;		_Port_SetQuadType
 25520 ;;		_Port_SetType
 25521 ;;		_Port_SetPairType
 25522 ;;		_PortProperty_Init
 25523 ;; This function uses a non-reentrant model
 25524 ;;
 25525                           
 25526                           	psect	text127
 25527  015BBC                     __ptext127:
 25528                           	opt stack 0
 25529  015BBC                     _Word_SetPair:
 25530                           	opt stack 18
 25531                           
 25532                           ;Types.c: 151: if (pPair >= 4)
 25533                           
 25534                           ;incstack = 0
 25535  015BBC  0E03               	movlw	3
 25536  015BBE  0100               	movlb	0	; () banked
 25537  015BC0  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 25538  015BC2  D014               	goto	l776
 25539                           
 25540                           ; BSR set to: 0
 25541                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 25542  015BC4  0E01               	movlw	1
 25543  015BC6  0100               	movlb	0	; () banked
 25544  015BC8  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 25545  015BCA  0100               	movlb	0	; () banked
 25546  015BCC  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 25547  015BCE  0E00               	movlw	0
 25548  015BD0  0100               	movlb	0	; () banked
 25549  015BD2  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 25550  015BD4  0100               	movlb	0	; () banked
 25551  015BD6  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 25552  015BD8  0100               	movlb	0	; () banked
 25553  015BDA  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 25554  015BDC  0FFC               	addlw	252
 25555  015BDE  0100               	movlb	0	; () banked
 25556  015BE0  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 25557  015BE2  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25558  015BE6  ECD1  F0B0         	call	_Byte_SetPair	;wreg free
 25559  015BEA  0012               	return	
 25560  015BEC                     l776:
 25561                           
 25562                           ;Types.c: 153: else
 25563                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 25564  015BEC  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 25565  015BF0  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 25566  015BF4  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 25567  015BF8  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25568  015BFC  ECD1  F0B0         	call	_Byte_SetPair	;wreg free
 25569  015C00  0012               	return	
 25570  015C02                     __end_of_Word_SetPair:
 25571                           	opt stack 0
 25572                           tosu	equ	0xFFF
 25573                           tosh	equ	0xFFE
 25574                           tosl	equ	0xFFD
 25575                           pclath	equ	0xFFA
 25576                           tblptru	equ	0xFF8
 25577                           tblptrh	equ	0xFF7
 25578                           tblptrl	equ	0xFF6
 25579                           tablat	equ	0xFF5
 25580                           prodh	equ	0xFF4
 25581                           prodl	equ	0xFF3
 25582                           intcon	equ	0xFF2
 25583                           postinc0	equ	0xFEE
 25584                           wreg	equ	0xFE8
 25585                           indf1	equ	0xFE7
 25586                           postdec1	equ	0xFE5
 25587                           fsr1h	equ	0xFE2
 25588                           fsr1l	equ	0xFE1
 25589                           indf2	equ	0xFDF
 25590                           postinc2	equ	0xFDE
 25591                           postdec2	equ	0xFDD
 25592                           plusw2	equ	0xFDB
 25593                           fsr2h	equ	0xFDA
 25594                           fsr2l	equ	0xFD9
 25595                           status	equ	0xFD8
 25596                           
 25597 ;; *************** function _Byte_SetPair *****************
 25598 ;; Defined at:
 25599 ;;		line 83 in file "Library/Types.c"
 25600 ;; Parameters:    Size  Location     Type
 25601 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 25602 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 25603 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 25604 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 25605 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 25606 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 25607 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 25608 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 25609 ;;		 -> NULL(0), 
 25610 ;;  pPair           1   13[BANK0 ] unsigned char 
 25611 ;;  pValue          1   14[BANK0 ] unsigned char 
 25612 ;; Auto vars:     Size  Location     Type
 25613 ;;		None
 25614 ;; Return value:  Size  Location     Type
 25615 ;;                  1    wreg      void 
 25616 ;; Registers used:
 25617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25618 ;; Tracked objects:
 25619 ;;		On entry : 0/0
 25620 ;;		On exit  : 0/0
 25621 ;;		Unchanged: 0/0
 25622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25623 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25626 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25627 ;;Total ram usage:        4 bytes
 25628 ;; Hardware stack levels used:    1
 25629 ;; Hardware stack levels required when called:    8
 25630 ;; This function calls:
 25631 ;;		_Byte_SetZone
 25632 ;; This function is called by:
 25633 ;;		_Word_SetPair
 25634 ;;		_Port_SetPairType
 25635 ;;		_Port_SetPair
 25636 ;; This function uses a non-reentrant model
 25637 ;;
 25638                           
 25639                           	psect	text128
 25640  0161A2                     __ptext128:
 25641                           	opt stack 0
 25642  0161A2                     _Byte_SetPair:
 25643                           	opt stack 18
 25644                           
 25645                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 25646                           
 25647                           ;incstack = 0
 25648  0161A2  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 25649  0161A6  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 25650  0161AA  0E04               	movlw	4
 25651  0161AC  0100               	movlb	0	; () banked
 25652  0161AE  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 25653  0161B0  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 25654  0161B4  0E02               	movlw	2
 25655  0161B6  0100               	movlb	0	; () banked
 25656  0161B8  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 25657  0161BA  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 25658  0161BE  EC24  F0A1         	call	_Byte_SetZone	;wreg free
 25659  0161C2  0012               	return		;funcret
 25660  0161C4                     __end_of_Byte_SetPair:
 25661                           	opt stack 0
 25662                           tosu	equ	0xFFF
 25663                           tosh	equ	0xFFE
 25664                           tosl	equ	0xFFD
 25665                           pclath	equ	0xFFA
 25666                           tblptru	equ	0xFF8
 25667                           tblptrh	equ	0xFF7
 25668                           tblptrl	equ	0xFF6
 25669                           tablat	equ	0xFF5
 25670                           prodh	equ	0xFF4
 25671                           prodl	equ	0xFF3
 25672                           intcon	equ	0xFF2
 25673                           postinc0	equ	0xFEE
 25674                           wreg	equ	0xFE8
 25675                           indf1	equ	0xFE7
 25676                           postdec1	equ	0xFE5
 25677                           fsr1h	equ	0xFE2
 25678                           fsr1l	equ	0xFE1
 25679                           indf2	equ	0xFDF
 25680                           postinc2	equ	0xFDE
 25681                           postdec2	equ	0xFDD
 25682                           plusw2	equ	0xFDB
 25683                           fsr2h	equ	0xFDA
 25684                           fsr2l	equ	0xFD9
 25685                           status	equ	0xFD8
 25686                           
 25687 ;; *************** function _Port_CheckQuadType *****************
 25688 ;; Defined at:
 25689 ;;		line 126 in file "Library/Port.c"
 25690 ;; Parameters:    Size  Location     Type
 25691 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 25692 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25693 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25694 ;;  pQuad           1   49[BANK0 ] enum E6776
 25695 ;;  pDrive          1   50[BANK0 ] enum E6469
 25696 ;; Auto vars:     Size  Location     Type
 25697 ;;  Output          1   53[BANK0 ] enum E6475
 25698 ;;  Pair2           1   52[BANK0 ] enum E6760
 25699 ;;  Pair1           1   51[BANK0 ] enum E6760
 25700 ;; Return value:  Size  Location     Type
 25701 ;;                  1    wreg      enum E6475
 25702 ;; Registers used:
 25703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25704 ;; Tracked objects:
 25705 ;;		On entry : 0/0
 25706 ;;		On exit  : 0/0
 25707 ;;		Unchanged: 0/0
 25708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25709 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25710 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25712 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25713 ;;Total ram usage:        7 bytes
 25714 ;; Hardware stack levels used:    1
 25715 ;; Hardware stack levels required when called:   12
 25716 ;; This function calls:
 25717 ;;		_Port_CheckPairType
 25718 ;; This function is called by:
 25719 ;;		_Port_CheckPortType
 25720 ;;		_Port_SetQuadType
 25721 ;; This function uses a non-reentrant model
 25722 ;;
 25723                           
 25724                           	psect	text129
 25725  015774                     __ptext129:
 25726                           	opt stack 0
 25727  015774                     _Port_CheckQuadType:
 25728                           	opt stack 14
 25729                           
 25730                           ;Port.c: 128: ePinError Output = ePinErrorState;
 25731                           
 25732                           ;incstack = 0
 25733  015774  0E05               	movlw	5
 25734  015776  0100               	movlb	0	; () banked
 25735  015778  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25736                           
 25737                           ; BSR set to: 0
 25738                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 25739  01577A  0100               	movlb	0	; () banked
 25740  01577C  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25741  01577E  0D02               	mullw	2
 25742  015780  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 25743                           
 25744                           ; BSR set to: 0
 25745                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 25746  015784  0100               	movlb	0	; () banked
 25747  015786  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25748  015788  0D02               	mullw	2
 25749  01578A  28F3               	incf	prodl,w,c
 25750  01578C  0100               	movlb	0	; () banked
 25751  01578E  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 25752                           
 25753                           ; BSR set to: 0
 25754                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 25755  015790  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25756  015794  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25757  015798  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 25758  01579C  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25759  0157A0  EC2B  F0AA         	call	_Port_CheckPairType	;wreg free
 25760  0157A4  0100               	movlb	0	; () banked
 25761  0157A6  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25762  0157A8  0100               	movlb	0	; () banked
 25763  0157AA  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25764  0157AC  A4D8               	btfss	status,2,c
 25765  0157AE  D00C               	goto	l393
 25766                           
 25767                           ; BSR set to: 0
 25768                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 25769  0157B0  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25770  0157B4  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25771  0157B8  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 25772  0157BC  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25773  0157C0  EC2B  F0AA         	call	_Port_CheckPairType	;wreg free
 25774  0157C4  0100               	movlb	0	; () banked
 25775  0157C6  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25776  0157C8                     l393:
 25777                           
 25778                           ; BSR set to: 0
 25779                           ;Port.c: 136: return Output;
 25780                           
 25781                           ; BSR set to: 0
 25782  0157C8  0100               	movlb	0	; () banked
 25783  0157CA  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25784  0157CC  0012               	return	
 25785  0157CE                     __end_of_Port_CheckQuadType:
 25786                           	opt stack 0
 25787                           tosu	equ	0xFFF
 25788                           tosh	equ	0xFFE
 25789                           tosl	equ	0xFFD
 25790                           pclath	equ	0xFFA
 25791                           tblptru	equ	0xFF8
 25792                           tblptrh	equ	0xFF7
 25793                           tblptrl	equ	0xFF6
 25794                           tablat	equ	0xFF5
 25795                           prodh	equ	0xFF4
 25796                           prodl	equ	0xFF3
 25797                           intcon	equ	0xFF2
 25798                           postinc0	equ	0xFEE
 25799                           wreg	equ	0xFE8
 25800                           indf1	equ	0xFE7
 25801                           postdec1	equ	0xFE5
 25802                           fsr1h	equ	0xFE2
 25803                           fsr1l	equ	0xFE1
 25804                           indf2	equ	0xFDF
 25805                           postinc2	equ	0xFDE
 25806                           postdec2	equ	0xFDD
 25807                           plusw2	equ	0xFDB
 25808                           fsr2h	equ	0xFDA
 25809                           fsr2l	equ	0xFD9
 25810                           status	equ	0xFD8
 25811                           
 25812 ;; *************** function _Port_CheckPairType *****************
 25813 ;; Defined at:
 25814 ;;		line 112 in file "Library/Port.c"
 25815 ;; Parameters:    Size  Location     Type
 25816 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 25817 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25818 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25819 ;;  pPair           1   40[BANK0 ] enum E6760
 25820 ;;  pDrive          1   41[BANK0 ] enum E6469
 25821 ;; Auto vars:     Size  Location     Type
 25822 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 25823 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25824 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25825 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25826 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25827 ;;  Output          1   44[BANK0 ] enum E6475
 25828 ;;  Pin2            1   43[BANK0 ] enum E6750
 25829 ;;  Pin1            1   42[BANK0 ] enum E6750
 25830 ;; Return value:  Size  Location     Type
 25831 ;;                  1    wreg      enum E6475
 25832 ;; Registers used:
 25833 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25834 ;; Tracked objects:
 25835 ;;		On entry : 0/0
 25836 ;;		On exit  : 0/0
 25837 ;;		Unchanged: 0/0
 25838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25839 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25840 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25842 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25843 ;;Total ram usage:        9 bytes
 25844 ;; Hardware stack levels used:    1
 25845 ;; Hardware stack levels required when called:   11
 25846 ;; This function calls:
 25847 ;;		_PortProperty_Valid
 25848 ;; This function is called by:
 25849 ;;		_Port_CheckQuadType
 25850 ;;		_Port_SetPairType
 25851 ;; This function uses a non-reentrant model
 25852 ;;
 25853                           
 25854                           	psect	text130
 25855  015456                     __ptext130:
 25856                           	opt stack 0
 25857  015456                     _Port_CheckPairType:
 25858                           	opt stack 14
 25859                           
 25860                           ;Port.c: 114: ePinError Output = ePinErrorState;
 25861                           
 25862                           ; BSR set to: 0
 25863                           ;incstack = 0
 25864  015456  0E05               	movlw	5
 25865  015458  0100               	movlb	0	; () banked
 25866  01545A  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25867                           
 25868                           ; BSR set to: 0
 25869                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 25870  01545C  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 25871  015460  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 25872  015464  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 25873  015468  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 25874                           
 25875                           ; BSR set to: 0
 25876                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 25877  01546C  0100               	movlb	0	; () banked
 25878  01546E  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25879  015470  0D02               	mullw	2
 25880  015472  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 25881                           
 25882                           ; BSR set to: 0
 25883                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 25884  015476  0100               	movlb	0	; () banked
 25885  015478  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25886  01547A  0D02               	mullw	2
 25887  01547C  28F3               	incf	prodl,w,c
 25888  01547E  0100               	movlb	0	; () banked
 25889  015480  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 25890                           
 25891                           ; BSR set to: 0
 25892                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 25893  015482  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25894  015486  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25895  01548A  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25896  01548E  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 25897  015492  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 25898  015496  0100               	movlb	0	; () banked
 25899  015498  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25900  01549A  0100               	movlb	0	; () banked
 25901  01549C  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25902  01549E  A4D8               	btfss	status,2,c
 25903  0154A0  D00C               	goto	l389
 25904                           
 25905                           ; BSR set to: 0
 25906                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 25907  0154A2  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25908  0154A6  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25909  0154AA  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25910  0154AE  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 25911  0154B2  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 25912  0154B6  0100               	movlb	0	; () banked
 25913  0154B8  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25914  0154BA                     l389:
 25915                           
 25916                           ; BSR set to: 0
 25917                           ;Port.c: 124: return Output;
 25918                           
 25919                           ; BSR set to: 0
 25920  0154BA  0100               	movlb	0	; () banked
 25921  0154BC  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25922  0154BE  0012               	return	
 25923  0154C0                     __end_of_Port_CheckPairType:
 25924                           	opt stack 0
 25925                           tosu	equ	0xFFF
 25926                           tosh	equ	0xFFE
 25927                           tosl	equ	0xFFD
 25928                           pclath	equ	0xFFA
 25929                           tblptru	equ	0xFF8
 25930                           tblptrh	equ	0xFF7
 25931                           tblptrl	equ	0xFF6
 25932                           tablat	equ	0xFF5
 25933                           prodh	equ	0xFF4
 25934                           prodl	equ	0xFF3
 25935                           intcon	equ	0xFF2
 25936                           postinc0	equ	0xFEE
 25937                           wreg	equ	0xFE8
 25938                           indf1	equ	0xFE7
 25939                           postdec1	equ	0xFE5
 25940                           fsr1h	equ	0xFE2
 25941                           fsr1l	equ	0xFE1
 25942                           indf2	equ	0xFDF
 25943                           postinc2	equ	0xFDE
 25944                           postdec2	equ	0xFDD
 25945                           plusw2	equ	0xFDB
 25946                           fsr2h	equ	0xFDA
 25947                           fsr2l	equ	0xFD9
 25948                           status	equ	0xFD8
 25949                           
 25950 ;; *************** function _PortProperty_Valid *****************
 25951 ;; Defined at:
 25952 ;;		line 220 in file "Library/Types.c"
 25953 ;; Parameters:    Size  Location     Type
 25954 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 25955 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25956 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25957 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25958 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25959 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 25960 ;;  pPin            1   18[BANK0 ] unsigned char 
 25961 ;; Auto vars:     Size  Location     Type
 25962 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 25963 ;;  Pair            1   37[BANK0 ] enum E6469
 25964 ;; Return value:  Size  Location     Type
 25965 ;;                  1    wreg      enum E6475
 25966 ;; Registers used:
 25967 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25968 ;; Tracked objects:
 25969 ;;		On entry : 0/0
 25970 ;;		On exit  : 0/0
 25971 ;;		Unchanged: 0/0
 25972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25973 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25974 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25976 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25977 ;;Total ram usage:       23 bytes
 25978 ;; Hardware stack levels used:    1
 25979 ;; Hardware stack levels required when called:   10
 25980 ;; This function calls:
 25981 ;;		_Word_GetPair
 25982 ;; This function is called by:
 25983 ;;		_Port_CheckPairType
 25984 ;;		_Port_SetPinType
 25985 ;; This function uses a non-reentrant model
 25986 ;;
 25987                           
 25988                           	psect	text131
 25989  014E86                     __ptext131:
 25990                           	opt stack 0
 25991  014E86                     _PortProperty_Valid:
 25992                           	opt stack 17
 25993                           
 25994                           ;Types.c: 222: ePinDrive Pair;
 25995                           ;Types.c: 223: const ePinError Errors[4][4] =
 25996                           ;Types.c: 224: {
 25997                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 25998                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 25999                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 26000                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 26001                           ;Types.c: 230: };
 26002                           
 26003                           ; BSR set to: 0
 26004                           ;incstack = 0
 26005  014E86  0E85               	movlw	low PortProperty_Valid@F6830
 26006  014E88  6EF6               	movwf	tblptrl,c
 26007  014E8A                     	if	1	;There is more than 1 active tblptr byte
 26008  014E8A  0EFD               	movlw	high PortProperty_Valid@F6830
 26009  014E8C  6EF7               	movwf	tblptrh,c
 26010  014E8E                     	endif
 26011  014E8E                     	if	1	;There are 3 active tblptr bytes
 26012  014E8E  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 26013  014E90  6EF8               	movwf	tblptru,c
 26014  014E92                     	endif
 26015  014E92  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 26016  014E96  0E0F               	movlw	15
 26017  014E98                     u8640:
 26018  014E98  0009               	tblrd		*+
 26019  014E9A  CFF5 FFDE          	movff	tablat,postinc2
 26020  014E9E  06E8               	decf	wreg,f,c
 26021  014EA0  E2FB               	bc	u8640
 26022                           
 26023                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 26024  014EA2  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 26025  014EA6  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 26026  014EAA  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 26027  014EAE  EC04  F0AF         	call	_Word_GetPair	;wreg free
 26028  014EB2  0100               	movlb	0	; () banked
 26029  014EB4  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 26030                           
 26031                           ; BSR set to: 0
 26032                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 26033  014EB6  0E04               	movlw	4
 26034  014EB8  0100               	movlb	0	; () banked
 26035  014EBA  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 26036  014EBC  D020               	goto	l819
 26037                           
 26038                           ; BSR set to: 0
 26039  014EBE  0E04               	movlw	4
 26040  014EC0  0100               	movlb	0	; () banked
 26041  014EC2  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 26042  014EC4  D01C               	goto	l819
 26043                           
 26044                           ; BSR set to: 0
 26045                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 26046  014EC6  0100               	movlb	0	; () banked
 26047  014EC8  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 26048  014ECA  0D04               	mullw	4
 26049  014ECC  0E75               	movlw	low PortProperty_Valid@Errors
 26050  014ECE  0100               	movlb	0	; () banked
 26051  014ED0  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 26052  014ED2  0E00               	movlw	high PortProperty_Valid@Errors
 26053  014ED4  0100               	movlb	0	; () banked
 26054  014ED6  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 26055  014ED8  50F3               	movf	prodl,w,c
 26056  014EDA  0100               	movlb	0	; () banked
 26057  014EDC  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 26058  014EDE  50F4               	movf	prodh,w,c
 26059  014EE0  0100               	movlb	0	; () banked
 26060  014EE2  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 26061  014EE4  0100               	movlb	0	; () banked
 26062  014EE6  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 26063  014EE8  0D01               	mullw	1
 26064  014EEA  50F3               	movf	prodl,w,c
 26065  014EEC  0100               	movlb	0	; () banked
 26066  014EEE  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 26067  014EF0  6ED9               	movwf	fsr2l,c
 26068  014EF2  50F4               	movf	prodh,w,c
 26069  014EF4  0100               	movlb	0	; () banked
 26070  014EF6  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 26071  014EF8  6EDA               	movwf	fsr2h,c
 26072  014EFA  50DF               	movf	indf2,w,c
 26073                           
 26074                           ; BSR set to: 0
 26075  014EFC  0012               	return	
 26076  014EFE                     l819:
 26077                           
 26078                           ; BSR set to: 0
 26079                           ;Types.c: 237: return ePinErrorState;
 26080                           
 26081                           ; BSR set to: 0
 26082  014EFE  0E05               	movlw	5
 26083  014F00  0012               	return	
 26084  014F02                     __end_of_PortProperty_Valid:
 26085                           	opt stack 0
 26086                           tosu	equ	0xFFF
 26087                           tosh	equ	0xFFE
 26088                           tosl	equ	0xFFD
 26089                           pclath	equ	0xFFA
 26090                           tblptru	equ	0xFF8
 26091                           tblptrh	equ	0xFF7
 26092                           tblptrl	equ	0xFF6
 26093                           tablat	equ	0xFF5
 26094                           prodh	equ	0xFF4
 26095                           prodl	equ	0xFF3
 26096                           intcon	equ	0xFF2
 26097                           postinc0	equ	0xFEE
 26098                           wreg	equ	0xFE8
 26099                           indf1	equ	0xFE7
 26100                           postdec1	equ	0xFE5
 26101                           fsr1h	equ	0xFE2
 26102                           fsr1l	equ	0xFE1
 26103                           indf2	equ	0xFDF
 26104                           postinc2	equ	0xFDE
 26105                           postdec2	equ	0xFDD
 26106                           plusw2	equ	0xFDB
 26107                           fsr2h	equ	0xFDA
 26108                           fsr2l	equ	0xFD9
 26109                           status	equ	0xFD8
 26110                           
 26111 ;; *************** function _Word_GetPair *****************
 26112 ;; Defined at:
 26113 ;;		line 156 in file "Library/Types.c"
 26114 ;; Parameters:    Size  Location     Type
 26115 ;;  pInput          2   12[BANK0 ] PTR struct Word
 26116 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 26117 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 26118 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 26119 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26120 ;;  pPair           1   14[BANK0 ] unsigned char 
 26121 ;; Auto vars:     Size  Location     Type
 26122 ;;		None
 26123 ;; Return value:  Size  Location     Type
 26124 ;;                  1    wreg      unsigned char 
 26125 ;; Registers used:
 26126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26127 ;; Tracked objects:
 26128 ;;		On entry : 0/0
 26129 ;;		On exit  : 0/0
 26130 ;;		Unchanged: 0/0
 26131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26132 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26135 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26136 ;;Total ram usage:        3 bytes
 26137 ;; Hardware stack levels used:    1
 26138 ;; Hardware stack levels required when called:    9
 26139 ;; This function calls:
 26140 ;;		_Byte_GetPair
 26141 ;; This function is called by:
 26142 ;;		_Port_Init
 26143 ;;		_Port_SetPin
 26144 ;;		_Port_Set
 26145 ;;		_PortProperty_Valid
 26146 ;;		_Port_SetPair
 26147 ;;		_Port_SetQuad
 26148 ;; This function uses a non-reentrant model
 26149 ;;
 26150                           
 26151                           	psect	text132
 26152  015E08                     __ptext132:
 26153                           	opt stack 0
 26154  015E08                     _Word_GetPair:
 26155                           	opt stack 17
 26156                           
 26157                           ;Types.c: 158: if (pPair >= 4)
 26158                           
 26159                           ; BSR set to: 0
 26160                           ;incstack = 0
 26161  015E08  0E03               	movlw	3
 26162  015E0A  0100               	movlb	0	; () banked
 26163  015E0C  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 26164  015E0E  D012               	goto	l781
 26165                           
 26166                           ; BSR set to: 0
 26167                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 26168  015E10  0E01               	movlw	1
 26169  015E12  0100               	movlb	0	; () banked
 26170  015E14  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 26171  015E16  0100               	movlb	0	; () banked
 26172  015E18  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 26173  015E1A  0E00               	movlw	0
 26174  015E1C  0100               	movlb	0	; () banked
 26175  015E1E  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 26176  015E20  0100               	movlb	0	; () banked
 26177  015E22  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 26178  015E24  0100               	movlb	0	; () banked
 26179  015E26  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 26180  015E28  0FFC               	addlw	252
 26181  015E2A  0100               	movlb	0	; () banked
 26182  015E2C  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 26183  015E2E  EC6C  F0B1         	call	_Byte_GetPair	;wreg free
 26184  015E32  0012               	return	
 26185  015E34                     l781:
 26186                           
 26187                           ;Types.c: 160: else
 26188                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 26189  015E34  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 26190  015E38  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 26191  015E3C  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 26192  015E40  EC6C  F0B1         	call	_Byte_GetPair	;wreg free
 26193  015E44  0012               	return	
 26194  015E46                     __end_of_Word_GetPair:
 26195                           	opt stack 0
 26196                           tosu	equ	0xFFF
 26197                           tosh	equ	0xFFE
 26198                           tosl	equ	0xFFD
 26199                           pclath	equ	0xFFA
 26200                           tblptru	equ	0xFF8
 26201                           tblptrh	equ	0xFF7
 26202                           tblptrl	equ	0xFF6
 26203                           tablat	equ	0xFF5
 26204                           prodh	equ	0xFF4
 26205                           prodl	equ	0xFF3
 26206                           intcon	equ	0xFF2
 26207                           postinc0	equ	0xFEE
 26208                           wreg	equ	0xFE8
 26209                           indf1	equ	0xFE7
 26210                           postdec1	equ	0xFE5
 26211                           fsr1h	equ	0xFE2
 26212                           fsr1l	equ	0xFE1
 26213                           indf2	equ	0xFDF
 26214                           postinc2	equ	0xFDE
 26215                           postdec2	equ	0xFDD
 26216                           plusw2	equ	0xFDB
 26217                           fsr2h	equ	0xFDA
 26218                           fsr2l	equ	0xFD9
 26219                           status	equ	0xFD8
 26220                           
 26221 ;; *************** function _Byte_GetPair *****************
 26222 ;; Defined at:
 26223 ;;		line 87 in file "Library/Types.c"
 26224 ;; Parameters:    Size  Location     Type
 26225 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 26226 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26227 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26228 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26229 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26230 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26231 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26232 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26233 ;;		 -> NULL(0), 
 26234 ;;  pPair           1   11[BANK0 ] unsigned char 
 26235 ;; Auto vars:     Size  Location     Type
 26236 ;;		None
 26237 ;; Return value:  Size  Location     Type
 26238 ;;                  1    wreg      unsigned char 
 26239 ;; Registers used:
 26240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26241 ;; Tracked objects:
 26242 ;;		On entry : 0/0
 26243 ;;		On exit  : 0/0
 26244 ;;		Unchanged: 0/0
 26245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26246 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26249 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26250 ;;Total ram usage:        3 bytes
 26251 ;; Hardware stack levels used:    1
 26252 ;; Hardware stack levels required when called:    8
 26253 ;; This function calls:
 26254 ;;		_Byte_GetZone
 26255 ;; This function is called by:
 26256 ;;		_Word_GetPair
 26257 ;; This function uses a non-reentrant model
 26258 ;;
 26259                           
 26260                           	psect	text133
 26261  0162D8                     __ptext133:
 26262                           	opt stack 0
 26263  0162D8                     _Byte_GetPair:
 26264                           	opt stack 17
 26265                           
 26266                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 26267                           
 26268                           ;incstack = 0
 26269  0162D8  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 26270  0162DC  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 26271  0162E0  0E04               	movlw	4
 26272  0162E2  0100               	movlb	0	; () banked
 26273  0162E4  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 26274  0162E6  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 26275  0162EA  0E02               	movlw	2
 26276  0162EC  0100               	movlb	0	; () banked
 26277  0162EE  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 26278  0162F0  ECC7  F0A4         	call	_Byte_GetZone	;wreg free
 26279  0162F4  0012               	return	
 26280  0162F6                     __end_of_Byte_GetPair:
 26281                           	opt stack 0
 26282                           tosu	equ	0xFFF
 26283                           tosh	equ	0xFFE
 26284                           tosl	equ	0xFFD
 26285                           pclath	equ	0xFFA
 26286                           tblptru	equ	0xFF8
 26287                           tblptrh	equ	0xFF7
 26288                           tblptrl	equ	0xFF6
 26289                           tablat	equ	0xFF5
 26290                           prodh	equ	0xFF4
 26291                           prodl	equ	0xFF3
 26292                           intcon	equ	0xFF2
 26293                           postinc0	equ	0xFEE
 26294                           wreg	equ	0xFE8
 26295                           indf1	equ	0xFE7
 26296                           postdec1	equ	0xFE5
 26297                           fsr1h	equ	0xFE2
 26298                           fsr1l	equ	0xFE1
 26299                           indf2	equ	0xFDF
 26300                           postinc2	equ	0xFDE
 26301                           postdec2	equ	0xFDD
 26302                           plusw2	equ	0xFDB
 26303                           fsr2h	equ	0xFDA
 26304                           fsr2l	equ	0xFD9
 26305                           status	equ	0xFD8
 26306                           
 26307 ;; *************** function _Byte_GetZone *****************
 26308 ;; Defined at:
 26309 ;;		line 64 in file "Library/Types.c"
 26310 ;; Parameters:    Size  Location     Type
 26311 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26312 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26313 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26314 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26315 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26316 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26317 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26318 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26319 ;;		 -> NULL(0), 
 26320 ;;  pMax            1    2[BANK0 ] unsigned char 
 26321 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26322 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26323 ;; Auto vars:     Size  Location     Type
 26324 ;;  Output          1    8[BANK0 ] unsigned char 
 26325 ;;  Offset          1    7[BANK0 ] unsigned char 
 26326 ;;  MASK            1    6[BANK0 ] unsigned char 
 26327 ;; Return value:  Size  Location     Type
 26328 ;;                  1    wreg      unsigned char 
 26329 ;; Registers used:
 26330 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26331 ;; Tracked objects:
 26332 ;;		On entry : 0/0
 26333 ;;		On exit  : 0/0
 26334 ;;		Unchanged: 0/0
 26335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26336 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26337 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26338 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26339 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26340 ;;Total ram usage:        9 bytes
 26341 ;; Hardware stack levels used:    1
 26342 ;; Hardware stack levels required when called:    7
 26343 ;; This function calls:
 26344 ;;		Nothing
 26345 ;; This function is called by:
 26346 ;;		_Byte_GetPair
 26347 ;;		_Byte_GetTriple
 26348 ;;		_Byte_GetQuad
 26349 ;; This function uses a non-reentrant model
 26350 ;;
 26351                           
 26352                           	psect	text134
 26353  01498E                     __ptext134:
 26354                           	opt stack 0
 26355  01498E                     _Byte_GetZone:
 26356                           	opt stack 17
 26357                           
 26358                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 26359                           
 26360                           ;incstack = 0
 26361  01498E  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 26362  014992  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 26363  014996  0E00               	movlw	low (__mediumconst shr (0+16))
 26364  014998  6EF8               	movwf	tblptru,c
 26365  01499A  0E0F               	movlw	(high __ramtop+-1)
 26366  01499C  64F7               	cpfsgt	tblptrh,c
 26367  01499E  D003               	bra	u8607
 26368  0149A0  0008               	tblrd		*
 26369  0149A2  50F5               	movf	tablat,w,c
 26370  0149A4  D005               	bra	u8600
 26371  0149A6                     u8607:
 26372  0149A6  CFF6 FFE9          	movff	tblptrl,fsr0l
 26373  0149AA  CFF7 FFEA          	movff	tblptrh,fsr0h
 26374  0149AE  50EF               	movf	indf0,w,c
 26375  0149B0                     u8600:
 26376  0149B0  0100               	movlb	0	; () banked
 26377  0149B2  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 26378                           
 26379                           ; BSR set to: 0
 26380                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 26381  0149B4  0100               	movlb	0	; () banked
 26382  0149B6  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26383  0149B8  0D01               	mullw	1
 26384  0149BA  0E9F               	movlw	low _MASKS
 26385  0149BC  24F3               	addwf	prodl,w,c
 26386  0149BE  6EF6               	movwf	tblptrl,c
 26387  0149C0  0EFD               	movlw	high _MASKS
 26388  0149C2  20F4               	addwfc	prodh,w,c
 26389  0149C4  6EF7               	movwf	tblptrh,c
 26390  0149C6                     	if	1	;There are 3 active tblptr bytes
 26391  0149C6  6AF8               	clrf	tblptru,c
 26392  0149C8  0E00               	movlw	low (__mediumconst shr (0+16))
 26393  0149CA  22F8               	addwfc	tblptru,f,c
 26394  0149CC                     	endif
 26395  0149CC  0008               	tblrd		*
 26396  0149CE  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 26397                           
 26398                           ; BSR set to: 0
 26399                           ;Types.c: 68: UINT8 Offset = 0;
 26400  0149D2  0E00               	movlw	0
 26401  0149D4  0100               	movlb	0	; () banked
 26402  0149D6  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 26403                           
 26404                           ;Types.c: 70: while (pChunk >= pMax)
 26405  0149D8  D006               	goto	l732
 26406  0149DA                     
 26407                           ; BSR set to: 0
 26408                           ;Types.c: 71: {
 26409                           ;Types.c: 72: pChunk -= pMax;
 26410                           
 26411                           ; BSR set to: 0
 26412  0149DA  0100               	movlb	0	; () banked
 26413  0149DC  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26414  0149DE  0100               	movlb	0	; () banked
 26415  0149E0  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 26416                           
 26417                           ; BSR set to: 0
 26418                           ;Types.c: 73: Offset += 1;
 26419  0149E2  0100               	movlb	0	; () banked
 26420  0149E4  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 26421  0149E6                     l732:
 26422                           
 26423                           ; BSR set to: 0
 26424                           
 26425                           ; BSR set to: 0
 26426  0149E6  0100               	movlb	0	; () banked
 26427  0149E8  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26428  0149EA  0100               	movlb	0	; () banked
 26429  0149EC  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 26430  0149EE  B0D8               	btfsc	status,0,c
 26431  0149F0  D7F4               	goto	l733
 26432                           
 26433                           ; BSR set to: 0
 26434                           ;Types.c: 74: }
 26435                           ;Types.c: 75: pChunk *= pChunkSize;
 26436                           
 26437                           ; BSR set to: 0
 26438  0149F2  0100               	movlb	0	; () banked
 26439  0149F4  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26440  0149F6  0100               	movlb	0	; () banked
 26441  0149F8  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 26442  0149FA  50F3               	movf	prodl,w,c
 26443  0149FC  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 26444                           
 26445                           ; BSR set to: 0
 26446                           ;Types.c: 76: pChunk += Offset;
 26447  0149FE  0100               	movlb	0	; () banked
 26448  014A00  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 26449  014A02  0100               	movlb	0	; () banked
 26450  014A04  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 26451                           
 26452                           ; BSR set to: 0
 26453                           ;Types.c: 78: Output >>= pChunk;
 26454  014A06  0100               	movlb	0	; () banked
 26455  014A08  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 26456  014A0A  0100               	movlb	0	; () banked
 26457  014A0C  6F65               	movwf	??_Byte_GetZone& (0+255),b
 26458  014A0E  D003               	goto	u8620
 26459  014A10                     u8625:
 26460  014A10  0100               	movlb	0	; () banked
 26461  014A12  90D8               	bcf	status,0,c
 26462  014A14  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 26463  014A16                     u8620:
 26464  014A16  0100               	movlb	0	; () banked
 26465  014A18  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 26466  014A1A  D7FA               	goto	u8625
 26467                           
 26468                           ;Types.c: 79: Output &= MASK;
 26469  014A1C  0100               	movlb	0	; () banked
 26470  014A1E  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 26471  014A20  0100               	movlb	0	; () banked
 26472  014A22  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 26473                           
 26474                           ; BSR set to: 0
 26475                           ;Types.c: 80: return Output;
 26476  014A24  0100               	movlb	0	; () banked
 26477  014A26  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 26478  014A28  0012               	return	
 26479  014A2A                     __end_of_Byte_GetZone:
 26480                           	opt stack 0
 26481                           tosu	equ	0xFFF
 26482                           tosh	equ	0xFFE
 26483                           tosl	equ	0xFFD
 26484                           pclath	equ	0xFFA
 26485                           tblptru	equ	0xFF8
 26486                           tblptrh	equ	0xFF7
 26487                           tblptrl	equ	0xFF6
 26488                           tablat	equ	0xFF5
 26489                           prodh	equ	0xFF4
 26490                           prodl	equ	0xFF3
 26491                           intcon	equ	0xFF2
 26492                           indf0	equ	0xFEF
 26493                           postinc0	equ	0xFEE
 26494                           fsr0h	equ	0xFEA
 26495                           fsr0l	equ	0xFE9
 26496                           wreg	equ	0xFE8
 26497                           indf1	equ	0xFE7
 26498                           postdec1	equ	0xFE5
 26499                           fsr1h	equ	0xFE2
 26500                           fsr1l	equ	0xFE1
 26501                           indf2	equ	0xFDF
 26502                           postinc2	equ	0xFDE
 26503                           postdec2	equ	0xFDD
 26504                           plusw2	equ	0xFDB
 26505                           fsr2h	equ	0xFDA
 26506                           fsr2l	equ	0xFD9
 26507                           status	equ	0xFD8
 26508                           
 26509 ;; *************** function _Byte_SetQuad *****************
 26510 ;; Defined at:
 26511 ;;		line 101 in file "Library/Types.c"
 26512 ;; Parameters:    Size  Location     Type
 26513 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 26514 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 26515 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26516 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26517 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26518 ;;		 -> NULL(0), 
 26519 ;;  pQuad           1   13[BANK0 ] unsigned char 
 26520 ;;  pValue          1   14[BANK0 ] unsigned char 
 26521 ;; Auto vars:     Size  Location     Type
 26522 ;;		None
 26523 ;; Return value:  Size  Location     Type
 26524 ;;                  1    wreg      void 
 26525 ;; Registers used:
 26526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26527 ;; Tracked objects:
 26528 ;;		On entry : 0/0
 26529 ;;		On exit  : 0/0
 26530 ;;		Unchanged: 0/0
 26531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26532 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26535 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26536 ;;Total ram usage:        4 bytes
 26537 ;; Hardware stack levels used:    1
 26538 ;; Hardware stack levels required when called:    8
 26539 ;; This function calls:
 26540 ;;		_Byte_SetZone
 26541 ;; This function is called by:
 26542 ;;		_Port_SetQuadType
 26543 ;;		_SPI_Init
 26544 ;;		_SPI_MinSpeed
 26545 ;;		_SPI_MaxSpeed
 26546 ;;		_Port_SetQuad
 26547 ;;		_Word_SetQuad
 26548 ;;		_I2C_Init
 26549 ;; This function uses a non-reentrant model
 26550 ;;
 26551                           
 26552                           	psect	text135
 26553  0161C4                     __ptext135:
 26554                           	opt stack 0
 26555  0161C4                     _Byte_SetQuad:
 26556                           	opt stack 19
 26557                           
 26558                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 26559                           
 26560                           ; BSR set to: 0
 26561                           ;incstack = 0
 26562  0161C4  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 26563  0161C8  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 26564  0161CC  0E02               	movlw	2
 26565  0161CE  0100               	movlb	0	; () banked
 26566  0161D0  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 26567  0161D2  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 26568  0161D6  0E04               	movlw	4
 26569  0161D8  0100               	movlb	0	; () banked
 26570  0161DA  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 26571  0161DC  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 26572  0161E0  EC24  F0A1         	call	_Byte_SetZone	;wreg free
 26573  0161E4  0012               	return		;funcret
 26574  0161E6                     __end_of_Byte_SetQuad:
 26575                           	opt stack 0
 26576                           tosu	equ	0xFFF
 26577                           tosh	equ	0xFFE
 26578                           tosl	equ	0xFFD
 26579                           pclath	equ	0xFFA
 26580                           tblptru	equ	0xFF8
 26581                           tblptrh	equ	0xFF7
 26582                           tblptrl	equ	0xFF6
 26583                           tablat	equ	0xFF5
 26584                           prodh	equ	0xFF4
 26585                           prodl	equ	0xFF3
 26586                           intcon	equ	0xFF2
 26587                           indf0	equ	0xFEF
 26588                           postinc0	equ	0xFEE
 26589                           fsr0h	equ	0xFEA
 26590                           fsr0l	equ	0xFE9
 26591                           wreg	equ	0xFE8
 26592                           indf1	equ	0xFE7
 26593                           postdec1	equ	0xFE5
 26594                           fsr1h	equ	0xFE2
 26595                           fsr1l	equ	0xFE1
 26596                           indf2	equ	0xFDF
 26597                           postinc2	equ	0xFDE
 26598                           postdec2	equ	0xFDD
 26599                           plusw2	equ	0xFDB
 26600                           fsr2h	equ	0xFDA
 26601                           fsr2l	equ	0xFD9
 26602                           status	equ	0xFD8
 26603                           
 26604 ;; *************** function _Byte_SetZone *****************
 26605 ;; Defined at:
 26606 ;;		line 47 in file "Library/Types.c"
 26607 ;; Parameters:    Size  Location     Type
 26608 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26609 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 26610 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 26611 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 26612 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 26613 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26614 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26615 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26616 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26617 ;;  pMax            1    2[BANK0 ] unsigned char 
 26618 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26619 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26620 ;;  pValue          1    5[BANK0 ] unsigned char 
 26621 ;; Auto vars:     Size  Location     Type
 26622 ;;  MASK            1   10[BANK0 ] unsigned char 
 26623 ;;  Offset          1    9[BANK0 ] unsigned char 
 26624 ;; Return value:  Size  Location     Type
 26625 ;;                  1    wreg      void 
 26626 ;; Registers used:
 26627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26628 ;; Tracked objects:
 26629 ;;		On entry : 0/0
 26630 ;;		On exit  : 0/0
 26631 ;;		Unchanged: 0/0
 26632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26633 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26635 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26636 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26637 ;;Total ram usage:       11 bytes
 26638 ;; Hardware stack levels used:    1
 26639 ;; Hardware stack levels required when called:    7
 26640 ;; This function calls:
 26641 ;;		Nothing
 26642 ;; This function is called by:
 26643 ;;		_Byte_SetPair
 26644 ;;		_Byte_SetQuad
 26645 ;;		_Byte_SetTriple
 26646 ;; This function uses a non-reentrant model
 26647 ;;
 26648                           
 26649                           	psect	text136
 26650  014248                     __ptext136:
 26651                           	opt stack 0
 26652  014248                     _Byte_SetZone:
 26653                           	opt stack 18
 26654                           
 26655                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 26656                           
 26657                           ;incstack = 0
 26658  014248  0100               	movlb	0	; () banked
 26659  01424A  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26660  01424C  0D01               	mullw	1
 26661  01424E  0E9F               	movlw	low _MASKS
 26662  014250  24F3               	addwf	prodl,w,c
 26663  014252  6EF6               	movwf	tblptrl,c
 26664  014254  0EFD               	movlw	high _MASKS
 26665  014256  20F4               	addwfc	prodh,w,c
 26666  014258  6EF7               	movwf	tblptrh,c
 26667  01425A                     	if	1	;There are 3 active tblptr bytes
 26668  01425A  6AF8               	clrf	tblptru,c
 26669  01425C  0E00               	movlw	low (__mediumconst shr (0+16))
 26670  01425E  22F8               	addwfc	tblptru,f,c
 26671  014260                     	endif
 26672  014260  0008               	tblrd		*
 26673  014262  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 26674                           
 26675                           ; BSR set to: 0
 26676                           ;Types.c: 50: UINT8 Offset = 0;
 26677  014266  0E00               	movlw	0
 26678  014268  0100               	movlb	0	; () banked
 26679  01426A  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 26680                           
 26681                           ;Types.c: 52: while (pChunk >= pMax)
 26682  01426C  D006               	goto	l726
 26683  01426E                     
 26684                           ; BSR set to: 0
 26685                           ;Types.c: 53: {
 26686                           ;Types.c: 54: pChunk -= pMax;
 26687                           
 26688                           ; BSR set to: 0
 26689  01426E  0100               	movlb	0	; () banked
 26690  014270  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26691  014272  0100               	movlb	0	; () banked
 26692  014274  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 26693                           
 26694                           ; BSR set to: 0
 26695                           ;Types.c: 55: Offset += 1;
 26696  014276  0100               	movlb	0	; () banked
 26697  014278  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 26698  01427A                     l726:
 26699                           
 26700                           ; BSR set to: 0
 26701                           
 26702                           ; BSR set to: 0
 26703  01427A  0100               	movlb	0	; () banked
 26704  01427C  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26705  01427E  0100               	movlb	0	; () banked
 26706  014280  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 26707  014282  B0D8               	btfsc	status,0,c
 26708  014284  D7F4               	goto	l727
 26709                           
 26710                           ; BSR set to: 0
 26711                           ;Types.c: 56: }
 26712                           ;Types.c: 57: pChunk *= pChunkSize;
 26713                           
 26714                           ; BSR set to: 0
 26715  014286  0100               	movlb	0	; () banked
 26716  014288  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26717  01428A  0100               	movlb	0	; () banked
 26718  01428C  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 26719  01428E  50F3               	movf	prodl,w,c
 26720  014290  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 26721                           
 26722                           ; BSR set to: 0
 26723                           ;Types.c: 58: pChunk += Offset;
 26724  014292  0100               	movlb	0	; () banked
 26725  014294  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 26726  014296  0100               	movlb	0	; () banked
 26727  014298  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 26728                           
 26729                           ; BSR set to: 0
 26730                           ;Types.c: 60: pValue &= MASK;
 26731  01429A  0100               	movlb	0	; () banked
 26732  01429C  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 26733  01429E  0100               	movlb	0	; () banked
 26734  0142A0  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 26735                           
 26736                           ; BSR set to: 0
 26737                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 26738  0142A2  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26739  0142A6  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 26740  0142AA  0100               	movlb	0	; () banked
 26741  0142AC  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26742  0142AE  D003               	goto	u8704
 26743  0142B0                     u8705:
 26744  0142B0  0100               	movlb	0	; () banked
 26745  0142B2  90D8               	bcf	status,0,c
 26746  0142B4  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26747  0142B6                     u8704:
 26748  0142B6  0100               	movlb	0	; () banked
 26749  0142B8  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26750  0142BA  D7FA               	goto	u8705
 26751  0142BC  0100               	movlb	0	; () banked
 26752  0142BE  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26753  0142C0  0AFF               	xorlw	255
 26754  0142C2  0100               	movlb	0	; () banked
 26755  0142C4  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 26756  0142C6  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26757  0142CA  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26758  0142CE  0100               	movlb	0	; () banked
 26759  0142D0  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 26760  0142D2  16DF               	andwf	indf2,f,c
 26761                           
 26762                           ; BSR set to: 0
 26763                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 26764  0142D4  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26765  0142D8  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 26766  0142DC  0100               	movlb	0	; () banked
 26767  0142DE  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26768  0142E0  D003               	goto	u8714
 26769  0142E2                     u8715:
 26770  0142E2  0100               	movlb	0	; () banked
 26771  0142E4  90D8               	bcf	status,0,c
 26772  0142E6  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26773  0142E8                     u8714:
 26774  0142E8  0100               	movlb	0	; () banked
 26775  0142EA  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26776  0142EC  D7FA               	goto	u8715
 26777  0142EE  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26778  0142F2  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26779  0142F6  0100               	movlb	0	; () banked
 26780  0142F8  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26781  0142FA  12DF               	iorwf	indf2,f,c
 26782                           
 26783                           ; BSR set to: 0
 26784  0142FC  0012               	return		;funcret
 26785  0142FE                     __end_of_Byte_SetZone:
 26786                           	opt stack 0
 26787                           tosu	equ	0xFFF
 26788                           tosh	equ	0xFFE
 26789                           tosl	equ	0xFFD
 26790                           pclath	equ	0xFFA
 26791                           tblptru	equ	0xFF8
 26792                           tblptrh	equ	0xFF7
 26793                           tblptrl	equ	0xFF6
 26794                           tablat	equ	0xFF5
 26795                           prodh	equ	0xFF4
 26796                           prodl	equ	0xFF3
 26797                           intcon	equ	0xFF2
 26798                           indf0	equ	0xFEF
 26799                           postinc0	equ	0xFEE
 26800                           fsr0h	equ	0xFEA
 26801                           fsr0l	equ	0xFE9
 26802                           wreg	equ	0xFE8
 26803                           indf1	equ	0xFE7
 26804                           postdec1	equ	0xFE5
 26805                           fsr1h	equ	0xFE2
 26806                           fsr1l	equ	0xFE1
 26807                           indf2	equ	0xFDF
 26808                           postinc2	equ	0xFDE
 26809                           postdec2	equ	0xFDD
 26810                           plusw2	equ	0xFDB
 26811                           fsr2h	equ	0xFDA
 26812                           fsr2l	equ	0xFD9
 26813                           status	equ	0xFD8
 26814                           
 26815 ;; *************** function _Console_Init *****************
 26816 ;; Defined at:
 26817 ;;		line 157 in file "Library/Console.c"
 26818 ;; Parameters:    Size  Location     Type
 26819 ;;		None
 26820 ;; Auto vars:     Size  Location     Type
 26821 ;;  y               1    3[BANK0 ] unsigned char 
 26822 ;;  x               1    2[BANK0 ] unsigned char 
 26823 ;; Return value:  Size  Location     Type
 26824 ;;                  1    wreg      void 
 26825 ;; Registers used:
 26826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26827 ;; Tracked objects:
 26828 ;;		On entry : 0/0
 26829 ;;		On exit  : 0/0
 26830 ;;		Unchanged: 0/0
 26831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26833 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26834 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26835 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26836 ;;Total ram usage:        4 bytes
 26837 ;; Hardware stack levels used:    1
 26838 ;; Hardware stack levels required when called:    7
 26839 ;; This function calls:
 26840 ;;		Nothing
 26841 ;; This function is called by:
 26842 ;;		_init
 26843 ;; This function uses a non-reentrant model
 26844 ;;
 26845                           
 26846                           	psect	text137
 26847  014C6C                     __ptext137:
 26848                           	opt stack 0
 26849  014C6C                     _Console_Init:
 26850                           	opt stack 22
 26851                           
 26852                           ;Console.c: 160: lBufferX = 0;
 26853                           
 26854                           ; BSR set to: 0
 26855                           ;incstack = 0
 26856  014C6C  0E00               	movlw	0
 26857  014C6E  0100               	movlb	0	; () banked
 26858  014C70  6FDE               	movwf	_lBufferX& (0+255),b
 26859                           
 26860                           ;Console.c: 161: lBufferY = 0;
 26861  014C72  0E00               	movlw	0
 26862  014C74  0100               	movlb	0	; () banked
 26863  014C76  6FDD               	movwf	_lBufferY& (0+255),b
 26864                           
 26865                           ;Console.c: 163: UINT8 x, y;
 26866                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26867  014C78  0E00               	movlw	0
 26868  014C7A  0100               	movlb	0	; () banked
 26869  014C7C  6F62               	movwf	Console_Init@x& (0+255),b
 26870  014C7E                     l14012:
 26871                           
 26872                           ; BSR set to: 0
 26873  014C7E  0E13               	movlw	19
 26874  014C80  0100               	movlb	0	; () banked
 26875  014C82  6562               	cpfsgt	Console_Init@x& (0+255),b
 26876  014C84  D001               	goto	l976
 26877  014C86  0012               	return	
 26878  014C88                     l976:
 26879                           
 26880                           ; BSR set to: 0
 26881                           ;Console.c: 165: {
 26882                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 26883                           
 26884                           ; BSR set to: 0
 26885  014C88  0E00               	movlw	0
 26886  014C8A  0100               	movlb	0	; () banked
 26887  014C8C  6F63               	movwf	Console_Init@y& (0+255),b
 26888  014C8E                     l14018:
 26889                           
 26890                           ; BSR set to: 0
 26891  014C8E  0E0E               	movlw	14
 26892  014C90  0100               	movlb	0	; () banked
 26893  014C92  6563               	cpfsgt	Console_Init@y& (0+255),b
 26894  014C94  D001               	goto	l978
 26895  014C96  D02C               	goto	u10800
 26896  014C98                     l978:
 26897                           
 26898                           ; BSR set to: 0
 26899                           ;Console.c: 167: {
 26900                           ;Console.c: 168: lBuffer[y][x] = '\0';
 26901                           
 26902                           ; BSR set to: 0
 26903  014C98  0100               	movlb	0	; () banked
 26904  014C9A  5163               	movf	Console_Init@y& (0+255),w,b
 26905  014C9C  0D14               	mullw	20
 26906  014C9E  0EC8               	movlw	low _lBuffer
 26907  014CA0  0100               	movlb	0	; () banked
 26908  014CA2  6F60               	movwf	??_Console_Init& (0+255),b
 26909  014CA4  0E04               	movlw	high _lBuffer
 26910  014CA6  0100               	movlb	0	; () banked
 26911  014CA8  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 26912  014CAA  50F3               	movf	prodl,w,c
 26913  014CAC  0100               	movlb	0	; () banked
 26914  014CAE  2760               	addwf	??_Console_Init& (0+255),f,b
 26915  014CB0  50F4               	movf	prodh,w,c
 26916  014CB2  0100               	movlb	0	; () banked
 26917  014CB4  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 26918  014CB6  0100               	movlb	0	; () banked
 26919  014CB8  5162               	movf	Console_Init@x& (0+255),w,b
 26920  014CBA  0D01               	mullw	1
 26921  014CBC  50F3               	movf	prodl,w,c
 26922  014CBE  0100               	movlb	0	; () banked
 26923  014CC0  2560               	addwf	??_Console_Init& (0+255),w,b
 26924  014CC2  6ED9               	movwf	fsr2l,c
 26925  014CC4  50F4               	movf	prodh,w,c
 26926  014CC6  0100               	movlb	0	; () banked
 26927  014CC8  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 26928  014CCA  6EDA               	movwf	fsr2h,c
 26929  014CCC  0E00               	movlw	0
 26930  014CCE  6EDF               	movwf	indf2,c
 26931                           
 26932                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 26933  014CD0  0100               	movlb	0	; () banked
 26934  014CD2  5163               	movf	Console_Init@y& (0+255),w,b
 26935  014CD4  0D02               	mullw	2
 26936  014CD6  0E00               	movlw	low _lCBuffer
 26937  014CD8  24F3               	addwf	prodl,w,c
 26938  014CDA  6ED9               	movwf	fsr2l,c
 26939  014CDC  0E04               	movlw	high _lCBuffer
 26940  014CDE  20F4               	addwfc	prodh,w,c
 26941  014CE0  6EDA               	movwf	fsr2h,c
 26942  014CE2  0EFF               	movlw	255
 26943  014CE4  6EDE               	movwf	postinc2,c
 26944  014CE6  0EFF               	movlw	255
 26945  014CE8  6EDD               	movwf	postdec2,c
 26946                           
 26947                           ; BSR set to: 0
 26948  014CEA  0100               	movlb	0	; () banked
 26949  014CEC  2B63               	incf	Console_Init@y& (0+255),f,b
 26950  014CEE  D7CF               	goto	l14018
 26951  014CF0                     u10800:
 26952                           
 26953                           ; BSR set to: 0
 26954                           
 26955                           ; BSR set to: 0
 26956  014CF0  0100               	movlb	0	; () banked
 26957  014CF2  2B62               	incf	Console_Init@x& (0+255),f,b
 26958  014CF4  D7C4               	goto	l14012
 26959  014CF6                     __end_of_Console_Init:
 26960                           	opt stack 0
 26961                           tosu	equ	0xFFF
 26962                           tosh	equ	0xFFE
 26963                           tosl	equ	0xFFD
 26964                           pclath	equ	0xFFA
 26965                           tblptru	equ	0xFF8
 26966                           tblptrh	equ	0xFF7
 26967                           tblptrl	equ	0xFF6
 26968                           tablat	equ	0xFF5
 26969                           prodh	equ	0xFF4
 26970                           prodl	equ	0xFF3
 26971                           intcon	equ	0xFF2
 26972                           indf0	equ	0xFEF
 26973                           postinc0	equ	0xFEE
 26974                           fsr0h	equ	0xFEA
 26975                           fsr0l	equ	0xFE9
 26976                           wreg	equ	0xFE8
 26977                           indf1	equ	0xFE7
 26978                           postdec1	equ	0xFE5
 26979                           fsr1h	equ	0xFE2
 26980                           fsr1l	equ	0xFE1
 26981                           indf2	equ	0xFDF
 26982                           postinc2	equ	0xFDE
 26983                           postdec2	equ	0xFDD
 26984                           plusw2	equ	0xFDB
 26985                           fsr2h	equ	0xFDA
 26986                           fsr2l	equ	0xFD9
 26987                           status	equ	0xFD8
 26988                           
 26989 ;; *************** function _ADC_Start *****************
 26990 ;; Defined at:
 26991 ;;		line 114 in file "Library/ADC.c"
 26992 ;; Parameters:    Size  Location     Type
 26993 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 26994 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 26995 ;;		 -> NULL(0), 
 26996 ;; Auto vars:     Size  Location     Type
 26997 ;;		None
 26998 ;; Return value:  Size  Location     Type
 26999 ;;                  1    wreg      void 
 27000 ;; Registers used:
 27001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27002 ;; Tracked objects:
 27003 ;;		On entry : 0/0
 27004 ;;		On exit  : 0/0
 27005 ;;		Unchanged: 0/0
 27006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27007 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27010 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27011 ;;Total ram usage:        4 bytes
 27012 ;; Hardware stack levels used:    1
 27013 ;; Hardware stack levels required when called:    8
 27014 ;; This function calls:
 27015 ;;		_ADC_Off
 27016 ;;		_ADC_On
 27017 ;;		_ADC_SetChannel
 27018 ;; This function is called by:
 27019 ;;		_init
 27020 ;;		_mode1
 27021 ;;		_mode4
 27022 ;;		_FunctADC
 27023 ;; This function uses a non-reentrant model
 27024 ;;
 27025                           
 27026                           	psect	text138
 27027  014D80                     __ptext138:
 27028                           	opt stack 0
 27029  014D80                     _ADC_Start:
 27030                           	opt stack 21
 27031                           
 27032                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 27033                           
 27034                           ; BSR set to: 0
 27035                           ;incstack = 0
 27036  014D80  B2C2               	btfsc	4034,1,c	;volatile
 27037  014D82  0012               	return	
 27038  014D84                     
 27039                           ;ADC.c: 128: {
 27040                           ;ADC.c: 129: ADC_Off();
 27041                           
 27042                           ;ADC.c: 127: for(;;)
 27043  014D84  EC9A  F0B2         	call	_ADC_Off	;wreg free
 27044                           
 27045                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 27046  014D88  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
 27047  014D8C  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 27048  014D90  50DF               	movf	indf2,w,c
 27049  014D92  EC97  F0B1         	call	_ADC_SetChannel
 27050                           
 27051                           ;ADC.c: 131: ADC_On();
 27052  014D96  ECAB  F0B2         	call	_ADC_On	;wreg free
 27053                           
 27054                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 27055  014D9A  82C2               	bsf	4034,1,c	;volatile
 27056  014D9C  B2C2               	btfsc	4034,1,c	;volatile
 27057  014D9E  D7FE               	goto	l1280
 27058                           
 27059                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 27060  014DA0  50C3               	movf	4035,w,c	;volatile
 27061  014DA2  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
 27062  014DA6  0100               	movlb	0	; () banked
 27063  014DA8  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
 27064  014DAA  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
 27065  014DAE  0100               	movlb	0	; () banked
 27066  014DB0  6B64               	clrf	??_ADC_Start& (0+255),b
 27067  014DB2  0100               	movlb	0	; () banked
 27068  014DB4  1364               	iorwf	??_ADC_Start& (0+255),f,b
 27069  014DB6  0E00               	movlw	0
 27070  014DB8  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 27071  014DBA  0100               	movlb	0	; () banked
 27072  014DBC  EE20 F001          	lfsr	2,1
 27073  014DC0  5162               	movf	ADC_Start@pInput& (0+255),w,b
 27074  014DC2  26D9               	addwf	fsr2l,f,c
 27075  014DC4  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 27076  014DC6  22DA               	addwfc	fsr2h,f,c
 27077  014DC8  C064  FFDE         	movff	??_ADC_Start,postinc2
 27078  014DCC  C065  FFDD         	movff	??_ADC_Start+1,postdec2
 27079                           
 27080                           ;ADC.c: 141: if (pInput->mNext == 0)
 27081  014DD0  0100               	movlb	0	; () banked
 27082  014DD2  EE20 F003          	lfsr	2,3
 27083  014DD6  5162               	movf	ADC_Start@pInput& (0+255),w,b
 27084  014DD8  26D9               	addwf	fsr2l,f,c
 27085  014DDA  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 27086  014DDC  22DA               	addwfc	fsr2h,f,c
 27087  014DDE  50DE               	movf	postinc2,w,c
 27088  014DE0  10DE               	iorwf	postinc2,w,c
 27089  014DE2  B4D8               	btfsc	status,2,c
 27090  014DE4  D00C               	goto	l1283
 27091                           
 27092                           ; BSR set to: 0
 27093                           ;ADC.c: 145: pInput = pInput->mNext;
 27094                           
 27095                           ; BSR set to: 0
 27096                           
 27097                           ; BSR set to: 0
 27098                           ;ADC.c: 142: break;
 27099  014DE6  0100               	movlb	0	; () banked
 27100  014DE8  EE20 F003          	lfsr	2,3
 27101  014DEC  5162               	movf	ADC_Start@pInput& (0+255),w,b
 27102  014DEE  26D9               	addwf	fsr2l,f,c
 27103  014DF0  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 27104  014DF2  22DA               	addwfc	fsr2h,f,c
 27105  014DF4  CFDE F062          	movff	postinc2,ADC_Start@pInput
 27106  014DF8  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
 27107                           
 27108                           ;ADC.c: 146: }
 27109  014DFC  D7C3               	goto	l1276
 27110  014DFE                     l1283:
 27111                           
 27112                           ; BSR set to: 0
 27113                           ;ADC.c: 147: ADC_Off();
 27114                           
 27115                           ; BSR set to: 0
 27116  014DFE  EC9A  F0B2         	call	_ADC_Off	;wreg free
 27117  014E02  0012               	return		;funcret
 27118  014E04                     __end_of_ADC_Start:
 27119                           	opt stack 0
 27120                           tosu	equ	0xFFF
 27121                           tosh	equ	0xFFE
 27122                           tosl	equ	0xFFD
 27123                           pclath	equ	0xFFA
 27124                           tblptru	equ	0xFF8
 27125                           tblptrh	equ	0xFF7
 27126                           tblptrl	equ	0xFF6
 27127                           tablat	equ	0xFF5
 27128                           prodh	equ	0xFF4
 27129                           prodl	equ	0xFF3
 27130                           intcon	equ	0xFF2
 27131                           indf0	equ	0xFEF
 27132                           postinc0	equ	0xFEE
 27133                           fsr0h	equ	0xFEA
 27134                           fsr0l	equ	0xFE9
 27135                           wreg	equ	0xFE8
 27136                           indf1	equ	0xFE7
 27137                           postdec1	equ	0xFE5
 27138                           fsr1h	equ	0xFE2
 27139                           fsr1l	equ	0xFE1
 27140                           indf2	equ	0xFDF
 27141                           postinc2	equ	0xFDE
 27142                           postdec2	equ	0xFDD
 27143                           plusw2	equ	0xFDB
 27144                           fsr2h	equ	0xFDA
 27145                           fsr2l	equ	0xFD9
 27146                           status	equ	0xFD8
 27147                           
 27148 ;; *************** function _ADC_Init *****************
 27149 ;; Defined at:
 27150 ;;		line 19 in file "Library/ADC.c"
 27151 ;; Parameters:    Size  Location     Type
 27152 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 27153 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 27154 ;;  pChannel        1    6[BANK0 ] enum E6742
 27155 ;; Auto vars:     Size  Location     Type
 27156 ;;		None
 27157 ;; Return value:  Size  Location     Type
 27158 ;;                  1    wreg      void 
 27159 ;; Registers used:
 27160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27161 ;; Tracked objects:
 27162 ;;		On entry : 0/0
 27163 ;;		On exit  : 0/0
 27164 ;;		Unchanged: 0/0
 27165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27166 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27169 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27170 ;;Total ram usage:        3 bytes
 27171 ;; Hardware stack levels used:    1
 27172 ;; Hardware stack levels required when called:    9
 27173 ;; This function calls:
 27174 ;;		_ADC_Calibrate
 27175 ;;		_ADC_ClockDivision
 27176 ;;		_ADC_ConversionTime
 27177 ;;		_ADC_SetChannel
 27178 ;;		_ADC_SetupIO
 27179 ;; This function is called by:
 27180 ;;		_init
 27181 ;;		_FunctInitADC
 27182 ;; This function uses a non-reentrant model
 27183 ;;
 27184                           
 27185                           	psect	text139
 27186  014F02                     __ptext139:
 27187                           	opt stack 0
 27188  014F02                     _ADC_Init:
 27189                           	opt stack 20
 27190                           
 27191                           ;ADC.c: 21: if(pInput==(void*)0)
 27192                           
 27193                           ;incstack = 0
 27194  014F02  0100               	movlb	0	; () banked
 27195  014F04  5164               	movf	ADC_Init@pInput& (0+255),w,b
 27196  014F06  0100               	movlb	0	; () banked
 27197  014F08  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 27198  014F0A  B4D8               	btfsc	status,2,c
 27199  014F0C  0012               	return	
 27200                           
 27201                           ; BSR set to: 0
 27202                           ;ADC.c: 25: lCurrent = pInput;
 27203                           
 27204                           ; BSR set to: 0
 27205                           
 27206                           ; BSR set to: 0
 27207                           ;ADC.c: 22: return;
 27208  014F0E  C064  F0D0         	movff	ADC_Init@pInput,_lCurrent
 27209  014F12  C065  F0D1         	movff	ADC_Init@pInput+1,_lCurrent+1
 27210                           
 27211                           ; BSR set to: 0
 27212                           ;ADC.c: 27: pInput->mChannel = pChannel;
 27213  014F16  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 27214  014F1A  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 27215  014F1E  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 27216                           
 27217                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 27218  014F22  0100               	movlb	0	; () banked
 27219  014F24  EE20 F003          	lfsr	2,3
 27220  014F28  5164               	movf	ADC_Init@pInput& (0+255),w,b
 27221  014F2A  26D9               	addwf	fsr2l,f,c
 27222  014F2C  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 27223  014F2E  22DA               	addwfc	fsr2h,f,c
 27224  014F30  0E00               	movlw	0
 27225  014F32  6EDE               	movwf	postinc2,c
 27226  014F34  0E00               	movlw	0
 27227  014F36  6EDD               	movwf	postdec2,c
 27228                           
 27229                           ;ADC.c: 29: pInput->mValue = 0;
 27230  014F38  0100               	movlb	0	; () banked
 27231  014F3A  EE20 F001          	lfsr	2,1
 27232  014F3E  5164               	movf	ADC_Init@pInput& (0+255),w,b
 27233  014F40  26D9               	addwf	fsr2l,f,c
 27234  014F42  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 27235  014F44  22DA               	addwfc	fsr2h,f,c
 27236  014F46  0E00               	movlw	0
 27237  014F48  6EDE               	movwf	postinc2,c
 27238  014F4A  0E00               	movlw	0
 27239  014F4C  6EDD               	movwf	postdec2,c
 27240                           
 27241                           ; BSR set to: 0
 27242                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 27243  014F4E  0100               	movlb	0	; () banked
 27244  014F50  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 27245  014F52  EC97  F0B1         	call	_ADC_SetChannel
 27246                           
 27247                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 27248  014F56  9EC2               	bcf	4034,7,c	;volatile
 27249                           
 27250                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 27251  014F58  9CC2               	bcf	4034,6,c	;volatile
 27252                           
 27253                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 27254  014F5A  8EC1               	bsf	4033,7,c	;volatile
 27255                           
 27256                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 27257  014F5C  8CC1               	bsf	4033,6,c	;volatile
 27258                           
 27259                           ;ADC.c: 43: ADC_ConversionTime(12);
 27260  014F5E  0E0C               	movlw	12
 27261  014F60  EC74  F0AD         	call	_ADC_ConversionTime
 27262                           
 27263                           ;ADC.c: 47: ADC_ClockDivision(16);
 27264  014F64  0E10               	movlw	16
 27265  014F66  EC7B  F0A6         	call	_ADC_ClockDivision
 27266                           
 27267                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 27268  014F6A  0100               	movlb	0	; () banked
 27269  014F6C  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 27270  014F6E  ECCB  F0AF         	call	_ADC_SetupIO
 27271                           
 27272                           ;ADC.c: 58: ADC_Initialised = 1;
 27273  014F72  0E01               	movlw	1
 27274  014F74  6E3C               	movwf	_ADC_Initialised,c
 27275                           
 27276                           ;ADC.c: 61: ADC_Calibrate();
 27277  014F76  EC1C  F0B2         	call	_ADC_Calibrate	;wreg free
 27278  014F7A  0012               	return		;funcret
 27279  014F7C                     __end_of_ADC_Init:
 27280                           	opt stack 0
 27281                           tosu	equ	0xFFF
 27282                           tosh	equ	0xFFE
 27283                           tosl	equ	0xFFD
 27284                           pclath	equ	0xFFA
 27285                           tblptru	equ	0xFF8
 27286                           tblptrh	equ	0xFF7
 27287                           tblptrl	equ	0xFF6
 27288                           tablat	equ	0xFF5
 27289                           prodh	equ	0xFF4
 27290                           prodl	equ	0xFF3
 27291                           intcon	equ	0xFF2
 27292                           indf0	equ	0xFEF
 27293                           postinc0	equ	0xFEE
 27294                           fsr0h	equ	0xFEA
 27295                           fsr0l	equ	0xFE9
 27296                           wreg	equ	0xFE8
 27297                           indf1	equ	0xFE7
 27298                           postdec1	equ	0xFE5
 27299                           fsr1h	equ	0xFE2
 27300                           fsr1l	equ	0xFE1
 27301                           indf2	equ	0xFDF
 27302                           postinc2	equ	0xFDE
 27303                           postdec2	equ	0xFDD
 27304                           plusw2	equ	0xFDB
 27305                           fsr2h	equ	0xFDA
 27306                           fsr2l	equ	0xFD9
 27307                           status	equ	0xFD8
 27308                           
 27309 ;; *************** function _ADC_SetupIO *****************
 27310 ;; Defined at:
 27311 ;;		line 150 in file "Library/ADC.c"
 27312 ;; Parameters:    Size  Location     Type
 27313 ;;  pChannel        1    wreg     enum E6742
 27314 ;; Auto vars:     Size  Location     Type
 27315 ;;  pChannel        1    2[BANK0 ] enum E6742
 27316 ;;  MASK            1    3[BANK0 ] unsigned char 
 27317 ;; Return value:  Size  Location     Type
 27318 ;;                  1    wreg      void 
 27319 ;; Registers used:
 27320 ;;		wreg, status,2, status,0
 27321 ;; Tracked objects:
 27322 ;;		On entry : 0/0
 27323 ;;		On exit  : 0/0
 27324 ;;		Unchanged: 0/0
 27325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27327 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27328 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27329 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27330 ;;Total ram usage:        4 bytes
 27331 ;; Hardware stack levels used:    1
 27332 ;; Hardware stack levels required when called:    7
 27333 ;; This function calls:
 27334 ;;		Nothing
 27335 ;; This function is called by:
 27336 ;;		_ADC_Init
 27337 ;; This function uses a non-reentrant model
 27338 ;;
 27339                           
 27340                           	psect	text140
 27341  015F96                     __ptext140:
 27342                           	opt stack 0
 27343  015F96                     _ADC_SetupIO:
 27344                           	opt stack 21
 27345                           
 27346                           ;incstack = 0
 27347                           ;ADC_SetupIO@pChannel stored from wreg
 27348  015F96  0100               	movlb	0	; () banked
 27349  015F98  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 27350                           
 27351                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 27352  015F9A  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 27353  015F9E  0E01               	movlw	1
 27354  015FA0  0100               	movlb	0	; () banked
 27355  015FA2  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 27356  015FA4  0100               	movlb	0	; () banked
 27357  015FA6  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 27358  015FA8  D003               	goto	u10024
 27359  015FAA                     u10025:
 27360  015FAA  0100               	movlb	0	; () banked
 27361  015FAC  90D8               	bcf	status,0,c
 27362  015FAE  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 27363  015FB0                     u10024:
 27364  015FB0  0100               	movlb	0	; () banked
 27365  015FB2  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 27366  015FB4  D7FA               	goto	u10025
 27367  015FB6  0100               	movlb	0	; () banked
 27368  015FB8  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 27369  015FBA  0AFF               	xorlw	255
 27370  015FBC  0100               	movlb	0	; () banked
 27371  015FBE  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 27372                           
 27373                           ;ADC.c: 153: ANCON0 &= MASK;
 27374  015FC0  0100               	movlb	0	; () banked
 27375  015FC2  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 27376  015FC4  16C1               	andwf	4033,f,c	;volatile
 27377                           
 27378                           ; BSR set to: 0
 27379  015FC6  0012               	return		;funcret
 27380  015FC8                     __end_of_ADC_SetupIO:
 27381                           	opt stack 0
 27382                           tosu	equ	0xFFF
 27383                           tosh	equ	0xFFE
 27384                           tosl	equ	0xFFD
 27385                           pclath	equ	0xFFA
 27386                           tblptru	equ	0xFF8
 27387                           tblptrh	equ	0xFF7
 27388                           tblptrl	equ	0xFF6
 27389                           tablat	equ	0xFF5
 27390                           prodh	equ	0xFF4
 27391                           prodl	equ	0xFF3
 27392                           intcon	equ	0xFF2
 27393                           indf0	equ	0xFEF
 27394                           postinc0	equ	0xFEE
 27395                           fsr0h	equ	0xFEA
 27396                           fsr0l	equ	0xFE9
 27397                           wreg	equ	0xFE8
 27398                           indf1	equ	0xFE7
 27399                           postdec1	equ	0xFE5
 27400                           fsr1h	equ	0xFE2
 27401                           fsr1l	equ	0xFE1
 27402                           indf2	equ	0xFDF
 27403                           postinc2	equ	0xFDE
 27404                           postdec2	equ	0xFDD
 27405                           plusw2	equ	0xFDB
 27406                           fsr2h	equ	0xFDA
 27407                           fsr2l	equ	0xFD9
 27408                           status	equ	0xFD8
 27409                           
 27410 ;; *************** function _ADC_SetChannel *****************
 27411 ;; Defined at:
 27412 ;;		line 155 in file "Library/ADC.c"
 27413 ;; Parameters:    Size  Location     Type
 27414 ;;  pChannel        1    wreg     enum E6742
 27415 ;; Auto vars:     Size  Location     Type
 27416 ;;  pChannel        1    1[BANK0 ] enum E6742
 27417 ;; Return value:  Size  Location     Type
 27418 ;;                  1    wreg      void 
 27419 ;; Registers used:
 27420 ;;		wreg, status,2, status,0
 27421 ;; Tracked objects:
 27422 ;;		On entry : 0/0
 27423 ;;		On exit  : 0/0
 27424 ;;		Unchanged: 0/0
 27425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27429 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27430 ;;Total ram usage:        2 bytes
 27431 ;; Hardware stack levels used:    1
 27432 ;; Hardware stack levels required when called:    7
 27433 ;; This function calls:
 27434 ;;		Nothing
 27435 ;; This function is called by:
 27436 ;;		_ADC_Init
 27437 ;;		_ADC_Start
 27438 ;;		_ADC_ISR
 27439 ;;		_ADC_Sample
 27440 ;; This function uses a non-reentrant model
 27441 ;;
 27442                           
 27443                           	psect	text141
 27444  01632E                     __ptext141:
 27445                           	opt stack 0
 27446  01632E                     _ADC_SetChannel:
 27447                           	opt stack 21
 27448                           
 27449                           ; BSR set to: 0
 27450                           ;incstack = 0
 27451                           ;ADC_SetChannel@pChannel stored from wreg
 27452  01632E  0100               	movlb	0	; () banked
 27453  016330  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 27454                           
 27455                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 27456  016332  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 27457  016336  0100               	movlb	0	; () banked
 27458  016338  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 27459  01633A  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 27460  01633C  50C2               	movf	4034,w,c	;volatile
 27461  01633E  0100               	movlb	0	; () banked
 27462  016340  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 27463  016342  0BC3               	andlw	-61
 27464  016344  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 27465  016346  6EC2               	movwf	4034,c	;volatile
 27466                           
 27467                           ; BSR set to: 0
 27468  016348  0012               	return		;funcret
 27469  01634A                     __end_of_ADC_SetChannel:
 27470                           	opt stack 0
 27471                           tosu	equ	0xFFF
 27472                           tosh	equ	0xFFE
 27473                           tosl	equ	0xFFD
 27474                           pclath	equ	0xFFA
 27475                           tblptru	equ	0xFF8
 27476                           tblptrh	equ	0xFF7
 27477                           tblptrl	equ	0xFF6
 27478                           tablat	equ	0xFF5
 27479                           prodh	equ	0xFF4
 27480                           prodl	equ	0xFF3
 27481                           intcon	equ	0xFF2
 27482                           indf0	equ	0xFEF
 27483                           postinc0	equ	0xFEE
 27484                           fsr0h	equ	0xFEA
 27485                           fsr0l	equ	0xFE9
 27486                           wreg	equ	0xFE8
 27487                           indf1	equ	0xFE7
 27488                           postdec1	equ	0xFE5
 27489                           fsr1h	equ	0xFE2
 27490                           fsr1l	equ	0xFE1
 27491                           indf2	equ	0xFDF
 27492                           postinc2	equ	0xFDE
 27493                           postdec2	equ	0xFDD
 27494                           plusw2	equ	0xFDB
 27495                           fsr2h	equ	0xFDA
 27496                           fsr2l	equ	0xFD9
 27497                           status	equ	0xFD8
 27498                           
 27499 ;; *************** function _ADC_ConversionTime *****************
 27500 ;; Defined at:
 27501 ;;		line 199 in file "Library/ADC.c"
 27502 ;; Parameters:    Size  Location     Type
 27503 ;;  pCount          1    wreg     unsigned char 
 27504 ;; Auto vars:     Size  Location     Type
 27505 ;;  pCount          1    1[BANK0 ] unsigned char 
 27506 ;; Return value:  Size  Location     Type
 27507 ;;                  1    wreg      void 
 27508 ;; Registers used:
 27509 ;;		wreg, status,2, status,0
 27510 ;; Tracked objects:
 27511 ;;		On entry : 0/0
 27512 ;;		On exit  : 0/0
 27513 ;;		Unchanged: 0/0
 27514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27518 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27519 ;;Total ram usage:        2 bytes
 27520 ;; Hardware stack levels used:    1
 27521 ;; Hardware stack levels required when called:    7
 27522 ;; This function calls:
 27523 ;;		Nothing
 27524 ;; This function is called by:
 27525 ;;		_ADC_Init
 27526 ;; This function uses a non-reentrant model
 27527 ;;
 27528                           
 27529                           	psect	text142
 27530  015AE8                     __ptext142:
 27531                           	opt stack 0
 27532  015AE8                     _ADC_ConversionTime:
 27533                           	opt stack 21
 27534                           
 27535                           ; BSR set to: 0
 27536                           ;incstack = 0
 27537                           ;ADC_ConversionTime@pCount stored from wreg
 27538  015AE8  0100               	movlb	0	; () banked
 27539  015AEA  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 27540                           
 27541                           ;ADC.c: 201: if (pCount == 10)
 27542  015AEC  0E0A               	movlw	10
 27543  015AEE  0100               	movlb	0	; () banked
 27544  015AF0  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 27545  015AF2  B4D8               	btfsc	status,2,c
 27546  015AF4  D00A               	goto	u9990
 27547                           
 27548                           ; BSR set to: 0
 27549                           ;ADC.c: 203: else if (pCount == 14)
 27550                           
 27551                           ; BSR set to: 0
 27552                           
 27553                           ; BSR set to: 0
 27554                           ;ADC.c: 202: pCount -= 2;
 27555  015AF6  0E0E               	movlw	14
 27556  015AF8  0100               	movlb	0	; () banked
 27557  015AFA  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 27558  015AFC  B4D8               	btfsc	status,2,c
 27559  015AFE  D005               	goto	u9990
 27560                           
 27561                           ; BSR set to: 0
 27562                           ;ADC.c: 205: else if (pCount == 18)
 27563                           
 27564                           ; BSR set to: 0
 27565                           
 27566                           ; BSR set to: 0
 27567                           ;ADC.c: 204: pCount -= 2;
 27568  015B00  0E12               	movlw	18
 27569  015B02  0100               	movlb	0	; () banked
 27570  015B04  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 27571  015B06  A4D8               	btfss	status,2,c
 27572  015B08  D003               	goto	l1313
 27573  015B0A                     u9990:
 27574                           
 27575                           ; BSR set to: 0
 27576                           ;ADC.c: 206: pCount -= 2;
 27577  015B0A  0E02               	movlw	2
 27578  015B0C  0100               	movlb	0	; () banked
 27579  015B0E  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 27580  015B10                     l1313:
 27581                           
 27582                           ; BSR set to: 0
 27583                           ;ADC.c: 208: pCount <<= 1;
 27584                           
 27585                           ; BSR set to: 0
 27586                           
 27587                           ; BSR set to: 0
 27588  015B10  0100               	movlb	0	; () banked
 27589  015B12  90D8               	bcf	status,0,c
 27590  015B14  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 27591                           
 27592                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 27593  015B16  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 27594  015B1A  0100               	movlb	0	; () banked
 27595  015B1C  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27596  015B1E  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27597  015B20  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27598  015B22  50C1               	movf	4033,w,c	;volatile
 27599  015B24  0100               	movlb	0	; () banked
 27600  015B26  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 27601  015B28  0BC7               	andlw	-57
 27602  015B2A  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 27603  015B2C  6EC1               	movwf	4033,c	;volatile
 27604                           
 27605                           ; BSR set to: 0
 27606  015B2E  0012               	return		;funcret
 27607  015B30                     __end_of_ADC_ConversionTime:
 27608                           	opt stack 0
 27609                           tosu	equ	0xFFF
 27610                           tosh	equ	0xFFE
 27611                           tosl	equ	0xFFD
 27612                           pclath	equ	0xFFA
 27613                           tblptru	equ	0xFF8
 27614                           tblptrh	equ	0xFF7
 27615                           tblptrl	equ	0xFF6
 27616                           tablat	equ	0xFF5
 27617                           prodh	equ	0xFF4
 27618                           prodl	equ	0xFF3
 27619                           intcon	equ	0xFF2
 27620                           indf0	equ	0xFEF
 27621                           postinc0	equ	0xFEE
 27622                           fsr0h	equ	0xFEA
 27623                           fsr0l	equ	0xFE9
 27624                           wreg	equ	0xFE8
 27625                           indf1	equ	0xFE7
 27626                           postdec1	equ	0xFE5
 27627                           fsr1h	equ	0xFE2
 27628                           fsr1l	equ	0xFE1
 27629                           indf2	equ	0xFDF
 27630                           postinc2	equ	0xFDE
 27631                           postdec2	equ	0xFDD
 27632                           plusw2	equ	0xFDB
 27633                           fsr2h	equ	0xFDA
 27634                           fsr2l	equ	0xFD9
 27635                           status	equ	0xFD8
 27636                           
 27637 ;; *************** function _ADC_ClockDivision *****************
 27638 ;; Defined at:
 27639 ;;		line 159 in file "Library/ADC.c"
 27640 ;; Parameters:    Size  Location     Type
 27641 ;;  pDivide         1    wreg     unsigned char 
 27642 ;; Auto vars:     Size  Location     Type
 27643 ;;  pDivide         1    0[BANK0 ] unsigned char 
 27644 ;;  unfound         1    2[BANK0 ] unsigned char 
 27645 ;;  reg             1    1[BANK0 ] unsigned char 
 27646 ;; Return value:  Size  Location     Type
 27647 ;;                  1    wreg      void 
 27648 ;; Registers used:
 27649 ;;		wreg, status,2, status,0
 27650 ;; Tracked objects:
 27651 ;;		On entry : 0/0
 27652 ;;		On exit  : 0/0
 27653 ;;		Unchanged: 0/0
 27654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27656 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27658 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27659 ;;Total ram usage:        3 bytes
 27660 ;; Hardware stack levels used:    1
 27661 ;; Hardware stack levels required when called:    7
 27662 ;; This function calls:
 27663 ;;		Nothing
 27664 ;; This function is called by:
 27665 ;;		_ADC_Init
 27666 ;; This function uses a non-reentrant model
 27667 ;;
 27668                           
 27669                           	psect	text143
 27670  014CF6                     __ptext143:
 27671                           	opt stack 0
 27672  014CF6                     _ADC_ClockDivision:
 27673                           	opt stack 21
 27674                           
 27675                           ; BSR set to: 0
 27676                           ;incstack = 0
 27677                           ;ADC_ClockDivision@pDivide stored from wreg
 27678  014CF6  0100               	movlb	0	; () banked
 27679  014CF8  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 27680                           
 27681                           ;ADC.c: 161: UINT8 reg = 0;
 27682  014CFA  0E00               	movlw	0
 27683  014CFC  0100               	movlb	0	; () banked
 27684  014CFE  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 27685                           
 27686                           ;ADC.c: 162: bool unfound = 1;
 27687  014D00  0E01               	movlw	1
 27688  014D02  D002               	goto	L15
 27689  014D04                     
 27690                           ; BSR set to: 0
 27691                           ;ADC.c: 167: reg = 0;
 27692                           
 27693                           ; BSR set to: 0
 27694  014D04  0E00               	movlw	0
 27695  014D06  D00C               	goto	L20
 27696  014D08                     L15:
 27697  014D08  0100               	movlb	0	; () banked
 27698  014D0A  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 27699                           
 27700                           ;ADC.c: 169: break;
 27701  014D0C  D02D               	goto	l1296
 27702  014D0E                     
 27703                           ; BSR set to: 0
 27704                           ;ADC.c: 171: reg = 0b100;
 27705                           
 27706                           ; BSR set to: 0
 27707  014D0E  0E04               	movlw	4
 27708  014D10  D007               	goto	L20
 27709  014D12                     
 27710                           ; BSR set to: 0
 27711                           ;ADC.c: 175: reg = 0b001;
 27712                           
 27713                           ; BSR set to: 0
 27714  014D12  0E01               	movlw	1
 27715  014D14  D005               	goto	L20
 27716  014D16                     
 27717                           ; BSR set to: 0
 27718                           ;ADC.c: 179: reg = 0b101;
 27719                           
 27720                           ; BSR set to: 0
 27721  014D16  0E05               	movlw	5
 27722  014D18  D003               	goto	L20
 27723  014D1A                     
 27724                           ; BSR set to: 0
 27725                           ;ADC.c: 183: reg = 0b010;
 27726                           
 27727                           ; BSR set to: 0
 27728  014D1A  0E02               	movlw	2
 27729  014D1C  D001               	goto	L20
 27730  014D1E                     
 27731                           ; BSR set to: 0
 27732                           ;ADC.c: 187: reg = 0b110;
 27733                           
 27734                           ; BSR set to: 0
 27735  014D1E  0E06               	movlw	6
 27736  014D20                     L20:
 27737  014D20  0100               	movlb	0	; () banked
 27738  014D22  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 27739                           
 27740                           ;ADC.c: 188: unfound = 0;
 27741  014D24  0E00               	movlw	0
 27742  014D26  D7F0               	goto	L15
 27743  014D28                     
 27744                           ; BSR set to: 0
 27745                           ;ADC.c: 191: if (pDivide > 2)
 27746                           
 27747                           ; BSR set to: 0
 27748  014D28  0E02               	movlw	2
 27749  014D2A  0100               	movlb	0	; () banked
 27750  014D2C  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 27751  014D2E  D003               	goto	l1303
 27752                           
 27753                           ; BSR set to: 0
 27754                           ;ADC.c: 192: pDivide --;
 27755  014D30  0100               	movlb	0	; () banked
 27756  014D32  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 27757  014D34  D019               	goto	l1296
 27758  014D36                     l1303:
 27759                           
 27760                           ; BSR set to: 0
 27761                           ;ADC.c: 193: else
 27762                           ;ADC.c: 194: pDivide = 2;
 27763                           
 27764                           ; BSR set to: 0
 27765  014D36  0E02               	movlw	2
 27766  014D38  0100               	movlb	0	; () banked
 27767  014D3A  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 27768                           
 27769                           ; BSR set to: 0
 27770                           ;ADC.c: 195: };
 27771  014D3C  D015               	goto	l1296
 27772  014D3E                     
 27773                           ; BSR set to: 0
 27774                           
 27775                           ; BSR set to: 0
 27776  014D3E  0100               	movlb	0	; () banked
 27777  014D40  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 27778                           
 27779                           ; Switch size 1, requested type "space"
 27780                           ; Number of cases is 6, Range of values is 2 to 64
 27781                           ; switch strategies available:
 27782                           ; Name         Instructions Cycles
 27783                           ; simple_byte           19    10 (average)
 27784                           ;	Chosen strategy is simple_byte
 27785  014D42  0A02               	xorlw	2	; case 2
 27786  014D44  B4D8               	btfsc	status,2,c
 27787  014D46  D7DE               	goto	l1295
 27788  014D48  0A06               	xorlw	6	; case 4
 27789  014D4A  B4D8               	btfsc	status,2,c
 27790  014D4C  D7E0               	goto	l1297
 27791  014D4E  0A0C               	xorlw	12	; case 8
 27792  014D50  B4D8               	btfsc	status,2,c
 27793  014D52  D7DF               	goto	l1298
 27794  014D54  0A18               	xorlw	24	; case 16
 27795  014D56  B4D8               	btfsc	status,2,c
 27796  014D58  D7DE               	goto	l1299
 27797  014D5A  0A30               	xorlw	48	; case 32
 27798  014D5C  B4D8               	btfsc	status,2,c
 27799  014D5E  D7DD               	goto	l1300
 27800  014D60  0A60               	xorlw	96	; case 64
 27801  014D62  B4D8               	btfsc	status,2,c
 27802  014D64  D7DC               	goto	l1301
 27803  014D66  D7E0               	goto	l1302
 27804  014D68                     l1296:
 27805                           
 27806                           ; BSR set to: 0
 27807                           
 27808                           ; BSR set to: 0
 27809                           
 27810                           ; BSR set to: 0
 27811  014D68  0100               	movlb	0	; () banked
 27812  014D6A  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 27813  014D6C  0100               	movlb	0	; () banked
 27814  014D6E  A4D8               	btfss	status,2,c
 27815  014D70  D7E6               	goto	l1294
 27816                           
 27817                           ; BSR set to: 0
 27818                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 27819                           
 27820                           ; BSR set to: 0
 27821  014D72  50C1               	movf	4033,w,c	;volatile
 27822  014D74  0100               	movlb	0	; () banked
 27823  014D76  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27824  014D78  0BF8               	andlw	-8
 27825  014D7A  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27826  014D7C  6EC1               	movwf	4033,c	;volatile
 27827                           
 27828                           ; BSR set to: 0
 27829  014D7E  0012               	return		;funcret
 27830  014D80                     __end_of_ADC_ClockDivision:
 27831                           	opt stack 0
 27832                           tosu	equ	0xFFF
 27833                           tosh	equ	0xFFE
 27834                           tosl	equ	0xFFD
 27835                           pclath	equ	0xFFA
 27836                           tblptru	equ	0xFF8
 27837                           tblptrh	equ	0xFF7
 27838                           tblptrl	equ	0xFF6
 27839                           tablat	equ	0xFF5
 27840                           prodh	equ	0xFF4
 27841                           prodl	equ	0xFF3
 27842                           intcon	equ	0xFF2
 27843                           indf0	equ	0xFEF
 27844                           postinc0	equ	0xFEE
 27845                           fsr0h	equ	0xFEA
 27846                           fsr0l	equ	0xFE9
 27847                           wreg	equ	0xFE8
 27848                           indf1	equ	0xFE7
 27849                           postdec1	equ	0xFE5
 27850                           fsr1h	equ	0xFE2
 27851                           fsr1l	equ	0xFE1
 27852                           indf2	equ	0xFDF
 27853                           postinc2	equ	0xFDE
 27854                           postdec2	equ	0xFDD
 27855                           plusw2	equ	0xFDB
 27856                           fsr2h	equ	0xFDA
 27857                           fsr2l	equ	0xFD9
 27858                           status	equ	0xFD8
 27859                           
 27860 ;; *************** function _ADC_Calibrate *****************
 27861 ;; Defined at:
 27862 ;;		line 63 in file "Library/ADC.c"
 27863 ;; Parameters:    Size  Location     Type
 27864 ;;		None
 27865 ;; Auto vars:     Size  Location     Type
 27866 ;;		None
 27867 ;; Return value:  Size  Location     Type
 27868 ;;                  1    wreg      void 
 27869 ;; Registers used:
 27870 ;;		cstack
 27871 ;; Tracked objects:
 27872 ;;		On entry : 0/0
 27873 ;;		On exit  : 0/0
 27874 ;;		Unchanged: 0/0
 27875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27880 ;;Total ram usage:        0 bytes
 27881 ;; Hardware stack levels used:    1
 27882 ;; Hardware stack levels required when called:    8
 27883 ;; This function calls:
 27884 ;;		_ADC_Off
 27885 ;;		_ADC_On
 27886 ;; This function is called by:
 27887 ;;		_ADC_Init
 27888 ;; This function uses a non-reentrant model
 27889 ;;
 27890                           
 27891                           	psect	text144
 27892  016438                     __ptext144:
 27893                           	opt stack 0
 27894  016438                     _ADC_Calibrate:
 27895                           	opt stack 20
 27896                           
 27897                           ;ADC.c: 65: ADC_On();
 27898                           
 27899                           ; BSR set to: 0
 27900                           ;incstack = 0
 27901  016438  ECAB  F0B2         	call	_ADC_On	;wreg free
 27902                           
 27903                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 27904  01643C  8CC1               	bsf	4033,6,c	;volatile
 27905                           
 27906                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 27907  01643E  82C2               	bsf	4034,1,c	;volatile
 27908  016440  B2C2               	btfsc	4034,1,c	;volatile
 27909  016442  D7FE               	goto	l1254
 27910                           
 27911                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 27912  016444  9CC1               	bcf	4033,6,c	;volatile
 27913                           
 27914                           ;ADC.c: 73: ADC_Off();
 27915  016446  EC9A  F0B2         	call	_ADC_Off	;wreg free
 27916  01644A  0012               	return		;funcret
 27917  01644C                     __end_of_ADC_Calibrate:
 27918                           	opt stack 0
 27919                           tosu	equ	0xFFF
 27920                           tosh	equ	0xFFE
 27921                           tosl	equ	0xFFD
 27922                           pclath	equ	0xFFA
 27923                           tblptru	equ	0xFF8
 27924                           tblptrh	equ	0xFF7
 27925                           tblptrl	equ	0xFF6
 27926                           tablat	equ	0xFF5
 27927                           prodh	equ	0xFF4
 27928                           prodl	equ	0xFF3
 27929                           intcon	equ	0xFF2
 27930                           indf0	equ	0xFEF
 27931                           postinc0	equ	0xFEE
 27932                           fsr0h	equ	0xFEA
 27933                           fsr0l	equ	0xFE9
 27934                           wreg	equ	0xFE8
 27935                           indf1	equ	0xFE7
 27936                           postdec1	equ	0xFE5
 27937                           fsr1h	equ	0xFE2
 27938                           fsr1l	equ	0xFE1
 27939                           indf2	equ	0xFDF
 27940                           postinc2	equ	0xFDE
 27941                           postdec2	equ	0xFDD
 27942                           plusw2	equ	0xFDB
 27943                           fsr2h	equ	0xFDA
 27944                           fsr2l	equ	0xFD9
 27945                           status	equ	0xFD8
 27946                           
 27947 ;; *************** function _ADC_On *****************
 27948 ;; Defined at:
 27949 ;;		line 85 in file "Library/ADC.c"
 27950 ;; Parameters:    Size  Location     Type
 27951 ;;		None
 27952 ;; Auto vars:     Size  Location     Type
 27953 ;;		None
 27954 ;; Return value:  Size  Location     Type
 27955 ;;                  1    wreg      void 
 27956 ;; Registers used:
 27957 ;;		None
 27958 ;; Tracked objects:
 27959 ;;		On entry : 0/0
 27960 ;;		On exit  : 0/0
 27961 ;;		Unchanged: 0/0
 27962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27967 ;;Total ram usage:        0 bytes
 27968 ;; Hardware stack levels used:    1
 27969 ;; Hardware stack levels required when called:    7
 27970 ;; This function calls:
 27971 ;;		Nothing
 27972 ;; This function is called by:
 27973 ;;		_ADC_Calibrate
 27974 ;;		_ADC_Start
 27975 ;;		_ADC_ISR
 27976 ;;		_ADC_Sample
 27977 ;; This function uses a non-reentrant model
 27978 ;;
 27979                           
 27980                           	psect	text145
 27981  016556                     __ptext145:
 27982                           	opt stack 0
 27983  016556                     _ADC_On:
 27984                           	opt stack 21
 27985                           
 27986                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 27987                           
 27988                           ;incstack = 0
 27989  016556  80C2               	bsf	4034,0,c	;volatile
 27990                           
 27991                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 27992  016558  9C9E               	bcf	3998,6,c	;volatile
 27993  01655A  0012               	return		;funcret
 27994  01655C                     __end_of_ADC_On:
 27995                           	opt stack 0
 27996                           tosu	equ	0xFFF
 27997                           tosh	equ	0xFFE
 27998                           tosl	equ	0xFFD
 27999                           pclath	equ	0xFFA
 28000                           tblptru	equ	0xFF8
 28001                           tblptrh	equ	0xFF7
 28002                           tblptrl	equ	0xFF6
 28003                           tablat	equ	0xFF5
 28004                           prodh	equ	0xFF4
 28005                           prodl	equ	0xFF3
 28006                           intcon	equ	0xFF2
 28007                           indf0	equ	0xFEF
 28008                           postinc0	equ	0xFEE
 28009                           fsr0h	equ	0xFEA
 28010                           fsr0l	equ	0xFE9
 28011                           wreg	equ	0xFE8
 28012                           indf1	equ	0xFE7
 28013                           postdec1	equ	0xFE5
 28014                           fsr1h	equ	0xFE2
 28015                           fsr1l	equ	0xFE1
 28016                           indf2	equ	0xFDF
 28017                           postinc2	equ	0xFDE
 28018                           postdec2	equ	0xFDD
 28019                           plusw2	equ	0xFDB
 28020                           fsr2h	equ	0xFDA
 28021                           fsr2l	equ	0xFD9
 28022                           status	equ	0xFD8
 28023                           
 28024 ;; *************** function _ADC_Off *****************
 28025 ;; Defined at:
 28026 ;;		line 94 in file "Library/ADC.c"
 28027 ;; Parameters:    Size  Location     Type
 28028 ;;		None
 28029 ;; Auto vars:     Size  Location     Type
 28030 ;;		None
 28031 ;; Return value:  Size  Location     Type
 28032 ;;                  1    wreg      void 
 28033 ;; Registers used:
 28034 ;;		None
 28035 ;; Tracked objects:
 28036 ;;		On entry : 0/0
 28037 ;;		On exit  : 0/0
 28038 ;;		Unchanged: 0/0
 28039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28044 ;;Total ram usage:        0 bytes
 28045 ;; Hardware stack levels used:    1
 28046 ;; Hardware stack levels required when called:    7
 28047 ;; This function calls:
 28048 ;;		Nothing
 28049 ;; This function is called by:
 28050 ;;		_ADC_Calibrate
 28051 ;;		_ADC_Start
 28052 ;;		_ADC_ISR
 28053 ;;		_ADC_Sample
 28054 ;; This function uses a non-reentrant model
 28055 ;;
 28056                           
 28057                           	psect	text146
 28058  016534                     __ptext146:
 28059                           	opt stack 0
 28060  016534                     _ADC_Off:
 28061                           	opt stack 21
 28062                           
 28063                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 28064                           
 28065                           ;incstack = 0
 28066  016534  90C2               	bcf	4034,0,c	;volatile
 28067                           
 28068                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 28069  016536  9C9E               	bcf	3998,6,c	;volatile
 28070                           
 28071                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 28072  016538  9C9D               	bcf	3997,6,c	;volatile
 28073  01653A  0012               	return		;funcret
 28074  01653C                     __end_of_ADC_Off:
 28075                           	opt stack 0
 28076                           tosu	equ	0xFFF
 28077                           tosh	equ	0xFFE
 28078                           tosl	equ	0xFFD
 28079                           pclath	equ	0xFFA
 28080                           tblptru	equ	0xFF8
 28081                           tblptrh	equ	0xFF7
 28082                           tblptrl	equ	0xFF6
 28083                           tablat	equ	0xFF5
 28084                           prodh	equ	0xFF4
 28085                           prodl	equ	0xFF3
 28086                           intcon	equ	0xFF2
 28087                           indf0	equ	0xFEF
 28088                           postinc0	equ	0xFEE
 28089                           fsr0h	equ	0xFEA
 28090                           fsr0l	equ	0xFE9
 28091                           wreg	equ	0xFE8
 28092                           indf1	equ	0xFE7
 28093                           postdec1	equ	0xFE5
 28094                           fsr1h	equ	0xFE2
 28095                           fsr1l	equ	0xFE1
 28096                           indf2	equ	0xFDF
 28097                           postinc2	equ	0xFDE
 28098                           postdec2	equ	0xFDD
 28099                           plusw2	equ	0xFDB
 28100                           fsr2h	equ	0xFDA
 28101                           fsr2l	equ	0xFD9
 28102                           status	equ	0xFD8
 28103                           
 28104 ;; *************** function _getMode *****************
 28105 ;; Defined at:
 28106 ;;		line 102 in file "main.c"
 28107 ;; Parameters:    Size  Location     Type
 28108 ;;		None
 28109 ;; Auto vars:     Size  Location     Type
 28110 ;;		None
 28111 ;; Return value:  Size  Location     Type
 28112 ;;                  1    wreg      void 
 28113 ;; Registers used:
 28114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 28115 ;; Tracked objects:
 28116 ;;		On entry : 0/0
 28117 ;;		On exit  : 0/0
 28118 ;;		Unchanged: 0/0
 28119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28124 ;;Total ram usage:        0 bytes
 28125 ;; Hardware stack levels used:    1
 28126 ;; Hardware stack levels required when called:    9
 28127 ;; This function calls:
 28128 ;;		_HMI_DIPSwitch
 28129 ;;		_HMI_DownSwitch
 28130 ;;		_HMI_LeftSwitch
 28131 ;;		_HMI_RightSwitch
 28132 ;;		_HMI_UpSwitch
 28133 ;;		_MXK_DIPSwitch
 28134 ;;		_MXK_TestButton
 28135 ;; This function is called by:
 28136 ;;		_main
 28137 ;; This function uses a non-reentrant model
 28138 ;;
 28139                           
 28140                           	psect	text147
 28141  0140D2                     __ptext147:
 28142                           	opt stack 0
 28143  0140D2                     _getMode:
 28144                           	opt stack 21
 28145                           
 28146                           ;main.c: 103: mode = 0;
 28147                           
 28148                           ;incstack = 0
 28149  0140D2  0E00               	movlw	0
 28150  0140D4  0103               	movlb	3	; () banked
 28151  0140D6  6F24               	movwf	(_mode+1)& (0+255),b
 28152  0140D8  0E00               	movlw	0
 28153  0140DA  6F23               	movwf	_mode& (0+255),b
 28154                           
 28155                           ; BSR set to: 3
 28156                           ;main.c: 104: if (HMIBoard.mUp.mGetState()) {
 28157  0140DC  EE23  F04E         	lfsr	2,_HMIBoard+35
 28158  0140E0  D801               	call	u11478
 28159  0140E2  D00A               	goto	u11479
 28160  0140E4                     u11478:
 28161  0140E4  0005               	push	
 28162  0140E6  6EFA               	movwf	pclath,c
 28163  0140E8  50DE               	movf	postinc2,w,c
 28164  0140EA  6EFD               	movwf	tosl,c
 28165  0140EC  50DE               	movf	postinc2,w,c
 28166  0140EE  6EFE               	movwf	tosh,c
 28167  0140F0  50DE               	movf	postinc2,w,c
 28168  0140F2  6EFF               	movwf	tosu,c
 28169  0140F4  50FA               	movf	pclath,w,c
 28170  0140F6  0012               	return		;indir
 28171  0140F8                     u11479:
 28172  0140F8  0900               	iorlw	0
 28173  0140FA  B4D8               	btfsc	status,2,c
 28174  0140FC  D005               	goto	l2304
 28175                           
 28176                           ;main.c: 105: mode = 1;
 28177  0140FE  0E00               	movlw	0
 28178  014100  0103               	movlb	3	; () banked
 28179  014102  6F24               	movwf	(_mode+1)& (0+255),b
 28180  014104  0E01               	movlw	1
 28181  014106  6F23               	movwf	_mode& (0+255),b
 28182  014108                     l2304:
 28183                           
 28184                           ;main.c: 106: }
 28185                           ;main.c: 107: if (HMIBoard.mRight.mGetState()) {
 28186                           
 28187                           ; BSR set to: 3
 28188  014108  EE23  F03A         	lfsr	2,_HMIBoard+15
 28189  01410C  D801               	call	u11498
 28190  01410E  D00A               	goto	u11499
 28191  014110                     u11498:
 28192  014110  0005               	push	
 28193  014112  6EFA               	movwf	pclath,c
 28194  014114  50DE               	movf	postinc2,w,c
 28195  014116  6EFD               	movwf	tosl,c
 28196  014118  50DE               	movf	postinc2,w,c
 28197  01411A  6EFE               	movwf	tosh,c
 28198  01411C  50DE               	movf	postinc2,w,c
 28199  01411E  6EFF               	movwf	tosu,c
 28200  014120  50FA               	movf	pclath,w,c
 28201  014122  0012               	return		;indir
 28202  014124                     u11499:
 28203  014124  0900               	iorlw	0
 28204  014126  B4D8               	btfsc	status,2,c
 28205  014128  D005               	goto	l2305
 28206                           
 28207                           ;main.c: 108: mode = 2;
 28208  01412A  0E00               	movlw	0
 28209  01412C  0103               	movlb	3	; () banked
 28210  01412E  6F24               	movwf	(_mode+1)& (0+255),b
 28211  014130  0E02               	movlw	2
 28212  014132  6F23               	movwf	_mode& (0+255),b
 28213  014134                     l2305:
 28214                           
 28215                           ;main.c: 109: }
 28216                           ;main.c: 110: if (HMIBoard.mDown.mGetState()) {
 28217                           
 28218                           ; BSR set to: 3
 28219  014134  EE23  F058         	lfsr	2,_HMIBoard+45
 28220  014138  D801               	call	u11518
 28221  01413A  D00A               	goto	u11519
 28222  01413C                     u11518:
 28223  01413C  0005               	push	
 28224  01413E  6EFA               	movwf	pclath,c
 28225  014140  50DE               	movf	postinc2,w,c
 28226  014142  6EFD               	movwf	tosl,c
 28227  014144  50DE               	movf	postinc2,w,c
 28228  014146  6EFE               	movwf	tosh,c
 28229  014148  50DE               	movf	postinc2,w,c
 28230  01414A  6EFF               	movwf	tosu,c
 28231  01414C  50FA               	movf	pclath,w,c
 28232  01414E  0012               	return		;indir
 28233  014150                     u11519:
 28234  014150  0900               	iorlw	0
 28235  014152  B4D8               	btfsc	status,2,c
 28236  014154  D005               	goto	l2306
 28237                           
 28238                           ;main.c: 111: mode = 3;
 28239  014156  0E00               	movlw	0
 28240  014158  0103               	movlb	3	; () banked
 28241  01415A  6F24               	movwf	(_mode+1)& (0+255),b
 28242  01415C  0E03               	movlw	3
 28243  01415E  6F23               	movwf	_mode& (0+255),b
 28244  014160                     l2306:
 28245                           
 28246                           ;main.c: 112: }
 28247                           ;main.c: 113: if (HMIBoard.mLeft.mGetState()) {
 28248                           
 28249                           ; BSR set to: 3
 28250  014160  EE23  F044         	lfsr	2,_HMIBoard+25
 28251  014164  D801               	call	u11538
 28252  014166  D00A               	goto	u11539
 28253  014168                     u11538:
 28254  014168  0005               	push	
 28255  01416A  6EFA               	movwf	pclath,c
 28256  01416C  50DE               	movf	postinc2,w,c
 28257  01416E  6EFD               	movwf	tosl,c
 28258  014170  50DE               	movf	postinc2,w,c
 28259  014172  6EFE               	movwf	tosh,c
 28260  014174  50DE               	movf	postinc2,w,c
 28261  014176  6EFF               	movwf	tosu,c
 28262  014178  50FA               	movf	pclath,w,c
 28263  01417A  0012               	return		;indir
 28264  01417C                     u11539:
 28265  01417C  0900               	iorlw	0
 28266  01417E  B4D8               	btfsc	status,2,c
 28267  014180  0012               	return	
 28268                           
 28269                           ;main.c: 114: mode = 4;
 28270  014182  0E00               	movlw	0
 28271  014184  0103               	movlb	3	; () banked
 28272  014186  6F24               	movwf	(_mode+1)& (0+255),b
 28273  014188  0E04               	movlw	4
 28274  01418A  6F23               	movwf	_mode& (0+255),b
 28275  01418C  0012               	return	
 28276  01418E                     __end_of_getMode:
 28277                           	opt stack 0
 28278                           tosu	equ	0xFFF
 28279                           tosh	equ	0xFFE
 28280                           tosl	equ	0xFFD
 28281                           pclath	equ	0xFFA
 28282                           tblptru	equ	0xFF8
 28283                           tblptrh	equ	0xFF7
 28284                           tblptrl	equ	0xFF6
 28285                           tablat	equ	0xFF5
 28286                           prodh	equ	0xFF4
 28287                           prodl	equ	0xFF3
 28288                           intcon	equ	0xFF2
 28289                           indf0	equ	0xFEF
 28290                           postinc0	equ	0xFEE
 28291                           fsr0h	equ	0xFEA
 28292                           fsr0l	equ	0xFE9
 28293                           wreg	equ	0xFE8
 28294                           indf1	equ	0xFE7
 28295                           postdec1	equ	0xFE5
 28296                           fsr1h	equ	0xFE2
 28297                           fsr1l	equ	0xFE1
 28298                           indf2	equ	0xFDF
 28299                           postinc2	equ	0xFDE
 28300                           postdec2	equ	0xFDD
 28301                           plusw2	equ	0xFDB
 28302                           fsr2h	equ	0xFDA
 28303                           fsr2l	equ	0xFD9
 28304                           status	equ	0xFD8
 28305                           
 28306 ;; *************** function _MXK_DIPSwitch *****************
 28307 ;; Defined at:
 28308 ;;		line 24 in file "Library/MXK.c"
 28309 ;; Parameters:    Size  Location     Type
 28310 ;;		None
 28311 ;; Auto vars:     Size  Location     Type
 28312 ;;		None
 28313 ;; Return value:  Size  Location     Type
 28314 ;;                  1    wreg      unsigned char 
 28315 ;; Registers used:
 28316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28317 ;; Tracked objects:
 28318 ;;		On entry : 0/0
 28319 ;;		On exit  : 0/0
 28320 ;;		Unchanged: 0/0
 28321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28326 ;;Total ram usage:        0 bytes
 28327 ;; Hardware stack levels used:    1
 28328 ;; Hardware stack levels required when called:    8
 28329 ;; This function calls:
 28330 ;;		_Port_GetQuad
 28331 ;; This function is called by:
 28332 ;;		_FunctInitButton
 28333 ;;		_Button_Poll
 28334 ;;		_getMode
 28335 ;; This function uses a non-reentrant model
 28336 ;;
 28337                           
 28338                           	psect	text148
 28339  01637C                     __ptext148:
 28340                           	opt stack 0
 28341  01637C                     _MXK_DIPSwitch:
 28342                           	opt stack 19
 28343                           
 28344                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 28345                           
 28346                           ;incstack = 0
 28347  01637C  0EE0               	movlw	low _PortD
 28348  01637E  0100               	movlb	0	; () banked
 28349  016380  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 28350  016382  0E00               	movlw	high _PortD
 28351  016384  0100               	movlb	0	; () banked
 28352  016386  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 28353  016388  0E00               	movlw	0
 28354  01638A  0100               	movlb	0	; () banked
 28355  01638C  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 28356  01638E  EC07  F0AD         	call	_Port_GetQuad	;wreg free
 28357  016392  0012               	return	
 28358  016394                     __end_of_MXK_DIPSwitch:
 28359                           	opt stack 0
 28360                           tosu	equ	0xFFF
 28361                           tosh	equ	0xFFE
 28362                           tosl	equ	0xFFD
 28363                           pclath	equ	0xFFA
 28364                           tblptru	equ	0xFF8
 28365                           tblptrh	equ	0xFF7
 28366                           tblptrl	equ	0xFF6
 28367                           tablat	equ	0xFF5
 28368                           prodh	equ	0xFF4
 28369                           prodl	equ	0xFF3
 28370                           intcon	equ	0xFF2
 28371                           indf0	equ	0xFEF
 28372                           postinc0	equ	0xFEE
 28373                           fsr0h	equ	0xFEA
 28374                           fsr0l	equ	0xFE9
 28375                           wreg	equ	0xFE8
 28376                           indf1	equ	0xFE7
 28377                           postdec1	equ	0xFE5
 28378                           fsr1h	equ	0xFE2
 28379                           fsr1l	equ	0xFE1
 28380                           indf2	equ	0xFDF
 28381                           postinc2	equ	0xFDE
 28382                           postdec2	equ	0xFDD
 28383                           plusw2	equ	0xFDB
 28384                           fsr2h	equ	0xFDA
 28385                           fsr2l	equ	0xFD9
 28386                           status	equ	0xFD8
 28387                           
 28388 ;; *************** function _HMI_DIPSwitch *****************
 28389 ;; Defined at:
 28390 ;;		line 47 in file "HMI.c"
 28391 ;; Parameters:    Size  Location     Type
 28392 ;;		None
 28393 ;; Auto vars:     Size  Location     Type
 28394 ;;		None
 28395 ;; Return value:  Size  Location     Type
 28396 ;;                  1    wreg      unsigned char 
 28397 ;; Registers used:
 28398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28399 ;; Tracked objects:
 28400 ;;		On entry : 0/0
 28401 ;;		On exit  : 0/0
 28402 ;;		Unchanged: 0/0
 28403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28408 ;;Total ram usage:        0 bytes
 28409 ;; Hardware stack levels used:    1
 28410 ;; Hardware stack levels required when called:    8
 28411 ;; This function calls:
 28412 ;;		_Port_GetQuad
 28413 ;; This function is called by:
 28414 ;;		_HMI_Init
 28415 ;;		_Button_Poll
 28416 ;;		_getMode
 28417 ;; This function uses a non-reentrant model
 28418 ;;
 28419                           
 28420                           	psect	text149
 28421  016394                     __ptext149:
 28422                           	opt stack 0
 28423  016394                     _HMI_DIPSwitch:
 28424                           	opt stack 19
 28425                           
 28426                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 28427                           
 28428                           ;incstack = 0
 28429  016394  0E99               	movlw	low _PortE
 28430  016396  0100               	movlb	0	; () banked
 28431  016398  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 28432  01639A  0E03               	movlw	high _PortE
 28433  01639C  0100               	movlb	0	; () banked
 28434  01639E  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 28435  0163A0  0E00               	movlw	0
 28436  0163A2  0100               	movlb	0	; () banked
 28437  0163A4  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 28438  0163A6  EC07  F0AD         	call	_Port_GetQuad	;wreg free
 28439  0163AA  0012               	return	
 28440  0163AC                     __end_of_HMI_DIPSwitch:
 28441                           	opt stack 0
 28442                           tosu	equ	0xFFF
 28443                           tosh	equ	0xFFE
 28444                           tosl	equ	0xFFD
 28445                           pclath	equ	0xFFA
 28446                           tblptru	equ	0xFF8
 28447                           tblptrh	equ	0xFF7
 28448                           tblptrl	equ	0xFF6
 28449                           tablat	equ	0xFF5
 28450                           prodh	equ	0xFF4
 28451                           prodl	equ	0xFF3
 28452                           intcon	equ	0xFF2
 28453                           indf0	equ	0xFEF
 28454                           postinc0	equ	0xFEE
 28455                           fsr0h	equ	0xFEA
 28456                           fsr0l	equ	0xFE9
 28457                           wreg	equ	0xFE8
 28458                           indf1	equ	0xFE7
 28459                           postdec1	equ	0xFE5
 28460                           fsr1h	equ	0xFE2
 28461                           fsr1l	equ	0xFE1
 28462                           indf2	equ	0xFDF
 28463                           postinc2	equ	0xFDE
 28464                           postdec2	equ	0xFDD
 28465                           plusw2	equ	0xFDB
 28466                           fsr2h	equ	0xFDA
 28467                           fsr2l	equ	0xFD9
 28468                           status	equ	0xFD8
 28469                           
 28470 ;; *************** function _HMI_DownSwitch *****************
 28471 ;; Defined at:
 28472 ;;		line 42 in file "HMI.c"
 28473 ;; Parameters:    Size  Location     Type
 28474 ;;		None
 28475 ;; Auto vars:     Size  Location     Type
 28476 ;;		None
 28477 ;; Return value:  Size  Location     Type
 28478 ;;                  1    wreg      unsigned char 
 28479 ;; Registers used:
 28480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28481 ;; Tracked objects:
 28482 ;;		On entry : 0/0
 28483 ;;		On exit  : 0/0
 28484 ;;		Unchanged: 0/0
 28485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28490 ;;Total ram usage:        0 bytes
 28491 ;; Hardware stack levels used:    1
 28492 ;; Hardware stack levels required when called:    8
 28493 ;; This function calls:
 28494 ;;		_Port_GetPin
 28495 ;; This function is called by:
 28496 ;;		_HMI_Init
 28497 ;;		_Button_Poll
 28498 ;;		_getMode
 28499 ;; This function uses a non-reentrant model
 28500 ;;
 28501                           
 28502                           	psect	text150
 28503  0163AC                     __ptext150:
 28504                           	opt stack 0
 28505  0163AC                     _HMI_DownSwitch:
 28506                           	opt stack 19
 28507                           
 28508                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 28509                           
 28510                           ;incstack = 0
 28511  0163AC  0E99               	movlw	low _PortE
 28512  0163AE  0100               	movlb	0	; () banked
 28513  0163B0  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28514  0163B2  0E03               	movlw	high _PortE
 28515  0163B4  0100               	movlb	0	; () banked
 28516  0163B6  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28517  0163B8  0E06               	movlw	6
 28518  0163BA  0100               	movlb	0	; () banked
 28519  0163BC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28520  0163BE  EC01  F0AE         	call	_Port_GetPin	;wreg free
 28521  0163C2  0012               	return	
 28522  0163C4                     __end_of_HMI_DownSwitch:
 28523                           	opt stack 0
 28524                           tosu	equ	0xFFF
 28525                           tosh	equ	0xFFE
 28526                           tosl	equ	0xFFD
 28527                           pclath	equ	0xFFA
 28528                           tblptru	equ	0xFF8
 28529                           tblptrh	equ	0xFF7
 28530                           tblptrl	equ	0xFF6
 28531                           tablat	equ	0xFF5
 28532                           prodh	equ	0xFF4
 28533                           prodl	equ	0xFF3
 28534                           intcon	equ	0xFF2
 28535                           indf0	equ	0xFEF
 28536                           postinc0	equ	0xFEE
 28537                           fsr0h	equ	0xFEA
 28538                           fsr0l	equ	0xFE9
 28539                           wreg	equ	0xFE8
 28540                           indf1	equ	0xFE7
 28541                           postdec1	equ	0xFE5
 28542                           fsr1h	equ	0xFE2
 28543                           fsr1l	equ	0xFE1
 28544                           indf2	equ	0xFDF
 28545                           postinc2	equ	0xFDE
 28546                           postdec2	equ	0xFDD
 28547                           plusw2	equ	0xFDB
 28548                           fsr2h	equ	0xFDA
 28549                           fsr2l	equ	0xFD9
 28550                           status	equ	0xFD8
 28551                           
 28552 ;; *************** function _HMI_UpSwitch *****************
 28553 ;; Defined at:
 28554 ;;		line 37 in file "HMI.c"
 28555 ;; Parameters:    Size  Location     Type
 28556 ;;		None
 28557 ;; Auto vars:     Size  Location     Type
 28558 ;;		None
 28559 ;; Return value:  Size  Location     Type
 28560 ;;                  1    wreg      unsigned char 
 28561 ;; Registers used:
 28562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28563 ;; Tracked objects:
 28564 ;;		On entry : 0/0
 28565 ;;		On exit  : 0/0
 28566 ;;		Unchanged: 0/0
 28567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28572 ;;Total ram usage:        0 bytes
 28573 ;; Hardware stack levels used:    1
 28574 ;; Hardware stack levels required when called:    8
 28575 ;; This function calls:
 28576 ;;		_Port_GetPin
 28577 ;; This function is called by:
 28578 ;;		_HMI_Init
 28579 ;;		_Button_Poll
 28580 ;;		_getMode
 28581 ;; This function uses a non-reentrant model
 28582 ;;
 28583                           
 28584                           	psect	text151
 28585  0163C4                     __ptext151:
 28586                           	opt stack 0
 28587  0163C4                     _HMI_UpSwitch:
 28588                           	opt stack 19
 28589                           
 28590                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 28591                           
 28592                           ;incstack = 0
 28593  0163C4  0E99               	movlw	low _PortE
 28594  0163C6  0100               	movlb	0	; () banked
 28595  0163C8  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28596  0163CA  0E03               	movlw	high _PortE
 28597  0163CC  0100               	movlb	0	; () banked
 28598  0163CE  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28599  0163D0  0E07               	movlw	7
 28600  0163D2  0100               	movlb	0	; () banked
 28601  0163D4  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28602  0163D6  EC01  F0AE         	call	_Port_GetPin	;wreg free
 28603  0163DA  0012               	return	
 28604  0163DC                     __end_of_HMI_UpSwitch:
 28605                           	opt stack 0
 28606                           tosu	equ	0xFFF
 28607                           tosh	equ	0xFFE
 28608                           tosl	equ	0xFFD
 28609                           pclath	equ	0xFFA
 28610                           tblptru	equ	0xFF8
 28611                           tblptrh	equ	0xFF7
 28612                           tblptrl	equ	0xFF6
 28613                           tablat	equ	0xFF5
 28614                           prodh	equ	0xFF4
 28615                           prodl	equ	0xFF3
 28616                           intcon	equ	0xFF2
 28617                           indf0	equ	0xFEF
 28618                           postinc0	equ	0xFEE
 28619                           fsr0h	equ	0xFEA
 28620                           fsr0l	equ	0xFE9
 28621                           wreg	equ	0xFE8
 28622                           indf1	equ	0xFE7
 28623                           postdec1	equ	0xFE5
 28624                           fsr1h	equ	0xFE2
 28625                           fsr1l	equ	0xFE1
 28626                           indf2	equ	0xFDF
 28627                           postinc2	equ	0xFDE
 28628                           postdec2	equ	0xFDD
 28629                           plusw2	equ	0xFDB
 28630                           fsr2h	equ	0xFDA
 28631                           fsr2l	equ	0xFD9
 28632                           status	equ	0xFD8
 28633                           
 28634 ;; *************** function _HMI_RightSwitch *****************
 28635 ;; Defined at:
 28636 ;;		line 32 in file "HMI.c"
 28637 ;; Parameters:    Size  Location     Type
 28638 ;;		None
 28639 ;; Auto vars:     Size  Location     Type
 28640 ;;		None
 28641 ;; Return value:  Size  Location     Type
 28642 ;;                  1    wreg      unsigned char 
 28643 ;; Registers used:
 28644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28645 ;; Tracked objects:
 28646 ;;		On entry : 0/0
 28647 ;;		On exit  : 0/0
 28648 ;;		Unchanged: 0/0
 28649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28654 ;;Total ram usage:        0 bytes
 28655 ;; Hardware stack levels used:    1
 28656 ;; Hardware stack levels required when called:    8
 28657 ;; This function calls:
 28658 ;;		_Port_GetPin
 28659 ;; This function is called by:
 28660 ;;		_HMI_Init
 28661 ;;		_Button_Poll
 28662 ;;		_getMode
 28663 ;; This function uses a non-reentrant model
 28664 ;;
 28665                           
 28666                           	psect	text152
 28667  0163DC                     __ptext152:
 28668                           	opt stack 0
 28669  0163DC                     _HMI_RightSwitch:
 28670                           	opt stack 19
 28671                           
 28672                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 28673                           
 28674                           ;incstack = 0
 28675  0163DC  0E99               	movlw	low _PortE
 28676  0163DE  0100               	movlb	0	; () banked
 28677  0163E0  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28678  0163E2  0E03               	movlw	high _PortE
 28679  0163E4  0100               	movlb	0	; () banked
 28680  0163E6  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28681  0163E8  0E04               	movlw	4
 28682  0163EA  0100               	movlb	0	; () banked
 28683  0163EC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28684  0163EE  EC01  F0AE         	call	_Port_GetPin	;wreg free
 28685  0163F2  0012               	return	
 28686  0163F4                     __end_of_HMI_RightSwitch:
 28687                           	opt stack 0
 28688                           tosu	equ	0xFFF
 28689                           tosh	equ	0xFFE
 28690                           tosl	equ	0xFFD
 28691                           pclath	equ	0xFFA
 28692                           tblptru	equ	0xFF8
 28693                           tblptrh	equ	0xFF7
 28694                           tblptrl	equ	0xFF6
 28695                           tablat	equ	0xFF5
 28696                           prodh	equ	0xFF4
 28697                           prodl	equ	0xFF3
 28698                           intcon	equ	0xFF2
 28699                           indf0	equ	0xFEF
 28700                           postinc0	equ	0xFEE
 28701                           fsr0h	equ	0xFEA
 28702                           fsr0l	equ	0xFE9
 28703                           wreg	equ	0xFE8
 28704                           indf1	equ	0xFE7
 28705                           postdec1	equ	0xFE5
 28706                           fsr1h	equ	0xFE2
 28707                           fsr1l	equ	0xFE1
 28708                           indf2	equ	0xFDF
 28709                           postinc2	equ	0xFDE
 28710                           postdec2	equ	0xFDD
 28711                           plusw2	equ	0xFDB
 28712                           fsr2h	equ	0xFDA
 28713                           fsr2l	equ	0xFD9
 28714                           status	equ	0xFD8
 28715                           
 28716 ;; *************** function _HMI_LeftSwitch *****************
 28717 ;; Defined at:
 28718 ;;		line 27 in file "HMI.c"
 28719 ;; Parameters:    Size  Location     Type
 28720 ;;		None
 28721 ;; Auto vars:     Size  Location     Type
 28722 ;;		None
 28723 ;; Return value:  Size  Location     Type
 28724 ;;                  1    wreg      unsigned char 
 28725 ;; Registers used:
 28726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28727 ;; Tracked objects:
 28728 ;;		On entry : 0/0
 28729 ;;		On exit  : 0/0
 28730 ;;		Unchanged: 0/0
 28731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28736 ;;Total ram usage:        0 bytes
 28737 ;; Hardware stack levels used:    1
 28738 ;; Hardware stack levels required when called:    8
 28739 ;; This function calls:
 28740 ;;		_Port_GetPin
 28741 ;; This function is called by:
 28742 ;;		_HMI_Init
 28743 ;;		_Button_Poll
 28744 ;;		_getMode
 28745 ;; This function uses a non-reentrant model
 28746 ;;
 28747                           
 28748                           	psect	text153
 28749  0163F4                     __ptext153:
 28750                           	opt stack 0
 28751  0163F4                     _HMI_LeftSwitch:
 28752                           	opt stack 19
 28753                           
 28754                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 28755                           
 28756                           ;incstack = 0
 28757  0163F4  0E99               	movlw	low _PortE
 28758  0163F6  0100               	movlb	0	; () banked
 28759  0163F8  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28760  0163FA  0E03               	movlw	high _PortE
 28761  0163FC  0100               	movlb	0	; () banked
 28762  0163FE  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28763  016400  0E05               	movlw	5
 28764  016402  0100               	movlb	0	; () banked
 28765  016404  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28766  016406  EC01  F0AE         	call	_Port_GetPin	;wreg free
 28767  01640A  0012               	return	
 28768  01640C                     __end_of_HMI_LeftSwitch:
 28769                           	opt stack 0
 28770                           tosu	equ	0xFFF
 28771                           tosh	equ	0xFFE
 28772                           tosl	equ	0xFFD
 28773                           pclath	equ	0xFFA
 28774                           tblptru	equ	0xFF8
 28775                           tblptrh	equ	0xFF7
 28776                           tblptrl	equ	0xFF6
 28777                           tablat	equ	0xFF5
 28778                           prodh	equ	0xFF4
 28779                           prodl	equ	0xFF3
 28780                           intcon	equ	0xFF2
 28781                           indf0	equ	0xFEF
 28782                           postinc0	equ	0xFEE
 28783                           fsr0h	equ	0xFEA
 28784                           fsr0l	equ	0xFE9
 28785                           wreg	equ	0xFE8
 28786                           indf1	equ	0xFE7
 28787                           postdec1	equ	0xFE5
 28788                           fsr1h	equ	0xFE2
 28789                           fsr1l	equ	0xFE1
 28790                           indf2	equ	0xFDF
 28791                           postinc2	equ	0xFDE
 28792                           postdec2	equ	0xFDD
 28793                           plusw2	equ	0xFDB
 28794                           fsr2h	equ	0xFDA
 28795                           fsr2l	equ	0xFD9
 28796                           status	equ	0xFD8
 28797                           
 28798 ;; *************** function _MXK_TestButton *****************
 28799 ;; Defined at:
 28800 ;;		line 14 in file "Library/MXK.c"
 28801 ;; Parameters:    Size  Location     Type
 28802 ;;		None
 28803 ;; Auto vars:     Size  Location     Type
 28804 ;;		None
 28805 ;; Return value:  Size  Location     Type
 28806 ;;                  1    wreg      unsigned char 
 28807 ;; Registers used:
 28808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28809 ;; Tracked objects:
 28810 ;;		On entry : 0/0
 28811 ;;		On exit  : 0/0
 28812 ;;		Unchanged: 0/0
 28813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28818 ;;Total ram usage:        0 bytes
 28819 ;; Hardware stack levels used:    1
 28820 ;; Hardware stack levels required when called:    8
 28821 ;; This function calls:
 28822 ;;		_Port_GetPin
 28823 ;; This function is called by:
 28824 ;;		_FunctInitButton
 28825 ;;		_Button_Poll
 28826 ;;		_getMode
 28827 ;; This function uses a non-reentrant model
 28828 ;;
 28829                           
 28830                           	psect	text154
 28831  01640C                     __ptext154:
 28832                           	opt stack 0
 28833  01640C                     _MXK_TestButton:
 28834                           	opt stack 19
 28835                           
 28836                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 28837                           
 28838                           ;incstack = 0
 28839  01640C  0EA3               	movlw	low _PortB
 28840  01640E  0100               	movlb	0	; () banked
 28841  016410  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28842  016412  0E03               	movlw	high _PortB
 28843  016414  0100               	movlb	0	; () banked
 28844  016416  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28845  016418  0E04               	movlw	4
 28846  01641A  0100               	movlb	0	; () banked
 28847  01641C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28848  01641E  EC01  F0AE         	call	_Port_GetPin	;wreg free
 28849  016422  0012               	return	
 28850  016424                     __end_of_MXK_TestButton:
 28851                           	opt stack 0
 28852                           tosu	equ	0xFFF
 28853                           tosh	equ	0xFFE
 28854                           tosl	equ	0xFFD
 28855                           pclath	equ	0xFFA
 28856                           tblptru	equ	0xFF8
 28857                           tblptrh	equ	0xFF7
 28858                           tblptrl	equ	0xFF6
 28859                           tablat	equ	0xFF5
 28860                           prodh	equ	0xFF4
 28861                           prodl	equ	0xFF3
 28862                           intcon	equ	0xFF2
 28863                           indf0	equ	0xFEF
 28864                           postinc0	equ	0xFEE
 28865                           fsr0h	equ	0xFEA
 28866                           fsr0l	equ	0xFE9
 28867                           wreg	equ	0xFE8
 28868                           indf1	equ	0xFE7
 28869                           postdec1	equ	0xFE5
 28870                           fsr1h	equ	0xFE2
 28871                           fsr1l	equ	0xFE1
 28872                           indf2	equ	0xFDF
 28873                           postinc2	equ	0xFDE
 28874                           postdec2	equ	0xFDD
 28875                           plusw2	equ	0xFDB
 28876                           fsr2h	equ	0xFDA
 28877                           fsr2l	equ	0xFD9
 28878                           status	equ	0xFD8
 28879                           
 28880 ;; *************** function _Port_GetPin *****************
 28881 ;; Defined at:
 28882 ;;		line 271 in file "Library/Port.c"
 28883 ;; Parameters:    Size  Location     Type
 28884 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 28885 ;;		 -> PortB(10), PortE(10), PortC(10), 
 28886 ;;  pPin            1    2[BANK0 ] enum E6750
 28887 ;; Auto vars:     Size  Location     Type
 28888 ;;  Output          1    5[BANK0 ] unsigned char 
 28889 ;; Return value:  Size  Location     Type
 28890 ;;                  1    wreg      unsigned char 
 28891 ;; Registers used:
 28892 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28893 ;; Tracked objects:
 28894 ;;		On entry : 0/0
 28895 ;;		On exit  : 0/0
 28896 ;;		Unchanged: 0/0
 28897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28898 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28901 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28902 ;;Total ram usage:        6 bytes
 28903 ;; Hardware stack levels used:    1
 28904 ;; Hardware stack levels required when called:    7
 28905 ;; This function calls:
 28906 ;;		Nothing
 28907 ;; This function is called by:
 28908 ;;		_Port_TogglePin
 28909 ;;		_HMI_LeftSwitch
 28910 ;;		_HMI_RightSwitch
 28911 ;;		_HMI_UpSwitch
 28912 ;;		_HMI_DownSwitch
 28913 ;;		_MXK_TestButton
 28914 ;; This function uses a non-reentrant model
 28915 ;;
 28916                           
 28917                           	psect	text155
 28918  015C02                     __ptext155:
 28919                           	opt stack 0
 28920  015C02                     _Port_GetPin:
 28921                           	opt stack 19
 28922                           
 28923                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 28924                           
 28925                           ;incstack = 0
 28926  015C02  0100               	movlb	0	; () banked
 28927  015C04  EE20 F006          	lfsr	2,6
 28928  015C08  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 28929  015C0A  26D9               	addwf	fsr2l,f,c
 28930  015C0C  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 28931  015C0E  22DA               	addwfc	fsr2h,f,c
 28932  015C10  CFDE F063          	movff	postinc2,??_Port_GetPin
 28933  015C14  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 28934  015C18  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 28935  015C1C  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 28936  015C20  50DF               	movf	indf2,w,c
 28937  015C22  0100               	movlb	0	; () banked
 28938  015C24  6F65               	movwf	Port_GetPin@Output& (0+255),b
 28939                           
 28940                           ; BSR set to: 0
 28941                           ;Port.c: 274: Output >>= (UINT8)pPin;
 28942  015C26  0100               	movlb	0	; () banked
 28943  015C28  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 28944  015C2A  0100               	movlb	0	; () banked
 28945  015C2C  6F63               	movwf	??_Port_GetPin& (0+255),b
 28946  015C2E  D003               	goto	u8730
 28947  015C30                     u8735:
 28948  015C30  0100               	movlb	0	; () banked
 28949  015C32  90D8               	bcf	status,0,c
 28950  015C34  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 28951  015C36                     u8730:
 28952  015C36  0100               	movlb	0	; () banked
 28953  015C38  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 28954  015C3A  D7FA               	goto	u8735
 28955                           
 28956                           ;Port.c: 275: Output &= 1;
 28957  015C3C  0E01               	movlw	1
 28958  015C3E  0100               	movlb	0	; () banked
 28959  015C40  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 28960                           
 28961                           ; BSR set to: 0
 28962                           ;Port.c: 276: return Output;
 28963  015C42  0100               	movlb	0	; () banked
 28964  015C44  5165               	movf	Port_GetPin@Output& (0+255),w,b
 28965  015C46  0012               	return	
 28966  015C48                     __end_of_Port_GetPin:
 28967                           	opt stack 0
 28968                           tosu	equ	0xFFF
 28969                           tosh	equ	0xFFE
 28970                           tosl	equ	0xFFD
 28971                           pclath	equ	0xFFA
 28972                           tblptru	equ	0xFF8
 28973                           tblptrh	equ	0xFF7
 28974                           tblptrl	equ	0xFF6
 28975                           tablat	equ	0xFF5
 28976                           prodh	equ	0xFF4
 28977                           prodl	equ	0xFF3
 28978                           intcon	equ	0xFF2
 28979                           indf0	equ	0xFEF
 28980                           postinc0	equ	0xFEE
 28981                           fsr0h	equ	0xFEA
 28982                           fsr0l	equ	0xFE9
 28983                           wreg	equ	0xFE8
 28984                           indf1	equ	0xFE7
 28985                           postdec1	equ	0xFE5
 28986                           fsr1h	equ	0xFE2
 28987                           fsr1l	equ	0xFE1
 28988                           indf2	equ	0xFDF
 28989                           postinc2	equ	0xFDE
 28990                           postdec2	equ	0xFDD
 28991                           plusw2	equ	0xFDB
 28992                           fsr2h	equ	0xFDA
 28993                           fsr2l	equ	0xFD9
 28994                           status	equ	0xFD8
 28995                           
 28996 ;; *************** function _Port_GetQuad *****************
 28997 ;; Defined at:
 28998 ;;		line 498 in file "Library/Port.c"
 28999 ;; Parameters:    Size  Location     Type
 29000 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 29001 ;;		 -> PortE(10), PortD(10), 
 29002 ;;  pQuad           1    2[BANK0 ] enum E6776
 29003 ;; Auto vars:     Size  Location     Type
 29004 ;;  Output          1    5[BANK0 ] unsigned char 
 29005 ;; Return value:  Size  Location     Type
 29006 ;;                  1    wreg      unsigned char 
 29007 ;; Registers used:
 29008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 29009 ;; Tracked objects:
 29010 ;;		On entry : 0/0
 29011 ;;		On exit  : 0/0
 29012 ;;		Unchanged: 0/0
 29013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29014 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29017 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29018 ;;Total ram usage:        6 bytes
 29019 ;; Hardware stack levels used:    1
 29020 ;; Hardware stack levels required when called:    7
 29021 ;; This function calls:
 29022 ;;		Nothing
 29023 ;; This function is called by:
 29024 ;;		_HMI_DIPSwitch
 29025 ;;		_MXK_DIPSwitch
 29026 ;;		_Port_ToggleQuad
 29027 ;; This function uses a non-reentrant model
 29028 ;;
 29029                           
 29030                           	psect	text156
 29031  015A0E                     __ptext156:
 29032                           	opt stack 0
 29033  015A0E                     _Port_GetQuad:
 29034                           	opt stack 19
 29035                           
 29036                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 29037                           
 29038                           ; BSR set to: 0
 29039                           ;incstack = 0
 29040  015A0E  0100               	movlb	0	; () banked
 29041  015A10  EE20 F006          	lfsr	2,6
 29042  015A14  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 29043  015A16  26D9               	addwf	fsr2l,f,c
 29044  015A18  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 29045  015A1A  22DA               	addwfc	fsr2h,f,c
 29046  015A1C  CFDE F063          	movff	postinc2,??_Port_GetQuad
 29047  015A20  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 29048  015A24  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 29049  015A28  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 29050  015A2C  50DF               	movf	indf2,w,c
 29051  015A2E  0100               	movlb	0	; () banked
 29052  015A30  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 29053                           
 29054                           ; BSR set to: 0
 29055                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 29056  015A32  0100               	movlb	0	; () banked
 29057  015A34  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 29058  015A36  0D04               	mullw	4
 29059  015A38  28F3               	incf	prodl,w,c
 29060  015A3A  0100               	movlb	0	; () banked
 29061  015A3C  6F63               	movwf	??_Port_GetQuad& (0+255),b
 29062  015A3E  D003               	goto	u9200
 29063  015A40                     u9205:
 29064  015A40  0100               	movlb	0	; () banked
 29065  015A42  90D8               	bcf	status,0,c
 29066  015A44  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 29067  015A46                     u9200:
 29068  015A46  0100               	movlb	0	; () banked
 29069  015A48  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 29070  015A4A  D7FA               	goto	u9205
 29071                           
 29072                           ;Port.c: 502: Output &= 0xF;
 29073  015A4C  0E0F               	movlw	15
 29074  015A4E  0100               	movlb	0	; () banked
 29075  015A50  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 29076                           
 29077                           ; BSR set to: 0
 29078                           ;Port.c: 503: return Output;
 29079  015A52  0100               	movlb	0	; () banked
 29080  015A54  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 29081  015A56  0012               	return	
 29082  015A58                     __end_of_Port_GetQuad:
 29083                           	opt stack 0
 29084                           tosu	equ	0xFFF
 29085                           tosh	equ	0xFFE
 29086                           tosl	equ	0xFFD
 29087                           pclath	equ	0xFFA
 29088                           tblptru	equ	0xFF8
 29089                           tblptrh	equ	0xFF7
 29090                           tblptrl	equ	0xFF6
 29091                           tablat	equ	0xFF5
 29092                           prodh	equ	0xFF4
 29093                           prodl	equ	0xFF3
 29094                           intcon	equ	0xFF2
 29095                           indf0	equ	0xFEF
 29096                           postinc0	equ	0xFEE
 29097                           fsr0h	equ	0xFEA
 29098                           fsr0l	equ	0xFE9
 29099                           wreg	equ	0xFE8
 29100                           indf1	equ	0xFE7
 29101                           postdec1	equ	0xFE5
 29102                           fsr1h	equ	0xFE2
 29103                           fsr1l	equ	0xFE1
 29104                           indf2	equ	0xFDF
 29105                           postinc2	equ	0xFDE
 29106                           postdec2	equ	0xFDD
 29107                           plusw2	equ	0xFDB
 29108                           fsr2h	equ	0xFDA
 29109                           fsr2l	equ	0xFD9
 29110                           status	equ	0xFD8
 29111                           
 29112 ;; *************** function _ISR_Function *****************
 29113 ;; Defined at:
 29114 ;;		line 38 in file "Library/ISR.c"
 29115 ;; Parameters:    Size  Location     Type
 29116 ;;		None
 29117 ;; Auto vars:     Size  Location     Type
 29118 ;;		None
 29119 ;; Return value:  Size  Location     Type
 29120 ;;                  1    wreg      void 
 29121 ;; Registers used:
 29122 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29123 ;; Tracked objects:
 29124 ;;		On entry : 0/0
 29125 ;;		On exit  : 0/0
 29126 ;;		Unchanged: 0/0
 29127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29130 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29131 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29132 ;;Total ram usage:       18 bytes
 29133 ;; Hardware stack levels used:    1
 29134 ;; Hardware stack levels required when called:    6
 29135 ;; This function calls:
 29136 ;;		_Timer0_ISR
 29137 ;; This function is called by:
 29138 ;;		Interrupt level 2
 29139 ;; This function uses a non-reentrant model
 29140 ;;
 29141                           
 29142                           	psect	intcode
 29143  001408                     __pintcode:
 29144                           	opt stack 0
 29145  001408                     _ISR_Function:
 29146                           	opt stack 13
 29147                           
 29148                           ; BSR set to: 0
 29149                           ;incstack = 0
 29150  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29151  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29152  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29153  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29154  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29155  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29156  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29157  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29158  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29159  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29160  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29161  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29162  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29163  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29164  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29165  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29166  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29167  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29168  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29169                           
 29170                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29171  001452  92F2               	bcf	intcon,1,c	;volatile
 29172                           
 29173                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29174  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29175  001456  AAF2               	btfss	intcon,5,c	;volatile
 29176  001458  D002               	goto	i2l1590
 29177                           
 29178                           ;ISR.c: 68: Timer0_ISR();
 29179  00145A  EC43  F0B0         	call	_Timer0_ISR	;wreg free
 29180  00145E                     i2l1590:
 29181  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29182  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29183  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29184  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29185  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29186  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29187  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29188  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29189  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29190  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29191  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29192  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29193  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29194  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29195  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29196  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29197  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29198  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29199  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29200  0014A8  0011               	retfie		f
 29201  0014AA                     __end_of_ISR_Function:
 29202                           	opt stack 0
 29203                           tosu	equ	0xFFF
 29204                           tosh	equ	0xFFE
 29205                           tosl	equ	0xFFD
 29206                           pclatu	equ	0xFFB
 29207                           pclath	equ	0xFFA
 29208                           tblptru	equ	0xFF8
 29209                           tblptrh	equ	0xFF7
 29210                           tblptrl	equ	0xFF6
 29211                           tablat	equ	0xFF5
 29212                           prodh	equ	0xFF4
 29213                           prodl	equ	0xFF3
 29214                           intcon	equ	0xFF2
 29215                           indf0	equ	0xFEF
 29216                           postinc0	equ	0xFEE
 29217                           fsr0h	equ	0xFEA
 29218                           fsr0l	equ	0xFE9
 29219                           wreg	equ	0xFE8
 29220                           indf1	equ	0xFE7
 29221                           postdec1	equ	0xFE5
 29222                           fsr1h	equ	0xFE2
 29223                           fsr1l	equ	0xFE1
 29224                           indf2	equ	0xFDF
 29225                           postinc2	equ	0xFDE
 29226                           postdec2	equ	0xFDD
 29227                           plusw2	equ	0xFDB
 29228                           fsr2h	equ	0xFDA
 29229                           fsr2l	equ	0xFD9
 29230                           status	equ	0xFD8
 29231                           
 29232 ;; *************** function _Timer0_ISR *****************
 29233 ;; Defined at:
 29234 ;;		line 94 in file "Library/Timer0.c"
 29235 ;; Parameters:    Size  Location     Type
 29236 ;;		None
 29237 ;; Auto vars:     Size  Location     Type
 29238 ;;		None
 29239 ;; Return value:  Size  Location     Type
 29240 ;;                  1    wreg      void 
 29241 ;; Registers used:
 29242 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29243 ;; Tracked objects:
 29244 ;;		On entry : 0/0
 29245 ;;		On exit  : 0/0
 29246 ;;		Unchanged: 0/0
 29247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29252 ;;Total ram usage:        0 bytes
 29253 ;; Hardware stack levels used:    1
 29254 ;; Hardware stack levels required when called:    5
 29255 ;; This function calls:
 29256 ;;		Absolute function
 29257 ;;		i2_Motor_Step
 29258 ;;		i2_Timer0_Stop
 29259 ;; This function is called by:
 29260 ;;		_ISR_Function
 29261 ;; This function uses a non-reentrant model
 29262 ;;
 29263                           
 29264                           	psect	text158
 29265  016086                     __ptext158:
 29266                           	opt stack 0
 29267  016086                     _Timer0_ISR:
 29268                           	opt stack 13
 29269                           
 29270                           ;Timer0.c: 96: Timer0_Stop();
 29271                           
 29272                           ;incstack = 0
 29273  016086  ECAE  F0B2         	call	i2_Timer0_Stop	;wreg free
 29274                           
 29275                           ;Timer0.c: 99: if (gISR != 0)
 29276  01608A  0103               	movlb	3	; () banked
 29277  01608C  5114               	movf	_gISR& (0+255),w,b
 29278  01608E  0103               	movlb	3	; () banked
 29279  016090  1115               	iorwf	(_gISR+1)& (0+255),w,b
 29280  016092  0103               	movlb	3	; () banked
 29281  016094  1116               	iorwf	(_gISR+2)& (0+255),w,b
 29282  016096  B4D8               	btfsc	status,2,c
 29283  016098  0012               	return	
 29284                           
 29285                           ; BSR set to: 3
 29286                           ;Timer0.c: 100: gISR();
 29287  01609A  D801               	call	i2u1341_48
 29288  01609C  0012               	return	
 29289  01609E                     i2u1341_48:
 29290  01609E  0005               	push	
 29291  0160A0  6EFA               	movwf	pclath,c
 29292  0160A2  0103               	movlb	3	; () banked
 29293  0160A4  5114               	movf	_gISR& (0+255),w,b
 29294  0160A6  6EFD               	movwf	tosl,c
 29295  0160A8  5115               	movf	(_gISR+1)& (0+255),w,b
 29296  0160AA  6EFE               	movwf	tosh,c
 29297  0160AC  5116               	movf	(_gISR+2)& (0+255),w,b
 29298  0160AE  6EFF               	movwf	tosu,c
 29299  0160B0  50FA               	movf	pclath,w,c
 29300  0160B2  0012               	return		;indir
 29301  0160B4                     __end_of_Timer0_ISR:
 29302                           	opt stack 0
 29303                           tosu	equ	0xFFF
 29304                           tosh	equ	0xFFE
 29305                           tosl	equ	0xFFD
 29306                           pclatu	equ	0xFFB
 29307                           pclath	equ	0xFFA
 29308                           tblptru	equ	0xFF8
 29309                           tblptrh	equ	0xFF7
 29310                           tblptrl	equ	0xFF6
 29311                           tablat	equ	0xFF5
 29312                           prodh	equ	0xFF4
 29313                           prodl	equ	0xFF3
 29314                           intcon	equ	0xFF2
 29315                           indf0	equ	0xFEF
 29316                           postinc0	equ	0xFEE
 29317                           fsr0h	equ	0xFEA
 29318                           fsr0l	equ	0xFE9
 29319                           wreg	equ	0xFE8
 29320                           indf1	equ	0xFE7
 29321                           postdec1	equ	0xFE5
 29322                           fsr1h	equ	0xFE2
 29323                           fsr1l	equ	0xFE1
 29324                           indf2	equ	0xFDF
 29325                           postinc2	equ	0xFDE
 29326                           postdec2	equ	0xFDD
 29327                           plusw2	equ	0xFDB
 29328                           fsr2h	equ	0xFDA
 29329                           fsr2l	equ	0xFD9
 29330                           status	equ	0xFD8
 29331                           
 29332 ;; *************** function i2_Motor_Step *****************
 29333 ;; Defined at:
 29334 ;;		line 75 in file "Library/Motor.c"
 29335 ;; Parameters:    Size  Location     Type
 29336 ;;		None
 29337 ;; Auto vars:     Size  Location     Type
 29338 ;;		None
 29339 ;; Return value:  Size  Location     Type
 29340 ;;                  1    wreg      void 
 29341 ;; Registers used:
 29342 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29343 ;; Tracked objects:
 29344 ;;		On entry : 0/0
 29345 ;;		On exit  : 0/0
 29346 ;;		Unchanged: 0/0
 29347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29350 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29351 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29352 ;;Total ram usage:        2 bytes
 29353 ;; Hardware stack levels used:    1
 29354 ;; Hardware stack levels required when called:    4
 29355 ;; This function calls:
 29356 ;;		i2_MXK_Queue
 29357 ;;		i2_MXK_Release
 29358 ;;		i2_MXK_SwitchTo
 29359 ;;		i2_Port_SetPin
 29360 ;;		i2_Timer0_Restart
 29361 ;;		i2_Timer0_Stop
 29362 ;; This function is called by:
 29363 ;; This function uses a non-reentrant model
 29364 ;;
 29365                           
 29366                           	psect	text159
 29367  0137B8                     __ptext159:
 29368                           	opt stack 0
 29369  0137B8                     i2_Motor_Step:
 29370                           	opt stack 13
 29371                           
 29372                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29373                           
 29374                           ;incstack = 0
 29375  0137B8  0100               	movlb	0	; () banked
 29376  0137BA  EE20 F004          	lfsr	2,4
 29377  0137BE  51CE               	movf	_lMotor& (0+255),w,b
 29378  0137C0  26D9               	addwf	fsr2l,f,c
 29379  0137C2  51CF               	movf	(_lMotor+1)& (0+255),w,b
 29380  0137C4  22DA               	addwfc	fsr2h,f,c
 29381  0137C6  50DF               	movf	indf2,w,c
 29382  0137C8  EC96  F0AF         	call	i2_MXK_SwitchTo
 29383  0137CC  0900               	iorlw	0
 29384  0137CE  B4D8               	btfsc	status,2,c
 29385  0137D0  D06A               	goto	i2l1627
 29386                           
 29387                           ;Motor.c: 78: {
 29388                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29389  0137D2  C0CE  FFD9         	movff	_lMotor,fsr2l
 29390  0137D6  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29391  0137DA  50DE               	movf	postinc2,w,c
 29392  0137DC  10DE               	iorwf	postinc2,w,c
 29393  0137DE  B4D8               	btfsc	status,2,c
 29394  0137E0  D05D               	goto	i2l1628
 29395                           
 29396                           ;Motor.c: 80: {
 29397                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29398  0137E2  C0CE  FFD9         	movff	_lMotor,fsr2l
 29399  0137E6  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29400  0137EA  0E01               	movlw	1
 29401  0137EC  BEDB               	btfsc	plusw2,7,c
 29402  0137EE  D022               	goto	i2l1629
 29403  0137F0  0E01               	movlw	1
 29404  0137F2  50DB               	movf	plusw2,w,c
 29405  0137F4  E103               	bnz	i2u709_40
 29406  0137F6  04DE               	decf	postinc2,w,c
 29407  0137F8  A0D8               	btfss	status,0,c
 29408  0137FA  D01C               	goto	i2l1629
 29409  0137FC                     i2u709_40:
 29410                           
 29411                           ;Motor.c: 83: {
 29412                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29413  0137FC  C0CE  FFD9         	movff	_lMotor,fsr2l
 29414  013800  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29415  013804  28DE               	incf	postinc2,w,c
 29416  013806  E104               	bnz	i2u710_40
 29417  013808  0E7F               	movlw	127
 29418  01380A  18DE               	xorwf	postinc2,w,c
 29419  01380C  B4D8               	btfsc	status,2,c
 29420  01380E  D007               	goto	i2l1630
 29421  013810                     i2u710_40:
 29422                           
 29423                           ;Motor.c: 85: lMotor->mDelta --;
 29424  013810  C0CE  FFD9         	movff	_lMotor,fsr2l
 29425  013814  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29426  013818  06DE               	decf	postinc2,f,c
 29427  01381A  0E00               	movlw	0
 29428  01381C  5ADD               	subwfb	postdec2,f,c
 29429  01381E                     i2l1630:
 29430                           
 29431                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29432  01381E  0E99               	movlw	low _PortE
 29433  013820  6E10               	movwf	i2Port_SetPin@pInput,c
 29434  013822  0E03               	movlw	high _PortE
 29435  013824  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29436  013826  0E00               	movlw	0
 29437  013828  6E12               	movwf	i2Port_SetPin@pPin,c
 29438  01382A  0E01               	movlw	1
 29439  01382C  6E13               	movwf	i2Port_SetPin@pValue,c
 29440  01382E  EC83  F0A2         	call	i2_Port_SetPin	;wreg free
 29441                           
 29442                           ;Motor.c: 88: }
 29443  013832  D01B               	goto	i2l1631
 29444  013834                     i2l1629:
 29445                           
 29446                           ;Motor.c: 89: else
 29447                           ;Motor.c: 90: {
 29448                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29449  013834  C0CE  FFD9         	movff	_lMotor,fsr2l
 29450  013838  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29451  01383C  04DE               	decf	postinc2,w,c
 29452  01383E  E104               	bnz	i2u711_40
 29453  013840  0E80               	movlw	128
 29454  013842  18DE               	xorwf	postinc2,w,c
 29455  013844  B4D8               	btfsc	status,2,c
 29456  013846  D007               	goto	i2l1632
 29457  013848                     i2u711_40:
 29458                           
 29459                           ;Motor.c: 92: lMotor->mDelta ++;
 29460  013848  C0CE  FFD9         	movff	_lMotor,fsr2l
 29461  01384C  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29462  013850  2ADE               	incf	postinc2,f,c
 29463  013852  0E00               	movlw	0
 29464  013854  22DD               	addwfc	postdec2,f,c
 29465  013856                     i2l1632:
 29466                           
 29467                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29468  013856  0E99               	movlw	low _PortE
 29469  013858  6E10               	movwf	i2Port_SetPin@pInput,c
 29470  01385A  0E03               	movlw	high _PortE
 29471  01385C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29472  01385E  0E00               	movlw	0
 29473  013860  6E12               	movwf	i2Port_SetPin@pPin,c
 29474  013862  0E00               	movlw	0
 29475  013864  6E13               	movwf	i2Port_SetPin@pValue,c
 29476  013866  EC83  F0A2         	call	i2_Port_SetPin	;wreg free
 29477  01386A                     i2l1631:
 29478                           
 29479                           ;Motor.c: 95: }
 29480                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29481  01386A  0E99               	movlw	low _PortE
 29482  01386C  6E10               	movwf	i2Port_SetPin@pInput,c
 29483  01386E  0E03               	movlw	high _PortE
 29484  013870  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29485  013872  0E01               	movlw	1
 29486  013874  6E12               	movwf	i2Port_SetPin@pPin,c
 29487  013876  0E01               	movlw	1
 29488  013878  6E13               	movwf	i2Port_SetPin@pValue,c
 29489  01387A  EC83  F0A2         	call	i2_Port_SetPin	;wreg free
 29490                           
 29491                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29492  01387E  0E99               	movlw	low _PortE
 29493  013880  6E10               	movwf	i2Port_SetPin@pInput,c
 29494  013882  0E03               	movlw	high _PortE
 29495  013884  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29496  013886  0E01               	movlw	1
 29497  013888  6E12               	movwf	i2Port_SetPin@pPin,c
 29498  01388A  0E00               	movlw	0
 29499  01388C  6E13               	movwf	i2Port_SetPin@pValue,c
 29500  01388E  EC83  F0A2         	call	i2_Port_SetPin	;wreg free
 29501                           
 29502                           ;Motor.c: 101: MXK_Release();
 29503  013892  ECB1  F0B2         	call	i2_MXK_Release	;wreg free
 29504                           
 29505                           ;Motor.c: 102: Timer0_Restart();
 29506  013896  EC7D  F0B2         	call	i2_Timer0_Restart	;wreg free
 29507                           
 29508                           ;Motor.c: 103: return;
 29509  01389A  0012               	return	
 29510  01389C                     i2l1628:
 29511                           
 29512                           ;Motor.c: 104: }
 29513                           ;Motor.c: 105: MXK_Release();
 29514  01389C  ECB1  F0B2         	call	i2_MXK_Release	;wreg free
 29515                           
 29516                           ;Motor.c: 106: Timer0_Stop();
 29517  0138A0  ECAE  F0B2         	call	i2_Timer0_Stop	;wreg free
 29518                           
 29519                           ;Motor.c: 107: return;
 29520  0138A4  0012               	return	
 29521  0138A6                     i2l1627:
 29522                           
 29523                           ;Motor.c: 108: }
 29524                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29525  0138A6  C0BD  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29526  0138AA  C0BE  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29527  0138AE  C0BF  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29528  0138B2  EC64  F0B2         	call	i2_MXK_Queue	;wreg free
 29529  0138B6  0012               	return		;funcret
 29530  0138B8                     __end_ofi2_Motor_Step:
 29531                           	opt stack 0
 29532                           tosu	equ	0xFFF
 29533                           tosh	equ	0xFFE
 29534                           tosl	equ	0xFFD
 29535                           pclatu	equ	0xFFB
 29536                           pclath	equ	0xFFA
 29537                           tblptru	equ	0xFF8
 29538                           tblptrh	equ	0xFF7
 29539                           tblptrl	equ	0xFF6
 29540                           tablat	equ	0xFF5
 29541                           prodh	equ	0xFF4
 29542                           prodl	equ	0xFF3
 29543                           intcon	equ	0xFF2
 29544                           indf0	equ	0xFEF
 29545                           postinc0	equ	0xFEE
 29546                           fsr0h	equ	0xFEA
 29547                           fsr0l	equ	0xFE9
 29548                           wreg	equ	0xFE8
 29549                           indf1	equ	0xFE7
 29550                           postdec1	equ	0xFE5
 29551                           fsr1h	equ	0xFE2
 29552                           fsr1l	equ	0xFE1
 29553                           indf2	equ	0xFDF
 29554                           postinc2	equ	0xFDE
 29555                           postdec2	equ	0xFDD
 29556                           plusw2	equ	0xFDB
 29557                           fsr2h	equ	0xFDA
 29558                           fsr2l	equ	0xFD9
 29559                           status	equ	0xFD8
 29560                           
 29561 ;; *************** function i2_Timer0_Stop *****************
 29562 ;; Defined at:
 29563 ;;		line 89 in file "Library/Timer0.c"
 29564 ;; Parameters:    Size  Location     Type
 29565 ;;		None
 29566 ;; Auto vars:     Size  Location     Type
 29567 ;;		None
 29568 ;; Return value:  Size  Location     Type
 29569 ;;                  1    wreg      void 
 29570 ;; Registers used:
 29571 ;;		None
 29572 ;; Tracked objects:
 29573 ;;		On entry : 0/0
 29574 ;;		On exit  : 0/0
 29575 ;;		Unchanged: 0/0
 29576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29581 ;;Total ram usage:        0 bytes
 29582 ;; Hardware stack levels used:    1
 29583 ;; This function calls:
 29584 ;;		Nothing
 29585 ;; This function is called by:
 29586 ;;		_Timer0_ISR
 29587 ;;		i2_Motor_Step
 29588 ;; This function uses a non-reentrant model
 29589 ;;
 29590                           
 29591                           	psect	text160
 29592  01655C                     __ptext160:
 29593                           	opt stack 0
 29594  01655C                     i2_Timer0_Stop:
 29595                           	opt stack 17
 29596                           
 29597                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29598                           
 29599                           ;incstack = 0
 29600  01655C  9AF2               	bcf	intcon,5,c	;volatile
 29601                           
 29602                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29603  01655E  94F2               	bcf	intcon,2,c	;volatile
 29604  016560  0012               	return		;funcret
 29605  016562                     __end_ofi2_Timer0_Stop:
 29606                           	opt stack 0
 29607                           tosu	equ	0xFFF
 29608                           tosh	equ	0xFFE
 29609                           tosl	equ	0xFFD
 29610                           pclatu	equ	0xFFB
 29611                           pclath	equ	0xFFA
 29612                           tblptru	equ	0xFF8
 29613                           tblptrh	equ	0xFF7
 29614                           tblptrl	equ	0xFF6
 29615                           tablat	equ	0xFF5
 29616                           prodh	equ	0xFF4
 29617                           prodl	equ	0xFF3
 29618                           intcon	equ	0xFF2
 29619                           indf0	equ	0xFEF
 29620                           postinc0	equ	0xFEE
 29621                           fsr0h	equ	0xFEA
 29622                           fsr0l	equ	0xFE9
 29623                           wreg	equ	0xFE8
 29624                           indf1	equ	0xFE7
 29625                           postdec1	equ	0xFE5
 29626                           fsr1h	equ	0xFE2
 29627                           fsr1l	equ	0xFE1
 29628                           indf2	equ	0xFDF
 29629                           postinc2	equ	0xFDE
 29630                           postdec2	equ	0xFDD
 29631                           plusw2	equ	0xFDB
 29632                           fsr2h	equ	0xFDA
 29633                           fsr2l	equ	0xFD9
 29634                           status	equ	0xFD8
 29635                           
 29636 ;; *************** function i2_Timer0_Restart *****************
 29637 ;; Defined at:
 29638 ;;		line 83 in file "Library/Timer0.c"
 29639 ;; Parameters:    Size  Location     Type
 29640 ;;		None
 29641 ;; Auto vars:     Size  Location     Type
 29642 ;;		None
 29643 ;; Return value:  Size  Location     Type
 29644 ;;                  1    wreg      void 
 29645 ;; Registers used:
 29646 ;;		None
 29647 ;; Tracked objects:
 29648 ;;		On entry : 0/0
 29649 ;;		On exit  : 0/0
 29650 ;;		Unchanged: 0/0
 29651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29656 ;;Total ram usage:        0 bytes
 29657 ;; Hardware stack levels used:    1
 29658 ;; This function calls:
 29659 ;;		Nothing
 29660 ;; This function is called by:
 29661 ;;		i2_Motor_Step
 29662 ;; This function uses a non-reentrant model
 29663 ;;
 29664                           
 29665                           	psect	text161
 29666  0164FA                     __ptext161:
 29667                           	opt stack 0
 29668  0164FA                     i2_Timer0_Restart:
 29669                           	opt stack 16
 29670                           
 29671                           ;Timer0.c: 85: TMR0 = COUNTER;
 29672                           
 29673                           ;incstack = 0
 29674  0164FA  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29675  0164FE  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29676                           
 29677                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29678  016502  8AF2               	bsf	intcon,5,c	;volatile
 29679  016504  0012               	return		;funcret
 29680  016506                     __end_ofi2_Timer0_Restart:
 29681                           	opt stack 0
 29682                           tosu	equ	0xFFF
 29683                           tosh	equ	0xFFE
 29684                           tosl	equ	0xFFD
 29685                           pclatu	equ	0xFFB
 29686                           pclath	equ	0xFFA
 29687                           tblptru	equ	0xFF8
 29688                           tblptrh	equ	0xFF7
 29689                           tblptrl	equ	0xFF6
 29690                           tablat	equ	0xFF5
 29691                           prodh	equ	0xFF4
 29692                           prodl	equ	0xFF3
 29693                           intcon	equ	0xFF2
 29694                           indf0	equ	0xFEF
 29695                           postinc0	equ	0xFEE
 29696                           fsr0h	equ	0xFEA
 29697                           fsr0l	equ	0xFE9
 29698                           wreg	equ	0xFE8
 29699                           indf1	equ	0xFE7
 29700                           postdec1	equ	0xFE5
 29701                           fsr1h	equ	0xFE2
 29702                           fsr1l	equ	0xFE1
 29703                           indf2	equ	0xFDF
 29704                           postinc2	equ	0xFDE
 29705                           postdec2	equ	0xFDD
 29706                           plusw2	equ	0xFDB
 29707                           fsr2h	equ	0xFDA
 29708                           fsr2l	equ	0xFD9
 29709                           status	equ	0xFD8
 29710                           
 29711 ;; *************** function i2_Port_SetPin *****************
 29712 ;; Defined at:
 29713 ;;		line 247 in file "Library/Port.c"
 29714 ;; Parameters:    Size  Location     Type
 29715 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29716 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29717 ;;  pPin            1   17[COMRAM] enum E6750
 29718 ;;  pValue          1   18[COMRAM] unsigned char 
 29719 ;; Auto vars:     Size  Location     Type
 29720 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29721 ;; Return value:  Size  Location     Type
 29722 ;;                  1    wreg      void 
 29723 ;; Registers used:
 29724 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29725 ;; Tracked objects:
 29726 ;;		On entry : 0/0
 29727 ;;		On exit  : 0/0
 29728 ;;		Unchanged: 0/0
 29729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29730 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29731 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29733 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29734 ;;Total ram usage:        5 bytes
 29735 ;; Hardware stack levels used:    1
 29736 ;; Hardware stack levels required when called:    3
 29737 ;; This function calls:
 29738 ;;		i2_Byte_SetBit
 29739 ;;		i2_Word_GetPair
 29740 ;; This function is called by:
 29741 ;;		i2_Motor_Step
 29742 ;; This function uses a non-reentrant model
 29743 ;;
 29744                           
 29745                           	psect	text162
 29746  014506                     __ptext162:
 29747                           	opt stack 0
 29748  014506                     i2_Port_SetPin:
 29749                           	opt stack 13
 29750                           
 29751                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29752                           
 29753                           ;incstack = 0
 29754  014506  0E08               	movlw	8
 29755  014508  2410               	addwf	i2Port_SetPin@pInput,w,c
 29756  01450A  6E0D               	movwf	i2Word_GetPair@pInput,c
 29757  01450C  0E00               	movlw	0
 29758  01450E  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29759  014510  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29760  014512  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29761  014516  EC14  F0B0         	call	i2_Word_GetPair	;wreg free
 29762  01451A  6E14               	movwf	i2Port_SetPin@Type,c
 29763                           
 29764                           ;Port.c: 250: switch (Type)
 29765  01451C  D03B               	goto	i2l427
 29766  01451E                     
 29767                           ;Port.c: 256: pValue &= 1;
 29768  01451E  0E01               	movlw	1
 29769  014520  1613               	andwf	i2Port_SetPin@pValue,f,c
 29770                           
 29771                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29772  014522  EE20 F002          	lfsr	2,2
 29773  014526  5010               	movf	i2Port_SetPin@pInput,w,c
 29774  014528  26D9               	addwf	fsr2l,f,c
 29775  01452A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29776  01452C  22DA               	addwfc	fsr2h,f,c
 29777  01452E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29778  014532  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29779  014536  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29780  01453A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29781  01453E  ECE1  F0AC         	call	i2_Byte_SetBit	;wreg free
 29782                           
 29783                           ;Port.c: 258: break;
 29784  014542  0012               	return	
 29785  014544                     
 29786                           ;Port.c: 261: pValue &= 1;
 29787  014544  0E01               	movlw	1
 29788  014546  1613               	andwf	i2Port_SetPin@pValue,f,c
 29789                           
 29790                           ;Port.c: 262: pValue ^= 1;
 29791  014548  0E01               	movlw	1
 29792  01454A  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29793                           
 29794                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29795  01454C  EE20 F002          	lfsr	2,2
 29796  014550  5010               	movf	i2Port_SetPin@pInput,w,c
 29797  014552  26D9               	addwf	fsr2l,f,c
 29798  014554  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29799  014556  22DA               	addwfc	fsr2h,f,c
 29800  014558  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29801  01455C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29802  014560  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29803  014564  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29804  014568  ECE1  F0AC         	call	i2_Byte_SetBit	;wreg free
 29805                           
 29806                           ;Port.c: 264: break;
 29807  01456C  0012               	return	
 29808  01456E                     
 29809                           ;Port.c: 266: pValue &= 1;
 29810  01456E  0E01               	movlw	1
 29811  014570  1613               	andwf	i2Port_SetPin@pValue,f,c
 29812                           
 29813                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29814  014572  EE20 F004          	lfsr	2,4
 29815  014576  5010               	movf	i2Port_SetPin@pInput,w,c
 29816  014578  26D9               	addwf	fsr2l,f,c
 29817  01457A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29818  01457C  22DA               	addwfc	fsr2h,f,c
 29819  01457E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29820  014582  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29821  014586  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29822  01458A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29823  01458E  ECE1  F0AC         	call	i2_Byte_SetBit	;wreg free
 29824                           
 29825                           ;Port.c: 269: }
 29826                           
 29827                           ;Port.c: 268: break;
 29828  014592  0012               	return	
 29829  014594                     i2l427:
 29830  014594  5014               	movf	i2Port_SetPin@Type,w,c
 29831                           
 29832                           ; Switch size 1, requested type "space"
 29833                           ; Number of cases is 4, Range of values is 0 to 3
 29834                           ; switch strategies available:
 29835                           ; Name         Instructions Cycles
 29836                           ; simple_byte           13     7 (average)
 29837                           ;	Chosen strategy is simple_byte
 29838  014596  0A00               	xorlw	0	; case 0
 29839  014598  B4D8               	btfsc	status,2,c
 29840  01459A  0012               	return	
 29841  01459C  0A01               	xorlw	1	; case 1
 29842  01459E  B4D8               	btfsc	status,2,c
 29843  0145A0  D7BE               	goto	i2l430
 29844  0145A2  0A03               	xorlw	3	; case 2
 29845  0145A4  B4D8               	btfsc	status,2,c
 29846  0145A6  D7CE               	goto	i2l432
 29847  0145A8  0A01               	xorlw	1	; case 3
 29848  0145AA  A4D8               	btfss	status,2,c
 29849  0145AC  0012               	return	
 29850  0145AE  D7DF               	goto	i2l433
 29851  0145B0                     __end_ofi2_Port_SetPin:
 29852                           	opt stack 0
 29853                           tosu	equ	0xFFF
 29854                           tosh	equ	0xFFE
 29855                           tosl	equ	0xFFD
 29856                           pclatu	equ	0xFFB
 29857                           pclath	equ	0xFFA
 29858                           tblptru	equ	0xFF8
 29859                           tblptrh	equ	0xFF7
 29860                           tblptrl	equ	0xFF6
 29861                           tablat	equ	0xFF5
 29862                           prodh	equ	0xFF4
 29863                           prodl	equ	0xFF3
 29864                           intcon	equ	0xFF2
 29865                           indf0	equ	0xFEF
 29866                           postinc0	equ	0xFEE
 29867                           fsr0h	equ	0xFEA
 29868                           fsr0l	equ	0xFE9
 29869                           wreg	equ	0xFE8
 29870                           indf1	equ	0xFE7
 29871                           postdec1	equ	0xFE5
 29872                           fsr1h	equ	0xFE2
 29873                           fsr1l	equ	0xFE1
 29874                           indf2	equ	0xFDF
 29875                           postinc2	equ	0xFDE
 29876                           postdec2	equ	0xFDD
 29877                           plusw2	equ	0xFDB
 29878                           fsr2h	equ	0xFDA
 29879                           fsr2l	equ	0xFD9
 29880                           status	equ	0xFD8
 29881                           
 29882 ;; *************** function i2_Word_GetPair *****************
 29883 ;; Defined at:
 29884 ;;		line 156 in file "Library/Types.c"
 29885 ;; Parameters:    Size  Location     Type
 29886 ;;  pInput          2   12[COMRAM] PTR struct Word
 29887 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29888 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29889 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29890 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29891 ;;  pPair           1   14[COMRAM] unsigned char 
 29892 ;; Auto vars:     Size  Location     Type
 29893 ;;		None
 29894 ;; Return value:  Size  Location     Type
 29895 ;;                  1    wreg      unsigned char 
 29896 ;; Registers used:
 29897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29898 ;; Tracked objects:
 29899 ;;		On entry : 0/0
 29900 ;;		On exit  : 0/0
 29901 ;;		Unchanged: 0/0
 29902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29903 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29906 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29907 ;;Total ram usage:        3 bytes
 29908 ;; Hardware stack levels used:    1
 29909 ;; Hardware stack levels required when called:    2
 29910 ;; This function calls:
 29911 ;;		i2_Byte_GetPair
 29912 ;; This function is called by:
 29913 ;;		i2_Port_SetPin
 29914 ;; This function uses a non-reentrant model
 29915 ;;
 29916                           
 29917                           	psect	text163
 29918  016028                     __ptext163:
 29919                           	opt stack 0
 29920  016028                     i2_Word_GetPair:
 29921                           	opt stack 13
 29922                           
 29923                           ;Types.c: 158: if (pPair >= 4)
 29924                           
 29925                           ;incstack = 0
 29926  016028  0E03               	movlw	3
 29927  01602A  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29928  01602C  D00C               	goto	i2l781
 29929                           
 29930                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29931  01602E  0E01               	movlw	1
 29932  016030  240D               	addwf	i2Word_GetPair@pInput,w,c
 29933  016032  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29934  016034  0E00               	movlw	0
 29935  016036  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29936  016038  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29937  01603A  500F               	movf	i2Word_GetPair@pPair,w,c
 29938  01603C  0FFC               	addlw	252
 29939  01603E  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29940  016040  ECA5  F0B1         	call	i2_Byte_GetPair	;wreg free
 29941  016044  0012               	return	
 29942  016046                     i2l781:
 29943                           
 29944                           ;Types.c: 160: else
 29945                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29946  016046  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29947  01604A  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29948  01604E  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29949  016052  ECA5  F0B1         	call	i2_Byte_GetPair	;wreg free
 29950  016056  0012               	return	
 29951  016058                     __end_ofi2_Word_GetPair:
 29952                           	opt stack 0
 29953                           tosu	equ	0xFFF
 29954                           tosh	equ	0xFFE
 29955                           tosl	equ	0xFFD
 29956                           pclatu	equ	0xFFB
 29957                           pclath	equ	0xFFA
 29958                           tblptru	equ	0xFF8
 29959                           tblptrh	equ	0xFF7
 29960                           tblptrl	equ	0xFF6
 29961                           tablat	equ	0xFF5
 29962                           prodh	equ	0xFF4
 29963                           prodl	equ	0xFF3
 29964                           intcon	equ	0xFF2
 29965                           indf0	equ	0xFEF
 29966                           postinc0	equ	0xFEE
 29967                           fsr0h	equ	0xFEA
 29968                           fsr0l	equ	0xFE9
 29969                           wreg	equ	0xFE8
 29970                           indf1	equ	0xFE7
 29971                           postdec1	equ	0xFE5
 29972                           fsr1h	equ	0xFE2
 29973                           fsr1l	equ	0xFE1
 29974                           indf2	equ	0xFDF
 29975                           postinc2	equ	0xFDE
 29976                           postdec2	equ	0xFDD
 29977                           plusw2	equ	0xFDB
 29978                           fsr2h	equ	0xFDA
 29979                           fsr2l	equ	0xFD9
 29980                           status	equ	0xFD8
 29981                           
 29982 ;; *************** function i2_Byte_GetPair *****************
 29983 ;; Defined at:
 29984 ;;		line 87 in file "Library/Types.c"
 29985 ;; Parameters:    Size  Location     Type
 29986 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29987 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29988 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29989 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29990 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29991 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29992 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29993 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29994 ;;		 -> NULL(0), 
 29995 ;;  pPair           1   11[COMRAM] unsigned char 
 29996 ;; Auto vars:     Size  Location     Type
 29997 ;;		None
 29998 ;; Return value:  Size  Location     Type
 29999 ;;                  1    wreg      unsigned char 
 30000 ;; Registers used:
 30001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30002 ;; Tracked objects:
 30003 ;;		On entry : 0/0
 30004 ;;		On exit  : 0/0
 30005 ;;		Unchanged: 0/0
 30006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30007 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30010 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30011 ;;Total ram usage:        3 bytes
 30012 ;; Hardware stack levels used:    1
 30013 ;; Hardware stack levels required when called:    1
 30014 ;; This function calls:
 30015 ;;		i2_Byte_GetZone
 30016 ;; This function is called by:
 30017 ;;		i2_Word_GetPair
 30018 ;; This function uses a non-reentrant model
 30019 ;;
 30020                           
 30021                           	psect	text164
 30022  01634A                     __ptext164:
 30023                           	opt stack 0
 30024  01634A                     i2_Byte_GetPair:
 30025                           	opt stack 13
 30026                           
 30027                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30028                           
 30029                           ;incstack = 0
 30030  01634A  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30031  01634E  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30032  016352  0E04               	movlw	4
 30033  016354  6E03               	movwf	i2Byte_GetZone@pMax,c
 30034  016356  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30035  01635A  0E02               	movlw	2
 30036  01635C  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30037  01635E  ECFA  F0A7         	call	i2_Byte_GetZone	;wreg free
 30038  016362  0012               	return	
 30039  016364                     __end_ofi2_Byte_GetPair:
 30040                           	opt stack 0
 30041                           tosu	equ	0xFFF
 30042                           tosh	equ	0xFFE
 30043                           tosl	equ	0xFFD
 30044                           pclatu	equ	0xFFB
 30045                           pclath	equ	0xFFA
 30046                           tblptru	equ	0xFF8
 30047                           tblptrh	equ	0xFF7
 30048                           tblptrl	equ	0xFF6
 30049                           tablat	equ	0xFF5
 30050                           prodh	equ	0xFF4
 30051                           prodl	equ	0xFF3
 30052                           intcon	equ	0xFF2
 30053                           indf0	equ	0xFEF
 30054                           postinc0	equ	0xFEE
 30055                           fsr0h	equ	0xFEA
 30056                           fsr0l	equ	0xFE9
 30057                           wreg	equ	0xFE8
 30058                           indf1	equ	0xFE7
 30059                           postdec1	equ	0xFE5
 30060                           fsr1h	equ	0xFE2
 30061                           fsr1l	equ	0xFE1
 30062                           indf2	equ	0xFDF
 30063                           postinc2	equ	0xFDE
 30064                           postdec2	equ	0xFDD
 30065                           plusw2	equ	0xFDB
 30066                           fsr2h	equ	0xFDA
 30067                           fsr2l	equ	0xFD9
 30068                           status	equ	0xFD8
 30069                           
 30070 ;; *************** function i2_Byte_GetZone *****************
 30071 ;; Defined at:
 30072 ;;		line 64 in file "Library/Types.c"
 30073 ;; Parameters:    Size  Location     Type
 30074 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30075 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30076 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30077 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30078 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30079 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30080 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30081 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30082 ;;		 -> NULL(0), 
 30083 ;;  pMax            1    2[COMRAM] unsigned char 
 30084 ;;  pChunk          1    3[COMRAM] unsigned char 
 30085 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30086 ;; Auto vars:     Size  Location     Type
 30087 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30088 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30089 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30090 ;; Return value:  Size  Location     Type
 30091 ;;                  1    wreg      unsigned char 
 30092 ;; Registers used:
 30093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30094 ;; Tracked objects:
 30095 ;;		On entry : 0/0
 30096 ;;		On exit  : 0/0
 30097 ;;		Unchanged: 0/0
 30098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30099 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30100 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30101 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30102 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30103 ;;Total ram usage:        9 bytes
 30104 ;; Hardware stack levels used:    1
 30105 ;; This function calls:
 30106 ;;		Nothing
 30107 ;; This function is called by:
 30108 ;;		i2_Byte_GetPair
 30109 ;; This function uses a non-reentrant model
 30110 ;;
 30111                           
 30112                           	psect	text165
 30113  014FF4                     __ptext165:
 30114                           	opt stack 0
 30115  014FF4                     i2_Byte_GetZone:
 30116                           	opt stack 13
 30117                           
 30118                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30119                           
 30120                           ;incstack = 0
 30121  014FF4  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30122  014FF8  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30123  014FFC  0E00               	movlw	low (__mediumconst shr (0+16))
 30124  014FFE  6EF8               	movwf	tblptru,c
 30125  015000  0E0F               	movlw	(high __ramtop+-1)
 30126  015002  64F7               	cpfsgt	tblptrh,c
 30127  015004  D003               	bra	i2u484_47
 30128  015006  0008               	tblrd		*
 30129  015008  50F5               	movf	tablat,w,c
 30130  01500A  D005               	bra	i2u484_40
 30131  01500C                     i2u484_47:
 30132  01500C  CFF6 FFE9          	movff	tblptrl,fsr0l
 30133  015010  CFF7 FFEA          	movff	tblptrh,fsr0h
 30134  015014  50EF               	movf	indf0,w,c
 30135  015016                     i2u484_40:
 30136  015016  6E09               	movwf	i2Byte_GetZone@Output,c
 30137                           
 30138                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30139  015018  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30140  01501A  0D01               	mullw	1
 30141  01501C  0E9F               	movlw	low _MASKS
 30142  01501E  24F3               	addwf	prodl,w,c
 30143  015020  6EF6               	movwf	tblptrl,c
 30144  015022  0EFD               	movlw	high _MASKS
 30145  015024  20F4               	addwfc	prodh,w,c
 30146  015026  6EF7               	movwf	tblptrh,c
 30147  015028                     	if	1	;There are 3 active tblptr bytes
 30148  015028  6AF8               	clrf	tblptru,c
 30149  01502A  0E00               	movlw	low (__mediumconst shr (0+16))
 30150  01502C  22F8               	addwfc	tblptru,f,c
 30151  01502E                     	endif
 30152  01502E  0008               	tblrd		*
 30153  015030  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30154                           
 30155                           ;Types.c: 68: UINT8 Offset = 0;
 30156  015034  0E00               	movlw	0
 30157  015036  6E08               	movwf	i2Byte_GetZone@Offset,c
 30158                           
 30159                           ;Types.c: 70: while (pChunk >= pMax)
 30160  015038  D003               	goto	i2l732
 30161  01503A                     
 30162                           ;Types.c: 71: {
 30163                           ;Types.c: 72: pChunk -= pMax;
 30164  01503A  5003               	movf	i2Byte_GetZone@pMax,w,c
 30165  01503C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30166                           
 30167                           ;Types.c: 73: Offset += 1;
 30168  01503E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30169  015040                     i2l732:
 30170  015040  5003               	movf	i2Byte_GetZone@pMax,w,c
 30171  015042  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30172  015044  B0D8               	btfsc	status,0,c
 30173  015046  D7F9               	goto	i2l733
 30174                           
 30175                           ;Types.c: 74: }
 30176                           ;Types.c: 75: pChunk *= pChunkSize;
 30177  015048  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30178  01504A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30179  01504C  50F3               	movf	prodl,w,c
 30180  01504E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30181                           
 30182                           ;Types.c: 76: pChunk += Offset;
 30183  015050  5008               	movf	i2Byte_GetZone@Offset,w,c
 30184  015052  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30185                           
 30186                           ;Types.c: 78: Output >>= pChunk;
 30187  015054  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30188  015056  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30189  015058  D002               	goto	i2u486_40
 30190  01505A                     i2u486_45:
 30191  01505A  90D8               	bcf	status,0,c
 30192  01505C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30193  01505E                     i2u486_40:
 30194  01505E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30195  015060  D7FC               	goto	i2u486_45
 30196                           
 30197                           ;Types.c: 79: Output &= MASK;
 30198  015062  5007               	movf	i2Byte_GetZone@MASK,w,c
 30199  015064  1609               	andwf	i2Byte_GetZone@Output,f,c
 30200                           
 30201                           ;Types.c: 80: return Output;
 30202  015066  5009               	movf	i2Byte_GetZone@Output,w,c
 30203  015068  0012               	return	
 30204  01506A                     __end_ofi2_Byte_GetZone:
 30205                           	opt stack 0
 30206                           tosu	equ	0xFFF
 30207                           tosh	equ	0xFFE
 30208                           tosl	equ	0xFFD
 30209                           pclatu	equ	0xFFB
 30210                           pclath	equ	0xFFA
 30211                           tblptru	equ	0xFF8
 30212                           tblptrh	equ	0xFF7
 30213                           tblptrl	equ	0xFF6
 30214                           tablat	equ	0xFF5
 30215                           prodh	equ	0xFF4
 30216                           prodl	equ	0xFF3
 30217                           intcon	equ	0xFF2
 30218                           indf0	equ	0xFEF
 30219                           postinc0	equ	0xFEE
 30220                           fsr0h	equ	0xFEA
 30221                           fsr0l	equ	0xFE9
 30222                           wreg	equ	0xFE8
 30223                           indf1	equ	0xFE7
 30224                           postdec1	equ	0xFE5
 30225                           fsr1h	equ	0xFE2
 30226                           fsr1l	equ	0xFE1
 30227                           indf2	equ	0xFDF
 30228                           postinc2	equ	0xFDE
 30229                           postdec2	equ	0xFDD
 30230                           plusw2	equ	0xFDB
 30231                           fsr2h	equ	0xFDA
 30232                           fsr2l	equ	0xFD9
 30233                           status	equ	0xFD8
 30234                           
 30235 ;; *************** function i2_Byte_SetBit *****************
 30236 ;; Defined at:
 30237 ;;		line 32 in file "Library/Types.c"
 30238 ;; Parameters:    Size  Location     Type
 30239 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30240 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30241 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30242 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30243 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30244 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30245 ;;		 -> NULL(0), 
 30246 ;;  pBit            1    2[COMRAM] unsigned char 
 30247 ;;  pValue          1    3[COMRAM] unsigned char 
 30248 ;; Auto vars:     Size  Location     Type
 30249 ;;		None
 30250 ;; Return value:  Size  Location     Type
 30251 ;;                  1    wreg      void 
 30252 ;; Registers used:
 30253 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30254 ;; Tracked objects:
 30255 ;;		On entry : 0/0
 30256 ;;		On exit  : 0/0
 30257 ;;		Unchanged: 0/0
 30258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30261 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30262 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30263 ;;Total ram usage:        7 bytes
 30264 ;; Hardware stack levels used:    1
 30265 ;; This function calls:
 30266 ;;		Nothing
 30267 ;; This function is called by:
 30268 ;;		i2_Port_SetPin
 30269 ;; This function uses a non-reentrant model
 30270 ;;
 30271                           
 30272                           	psect	text166
 30273  0159C2                     __ptext166:
 30274                           	opt stack 0
 30275  0159C2                     i2_Byte_SetBit:
 30276                           	opt stack 15
 30277                           
 30278                           ;Types.c: 34: pValue &= 1;
 30279                           
 30280                           ;incstack = 0
 30281  0159C2  0E01               	movlw	1
 30282  0159C4  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30283                           
 30284                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30285  0159C6  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30286  0159CA  0E01               	movlw	1
 30287  0159CC  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30288  0159CE  2A05               	incf	??i2_Byte_SetBit,f,c
 30289  0159D0  D002               	goto	i2u542_44
 30290  0159D2                     i2u542_45:
 30291  0159D2  90D8               	bcf	status,0,c
 30292  0159D4  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30293  0159D6                     i2u542_44:
 30294  0159D6  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30295  0159D8  D7FC               	goto	i2u542_45
 30296  0159DA  5006               	movf	??i2_Byte_SetBit+1,w,c
 30297  0159DC  0AFF               	xorlw	255
 30298  0159DE  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30299  0159E0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30300  0159E4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30301  0159E8  5007               	movf	??i2_Byte_SetBit+2,w,c
 30302  0159EA  16DF               	andwf	indf2,f,c
 30303                           
 30304                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30305  0159EC  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30306  0159F0  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30307  0159F4  2A05               	incf	??i2_Byte_SetBit,f,c
 30308  0159F6  D002               	goto	i2u543_44
 30309  0159F8                     i2u543_45:
 30310  0159F8  90D8               	bcf	status,0,c
 30311  0159FA  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30312  0159FC                     i2u543_44:
 30313  0159FC  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30314  0159FE  D7FC               	goto	i2u543_45
 30315  015A00  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30316  015A04  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30317  015A08  5006               	movf	??i2_Byte_SetBit+1,w,c
 30318  015A0A  12DF               	iorwf	indf2,f,c
 30319  015A0C  0012               	return		;funcret
 30320  015A0E                     __end_ofi2_Byte_SetBit:
 30321                           	opt stack 0
 30322                           tosu	equ	0xFFF
 30323                           tosh	equ	0xFFE
 30324                           tosl	equ	0xFFD
 30325                           pclatu	equ	0xFFB
 30326                           pclath	equ	0xFFA
 30327                           tblptru	equ	0xFF8
 30328                           tblptrh	equ	0xFF7
 30329                           tblptrl	equ	0xFF6
 30330                           tablat	equ	0xFF5
 30331                           prodh	equ	0xFF4
 30332                           prodl	equ	0xFF3
 30333                           intcon	equ	0xFF2
 30334                           indf0	equ	0xFEF
 30335                           postinc0	equ	0xFEE
 30336                           fsr0h	equ	0xFEA
 30337                           fsr0l	equ	0xFE9
 30338                           wreg	equ	0xFE8
 30339                           indf1	equ	0xFE7
 30340                           postdec1	equ	0xFE5
 30341                           fsr1h	equ	0xFE2
 30342                           fsr1l	equ	0xFE1
 30343                           indf2	equ	0xFDF
 30344                           postinc2	equ	0xFDE
 30345                           postdec2	equ	0xFDD
 30346                           plusw2	equ	0xFDB
 30347                           fsr2h	equ	0xFDA
 30348                           fsr2l	equ	0xFD9
 30349                           status	equ	0xFD8
 30350                           
 30351 ;; *************** function i2_MXK_SwitchTo *****************
 30352 ;; Defined at:
 30353 ;;		line 105 in file "Library/MXK.c"
 30354 ;; Parameters:    Size  Location     Type
 30355 ;;  pModule         1    wreg     enum E6927
 30356 ;; Auto vars:     Size  Location     Type
 30357 ;;  pModule         1    7[COMRAM] enum E6927
 30358 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30359 ;; Return value:  Size  Location     Type
 30360 ;;                  1    wreg      unsigned char 
 30361 ;; Registers used:
 30362 ;;		wreg, status,2, status,0, cstack
 30363 ;; Tracked objects:
 30364 ;;		On entry : 0/0
 30365 ;;		On exit  : 0/0
 30366 ;;		Unchanged: 0/0
 30367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30369 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30371 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30372 ;;Total ram usage:        2 bytes
 30373 ;; Hardware stack levels used:    1
 30374 ;; Hardware stack levels required when called:    1
 30375 ;; This function calls:
 30376 ;;		i2_delay_us
 30377 ;; This function is called by:
 30378 ;;		i2_Motor_Step
 30379 ;; This function uses a non-reentrant model
 30380 ;;
 30381                           
 30382                           	psect	text167
 30383  015F2C                     __ptext167:
 30384                           	opt stack 0
 30385  015F2C                     i2_MXK_SwitchTo:
 30386                           	opt stack 15
 30387                           
 30388                           ;incstack = 0
 30389                           ;i2MXK_SwitchTo@pModule stored from wreg
 30390  015F2C  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30391                           
 30392                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30393  015F2E  5086               	movf	3974,w,c	;volatile
 30394  015F30  0B0F               	andlw	15
 30395  015F32  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30396                           
 30397                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30398  015F34  504B               	movf	_Bus_State,w,c
 30399  015F36  A4D8               	btfss	status,2,c
 30400  015F38  D002               	goto	i2l1730
 30401                           
 30402                           ;MXK.c: 110: return 0;
 30403  015F3A  0E00               	movlw	0
 30404  015F3C  0012               	return	
 30405  015F3E                     i2l1730:
 30406                           
 30407                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30408  015F3E  0E00               	movlw	0
 30409  015F40  6E4B               	movwf	_Bus_State,c
 30410                           
 30411                           ;MXK.c: 114: if (CUR != pModule)
 30412  015F42  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30413  015F44  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30414  015F46  B4D8               	btfsc	status,2,c
 30415  015F48  D00A               	goto	i2l1732
 30416                           
 30417                           ;MXK.c: 115: {
 30418                           ;MXK.c: 116: PORTG &= ~(0xF);
 30419  015F4A  0EF0               	movlw	240
 30420  015F4C  1686               	andwf	3974,f,c	;volatile
 30421                           
 30422                           ;MXK.c: 117: PORTG |= pModule;
 30423  015F4E  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30424  015F50  1286               	iorwf	3974,f,c	;volatile
 30425                           
 30426                           ;MXK.c: 120: delay_us(10);
 30427  015F52  0E00               	movlw	0
 30428  015F54  6E02               	movwf	i2delay_us@us+1,c
 30429  015F56  0E0A               	movlw	10
 30430  015F58  6E01               	movwf	i2delay_us@us,c
 30431  015F5A  EC87  F0AE         	call	i2_delay_us	;wreg free
 30432  015F5E                     i2l1732:
 30433                           
 30434                           ;MXK.c: 121: }
 30435                           ;MXK.c: 122: return 1;
 30436  015F5E  0E01               	movlw	1
 30437  015F60  0012               	return	
 30438  015F62                     __end_ofi2_MXK_SwitchTo:
 30439                           	opt stack 0
 30440                           tosu	equ	0xFFF
 30441                           tosh	equ	0xFFE
 30442                           tosl	equ	0xFFD
 30443                           pclatu	equ	0xFFB
 30444                           pclath	equ	0xFFA
 30445                           tblptru	equ	0xFF8
 30446                           tblptrh	equ	0xFF7
 30447                           tblptrl	equ	0xFF6
 30448                           tablat	equ	0xFF5
 30449                           prodh	equ	0xFF4
 30450                           prodl	equ	0xFF3
 30451                           intcon	equ	0xFF2
 30452                           indf0	equ	0xFEF
 30453                           postinc0	equ	0xFEE
 30454                           fsr0h	equ	0xFEA
 30455                           fsr0l	equ	0xFE9
 30456                           wreg	equ	0xFE8
 30457                           indf1	equ	0xFE7
 30458                           postdec1	equ	0xFE5
 30459                           fsr1h	equ	0xFE2
 30460                           fsr1l	equ	0xFE1
 30461                           indf2	equ	0xFDF
 30462                           postinc2	equ	0xFDE
 30463                           postdec2	equ	0xFDD
 30464                           plusw2	equ	0xFDB
 30465                           fsr2h	equ	0xFDA
 30466                           fsr2l	equ	0xFD9
 30467                           status	equ	0xFD8
 30468                           
 30469 ;; *************** function i2_delay_us *****************
 30470 ;; Defined at:
 30471 ;;		line 255 in file "Library/Types.c"
 30472 ;; Parameters:    Size  Location     Type
 30473 ;;  us              2    0[COMRAM] unsigned short 
 30474 ;; Auto vars:     Size  Location     Type
 30475 ;;  delay_us        4    2[COMRAM] unsigned long 
 30476 ;; Return value:  Size  Location     Type
 30477 ;;                  1    wreg      void 
 30478 ;; Registers used:
 30479 ;;		wreg, status,2, status,0
 30480 ;; Tracked objects:
 30481 ;;		On entry : 0/0
 30482 ;;		On exit  : 0/0
 30483 ;;		Unchanged: 0/0
 30484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30486 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30488 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30489 ;;Total ram usage:        6 bytes
 30490 ;; Hardware stack levels used:    1
 30491 ;; This function calls:
 30492 ;;		Nothing
 30493 ;; This function is called by:
 30494 ;;		i2_MXK_SwitchTo
 30495 ;; This function uses a non-reentrant model
 30496 ;;
 30497                           
 30498                           	psect	text168
 30499  015D0E                     __ptext168:
 30500                           	opt stack 0
 30501  015D0E                     i2_delay_us:
 30502                           	opt stack 15
 30503                           
 30504                           ;Types.c: 256: unsigned long u;
 30505                           ;Types.c: 257: while (us--) {
 30506                           
 30507                           ;incstack = 0
 30508  015D0E  D016               	goto	i2u546_40
 30509  015D10                     i2l9024:
 30510                           
 30511                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30512  015D10  0E00               	movlw	0
 30513  015D12  6E03               	movwf	i2delay_us@u,c
 30514  015D14  0E00               	movlw	0
 30515  015D16  6E04               	movwf	i2delay_us@u+1,c
 30516  015D18  0E00               	movlw	0
 30517  015D1A  6E05               	movwf	i2delay_us@u+2,c
 30518  015D1C  0E00               	movlw	0
 30519  015D1E  6E06               	movwf	i2delay_us@u+3,c
 30520  015D20                     i2l9026:
 30521  015D20  5003               	movf	i2delay_us@u,w,c
 30522  015D22  1004               	iorwf	i2delay_us@u+1,w,c
 30523  015D24  1005               	iorwf	i2delay_us@u+2,w,c
 30524  015D26  1006               	iorwf	i2delay_us@u+3,w,c
 30525  015D28  A4D8               	btfss	status,2,c
 30526  015D2A  D008               	goto	i2u546_40
 30527  015D2C  F000               	nop		; ;# 
 30528  015D2E  0E01               	movlw	1
 30529  015D30  2603               	addwf	i2delay_us@u,f,c
 30530  015D32  0E00               	movlw	0
 30531  015D34  2204               	addwfc	i2delay_us@u+1,f,c
 30532  015D36  2205               	addwfc	i2delay_us@u+2,f,c
 30533  015D38  2206               	addwfc	i2delay_us@u+3,f,c
 30534  015D3A  D7F2               	goto	i2l9026
 30535  015D3C                     i2u546_40:
 30536  015D3C  0601               	decf	i2delay_us@us,f,c
 30537  015D3E  A0D8               	btfss	status,0,c
 30538  015D40  0602               	decf	i2delay_us@us+1,f,c
 30539  015D42  2801               	incf	i2delay_us@us,w,c
 30540  015D44  E1E5               	bnz	i2l9024
 30541  015D46  2802               	incf	i2delay_us@us+1,w,c
 30542  015D48  B4D8               	btfsc	status,2,c
 30543  015D4A  0012               	return	
 30544  015D4C  D7E1               	goto	i2l832
 30545  015D4E                     __end_ofi2_delay_us:
 30546                           	opt stack 0
 30547                           tosu	equ	0xFFF
 30548                           tosh	equ	0xFFE
 30549                           tosl	equ	0xFFD
 30550                           pclatu	equ	0xFFB
 30551                           pclath	equ	0xFFA
 30552                           tblptru	equ	0xFF8
 30553                           tblptrh	equ	0xFF7
 30554                           tblptrl	equ	0xFF6
 30555                           tablat	equ	0xFF5
 30556                           prodh	equ	0xFF4
 30557                           prodl	equ	0xFF3
 30558                           intcon	equ	0xFF2
 30559                           indf0	equ	0xFEF
 30560                           postinc0	equ	0xFEE
 30561                           fsr0h	equ	0xFEA
 30562                           fsr0l	equ	0xFE9
 30563                           wreg	equ	0xFE8
 30564                           indf1	equ	0xFE7
 30565                           postdec1	equ	0xFE5
 30566                           fsr1h	equ	0xFE2
 30567                           fsr1l	equ	0xFE1
 30568                           indf2	equ	0xFDF
 30569                           postinc2	equ	0xFDE
 30570                           postdec2	equ	0xFDD
 30571                           plusw2	equ	0xFDB
 30572                           fsr2h	equ	0xFDA
 30573                           fsr2l	equ	0xFD9
 30574                           status	equ	0xFD8
 30575                           
 30576 ;; *************** function i2_MXK_Release *****************
 30577 ;; Defined at:
 30578 ;;		line 130 in file "Library/MXK.c"
 30579 ;; Parameters:    Size  Location     Type
 30580 ;;		None
 30581 ;; Auto vars:     Size  Location     Type
 30582 ;;		None
 30583 ;; Return value:  Size  Location     Type
 30584 ;;                  1    wreg      unsigned char 
 30585 ;; Registers used:
 30586 ;;		wreg, status,2, status,0
 30587 ;; Tracked objects:
 30588 ;;		On entry : 0/0
 30589 ;;		On exit  : 0/0
 30590 ;;		Unchanged: 0/0
 30591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30596 ;;Total ram usage:        0 bytes
 30597 ;; Hardware stack levels used:    1
 30598 ;; This function calls:
 30599 ;;		Nothing
 30600 ;; This function is called by:
 30601 ;;		i2_Motor_Step
 30602 ;; This function uses a non-reentrant model
 30603 ;;
 30604                           
 30605                           	psect	text169
 30606  016562                     __ptext169:
 30607                           	opt stack 0
 30608  016562                     i2_MXK_Release:
 30609                           	opt stack 16
 30610                           
 30611                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30612                           
 30613                           ;incstack = 0
 30614  016562  0E01               	movlw	1
 30615  016564  6E4B               	movwf	_Bus_State,c
 30616                           
 30617                           ;MXK.c: 135: return 1;
 30618                           ;	Return value of i2_MXK_Release is never used
 30619  016566  0012               	return	
 30620  016568                     __end_ofi2_MXK_Release:
 30621                           	opt stack 0
 30622                           tosu	equ	0xFFF
 30623                           tosh	equ	0xFFE
 30624                           tosl	equ	0xFFD
 30625                           pclatu	equ	0xFFB
 30626                           pclath	equ	0xFFA
 30627                           tblptru	equ	0xFF8
 30628                           tblptrh	equ	0xFF7
 30629                           tblptrl	equ	0xFF6
 30630                           tablat	equ	0xFF5
 30631                           prodh	equ	0xFF4
 30632                           prodl	equ	0xFF3
 30633                           intcon	equ	0xFF2
 30634                           indf0	equ	0xFEF
 30635                           postinc0	equ	0xFEE
 30636                           fsr0h	equ	0xFEA
 30637                           fsr0l	equ	0xFE9
 30638                           wreg	equ	0xFE8
 30639                           indf1	equ	0xFE7
 30640                           postdec1	equ	0xFE5
 30641                           fsr1h	equ	0xFE2
 30642                           fsr1l	equ	0xFE1
 30643                           indf2	equ	0xFDF
 30644                           postinc2	equ	0xFDE
 30645                           postdec2	equ	0xFDD
 30646                           plusw2	equ	0xFDB
 30647                           fsr2h	equ	0xFDA
 30648                           fsr2l	equ	0xFD9
 30649                           status	equ	0xFD8
 30650                           
 30651 ;; *************** function i2_MXK_Queue *****************
 30652 ;; Defined at:
 30653 ;;		line 144 in file "Library/MXK.c"
 30654 ;; Parameters:    Size  Location     Type
 30655 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30656 ;;		 -> Absolute function(1), Motor_Step(1), 
 30657 ;; Auto vars:     Size  Location     Type
 30658 ;;		None
 30659 ;; Return value:  Size  Location     Type
 30660 ;;                  1    wreg      void 
 30661 ;; Registers used:
 30662 ;;		wreg, status,2, status,0
 30663 ;; Tracked objects:
 30664 ;;		On entry : 0/0
 30665 ;;		On exit  : 0/0
 30666 ;;		Unchanged: 0/0
 30667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30668 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30671 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30672 ;;Total ram usage:        3 bytes
 30673 ;; Hardware stack levels used:    1
 30674 ;; This function calls:
 30675 ;;		Nothing
 30676 ;; This function is called by:
 30677 ;;		i2_Motor_Step
 30678 ;; This function uses a non-reentrant model
 30679 ;;
 30680                           
 30681                           	psect	text170
 30682  0164C8                     __ptext170:
 30683                           	opt stack 0
 30684  0164C8                     i2_MXK_Queue:
 30685                           	opt stack 16
 30686                           
 30687                           ;MXK.c: 146: lQueue = pCallback;
 30688                           
 30689                           ;incstack = 0
 30690  0164C8  C001  F0BA         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30691  0164CC  C002  F0BB         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30692  0164D0  C003  F0BC         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30693  0164D4  0012               	return		;funcret
 30694  0164D6                     __end_ofi2_MXK_Queue:
 30695                           	opt stack 0
 30696                           tosu	equ	0xFFF
 30697                           tosh	equ	0xFFE
 30698                           tosl	equ	0xFFD
 30699                           pclatu	equ	0xFFB
 30700                           pclath	equ	0xFFA
 30701                           tblptru	equ	0xFF8
 30702                           tblptrh	equ	0xFF7
 30703                           tblptrl	equ	0xFF6
 30704                           tablat	equ	0xFF5
 30705                           prodh	equ	0xFF4
 30706                           prodl	equ	0xFF3
 30707                           intcon	equ	0xFF2
 30708                           indf0	equ	0xFEF
 30709                           postinc0	equ	0xFEE
 30710                           fsr0h	equ	0xFEA
 30711                           fsr0l	equ	0xFE9
 30712                           wreg	equ	0xFE8
 30713                           indf1	equ	0xFE7
 30714                           postdec1	equ	0xFE5
 30715                           fsr1h	equ	0xFE2
 30716                           fsr1l	equ	0xFE1
 30717                           indf2	equ	0xFDF
 30718                           postinc2	equ	0xFDE
 30719                           postdec2	equ	0xFDD
 30720                           plusw2	equ	0xFDB
 30721                           fsr2h	equ	0xFDA
 30722                           fsr2l	equ	0xFD9
 30723                           status	equ	0xFD8
 30724                           tosu	equ	0xFFF
 30725                           tosh	equ	0xFFE
 30726                           tosl	equ	0xFFD
 30727                           pclatu	equ	0xFFB
 30728                           pclath	equ	0xFFA
 30729                           tblptru	equ	0xFF8
 30730                           tblptrh	equ	0xFF7
 30731                           tblptrl	equ	0xFF6
 30732                           tablat	equ	0xFF5
 30733                           prodh	equ	0xFF4
 30734                           prodl	equ	0xFF3
 30735                           intcon	equ	0xFF2
 30736                           indf0	equ	0xFEF
 30737                           postinc0	equ	0xFEE
 30738                           fsr0h	equ	0xFEA
 30739                           fsr0l	equ	0xFE9
 30740                           wreg	equ	0xFE8
 30741                           indf1	equ	0xFE7
 30742                           postdec1	equ	0xFE5
 30743                           fsr1h	equ	0xFE2
 30744                           fsr1l	equ	0xFE1
 30745                           indf2	equ	0xFDF
 30746                           postinc2	equ	0xFDE
 30747                           postdec2	equ	0xFDD
 30748                           plusw2	equ	0xFDB
 30749                           fsr2h	equ	0xFDA
 30750                           fsr2l	equ	0xFD9
 30751                           status	equ	0xFD8
 30752                           
 30753                           	psect	text171
 30754  000000                     __ptext171:
 30755                           	opt stack 0
 30756                           tosu	equ	0xFFF
 30757                           tosh	equ	0xFFE
 30758                           tosl	equ	0xFFD
 30759                           pclatu	equ	0xFFB
 30760                           pclath	equ	0xFFA
 30761                           tblptru	equ	0xFF8
 30762                           tblptrh	equ	0xFF7
 30763                           tblptrl	equ	0xFF6
 30764                           tablat	equ	0xFF5
 30765                           prodh	equ	0xFF4
 30766                           prodl	equ	0xFF3
 30767                           intcon	equ	0xFF2
 30768                           indf0	equ	0xFEF
 30769                           postinc0	equ	0xFEE
 30770                           fsr0h	equ	0xFEA
 30771                           fsr0l	equ	0xFE9
 30772                           wreg	equ	0xFE8
 30773                           indf1	equ	0xFE7
 30774                           postdec1	equ	0xFE5
 30775                           fsr1h	equ	0xFE2
 30776                           fsr1l	equ	0xFE1
 30777                           indf2	equ	0xFDF
 30778                           postinc2	equ	0xFDE
 30779                           postdec2	equ	0xFDD
 30780                           plusw2	equ	0xFDB
 30781                           fsr2h	equ	0xFDA
 30782                           fsr2l	equ	0xFD9
 30783                           status	equ	0xFD8
 30784                           
 30785                           	psect	rparam
 30786  0000                     tosu	equ	0xFFF
 30787                           tosh	equ	0xFFE
 30788                           tosl	equ	0xFFD
 30789                           pclatu	equ	0xFFB
 30790                           pclath	equ	0xFFA
 30791                           tblptru	equ	0xFF8
 30792                           tblptrh	equ	0xFF7
 30793                           tblptrl	equ	0xFF6
 30794                           tablat	equ	0xFF5
 30795                           prodh	equ	0xFF4
 30796                           prodl	equ	0xFF3
 30797                           intcon	equ	0xFF2
 30798                           indf0	equ	0xFEF
 30799                           postinc0	equ	0xFEE
 30800                           fsr0h	equ	0xFEA
 30801                           fsr0l	equ	0xFE9
 30802                           wreg	equ	0xFE8
 30803                           indf1	equ	0xFE7
 30804                           postdec1	equ	0xFE5
 30805                           fsr1h	equ	0xFE2
 30806                           fsr1l	equ	0xFE1
 30807                           indf2	equ	0xFDF
 30808                           postinc2	equ	0xFDE
 30809                           postdec2	equ	0xFDD
 30810                           plusw2	equ	0xFDB
 30811                           fsr2h	equ	0xFDA
 30812                           fsr2l	equ	0xFD9
 30813                           status	equ	0xFD8
 30814                           
 30815                           	psect	temp
 30816  000051                     btemp:
 30817                           	opt stack 0
 30818  000051                     	ds	1
 30819  0000                     int$flags	set	btemp
 30820  0000                     wtemp6	set	btemp+1
 30821                           tosu	equ	0xFFF
 30822                           tosh	equ	0xFFE
 30823                           tosl	equ	0xFFD
 30824                           pclatu	equ	0xFFB
 30825                           pclath	equ	0xFFA
 30826                           tblptru	equ	0xFF8
 30827                           tblptrh	equ	0xFF7
 30828                           tblptrl	equ	0xFF6
 30829                           tablat	equ	0xFF5
 30830                           prodh	equ	0xFF4
 30831                           prodl	equ	0xFF3
 30832                           intcon	equ	0xFF2
 30833                           indf0	equ	0xFEF
 30834                           postinc0	equ	0xFEE
 30835                           fsr0h	equ	0xFEA
 30836                           fsr0l	equ	0xFE9
 30837                           wreg	equ	0xFE8
 30838                           indf1	equ	0xFE7
 30839                           postdec1	equ	0xFE5
 30840                           fsr1h	equ	0xFE2
 30841                           fsr1l	equ	0xFE1
 30842                           indf2	equ	0xFDF
 30843                           postinc2	equ	0xFDE
 30844                           postdec2	equ	0xFDD
 30845                           plusw2	equ	0xFDB
 30846                           fsr2h	equ	0xFDA
 30847                           fsr2l	equ	0xFD9
 30848                           status	equ	0xFD8


Data Sizes:
    Strings     97
    Constant    730
    Data        29
    BSS         822
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     90     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     251
    BANK4           256      0     200
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_8(CODE[34]), STR_7(CODE[3]), STR_6(CODE[14]), STR_5(CODE[3]), 
		 -> STR_4(CODE[46]), STR_3(CODE[3]), STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK3[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _mode4->___fltol
    _irobot_rotate_to->___fltol
    _irobot_rotate->_irobot_move
    _irobot_angle_wait->_load_iRScriptStack
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _init->_HMI_Init
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _irobot_rotate_to->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1580792
                                              8 BANK3      2     2      0
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
 ---------------------------------------------------------------------------------
 (1) _mode4                                                9     9      0  208832
                                              0 BANK3      5     5      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
               _irobot_move_straight
                   _irobot_rotate_to
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate_to                                     4     0      4    8495
                                              2 BANK1      4     0      4
                            ___fltol (ARG)
                  _irobot_angle_wait
                      _irobot_rotate
                 _irobot_stop_motion
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                        5     1      4    3671
                                             25 BANK0      5     1      4
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_angle_wait                                    4     2      2    1221
                                             16 BANK0      4     2      2
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  169542
                                             44 BANK0      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3510
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  193576
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _printf                                              25    17      8    5579
                                             21 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (4) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (5) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (7) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (6) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1249
                                             82 BANK0      8     4      4
                                              0 BANK1      2     2      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (2) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (3) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (4) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4    8729
                                             64 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    3065
                                             39 BANK0     25    17      8
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    4007
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  997184
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362312
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261813
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94437
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (3) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   11658
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (4) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
   _mode4
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     ___xxtofl
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_rotate_to
       ___fltol (ARG)
         _ADC_Voltage (ARG)
           ___fldiv
             ___xxtofl (ARG)
           ___flmul
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
           ___xxtofl (ARG)
       _irobot_angle_wait (ARG)
         _load_iRScriptStack
         _twos_complement_of
       _irobot_rotate (ARG)
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_stop_motion (ARG)
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      C8      14       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A      FB      11       98.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4B3      12        0.0%
DATA                 0      0     5DF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Sep 12 12:36:01 2017

                                 _update_angle 645E                                  i2_Timer0_Stop 655C  
                             SPI_Init@pChannel 0091                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 37B8                                              _A 004C  
                        __end_of_irobot_rotate 55F0                                              l8 3C80  
                                 ___fldiv@aexp 0086                                   ___fldiv@bexp 0085  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 62F6                                   ___fldiv@sign 007A  
                                           l11 30A4                                             l12 308E  
                                           l90 2FDA                                             l85 2ED6  
                                           l87 2F44                                             l89 2FB0  
                                 ___awdiv@sign 0065                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 0062                                  _HMI_DIPSwitch 6394  
                           LCD_DrawField@pSize 0078                             LCD_DrawField@count 007E  
                   __end_of_irobot_stop_motion 5BBC                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 64FA                           ADC_ClockDivision@reg 0061  
                                          l120 4A62                                            l121 4A78  
                                          l122 4A8E                                            l220 56F8  
                                          l117 4AA4                                            l221 56BC  
                                          l118 4A4C                                            l230 5944  
                                          l222 5708                                            l223 56DA  
                                  ?_LED_Toggle 0001                                            l234 5AD6  
                                          l235 5AA6                                            l227 5960  
                                          l403 2B64                                            l412 2840  
                                          l228 5928                                            l340 4710  
                                          l404 2B04                                            l421 27D4  
                                          l413 26D6                                            l237 5ABE  
                                          l341 471E                                            l405 2B94  
                                ??_Console_Tab 0068                                            l414 285C  
                                          l430 3DF4                                            l350 4818  
                                          l342 472C                                            l510 1D02  
                                          l406 2B1C                                            l415 26FC  
                                          l351 47A8                                            l343 473A  
                                          l511 1E12                                            l407 2B34  
                                          l183 48CC                                            l600 04B2  
                                          l432 3E1E                                            l344 4748  
                                          l512 1D24                                            l408 2B4C  
                                          l184 48A6                                            l417 2768  
                                          l601 0646                                            l433 3E4E  
                                          l353 47B6                                            l337 4772  
                                          l345 4756                                            l610 06CE  
                                          l602 04E4                                            l354 47C4  
                                          l346 4764                                            l338 4702  
                                          l370 46A2                                            l611 071C  
                                          l603 0658                                            l427 3E78  
                                          l355 47D2                                            l363 46CC  
                                          l371 46B0                                            l531 17BC  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 47E0  
                                          l372 46BE                                            l364 465C  
                                          l532 17E0                                            l516 1D6C  
                                          l357 47EE                                            l509 1DF6  
                                          l614 084C                                            l358 47FC  
                                          l366 466A                                            l526 1800  
                                          l615 0844                                            l607 07B8  
                                          l359 480A                                            l367 4678  
                                          l519 1DB4                                            l616 085E  
                                          l608 0680                                            l368 4686  
                                          l528 181E                                            l393 57C8  
                                          l617 0848                                            l609 07D6  
                                          l369 4694                                            l529 179C  
                                          l483 1B62                                            l732 49E6  
                                          l476 1C3A                                            l900 18DA  
                                          l733 49DA                                            l389 54BA  
                                          l477 1AAC                                            l397 5A9A  
                                          l901 18DE                                            l726 427A  
                                          l478 1C56                                            l486 1BCE  
                                          l654 613C                                            l910 1902  
                                          l902 18E2                                            l727 426E  
                                          l479 1AF6                                            l655 6134  
                                          l911 1906                                            l903 18E6  
                                          l824 53EE                                            l832 58D2  
                                          l912 190A                                            l904 18EA  
                                          l673 601A                                            l657 6138  
                                          l681 5328                                            l913 190E  
                                          l905 18EE                                            l921 52F8  
                                          l914 1912                                            l906 18F2  
                                          l922 52C4                                            l930 39E6  
                                          l819 4EFE                                            l915 1916  
                                          l907 18F6                                            l684 533E  
                                          l916 191A                                            l908 18FA  
                                          l860 183A                                            l781 5E34  
                                          l597 04C0                                            l853 1922  
                                          l917 191E                                            l909 18FE  
                                          l861 183E                                            l598 04A8  
                                          l678 5364                                            l686 534E  
                                          l870 1862                                            l862 1842  
                                          l854 1826                                            l599 04D0  
                                          l679 5318                                            l871 1866  
                                          l863 1846                                            l776 5BEC  
                                          l880 188A                                            l872 186A  
                                          l864 184A                                            l856 182A  
                                          l928 3A66                                            l881 188E  
                                          l873 186E                                            l865 184E  
                                          l857 182E                                            l929 3A36  
                                          l890 18B2                                            l882 1892  
                                          l874 1872                                            l866 1852  
                                          l858 1832                                            l891 18B6  
                                          l883 1896                                            l875 1876  
                                          l867 1856                                            l859 1836  
                                          l892 18BA                                            l884 189A  
                                          l876 187A                                            l868 185A  
                                          l893 18BE                                            l885 189E  
                                          l877 187E                                            l869 185E  
                                          l894 18C2                                            l886 18A2  
                                          l878 1882                                            l990 4B6E  
                                          l895 18C6                                            l887 18A6  
                                          l879 1886                                            l983 496A  
                                          l976 4C88                                            l896 18CA  
                                          l888 18AA                                            l992 4B7E  
                                          l984 48EE                                            l897 18CE  
                                          l889 18AE                                            l985 4966  
                                          l978 4C98                                            l898 18D2  
                                          l899 18D6                                            l997 572E  
                                          l999 5752                                            _PR2 000FCB  
                                          _dip 0325                                            _val 00CC  
                              __end_of_ADC_Off 653C                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 0079                                   _Word_GetPair 5E08  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 0067                     __end_of_ADC_ConversionTime 5B30  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 0070                             Console_MakeField@y 0071  
                                   _TXSTA1bits 000FAD                                _update_distance 644C  
                                 Console_Tab@c 006F                                   Console_Tab@i 006E  
                          LCD_DrawField@pField 0072                                   Console_Tab@t 006D  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 0094  
                                 ___flmul@bexp 0099                                     i2_delay_us 5D0E  
                         Port_Set@TypeRequired 0082                                   ___flmul@sign 0093  
                                 ___flmul@temp 009E                                   ___flmul@prod 009A  
                            Console_FormFeed@x 0062                              Console_FormFeed@y 0063  
                          LCD_DrawField@pPoint 0074                                 ?_LCD_DrawField 0072  
                        Port_SetPinType@Output 008A                                Port_SetPin@Type 0073  
                              Port_SetPin@pPin 0071                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 0069                                __end_of_LED_Set 5972  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 4506  
                                 ___fltol@exp1 0101                                   _Word_SetPair 5BBC  
                                         l1000 576E                                           l1010 3EE8  
                                         l1004 555A                                  ?_Byte_GetZone 0060  
                                         l1005 5588                                           l1200 419A  
                                         l1040 288A                                           l1201 41EE  
                                         l1009 3EF4                                           l1041 2890  
                                         l1202 420A                                           l1042 2896  
                                         l1043 289C                                           l1300 4D1A  
                                         l1204 4234                                           l1036 29E6  
                                         l1044 28A2                                           l2020 54CA  
                                         l2100 2C70                                           l1301 4D1E  
                                         l1205 421A                                           l1045 28A8  
                                         l1037 2884                                           l2021 54CE  
                                         l1302 4D28                                           l1062 20BE  
                                         l2110 5C76                                           l2022 54D2  
                                         l1303 4D36                                           l1063 20EC  
                                         l1207 4246                                           l1047 294E  
                                         l2023 54D6                                           l2031 396C  
                                         l1056 1F4E                                           l2024 54DA  
                                         l2040 38EC                                           l2032 38BE  
                                         l1313 5B10                                           l1153 232C  
                                         l1057 2114                                           l2017 54EA  
                                         l2025 54DE                                           l2114 53D8  
                                         l1082 3D6E                                           l1058 1F56  
                                         l1146 4E20                                           l2106 5C82  
                                         l2026 54E2                                           l2018 54C6  
                                         l2042 3900                                           l2034 38C8  
                                         l2115 539A                                           l1059 1F80  
                                         l2027 54E6                                           l2035 38CE  
                                         l2140 5806                                           l1084 3D76  
                                         l2108 5C6E                                           l2036 38D4  
                                         l1077 3D3E                                           l2045 392C  
                                         l2037 38DA                                           l1254 6440  
                                         l1158 5D8A                                           l2070 4C66  
                                         l2062 4C22                                           l2054 4BE8  
                                         l2038 38E0                                           l1079 3D4E  
                                         l2135 4386                                           l2047 3940  
                                         l2039 38E6                                           l2311 08EC  
                                         l2304 4108                                           l1280 4D9C  
                                         l2320 0A3E                                           l2152 55B0  
                                         l2305 4134                                           l2321 0A6E  
                                         l2306 4160                                           l2066 4C48  
                                         l2058 4C02                                           l2314 0908  
                                         l2154 55B6                                           l1283 4DFE  
                                         l2163 5BA0                                           l2091 2C26  
                                         l2323 0ABA                                           l1276 4D84  
                                         l2092 2BE0                                           l2316 0966  
                                         l2156 55D8                                           l2413 258A  
                                         l2333 0CC6                                           l2325 0B7C  
                                         l2341 3484                                           l1294 4D3E  
                                         l1630 35F2                                           l2414 2526  
                                         l2406 250A                                           l2094 2C56  
                                         l2334 0C2C                                           l2326 0ADA  
                                         l2318 099E                                           l1295 4D04  
                                         l1631 364E                                           l2423 2632  
                                         l2415 253E                                           l2407 251E  
                                         l2095 2C3A                                           l1296 4D68  
                                         l1632 3632                                           l2600 3FA8  
                                         l2424 2690                                           l2408 254E  
                                         l2416 2548                                           l2336 0C64  
                                         l2328 0B12                                           l2344 34A0  
                                         l1297 4D0E                                           l2425 2638  
                                         l2417 25C2                                           l2097 2D26  
                                         l2361 0D7E                                           l1298 4D12  
                                         l1730 5CA2                                           l2098 2C6A  
                                         l2346 355A                                           l2370 1008  
                                         l1299 4D16                                           l1627 369A  
                                         l2603 3FEA                                           l2419 25DC  
                                         l2099 2CB2                                           l2347 3510  
                                         l2371 0F66                                           l2363 0E2C  
                                         l1724 5DD6                                           l1732 5CCA  
                                         l1628 3690                                           l2604 3FF8  
                                         l2356 0D04                                           l1629 3610  
                                         l2605 400C                                           l2373 0F9E  
                                         l2365 0ECC                                           l1726 5E04  
                                         l2366 0EFC                                           l2390 588E  
                                         l1735 632A                                           l2359 0D20  
                                         l2391 5894                                           l2296 45DC  
                                         l2376 1078                                           l2368 0F46  
                                         l2392 589A                                           l2377 106A  
                                         l2298 460E                                           l2386 5882  
                                         l1827 3358                                           l2387 58A0  
                                         l1828 3378                                           l2660 3754  
                                         l2388 5888                                           l2661 3740  
                                         l1784 31F2                                           l2920 10F2  
                                         l2832 4FA6                                           l1785 3200  
                                         l2921 10E8                                           l2833 4F9A  
                                         l1873 5E7A                                           l2930 12D4  
                                         l2842 5674                                           l2666 3780  
                                         l2658 36D2                                           l1787 320A  
                                         l2931 1250                                           l2923 1122  
                                         l2843 5668                                           l2667 3770  
                                         l2780 4044                                           l2932 1288  
                                         l2924 1150                                           l2836 4FDC  
                                         l2596 3F74                                           l2933 127C  
                                         l2925 1146                                           l2837 4FEA  
                                         l2669 37A6                                           l2597 3F8A  
                                         l2950 1442                                           l2934 12D0  
                                         l2846 569E                                           l2783 40AE  
                                         l2927 11A4                                           l2919 10C4  
                                         l2847 56AC                                           l2599 3FB4  
                                         l2784 40C0                                           l2944 137A  
                                         l2960 00B4                                           l2937 1320  
                                         l2929 11D2                                           l2961 00DC  
                                         l2953 001E                                           l2946 13CA  
                                         l2938 12F6                                           l2954 0048  
                                         l2779 4054                                           l2947 13F8  
                                         l2939 130C                                           l2955 0042  
                                         l2948 142E                                           l2972 03BE  
                                         l2956 005A                                           l2949 143E  
                                         l2965 0364                                           l2957 0078  
                                         l2974 040E                                           l2966 033A  
                                         l2958 00A2                                           l2990 2406  
                                         l2982 2378                                           l2975 0434  
                                         l2967 0350                                           l2959 009C  
                                         l2983 2388                                           l2992 2472  
                                         l2984 23B0                                           l2977 0462  
                                         l2993 2462                                           l2978 048C  
                                         l2986 23C8                                           l2979 0482  
                                         l2987 23B8                                           l2997 2498  
                                         l2989 2424                                           l2998 24EA  
                               ??_Console_Init 0060                          Port_SetPinType@pInput 0086  
                                         STR_1 FFFB                                           STR_2 FF9D  
                                         STR_3 FFFB                                           STR_4 FF9D  
                                         STR_5 FFFB                                           STR_6 FFED  
                                         STR_7 FFFB                                           STR_8 FFCB  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 4848                       __end_of_irobot_song_play 6438  
                                         _PIR1 000F9E                                           _PIR2 000FA1  
                                         _PIR3 000FA4                                           u9200 5A46  
                          __end_of_GetPortTRIS 46FC                                           u9040 3FBA  
                                         u9140 542C                                           u9205 5A40  
                                         u9230 33C4                                           u9215 3310  
                                         u8600 49B0                                           u9080 405A  
                                         u9314 4B1E                                           u9315 4B18  
                                         u8620 4A16                                           u9260 590A  
                                         u8607 49A6                                           u8704 42B6  
                                         u8640 4E98                                           u8800 4BC8  
                                         u8705 42B0                                           u8625 4A10  
                                         u9505 1726                                           u8730 5C36  
                                         u8714 42E8                                           u9530 5F84  
                                         u8715 42E2                                           u9515 1768  
                                         u8820 4FAC                                           u9445 1494  
                                         u9390 5C62                                           u8735 5C30  
                                         u9455 14AC                                           u9535 5F7E  
                                         u9465 14C4                                           u8674 560C  
                                         u8850 567A                                           u8675 5606  
                                         u9475 14E6                                           _SPI1 0365  
                                         u8684 563E                                           u9708 3CEC  
                                         u8940 3A52                                           _SPI2 0370  
                                         u8685 5638                                           u9485 1666  
                                         u9910 3DB8                                           u9830 514C  
                                         u9718 3038                                           u8790 4BC2  
                                         u8950 5556                                           u9495 16E4  
                                         u9719 304C                                           u9920 3DC4  
                                         u8960 5580                                           u8875 647E  
                                         u8876 6480                                           u9790 5878  
                                         u9870 2B9A                                           u9768 3174  
                                         u9960 4E6E                                           _TMR0 000FD6  
                                         u9955 4E30                                           u9990 5B0A  
                     __end_of_irobot_rotate_to 60DE                 irobot_query_and_update@RXArray 0100  
                            rx_assign@packetID 0065                                           _gISR 0314  
                           Event_DIPSwitch@Bar 007A                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 0063                                  _iRVirtualWall 0030  
                         __size_of_ADC_SetupIO 0032                             SPI_MaxSpeed@pInput 006F  
                                ?_Byte_SetByte 0060                                  ?_Byte_SetPair 006B  
                              __end_of_SPI_DCS 6028                                           _main 587E  
                   irobot_leds@powerLuminosity 0072                                           _init 45B0  
                                         _mode 0323                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 006B                                           _itos 39A8  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 0060  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 4F7C                                  ??_Byte_SetBit 0064  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 0065                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 007F                              Timer0_Init@DIVIDE 0077  
                              ?_SPI_DisableISR 0060                               Motor_Move@pMotor 0063  
                          HMI_SetButton@pValue 0066                                  Console_Init@x 0062  
                                Console_Init@y 0063                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FF8F                           Set_Rotation@rotation 0066  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 61E6  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 587E  
                             __end_of_LCD_Init 3026                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 5718  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00A8  
                      GetPortProperties@pInput 0062                                  ??_Button_Poll 007E  
                             __end_of_HMI_Init 232E                                          l12122 4B64  
                                        l14000 2FE8                                          l12312 4234  
                                        l12128 4B74                                          l14012 4C7E  
                                        l13300 584E                                          l12260 3A52  
                                        l14100 5D58                                          l12432 53EE  
                                        l12440 542C                                          l13304 585C  
                                        l14018 4C8E                                          l12434 5400  
                                        l13324 5122                                          l14046 1F76  
                                        l12536 58D2                                          l12632 64A2  
                                        l13424 3D44                                          l13328 5130  
                                        l12538 58E4                                          l13418 3D34  
                                        l13382 2AFA                                          l13454 4E18  
                                        l14088 2300                                          l13528 31F2  
                                        l12498 3358                                          l14374 25E2  
                                        l16228 0ADA                               __end_of_HMI_Poll 50DE  
                                        l16262 0C2C                                          l16246 0B7C  
                                        l16416 1008                                          l13788 142E  
                                        l13990 2F44                                          l16398 0F66  
                                        _I2C1T 0040                                          _I2C2T 03C1  
                                ___fltol@sign1 0100                                          ?_main 0001  
                                        ?_init 0001                                __end_of___fldiv 1466  
                              __end_of___awdiv 4016                          irobot_rotate@isScript 007D  
                                        ?_itos 006C                                __end_of___flmul 04A6  
                              __end_of___fltol 37B8                                _Event_DIPSwitch 6058  
                              __end_of___lldiv 40D2                                          u10100 35D0  
                                        u10110 35E4                                          u10024 5FB0  
                                        u10120 3624                                          u10025 5FAA  
                                        u10070 325E                                          u11110 269C  
                                        u10410 13DE                                          u10420 140C  
                                        u11140 36F2                                          u10180 55A4  
                                        u10510 00C8                                          u10600 0422  
                                        u10520 02DC                                          u11145 36E6  
                                        u10610 0448                                          u11090 261E  
                      __size_of_HMI_LeftSwitch 0018                                          u10380 1374  
                                        u11180 378A                                ___awdiv@divisor 0062  
                                        u10525 02D0                                          u10800 4CF0  
                                        u10730 2ED4                                          u10570 03B8  
                                        u11518 413C                                          u11519 4150  
                                        u11538 4168                                          u10770 2FE8  
                                        u10690 2480                                          u11539 417C  
                                        u11478 40E4                                          u10870 20FC  
                                        u11479 40F8                                          u11498 4110  
                                        u11499 4124                                          u13470 08E0  
                                        u13480 0902                                          u13730 0CF8  
                                        u13900 1098                                          u13740 0D1A  
                                        u13398 5DA0                                          u13590 0B90  
                                        u13670 3478                                          u13399 5DB6  
                                        u13680 349A                                          u13850 101C  
                                        _INDEX 00DC                                __end_of___lwdiv 4FF4  
                                        _MASKS FD9F                                __end_of___lwmod 56B6  
                                        i2l430 451E                                          i2l432 4544  
                                        i2l433 456E                                          i2l427 4594  
                                        i2l732 5040                                          i2l733 503A  
                                        i2l832 5D10                                          i2l781 6046  
                              ___awdiv@counter 0064                            ?_irobot_init_song_0 0001  
                                        _PORTA 000F80                                          _PORTB 000F81  
                                        _PORTC 000F82                                          _PORTD 000F83  
                                        _PORTE 000F84                                          _PORTF 000F85  
                                        _PORTG 000F86                        __size_of_HMI_DownSwitch 0018  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TRISD 000F95  
                                        _TRISE 000F96                                          _TRISF 000F97  
                                        _TRISG 000F98                               ??i2_Byte_GetPair 000D  
                             ??i2_Byte_GetZone 0006                             Port_TogglePin@pPin 0076  
                              __end_of_getMode 418E                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03AD                                          _PortB 03A3  
                                        _PortC 00EA                                          _PortD 00E0  
                                        _PortE 0399                                          _PortF 03B7  
                                        _PortG 038F                        __end_of_Port_SetPinType 287E  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 006C  
                        ??_irobot_led_power_on 0074                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 0075                                __end_of_dpowers FD9F  
                               ??_Byte_GetZone 0065                      irobot_move@moveTurnRadius 0072  
                                        _mode1 08C4                                          _mode2 344C  
                                        _mode3 1404                                          _mode4 0CDC  
                               Button_Poll@Pin 0083                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 3F58                               __end_of_MXK_Init 2EB4  
                     __size_of_sort_iRBumpDrop 008C                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 6482  
                             __end_of_SPI_Init 08C4                               __end_of_SPI_Send 5382  
                        __end_ofi2_MXK_Release 6568                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 5316  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 0063  
                            __end_of_ADC_Start 4E04                                 ??_Byte_SetPair 006F  
                               ??_Byte_SetQuad 006F                                          plusw2 000FDB  
                               ??_Byte_SetZone 0066                                          status 000FD8  
                                        wtemp6 0052                         __size_of_ADC_Calibrate 0014  
                              _Configure_GPIOs 523A                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 0061  
                               _LCD_Word_Write 6242                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 6568                    __size_of_Port_CheckPairType 006A  
                                  mode1@moveto 03F3                            __size_of_HMI_SetBar 000A  
                                 ?_irobot_leds 0070                                   ?_irobot_init 0001  
                              __initialization 43AE                            __size_of_HMI_Render 003E  
                                 ?_irobot_move 0070                            __end_of_Byte_GetBit 5F96  
                       irobot_leds@powerColour 0071                                   __end_of_main 58D0  
                                 __end_of_init 4656               irobot_query_and_update@packetIDs 0075  
                                 __end_of_itos 3A80                           HMI_SetButton@reindex 0062  
                                 SPI_Send9@dat 002D                            __end_of_Byte_SetBit 5654  
                             __end_of_InitList FD75                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 6482                                      ??_ADC_Off 0060  
                      __end_of_update_distance 645E                    __size_of_Port_CheckPortType 0048  
                                  HMI_Render@a 0068                                         ??_main 03F9  
                                       ??_init 00AA                                         ??_itos 0070  
                      _Console_MakeField$10974 006E                                  __activetblptr 000003  
                            Port_SetPin@pInput 006F                              __end_of_LCD_Reset 59C2  
                            Port_SetPin@pValue 0072                                      ??_LED_Set 0075  
                            _MXK_InitDIPSwitch 629C                              GetPortPORT@pInput 0062  
                       Port_CheckPairType@Pin1 008A                         Port_CheckPairType@Pin2 008B  
                            __end_of_LCD_Write 61A2                                    _GetPortPORT 47A2  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 4656  
                              ??_LCD_DrawField 007C                     __end_of_PortProperty_Valid 4F02  
                             __end_of_Port_Set 1820                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 3D02  
                          __end_of_Button_Poll 318C                              Word_GetPair@pPair 006E  
                      LCD_FillRectangle@pPoint 006B                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 4AC2                                      ??_SPI_DCS 0062  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                       _ADC_On 6556                                  _HMI_SetNumber 6108  
                       Port_SetQuadType@Output 009A                                         _ANCON0 000FC1  
                             ___awdiv@dividend 0060                                         ?_putch 0001  
                             ??_Console_Render 0083                                  ToSegment@pCHR 0060  
                             _Console_FormFeed 4B52                         Port_SetQuadType@pInput 0096  
                                       i2l1630 381E                                         i2l1631 386A  
                                       i2l1632 3856                                         i2l1730 5F3E  
                                       i2l1627 38A6                                         i2l1732 5F5E  
                                       i2l1628 389C                                         i2l1629 3834  
                                       i2l1590 145E                                 __CFG_WDTEN$OFF 000000  
                          __size_of_ISR_Enable 000A                                         i2l9024 5D10  
                                       i2l9026 5D20                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 6260  
                               _Timer0_Restart 64EE                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 009B                                         _TXREG1 000FAE  
                             __end_of___xxtofl 24FC                                 i2_MXK_SwitchTo 5F2C  
                                       _TXSTA1 000FAD                                Byte_GetBit@pBit 0062  
                                   _Reset_High 627E                             Console_Render@temp 0085  
                               ??_HMI_UpSwitch 0066                                 OutSeg@pSegment 0063  
                              ??i2_Timer0_Stop 0001                            Port_TogglePin@Value 0077  
                       ADC_SetChannel@pChannel 0061                               __end_of_delay_ms 5456  
                                 LED_Init@pLED 008D                               __end_of_delay_us 5922  
                                ??_Timer0_Init 0071                                  ??_Timer2_Init 0071  
                                ??_Timer0_Stop 0060                                     _Timer0_ISR 6086  
                     __size_of_Console_NewLine 00A2                              Timer2_Init@DIVIDE 007A  
                               __CFG_XINST$OFF 000000                                         _TimerX 00F9  
                                       _OutSeg 4E04                       __size_of_HMI_InitButtons 0006  
                                   _Motor_Init 3B58                     __end_of_load_iRScriptStack 53EC  
                                   _Motor_Move 5EBC                                         _iRWall 0035  
                                ??_Motor_Speed 007F                                     _Motor_Step 3586  
                          rx_assign@byteNumber 0062                        __end_of_Event_DIPSwitch 6086  
                                       ___wmul 5EF6                                ??_HMI_DIPSwitch 0066  
                load_iRScriptStack@bytesToLoad 006E                                      ??___fldiv 0076  
                                    ??___awdiv 0064                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                                      ??___flmul 008F  
                                       _lMotor 00CE                                      ??___fltol 00B6  
                                    ??___lldiv 0068                                         _lQueue 00BA  
                                   _TestButton 0385                                      ??___lwdiv 0064  
                           __size_of_ToSegment 0284                                      ??___lwmod 006B  
                     __end_of_Port_SetQuadType 1CFA                       i2Byte_GetZone@pChunkSize 0005  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 4CF6  
                            GetPortTRIS@pInput 0062                             __size_of_Reset_Low 001E  
                                       clear_0 4416                                         clear_1 4428  
                                       clear_2 4434                                         clear_3 4440  
                                       clear_4 444C                               ___awdiv@quotient 0066  
                   irobot_stop_motion@isScript 0079                                  ?_eusart_getch 0001  
                                   Port_Init@i 00A5                                     _iRDistance 0329  
                            __end_of_MXK_Queue 64C8                     __end_ofHMI_SetButton@F7213 FDAC  
                                    ??_getMode 0066                                     _iRBumpLeft 00D6  
                                       _printf 24FC                                     _iRBumpDrop 0036  
                    __end_of_MXK_InitDIPSwitch 62BA                                  _ADC_Calibrate 6438  
                                   _iRDropLeft 00D4                                 HMI_SetButton@v 0067  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 0061  
                                  _Console_Tab 3E96                            LCD_Word_Write@value 0065  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 0063                       Port_CheckPortType@Output 0099  
                                    ?_ADC_Init 0064                             _twos_complement_of 5C48  
                              ??i2_Port_SetPin 0014                                   __mediumconst FCC2  
                  __end_ofTimer2_Init@PRESCALE FDAF                       Port_CheckPortType@pDrive 0098  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 0096  
                                ??_Port_SetPin 0073                                      ??_reverse 0064  
                                   _StepRotate 00C4                          Console_MakeField@Fill 0482  
                             ?_Port_SetPinType 0086                                         putch@c 0074  
                            Motor_Speed@pMotor 007B                                 ?_HMI_SetNumber 0076  
                               i2_Word_GetPair 6028                        __end_of_Configure_GPIOs 52AA  
                          irobot_leds@isScript 0073                               ??_MXK_TestButton 0066  
                       __end_of_Timer0_Restart 64FA                                  Set_Rotation@m 0065  
                                 ?_MXK_Release 0001                            ?_twos_complement_of 0060  
                __size_of_irobot_move_straight 0018                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 5F62                                   ___xxtofl@arg 006A  
                                 i2delay_us@us 0001                                   ___xxtofl@exp 0069  
                                 ___xxtofl@val 0060                          _update_bump_and_cliff 5E82  
                              ?_LCD_Word_Write 0065                                     __accesstop 0060  
                      __end_of__initialization 4452                                      ?_LCD_Fill 0069  
        irobot_query_and_update@packetVariable 0079                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 0092                                    _Byte_GetBit 5F62  
                                   _Stepstomin 00C2                                      ?_LED_Init 0001  
                     __end_ofi2_Timer0_Restart 6506                                      ?_HMI_Init 0001  
                            ??_Set_Addr_Window 0068                                      ?_HMI_Poll 0001  
             __size_of_irobot_query_and_update 0186                                  ___rparam_used 000001  
                            ??_sort_iRBumpDrop 0060                                     ___fltol@f1 00B2  
                                  _Byte_SetBit 55F0                                  __end_of_MASKS FDA8  
                               _PortA_Property FF9B                                    ?_Event_NULL 0001  
                                    LCD_Fill@i 006B                                      LCD_Fill@j 006C  
                          load_iRScriptStack@i 006F                                      LCD_Init@i 0097  
                               __pcstackCOMRAM 0001                                 _PortB_Property FF99  
                          __size_ofi2_delay_us 0040                                   __pidataBANK0 653C  
                                 __pidataBANK3 64D6              irobot_move_straight@straightSpeed 0079  
                          i2Byte_SetBit@pInput 0001                           __end_of_Byte_GetPair 62F6  
                              Console_Render@x 008A                                Console_Render@y 008B  
                          i2Byte_SetBit@pValue 0004                                  ?_Set_Rotation 0001  
                          Timer0_Init@PRESCALE FD75                           __end_of_Byte_GetZone 4A2A  
                                __end_of_mode1 0CDC                                  __end_of_mode2 3586  
                                __end_of_mode3 1406                                  __end_of_mode4 10A6  
                         ??_twos_complement_of 0062                              irobot_leds@LEDBit 0070  
                               _PortC_Property FF97                            __end_of_Timer0_Init 32EC  
                                __end_of_putch 6490                                 ??_eusart_getch 0060  
                                    ?_MXK_Init 0001                            __end_of_Timer2_Init 344C  
                          __end_of_Timer0_Stop 6550                                 ?_ADC_Calibrate 0001  
                                    ?_SPI_Init 008D                               ?_update_distance 0001  
                                    ?_SPI_Send 0060                                 ??_eusart_putch 0060  
                                  _Button_Init 3C2E                              Port_SetType@pType 009C  
                                  _Button_Poll 3026                           __end_of_Byte_SetByte 64BA  
                         __end_of_Byte_SetPair 61C4                                 _HMI_LeftSwitch 63F4  
                               _PortD_Property FF95                           __end_of_Byte_SetQuad 61E6  
                                 ??_LED_Toggle 0078                                   ??_HMI_GetBar 0060  
                   eusart_putch@eusartSendChar 0060                           __end_of_Byte_SetZone 42FE  
                          __end_of_Motor_Speed 6108                                 _HMI_DownSwitch 63AC  
                                SPI_Send@pData 0062                          __end_of_MXK_DIPSwitch 6394  
                                 ??_HMI_SetBar 0060                       __size_of_get_packet_size 0066  
                                 ??_HMI_Render 0068                                 _PortE_Property FF93  
                                   ??_ADC_Init 0067                       __size_of_HMI_SetSegments 00BA  
                       __end_ofi2_Word_GetPair 6058                                 _PortF_Property FF91  
                      Port_CheckQuadType@Pair1 0093                        Port_CheckQuadType@Pair2 0094  
                     MXK_BlockSwitchTo@pModule 0067                                        ??_mode1 03F1  
                                      ??_mode2 008C                                        ??_mode3 0060  
                                      ??_mode4 03F1                                        ?_ADC_On 0001  
                            _Console_Backspace 5718                                ?_Timer0_Restart 0001  
                                      ??_putch 0074                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5CCE                              __end_of_ToSegment 1AA4  
                               _PortG_Property FF8F                                     __pbssBANK0 00BA  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5C48                             _irobot_stop_motion 5B76  
                      Port_CheckQuadType@pQuad 0091                                reverse@iterator 0065  
                             ??_SPI_DisableISR 0062                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 627E                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 006B  
                            ?_irobot_rotate_to 0102                                     ??_LCD_Init 0095  
                         __size_of_eusart_init 001E                            __end_of_Port_SetPin 3E96  
                       __end_of_PortA_Property FF9D               irobot_led_power_on@powerOnColour 0074  
                                    ?_Mode_Set 0001                             Byte_SetByte@pInput 0060  
                                   ??_LED_Init 008D                       ADC_ClockDivision@pDivide 0060  
                           Byte_SetByte@pValue 0062                                  ?_ISR_Function 0001  
                                  ?_Reset_High 0001                             _ADC_ConversionTime 5AE8  
                                ?_Timer0_Clear 0001                                     ??_HMI_Init 00A8  
                           ??_irobot_song_play 0061                                     ??_HMI_Poll 0084  
                                ?_Timer2_Clear 0001                             ??_irobot_rotate_to 00BA  
                      Port_CheckPairType@Props 008D                         __end_of_PortB_Property FF9B  
                                ?_Timer0_Start 0060                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2BAE                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 0088                             __end_of_LED_Toggle 5AE8  
                           __end_of_HMI_GetBar 654A                    irobot_rotate_to@rotateSpeed 0104  
                     LCD_FillRectangle@pColour 0069                                     _angleTotal 00C6  
                          ??_Console_Backspace 0062                              Set_Addr_Window@xe 0066  
                            Set_Addr_Window@ye 0067                              Set_Addr_Window@xs 0068  
                            Set_Addr_Window@ys 0065                                        ?_OutSeg 0063  
                                  ?_Motor_Init 008D                             Byte_SetPair@pInput 006B  
                                  ?_Motor_Move 0063                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 006E                             __end_of_HMI_SetBar 651A  
                       __end_of_PortC_Property FF99                             Word_GetPair@pInput 006C  
                           __end_of_HMI_Render 5D8C                                 ??_Set_Rotation 0065  
                                    ?_Port_Set 006F                            ?_ADC_ConversionTime 0001  
                                      ?___wmul 0060                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 0065                                   ??_ISR_Enable 0060  
                 __size_of_Console_ResetCursor 001E                           __size_of_irobot_leds 0058  
                         __size_of_irobot_init 000E                           ?_Console_ClearCursor 0001  
                         __size_of_irobot_move 00B0                         __end_of_HMI_LeftSwitch 640C  
                       __end_of_PortD_Property FF97                                        _ADC_AN0 00F4  
                                      _ADC_AN1 03D8                                        _ADC_AN2 03D3  
                                      _ADC_AN3 03CE                                     ??_MXK_Init 00A6  
                            Port_GetPin@pInput 0060                              _Console_MakeField 3D02  
                                      _ADC_Off 6534                              ??_Console_NewLine 0060  
                     ADC_ClockDivision@unfound 0062                         __end_of_HMI_DownSwitch 63C4  
                                   ??_SPI_Init 0093                         Event_TestButton@pState 0079  
                                   ??_SPI_Send 0063                                        ?_printf 0075  
                            ??_HMI_InitButtons 0060                     __size_of_MXK_InitDIPSwitch 001E  
                       __end_of_PortE_Property FF95                            Console_Render@F6956 03E5  
                           ?_Console_MakeField 0065                                        _COUNTER 0029  
                              ??_HMI_SetButton 0060                           __end_of_HMI_UpSwitch 63DC  
                         ??_irobot_stop_motion 0079                                        _LED_Set 5922  
                      _Console_IncrementCursor 5526                                      ?___xxtofl 0060  
                       __end_of_PortF_Property FF93                                    _gBackcolour 00D2  
                              ??_HMI_SetNumber 0078                                      _I2C1_Done 0320  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 031D  
                                    _I2C1_More 031A                                      _I2C2_More 0317  
                                    ?_delay_ms 0060                      __end_of_Console_Backspace 5774  
                                    ?_delay_us 0060                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 62D8                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 0060  
                       __end_of_PortG_Property FF91                            ??_Console_MakeField 0067  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 00C0  
                                      _SPI_DCS 5FF8                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 0060                               ?_Configure_GPIOs 0001  
                              __size_of_ADC_On 0006                         ?_update_bump_and_cliff 0001  
                       __size_of_irobot_rotate 0064                               ADC_Init@pChannel 0066  
                         i2Byte_GetZone@Offset 0008                                  ??_ADC_Voltage 00A4  
                           __end_of_ISR_Enable 6524                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                                 ??_Timer0_Clear 0060  
                            Event_TestButton@j 00D8                                     ??_Mode_Set 0060  
                               ??_Timer2_Clear 0060                                        _Font5x7 FDAF  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 0061  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 0063                           SPI_DisableISR@pInput 0060  
                                ?_Port_GetQuad 0060                                Byte_SetBit@pBit 0062  
                         Port_TogglePin@pInput 0074                          __end_ofi2_Byte_SetBit 5A0E  
                                    _ADC_Start 4D80                                        __Hparam 0000  
                            Port_GetQuad@pQuad 0062                                    _Timer0_Init 318C  
                                  _Timer2_Init 32EC                                        __Lparam 0000  
                                  _Timer0_Stop 654A                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD95  
                                      _iRAngle 0327                                  LCD_Write@mode 0063  
                              __size_of_OutSeg 0082                                     ??_Port_Set 0072  
                    __end_of_Console_MakeField 3DD2                              _Console_PrintChar 287E  
                                  _Motor_Speed 60DE                                        _Stepper 03C8  
                                ?_Port_SetType 009A                                        _gCursor 0047  
                                      ___fldiv 10A6                                        ___awdiv 3F58  
                        ??_Console_ClearCursor 0060                                        ___flmul 0000  
                                      ___fltol 36AC                                        _lBuffer 04C8  
                                      ___lldiv 4016                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 0060                                        ___lwdiv 4F7C  
                                      ___lwmod 5654                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4BE0                             ?_Console_PrintChar 0001  
                                      __pcinit 43AE                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 40D2  
                                      __ptext0 587E                                        __ptext1 0CDC  
                                      __ptext2 60B4                                        __ptext3 558C  
                                      __ptext4 5B30                                        __ptext5 1404  
                                      __ptext6 344C                                        __ptext7 6364  
                                      __ptext8 08C4                                        __ptext9 644C  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 6312                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD95                                      _T2CONbits 000FCA  
                                LED_Set@pValue 0074                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 0079                                     ??___xxtofl 0064  
                                 ?_GetPortPORT 0060                                   ?_GetPortTRIS 0060  
                          ??_Console_PrintChar 0070                                    _Port_GetPin 5C02  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03E1  
                          LCD_DrawRectangle@p4 03DD                                   ??i2_delay_us 0003  
                                   ??_delay_ms 0062                                     ??_delay_us 0062  
                                      _reverse 52AA                                      _DIPSwitch 037B  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 3DD2  
                                  _iRBumpRight 00D7                                 LCD_DrawField@i 0082  
                                    _LCD_Reset 5972                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 6180                                    _iRDropRight 00D5  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 0060  
                         end_of_initialization 4452                            ADC_SetupIO@pChannel 0062  
                            ??_get_packet_size 0060  irobot_query_and_update@numberOfPacketRequests 0078  
                                   delay_us@us 0060                              ??_HMI_SetSegments 0063  
                      Console_PrintChar@pInput 0073                                   _Console_Init 4C6C  
                         __end_of_eusart_getch 652C                        _irobot_query_and_update 2BAE  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 54C0  
                         __end_of_eusart_putch 64AC                                        itos@Out 0074  
                               ??_Port_GetQuad 0063                              _irobot_angle_wait 5B30  
                           _PortProperty_Valid 4E86                                      i2u1341_48 609E  
                           Byte_SetQuad@pInput 006B                             SPI_MinSpeed@pInput 006F  
                           Byte_SetQuad@pValue 006E                            __end_of_ADC_SetupIO 5FC8  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 0064                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 0062                              ??_HMI_RightSwitch 0066  
                              ___lldiv@counter 006C                      __end_of_Console_PrintChar 2A1C  
                           ?_irobot_angle_wait 0070                            __end_of_ADC_Voltage 3B58  
                               ??_Port_SetType 009D                     __end_of_Port_CheckQuadType 57CE  
                                      printf@c 0084                                        printf@f 0075  
                               Port_Init@pPort 00A2                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 0069  
                            __end_of_rx_assign 39A8                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 006F  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 5AA0  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 5D4E  
                           Button_Init@pInitIO 009F                                  _irobot_rotate 558C  
                        Timer0_Init@pFrequency 006D                              ?_Port_SetQuadType 0096  
                          ??_irobot_angle_wait 0072                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 0064                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 009A  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 0066  
                        Console_Render@lCursor 0086                             _load_iRScriptStack 5382  
                irobot_rotate_to@rotateToAngle 0102                                      _MXK_Queue 64BA  
                             __CFG_CPUDIV$OSC1 000000                                  ___xxtofl@sign 0068  
                             Byte_GetZone@pMax 0062                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 006C  
                              _Set_Addr_Window 445C                                 SPI_Init@pClock 008D  
                             ??_LCD_Word_Write 0067                                _sort_iRBumpDrop 4BE0  
                                  ___fldiv@grs 0081                                    ___fldiv@rem 007B  
                        __end_of_LCD_DrawField 48EC                                 Port_Set@pInput 006F  
                               SPI_Init@pInput 0093                           ??_PortProperty_Valid 0073  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 0071  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 4AC2  
                                   ?_LCD_Write 0063                                   _Byte_GetPair 62D8  
                           HMI_SetButton@F7213 FDA8                            ?_load_iRScriptStack 0060  
                                 _Byte_GetZone 498E                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 0080                              LCD_DrawField@ymax 0081  
                               __end_of_ADC_On 655C                                 _Port_TogglePin 5FC8  
                    __end_of_irobot_angle_wait 5B76                               _Event_TestButton 5E46  
                                  ___flmul@grs 0095                           Port_SetPinType@Props 008B  
                                 ?_Byte_GetBit 0060                        __size_ofi2_Byte_GetPair 001A  
                                 _Byte_SetByte 64AC                                   _Byte_SetPair 61A2  
                              ADC_SetupIO@MASK 0063                                   _Byte_SetQuad 61C4  
                      __size_ofi2_Byte_GetZone 0076                                   _Byte_SetZone 4248  
                         Port_SetPinType@pType 0089                              ?i2_Timer0_Restart 0001  
                                 ?_Byte_SetBit 0060                                  ?_SPI_MaxSpeed 006F  
                            __size_of_LCD_Fill 0058                                   ??_Event_NULL 0060  
                            __size_of_LCD_Init 0172                              __size_of_LED_Init 0062  
                                ?_SPI_MinSpeed 006F                          __end_ofi2_Timer0_Stop 6562  
                           ??i2_Timer0_Restart 0001                              __size_of_HMI_Init 01FA  
                            __size_of_HMI_Poll 0074                                  ?_update_angle 0001  
                                ?i2_Motor_Step 0001                     __size_of_Console_MakeField 00D0  
                               ?_irobot_rotate 0079                                 __end_of_OutSeg 4E86  
                         ??_load_iRScriptStack 006A                   __end_of_irobot_move_straight 637C  
                        __size_of_HMI_UpSwitch 0018                                 __end_of___wmul 5F2C  
                        __end_of_HMI_DIPSwitch 63AC                                  __pidataCOMRAM 6506  
                                 ?_Button_Init 009B                                   ?_Button_Poll 007B  
                                    _Bus_State 004B                            i2Byte_GetPair@pPair 000C  
                         __end_of_ISR_Function 14AA                           __end_of_Timer0_Clear 64EE  
                            __size_of_MXK_Init 0180                           __end_of_Timer2_Clear 6534  
                               __end_of_printf 26BE                              __size_of_SPI_Init 041E  
                      get_packet_size@packetID 0060                              __size_of_SPI_Send 006C  
                                ?_Word_GetPair 006C                               ??_Timer0_Restart 0060  
                         __end_of_Timer0_Start 6180                             Port_SetType@Output 009F  
                          start_initialization 43AE                                     ?_MXK_Queue 0060  
                     PortProperty_Valid@Errors 0075                               ??i2_MXK_SwitchTo 0007  
                            _LCD_FillRectangle 50DE                             Port_SetType@pInput 009A  
                               _ADC_SetChannel 632E                                     HMI_Init@in 00A8  
                          HMI_SetNumber@pInput 0076                          __end_ofi2_Port_SetPin 45B0  
                           __end_of_Event_NULL 656A                         rx_assign@packetIDValue 0061  
                       __end_of_Port_TogglePin 5FF8                                  ?_Word_SetPair 006F  
                            Byte_SetBit@pInput 0060                                       ??_ADC_On 0060  
                               ??_MXK_SwitchTo 0066                              Byte_SetBit@pValue 0063  
                           ?_LCD_FillRectangle 0069                      ??_irobot_query_and_update 0070  
                          _Console_ResetCursor 6206                    PortProperty_Valid@pPinDrive 0071  
                                  _ADC_SetupIO 5F96                           MXK_BlockSwitchTo@CUR 0066  
                     PortProperty_Valid@pInput 006F                                  i2_MXK_Release 6562  
                                  _ADC_Voltage 3A80                         LCD_FillRectangle@pSize 006F  
                               SPI_Send@pInput 0060                                   ??_Reset_High 0074  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 0071  
                        Port_SetQuadType@pQuad 0098                                      _ToSegment 1820  
                          ??_LCD_FillRectangle 0073                          Port_SetQuadType@pType 0099  
                              _Console_NewLine 48EC                                 ??_SPI_MinSpeed 0071  
                                  ??_ADC_Start 0064                                   _HMI_UpSwitch 63C4  
                                    _Reset_Low 6260                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 6550                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                 ??_update_angle 007D  
                               ADC_Init@pInput 0064                                      _gCharSize 03ED  
                             Timer2_Init@INDEX 00DA                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                                   ??_Motor_Init 0091  
                                     ??_OutSeg 0064                                      OutSeg@out 0067  
                      __size_of_Console_Render 0210                                   ??_Motor_Move 0067  
                                 ??_Motor_Step 0074                                      _iRAngleSS 0304  
                                    _iRCliffFL 0033                                      _iRCliffFR 0032  
                           Byte_SetZone@Offset 0069                                       ??___wmul 0064  
                         ?_Console_ResetCursor 0001                                      _Port_Init 2A1C  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03E5  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 0063  
                                     ?_ADC_Off 0001                      __size_of_irobot_rotate_to 002A  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 0060  
                           Byte_SetZone@pValue 0065                                  Mode_Set@pMode 0060  
                                     ??_printf 007D                        __end_of_Set_Addr_Window 4506  
                     Port_CheckQuadType@Output 0095                        __end_of_sort_iRBumpDrop 4C6C  
                                    _gLineSize 03E9                       Port_CheckQuadType@pDrive 0092  
                               ??_Word_GetPair 006F                       Port_CheckQuadType@pInput 008F  
                         __end_of_Port_GetQuad 5A58                                      ___fldiv@a 0072  
                                    ___fldiv@b 006E                      __end_of_LCD_FillRectangle 5152  
                                  __pbssBIGRAM 04C8                         __end_of_ADC_SetChannel 634A  
                                     ?_LED_Set 0074                                      ___flmul@a 008B  
                                    ___flmul@b 0087                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 0062                             __end_of_Reset_High 629C  
                                __pcstackBANK0 0060                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03F1  
                      ??_update_bump_and_cliff 007D                                     itos@Length 0072  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 0073  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 60B4                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 0079                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1F24                                       ?_SPI_DCS 0060  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 0074  
                                ??_eusart_init 0060                     irobot_angle_wait@angleWait 0070  
                                  ??_LCD_Write 0064                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                             __end_of_Motor_Init 3C2E  
                          __CFG_CCP2MX$DEFAULT 000000                             __end_of_Motor_Move 5EF6  
                           __end_of_Motor_Step 36AC                          Timer2_Init@pFrequency 006D  
                               ?i2_MXK_Release 0001                     __size_of_irobot_angle_wait 0046  
                     Port_CheckPairType@Output 008C              twos_complement_of@complementValue 0060  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 0089  
                     Port_CheckPairType@pInput 0086                                 reverse@tempVar 0064  
                           _MXK_InitTestButton 62BA                                     ?_Reset_Low 0001  
                                 ?_Timer0_Init 006D                         __size_of_MXK_DIPSwitch 0018  
                                 ?_Timer2_Init 006D                               ??_HMI_LeftSwitch 0066  
                                 ?_Timer0_Stop 0001                               ___lwdiv@dividend 0060  
                                ??_irobot_leds 0073                                  ??_irobot_init 0061  
                              ??_irobot_rotate 007D                                  ??_irobot_move 0074  
                                _lStepFunction 00BD                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 006D                               ??_HMI_DownSwitch 0066  
                                    __pintcode 1408                                  __pmediumconst FCC2  
                                 ?_Motor_Speed 007B                          ??_Console_ResetCursor 0060  
                                     ?___fldiv 006E                                       ?___awdiv 0060  
                                    __ptext100 5316                                      __ptext101 6470  
                                    __ptext110 3DD2                                      __ptext102 523A  
                                    __ptext111 651A                                      __ptext103 5152  
                                    __ptext120 3C2E                                      __ptext112 2134  
                                    __ptext104 5972                                      __ptext121 629C  
                                    __ptext113 51C6                                      __ptext105 53EC  
                                    __ptext130 5456                                      __ptext122 6550  
                                    __ptext114 04A6                                      __ptext106 6260  
                                    __ptext131 4E86                                      __ptext123 62BA  
                                    __ptext115 32EC                                      __ptext107 627E  
                                    __ptext140 5F96                                      __ptext132 5E08  
                                    __ptext124 26BE                                      __ptext116 4016  
                                    __ptext108 5AA0                                      __ptext141 632E  
                                    __ptext133 62D8                                      __ptext125 55F0  
                                    __ptext117 652C                                      __ptext109 5FC8  
                                    __ptext150 63AC                                      __ptext142 5AE8  
                                    __ptext134 498E                                      __ptext126 1AA4  
                                    __ptext118 6132                                      __ptext151 63C4  
                                    __ptext143 4CF6                                      __ptext135 61C4  
                                    __ptext127 5BBC                                      __ptext119 5FF8  
                                    __ptext160 655C                                      __ptext152 63DC  
                                    __ptext144 6438                                      __ptext136 4248  
                                    __ptext128 61A2                                      __ptext161 64FA  
                                    __ptext153 63F4                                      __ptext145 6556  
                                    __ptext137 4C6C                                      __ptext129 5774  
                                    __ptext170 64C8                                      __ptext162 4506  
                                    __ptext154 640C                                      __ptext146 6534  
                                    __ptext138 4D80                                      __ptext171 0000  
                                    __ptext163 6028                                      __ptext155 5C02  
                                    __ptext147 40D2                                      __ptext139 4F02  
              __end_of_irobot_query_and_update 2D34                                      __ptext164 634A  
                                    __ptext156 5A0E                                      __ptext148 637C  
                                    __ptext165 4FF4                                      __ptext149 6394  
                                    __ptext166 59C2                                      __ptext158 6086  
                                    _pShiftVal 00CA                                      __ptext167 5F2C  
                                    __ptext159 37B8                                      __ptext168 5D0E  
                                    __ptext169 6562                                       ?___flmul 0087  
                                     ?___fltol 00B2                                       ?___lldiv 0060  
                                   ?_Port_Init 00A0                           Timer0_Init@pCPUClock 0073  
                                     ?___lwdiv 0060                                       ?___lwmod 0067  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 46FC                                       ?_getMode 0001  
                                 _eusart_getch 6524                    __end_ofTimer0_Init@PRESCALE FD85  
                              _get_packet_size 54C0                                   _eusart_putch 649E  
                           ??_Console_FormFeed 0060                                _HMI_SetSegments 418E  
                           ?_GetPortProperties 0060                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 0063                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 0060                                       _ADC_Init 4F02  
                        __end_of_HMI_SetButton 4B52                           __size_of_Console_Tab 00C2  
                                     ?_reverse 0060                           irobot_move@moveSpeed 0070  
                                 ?_Port_SetPin 006F                          __end_of_HMI_SetNumber 6132  
                             ___lwdiv@quotient 0065                                _HMI_RightSwitch 63DC  
                  __size_of_ADC_ConversionTime 0048                                 __size_of_mode1 0418  
                               __size_of_mode2 013A                                 __size_of_mode3 0002  
                               __size_of_mode4 03CA                            ??_GetPortProperties 0062  
                      __end_of_Console_NewLine 498E                           ??_MXK_InitTestButton 008D  
                           Byte_GetPair@pInput 0069                                 __size_of_putch 000E  
                      __end_of_HMI_InitButtons 6556                              i2Port_SetPin@Type 0014  
                         _irobot_move_straight 6364                              i2Port_SetPin@pPin 0012  
                               i2_Byte_GetPair 634A                                       _LCD_Fill 5826  
                                     _LCD_Init 2EB4                                 ___wmul@product 0064  
                                     _HMIBoard 032B                                 i2_Byte_GetZone 4FF4  
                                     _LED_Init 56B6                                      delay_ms@u 0062  
                           Button_Poll@pButton 007B                                      delay_us@u 0062  
                                     _HMI_Init 2134                                       _HMI_Poll 506A  
                           MXK_Queue@pCallback 0060                                       _IPR1bits 000F9F  
                                     _IPR3bits 000FA5                                       _PIE1bits 000F9D  
                          __end_of_eusart_init 6242                                       _PIE3bits 000FA3  
                  __end_of_Console_ClearCursor 5D0E                       __size_of_Configure_GPIOs 0070  
                         __size_of_Byte_GetBit 0034                              Byte_SetQuad@pQuad 006D  
                                     _PIR1bits 000F9E                                       _PIR3bits 000FA4  
                                     i2u710_40 3810                                       i2u542_44 59D6  
                                     i2u542_45 59D2                                       i2u711_40 3848  
                                     i2u543_44 59FC                                       i2u543_45 59F8  
                                     i2u546_40 5D3C                                       i2u484_40 5016  
                                     i2u484_47 500C                                       i2u709_40 37FC  
                                     i2u486_40 505E                                       i2u486_45 505A  
                         __size_of_Byte_SetBit 0064                                       _RCONbits 000FD0  
                         i2Word_GetPair@pInput 000D                                    _mode1$15573 03F5  
                             __CFG_WDTPS$32768 000000                     irobot_song_play@songNumber 0061  
                             HMI_SetBar@pValue 0060                              Button_Init@pInput 009B  
                      __size_of_SPI_DisableISR 0028                                    _mode4$15574 03F2  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 008A  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                        __size_of_Timer0_Clear 000C                                       _SSP1STAT 000FC7  
                    __end_of_GetPortProperties 47A2                                       _SSP2STAT 000F6D  
                                 _Set_Rotation 4A2A                          __size_of_Timer2_Clear 0008  
                         __end_of_MXK_SwitchTo 5CCE                             _Port_CheckPairType 5456  
                                     _MXK_Init 2D34                          __size_of_Timer0_Start 0026  
                              MXK_SwitchTo@CUR 0066                          __end_of_ADC_Calibrate 644C  
                          __end_of_irobot_leds 5826                                       _SPI_Init 04A6  
                          __end_of_irobot_init 649E                       __end_of_Event_TestButton 5E82  
                                     _SPI_Send 5316                            __end_of_irobot_move 43AE  
                                    _rx_assign 38B8                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 0065                              ___wmul@multiplier 0060  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 0064  
                                   printf@flag 007F                           Timer2_Init@pCPUClock 0076  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 51C6                                     printf@prec 007E  
                        Motor_Speed@pFrequency 007D                              Byte_GetBit@pInput 0060  
                          Port_SetPinType@pPin 0088                           __size_of_Button_Poll 0166  
                           _Port_CheckQuadType 5774                                  _MXK_DIPSwitch 637C  
                          ?_Port_CheckPairType 0086                           __end_of_SPI_MinSpeed 523A  
                                ??_MXK_Dequeue 0076                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 5A58  
                         __end_of_update_angle 6470                          Button_Poll@pIncrement 007D  
                      PortProperty_Valid@F6830 FD85                           __end_ofi2_Motor_Step 38B8  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 43C2                                      copy_data1 43E2  
                                    copy_data2 4402                                  ??_MXK_Release 0060  
                       __end_ofi2_Byte_GetPair 6364                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 008F  
                        ?_irobot_move_straight 0079                         __end_ofi2_Byte_GetZone 506A  
                          __end_ofi2_MXK_Queue 64D6                                      mode2@dist 008C  
                          ?_Port_CheckPortType 0096                                itos@destination 006E  
                                     _InitList FCC3                     __end_of_irobot_init_song_0 6206  
                         _Motor_Step$intlevel0 358C                                       _Mode_Set 6470  
                           Port_GetQuad@Output 0065                              ??_update_distance 007D  
                                  ??_ToSegment 0060                                   _ISR_Function 1408  
                                 _Timer0_Clear 64E2                             Port_GetQuad@pInput 0060  
                                 _Timer2_Clear 652C                           __end_of_Word_GetPair 5E46  
                                     _lCBuffer 0400                           ??_Port_CheckPairType 008A  
                                  ??_Reset_Low 0074                                       __Hrparam 0000  
                                 _Timer0_Start 615A                                   OutSeg@pInput 0066  
                               _Console_Render 1F24                                       __Lrparam 0000  
                              Timer2_Init@RDIV 0072                                       _iRCliffL 0034  
                                     _iRCliffR 0031                              _stepsToMinDegrees 0300  
                               LCD_Write@value 0064                                       _Port_Set 1466  
                                 OutSeg@segset 003E                                      rand@screw 003B  
                         __end_of_Word_SetPair 5C02                        __end_of_get_packet_size 5526  
                                  ??_Port_Init 00A3                        __end_of_HMI_SetSegments 4248  
                         ??_Port_CheckQuadType 0093                               __size_of___fldiv 03C0  
                             _irobot_song_play 6424                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___flmul 04A6  
                             __size_of___fltol 010C                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 5DCA                               _irobot_rotate_to 60B4  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 0099  
                             __size_of___lwmod 0062                                       _lBufferX 00DE  
                                     _lBufferY 00DD                            Timer2_Init@PRESCALE FDAC  
                                   ?_rx_assign 0061                                LCD_Fill@pColour 0069  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 00D0                               __size_of_getMode 00BC  
                      __end_of_HMI_RightSwitch 63F4                         Byte_GetZone@pChunkSize 0064  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 0064  
                        __size_of_Port_SetType 022A                                  reverse@length 0062  
                                    itos@input 006C                          i2MXK_SwitchTo@pModule 0008  
                                     ___xxtofl 232E                            irobot_move@isScript 0078  
                           Motor_Init@pAddress 008F                                       _delay_ms 53EC  
                                     _delay_us 58D0                                       _clearall 00DF  
                              ___lwdiv@divisor 0062                                ___lwdiv@counter 0064  
                              Port_GetPin@pPin 0062                                       __ptext10 5E82  
                                     __ptext11 645E                                       __ptext20 3E96  
                                     __ptext12 2BAE                                       __ptext21 3F58  
                                     __ptext13 38B8                                       __ptext30 5C48  
                                     __ptext22 5526                                       __ptext14 4BE0  
                                     __ptext31 6424                                       __ptext23 48EC  
                                     __ptext15 54C0                                       __ptext40 6058  
                                     __ptext32 36AC                                       __ptext24 4B52  
                                     __ptext16 6524                                       __ptext41 6568  
                                     __ptext33 60DE                                       __ptext25 6206  
                                     __ptext17 24FC                                       __ptext50 4AC2  
                                     __ptext42 5E46                                       __ptext34 5EBC  
                                     __ptext26 5718                                       __ptext18 6482  
                                     __ptext51 6510                                       __ptext43 6108  
                                     __ptext35 615A                                       __ptext27 5CCE  
                                     __ptext19 287E                                       __ptext60 232E  
                                     __ptext52 6544                                       __ptext44 39A8  
                                     __ptext36 5D4E                                       __ptext28 5B76  
                                     __ptext61 0000                                       __ptext53 1F24  
                                     __ptext45 52AA                                       __ptext37 4E04  
                                     __ptext29 42FE                                       __ptext70 6224  
                                     __ptext62 10A6                                       __ptext54 50DE  
                                     __ptext46 5654                                       __ptext38 506A  
                                     __ptext71 3B58                                       __ptext63 45B0  
                                     __ptext55 4848                                       __ptext47 4F7C  
                                     __ptext39 3026                            ??_MXK_BlockSwitchTo 0066  
                                     __ptext80 4656                                       __ptext72 318C  
                                     __ptext64 62F6                                       __ptext56 5EF6  
                                     __ptext48 418E                                       __ptext81 46FC  
                                     __ptext73 64E2                                       __ptext65 57CE  
                                     __ptext57 3D02                                       __ptext49 1820  
                                     __ptext90 6312                                       __ptext82 47A2  
                                     __ptext74 2D34                                       __ptext66 5382  
                                     __ptext58 5F62                                       __ptext91 64BA  
                                     __ptext83 56B6                                       __ptext75 2A1C  
                                     __ptext67 61E6                                       __ptext59 3A80  
                                     __ptext92 5DCA                                       __ptext84 5922  
                                     __ptext76 1CFA                                       __ptext68 6490  
                                     __ptext93 58D0                                       __ptext85 5D8C  
                                     __ptext77 5A58                                       __ptext69 649E  
                                     __ptext94 2EB4                                       __ptext86 3586  
                                     __ptext78 1466                                       __ptext95 4A2A  
                                     __ptext87 654A                                       __ptext79 64AC  
                                     __ptext96 5826                                       __ptext88 64EE  
                                     __ptext97 445C                                       __ptext89 5C8C  
                                     __ptext98 6242                                       __ptext99 6180  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 4CF6  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 6224  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 0079                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00A0  
                          __end_of_MXK_Dequeue 5DCA                              HMI_SetSegments@in 0064  
                        Button_Init@pThreshold 009D                                  __size_of_main 0052  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 006B                         __end_of_Console_Render 2134  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 5A0E                            __end_of_MXK_Release 632E  
                               _MXK_TestButton 640C                                  i2_Byte_SetBit 59C2  
                          ??_ADC_ClockDivision 0060                                   _iRDistanceSS 0308  
                                  _irobot_leds 57CE                                    _irobot_init 6490  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 42FE  
                               ADC_Voltage@max 00A6                                 ADC_Voltage@ref 00AA  
                    __end_of_MXK_BlockSwitchTo 5E08                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 1CFA                                   Port_Set@Type 0086  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002F                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 0095                                      printf@val 0082  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 0310                                 Timer0_Init@PRE 00DB  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5AA0  
                                   _HMI_GetBar 6544                           Button_Init@pGetState 00A2  
                       PortProperty_Valid@Pair 0085                               ??_Port_TogglePin 0077  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 0072                                     _HMI_SetBar 6510  
                                   _HMI_Render 5D4E                               Byte_SetZone@MASK 006A  
                                  i2_MXK_Queue 64C8                      __end_of_ADC_ClockDivision 4D80  
                               Timer2_Init@DIV 030C                                 Timer2_Init@PRE 00D9  
                             Byte_SetZone@pMax 0062                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 007B  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 00A5  
                                     itos@Data 0070                  __end_of_update_bump_and_cliff 5EBC  
                           LCD_FillRectangle@i 0075                             LCD_FillRectangle@j 0076  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 0060                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 0067                               ___lldiv@dividend 0060  
                       __end_of_MXK_TestButton 6424                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 041E  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 007C  
                     irobot_query_and_update@j 007A                                 _SPI_DisableISR 6132  
                   __end_of_twos_complement_of 5C8C                       irobot_rotate@rotateAngle 0079  
                              Port_Init@pInput 00A0                                       printf@ap 0080  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 007B                                     _ISR_Enable 651A  
                             ?_HMI_SetSegments 0061                        Console_MakeField@Column 006C  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 0060  
                                SPI_DCS@pInput 0060                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 0066                                    ??_rx_assign 0063  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00A0                        Console_MakeField@pInput 006B  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 0068  
                                ??_GetPortPORT 0062                                ___lwmod@divisor 0069  
                                ??_GetPortTRIS 0062                          Timer0_Start@pFunction 0060  
                           Word_SetPair@pInput 006F                                ___lwmod@counter 006B  
                           Word_SetPair@pValue 0072                       ?_irobot_query_and_update 0066  
                             Motor_Init@pMotor 008D                                    _MXK_Dequeue 5D8C  
                            ADC_Voltage@output 00AE                                  _distanceTotal 00C8  
                               LED_Toggle@pLED 0078                                  _LCD_DrawField 4848  
                             _Port_SetQuadType 1AA4                                    _MXK_Release 6312  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5C8C  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 007B  
                           Byte_GetZone@Offset 0067                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 0071                                _Port_SetPinType 26BE  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 0068  
                           Byte_GetZone@pChunk 0063                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 6224                             Byte_GetZone@pInput 0060  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 558C  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 615A  
                                 _SPI_MaxSpeed 5152              irobot_query_and_update@streamSize 0077  
                                 _SPI_MinSpeed 51C6                             Port_Set@TypeActual 0084  
