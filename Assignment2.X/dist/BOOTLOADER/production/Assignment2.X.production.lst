

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Sep 14 18:44:06 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1,inline
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1,group=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	text113,global,reloc=2,class=CODE,delta=1
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	text116,global,reloc=2,class=CODE,delta=1
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	text122,global,reloc=2,class=CODE,delta=1
   143                           	psect	text123,global,reloc=2,class=CODE,delta=1,inline
   144                           	psect	text124,global,reloc=2,class=CODE,delta=1
   145                           	psect	text125,global,reloc=2,class=CODE,delta=1
   146                           	psect	text126,global,reloc=2,class=CODE,delta=1
   147                           	psect	text127,global,reloc=2,class=CODE,delta=1
   148                           	psect	text128,global,reloc=2,class=CODE,delta=1
   149                           	psect	text129,global,reloc=2,class=CODE,delta=1
   150                           	psect	text130,global,reloc=2,class=CODE,delta=1
   151                           	psect	text131,global,reloc=2,class=CODE,delta=1
   152                           	psect	text132,global,reloc=2,class=CODE,delta=1
   153                           	psect	text133,global,reloc=2,class=CODE,delta=1
   154                           	psect	text134,global,reloc=2,class=CODE,delta=1
   155                           	psect	text135,global,reloc=2,class=CODE,delta=1
   156                           	psect	text136,global,reloc=2,class=CODE,delta=1
   157                           	psect	text137,global,reloc=2,class=CODE,delta=1
   158                           	psect	text138,global,reloc=2,class=CODE,delta=1
   159                           	psect	text139,global,reloc=2,class=CODE,delta=1
   160                           	psect	text140,global,reloc=2,class=CODE,delta=1
   161                           	psect	text141,global,reloc=2,class=CODE,delta=1
   162                           	psect	text142,global,reloc=2,class=CODE,delta=1
   163                           	psect	text143,global,reloc=2,class=CODE,delta=1
   164                           	psect	text144,global,reloc=2,class=CODE,delta=1
   165                           	psect	text145,global,reloc=2,class=CODE,delta=1
   166                           	psect	text146,global,reloc=2,class=CODE,delta=1
   167                           	psect	text147,global,reloc=2,class=CODE,delta=1
   168                           	psect	text148,global,reloc=2,class=CODE,delta=1
   169                           	psect	text149,global,reloc=2,class=CODE,delta=1
   170                           	psect	text150,global,reloc=2,class=CODE,delta=1
   171                           	psect	text151,global,reloc=2,class=CODE,delta=1,group=1
   172                           	psect	text152,global,reloc=2,class=CODE,delta=1,group=1
   173                           	psect	text153,global,reloc=2,class=CODE,delta=1
   174                           	psect	text154,global,reloc=2,class=CODE,delta=1
   175                           	psect	text155,global,reloc=2,class=CODE,delta=1
   176                           	psect	text156,global,reloc=2,class=CODE,delta=1
   177                           	psect	text157,global,reloc=2,class=CODE,delta=1
   178                           	psect	text158,global,reloc=2,class=CODE,delta=1
   179                           	psect	text159,global,reloc=2,class=CODE,delta=1
   180                           	psect	text160,global,reloc=2,class=CODE,delta=1
   181                           	psect	text161,global,reloc=2,class=CODE,delta=1,inline
   182                           	psect	text162,global,reloc=2,class=CODE,delta=1
   183                           	psect	text163,global,reloc=2,class=CODE,delta=1
   184                           	psect	text164,global,reloc=2,class=CODE,delta=1
   185                           	psect	text165,global,reloc=2,class=CODE,delta=1
   186                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   187                           	psect	text167,global,reloc=2,class=CODE,delta=1
   188                           	psect	text168,global,reloc=2,class=CODE,delta=1
   189                           	psect	text169,global,reloc=2,class=CODE,delta=1
   190                           	psect	text170,global,reloc=2,class=CODE,delta=1
   191                           	psect	text171,global,reloc=2,class=CODE,delta=1
   192                           	psect	text172,global,reloc=2,class=CODE,delta=1
   193                           	psect	text173,global,reloc=2,class=CODE,delta=1
   194                           	psect	text174,global,reloc=2,class=CODE,delta=1,inline
   195                           	psect	text175,global,reloc=2,class=CODE,delta=1
   196                           	psect	text176,global,reloc=2,class=CODE,delta=1
   197                           	psect	text177,global,reloc=2,class=CODE,delta=1
   198                           	psect	text178,global,reloc=2,class=CODE,delta=1
   199                           	psect	text179,global,reloc=2,class=CODE,delta=1
   200                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   201                           	psect	text180,global,reloc=2,class=CODE,delta=1
   202                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   203                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   204  0000                     
   205                           ; Version 1.43
   206                           ; Generated 25/07/2017 GMT
   207                           ; 
   208                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   209                           ; All rights reserved.
   210                           ; 
   211                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   212                           ; 
   213                           ; Redistribution and use in source and binary forms, with or without modification, are
   214                           ; permitted provided that the following conditions are met:
   215                           ; 
   216                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   217                           ;        conditions and the following disclaimer.
   218                           ; 
   219                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   220                           ;        of conditions and the following disclaimer in the documentation and/or other
   221                           ;        materials provided with the distribution.
   222                           ; 
   223                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   224                           ;        software without specific prior written permission.
   225                           ; 
   226                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   227                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   228                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   229                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   230                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   231                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   232                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   233                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   234                           ; 
   235                           ; 
   236                           ; Code-generator required, PIC18F67J50 Definitions
   237                           ; 
   238                           ; SFR Addresses
   239  0000                     
   240                           	psect	idataCOMRAM
   241  018076                     __pidataCOMRAM:
   242                           	opt stack 0
   243                           
   244                           ;initializer for _gCursor
   245  018076  0006               	dw	6
   246  018078  0006               	dw	6
   247                           
   248                           ;initializer for _TimerX
   249  01807A  0008               	dw	8
   250                           
   251                           ;initializer for _MinDist
   252  01807C  03E8               	dw	1000
   253                           
   254                           ;initializer for _Bus_State
   255  01807E  01                 	db	1
   256                           
   257                           ;initializer for _change
   258  01807F  01                 	db	1
   259                           
   260                           ;initializer for _l
   261  018080  80                 	db	128
   262                           
   263                           ;initializer for _w
   264  018081  80                 	db	128
   265                           
   266                           	psect	idataBANK3
   267  018010                     __pidataBANK3:
   268                           	opt stack 0
   269                           
   270                           ;initializer for Console_Render@F6956
   271  018010  0006               	dw	6
   272  018012  0006               	dw	6
   273                           
   274                           ;initializer for _gLineSize
   275  018014  0080               	dw	128
   276  018016  0007               	dw	7
   277                           
   278                           ;initializer for _gCharSize
   279  018018  0005               	dw	5
   280  01801A  0007               	dw	7
   281                           
   282                           ;initializer for _gForecolour
   283  01801C  FFFF               	dw	65535
   284                           
   285                           ;initializer for _A
   286  01801E  41                 	db	65
   287                           
   288                           ;initializer for _a
   289  01801F  61                 	db	97
   290                           
   291                           ;initializer for _zero
   292  018020  30                 	db	48
   293                           
   294                           	psect	mediumconst
   295  00FBF8                     __pmediumconst:
   296                           	opt stack 0
   297  00FBF8  00                 	db	0
   298  00FBF9                     _InitList:
   299                           	opt stack 0
   300  00FBF9  1100               	dw	4352
   301  00FBFB  0080               	dw	128
   302  00FBFD  012C               	dw	300
   303  00FBFF  B100               	dw	45312
   304  00FC01  0002               	dw	2
   305  00FC03  0035               	dw	53
   306  00FC05  0036               	dw	54
   307  00FC07  B200               	dw	45568
   308  00FC09  0002               	dw	2
   309  00FC0B  0035               	dw	53
   310  00FC0D  0036               	dw	54
   311  00FC0F  B300               	dw	45824
   312  00FC11  0002               	dw	2
   313  00FC13  0035               	dw	53
   314  00FC15  0036               	dw	54
   315  00FC17  0002               	dw	2
   316  00FC19  0035               	dw	53
   317  00FC1B  0036               	dw	54
   318  00FC1D  B400               	dw	46080
   319  00FC1F  0000               	dw	0
   320  00FC21  C000               	dw	49152
   321  00FC23  00A2               	dw	162
   322  00FC25  0002               	dw	2
   323  00FC27  0084               	dw	132
   324  00FC29  C100               	dw	49408
   325  00FC2B  00C5               	dw	197
   326  00FC2D  C200               	dw	49664
   327  00FC2F  000D               	dw	13
   328  00FC31  0000               	dw	0
   329  00FC33  C300               	dw	49920
   330  00FC35  008D               	dw	141
   331  00FC37  002A               	dw	42
   332  00FC39  C400               	dw	50176
   333  00FC3B  008D               	dw	141
   334  00FC3D  00EE               	dw	238
   335  00FC3F  C500               	dw	50432
   336  00FC41  000A               	dw	10
   337  00FC43  3600               	dw	13824
   338  00FC45  00C8               	dw	200
   339  00FC47  E000               	dw	57344
   340  00FC49  0012               	dw	18
   341  00FC4B  001C               	dw	28
   342  00FC4D  0010               	dw	16
   343  00FC4F  0018               	dw	24
   344  00FC51  0033               	dw	51
   345  00FC53  002C               	dw	44
   346  00FC55  0025               	dw	37
   347  00FC57  0028               	dw	40
   348  00FC59  0028               	dw	40
   349  00FC5B  0027               	dw	39
   350  00FC5D  002F               	dw	47
   351  00FC5F  003C               	dw	60
   352  00FC61  0000               	dw	0
   353  00FC63  0003               	dw	3
   354  00FC65  0003               	dw	3
   355  00FC67  0010               	dw	16
   356  00FC69  0080               	dw	128
   357  00FC6B  0078               	dw	120
   358  00FC6D  E100               	dw	57600
   359  00FC6F  0012               	dw	18
   360  00FC71  001C               	dw	28
   361  00FC73  0010               	dw	16
   362  00FC75  0018               	dw	24
   363  00FC77  002D               	dw	45
   364  00FC79  0028               	dw	40
   365  00FC7B  0023               	dw	35
   366  00FC7D  0028               	dw	40
   367  00FC7F  0028               	dw	40
   368  00FC81  0026               	dw	38
   369  00FC83  002F               	dw	47
   370  00FC85  003B               	dw	59
   371  00FC87  0000               	dw	0
   372  00FC89  0003               	dw	3
   373  00FC8B  0003               	dw	3
   374  00FC8D  0010               	dw	16
   375  00FC8F  3A00               	dw	14848
   376  00FC91  0005               	dw	5
   377  00FC93  2A00               	dw	10752
   378  00FC95  0000               	dw	0
   379  00FC97  0002               	dw	2
   380  00FC99  0000               	dw	0
   381  00FC9B  0081               	dw	129
   382  00FC9D  2B00               	dw	11008
   383  00FC9F  0000               	dw	0
   384  00FCA1  0003               	dw	3
   385  00FCA3  0000               	dw	0
   386  00FCA5  00A2               	dw	162
   387  00FCA7  2900               	dw	10496
   388  00FCA9  2C00               	dw	11264
   389  00FCAB                     __end_of_InitList:
   390                           	opt stack 0
   391  00FCAB                     __powers_:
   392                           	opt stack 0
   393  00FCAB  0000               	dw	0
   394  00FCAD  3F80               	dw	16256
   395  00FCAF  0000               	dw	0
   396  00FCB1  4120               	dw	16672
   397  00FCB3  0000               	dw	0
   398  00FCB5  42C8               	dw	17096
   399  00FCB7  0000               	dw	0
   400  00FCB9  447A               	dw	17530
   401  00FCBB  4000               	dw	16384
   402  00FCBD  461C               	dw	17948
   403  00FCBF  5000               	dw	20480
   404  00FCC1  47C3               	dw	18371
   405  00FCC3  2400               	dw	9216
   406  00FCC5  4974               	dw	18804
   407  00FCC7  9680               	dw	38528
   408  00FCC9  4B18               	dw	19224
   409  00FCCB  BC20               	dw	48160
   410  00FCCD  4CBE               	dw	19646
   411  00FCCF  6B28               	dw	27432
   412  00FCD1  4E6E               	dw	20078
   413  00FCD3  02F9               	dw	761
   414  00FCD5  5015               	dw	20501
   415  00FCD7  78EC               	dw	30956
   416  00FCD9  60AD               	dw	24749
   417  00FCDB  F2CA               	dw	62154
   418  00FCDD  7149               	dw	29001
   419  00FCDF                     __end_of__powers_:
   420                           	opt stack 0
   421  00FCDF                     __npowers_:
   422                           	opt stack 0
   423  00FCDF  0000               	dw	0
   424  00FCE1  3F80               	dw	16256
   425  00FCE3  CCCD               	dw	52429
   426  00FCE5  3DCC               	dw	15820
   427  00FCE7  D70A               	dw	55050
   428  00FCE9  3C23               	dw	15395
   429  00FCEB  126F               	dw	4719
   430  00FCED  3A83               	dw	14979
   431  00FCEF  B717               	dw	46871
   432  00FCF1  38D1               	dw	14545
   433  00FCF3  C5AC               	dw	50604
   434  00FCF5  3727               	dw	14119
   435  00FCF7  37BD               	dw	14269
   436  00FCF9  3586               	dw	13702
   437  00FCFB  BF95               	dw	49045
   438  00FCFD  33D6               	dw	13270
   439  00FCFF  CC77               	dw	52343
   440  00FD01  322B               	dw	12843
   441  00FD03  705F               	dw	28767
   442  00FD05  3089               	dw	12425
   443  00FD07  E6FF               	dw	59135
   444  00FD09  2EDB               	dw	11995
   445  00FD0B  E508               	dw	58632
   446  00FD0D  1E3C               	dw	7740
   447  00FD0F  4260               	dw	16992
   448  00FD11  0DA2               	dw	3490
   449  00FD13                     __end_of__npowers_:
   450                           	opt stack 0
   451  00FD13                     _dpowers:
   452                           	opt stack 0
   453  00FD13  0001               	dw	1
   454  00FD15  0000               	dw	0
   455  00FD17  000A               	dw	10
   456  00FD19  0000               	dw	0
   457  00FD1B  0064               	dw	100
   458  00FD1D  0000               	dw	0
   459  00FD1F  03E8               	dw	1000
   460  00FD21  0000               	dw	0
   461  00FD23  2710               	dw	10000
   462  00FD25  0000               	dw	0
   463  00FD27  86A0               	dw	34464
   464  00FD29  0001               	dw	1
   465  00FD2B  4240               	dw	16960
   466  00FD2D  000F               	dw	15
   467  00FD2F  9680               	dw	38528
   468  00FD31  0098               	dw	152
   469  00FD33  E100               	dw	57600
   470  00FD35  05F5               	dw	1525
   471  00FD37  CA00               	dw	51712
   472  00FD39  3B9A               	dw	15258
   473  00FD3B                     __end_of_dpowers:
   474                           	opt stack 0
   475  00FD3B                     Timer0_Init@PRESCALE:
   476                           	opt stack 0
   477  00FD3B  0002               	dw	2
   478  00FD3D  0004               	dw	4
   479  00FD3F  0008               	dw	8
   480  00FD41  0010               	dw	16
   481  00FD43  0020               	dw	32
   482  00FD45  0040               	dw	64
   483  00FD47  0080               	dw	128
   484  00FD49  0100               	dw	256
   485  00FD4B                     __end_ofTimer0_Init@PRESCALE:
   486                           	opt stack 0
   487  00FD4B                     PortProperty_Valid@F6830:
   488                           	opt stack 0
   489  00FD4B  00                 	db	0
   490  00FD4C  01                 	db	1
   491  00FD4D  02                 	db	2
   492  00FD4E  00                 	db	0
   493  00FD4F  01                 	db	1
   494  00FD50  00                 	db	0
   495  00FD51  01                 	db	1
   496  00FD52  00                 	db	0
   497  00FD53  02                 	db	2
   498  00FD54  02                 	db	2
   499  00FD55  00                 	db	0
   500  00FD56  00                 	db	0
   501  00FD57  03                 	db	3
   502  00FD58  03                 	db	3
   503  00FD59  03                 	db	3
   504  00FD5A  00                 	db	0
   505  00FD5B                     __end_ofPortProperty_Valid@F6830:
   506                           	opt stack 0
   507  00FD5B                     _MASKS:
   508                           	opt stack 0
   509  00FD5B  00                 	db	0
   510  00FD5C  01                 	db	1
   511  00FD5D  03                 	db	3
   512  00FD5E  07                 	db	7
   513  00FD5F  0F                 	db	15
   514  00FD60  1F                 	db	31
   515  00FD61  3F                 	db	63
   516  00FD62  7F                 	db	127
   517  00FD63  FF                 	db	255
   518  00FD64                     __end_of_MASKS:
   519                           	opt stack 0
   520  00FD64                     HMI_SetButton@F7213:
   521                           	opt stack 0
   522  00FD64  00                 	db	0
   523  00FD65  02                 	db	2
   524  00FD66  01                 	db	1
   525  00FD67  03                 	db	3
   526  00FD68                     __end_ofHMI_SetButton@F7213:
   527                           	opt stack 0
   528  00FD68                     Timer2_Init@PRESCALE:
   529                           	opt stack 0
   530  00FD68  01                 	db	1
   531  00FD69  04                 	db	4
   532  00FD6A  10                 	db	16
   533  00FD6B                     __end_ofTimer2_Init@PRESCALE:
   534                           	opt stack 0
   535  00FD6B                     _Font5x7:
   536                           	opt stack 0
   537  00FD6B  00                 	db	0
   538  00FD6C  00                 	db	0
   539  00FD6D  00                 	db	0
   540  00FD6E  00                 	db	0
   541  00FD6F  00                 	db	0
   542  00FD70  00                 	db	0
   543  00FD71  00                 	db	0
   544  00FD72  5F                 	db	95
   545  00FD73  00                 	db	0
   546  00FD74  00                 	db	0
   547  00FD75  00                 	db	0
   548  00FD76  07                 	db	7
   549  00FD77  00                 	db	0
   550  00FD78  07                 	db	7
   551  00FD79  00                 	db	0
   552  00FD7A  14                 	db	20
   553  00FD7B  7F                 	db	127
   554  00FD7C  14                 	db	20
   555  00FD7D  7F                 	db	127
   556  00FD7E  14                 	db	20
   557  00FD7F  24                 	db	36
   558  00FD80  2A                 	db	42
   559  00FD81  7F                 	db	127
   560  00FD82  2A                 	db	42
   561  00FD83  12                 	db	18
   562  00FD84  23                 	db	35
   563  00FD85  13                 	db	19
   564  00FD86  08                 	db	8
   565  00FD87  64                 	db	100
   566  00FD88  62                 	db	98
   567  00FD89  36                 	db	54
   568  00FD8A  49                 	db	73
   569  00FD8B  55                 	db	85
   570  00FD8C  22                 	db	34
   571  00FD8D  50                 	db	80
   572  00FD8E  00                 	db	0
   573  00FD8F  05                 	db	5
   574  00FD90  03                 	db	3
   575  00FD91  00                 	db	0
   576  00FD92  00                 	db	0
   577  00FD93  00                 	db	0
   578  00FD94  1C                 	db	28
   579  00FD95  22                 	db	34
   580  00FD96  41                 	db	65
   581  00FD97  00                 	db	0
   582  00FD98  00                 	db	0
   583  00FD99  41                 	db	65
   584  00FD9A  22                 	db	34
   585  00FD9B  1C                 	db	28
   586  00FD9C  00                 	db	0
   587  00FD9D  08                 	db	8
   588  00FD9E  2A                 	db	42
   589  00FD9F  1C                 	db	28
   590  00FDA0  2A                 	db	42
   591  00FDA1  08                 	db	8
   592  00FDA2  08                 	db	8
   593  00FDA3  08                 	db	8
   594  00FDA4  3E                 	db	62
   595  00FDA5  08                 	db	8
   596  00FDA6  08                 	db	8
   597  00FDA7  00                 	db	0
   598  00FDA8  50                 	db	80
   599  00FDA9  30                 	db	48
   600  00FDAA  00                 	db	0
   601  00FDAB  00                 	db	0
   602  00FDAC  08                 	db	8
   603  00FDAD  08                 	db	8
   604  00FDAE  08                 	db	8
   605  00FDAF  08                 	db	8
   606  00FDB0  08                 	db	8
   607  00FDB1  00                 	db	0
   608  00FDB2  60                 	db	96
   609  00FDB3  60                 	db	96
   610  00FDB4  00                 	db	0
   611  00FDB5  00                 	db	0
   612  00FDB6  20                 	db	32
   613  00FDB7  10                 	db	16
   614  00FDB8  08                 	db	8
   615  00FDB9  04                 	db	4
   616  00FDBA  02                 	db	2
   617  00FDBB  3E                 	db	62
   618  00FDBC  51                 	db	81
   619  00FDBD  49                 	db	73
   620  00FDBE  45                 	db	69
   621  00FDBF  3E                 	db	62
   622  00FDC0  00                 	db	0
   623  00FDC1  42                 	db	66
   624  00FDC2  7F                 	db	127
   625  00FDC3  40                 	db	64
   626  00FDC4  00                 	db	0
   627  00FDC5  42                 	db	66
   628  00FDC6  61                 	db	97
   629  00FDC7  51                 	db	81
   630  00FDC8  49                 	db	73
   631  00FDC9  46                 	db	70
   632  00FDCA  21                 	db	33
   633  00FDCB  41                 	db	65
   634  00FDCC  45                 	db	69
   635  00FDCD  4B                 	db	75
   636  00FDCE  31                 	db	49
   637  00FDCF  18                 	db	24
   638  00FDD0  14                 	db	20
   639  00FDD1  12                 	db	18
   640  00FDD2  7F                 	db	127
   641  00FDD3  10                 	db	16
   642  00FDD4  27                 	db	39
   643  00FDD5  45                 	db	69
   644  00FDD6  45                 	db	69
   645  00FDD7  45                 	db	69
   646  00FDD8  39                 	db	57
   647  00FDD9  3C                 	db	60
   648  00FDDA  4A                 	db	74
   649  00FDDB  49                 	db	73
   650  00FDDC  49                 	db	73
   651  00FDDD  30                 	db	48
   652  00FDDE  01                 	db	1
   653  00FDDF  71                 	db	113
   654  00FDE0  09                 	db	9
   655  00FDE1  05                 	db	5
   656  00FDE2  03                 	db	3
   657  00FDE3  36                 	db	54
   658  00FDE4  49                 	db	73
   659  00FDE5  49                 	db	73
   660  00FDE6  49                 	db	73
   661  00FDE7  36                 	db	54
   662  00FDE8  06                 	db	6
   663  00FDE9  49                 	db	73
   664  00FDEA  49                 	db	73
   665  00FDEB  29                 	db	41
   666  00FDEC  1E                 	db	30
   667  00FDED  00                 	db	0
   668  00FDEE  36                 	db	54
   669  00FDEF  36                 	db	54
   670  00FDF0  00                 	db	0
   671  00FDF1  00                 	db	0
   672  00FDF2  00                 	db	0
   673  00FDF3  56                 	db	86
   674  00FDF4  36                 	db	54
   675  00FDF5  00                 	db	0
   676  00FDF6  00                 	db	0
   677  00FDF7  00                 	db	0
   678  00FDF8  08                 	db	8
   679  00FDF9  14                 	db	20
   680  00FDFA  22                 	db	34
   681  00FDFB  41                 	db	65
   682  00FDFC  14                 	db	20
   683  00FDFD  14                 	db	20
   684  00FDFE  14                 	db	20
   685  00FDFF  14                 	db	20
   686  00FE00  14                 	db	20
   687  00FE01  41                 	db	65
   688  00FE02  22                 	db	34
   689  00FE03  14                 	db	20
   690  00FE04  08                 	db	8
   691  00FE05  00                 	db	0
   692  00FE06  02                 	db	2
   693  00FE07  01                 	db	1
   694  00FE08  51                 	db	81
   695  00FE09  09                 	db	9
   696  00FE0A  06                 	db	6
   697  00FE0B  32                 	db	50
   698  00FE0C  49                 	db	73
   699  00FE0D  79                 	db	121
   700  00FE0E  41                 	db	65
   701  00FE0F  3E                 	db	62
   702  00FE10  7E                 	db	126
   703  00FE11  11                 	db	17
   704  00FE12  11                 	db	17
   705  00FE13  11                 	db	17
   706  00FE14  7E                 	db	126
   707  00FE15  7F                 	db	127
   708  00FE16  49                 	db	73
   709  00FE17  49                 	db	73
   710  00FE18  49                 	db	73
   711  00FE19  36                 	db	54
   712  00FE1A  3E                 	db	62
   713  00FE1B  41                 	db	65
   714  00FE1C  41                 	db	65
   715  00FE1D  41                 	db	65
   716  00FE1E  22                 	db	34
   717  00FE1F  7F                 	db	127
   718  00FE20  41                 	db	65
   719  00FE21  41                 	db	65
   720  00FE22  22                 	db	34
   721  00FE23  1C                 	db	28
   722  00FE24  7F                 	db	127
   723  00FE25  49                 	db	73
   724  00FE26  49                 	db	73
   725  00FE27  49                 	db	73
   726  00FE28  41                 	db	65
   727  00FE29  7F                 	db	127
   728  00FE2A  09                 	db	9
   729  00FE2B  09                 	db	9
   730  00FE2C  01                 	db	1
   731  00FE2D  01                 	db	1
   732  00FE2E  3E                 	db	62
   733  00FE2F  41                 	db	65
   734  00FE30  41                 	db	65
   735  00FE31  51                 	db	81
   736  00FE32  32                 	db	50
   737  00FE33  7F                 	db	127
   738  00FE34  08                 	db	8
   739  00FE35  08                 	db	8
   740  00FE36  08                 	db	8
   741  00FE37  7F                 	db	127
   742  00FE38  00                 	db	0
   743  00FE39  41                 	db	65
   744  00FE3A  7F                 	db	127
   745  00FE3B  41                 	db	65
   746  00FE3C  00                 	db	0
   747  00FE3D  20                 	db	32
   748  00FE3E  40                 	db	64
   749  00FE3F  41                 	db	65
   750  00FE40  3F                 	db	63
   751  00FE41  01                 	db	1
   752  00FE42  7F                 	db	127
   753  00FE43  08                 	db	8
   754  00FE44  14                 	db	20
   755  00FE45  22                 	db	34
   756  00FE46  41                 	db	65
   757  00FE47  7F                 	db	127
   758  00FE48  40                 	db	64
   759  00FE49  40                 	db	64
   760  00FE4A  40                 	db	64
   761  00FE4B  40                 	db	64
   762  00FE4C  7F                 	db	127
   763  00FE4D  02                 	db	2
   764  00FE4E  04                 	db	4
   765  00FE4F  02                 	db	2
   766  00FE50  7F                 	db	127
   767  00FE51  7F                 	db	127
   768  00FE52  04                 	db	4
   769  00FE53  08                 	db	8
   770  00FE54  10                 	db	16
   771  00FE55  7F                 	db	127
   772  00FE56  3E                 	db	62
   773  00FE57  41                 	db	65
   774  00FE58  41                 	db	65
   775  00FE59  41                 	db	65
   776  00FE5A  3E                 	db	62
   777  00FE5B  7F                 	db	127
   778  00FE5C  09                 	db	9
   779  00FE5D  09                 	db	9
   780  00FE5E  09                 	db	9
   781  00FE5F  06                 	db	6
   782  00FE60  3E                 	db	62
   783  00FE61  41                 	db	65
   784  00FE62  51                 	db	81
   785  00FE63  21                 	db	33
   786  00FE64  5E                 	db	94
   787  00FE65  7F                 	db	127
   788  00FE66  09                 	db	9
   789  00FE67  19                 	db	25
   790  00FE68  29                 	db	41
   791  00FE69  46                 	db	70
   792  00FE6A  46                 	db	70
   793  00FE6B  49                 	db	73
   794  00FE6C  49                 	db	73
   795  00FE6D  49                 	db	73
   796  00FE6E  31                 	db	49
   797  00FE6F  01                 	db	1
   798  00FE70  01                 	db	1
   799  00FE71  7F                 	db	127
   800  00FE72  01                 	db	1
   801  00FE73  01                 	db	1
   802  00FE74  3F                 	db	63
   803  00FE75  40                 	db	64
   804  00FE76  40                 	db	64
   805  00FE77  40                 	db	64
   806  00FE78  3F                 	db	63
   807  00FE79  1F                 	db	31
   808  00FE7A  20                 	db	32
   809  00FE7B  40                 	db	64
   810  00FE7C  20                 	db	32
   811  00FE7D  1F                 	db	31
   812  00FE7E  7F                 	db	127
   813  00FE7F  20                 	db	32
   814  00FE80  18                 	db	24
   815  00FE81  20                 	db	32
   816  00FE82  7F                 	db	127
   817  00FE83  63                 	db	99
   818  00FE84  14                 	db	20
   819  00FE85  08                 	db	8
   820  00FE86  14                 	db	20
   821  00FE87  63                 	db	99
   822  00FE88  03                 	db	3
   823  00FE89  04                 	db	4
   824  00FE8A  78                 	db	120
   825  00FE8B  04                 	db	4
   826  00FE8C  03                 	db	3
   827  00FE8D  61                 	db	97
   828  00FE8E  51                 	db	81
   829  00FE8F  49                 	db	73
   830  00FE90  45                 	db	69
   831  00FE91  43                 	db	67
   832  00FE92  00                 	db	0
   833  00FE93  00                 	db	0
   834  00FE94  7F                 	db	127
   835  00FE95  41                 	db	65
   836  00FE96  41                 	db	65
   837  00FE97  02                 	db	2
   838  00FE98  04                 	db	4
   839  00FE99  08                 	db	8
   840  00FE9A  10                 	db	16
   841  00FE9B  20                 	db	32
   842  00FE9C  41                 	db	65
   843  00FE9D  41                 	db	65
   844  00FE9E  7F                 	db	127
   845  00FE9F  00                 	db	0
   846  00FEA0  00                 	db	0
   847  00FEA1  04                 	db	4
   848  00FEA2  02                 	db	2
   849  00FEA3  01                 	db	1
   850  00FEA4  02                 	db	2
   851  00FEA5  04                 	db	4
   852  00FEA6  40                 	db	64
   853  00FEA7  40                 	db	64
   854  00FEA8  40                 	db	64
   855  00FEA9  40                 	db	64
   856  00FEAA  40                 	db	64
   857  00FEAB  00                 	db	0
   858  00FEAC  01                 	db	1
   859  00FEAD  02                 	db	2
   860  00FEAE  04                 	db	4
   861  00FEAF  00                 	db	0
   862  00FEB0  20                 	db	32
   863  00FEB1  54                 	db	84
   864  00FEB2  54                 	db	84
   865  00FEB3  54                 	db	84
   866  00FEB4  78                 	db	120
   867  00FEB5  7F                 	db	127
   868  00FEB6  48                 	db	72
   869  00FEB7  44                 	db	68
   870  00FEB8  44                 	db	68
   871  00FEB9  38                 	db	56
   872  00FEBA  38                 	db	56
   873  00FEBB  44                 	db	68
   874  00FEBC  44                 	db	68
   875  00FEBD  44                 	db	68
   876  00FEBE  20                 	db	32
   877  00FEBF  38                 	db	56
   878  00FEC0  44                 	db	68
   879  00FEC1  44                 	db	68
   880  00FEC2  48                 	db	72
   881  00FEC3  7F                 	db	127
   882  00FEC4  38                 	db	56
   883  00FEC5  54                 	db	84
   884  00FEC6  54                 	db	84
   885  00FEC7  54                 	db	84
   886  00FEC8  18                 	db	24
   887  00FEC9  08                 	db	8
   888  00FECA  7E                 	db	126
   889  00FECB  09                 	db	9
   890  00FECC  01                 	db	1
   891  00FECD  02                 	db	2
   892  00FECE  08                 	db	8
   893  00FECF  14                 	db	20
   894  00FED0  54                 	db	84
   895  00FED1  54                 	db	84
   896  00FED2  3C                 	db	60
   897  00FED3  7F                 	db	127
   898  00FED4  08                 	db	8
   899  00FED5  04                 	db	4
   900  00FED6  04                 	db	4
   901  00FED7  78                 	db	120
   902  00FED8  00                 	db	0
   903  00FED9  44                 	db	68
   904  00FEDA  7D                 	db	125
   905  00FEDB  40                 	db	64
   906  00FEDC  00                 	db	0
   907  00FEDD  20                 	db	32
   908  00FEDE  40                 	db	64
   909  00FEDF  44                 	db	68
   910  00FEE0  3D                 	db	61
   911  00FEE1  00                 	db	0
   912  00FEE2  00                 	db	0
   913  00FEE3  7F                 	db	127
   914  00FEE4  10                 	db	16
   915  00FEE5  28                 	db	40
   916  00FEE6  44                 	db	68
   917  00FEE7  00                 	db	0
   918  00FEE8  41                 	db	65
   919  00FEE9  7F                 	db	127
   920  00FEEA  40                 	db	64
   921  00FEEB  00                 	db	0
   922  00FEEC  7C                 	db	124
   923  00FEED  04                 	db	4
   924  00FEEE  18                 	db	24
   925  00FEEF  04                 	db	4
   926  00FEF0  78                 	db	120
   927  00FEF1  7C                 	db	124
   928  00FEF2  08                 	db	8
   929  00FEF3  04                 	db	4
   930  00FEF4  04                 	db	4
   931  00FEF5  78                 	db	120
   932  00FEF6  38                 	db	56
   933  00FEF7  44                 	db	68
   934  00FEF8  44                 	db	68
   935  00FEF9  44                 	db	68
   936  00FEFA  38                 	db	56
   937  00FEFB  7C                 	db	124
   938  00FEFC  14                 	db	20
   939  00FEFD  14                 	db	20
   940  00FEFE  14                 	db	20
   941  00FEFF  08                 	db	8
   942  00FF00  08                 	db	8
   943  00FF01  14                 	db	20
   944  00FF02  14                 	db	20
   945  00FF03  18                 	db	24
   946  00FF04  7C                 	db	124
   947  00FF05  7C                 	db	124
   948  00FF06  08                 	db	8
   949  00FF07  04                 	db	4
   950  00FF08  04                 	db	4
   951  00FF09  08                 	db	8
   952  00FF0A  48                 	db	72
   953  00FF0B  54                 	db	84
   954  00FF0C  54                 	db	84
   955  00FF0D  54                 	db	84
   956  00FF0E  20                 	db	32
   957  00FF0F  04                 	db	4
   958  00FF10  3F                 	db	63
   959  00FF11  44                 	db	68
   960  00FF12  40                 	db	64
   961  00FF13  20                 	db	32
   962  00FF14  3C                 	db	60
   963  00FF15  40                 	db	64
   964  00FF16  40                 	db	64
   965  00FF17  20                 	db	32
   966  00FF18  7C                 	db	124
   967  00FF19  1C                 	db	28
   968  00FF1A  20                 	db	32
   969  00FF1B  40                 	db	64
   970  00FF1C  20                 	db	32
   971  00FF1D  1C                 	db	28
   972  00FF1E  3C                 	db	60
   973  00FF1F  40                 	db	64
   974  00FF20  30                 	db	48
   975  00FF21  40                 	db	64
   976  00FF22  3C                 	db	60
   977  00FF23  44                 	db	68
   978  00FF24  28                 	db	40
   979  00FF25  10                 	db	16
   980  00FF26  28                 	db	40
   981  00FF27  44                 	db	68
   982  00FF28  0C                 	db	12
   983  00FF29  50                 	db	80
   984  00FF2A  50                 	db	80
   985  00FF2B  50                 	db	80
   986  00FF2C  3C                 	db	60
   987  00FF2D  44                 	db	68
   988  00FF2E  64                 	db	100
   989  00FF2F  54                 	db	84
   990  00FF30  4C                 	db	76
   991  00FF31  44                 	db	68
   992  00FF32  00                 	db	0
   993  00FF33  08                 	db	8
   994  00FF34  36                 	db	54
   995  00FF35  41                 	db	65
   996  00FF36  00                 	db	0
   997  00FF37  00                 	db	0
   998  00FF38  00                 	db	0
   999  00FF39  7F                 	db	127
  1000  00FF3A  00                 	db	0
  1001  00FF3B  00                 	db	0
  1002  00FF3C  00                 	db	0
  1003  00FF3D  41                 	db	65
  1004  00FF3E  36                 	db	54
  1005  00FF3F  08                 	db	8
  1006  00FF40  00                 	db	0
  1007  00FF41  08                 	db	8
  1008  00FF42  08                 	db	8
  1009  00FF43  2A                 	db	42
  1010  00FF44  1C                 	db	28
  1011  00FF45  08                 	db	8
  1012  00FF46  08                 	db	8
  1013  00FF47  1C                 	db	28
  1014  00FF48  2A                 	db	42
  1015  00FF49  08                 	db	8
  1016  00FF4A  08                 	db	8
  1017  00FF4B                     __end_of_Font5x7:
  1018                           	opt stack 0
  1019  00FF4B                     _PortG_Property:
  1020                           	opt stack 0
  1021  00FF4B  FC00               	dw	64512
  1022  00FF4D                     __end_of_PortG_Property:
  1023                           	opt stack 0
  1024  00FF4D                     _PortF_Property:
  1025                           	opt stack 0
  1026  00FF4D  0FFF               	dw	4095
  1027  00FF4F                     __end_of_PortF_Property:
  1028                           	opt stack 0
  1029  00FF4F                     _PortE_Property:
  1030                           	opt stack 0
  1031  00FF4F  0000               	dw	0
  1032  00FF51                     __end_of_PortE_Property:
  1033                           	opt stack 0
  1034  00FF51                     _PortD_Property:
  1035                           	opt stack 0
  1036  00FF51  FFFF               	dw	65535
  1037  00FF53                     __end_of_PortD_Property:
  1038                           	opt stack 0
  1039  00FF53                     _PortC_Property:
  1040                           	opt stack 0
  1041  00FF53  FFF0               	dw	65520
  1042  00FF55                     __end_of_PortC_Property:
  1043                           	opt stack 0
  1044  00FF55                     _PortB_Property:
  1045                           	opt stack 0
  1046  00FF55  FF00               	dw	65280
  1047  00FF57                     __end_of_PortB_Property:
  1048                           	opt stack 0
  1049  00FF57                     _PortA_Property:
  1050                           	opt stack 0
  1051  00FF57  00FF               	dw	255
  1052  00FF59                     __end_of_PortA_Property:
  1053                           	opt stack 0
  1054  0000                     _TMR0	set	4054
  1055  0000                     _RCREG1	set	4015
  1056  0000                     _TXREG1	set	4014
  1057  0000                     _SPBRG1	set	4016
  1058  0000                     _TXSTA1bits	set	4013
  1059  0000                     _BAUDCON1bits	set	3966
  1060  0000                     _RCSTA1	set	4012
  1061  0000                     _TXSTA1	set	4013
  1062  0000                     _TRISCbits	set	3988
  1063  0000                     _PR2	set	4043
  1064  0000                     _T2CONbits	set	4042
  1065  0000                     _T0CONbits	set	4053
  1066  0000                     _RCONbits	set	4048
  1067  0000                     _OSCTUNEbits	set	3995
  1068  0000                     _PIR3	set	4004
  1069  0000                     _PIR2	set	4001
  1070  0000                     _PIR1	set	3998
  1071  0000                     _INTCONbits	set	4082
  1072  0000                     _SSP2CON2bits	set	3947
  1073  0000                     _SSP1CON2bits	set	4037
  1074  0000                     _SSP1ADD	set	4040
  1075  0000                     _ANCON0	set	4033
  1076  0000                     _ADRESL	set	4035
  1077  0000                     _ADRESH	set	4036
  1078  0000                     _ADCON1bits	set	4033
  1079  0000                     _ADCON0bits	set	4034
  1080  0000                     _SSP2CON1bits	set	3948
  1081  0000                     _SSP1CON1bits	set	4038
  1082  0000                     _SSP2STATbits	set	3949
  1083  0000                     _SSP1STATbits	set	4039
  1084  0000                     _PIE3bits	set	4003
  1085  0000                     _PIE1bits	set	3997
  1086  0000                     _PIR3bits	set	4004
  1087  0000                     _PIR1bits	set	3998
  1088  0000                     _IPR3bits	set	4005
  1089  0000                     _IPR1bits	set	3999
  1090  0000                     _PORTFbits	set	3973
  1091  0000                     _SSP2CON2	set	3947
  1092  0000                     _SSP1CON2	set	4037
  1093  0000                     _SSP2BUF	set	3951
  1094  0000                     _SSP2CON1	set	3948
  1095  0000                     _SSP2STAT	set	3949
  1096  0000                     _SSP1BUF	set	4041
  1097  0000                     _SSP1CON1	set	4038
  1098  0000                     _SSP1STAT	set	4039
  1099  0000                     _LATG	set	3983
  1100  0000                     _LATF	set	3982
  1101  0000                     _LATE	set	3981
  1102  0000                     _LATD	set	3980
  1103  0000                     _LATC	set	3979
  1104  0000                     _LATB	set	3978
  1105  0000                     _LATA	set	3977
  1106  0000                     _TRISG	set	3992
  1107  0000                     _TRISF	set	3991
  1108  0000                     _TRISE	set	3990
  1109  0000                     _TRISD	set	3989
  1110  0000                     _TRISC	set	3988
  1111  0000                     _TRISB	set	3987
  1112  0000                     _TRISA	set	3986
  1113  0000                     _PORTG	set	3974
  1114  0000                     _PORTF	set	3973
  1115  0000                     _PORTE	set	3972
  1116  0000                     _PORTD	set	3971
  1117  0000                     _PORTC	set	3970
  1118  0000                     _PORTB	set	3969
  1119  0000                     _PORTA	set	3968
  1120  00FF59                     STR_8:
  1121  00FF59  43                 	db	67	;'C'
  1122  00FF5A  6C                 	db	108	;'l'
  1123  00FF5B  6F                 	db	111	;'o'
  1124  00FF5C  73                 	db	115	;'s'
  1125  00FF5D  65                 	db	101	;'e'
  1126  00FF5E  73                 	db	115	;'s'
  1127  00FF5F  74                 	db	116	;'t'
  1128  00FF60  20                 	db	32
  1129  00FF61  57                 	db	87	;'W'
  1130  00FF62  61                 	db	97	;'a'
  1131  00FF63  6C                 	db	108	;'l'
  1132  00FF64  6C                 	db	108	;'l'
  1133  00FF65  3A                 	db	58	;':'
  1134  00FF66  25                 	db	37
  1135  00FF67  75                 	db	117	;'u'
  1136  00FF68  0A                 	db	10
  1137  00FF69  43                 	db	67	;'C'
  1138  00FF6A  6C                 	db	108	;'l'
  1139  00FF6B  6F                 	db	111	;'o'
  1140  00FF6C  73                 	db	115	;'s'
  1141  00FF6D  65                 	db	101	;'e'
  1142  00FF6E  73                 	db	115	;'s'
  1143  00FF6F  74                 	db	116	;'t'
  1144  00FF70  20                 	db	32
  1145  00FF71  41                 	db	65	;'A'
  1146  00FF72  6E                 	db	110	;'n'
  1147  00FF73  67                 	db	103	;'g'
  1148  00FF74  6C                 	db	108	;'l'
  1149  00FF75  65                 	db	101	;'e'
  1150  00FF76  3A                 	db	58	;':'
  1151  00FF77  25                 	db	37
  1152  00FF78  66                 	db	102	;'f'
  1153  00FF79  0A                 	db	10
  1154  00FF7A  4C                 	db	76	;'L'
  1155  00FF7B  65                 	db	101	;'e'
  1156  00FF7C  66                 	db	102	;'f'
  1157  00FF7D  74                 	db	116	;'t'
  1158  00FF7E  20                 	db	32
  1159  00FF7F  42                 	db	66	;'B'
  1160  00FF80  75                 	db	117	;'u'
  1161  00FF81  6D                 	db	109	;'m'
  1162  00FF82  70                 	db	112	;'p'
  1163  00FF83  3A                 	db	58	;':'
  1164  00FF84  25                 	db	37
  1165  00FF85  75                 	db	117	;'u'
  1166  00FF86  0A                 	db	10
  1167  00FF87  52                 	db	82	;'R'
  1168  00FF88  69                 	db	105	;'i'
  1169  00FF89  67                 	db	103	;'g'
  1170  00FF8A  68                 	db	104	;'h'
  1171  00FF8B  74                 	db	116	;'t'
  1172  00FF8C  42                 	db	66	;'B'
  1173  00FF8D  75                 	db	117	;'u'
  1174  00FF8E  6D                 	db	109	;'m'
  1175  00FF8F  70                 	db	112	;'p'
  1176  00FF90  3A                 	db	58	;':'
  1177  00FF91  25                 	db	37
  1178  00FF92  75                 	db	117	;'u'
  1179  00FF93  0A                 	db	10
  1180  00FF94  00                 	db	0
  1181  00FF95                     STR_2:
  1182  00FF95  54                 	db	84	;'T'
  1183  00FF96  6F                 	db	111	;'o'
  1184  00FF97  74                 	db	116	;'t'
  1185  00FF98  61                 	db	97	;'a'
  1186  00FF99  6C                 	db	108	;'l'
  1187  00FF9A  20                 	db	32
  1188  00FF9B  44                 	db	68	;'D'
  1189  00FF9C  69                 	db	105	;'i'
  1190  00FF9D  73                 	db	115	;'s'
  1191  00FF9E  74                 	db	116	;'t'
  1192  00FF9F  61                 	db	97	;'a'
  1193  00FFA0  6E                 	db	110	;'n'
  1194  00FFA1  63                 	db	99	;'c'
  1195  00FFA2  65                 	db	101	;'e'
  1196  00FFA3  3A                 	db	58	;':'
  1197  00FFA4  25                 	db	37
  1198  00FFA5  75                 	db	117	;'u'
  1199  00FFA6  0A                 	db	10
  1200  00FFA7  4C                 	db	76	;'L'
  1201  00FFA8  65                 	db	101	;'e'
  1202  00FFA9  66                 	db	102	;'f'
  1203  00FFAA  74                 	db	116	;'t'
  1204  00FFAB  20                 	db	32
  1205  00FFAC  42                 	db	66	;'B'
  1206  00FFAD  75                 	db	117	;'u'
  1207  00FFAE  6D                 	db	109	;'m'
  1208  00FFAF  70                 	db	112	;'p'
  1209  00FFB0  3A                 	db	58	;':'
  1210  00FFB1  25                 	db	37
  1211  00FFB2  75                 	db	117	;'u'
  1212  00FFB3  0A                 	db	10
  1213  00FFB4  52                 	db	82	;'R'
  1214  00FFB5  69                 	db	105	;'i'
  1215  00FFB6  67                 	db	103	;'g'
  1216  00FFB7  68                 	db	104	;'h'
  1217  00FFB8  74                 	db	116	;'t'
  1218  00FFB9  20                 	db	32
  1219  00FFBA  42                 	db	66	;'B'
  1220  00FFBB  75                 	db	117	;'u'
  1221  00FFBC  6D                 	db	109	;'m'
  1222  00FFBD  70                 	db	112	;'p'
  1223  00FFBE  3A                 	db	58	;':'
  1224  00FFBF  25                 	db	37
  1225  00FFC0  75                 	db	117	;'u'
  1226  00FFC1  0A                 	db	10
  1227  00FFC2  00                 	db	0
  1228  00FFC3                     STR_11:
  1229  00FFC3  20                 	db	32
  1230  00FFC4  20                 	db	32
  1231  00FFC5  20                 	db	32
  1232  00FFC6  20                 	db	32
  1233  00FFC7  20                 	db	32
  1234  00FFC8  20                 	db	32
  1235  00FFC9  20                 	db	32
  1236  00FFCA  20                 	db	32
  1237  00FFCB  20                 	db	32
  1238  00FFCC  20                 	db	32
  1239  00FFCD  20                 	db	32
  1240  00FFCE  20                 	db	32
  1241  00FFCF  20                 	db	32
  1242  00FFD0  20                 	db	32
  1243  00FFD1  20                 	db	32
  1244  00FFD2  20                 	db	32
  1245  00FFD3  20                 	db	32
  1246  00FFD4  20                 	db	32
  1247  00FFD5  20                 	db	32
  1248  00FFD6  0A                 	db	10
  1249  00FFD7  00                 	db	0
  1250  00FFD8                     STR_10:
  1251  00FFD8  50                 	db	80	;'P'
  1252  00FFD9  6C                 	db	108	;'l'
  1253  00FFDA  65                 	db	101	;'e'
  1254  00FFDB  61                 	db	97	;'a'
  1255  00FFDC  73                 	db	115	;'s'
  1256  00FFDD  65                 	db	101	;'e'
  1257  00FFDE  20                 	db	32
  1258  00FFDF  73                 	db	115	;'s'
  1259  00FFE0  65                 	db	101	;'e'
  1260  00FFE1  6C                 	db	108	;'l'
  1261  00FFE2  65                 	db	101	;'e'
  1262  00FFE3  63                 	db	99	;'c'
  1263  00FFE4  74                 	db	116	;'t'
  1264  00FFE5  20                 	db	32
  1265  00FFE6  6D                 	db	109	;'m'
  1266  00FFE7  6F                 	db	111	;'o'
  1267  00FFE8  64                 	db	100	;'d'
  1268  00FFE9  65                 	db	101	;'e'
  1269  00FFEA  2E                 	db	46
  1270  00FFEB  0A                 	db	10
  1271  00FFEC  00                 	db	0
  1272  00FFED                     STR_6:
  1273  00FFED  44                 	db	68	;'D'
  1274  00FFEE  69                 	db	105	;'i'
  1275  00FFEF  73                 	db	115	;'s'
  1276  00FFF0  74                 	db	116	;'t'
  1277  00FFF1  61                 	db	97	;'a'
  1278  00FFF2  6E                 	db	110	;'n'
  1279  00FFF3  63                 	db	99	;'c'
  1280  00FFF4  65                 	db	101	;'e'
  1281  00FFF5  3A                 	db	58	;':'
  1282  00FFF6  20                 	db	32
  1283  00FFF7  25                 	db	37
  1284  00FFF8  64                 	db	100	;'d'
  1285  00FFF9  0A                 	db	10
  1286  00FFFA  00                 	db	0
  1287  00FFFB                     STR_1:
  1288  00FFFB  25                 	db	37
  1289  00FFFC  63                 	db	99	;'c'
  1290  00FFFD  00                 	db	0
  1291  0000                     
  1292                           ; #config settings
  1293  00FFFE  00                 	db	0	; dummy byte at the end
  1294  0000                     
  1295                           	psect	cinit
  1296  01666E                     __pcinit:
  1297                           	opt stack 0
  1298  01666E                     start_initialization:
  1299                           	opt stack 0
  1300  01666E                     __initialization:
  1301                           	opt stack 0
  1302                           
  1303                           ; Initialize objects allocated to BANK3 (17 bytes)
  1304                           ; load TBLPTR registers with __pidataBANK3
  1305  01666E  0E10               	movlw	low __pidataBANK3
  1306  016670  6EF6               	movwf	tblptrl,c
  1307  016672  0E80               	movlw	high __pidataBANK3
  1308  016674  6EF7               	movwf	tblptrh,c
  1309  016676  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1310  016678  6EF8               	movwf	tblptru,c
  1311  01667A  EE03  F0EC         	lfsr	0,__pdataBANK3
  1312  01667E  EE10 F011          	lfsr	1,17
  1313  016682                     copy_data0:
  1314  016682  0009               	tblrd		*+
  1315  016684  CFF5 FFEE          	movff	tablat,postinc0
  1316  016688  50E5               	movf	postdec1,w,c
  1317  01668A  50E1               	movf	fsr1l,w,c
  1318  01668C  E1FA               	bnz	copy_data0
  1319                           
  1320                           ; Initialize objects allocated to COMRAM (12 bytes)
  1321                           ; load TBLPTR registers with __pidataCOMRAM
  1322  01668E  0E76               	movlw	low __pidataCOMRAM
  1323  016690  6EF6               	movwf	tblptrl,c
  1324  016692  0E80               	movlw	high __pidataCOMRAM
  1325  016694  6EF7               	movwf	tblptrh,c
  1326  016696  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1327  016698  6EF8               	movwf	tblptru,c
  1328  01669A  EE00  F045         	lfsr	0,__pdataCOMRAM
  1329  01669E  EE10 F00C          	lfsr	1,12
  1330  0166A2                     copy_data1:
  1331  0166A2  0009               	tblrd		*+
  1332  0166A4  CFF5 FFEE          	movff	tablat,postinc0
  1333  0166A8  50E5               	movf	postdec1,w,c
  1334  0166AA  50E1               	movf	fsr1l,w,c
  1335  0166AC  E1FA               	bnz	copy_data1
  1336                           
  1337                           ; Clear objects allocated to BIGRAM (300 bytes)
  1338  0166AE  EE04  F0F0         	lfsr	0,__pbssBIGRAM
  1339  0166B2  EE11 F02C          	lfsr	1,300
  1340  0166B6                     clear_0:
  1341  0166B6  6AEE               	clrf	postinc0,c
  1342  0166B8  50E5               	movf	postdec1,w,c
  1343  0166BA  50E1               	movf	fsr1l,w,c
  1344  0166BC  E1FC               	bnz	clear_0
  1345  0166BE  50E2               	movf	fsr1h,w,c
  1346  0166C0  E1FA               	bnz	clear_0
  1347                           
  1348                           ; Clear objects allocated to BANK4 (240 bytes)
  1349  0166C2  EE04  F000         	lfsr	0,__pbssBANK4
  1350  0166C6  0EF0               	movlw	240
  1351  0166C8                     clear_1:
  1352  0166C8  6AEE               	clrf	postinc0,c
  1353  0166CA  06E8               	decf	wreg,f,c
  1354  0166CC  E1FD               	bnz	clear_1
  1355                           
  1356                           ; Clear objects allocated to BANK3 (236 bytes)
  1357  0166CE  EE03  F000         	lfsr	0,__pbssBANK3
  1358  0166D2  0EEC               	movlw	236
  1359  0166D4                     clear_2:
  1360  0166D4  6AEE               	clrf	postinc0,c
  1361  0166D6  06E8               	decf	wreg,f,c
  1362  0166D8  E1FD               	bnz	clear_2
  1363                           
  1364                           ; Clear objects allocated to BANK0 (20 bytes)
  1365  0166DA  EE00  F0E1         	lfsr	0,__pbssBANK0
  1366  0166DE  0E14               	movlw	20
  1367  0166E0                     clear_3:
  1368  0166E0  6AEE               	clrf	postinc0,c
  1369  0166E2  06E8               	decf	wreg,f,c
  1370  0166E4  E1FD               	bnz	clear_3
  1371                           
  1372                           ; Clear objects allocated to COMRAM (28 bytes)
  1373  0166E6  EE00  F029         	lfsr	0,__pbssCOMRAM
  1374  0166EA  0E1C               	movlw	28
  1375  0166EC                     clear_4:
  1376  0166EC  6AEE               	clrf	postinc0,c
  1377  0166EE  06E8               	decf	wreg,f,c
  1378  0166F0  E1FD               	bnz	clear_4
  1379  0166F2                     end_of_initialization:
  1380                           	opt stack 0
  1381  0166F2                     __end_of__initialization:
  1382                           	opt stack 0
  1383  0166F2  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1384  0166F4  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1385  0166F6  0100               	movlb	0
  1386  0166F8  EF55  F0A9         	goto	_main	;jump to C main() function
  1387                           tblptru	equ	0xFF8
  1388                           tblptrh	equ	0xFF7
  1389                           tblptrl	equ	0xFF6
  1390                           tablat	equ	0xFF5
  1391                           postinc0	equ	0xFEE
  1392                           wreg	equ	0xFE8
  1393                           postdec1	equ	0xFE5
  1394                           fsr1h	equ	0xFE2
  1395                           fsr1l	equ	0xFE1
  1396                           
  1397                           	psect	bssCOMRAM
  1398  000029                     __pbssCOMRAM:
  1399                           	opt stack 0
  1400  000029                     _StepRotate:
  1401                           	opt stack 0
  1402  000029                     	ds	2
  1403  00002B                     _angleTotal:
  1404                           	opt stack 0
  1405  00002B                     	ds	2
  1406  00002D                     _val:
  1407                           	opt stack 0
  1408  00002D                     	ds	2
  1409  00002F                     _COUNTER:
  1410                           	opt stack 0
  1411  00002F                     	ds	2
  1412  000031                     HMI_GRender@a:
  1413                           	opt stack 0
  1414  000031                     	ds	2
  1415  000033                     _gBackcolour:
  1416                           	opt stack 0
  1417  000033                     	ds	2
  1418  000035                     _iRDropLeft:
  1419                           	opt stack 0
  1420  000035                     	ds	1
  1421  000036                     _iRDropRight:
  1422                           	opt stack 0
  1423  000036                     	ds	1
  1424  000037                     _iRBumpDrop:
  1425                           	opt stack 0
  1426  000037                     	ds	1
  1427  000038                     _iRScriptIndex:
  1428                           	opt stack 0
  1429  000038                     	ds	1
  1430  000039                     Event_TestButton@j:
  1431                           	opt stack 0
  1432  000039                     	ds	1
  1433  00003A                     Timer2_Init@PRE:
  1434                           	opt stack 0
  1435  00003A                     	ds	1
  1436  00003B                     Timer0_Init@PRE:
  1437                           	opt stack 0
  1438  00003B                     	ds	1
  1439  00003C                     rand@screw:
  1440                           	opt stack 0
  1441  00003C                     	ds	1
  1442  00003D                     OutSeg@a:
  1443                           	opt stack 0
  1444  00003D                     	ds	1
  1445  00003E                     OutSeg@segset:
  1446                           	opt stack 0
  1447  00003E                     	ds	1
  1448  00003F                     OutSeg@cur:
  1449                           	opt stack 0
  1450  00003F                     	ds	1
  1451  000040                     _ADC_AN0:
  1452                           	opt stack 0
  1453  000040                     	ds	5
  1454                           tblptru	equ	0xFF8
  1455                           tblptrh	equ	0xFF7
  1456                           tblptrl	equ	0xFF6
  1457                           tablat	equ	0xFF5
  1458                           postinc0	equ	0xFEE
  1459                           wreg	equ	0xFE8
  1460                           postdec1	equ	0xFE5
  1461                           fsr1h	equ	0xFE2
  1462                           fsr1l	equ	0xFE1
  1463                           
  1464                           	psect	dataCOMRAM
  1465  000045                     __pdataCOMRAM:
  1466                           	opt stack 0
  1467  000045                     _gCursor:
  1468                           	opt stack 0
  1469  000045                     	ds	4
  1470  000049                     _TimerX:
  1471                           	opt stack 0
  1472  000049                     	ds	2
  1473  00004B                     _MinDist:
  1474                           	opt stack 0
  1475  00004B                     	ds	2
  1476  00004D                     _Bus_State:
  1477                           	opt stack 0
  1478  00004D                     	ds	1
  1479  00004E                     _change:
  1480                           	opt stack 0
  1481  00004E                     	ds	1
  1482  00004F                     _l:
  1483                           	opt stack 0
  1484  00004F                     	ds	1
  1485  000050                     _w:
  1486                           	opt stack 0
  1487  000050                     	ds	1
  1488                           tblptru	equ	0xFF8
  1489                           tblptrh	equ	0xFF7
  1490                           tblptrl	equ	0xFF6
  1491                           tablat	equ	0xFF5
  1492                           postinc0	equ	0xFEE
  1493                           wreg	equ	0xFE8
  1494                           postdec1	equ	0xFE5
  1495                           fsr1h	equ	0xFE2
  1496                           fsr1l	equ	0xFE1
  1497                           
  1498                           	psect	bssBANK0
  1499  0000E1                     __pbssBANK0:
  1500                           	opt stack 0
  1501  0000E1                     _lQueue:
  1502                           	opt stack 0
  1503  0000E1                     	ds	3
  1504  0000E4                     _IRValue:
  1505                           	opt stack 0
  1506  0000E4                     	ds	2
  1507  0000E6                     _Stepstomin:
  1508                           	opt stack 0
  1509  0000E6                     	ds	2
  1510  0000E8                     _pShiftVal:
  1511                           	opt stack 0
  1512  0000E8                     	ds	2
  1513  0000EA                     _lMotor:
  1514                           	opt stack 0
  1515  0000EA                     	ds	2
  1516  0000EC                     _lCurrent:
  1517                           	opt stack 0
  1518  0000EC                     	ds	2
  1519  0000EE                     _iRBumpLeft:
  1520                           	opt stack 0
  1521  0000EE                     	ds	1
  1522  0000EF                     _iRBumpRight:
  1523                           	opt stack 0
  1524  0000EF                     	ds	1
  1525  0000F0                     Timer2_Init@INDEX:
  1526                           	opt stack 0
  1527  0000F0                     	ds	1
  1528  0000F1                     _INDEX:
  1529                           	opt stack 0
  1530  0000F1                     	ds	1
  1531  0000F2                     _lBufferY:
  1532                           	opt stack 0
  1533  0000F2                     	ds	1
  1534  0000F3                     _lBufferX:
  1535                           	opt stack 0
  1536  0000F3                     	ds	1
  1537  0000F4                     _clearall:
  1538                           	opt stack 0
  1539  0000F4                     	ds	1
  1540                           tblptru	equ	0xFF8
  1541                           tblptrh	equ	0xFF7
  1542                           tblptrl	equ	0xFF6
  1543                           tablat	equ	0xFF5
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           postdec1	equ	0xFE5
  1547                           fsr1h	equ	0xFE2
  1548                           fsr1l	equ	0xFE1
  1549                           
  1550                           	psect	bssBANK3
  1551  000300                     __pbssBANK3:
  1552                           	opt stack 0
  1553  000300                     _stepsToMinDegrees:
  1554                           	opt stack 0
  1555  000300                     	ds	4
  1556  000304                     _iRAngleSS:
  1557                           	opt stack 0
  1558  000304                     	ds	4
  1559  000308                     _iRDistanceSS:
  1560                           	opt stack 0
  1561  000308                     	ds	4
  1562  00030C                     Timer2_Init@DIV:
  1563                           	opt stack 0
  1564  00030C                     	ds	4
  1565  000310                     Timer0_Init@DIV:
  1566                           	opt stack 0
  1567  000310                     	ds	4
  1568  000314                     _gISR:
  1569                           	opt stack 0
  1570  000314                     	ds	3
  1571  000317                     _lStepFunction:
  1572                           	opt stack 0
  1573  000317                     	ds	3
  1574  00031A                     _I2C2_More:
  1575                           	opt stack 0
  1576  00031A                     	ds	3
  1577  00031D                     _I2C1_More:
  1578                           	opt stack 0
  1579  00031D                     	ds	3
  1580  000320                     _I2C2_Done:
  1581                           	opt stack 0
  1582  000320                     	ds	3
  1583  000323                     _I2C1_Done:
  1584                           	opt stack 0
  1585  000323                     	ds	3
  1586  000326                     _dist:
  1587                           	opt stack 0
  1588  000326                     	ds	2
  1589  000328                     _mode:
  1590                           	opt stack 0
  1591  000328                     	ds	2
  1592  00032A                     _dip:
  1593                           	opt stack 0
  1594  00032A                     	ds	2
  1595  00032C                     _distanceTotal:
  1596                           	opt stack 0
  1597  00032C                     	ds	2
  1598  00032E                     _iRAngle:
  1599                           	opt stack 0
  1600  00032E                     	ds	2
  1601  000330                     _iRDistance:
  1602                           	opt stack 0
  1603  000330                     	ds	2
  1604  000332                     SPI_Send9@dat:
  1605                           	opt stack 0
  1606  000332                     	ds	2
  1607  000334                     _iRDropCaster:
  1608                           	opt stack 0
  1609  000334                     	ds	1
  1610  000335                     _iRVirtualWall:
  1611                           	opt stack 0
  1612  000335                     	ds	1
  1613  000336                     _iRCliffR:
  1614                           	opt stack 0
  1615  000336                     	ds	1
  1616  000337                     _iRCliffFR:
  1617                           	opt stack 0
  1618  000337                     	ds	1
  1619  000338                     _iRCliffFL:
  1620                           	opt stack 0
  1621  000338                     	ds	1
  1622  000339                     _iRCliffL:
  1623                           	opt stack 0
  1624  000339                     	ds	1
  1625  00033A                     _iRWall:
  1626                           	opt stack 0
  1627  00033A                     	ds	1
  1628  00033B                     _u:
  1629                           	opt stack 0
  1630  00033B                     	ds	1
  1631  00033C                     _j:
  1632                           	opt stack 0
  1633  00033C                     	ds	1
  1634  00033D                     _i:
  1635                           	opt stack 0
  1636  00033D                     	ds	1
  1637  00033E                     _ADC_Initialised:
  1638                           	opt stack 0
  1639  00033E                     	ds	1
  1640  00033F                     _HMIBoard:
  1641                           	opt stack 0
  1642  00033F                     	ds	58
  1643  000379                     _SPI1:
  1644                           	opt stack 0
  1645  000379                     	ds	11
  1646  000384                     _SPI2:
  1647                           	opt stack 0
  1648  000384                     	ds	11
  1649  00038F                     _PortE:
  1650                           	opt stack 0
  1651  00038F                     	ds	10
  1652  000399                     _PortD:
  1653                           	opt stack 0
  1654  000399                     	ds	10
  1655  0003A3                     _PortB:
  1656                           	opt stack 0
  1657  0003A3                     	ds	10
  1658  0003AD                     _PortC:
  1659                           	opt stack 0
  1660  0003AD                     	ds	10
  1661  0003B7                     _PortF:
  1662                           	opt stack 0
  1663  0003B7                     	ds	10
  1664  0003C1                     _I2C2T:
  1665                           	opt stack 0
  1666  0003C1                     	ds	7
  1667  0003C8                     _I2C1T:
  1668                           	opt stack 0
  1669  0003C8                     	ds	7
  1670  0003CF                     _Stepper:
  1671                           	opt stack 0
  1672  0003CF                     	ds	6
  1673  0003D5                     _ADC_AN3:
  1674                           	opt stack 0
  1675  0003D5                     	ds	5
  1676  0003DA                     _ADC_AN2:
  1677                           	opt stack 0
  1678  0003DA                     	ds	5
  1679  0003DF                     _ADC_AN1:
  1680                           	opt stack 0
  1681  0003DF                     	ds	5
  1682  0003E4                     LCD_DrawRectangle@p4:
  1683                           	opt stack 0
  1684  0003E4                     	ds	4
  1685  0003E8                     LCD_DrawRectangle@p2:
  1686                           	opt stack 0
  1687  0003E8                     	ds	4
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           postdec1	equ	0xFE5
  1695                           fsr1h	equ	0xFE2
  1696                           fsr1l	equ	0xFE1
  1697                           
  1698                           	psect	dataBANK3
  1699  0003EC                     __pdataBANK3:
  1700                           	opt stack 0
  1701  0003EC                     Console_Render@F6956:
  1702                           	opt stack 0
  1703  0003EC                     	ds	4
  1704  0003F0                     _gLineSize:
  1705                           	opt stack 0
  1706  0003F0                     	ds	4
  1707  0003F4                     _gCharSize:
  1708                           	opt stack 0
  1709  0003F4                     	ds	4
  1710  0003F8                     _gForecolour:
  1711                           	opt stack 0
  1712  0003F8                     	ds	2
  1713  0003FA                     	ds	1
  1714  0003FB                     	ds	1
  1715  0003FC                     	ds	1
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           postdec1	equ	0xFE5
  1723                           fsr1h	equ	0xFE2
  1724                           fsr1l	equ	0xFE1
  1725                           
  1726                           	psect	bssBANK4
  1727  000400                     __pbssBANK4:
  1728                           	opt stack 0
  1729  000400                     _lCBuffer:
  1730                           	opt stack 0
  1731  000400                     	ds	30
  1732  00041E                     _iRScriptStack:
  1733                           	opt stack 0
  1734  00041E                     	ds	100
  1735  000482                     Console_MakeField@Fill:
  1736                           	opt stack 0
  1737  000482                     	ds	70
  1738  0004C8                     _DIPSwitch:
  1739                           	opt stack 0
  1740  0004C8                     	ds	10
  1741  0004D2                     _TestButton:
  1742                           	opt stack 0
  1743  0004D2                     	ds	10
  1744  0004DC                     _PortG:
  1745                           	opt stack 0
  1746  0004DC                     	ds	10
  1747  0004E6                     _PortA:
  1748                           	opt stack 0
  1749  0004E6                     	ds	10
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           postdec1	equ	0xFE5
  1757                           fsr1h	equ	0xFE2
  1758                           fsr1l	equ	0xFE1
  1759                           
  1760                           	psect	bssBIGRAM
  1761  0004F0                     __pbssBIGRAM:
  1762                           	opt stack 0
  1763  0004F0                     _lBuffer:
  1764                           	opt stack 0
  1765  0004F0                     	ds	300
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           tblptrl	equ	0xFF6
  1769                           tablat	equ	0xFF5
  1770                           postinc0	equ	0xFEE
  1771                           wreg	equ	0xFE8
  1772                           postdec1	equ	0xFE5
  1773                           fsr1h	equ	0xFE2
  1774                           fsr1l	equ	0xFE1
  1775                           
  1776                           	psect	cstackBANK2
  1777  000200                     __pcstackBANK2:
  1778                           	opt stack 0
  1779  000200                     irobot_query_and_update@TXArray:
  1780                           	opt stack 0
  1781                           
  1782                           ; 256 bytes @ 0x0
  1783  000200                     	ds	256
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1h	equ	0xFE2
  1792                           fsr1l	equ	0xFE1
  1793                           
  1794                           	psect	cstackBANK1
  1795  000100                     __pcstackBANK1:
  1796                           	opt stack 0
  1797  000100                     _printf$15636:
  1798                           	opt stack 0
  1799  000100                     irobot_query_and_update@RXArray:
  1800                           	opt stack 0
  1801                           
  1802                           ; 256 bytes @ 0x0
  1803  000100                     	ds	4
  1804  000104                     printf@ap:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x4
  1808  000104                     	ds	2
  1809  000106                     printf@flag:
  1810                           	opt stack 0
  1811                           
  1812                           ; 2 bytes @ 0x6
  1813  000106                     	ds	2
  1814  000108                     printf@prec:
  1815                           	opt stack 0
  1816                           
  1817                           ; 2 bytes @ 0x8
  1818  000108                     	ds	2
  1819  00010A                     printf@val:
  1820                           	opt stack 0
  1821                           
  1822                           ; 4 bytes @ 0xA
  1823  00010A                     	ds	4
  1824  00010E                     printf@exp:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0xE
  1828  00010E                     	ds	2
  1829  000110                     printf@tmpval:
  1830                           	opt stack 0
  1831                           
  1832                           ; 4 bytes @ 0x10
  1833  000110                     	ds	4
  1834  000114                     printf@fval:
  1835                           	opt stack 0
  1836                           
  1837                           ; 4 bytes @ 0x14
  1838  000114                     	ds	4
  1839  000118                     printf@c:
  1840                           	opt stack 0
  1841                           
  1842                           ; 1 bytes @ 0x18
  1843  000118                     	ds	232
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           postinc0	equ	0xFEE
  1849                           wreg	equ	0xFE8
  1850                           postdec1	equ	0xFE5
  1851                           fsr1h	equ	0xFE2
  1852                           fsr1l	equ	0xFE1
  1853                           
  1854                           	psect	cstackBANK0
  1855  000060                     __pcstackBANK0:
  1856                           	opt stack 0
  1857  000060                     ??_Console_ClearCursor:
  1858  000060                     ??_ADC_SetChannel:
  1859  000060                     ??_ADC_ConversionTime:
  1860  000060                     ??_ADC_SetupIO:
  1861  000060                     ??_sort_iRBumpDrop:
  1862  000060                     ?_load_iRScriptStack:
  1863                           	opt stack 0
  1864  000060                     ??_Console_Init:
  1865  000060                     ??_Console_NewLine:
  1866  000060                     ??_Console_FormFeed:
  1867  000060                     ??_HMI_SetButton:
  1868  000060                     ?_GetPortProperties:
  1869                           	opt stack 0
  1870  000060                     ?_GetPortPORT:
  1871                           	opt stack 0
  1872  000060                     ?_GetPortTRIS:
  1873                           	opt stack 0
  1874  000060                     ?_twos_complement_of:
  1875                           	opt stack 0
  1876  000060                     ?___wmul:
  1877                           	opt stack 0
  1878  000060                     ?___awmod:
  1879                           	opt stack 0
  1880  000060                     ?___lwdiv:
  1881                           	opt stack 0
  1882  000060                     ?___lwmod:
  1883                           	opt stack 0
  1884  000060                     ?__tdiv_to_l_:
  1885                           	opt stack 0
  1886  000060                     ?__div_to_l_:
  1887                           	opt stack 0
  1888  000060                     ?___flneg:
  1889                           	opt stack 0
  1890  000060                     ?___lldiv:
  1891                           	opt stack 0
  1892  000060                     ?___xxtofl:
  1893                           	opt stack 0
  1894  000060                     Mode_Set@pMode:
  1895                           	opt stack 0
  1896  000060                     ToSegment@pCHR:
  1897                           	opt stack 0
  1898  000060                     HMI_SetBar@pValue:
  1899                           	opt stack 0
  1900  000060                     ADC_ClockDivision@pDivide:
  1901                           	opt stack 0
  1902  000060                     get_packet_size@packetID:
  1903                           	opt stack 0
  1904  000060                     eusart_putch@eusartSendChar:
  1905                           	opt stack 0
  1906  000060                     Port_GetPin@pInput:
  1907                           	opt stack 0
  1908  000060                     Port_GetQuad@pInput:
  1909                           	opt stack 0
  1910  000060                     SPI_DisableISR@pInput:
  1911                           	opt stack 0
  1912  000060                     SPI_DCS@pInput:
  1913                           	opt stack 0
  1914  000060                     SPI_Send@pInput:
  1915                           	opt stack 0
  1916  000060                     Byte_SetBit@pInput:
  1917                           	opt stack 0
  1918  000060                     Byte_GetBit@pInput:
  1919                           	opt stack 0
  1920  000060                     Byte_SetZone@pInput:
  1921                           	opt stack 0
  1922  000060                     Byte_GetZone@pInput:
  1923                           	opt stack 0
  1924  000060                     Byte_SetByte@pInput:
  1925                           	opt stack 0
  1926  000060                     delay_ms@ms:
  1927                           	opt stack 0
  1928  000060                     delay_us@us:
  1929                           	opt stack 0
  1930  000060                     reverse@input:
  1931                           	opt stack 0
  1932  000060                     twos_complement_of@complementValue:
  1933                           	opt stack 0
  1934  000060                     ___wmul@multiplier:
  1935                           	opt stack 0
  1936  000060                     ___awmod@dividend:
  1937                           	opt stack 0
  1938  000060                     ___lwdiv@dividend:
  1939                           	opt stack 0
  1940  000060                     ___lwmod@dividend:
  1941                           	opt stack 0
  1942  000060                     MXK_Queue@pCallback:
  1943                           	opt stack 0
  1944  000060                     Timer0_Start@pFunction:
  1945                           	opt stack 0
  1946  000060                     __div_to_l_@f1:
  1947                           	opt stack 0
  1948  000060                     ___flge@ff1:
  1949                           	opt stack 0
  1950  000060                     ___flneg@f1:
  1951                           	opt stack 0
  1952  000060                     __tdiv_to_l_@f1:
  1953                           	opt stack 0
  1954  000060                     ___lldiv@dividend:
  1955                           	opt stack 0
  1956  000060                     ___xxtofl@val:
  1957                           	opt stack 0
  1958                           
  1959                           ; 4 bytes @ 0x0
  1960  000060                     	ds	1
  1961  000061                     ADC_SetChannel@pChannel:
  1962                           	opt stack 0
  1963  000061                     ADC_ClockDivision@reg:
  1964                           	opt stack 0
  1965  000061                     ADC_ConversionTime@pCount:
  1966                           	opt stack 0
  1967  000061                     rx_assign@packetIDValue:
  1968                           	opt stack 0
  1969  000061                     irobot_song_play@songNumber:
  1970                           	opt stack 0
  1971  000061                     HMI_SetSegments@pString:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x1
  1975  000061                     	ds	1
  1976  000062                     GetPortProperties@pInput:
  1977                           	opt stack 0
  1978  000062                     GetPortPORT@pInput:
  1979                           	opt stack 0
  1980  000062                     GetPortTRIS@pInput:
  1981                           	opt stack 0
  1982  000062                     Port_GetPin@pPin:
  1983                           	opt stack 0
  1984  000062                     Port_GetQuad@pQuad:
  1985                           	opt stack 0
  1986  000062                     SPI_Send@pData:
  1987                           	opt stack 0
  1988  000062                     Byte_SetBit@pBit:
  1989                           	opt stack 0
  1990  000062                     Byte_GetBit@pBit:
  1991                           	opt stack 0
  1992  000062                     Byte_SetZone@pMax:
  1993                           	opt stack 0
  1994  000062                     Byte_GetZone@pMax:
  1995                           	opt stack 0
  1996  000062                     Byte_SetByte@pValue:
  1997                           	opt stack 0
  1998  000062                     Console_Init@x:
  1999                           	opt stack 0
  2000  000062                     Console_FormFeed@x:
  2001                           	opt stack 0
  2002  000062                     ADC_SetupIO@pChannel:
  2003                           	opt stack 0
  2004  000062                     ADC_ClockDivision@unfound:
  2005                           	opt stack 0
  2006  000062                     rx_assign@byteNumber:
  2007                           	opt stack 0
  2008  000062                     reverse@length:
  2009                           	opt stack 0
  2010  000062                     ADC_Start@pInput:
  2011                           	opt stack 0
  2012  000062                     ___wmul@multiplicand:
  2013                           	opt stack 0
  2014  000062                     ___awmod@divisor:
  2015                           	opt stack 0
  2016  000062                     ___lwdiv@divisor:
  2017                           	opt stack 0
  2018  000062                     ___lwmod@divisor:
  2019                           	opt stack 0
  2020  000062                     delay_ms@u:
  2021                           	opt stack 0
  2022  000062                     delay_us@u:
  2023                           	opt stack 0
  2024  000062                     HMI_SetButton@reindex:
  2025                           	opt stack 0
  2026                           
  2027                           ; 4 bytes @ 0x2
  2028  000062                     	ds	1
  2029  000063                     ??_Port_GetPin:
  2030  000063                     ??_Port_GetQuad:
  2031  000063                     ??_Byte_GetBit:
  2032  000063                     ??_rx_assign:
  2033  000063                     LCD_Write@mode:
  2034                           	opt stack 0
  2035  000063                     Byte_SetBit@pValue:
  2036                           	opt stack 0
  2037  000063                     Byte_SetZone@pChunk:
  2038                           	opt stack 0
  2039  000063                     Byte_GetZone@pChunk:
  2040                           	opt stack 0
  2041  000063                     Console_Init@y:
  2042                           	opt stack 0
  2043  000063                     Console_FormFeed@y:
  2044                           	opt stack 0
  2045  000063                     OutSeg@pSegment:
  2046                           	opt stack 0
  2047  000063                     ADC_SetupIO@MASK:
  2048                           	opt stack 0
  2049  000063                     Motor_Move@pMotor:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x3
  2053  000063                     	ds	1
  2054  000064                     ??_Byte_SetBit:
  2055  000064                     ??_Console_IncrementCursor:
  2056  000064                     ??_OutSeg:
  2057  000064                     ??_ADC_Start:
  2058  000064                     ??___xxtofl:
  2059  000064                     LCD_Write@value:
  2060                           	opt stack 0
  2061  000064                     Byte_GetBit@Output:
  2062                           	opt stack 0
  2063  000064                     Byte_SetZone@pChunkSize:
  2064                           	opt stack 0
  2065  000064                     Byte_GetZone@pChunkSize:
  2066                           	opt stack 0
  2067  000064                     reverse@tempVar:
  2068                           	opt stack 0
  2069  000064                     ___awmod@counter:
  2070                           	opt stack 0
  2071  000064                     ___lwdiv@counter:
  2072                           	opt stack 0
  2073  000064                     ___lwmod@counter:
  2074                           	opt stack 0
  2075  000064                     HMI_SetSegments@in:
  2076                           	opt stack 0
  2077  000064                     ADC_Init@pInput:
  2078                           	opt stack 0
  2079  000064                     ___wmul@product:
  2080                           	opt stack 0
  2081  000064                     __div_to_l_@f2:
  2082                           	opt stack 0
  2083  000064                     ___flge@ff2:
  2084                           	opt stack 0
  2085  000064                     __tdiv_to_l_@f2:
  2086                           	opt stack 0
  2087  000064                     ___lldiv@divisor:
  2088                           	opt stack 0
  2089                           
  2090                           ; 4 bytes @ 0x4
  2091  000064                     	ds	1
  2092  000065                     ??_Byte_GetZone:
  2093  000065                     ?_Console_MakeField:
  2094                           	opt stack 0
  2095  000065                     Set_Addr_Window@ys:
  2096                           	opt stack 0
  2097  000065                     Set_Rotation@m:
  2098                           	opt stack 0
  2099  000065                     Port_GetPin@Output:
  2100                           	opt stack 0
  2101  000065                     Port_GetQuad@Output:
  2102                           	opt stack 0
  2103  000065                     Byte_SetZone@pValue:
  2104                           	opt stack 0
  2105  000065                     rx_assign@packetID:
  2106                           	opt stack 0
  2107  000065                     ___awmod@sign:
  2108                           	opt stack 0
  2109  000065                     LCD_Word_Write@value:
  2110                           	opt stack 0
  2111  000065                     reverse@iterator:
  2112                           	opt stack 0
  2113  000065                     Motor_Move@pDelta:
  2114                           	opt stack 0
  2115  000065                     ___lwdiv@quotient:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x5
  2119  000065                     	ds	1
  2120  000066                     ?_irobot_query_and_update:
  2121                           	opt stack 0
  2122  000066                     ??_Byte_SetZone:
  2123  000066                     ?___awdiv:
  2124                           	opt stack 0
  2125  000066                     Set_Addr_Window@xe:
  2126                           	opt stack 0
  2127  000066                     Set_Rotation@rotation:
  2128                           	opt stack 0
  2129  000066                     Byte_GetZone@MASK:
  2130                           	opt stack 0
  2131  000066                     OutSeg@pInput:
  2132                           	opt stack 0
  2133  000066                     HMI_SetButton@pValue:
  2134                           	opt stack 0
  2135  000066                     ADC_Init@pChannel:
  2136                           	opt stack 0
  2137  000066                     MXK_BlockSwitchTo@CUR:
  2138                           	opt stack 0
  2139  000066                     MXK_SwitchTo@CUR:
  2140                           	opt stack 0
  2141  000066                     ___awdiv@dividend:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x6
  2145  000066                     	ds	1
  2146  000067                     ??_Console_MakeField:
  2147  000067                     Set_Addr_Window@ye:
  2148                           	opt stack 0
  2149  000067                     Byte_GetZone@Offset:
  2150                           	opt stack 0
  2151  000067                     OutSeg@out:
  2152                           	opt stack 0
  2153  000067                     HMI_SetButton@v:
  2154                           	opt stack 0
  2155  000067                     MXK_BlockSwitchTo@pModule:
  2156                           	opt stack 0
  2157  000067                     MXK_SwitchTo@pModule:
  2158                           	opt stack 0
  2159  000067                     itos@input:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x7
  2163  000067                     	ds	1
  2164  000068                     ??__tdiv_to_l_:
  2165  000068                     ??___flge:
  2166  000068                     Set_Addr_Window@xs:
  2167                           	opt stack 0
  2168  000068                     Byte_GetZone@Output:
  2169                           	opt stack 0
  2170  000068                     ___xxtofl@sign:
  2171                           	opt stack 0
  2172  000068                     HMI_Render@a:
  2173                           	opt stack 0
  2174  000068                     ___awdiv@divisor:
  2175                           	opt stack 0
  2176  000068                     __div_to_l_@quot:
  2177                           	opt stack 0
  2178  000068                     ___lldiv@quotient:
  2179                           	opt stack 0
  2180                           
  2181                           ; 4 bytes @ 0x8
  2182  000068                     	ds	1
  2183  000069                     Byte_SetZone@Offset:
  2184                           	opt stack 0
  2185  000069                     ___xxtofl@exp:
  2186                           	opt stack 0
  2187  000069                     LCD_Fill@pColour:
  2188                           	opt stack 0
  2189  000069                     LCD_FillRectangle@pColour:
  2190                           	opt stack 0
  2191  000069                     Byte_GetPair@pInput:
  2192                           	opt stack 0
  2193  000069                     itos@destination:
  2194                           	opt stack 0
  2195  000069                     Console_MakeField@Index:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x9
  2199  000069                     	ds	1
  2200  00006A                     ??_load_iRScriptStack:
  2201  00006A                     Byte_SetZone@MASK:
  2202                           	opt stack 0
  2203  00006A                     ___awdiv@counter:
  2204                           	opt stack 0
  2205  00006A                     ___xxtofl@arg:
  2206                           	opt stack 0
  2207                           
  2208                           ; 4 bytes @ 0xA
  2209  00006A                     	ds	1
  2210  00006B                     LCD_Fill@i:
  2211                           	opt stack 0
  2212  00006B                     Byte_GetPair@pPair:
  2213                           	opt stack 0
  2214  00006B                     Console_MakeField@pInput:
  2215                           	opt stack 0
  2216  00006B                     ___awdiv@sign:
  2217                           	opt stack 0
  2218  00006B                     Byte_SetPair@pInput:
  2219                           	opt stack 0
  2220  00006B                     Byte_SetQuad@pInput:
  2221                           	opt stack 0
  2222  00006B                     itos@Data:
  2223                           	opt stack 0
  2224  00006B                     LCD_FillRectangle@pPoint:
  2225                           	opt stack 0
  2226  00006B                     __tdiv_to_l_@quot:
  2227                           	opt stack 0
  2228                           
  2229                           ; 4 bytes @ 0xB
  2230  00006B                     	ds	1
  2231  00006C                     LCD_Fill@j:
  2232                           	opt stack 0
  2233  00006C                     __div_to_l_@cntr:
  2234                           	opt stack 0
  2235  00006C                     ___lldiv@counter:
  2236                           	opt stack 0
  2237  00006C                     Word_GetPair@pInput:
  2238                           	opt stack 0
  2239  00006C                     Console_MakeField@Column:
  2240                           	opt stack 0
  2241  00006C                     load_iRScriptStack@loadByte:
  2242                           	opt stack 0
  2243  00006C                     ___awdiv@quotient:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0xC
  2247  00006C                     	ds	1
  2248  00006D                     ?___llmod:
  2249                           	opt stack 0
  2250  00006D                     Byte_SetPair@pPair:
  2251                           	opt stack 0
  2252  00006D                     Byte_SetQuad@pQuad:
  2253                           	opt stack 0
  2254  00006D                     __div_to_l_@exp1:
  2255                           	opt stack 0
  2256  00006D                     itos@Length:
  2257                           	opt stack 0
  2258  00006D                     Timer0_Init@pFrequency:
  2259                           	opt stack 0
  2260  00006D                     Timer2_Init@pFrequency:
  2261                           	opt stack 0
  2262  00006D                     ___llmod@dividend:
  2263                           	opt stack 0
  2264                           
  2265                           ; 4 bytes @ 0xD
  2266  00006D                     	ds	1
  2267  00006E                     ??_Console_Tab:
  2268  00006E                     ?___fldiv:
  2269                           	opt stack 0
  2270  00006E                     Byte_SetPair@pValue:
  2271                           	opt stack 0
  2272  00006E                     Byte_SetQuad@pValue:
  2273                           	opt stack 0
  2274  00006E                     Word_GetPair@pPair:
  2275                           	opt stack 0
  2276  00006E                     load_iRScriptStack@bytesToLoad:
  2277                           	opt stack 0
  2278  00006E                     _Console_MakeField$10974:
  2279                           	opt stack 0
  2280  00006E                     ___fldiv@b:
  2281                           	opt stack 0
  2282                           
  2283                           ; 4 bytes @ 0xE
  2284  00006E                     	ds	1
  2285  00006F                     load_iRScriptStack@i:
  2286                           	opt stack 0
  2287  00006F                     __tdiv_to_l_@cntr:
  2288                           	opt stack 0
  2289  00006F                     Port_SetPin@pInput:
  2290                           	opt stack 0
  2291  00006F                     Port_Set@pInput:
  2292                           	opt stack 0
  2293  00006F                     SPI_MinSpeed@pInput:
  2294                           	opt stack 0
  2295  00006F                     SPI_MaxSpeed@pInput:
  2296                           	opt stack 0
  2297  00006F                     Word_SetPair@pInput:
  2298                           	opt stack 0
  2299  00006F                     PortProperty_Valid@pInput:
  2300                           	opt stack 0
  2301  00006F                     itos@Out:
  2302                           	opt stack 0
  2303  00006F                     LCD_FillRectangle@pSize:
  2304                           	opt stack 0
  2305                           
  2306                           ; 4 bytes @ 0xF
  2307  00006F                     	ds	1
  2308  000070                     ??_irobot_query_and_update:
  2309  000070                     Console_MakeField@x:
  2310                           	opt stack 0
  2311  000070                     irobot_leds@LEDBit:
  2312                           	opt stack 0
  2313  000070                     __tdiv_to_l_@exp1:
  2314                           	opt stack 0
  2315  000070                     irobot_move@moveSpeed:
  2316                           	opt stack 0
  2317                           
  2318                           ; 2 bytes @ 0x10
  2319  000070                     	ds	1
  2320  000071                     ??_Timer2_Init:
  2321  000071                     ??_Timer0_Init:
  2322  000071                     Port_SetPin@pPin:
  2323                           	opt stack 0
  2324  000071                     Port_Set@pValue:
  2325                           	opt stack 0
  2326  000071                     Word_SetPair@pPair:
  2327                           	opt stack 0
  2328  000071                     PortProperty_Valid@pPinDrive:
  2329                           	opt stack 0
  2330  000071                     Console_MakeField@y:
  2331                           	opt stack 0
  2332  000071                     irobot_leds@powerColour:
  2333                           	opt stack 0
  2334  000071                     HMI_SetNumber@pInput:
  2335                           	opt stack 0
  2336  000071                     ___llmod@divisor:
  2337                           	opt stack 0
  2338                           
  2339                           ; 4 bytes @ 0x11
  2340  000071                     	ds	1
  2341  000072                     ??_Port_Set:
  2342  000072                     Port_SetPin@pValue:
  2343                           	opt stack 0
  2344  000072                     Word_SetPair@pValue:
  2345                           	opt stack 0
  2346  000072                     PortProperty_Valid@pPin:
  2347                           	opt stack 0
  2348  000072                     irobot_leds@powerLuminosity:
  2349                           	opt stack 0
  2350  000072                     LCD_DrawField@pField:
  2351                           	opt stack 0
  2352  000072                     irobot_move@moveTurnRadius:
  2353                           	opt stack 0
  2354  000072                     Timer2_Init@RDIV:
  2355                           	opt stack 0
  2356  000072                     ___fldiv@a:
  2357                           	opt stack 0
  2358                           
  2359                           ; 4 bytes @ 0x12
  2360  000072                     	ds	1
  2361  000073                     ??_PortProperty_Valid:
  2362  000073                     ??_LCD_FillRectangle:
  2363  000073                     Port_SetPin@Type:
  2364                           	opt stack 0
  2365  000073                     Console_Tab@t:
  2366                           	opt stack 0
  2367  000073                     irobot_leds@isScript:
  2368                           	opt stack 0
  2369  000073                     Timer0_Init@pCPUClock:
  2370                           	opt stack 0
  2371                           
  2372                           ; 4 bytes @ 0x13
  2373  000073                     	ds	1
  2374  000074                     ??_irobot_move:
  2375  000074                     LED_Set@pValue:
  2376                           	opt stack 0
  2377  000074                     Console_Tab@i:
  2378                           	opt stack 0
  2379  000074                     irobot_led_power_on@powerOnColour:
  2380                           	opt stack 0
  2381  000074                     Port_TogglePin@pInput:
  2382                           	opt stack 0
  2383  000074                     LCD_DrawField@pPoint:
  2384                           	opt stack 0
  2385                           
  2386                           ; 4 bytes @ 0x14
  2387  000074                     	ds	1
  2388  000075                     LCD_FillRectangle@i:
  2389                           	opt stack 0
  2390  000075                     LED_Set@pLED:
  2391                           	opt stack 0
  2392  000075                     Console_Tab@c:
  2393                           	opt stack 0
  2394  000075                     ___llmod@counter:
  2395                           	opt stack 0
  2396  000075                     irobot_query_and_update@packetIDs:
  2397                           	opt stack 0
  2398  000075                     PortProperty_Valid@Errors:
  2399                           	opt stack 0
  2400                           
  2401                           ; 16 bytes @ 0x15
  2402  000075                     	ds	1
  2403  000076                     ??___fldiv:
  2404  000076                     ??_Console_PrintChar:
  2405  000076                     LCD_FillRectangle@j:
  2406                           	opt stack 0
  2407  000076                     Port_TogglePin@pPin:
  2408                           	opt stack 0
  2409  000076                     Timer2_Init@pCPUClock:
  2410                           	opt stack 0
  2411                           
  2412                           ; 4 bytes @ 0x16
  2413  000076                     	ds	1
  2414  000077                     Port_TogglePin@Value:
  2415                           	opt stack 0
  2416  000077                     irobot_query_and_update@streamSize:
  2417                           	opt stack 0
  2418  000077                     Timer0_Init@DIVIDE:
  2419                           	opt stack 0
  2420                           
  2421                           ; 4 bytes @ 0x17
  2422  000077                     	ds	1
  2423  000078                     LED_Toggle@pLED:
  2424                           	opt stack 0
  2425  000078                     irobot_query_and_update@numberOfPacketRequests:
  2426                           	opt stack 0
  2427  000078                     irobot_move@isScript:
  2428                           	opt stack 0
  2429  000078                     LCD_DrawField@pSize:
  2430                           	opt stack 0
  2431                           
  2432                           ; 4 bytes @ 0x18
  2433  000078                     	ds	1
  2434  000079                     Console_PrintChar@pInput:
  2435                           	opt stack 0
  2436  000079                     Event_DIPSwitch@pState:
  2437                           	opt stack 0
  2438  000079                     Event_TestButton@pState:
  2439                           	opt stack 0
  2440  000079                     irobot_query_and_update@packetVariable:
  2441                           	opt stack 0
  2442  000079                     irobot_stop_motion@isScript:
  2443                           	opt stack 0
  2444  000079                     irobot_move_straight@straightSpeed:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0x19
  2448  000079                     	ds	1
  2449  00007A                     putch@c:
  2450                           	opt stack 0
  2451  00007A                     Event_DIPSwitch@Bar:
  2452                           	opt stack 0
  2453  00007A                     irobot_query_and_update@j:
  2454                           	opt stack 0
  2455  00007A                     ___fldiv@sign:
  2456                           	opt stack 0
  2457  00007A                     Timer2_Init@DIVIDE:
  2458                           	opt stack 0
  2459                           
  2460                           ; 4 bytes @ 0x1A
  2461  00007A                     	ds	1
  2462  00007B                     irobot_query_and_update@startIndex:
  2463                           	opt stack 0
  2464  00007B                     Button_Poll@pButton:
  2465                           	opt stack 0
  2466  00007B                     Motor_Speed@pMotor:
  2467                           	opt stack 0
  2468  00007B                     ___fldiv@rem:
  2469                           	opt stack 0
  2470                           
  2471                           ; 4 bytes @ 0x1B
  2472  00007B                     	ds	1
  2473  00007C                     ??_LCD_DrawField:
  2474  00007C                     irobot_query_and_update@i:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x1C
  2478  00007C                     	ds	1
  2479  00007D                     Button_Poll@pIncrement:
  2480                           	opt stack 0
  2481  00007D                     Motor_Speed@pFrequency:
  2482                           	opt stack 0
  2483  00007D                     irobot_rotate@rotateAngle:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x1D
  2487  00007D                     	ds	1
  2488  00007E                     ??_Button_Poll:
  2489  00007E                     LCD_DrawField@count:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x1E
  2493  00007E                     	ds	1
  2494  00007F                     irobot_rotate@rotateSpeed:
  2495                           	opt stack 0
  2496  00007F                     ___fldiv@new_exp:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x1F
  2500  00007F                     	ds	1
  2501  000080                     LCD_DrawField@xmax:
  2502                           	opt stack 0
  2503                           
  2504                           ; 1 bytes @ 0x20
  2505  000080                     	ds	1
  2506  000081                     ??_irobot_rotate:
  2507  000081                     LCD_DrawField@ymax:
  2508                           	opt stack 0
  2509  000081                     ___fldiv@grs:
  2510                           	opt stack 0
  2511                           
  2512                           ; 4 bytes @ 0x21
  2513  000081                     	ds	1
  2514  000082                     LCD_DrawField@i:
  2515                           	opt stack 0
  2516  000082                     irobot_rotate@isScript:
  2517                           	opt stack 0
  2518  000082                     Port_Set@TypeRequired:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x22
  2522  000082                     	ds	1
  2523  000083                     ??_Console_Render:
  2524  000083                     Button_Poll@Pin:
  2525                           	opt stack 0
  2526  000083                     irobot_rotate@angleTotal:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x23
  2530  000083                     	ds	1
  2531  000084                     Port_Set@TypeActual:
  2532                           	opt stack 0
  2533                           
  2534                           ; 2 bytes @ 0x24
  2535  000084                     	ds	1
  2536  000085                     PortProperty_Valid@Pair:
  2537                           	opt stack 0
  2538  000085                     Console_Render@temp:
  2539                           	opt stack 0
  2540  000085                     ___fldiv@bexp:
  2541                           	opt stack 0
  2542  000085                     irobot_rotate@rotateDirection:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x25
  2546  000085                     	ds	1
  2547  000086                     Port_Set@Type:
  2548                           	opt stack 0
  2549  000086                     ___fldiv@aexp:
  2550                           	opt stack 0
  2551  000086                     Port_CheckPairType@pInput:
  2552                           	opt stack 0
  2553  000086                     Port_SetPinType@pInput:
  2554                           	opt stack 0
  2555  000086                     Console_Render@lCursor:
  2556                           	opt stack 0
  2557                           
  2558                           ; 4 bytes @ 0x26
  2559  000086                     	ds	1
  2560  000087                     ?___flmul:
  2561                           	opt stack 0
  2562  000087                     ___flmul@b:
  2563                           	opt stack 0
  2564                           
  2565                           ; 4 bytes @ 0x27
  2566  000087                     	ds	1
  2567  000088                     Port_CheckPairType@pPair:
  2568                           	opt stack 0
  2569  000088                     Port_SetPinType@pPin:
  2570                           	opt stack 0
  2571                           
  2572                           ; 1 bytes @ 0x28
  2573  000088                     	ds	1
  2574  000089                     Port_CheckPairType@pDrive:
  2575                           	opt stack 0
  2576  000089                     Port_SetPinType@pType:
  2577                           	opt stack 0
  2578                           
  2579                           ; 1 bytes @ 0x29
  2580  000089                     	ds	1
  2581  00008A                     Port_CheckPairType@Pin1:
  2582                           	opt stack 0
  2583  00008A                     Port_SetPinType@Output:
  2584                           	opt stack 0
  2585  00008A                     Console_Render@x:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x2A
  2589  00008A                     	ds	1
  2590  00008B                     Port_CheckPairType@Pin2:
  2591                           	opt stack 0
  2592  00008B                     Console_Render@y:
  2593                           	opt stack 0
  2594  00008B                     Port_SetPinType@Props:
  2595                           	opt stack 0
  2596  00008B                     ___flmul@a:
  2597                           	opt stack 0
  2598                           
  2599                           ; 4 bytes @ 0x2B
  2600  00008B                     	ds	1
  2601  00008C                     Port_CheckPairType@Output:
  2602                           	opt stack 0
  2603                           
  2604                           ; 1 bytes @ 0x2C
  2605  00008C                     	ds	1
  2606  00008D                     LED_Init@pLED:
  2607                           	opt stack 0
  2608  00008D                     Port_CheckPairType@Props:
  2609                           	opt stack 0
  2610  00008D                     Motor_Init@pMotor:
  2611                           	opt stack 0
  2612  00008D                     SPI_Init@pClock:
  2613                           	opt stack 0
  2614                           
  2615                           ; 4 bytes @ 0x2D
  2616  00008D                     	ds	2
  2617  00008F                     ??___flmul:
  2618  00008F                     Port_CheckQuadType@pInput:
  2619                           	opt stack 0
  2620  00008F                     Motor_Init@pAddress:
  2621                           	opt stack 0
  2622                           
  2623                           ; 2 bytes @ 0x2F
  2624  00008F                     	ds	2
  2625  000091                     Port_CheckQuadType@pQuad:
  2626                           	opt stack 0
  2627  000091                     SPI_Init@pChannel:
  2628                           	opt stack 0
  2629                           
  2630                           ; 1 bytes @ 0x31
  2631  000091                     	ds	1
  2632  000092                     Port_CheckQuadType@pDrive:
  2633                           	opt stack 0
  2634  000092                     SPI_Init@pMode:
  2635                           	opt stack 0
  2636                           
  2637                           ; 1 bytes @ 0x32
  2638  000092                     	ds	1
  2639  000093                     Port_CheckQuadType@Pair1:
  2640                           	opt stack 0
  2641  000093                     ___flmul@sign:
  2642                           	opt stack 0
  2643  000093                     SPI_Init@pInput:
  2644                           	opt stack 0
  2645                           
  2646                           ; 2 bytes @ 0x33
  2647  000093                     	ds	1
  2648  000094                     Port_CheckQuadType@Pair2:
  2649                           	opt stack 0
  2650  000094                     ___flmul@aexp:
  2651                           	opt stack 0
  2652                           
  2653                           ; 1 bytes @ 0x34
  2654  000094                     	ds	1
  2655  000095                     ??_LCD_Init:
  2656  000095                     Port_CheckQuadType@Output:
  2657                           	opt stack 0
  2658  000095                     ___flmul@grs:
  2659                           	opt stack 0
  2660                           
  2661                           ; 4 bytes @ 0x35
  2662  000095                     	ds	1
  2663  000096                     Port_CheckPortType@pInput:
  2664                           	opt stack 0
  2665  000096                     Port_SetQuadType@pInput:
  2666                           	opt stack 0
  2667                           
  2668                           ; 2 bytes @ 0x36
  2669  000096                     	ds	1
  2670  000097                     LCD_Init@i:
  2671                           	opt stack 0
  2672                           
  2673                           ; 2 bytes @ 0x37
  2674  000097                     	ds	1
  2675  000098                     Port_CheckPortType@pDrive:
  2676                           	opt stack 0
  2677  000098                     Port_SetQuadType@pQuad:
  2678                           	opt stack 0
  2679                           
  2680                           ; 1 bytes @ 0x38
  2681  000098                     	ds	1
  2682  000099                     Port_CheckPortType@Output:
  2683                           	opt stack 0
  2684  000099                     Port_SetQuadType@pType:
  2685                           	opt stack 0
  2686  000099                     ___flmul@bexp:
  2687                           	opt stack 0
  2688                           
  2689                           ; 1 bytes @ 0x39
  2690  000099                     	ds	1
  2691  00009A                     Port_SetQuadType@Output:
  2692                           	opt stack 0
  2693  00009A                     Port_SetType@pInput:
  2694                           	opt stack 0
  2695  00009A                     ___flmul@prod:
  2696                           	opt stack 0
  2697                           
  2698                           ; 4 bytes @ 0x3A
  2699  00009A                     	ds	1
  2700  00009B                     Button_Init@pInput:
  2701                           	opt stack 0
  2702                           
  2703                           ; 2 bytes @ 0x3B
  2704  00009B                     	ds	1
  2705  00009C                     Port_SetType@pType:
  2706                           	opt stack 0
  2707                           
  2708                           ; 1 bytes @ 0x3C
  2709  00009C                     	ds	1
  2710  00009D                     ??_Port_SetType:
  2711  00009D                     Button_Init@pThreshold:
  2712                           	opt stack 0
  2713                           
  2714                           ; 2 bytes @ 0x3D
  2715  00009D                     	ds	1
  2716  00009E                     ___flmul@temp:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x3E
  2720  00009E                     	ds	1
  2721  00009F                     Port_SetType@Output:
  2722                           	opt stack 0
  2723  00009F                     Button_Init@pInitIO:
  2724                           	opt stack 0
  2725                           
  2726                           ; 3 bytes @ 0x3F
  2727  00009F                     	ds	1
  2728  0000A0                     ?_ADC_Voltage:
  2729                           	opt stack 0
  2730  0000A0                     ?_fround:
  2731                           	opt stack 0
  2732  0000A0                     ?_scale:
  2733                           	opt stack 0
  2734  0000A0                     Port_Init@pInput:
  2735                           	opt stack 0
  2736  0000A0                     ADC_Voltage@pInput:
  2737                           	opt stack 0
  2738                           
  2739                           ; 2 bytes @ 0x40
  2740  0000A0                     	ds	2
  2741  0000A2                     Port_Init@pPort:
  2742                           	opt stack 0
  2743  0000A2                     Button_Init@pGetState:
  2744                           	opt stack 0
  2745                           
  2746                           ; 3 bytes @ 0x42
  2747  0000A2                     	ds	1
  2748  0000A3                     ??_Port_Init:
  2749                           
  2750                           ; 1 bytes @ 0x43
  2751  0000A3                     	ds	1
  2752  0000A4                     ??_ADC_Voltage:
  2753  0000A4                     _fround$15634:
  2754                           	opt stack 0
  2755  0000A4                     _scale$15635:
  2756                           	opt stack 0
  2757                           
  2758                           ; 4 bytes @ 0x44
  2759  0000A4                     	ds	1
  2760  0000A5                     Port_Init@i:
  2761                           	opt stack 0
  2762  0000A5                     Button_Init@pFunction:
  2763                           	opt stack 0
  2764                           
  2765                           ; 3 bytes @ 0x45
  2766  0000A5                     	ds	1
  2767  0000A6                     ADC_Voltage@max:
  2768                           	opt stack 0
  2769                           
  2770                           ; 4 bytes @ 0x46
  2771  0000A6                     	ds	2
  2772  0000A8                     scale@scl:
  2773                           	opt stack 0
  2774  0000A8                     HMI_Init@in:
  2775                           	opt stack 0
  2776  0000A8                     _fround$15633:
  2777                           	opt stack 0
  2778                           
  2779                           ; 4 bytes @ 0x48
  2780  0000A8                     	ds	2
  2781  0000AA                     ADC_Voltage@ref:
  2782                           	opt stack 0
  2783                           
  2784                           ; 4 bytes @ 0x4A
  2785  0000AA                     	ds	2
  2786  0000AC                     fround@prec:
  2787                           	opt stack 0
  2788                           
  2789                           ; 1 bytes @ 0x4C
  2790  0000AC                     	ds	1
  2791  0000AD                     ?___fladd:
  2792                           	opt stack 0
  2793  0000AD                     ___fladd@b:
  2794                           	opt stack 0
  2795                           
  2796                           ; 4 bytes @ 0x4D
  2797  0000AD                     	ds	1
  2798  0000AE                     ADC_Voltage@output:
  2799                           	opt stack 0
  2800                           
  2801                           ; 4 bytes @ 0x4E
  2802  0000AE                     	ds	3
  2803  0000B1                     ___fladd@a:
  2804                           	opt stack 0
  2805                           
  2806                           ; 4 bytes @ 0x51
  2807  0000B1                     	ds	1
  2808  0000B2                     ?___fltol:
  2809                           	opt stack 0
  2810  0000B2                     ___fltol@f1:
  2811                           	opt stack 0
  2812                           
  2813                           ; 4 bytes @ 0x52
  2814  0000B2                     	ds	3
  2815  0000B5                     ??___fladd:
  2816                           
  2817                           ; 1 bytes @ 0x55
  2818  0000B5                     	ds	1
  2819  0000B6                     ??___fltol:
  2820                           
  2821                           ; 1 bytes @ 0x56
  2822  0000B6                     	ds	4
  2823  0000BA                     ___fltol@sign1:
  2824                           	opt stack 0
  2825                           
  2826                           ; 1 bytes @ 0x5A
  2827  0000BA                     	ds	1
  2828  0000BB                     ___fltol@exp1:
  2829                           	opt stack 0
  2830                           
  2831                           ; 1 bytes @ 0x5B
  2832  0000BB                     	ds	2
  2833  0000BD                     ___fladd@signs:
  2834                           	opt stack 0
  2835                           
  2836                           ; 1 bytes @ 0x5D
  2837  0000BD                     	ds	1
  2838  0000BE                     ___fladd@aexp:
  2839                           	opt stack 0
  2840                           
  2841                           ; 1 bytes @ 0x5E
  2842  0000BE                     	ds	1
  2843  0000BF                     ___fladd@bexp:
  2844                           	opt stack 0
  2845                           
  2846                           ; 1 bytes @ 0x5F
  2847  0000BF                     	ds	1
  2848  0000C0                     ___fladd@grs:
  2849                           	opt stack 0
  2850                           
  2851                           ; 1 bytes @ 0x60
  2852  0000C0                     	ds	1
  2853  0000C1                     ?___flsub:
  2854                           	opt stack 0
  2855  0000C1                     ___flsub@b:
  2856                           	opt stack 0
  2857                           
  2858                           ; 4 bytes @ 0x61
  2859  0000C1                     	ds	4
  2860  0000C5                     ___flsub@a:
  2861                           	opt stack 0
  2862                           
  2863                           ; 4 bytes @ 0x65
  2864  0000C5                     	ds	4
  2865  0000C9                     ?_printf:
  2866                           	opt stack 0
  2867  0000C9                     printf@f:
  2868                           	opt stack 0
  2869                           
  2870                           ; 2 bytes @ 0x69
  2871  0000C9                     	ds	12
  2872  0000D5                     ??_printf:
  2873                           
  2874                           ; 1 bytes @ 0x75
  2875  0000D5                     	ds	2
  2876  0000D7                     ??_mode1:
  2877  0000D7                     ??_mode4:
  2878  0000D7                     mode2@dist:
  2879                           	opt stack 0
  2880                           
  2881                           ; 2 bytes @ 0x77
  2882  0000D7                     	ds	1
  2883  0000D8                     _mode4$15632:
  2884                           	opt stack 0
  2885                           
  2886                           ; 4 bytes @ 0x78
  2887  0000D8                     	ds	1
  2888  0000D9                     mode1@moveto:
  2889                           	opt stack 0
  2890                           
  2891                           ; 2 bytes @ 0x79
  2892  0000D9                     	ds	2
  2893  0000DB                     _mode1$15631:
  2894                           	opt stack 0
  2895                           
  2896                           ; 4 bytes @ 0x7B
  2897  0000DB                     	ds	4
  2898  0000DF                     ??_main:
  2899                           
  2900                           ; 1 bytes @ 0x7F
  2901  0000DF                     	ds	2
  2902                           tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           postdec1	equ	0xFE5
  2909                           fsr1h	equ	0xFE2
  2910                           fsr1l	equ	0xFE1
  2911                           
  2912                           	psect	cstackCOMRAM
  2913  000001                     __pcstackCOMRAM:
  2914                           	opt stack 0
  2915  000001                     i2Byte_SetBit@pInput:
  2916                           	opt stack 0
  2917  000001                     i2Byte_GetZone@pInput:
  2918                           	opt stack 0
  2919  000001                     i2delay_us@us:
  2920                           	opt stack 0
  2921  000001                     i2MXK_Queue@pCallback:
  2922                           	opt stack 0
  2923                           
  2924                           ; 3 bytes @ 0x0
  2925  000001                     	ds	2
  2926  000003                     i2Byte_SetBit@pBit:
  2927                           	opt stack 0
  2928  000003                     i2Byte_GetZone@pMax:
  2929                           	opt stack 0
  2930  000003                     i2delay_us@u:
  2931                           	opt stack 0
  2932                           
  2933                           ; 4 bytes @ 0x2
  2934  000003                     	ds	1
  2935  000004                     i2Byte_SetBit@pValue:
  2936                           	opt stack 0
  2937  000004                     i2Byte_GetZone@pChunk:
  2938                           	opt stack 0
  2939                           
  2940                           ; 1 bytes @ 0x3
  2941  000004                     	ds	1
  2942  000005                     ??i2_Byte_SetBit:
  2943  000005                     i2Byte_GetZone@pChunkSize:
  2944                           	opt stack 0
  2945                           
  2946                           ; 1 bytes @ 0x4
  2947  000005                     	ds	1
  2948  000006                     ??i2_Byte_GetZone:
  2949                           
  2950                           ; 1 bytes @ 0x5
  2951  000006                     	ds	1
  2952  000007                     i2Byte_GetZone@MASK:
  2953                           	opt stack 0
  2954  000007                     i2MXK_SwitchTo@CUR:
  2955                           	opt stack 0
  2956                           
  2957                           ; 1 bytes @ 0x6
  2958  000007                     	ds	1
  2959  000008                     i2Byte_GetZone@Offset:
  2960                           	opt stack 0
  2961  000008                     i2MXK_SwitchTo@pModule:
  2962                           	opt stack 0
  2963                           
  2964                           ; 1 bytes @ 0x7
  2965  000008                     	ds	1
  2966  000009                     i2Byte_GetZone@Output:
  2967                           	opt stack 0
  2968                           
  2969                           ; 1 bytes @ 0x8
  2970  000009                     	ds	1
  2971  00000A                     i2Byte_GetPair@pInput:
  2972                           	opt stack 0
  2973                           
  2974                           ; 2 bytes @ 0x9
  2975  00000A                     	ds	2
  2976  00000C                     i2Byte_GetPair@pPair:
  2977                           	opt stack 0
  2978                           
  2979                           ; 1 bytes @ 0xB
  2980  00000C                     	ds	1
  2981  00000D                     i2Word_GetPair@pInput:
  2982                           	opt stack 0
  2983                           
  2984                           ; 2 bytes @ 0xC
  2985  00000D                     	ds	2
  2986  00000F                     i2Word_GetPair@pPair:
  2987                           	opt stack 0
  2988                           
  2989                           ; 1 bytes @ 0xE
  2990  00000F                     	ds	1
  2991  000010                     i2Port_SetPin@pInput:
  2992                           	opt stack 0
  2993                           
  2994                           ; 2 bytes @ 0xF
  2995  000010                     	ds	2
  2996  000012                     i2Port_SetPin@pPin:
  2997                           	opt stack 0
  2998                           
  2999                           ; 1 bytes @ 0x11
  3000  000012                     	ds	1
  3001  000013                     i2Port_SetPin@pValue:
  3002                           	opt stack 0
  3003                           
  3004                           ; 1 bytes @ 0x12
  3005  000013                     	ds	1
  3006  000014                     i2Port_SetPin@Type:
  3007                           	opt stack 0
  3008                           
  3009                           ; 1 bytes @ 0x13
  3010  000014                     	ds	1
  3011  000015                     
  3012                           ; 1 bytes @ 0x14
  3013  000015                     	ds	2
  3014  000017                     ??_ISR_Function:
  3015                           
  3016                           ; 1 bytes @ 0x16
  3017  000017                     	ds	18
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           postinc0	equ	0xFEE
  3023                           wreg	equ	0xFE8
  3024                           postdec1	equ	0xFE5
  3025                           fsr1h	equ	0xFE2
  3026                           fsr1l	equ	0xFE1
  3027                           
  3028 ;;
  3029 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3030 ;;
  3031 ;; *************** function _main *****************
  3032 ;; Defined at:
  3033 ;;		line 337 in file "main.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;		None
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  1    wreg      void 
  3040 ;; Registers used:
  3041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;Total ram usage:        2 bytes
  3052 ;; Hardware stack levels required when called:   18
  3053 ;; This function calls:
  3054 ;;		_Console_Render
  3055 ;;		_HMI_Poll
  3056 ;;		_MXK_Dequeue
  3057 ;;		_MXK_Release
  3058 ;;		_MXK_SwitchTo
  3059 ;;		_getMode
  3060 ;;		_init
  3061 ;;		_mode1
  3062 ;;		_mode2
  3063 ;;		_mode3
  3064 ;;		_mode4
  3065 ;;		_printf
  3066 ;; This function is called by:
  3067 ;;		Startup code after reset
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text0
  3072  0152AA                     __ptext0:
  3073                           	opt stack 0
  3074  0152AA                     _main:
  3075                           	opt stack 13
  3076                           
  3077                           ;main.c: 339: init();
  3078                           
  3079                           ;incstack = 0
  3080  0152AA  ECC9  F0AF         	call	_init	;wreg free
  3081  0152AE                     l2399:
  3082                           
  3083                           ;main.c: 342: getMode();
  3084  0152AE  EC9D  F0AC         	call	_getMode	;wreg free
  3085                           
  3086                           ;main.c: 343: switch (mode) {
  3087  0152B2  D053               	goto	l2400
  3088  0152B4                     
  3089                           ;main.c: 345: mode1();
  3090  0152B4  ECE9  F08F         	call	_mode1	;wreg free
  3091                           
  3092                           ;main.c: 346: break;
  3093  0152B8  D7FA               	goto	l2399
  3094  0152BA                     
  3095                           ;main.c: 348: mode2();
  3096  0152BA  ECAC  F0A6         	call	_mode2	;wreg free
  3097                           
  3098                           ;main.c: 349: break;
  3099  0152BE  D7F7               	goto	l2399
  3100  0152C0                     
  3101                           ;main.c: 351: mode3();
  3102  0152C0  ECE4  F0BF         	call	_mode3	;wreg free
  3103                           
  3104                           ;main.c: 352: break;
  3105  0152C4  D7F4               	goto	l2399
  3106  0152C6                     
  3107                           ;main.c: 354: mode4();
  3108  0152C6  ECAC  F08B         	call	_mode4	;wreg free
  3109                           
  3110                           ;main.c: 355: break;
  3111  0152CA  D7F1               	goto	l2399
  3112  0152CC                     
  3113                           ;main.c: 357: if (MXK_SwitchTo(eMXK_HMI)) {
  3114  0152CC  0E01               	movlw	1
  3115  0152CE  EC02  F0BC         	call	_MXK_SwitchTo
  3116  0152D2  0900               	iorlw	0
  3117  0152D4  B4D8               	btfsc	status,2,c
  3118  0152D6  D7EB               	goto	l2399
  3119                           
  3120                           ;main.c: 358: printf("%c", (char)35);
  3121  0152D8  0EFB               	movlw	low STR_1
  3122  0152DA  0100               	movlb	0	; () banked
  3123  0152DC  6FC9               	movwf	printf@f& (0+255),b
  3124  0152DE  0EFF               	movlw	high STR_1
  3125  0152E0  0100               	movlb	0	; () banked
  3126  0152E2  6FCA               	movwf	(printf@f+1)& (0+255),b
  3127  0152E4  0E00               	movlw	0
  3128  0152E6  0100               	movlb	0	; () banked
  3129  0152E8  6FCC               	movwf	(?_printf+3)& (0+255),b
  3130  0152EA  0E23               	movlw	35
  3131  0152EC  6FCB               	movwf	(?_printf+2)& (0+255),b
  3132  0152EE  EC00  F080         	call	_printf	;wreg free
  3133                           
  3134                           ;main.c: 359: printf("Please select mode.\n");
  3135  0152F2  0ED8               	movlw	low STR_10
  3136  0152F4  0100               	movlb	0	; () banked
  3137  0152F6  6FC9               	movwf	printf@f& (0+255),b
  3138  0152F8  0EFF               	movlw	high STR_10
  3139  0152FA  0100               	movlb	0	; () banked
  3140  0152FC  6FCA               	movwf	(printf@f+1)& (0+255),b
  3141  0152FE  EC00  F080         	call	_printf	;wreg free
  3142                           
  3143                           ;main.c: 360: printf("                   \n");
  3144  015302  0EC3               	movlw	low STR_11
  3145  015304  0100               	movlb	0	; () banked
  3146  015306  6FC9               	movwf	printf@f& (0+255),b
  3147  015308  0EFF               	movlw	high STR_11
  3148  01530A  0100               	movlb	0	; () banked
  3149  01530C  6FCA               	movwf	(printf@f+1)& (0+255),b
  3150  01530E  EC00  F080         	call	_printf	;wreg free
  3151                           
  3152                           ;main.c: 361: printf("                   \n");
  3153  015312  0EC3               	movlw	low STR_11
  3154  015314  0100               	movlb	0	; () banked
  3155  015316  6FC9               	movwf	printf@f& (0+255),b
  3156  015318  0EFF               	movlw	high STR_11
  3157  01531A  0100               	movlb	0	; () banked
  3158  01531C  6FCA               	movwf	(printf@f+1)& (0+255),b
  3159  01531E  EC00  F080         	call	_printf	;wreg free
  3160                           
  3161                           ;main.c: 362: printf("                   \n");
  3162  015322  0EC3               	movlw	low STR_11
  3163  015324  0100               	movlb	0	; () banked
  3164  015326  6FC9               	movwf	printf@f& (0+255),b
  3165  015328  0EFF               	movlw	high STR_11
  3166  01532A  0100               	movlb	0	; () banked
  3167  01532C  6FCA               	movwf	(printf@f+1)& (0+255),b
  3168  01532E  EC00  F080         	call	_printf	;wreg free
  3169                           
  3170                           ;main.c: 363: printf("                   \n");
  3171  015332  0EC3               	movlw	low STR_11
  3172  015334  0100               	movlb	0	; () banked
  3173  015336  6FC9               	movwf	printf@f& (0+255),b
  3174  015338  0EFF               	movlw	high STR_11
  3175  01533A  0100               	movlb	0	; () banked
  3176  01533C  6FCA               	movwf	(printf@f+1)& (0+255),b
  3177  01533E  EC00  F080         	call	_printf	;wreg free
  3178                           
  3179                           ;main.c: 364: Console_Render();
  3180  015342  ECA3  F09A         	call	_Console_Render	;wreg free
  3181                           
  3182                           ;main.c: 365: HMI_Poll();
  3183  015346  ECF9  F0B6         	call	_HMI_Poll	;wreg free
  3184                           
  3185                           ;main.c: 366: if (MXK_Release())
  3186  01534A  EC47  F0BF         	call	_MXK_Release	;wreg free
  3187  01534E  0900               	iorlw	0
  3188  015350  B4D8               	btfsc	status,2,c
  3189  015352  D7AD               	goto	l2399
  3190                           
  3191                           ;main.c: 367: MXK_Dequeue();
  3192  015354  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  3193                           
  3194                           ;main.c: 368: }
  3195                           ;main.c: 369: }
  3196  015358  D7AA               	goto	l2399
  3197  01535A                     l2400:
  3198  01535A  C328  F0DF         	movff	_mode,??_main
  3199  01535E  C329  F0E0         	movff	_mode+1,??_main+1
  3200                           
  3201                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3202                           ; Switch size 1, requested type "space"
  3203                           ; Number of cases is 1, Range of values is 0 to 0
  3204                           ; switch strategies available:
  3205                           ; Name         Instructions Cycles
  3206                           ; simple_byte            4     3 (average)
  3207                           ;	Chosen strategy is simple_byte
  3208  015362  0100               	movlb	0	; () banked
  3209  015364  51E0               	movf	(??_main+1)& (0+255),w,b
  3210  015366  0A00               	xorlw	0	; case 0
  3211  015368  A4D8               	btfss	status,2,c
  3212  01536A  D7B0               	goto	l2406
  3213                           
  3214                           ; BSR set to: 0
  3215                           ; Switch size 1, requested type "space"
  3216                           ; Number of cases is 4, Range of values is 1 to 4
  3217                           ; switch strategies available:
  3218                           ; Name         Instructions Cycles
  3219                           ; simple_byte           13     7 (average)
  3220                           ;	Chosen strategy is simple_byte
  3221  01536C  0100               	movlb	0	; () banked
  3222  01536E  51DF               	movf	??_main& (0+255),w,b
  3223  015370  0A01               	xorlw	1	; case 1
  3224  015372  B4D8               	btfsc	status,2,c
  3225  015374  D79F               	goto	l2401
  3226  015376  0A03               	xorlw	3	; case 2
  3227  015378  B4D8               	btfsc	status,2,c
  3228  01537A  D79F               	goto	l2403
  3229  01537C  0A01               	xorlw	1	; case 3
  3230  01537E  B4D8               	btfsc	status,2,c
  3231  015380  D79F               	goto	l2404
  3232  015382  0A07               	xorlw	7	; case 4
  3233  015384  B4D8               	btfsc	status,2,c
  3234  015386  D79F               	goto	l2405
  3235  015388  D7A1               	goto	l2406
  3236  01538A                     __end_of_main:
  3237                           	opt stack 0
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           postinc0	equ	0xFEE
  3243                           wreg	equ	0xFE8
  3244                           postdec1	equ	0xFE5
  3245                           fsr1h	equ	0xFE2
  3246                           fsr1l	equ	0xFE1
  3247                           status	equ	0xFD8
  3248                           
  3249 ;; *************** function _mode4 *****************
  3250 ;; Defined at:
  3251 ;;		line 263 in file "main.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;		None
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;		None
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;Total ram usage:        5 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:   16
  3272 ;; This function calls:
  3273 ;;		_ADC_Start
  3274 ;;		_ADC_Voltage
  3275 ;;		_Console_Render
  3276 ;;		_HMI_Poll
  3277 ;;		_HMI_Render
  3278 ;;		_HMI_SetNumber
  3279 ;;		_MXK_Dequeue
  3280 ;;		_MXK_Release
  3281 ;;		_MXK_SwitchTo
  3282 ;;		_Motor_Move
  3283 ;;		_Motor_Speed
  3284 ;;		___fldiv
  3285 ;;		___flmul
  3286 ;;		___fltol
  3287 ;;		___xxtofl
  3288 ;;		_irobot_move_straight
  3289 ;;		_irobot_rotate
  3290 ;;		_irobot_song_play
  3291 ;;		_irobot_stop_motion
  3292 ;;		_printf
  3293 ;;		_update_angle
  3294 ;;		_update_bump_and_cliff
  3295 ;;		_update_distance
  3296 ;; This function is called by:
  3297 ;;		_main
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text1
  3302  011758                     __ptext1:
  3303                           	opt stack 0
  3304  011758                     _mode4:
  3305                           	opt stack 14
  3306                           
  3307                           ;main.c: 264: update_bump_and_cliff();
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;incstack = 0
  3311  011758  ECDE  F0BC         	call	_update_bump_and_cliff	;wreg free
  3312                           
  3313                           ;main.c: 265: update_distance();
  3314  01175C  ECED  F0BF         	call	_update_distance	;wreg free
  3315                           
  3316                           ;main.c: 266: update_angle();
  3317  011760  ECF6  F0BF         	call	_update_angle	;wreg free
  3318                           
  3319                           ;main.c: 267: if (iRBumpLeft || iRBumpRight) {
  3320  011764  0100               	movlb	0	; () banked
  3321  011766  51EE               	movf	_iRBumpLeft& (0+255),w,b
  3322  011768  A4D8               	btfss	status,2,c
  3323  01176A  D004               	goto	u16630
  3324                           
  3325                           ; BSR set to: 0
  3326  01176C  0100               	movlb	0	; () banked
  3327  01176E  51EF               	movf	_iRBumpRight& (0+255),w,b
  3328  011770  B4D8               	btfsc	status,2,c
  3329  011772  D006               	goto	l2369
  3330  011774                     u16630:
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;main.c: 268: irobot_song_play(0);
  3334                           
  3335                           ; BSR set to: 0
  3336  011774  0E00               	movlw	0
  3337  011776  ECD0  F0BF         	call	_irobot_song_play
  3338                           
  3339                           ;main.c: 269: irobot_stop_motion(0);
  3340  01177A  0E00               	movlw	0
  3341  01177C  EC77  F0BB         	call	_irobot_stop_motion
  3342  011780                     l2369:
  3343                           
  3344                           ;main.c: 270: }
  3345                           ;main.c: 271: if (angleTotal > 83) {
  3346  011780  BE2C               	btfsc	_angleTotal+1,7,c
  3347  011782  D009               	goto	l2372
  3348  011784  502C               	movf	_angleTotal+1,w,c
  3349  011786  E104               	bnz	u16640
  3350  011788  0E54               	movlw	84
  3351  01178A  5C2B               	subwf	_angleTotal,w,c
  3352  01178C  A0D8               	btfss	status,0,c
  3353  01178E  D003               	goto	l2372
  3354  011790                     u16640:
  3355                           
  3356                           ;main.c: 272: irobot_stop_motion(0);
  3357  011790  0E00               	movlw	0
  3358  011792  EC77  F0BB         	call	_irobot_stop_motion
  3359  011796                     l2372:
  3360                           
  3361                           ;main.c: 273: }
  3362                           ;main.c: 274: HMI_Poll();
  3363  011796  ECF9  F0B6         	call	_HMI_Poll	;wreg free
  3364                           
  3365                           ;main.c: 275: StepRotate = 401;
  3366  01179A  0E01               	movlw	1
  3367  01179C  6E2A               	movwf	_StepRotate+1,c
  3368  01179E  0E91               	movlw	145
  3369  0117A0  6E29               	movwf	_StepRotate,c
  3370                           
  3371                           ;main.c: 276: MinDist = 1000;
  3372  0117A2  0E03               	movlw	3
  3373  0117A4  6E4C               	movwf	_MinDist+1,c
  3374  0117A6  0EE8               	movlw	232
  3375  0117A8  6E4B               	movwf	_MinDist,c
  3376                           
  3377                           ;main.c: 277: Stepstomin = 0;
  3378  0117AA  0E00               	movlw	0
  3379  0117AC  0100               	movlb	0	; () banked
  3380  0117AE  6FE7               	movwf	(_Stepstomin+1)& (0+255),b
  3381  0117B0  0E00               	movlw	0
  3382  0117B2  6FE6               	movwf	_Stepstomin& (0+255),b
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;main.c: 278: stepsToMinDegrees = ((float) Stepstomin / 400) * 360;
  3386  0117B4  0E00               	movlw	0
  3387  0117B6  0100               	movlb	0	; () banked
  3388  0117B8  6F72               	movwf	___fldiv@a& (0+255),b
  3389  0117BA  0E00               	movlw	0
  3390  0117BC  6F73               	movwf	(___fldiv@a+1)& (0+255),b
  3391  0117BE  0EC8               	movlw	200
  3392  0117C0  6F74               	movwf	(___fldiv@a+2)& (0+255),b
  3393  0117C2  0E43               	movlw	67
  3394  0117C4  6F75               	movwf	(___fldiv@a+3)& (0+255),b
  3395  0117C6  C0E6  F060         	movff	_Stepstomin,___xxtofl@val
  3396  0117CA  C0E7  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3397  0117CE  0100               	movlb	0	; () banked
  3398  0117D0  0E00               	movlw	0
  3399  0117D2  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3400  0117D4  0EFF               	movlw	-1
  3401  0117D6  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3402  0117D8  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3403  0117DA  0E01               	movlw	1
  3404  0117DC  ECA7  F09C         	call	___xxtofl
  3405  0117E0  C060  F06E         	movff	?___xxtofl,___fldiv@b
  3406  0117E4  C061  F06F         	movff	?___xxtofl+1,___fldiv@b+1
  3407  0117E8  C062  F070         	movff	?___xxtofl+2,___fldiv@b+2
  3408  0117EC  C063  F071         	movff	?___xxtofl+3,___fldiv@b+3
  3409  0117F0  ECE1  F091         	call	___fldiv	;wreg free
  3410  0117F4  C06E  F087         	movff	?___fldiv,___flmul@b
  3411  0117F8  C06F  F088         	movff	?___fldiv+1,___flmul@b+1
  3412  0117FC  C070  F089         	movff	?___fldiv+2,___flmul@b+2
  3413  011800  C071  F08A         	movff	?___fldiv+3,___flmul@b+3
  3414  011804  0E00               	movlw	0
  3415  011806  0100               	movlb	0	; () banked
  3416  011808  6F8B               	movwf	___flmul@a& (0+255),b
  3417  01180A  0E00               	movlw	0
  3418  01180C  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3419  01180E  0EB4               	movlw	180
  3420  011810  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3421  011812  0E43               	movlw	67
  3422  011814  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3423  011816  EC59  F089         	call	___flmul	;wreg free
  3424  01181A  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3425  01181E  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3426  011822  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3427  011826  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3428                           
  3429                           ;main.c: 279: IRValue = 0;
  3430  01182A  0E00               	movlw	0
  3431  01182C  0100               	movlb	0	; () banked
  3432  01182E  6FE5               	movwf	(_IRValue+1)& (0+255),b
  3433  011830  0E00               	movlw	0
  3434  011832  6FE4               	movwf	_IRValue& (0+255),b
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;main.c: 280: TimerX = 8;
  3438  011834  0E00               	movlw	0
  3439  011836  6E4A               	movwf	_TimerX+1,c
  3440  011838  0E08               	movlw	8
  3441  01183A  6E49               	movwf	_TimerX,c
  3442                           
  3443                           ;main.c: 281: while (StepRotate > 0) {
  3444  01183C  D14D               	goto	l2387
  3445  01183E                     
  3446                           ;main.c: 282: StepRotate--;
  3447                           
  3448                           ; BSR set to: 0
  3449  01183E  0629               	decf	_StepRotate,f,c
  3450  011840  A0D8               	btfss	status,0,c
  3451  011842  062A               	decf	_StepRotate+1,f,c
  3452                           
  3453                           ;main.c: 283: ADC_Start(&ADC_AN0);
  3454  011844  0E40               	movlw	low _ADC_AN0
  3455  011846  0100               	movlb	0	; () banked
  3456  011848  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3457  01184A  0E00               	movlw	high _ADC_AN0
  3458  01184C  0100               	movlb	0	; () banked
  3459  01184E  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3460  011850  EC94  F0B4         	call	_ADC_Start	;wreg free
  3461                           
  3462                           ;main.c: 284: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3463  011854  0E40               	movlw	low _ADC_AN0
  3464  011856  0100               	movlb	0	; () banked
  3465  011858  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3466  01185A  0E00               	movlw	high _ADC_AN0
  3467  01185C  0100               	movlb	0	; () banked
  3468  01185E  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3469  011860  ECC5  F0A9         	call	_ADC_Voltage	;wreg free
  3470  011864  C0A0  F0D8         	movff	?_ADC_Voltage,_mode4$15632
  3471  011868  C0A1  F0D9         	movff	?_ADC_Voltage+1,_mode4$15632+1
  3472  01186C  C0A2  F0DA         	movff	?_ADC_Voltage+2,_mode4$15632+2
  3473  011870  C0A3  F0DB         	movff	?_ADC_Voltage+3,_mode4$15632+3
  3474                           
  3475                           ;main.c: 284: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3476  011874  C0D8  F072         	movff	_mode4$15632,___fldiv@a
  3477  011878  C0D9  F073         	movff	_mode4$15632+1,___fldiv@a+1
  3478  01187C  C0DA  F074         	movff	_mode4$15632+2,___fldiv@a+2
  3479  011880  C0DB  F075         	movff	_mode4$15632+3,___fldiv@a+3
  3480  011884  0E00               	movlw	0
  3481  011886  0100               	movlb	0	; () banked
  3482  011888  6F6E               	movwf	___fldiv@b& (0+255),b
  3483  01188A  0E00               	movlw	0
  3484  01188C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3485  01188E  0E6C               	movlw	108
  3486  011890  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3487  011892  0E42               	movlw	66
  3488  011894  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3489  011896  ECE1  F091         	call	___fldiv	;wreg free
  3490  01189A  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3491  01189E  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3492  0118A2  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3493  0118A6  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3494  0118AA  ECD7  F0A7         	call	___fltol	;wreg free
  3495  0118AE  C0B2  F0E4         	movff	?___fltol,_IRValue
  3496  0118B2  C0B3  F0E5         	movff	?___fltol+1,_IRValue+1
  3497                           
  3498                           ;main.c: 285: if (MXK_SwitchTo(eMXK_HMI)) {
  3499  0118B6  0E01               	movlw	1
  3500  0118B8  EC02  F0BC         	call	_MXK_SwitchTo
  3501  0118BC  0900               	iorlw	0
  3502  0118BE  B4D8               	btfsc	status,2,c
  3503  0118C0  D00E               	goto	l2376
  3504                           
  3505                           ;main.c: 286: HMI_SetNumber(IRValue);
  3506  0118C2  C0E4  F071         	movff	_IRValue,HMI_SetNumber@pInput
  3507  0118C6  C0E5  F072         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3508  0118CA  EC42  F0BE         	call	_HMI_SetNumber	;wreg free
  3509                           
  3510                           ;main.c: 287: HMI_Render();
  3511  0118CE  EC62  F0BC         	call	_HMI_Render	;wreg free
  3512                           
  3513                           ;main.c: 288: if (MXK_Release())
  3514  0118D2  EC47  F0BF         	call	_MXK_Release	;wreg free
  3515  0118D6  0900               	iorlw	0
  3516  0118D8  A4D8               	btfss	status,2,c
  3517                           
  3518                           ;main.c: 289: MXK_Dequeue();
  3519  0118DA  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  3520  0118DE                     l2376:
  3521                           
  3522                           ;main.c: 290: }
  3523                           ;main.c: 291: if (IRValue < MinDist) {
  3524  0118DE  504B               	movf	_MinDist,w,c
  3525  0118E0  0100               	movlb	0	; () banked
  3526  0118E2  5DE4               	subwf	_IRValue& (0+255),w,b
  3527  0118E4  0100               	movlb	0	; () banked
  3528  0118E6  51E5               	movf	(_IRValue+1)& (0+255),w,b
  3529  0118E8  0A80               	xorlw	128
  3530  0118EA  0100               	movlb	0	; () banked
  3531  0118EC  6FD7               	movwf	??_mode4& (0+255),b
  3532  0118EE  504C               	movf	_MinDist+1,w,c
  3533  0118F0  0A80               	xorlw	128
  3534  0118F2  0100               	movlb	0	; () banked
  3535  0118F4  59D7               	subwfb	??_mode4& (0+255),w,b
  3536  0118F6  B0D8               	btfsc	status,0,c
  3537  0118F8  D008               	goto	l2377
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;main.c: 292: MinDist = IRValue;
  3541  0118FA  C0E4  F04B         	movff	_IRValue,_MinDist
  3542  0118FE  C0E5  F04C         	movff	_IRValue+1,_MinDist+1
  3543                           
  3544                           ;main.c: 293: Stepstomin = StepRotate;
  3545  011902  C029  F0E6         	movff	_StepRotate,_Stepstomin
  3546  011906  C02A  F0E7         	movff	_StepRotate+1,_Stepstomin+1
  3547  01190A                     l2377:
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;main.c: 294: }
  3551                           ;main.c: 295: if (MXK_SwitchTo(eMXK_Motor)) {
  3552                           
  3553                           ; BSR set to: 0
  3554  01190A  0E08               	movlw	8
  3555  01190C  EC02  F0BC         	call	_MXK_SwitchTo
  3556  011910  0900               	iorlw	0
  3557  011912  B4D8               	btfsc	status,2,c
  3558  011914  D01F               	goto	l2379
  3559                           
  3560                           ;main.c: 296: Motor_Speed(&Stepper, (50));
  3561  011916  0ECF               	movlw	low _Stepper
  3562  011918  0100               	movlb	0	; () banked
  3563  01191A  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3564  01191C  0E03               	movlw	high _Stepper
  3565  01191E  0100               	movlb	0	; () banked
  3566  011920  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3567  011922  0E00               	movlw	0
  3568  011924  0100               	movlb	0	; () banked
  3569  011926  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3570  011928  0E32               	movlw	50
  3571  01192A  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3572  01192C  EC2D  F0BE         	call	_Motor_Speed	;wreg free
  3573                           
  3574                           ;main.c: 297: Motor_Move(&Stepper, -1);
  3575  011930  0ECF               	movlw	low _Stepper
  3576  011932  0100               	movlb	0	; () banked
  3577  011934  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3578  011936  0E03               	movlw	high _Stepper
  3579  011938  0100               	movlb	0	; () banked
  3580  01193A  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3581  01193C  0EFF               	movlw	255
  3582  01193E  0100               	movlb	0	; () banked
  3583  011940  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3584  011942  6965               	setf	Motor_Move@pDelta& (0+255),b
  3585  011944  ECFB  F0BC         	call	_Motor_Move	;wreg free
  3586                           
  3587                           ;main.c: 298: if (MXK_Release())
  3588  011948  EC47  F0BF         	call	_MXK_Release	;wreg free
  3589  01194C  0900               	iorlw	0
  3590  01194E  A4D8               	btfss	status,2,c
  3591                           
  3592                           ;main.c: 299: MXK_Dequeue();
  3593  011950  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  3594  011954                     l2379:
  3595                           
  3596                           ;main.c: 300: }
  3597                           ;main.c: 301: TimerX = 10;
  3598  011954  0E00               	movlw	0
  3599  011956  6E4A               	movwf	_TimerX+1,c
  3600  011958  0E0A               	movlw	10
  3601  01195A  6E49               	movwf	_TimerX,c
  3602                           
  3603                           ;main.c: 302: if (TimerX > 0) {
  3604  01195C  BE4A               	btfsc	_TimerX+1,7,c
  3605  01195E  D05D               	goto	u16730
  3606  011960  504A               	movf	_TimerX+1,w,c
  3607  011962  E154               	bnz	l18390
  3608  011964  0449               	decf	_TimerX,w,c
  3609  011966  B0D8               	btfsc	status,0,c
  3610  011968  D051               	goto	l2381
  3611  01196A  D057               	goto	u16730
  3612  01196C                     l18372:
  3613                           
  3614                           ;main.c: 304: ADC_Start(&ADC_AN0);
  3615  01196C  0E40               	movlw	low _ADC_AN0
  3616  01196E  0100               	movlb	0	; () banked
  3617  011970  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3618  011972  0E00               	movlw	high _ADC_AN0
  3619  011974  0100               	movlb	0	; () banked
  3620  011976  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3621  011978  EC94  F0B4         	call	_ADC_Start	;wreg free
  3622                           
  3623                           ;main.c: 305: if (MXK_SwitchTo(eMXK_HMI)) {
  3624  01197C  0E01               	movlw	1
  3625  01197E  EC02  F0BC         	call	_MXK_SwitchTo
  3626  011982  0900               	iorlw	0
  3627  011984  B4D8               	btfsc	status,2,c
  3628  011986  D00E               	goto	l2384
  3629                           
  3630                           ;main.c: 306: HMI_SetNumber(IRValue);
  3631  011988  C0E4  F071         	movff	_IRValue,HMI_SetNumber@pInput
  3632  01198C  C0E5  F072         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3633  011990  EC42  F0BE         	call	_HMI_SetNumber	;wreg free
  3634                           
  3635                           ;main.c: 307: HMI_Render();
  3636  011994  EC62  F0BC         	call	_HMI_Render	;wreg free
  3637                           
  3638                           ;main.c: 308: if (MXK_Release())
  3639  011998  EC47  F0BF         	call	_MXK_Release	;wreg free
  3640  01199C  0900               	iorlw	0
  3641  01199E  A4D8               	btfss	status,2,c
  3642                           
  3643                           ;main.c: 309: MXK_Dequeue();
  3644  0119A0  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  3645  0119A4                     l2384:
  3646                           
  3647                           ;main.c: 310: }
  3648                           ;main.c: 311: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3649  0119A4  0E40               	movlw	low _ADC_AN0
  3650  0119A6  0100               	movlb	0	; () banked
  3651  0119A8  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3652  0119AA  0E00               	movlw	high _ADC_AN0
  3653  0119AC  0100               	movlb	0	; () banked
  3654  0119AE  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3655  0119B0  ECC5  F0A9         	call	_ADC_Voltage	;wreg free
  3656  0119B4  C0A0  F0D8         	movff	?_ADC_Voltage,_mode4$15632
  3657  0119B8  C0A1  F0D9         	movff	?_ADC_Voltage+1,_mode4$15632+1
  3658  0119BC  C0A2  F0DA         	movff	?_ADC_Voltage+2,_mode4$15632+2
  3659  0119C0  C0A3  F0DB         	movff	?_ADC_Voltage+3,_mode4$15632+3
  3660                           
  3661                           ;main.c: 310: }
  3662                           ;main.c: 311: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3663  0119C4  C0D8  F072         	movff	_mode4$15632,___fldiv@a
  3664  0119C8  C0D9  F073         	movff	_mode4$15632+1,___fldiv@a+1
  3665  0119CC  C0DA  F074         	movff	_mode4$15632+2,___fldiv@a+2
  3666  0119D0  C0DB  F075         	movff	_mode4$15632+3,___fldiv@a+3
  3667  0119D4  0E00               	movlw	0
  3668  0119D6  0100               	movlb	0	; () banked
  3669  0119D8  6F6E               	movwf	___fldiv@b& (0+255),b
  3670  0119DA  0E00               	movlw	0
  3671  0119DC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3672  0119DE  0E6C               	movlw	108
  3673  0119E0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3674  0119E2  0E42               	movlw	66
  3675  0119E4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3676  0119E6  ECE1  F091         	call	___fldiv	;wreg free
  3677  0119EA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3678  0119EE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3679  0119F2  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3680  0119F6  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3681  0119FA  ECD7  F0A7         	call	___fltol	;wreg free
  3682  0119FE  C0B2  F0E4         	movff	?___fltol,_IRValue
  3683  011A02  C0B3  F0E5         	movff	?___fltol+1,_IRValue+1
  3684                           
  3685                           ;main.c: 312: TimerX--;
  3686  011A06  0649               	decf	_TimerX,f,c
  3687  011A08  A0D8               	btfss	status,0,c
  3688  011A0A  064A               	decf	_TimerX+1,f,c
  3689  011A0C                     l2381:
  3690  011A0C                     l18390:
  3691  011A0C  BE4A               	btfsc	_TimerX+1,7,c
  3692  011A0E  D005               	goto	u16730
  3693  011A10  504A               	movf	_TimerX+1,w,c
  3694  011A12  E1AC               	bnz	l18372
  3695  011A14  0449               	decf	_TimerX,w,c
  3696  011A16  B0D8               	btfsc	status,0,c
  3697  011A18  D7A9               	goto	l2382
  3698  011A1A                     u16730:
  3699                           
  3700                           ;main.c: 313: }
  3701                           ;main.c: 314: }
  3702                           ;main.c: 315: stepsToMinDegrees = Stepstomin * 0.67;
  3703  011A1A  C0E6  F060         	movff	_Stepstomin,___xxtofl@val
  3704  011A1E  C0E7  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3705  011A22  0100               	movlb	0	; () banked
  3706  011A24  0E00               	movlw	0
  3707  011A26  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3708  011A28  0EFF               	movlw	-1
  3709  011A2A  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3710  011A2C  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3711  011A2E  0E01               	movlw	1
  3712  011A30  ECA7  F09C         	call	___xxtofl
  3713  011A34  C060  F087         	movff	?___xxtofl,___flmul@b
  3714  011A38  C061  F088         	movff	?___xxtofl+1,___flmul@b+1
  3715  011A3C  C062  F089         	movff	?___xxtofl+2,___flmul@b+2
  3716  011A40  C063  F08A         	movff	?___xxtofl+3,___flmul@b+3
  3717  011A44  0E1F               	movlw	31
  3718  011A46  0100               	movlb	0	; () banked
  3719  011A48  6F8B               	movwf	___flmul@a& (0+255),b
  3720  011A4A  0E85               	movlw	133
  3721  011A4C  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3722  011A4E  0E2B               	movlw	43
  3723  011A50  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3724  011A52  0E3F               	movlw	63
  3725  011A54  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3726  011A56  EC59  F089         	call	___flmul	;wreg free
  3727  011A5A  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3728  011A5E  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3729  011A62  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3730  011A66  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3731                           
  3732                           ;main.c: 317: if (MXK_SwitchTo(eMXK_HMI)) {
  3733  011A6A  0E01               	movlw	1
  3734  011A6C  EC02  F0BC         	call	_MXK_SwitchTo
  3735  011A70  0900               	iorlw	0
  3736  011A72  B4D8               	btfsc	status,2,c
  3737  011A74  D031               	goto	l2387
  3738                           
  3739                           ;main.c: 318: printf("%c", (char)35);
  3740  011A76  0EFB               	movlw	low STR_1
  3741  011A78  0100               	movlb	0	; () banked
  3742  011A7A  6FC9               	movwf	printf@f& (0+255),b
  3743  011A7C  0EFF               	movlw	high STR_1
  3744  011A7E  0100               	movlb	0	; () banked
  3745  011A80  6FCA               	movwf	(printf@f+1)& (0+255),b
  3746  011A82  0E00               	movlw	0
  3747  011A84  0100               	movlb	0	; () banked
  3748  011A86  6FCC               	movwf	(?_printf+3)& (0+255),b
  3749  011A88  0E23               	movlw	35
  3750  011A8A  6FCB               	movwf	(?_printf+2)& (0+255),b
  3751  011A8C  EC00  F080         	call	_printf	;wreg free
  3752                           
  3753                           ;main.c: 319: printf("Closest Wall:%u\nClosest Angle:%f\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, stepsToMinDegrees, iRBumpLeft, iRBumpRight);
  3754  011A90  0E59               	movlw	low STR_8
  3755  011A92  0100               	movlb	0	; () banked
  3756  011A94  6FC9               	movwf	printf@f& (0+255),b
  3757  011A96  0EFF               	movlw	high STR_8
  3758  011A98  0100               	movlb	0	; () banked
  3759  011A9A  6FCA               	movwf	(printf@f+1)& (0+255),b
  3760  011A9C  C04B  F0CB         	movff	_MinDist,?_printf+2
  3761  011AA0  C04C  F0CC         	movff	_MinDist+1,?_printf+3
  3762  011AA4  C300  F0CD         	movff	_stepsToMinDegrees,?_printf+4
  3763  011AA8  C301  F0CE         	movff	_stepsToMinDegrees+1,?_printf+5
  3764  011AAC  C302  F0CF         	movff	_stepsToMinDegrees+2,?_printf+6
  3765  011AB0  C303  F0D0         	movff	_stepsToMinDegrees+3,?_printf+7
  3766  011AB4  C0EE  F0D1         	movff	_iRBumpLeft,?_printf+8
  3767  011AB8  0100               	movlb	0	; () banked
  3768  011ABA  6BD2               	clrf	(?_printf+9)& (0+255),b
  3769  011ABC  C0EF  F0D3         	movff	_iRBumpRight,?_printf+10
  3770  011AC0  0100               	movlb	0	; () banked
  3771  011AC2  6BD4               	clrf	(?_printf+11)& (0+255),b
  3772  011AC4  EC00  F080         	call	_printf	;wreg free
  3773                           
  3774                           ;main.c: 320: Console_Render();
  3775  011AC8  ECA3  F09A         	call	_Console_Render	;wreg free
  3776                           
  3777                           ;main.c: 321: if (MXK_Release())
  3778  011ACC  EC47  F0BF         	call	_MXK_Release	;wreg free
  3779  011AD0  0900               	iorlw	0
  3780  011AD2  A4D8               	btfss	status,2,c
  3781                           
  3782                           ;main.c: 322: MXK_Dequeue();
  3783  011AD4  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  3784  011AD8                     l2387:
  3785  011AD8  BE2A               	btfsc	_StepRotate+1,7,c
  3786  011ADA  D005               	goto	u16760
  3787  011ADC  502A               	movf	_StepRotate+1,w,c
  3788  011ADE  E102               	bnz	u16761
  3789  011AE0  0429               	decf	_StepRotate,w,c
  3790  011AE2  B0D8               	btfsc	status,0,c
  3791  011AE4                     u16761:
  3792  011AE4  D6AC               	goto	l2374
  3793  011AE6                     u16760:
  3794                           
  3795                           ;main.c: 323: }
  3796                           ;main.c: 324: }
  3797                           ;main.c: 325: stepsToMinDegrees = Stepstomin * 0.75;
  3798  011AE6  C0E6  F060         	movff	_Stepstomin,___xxtofl@val
  3799  011AEA  C0E7  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3800  011AEE  0100               	movlb	0	; () banked
  3801  011AF0  0E00               	movlw	0
  3802  011AF2  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3803  011AF4  0EFF               	movlw	-1
  3804  011AF6  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3805  011AF8  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3806  011AFA  0E01               	movlw	1
  3807  011AFC  ECA7  F09C         	call	___xxtofl
  3808  011B00  C060  F087         	movff	?___xxtofl,___flmul@b
  3809  011B04  C061  F088         	movff	?___xxtofl+1,___flmul@b+1
  3810  011B08  C062  F089         	movff	?___xxtofl+2,___flmul@b+2
  3811  011B0C  C063  F08A         	movff	?___xxtofl+3,___flmul@b+3
  3812  011B10  0E00               	movlw	0
  3813  011B12  0100               	movlb	0	; () banked
  3814  011B14  6F8B               	movwf	___flmul@a& (0+255),b
  3815  011B16  0E00               	movlw	0
  3816  011B18  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3817  011B1A  0E40               	movlw	64
  3818  011B1C  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3819  011B1E  0E3F               	movlw	63
  3820  011B20  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3821  011B22  EC59  F089         	call	___flmul	;wreg free
  3822  011B26  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3823  011B2A  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3824  011B2E  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3825  011B32  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3826                           
  3827                           ;main.c: 326: Stepstomin = (int) stepsToMinDegrees;
  3828  011B36  C300  F0B2         	movff	_stepsToMinDegrees,___fltol@f1
  3829  011B3A  C301  F0B3         	movff	_stepsToMinDegrees+1,___fltol@f1+1
  3830  011B3E  C302  F0B4         	movff	_stepsToMinDegrees+2,___fltol@f1+2
  3831  011B42  C303  F0B5         	movff	_stepsToMinDegrees+3,___fltol@f1+3
  3832  011B46  ECD7  F0A7         	call	___fltol	;wreg free
  3833  011B4A  C0B2  F0E6         	movff	?___fltol,_Stepstomin
  3834  011B4E  C0B3  F0E7         	movff	?___fltol+1,_Stepstomin+1
  3835                           
  3836                           ;main.c: 327: irobot_rotate(0, Stepstomin - 67, 200);
  3837  011B52  0EBD               	movlw	189
  3838  011B54  0100               	movlb	0	; () banked
  3839  011B56  25E6               	addwf	_Stepstomin& (0+255),w,b
  3840  011B58  0100               	movlb	0	; () banked
  3841  011B5A  6F7D               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3842  011B5C  0EFF               	movlw	255
  3843  011B5E  0100               	movlb	0	; () banked
  3844  011B60  21E7               	addwfc	(_Stepstomin+1)& (0+255),w,b
  3845  011B62  0100               	movlb	0	; () banked
  3846  011B64  6F7E               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3847  011B66  0E00               	movlw	0
  3848  011B68  0100               	movlb	0	; () banked
  3849  011B6A  6F80               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3850  011B6C  0EC8               	movlw	200
  3851  011B6E  6F7F               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3852  011B70  0E00               	movlw	0
  3853  011B72  ECCA  F0AE         	call	_irobot_rotate
  3854                           
  3855                           ;main.c: 328: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3856  011B76  D009               	goto	l2389
  3857  011B78                     
  3858                           ;main.c: 329: irobot_move_straight(200);
  3859  011B78  0E00               	movlw	0
  3860  011B7A  0100               	movlb	0	; () banked
  3861  011B7C  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3862  011B7E  0EC8               	movlw	200
  3863  011B80  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3864  011B82  EC70  F0BF         	call	_irobot_move_straight	;wreg free
  3865                           
  3866                           ;main.c: 330: update_bump_and_cliff();
  3867  011B86  ECDE  F0BC         	call	_update_bump_and_cliff	;wreg free
  3868  011B8A                     l2389:
  3869  011B8A  0100               	movlb	0	; () banked
  3870  011B8C  51EE               	movf	_iRBumpLeft& (0+255),w,b
  3871  011B8E  A4D8               	btfss	status,2,c
  3872  011B90  D00A               	goto	u16800
  3873                           
  3874                           ; BSR set to: 0
  3875  011B92  0100               	movlb	0	; () banked
  3876  011B94  51EF               	movf	_iRBumpRight& (0+255),w,b
  3877  011B96  A4D8               	btfss	status,2,c
  3878  011B98  D006               	goto	u16800
  3879                           
  3880                           ; BSR set to: 0
  3881  011B9A  5036               	movf	_iRDropRight,w,c
  3882  011B9C  A4D8               	btfss	status,2,c
  3883  011B9E  D003               	goto	u16800
  3884                           
  3885                           ; BSR set to: 0
  3886  011BA0  5035               	movf	_iRDropLeft,w,c
  3887  011BA2  B4D8               	btfsc	status,2,c
  3888  011BA4  D7E9               	goto	l2390
  3889  011BA6                     u16800:
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;main.c: 331: }
  3893                           ;main.c: 332: irobot_song_play(0);
  3894                           
  3895                           ; BSR set to: 0
  3896                           
  3897                           ; BSR set to: 0
  3898  011BA6  0E00               	movlw	0
  3899  011BA8  ECD0  F0BF         	call	_irobot_song_play
  3900                           
  3901                           ;main.c: 333: irobot_stop_motion(0);
  3902  011BAC  0E00               	movlw	0
  3903  011BAE  EC77  F0BB         	call	_irobot_stop_motion
  3904  011BB2  0012               	return		;funcret
  3905  011BB4                     __end_of_mode4:
  3906                           	opt stack 0
  3907                           tblptru	equ	0xFF8
  3908                           tblptrh	equ	0xFF7
  3909                           tblptrl	equ	0xFF6
  3910                           tablat	equ	0xFF5
  3911                           postinc0	equ	0xFEE
  3912                           wreg	equ	0xFE8
  3913                           postdec1	equ	0xFE5
  3914                           fsr1h	equ	0xFE2
  3915                           fsr1l	equ	0xFE1
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _mode3 *****************
  3919 ;; Defined at:
  3920 ;;		line 255 in file "main.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;Total ram usage:        0 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:   13
  3941 ;; This function calls:
  3942 ;;		_move_and_rotate
  3943 ;; This function is called by:
  3944 ;;		_main
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text2
  3949  017FC8                     __ptext2:
  3950                           	opt stack 0
  3951  017FC8                     _mode3:
  3952                           	opt stack 17
  3953                           
  3954                           ;main.c: 256: move_and_rotate();
  3955                           
  3956                           ;incstack = 0
  3957  017FC8  ECD6  F0B4         	call	_move_and_rotate	;wreg free
  3958                           
  3959                           ;main.c: 257: move_and_rotate();
  3960  017FCC  ECD6  F0B4         	call	_move_and_rotate	;wreg free
  3961                           
  3962                           ;main.c: 258: move_and_rotate();
  3963  017FD0  ECD6  F0B4         	call	_move_and_rotate	;wreg free
  3964                           
  3965                           ;main.c: 259: move_and_rotate();
  3966  017FD4  ECD6  F0B4         	call	_move_and_rotate	;wreg free
  3967  017FD8  0012               	return		;funcret
  3968  017FDA                     __end_of_mode3:
  3969                           	opt stack 0
  3970                           tblptru	equ	0xFF8
  3971                           tblptrh	equ	0xFF7
  3972                           tblptrl	equ	0xFF6
  3973                           tablat	equ	0xFF5
  3974                           postinc0	equ	0xFEE
  3975                           wreg	equ	0xFE8
  3976                           postdec1	equ	0xFE5
  3977                           fsr1h	equ	0xFE2
  3978                           fsr1l	equ	0xFE1
  3979                           status	equ	0xFD8
  3980                           
  3981 ;; *************** function _move_and_rotate *****************
  3982 ;; Defined at:
  3983 ;;		line 120 in file "main.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;		None
  3986 ;; Auto vars:     Size  Location     Type
  3987 ;;		None
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  1    wreg      void 
  3990 ;; Registers used:
  3991 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;Total ram usage:        0 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:   12
  4004 ;; This function calls:
  4005 ;;		_delay_ms
  4006 ;;		_irobot_move_straight
  4007 ;;		_irobot_rotate
  4008 ;;		_irobot_stop_motion
  4009 ;;		_update_distance
  4010 ;; This function is called by:
  4011 ;;		_mode3
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text3
  4016  0169AC                     __ptext3:
  4017                           	opt stack 0
  4018  0169AC                     _move_and_rotate:
  4019                           	opt stack 17
  4020                           
  4021                           ;main.c: 121: dist = 0;
  4022                           
  4023                           ;incstack = 0
  4024  0169AC  0E00               	movlw	0
  4025  0169AE  0103               	movlb	3	; () banked
  4026  0169B0  6F27               	movwf	(_dist+1)& (0+255),b
  4027  0169B2  0E00               	movlw	0
  4028  0169B4  6F26               	movwf	_dist& (0+255),b
  4029                           
  4030                           ; BSR set to: 3
  4031                           ;main.c: 122: irobot_move_straight(100);
  4032  0169B6  0E00               	movlw	0
  4033  0169B8  0100               	movlb	0	; () banked
  4034  0169BA  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4035  0169BC  0E64               	movlw	100
  4036  0169BE  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4037  0169C0  EC70  F0BF         	call	_irobot_move_straight	;wreg free
  4038                           
  4039                           ;main.c: 123: while (dist < 1000) {
  4040  0169C4  D00A               	goto	l2318
  4041  0169C6                     
  4042                           ;main.c: 124: update_distance();
  4043  0169C6  ECED  F0BF         	call	_update_distance	;wreg free
  4044                           
  4045                           ;main.c: 125: dist += iRDistance;
  4046  0169CA  0103               	movlb	3	; () banked
  4047  0169CC  5130               	movf	_iRDistance& (0+255),w,b
  4048  0169CE  0103               	movlb	3	; () banked
  4049  0169D0  2726               	addwf	_dist& (0+255),f,b
  4050  0169D2  0103               	movlb	3	; () banked
  4051  0169D4  5131               	movf	(_iRDistance+1)& (0+255),w,b
  4052  0169D6  0103               	movlb	3	; () banked
  4053  0169D8  2327               	addwfc	(_dist+1)& (0+255),f,b
  4054  0169DA                     l2318:
  4055                           
  4056                           ; BSR set to: 3
  4057  0169DA  0103               	movlb	3	; () banked
  4058  0169DC  BF27               	btfsc	(_dist+1)& (0+255),7,b
  4059  0169DE  D7F3               	goto	l2319
  4060  0169E0  0EE8               	movlw	232
  4061  0169E2  0103               	movlb	3	; () banked
  4062  0169E4  5D26               	subwf	_dist& (0+255),w,b
  4063  0169E6  0E03               	movlw	3
  4064  0169E8  0103               	movlb	3	; () banked
  4065  0169EA  5927               	subwfb	(_dist+1)& (0+255),w,b
  4066  0169EC  A0D8               	btfss	status,0,c
  4067  0169EE  D7EB               	goto	l2319
  4068                           
  4069                           ; BSR set to: 3
  4070                           ;main.c: 126: }
  4071                           ;main.c: 127: irobot_stop_motion(0);
  4072                           
  4073                           ; BSR set to: 3
  4074  0169F0  0E00               	movlw	0
  4075  0169F2  EC77  F0BB         	call	_irobot_stop_motion
  4076                           
  4077                           ;main.c: 128: delay_ms(100);
  4078  0169F6  0E00               	movlw	0
  4079  0169F8  0100               	movlb	0	; () banked
  4080  0169FA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  4081  0169FC  0E64               	movlw	100
  4082  0169FE  6F60               	movwf	delay_ms@ms& (0+255),b
  4083  016A00  EC0C  F0B8         	call	_delay_ms	;wreg free
  4084                           
  4085                           ;main.c: 129: irobot_rotate(0, 67, 200);
  4086  016A04  0E00               	movlw	0
  4087  016A06  0100               	movlb	0	; () banked
  4088  016A08  6F7E               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4089  016A0A  0E43               	movlw	67
  4090  016A0C  6F7D               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4091  016A0E  0E00               	movlw	0
  4092  016A10  0100               	movlb	0	; () banked
  4093  016A12  6F80               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4094  016A14  0EC8               	movlw	200
  4095  016A16  6F7F               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4096  016A18  0E00               	movlw	0
  4097  016A1A  ECCA  F0AE         	call	_irobot_rotate
  4098                           
  4099                           ;main.c: 130: delay_ms(100);
  4100  016A1E  0E00               	movlw	0
  4101  016A20  0100               	movlb	0	; () banked
  4102  016A22  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  4103  016A24  0E64               	movlw	100
  4104  016A26  6F60               	movwf	delay_ms@ms& (0+255),b
  4105  016A28  EC0C  F0B8         	call	_delay_ms	;wreg free
  4106  016A2C  0012               	return		;funcret
  4107  016A2E                     __end_of_move_and_rotate:
  4108                           	opt stack 0
  4109                           tblptru	equ	0xFF8
  4110                           tblptrh	equ	0xFF7
  4111                           tblptrl	equ	0xFF6
  4112                           tablat	equ	0xFF5
  4113                           postinc0	equ	0xFEE
  4114                           wreg	equ	0xFE8
  4115                           postdec1	equ	0xFE5
  4116                           fsr1h	equ	0xFE2
  4117                           fsr1l	equ	0xFE1
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function _irobot_rotate *****************
  4121 ;; Defined at:
  4122 ;;		line 279 in file "Library/iRobotSerial.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  isScript        1    wreg     unsigned char 
  4125 ;;  rotateAngle     2   29[BANK0 ] short 
  4126 ;;  rotateSpeed     2   31[BANK0 ] short 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  isScript        1   34[BANK0 ] unsigned char 
  4129 ;;  rotateDirect    2   37[BANK0 ] short 
  4130 ;;  angleTotal      2   35[BANK0 ] short 
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      void 
  4133 ;; Registers used:
  4134 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4140 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4143 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4144 ;;Total ram usage:       10 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:   11
  4147 ;; This function calls:
  4148 ;;		_irobot_move
  4149 ;;		_irobot_stop_motion
  4150 ;;		_update_angle
  4151 ;; This function is called by:
  4152 ;;		_move_and_rotate
  4153 ;;		_mode4
  4154 ;;		_irobot_rotate_to
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text4
  4159  015D94                     __ptext4:
  4160                           	opt stack 0
  4161  015D94                     _irobot_rotate:
  4162                           	opt stack 18
  4163                           
  4164                           ;incstack = 0
  4165                           ;irobot_rotate@isScript stored from wreg
  4166  015D94  0100               	movlb	0	; () banked
  4167  015D96  6F82               	movwf	irobot_rotate@isScript& (0+255),b
  4168                           
  4169                           ;iRobotSerial.c: 280: INT16 angleTotal = 0;
  4170  015D98  0E00               	movlw	0
  4171  015D9A  0100               	movlb	0	; () banked
  4172  015D9C  6F84               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  4173  015D9E  0E00               	movlw	0
  4174  015DA0  6F83               	movwf	irobot_rotate@angleTotal& (0+255),b
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;iRobotSerial.c: 281: INT16 rotateDirection;
  4178                           ;iRobotSerial.c: 283: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateDire
      +                          ction = iR_CONST_CW);
  4179  015DA2  0100               	movlb	0	; () banked
  4180  015DA4  BF7E               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  4181  015DA6  D00D               	goto	l2156
  4182  015DA8  0100               	movlb	0	; () banked
  4183  015DAA  517E               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4184  015DAC  E104               	bnz	u12890
  4185  015DAE  0100               	movlb	0	; () banked
  4186  015DB0  057D               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  4187  015DB2  A0D8               	btfss	status,0,c
  4188  015DB4  D006               	goto	l2156
  4189  015DB6                     u12890:
  4190                           
  4191                           ; BSR set to: 0
  4192  015DB6  0E00               	movlw	0
  4193  015DB8  0100               	movlb	0	; () banked
  4194  015DBA  6F86               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4195  015DBC  0E01               	movlw	1
  4196  015DBE  6F85               	movwf	irobot_rotate@rotateDirection& (0+255),b
  4197  015DC0  D003               	goto	l2158
  4198  015DC2                     l2156:
  4199                           
  4200                           ; BSR set to: 0
  4201  015DC2  0100               	movlb	0	; () banked
  4202  015DC4  6985               	setf	irobot_rotate@rotateDirection& (0+255),b
  4203  015DC6  6986               	setf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4204  015DC8                     l2158:
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;iRobotSerial.c: 284: if (isScript) {
  4208                           
  4209                           ; BSR set to: 0
  4210  015DC8  0100               	movlb	0	; () banked
  4211  015DCA  5182               	movf	irobot_rotate@isScript& (0+255),w,b
  4212  015DCC  0100               	movlb	0	; () banked
  4213  015DCE  B4D8               	btfsc	status,2,c
  4214  015DD0  D00C               	goto	l2159
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;iRobotSerial.c: 285: irobot_move(1, rotateSpeed, rotateDirection);
  4218  015DD2  C07F  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4219  015DD6  C080  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4220  015DDA  C085  F072         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4221  015DDE  C086  F073         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4222  015DE2  0E01               	movlw	1
  4223  015DE4  EC72  F0AE         	call	_irobot_move
  4224                           
  4225                           ;iRobotSerial.c: 286: }
  4226  015DE8  0012               	return	
  4227  015DEA                     l2159:
  4228                           
  4229                           ;iRobotSerial.c: 287: else {
  4230                           ;iRobotSerial.c: 288: irobot_move(0, rotateSpeed, rotateDirection);
  4231  015DEA  C07F  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4232  015DEE  C080  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4233  015DF2  C085  F072         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4234  015DF6  C086  F073         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4235  015DFA  0E00               	movlw	0
  4236  015DFC  EC72  F0AE         	call	_irobot_move
  4237                           
  4238                           ;iRobotSerial.c: 289: while (angleTotal < rotateAngle) {
  4239  015E00  D00A               	goto	l2161
  4240  015E02                     
  4241                           ;iRobotSerial.c: 290: update_angle();
  4242  015E02  ECF6  F0BF         	call	_update_angle	;wreg free
  4243                           
  4244                           ;iRobotSerial.c: 291: angleTotal += iRAngle;
  4245  015E06  0103               	movlb	3	; () banked
  4246  015E08  512E               	movf	_iRAngle& (0+255),w,b
  4247  015E0A  0100               	movlb	0	; () banked
  4248  015E0C  2783               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4249  015E0E  0103               	movlb	3	; () banked
  4250  015E10  512F               	movf	(_iRAngle+1)& (0+255),w,b
  4251  015E12  0100               	movlb	0	; () banked
  4252  015E14  2384               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4253  015E16                     l2161:
  4254                           
  4255                           ; BSR set to: 0
  4256  015E16  0100               	movlb	0	; () banked
  4257  015E18  517D               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4258  015E1A  0100               	movlb	0	; () banked
  4259  015E1C  5D83               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4260  015E1E  0100               	movlb	0	; () banked
  4261  015E20  5184               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4262  015E22  0A80               	xorlw	128
  4263  015E24  0100               	movlb	0	; () banked
  4264  015E26  6F81               	movwf	??_irobot_rotate& (0+255),b
  4265  015E28  0100               	movlb	0	; () banked
  4266  015E2A  517E               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4267  015E2C  0A80               	xorlw	128
  4268  015E2E  0100               	movlb	0	; () banked
  4269  015E30  5981               	subwfb	??_irobot_rotate& (0+255),w,b
  4270  015E32  A0D8               	btfss	status,0,c
  4271  015E34  D7E6               	goto	l2162
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;iRobotSerial.c: 292: }
  4275                           ;iRobotSerial.c: 293: irobot_stop_motion(0);
  4276                           
  4277                           ; BSR set to: 0
  4278  015E36  0E00               	movlw	0
  4279  015E38  EC77  F0BB         	call	_irobot_stop_motion
  4280  015E3C  0012               	return	
  4281  015E3E                     __end_of_irobot_rotate:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           postinc0	equ	0xFEE
  4288                           wreg	equ	0xFE8
  4289                           postdec1	equ	0xFE5
  4290                           fsr1h	equ	0xFE2
  4291                           fsr1l	equ	0xFE1
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function _mode2 *****************
  4295 ;; Defined at:
  4296 ;;		line 218 in file "main.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;		None
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  dist            2  119[BANK0 ] int 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      void 
  4303 ;; Registers used:
  4304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;Total ram usage:        2 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:   16
  4317 ;; This function calls:
  4318 ;;		_Console_Render
  4319 ;;		_HMI_Poll
  4320 ;;		_MXK_Dequeue
  4321 ;;		_MXK_Release
  4322 ;;		_MXK_SwitchTo
  4323 ;;		_irobot_move_straight
  4324 ;;		_irobot_song_play
  4325 ;;		_irobot_stop_motion
  4326 ;;		_printf
  4327 ;;		_update_angle
  4328 ;;		_update_bump_and_cliff
  4329 ;;		_update_distance
  4330 ;; This function is called by:
  4331 ;;		_main
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text5
  4336  014D58                     __ptext5:
  4337                           	opt stack 0
  4338  014D58                     _mode2:
  4339                           	opt stack 14
  4340                           
  4341                           ;main.c: 219: update_bump_and_cliff();
  4342                           
  4343                           ;incstack = 0
  4344  014D58  ECDE  F0BC         	call	_update_bump_and_cliff	;wreg free
  4345                           
  4346                           ;main.c: 220: update_distance();
  4347  014D5C  ECED  F0BF         	call	_update_distance	;wreg free
  4348                           
  4349                           ;main.c: 221: update_angle();
  4350  014D60  ECF6  F0BF         	call	_update_angle	;wreg free
  4351                           
  4352                           ;main.c: 223: angleTotal += iRAngle;
  4353  014D64  0103               	movlb	3	; () banked
  4354  014D66  512E               	movf	_iRAngle& (0+255),w,b
  4355  014D68  262B               	addwf	_angleTotal,f,c
  4356  014D6A  0103               	movlb	3	; () banked
  4357  014D6C  512F               	movf	(_iRAngle+1)& (0+255),w,b
  4358  014D6E  222C               	addwfc	_angleTotal+1,f,c
  4359                           
  4360                           ; BSR set to: 3
  4361                           ;main.c: 225: if (iRBumpLeft || iRBumpRight) {
  4362  014D70  0100               	movlb	0	; () banked
  4363  014D72  51EE               	movf	_iRBumpLeft& (0+255),w,b
  4364  014D74  A4D8               	btfss	status,2,c
  4365  014D76  D004               	goto	u16570
  4366                           
  4367                           ; BSR set to: 0
  4368  014D78  0100               	movlb	0	; () banked
  4369  014D7A  51EF               	movf	_iRBumpRight& (0+255),w,b
  4370  014D7C  B4D8               	btfsc	status,2,c
  4371  014D7E  D006               	goto	l2354
  4372  014D80                     u16570:
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;main.c: 226: irobot_song_play(0);
  4376                           
  4377                           ; BSR set to: 0
  4378  014D80  0E00               	movlw	0
  4379  014D82  ECD0  F0BF         	call	_irobot_song_play
  4380                           
  4381                           ;main.c: 227: irobot_stop_motion(0);
  4382  014D86  0E00               	movlw	0
  4383  014D88  EC77  F0BB         	call	_irobot_stop_motion
  4384  014D8C                     l2354:
  4385                           
  4386                           ;main.c: 228: }
  4387                           ;main.c: 229: if (angleTotal > 90) {
  4388  014D8C  BE2C               	btfsc	_angleTotal+1,7,c
  4389  014D8E  D009               	goto	l2357
  4390  014D90  502C               	movf	_angleTotal+1,w,c
  4391  014D92  E104               	bnz	u16580
  4392  014D94  0E5B               	movlw	91
  4393  014D96  5C2B               	subwf	_angleTotal,w,c
  4394  014D98  A0D8               	btfss	status,0,c
  4395  014D9A  D003               	goto	l2357
  4396  014D9C                     u16580:
  4397                           
  4398                           ;main.c: 230: irobot_stop_motion(0);
  4399  014D9C  0E00               	movlw	0
  4400  014D9E  EC77  F0BB         	call	_irobot_stop_motion
  4401  014DA2                     l2357:
  4402                           
  4403                           ;main.c: 231: }
  4404                           ;main.c: 232: HMI_Poll();
  4405  014DA2  ECF9  F0B6         	call	_HMI_Poll	;wreg free
  4406                           
  4407                           ;main.c: 233: if (MXK_SwitchTo(eMXK_HMI)) {
  4408  014DA6  0E01               	movlw	1
  4409  014DA8  EC02  F0BC         	call	_MXK_SwitchTo
  4410  014DAC  0900               	iorlw	0
  4411  014DAE  B4D8               	btfsc	status,2,c
  4412  014DB0  0012               	return	
  4413                           
  4414                           ;main.c: 234: printf("%c", (char)35);
  4415  014DB2  0EFB               	movlw	low STR_1
  4416  014DB4  0100               	movlb	0	; () banked
  4417  014DB6  6FC9               	movwf	printf@f& (0+255),b
  4418  014DB8  0EFF               	movlw	high STR_1
  4419  014DBA  0100               	movlb	0	; () banked
  4420  014DBC  6FCA               	movwf	(printf@f+1)& (0+255),b
  4421  014DBE  0E00               	movlw	0
  4422  014DC0  0100               	movlb	0	; () banked
  4423  014DC2  6FCC               	movwf	(?_printf+3)& (0+255),b
  4424  014DC4  0E23               	movlw	35
  4425  014DC6  6FCB               	movwf	(?_printf+2)& (0+255),b
  4426  014DC8  EC00  F080         	call	_printf	;wreg free
  4427                           
  4428                           ;main.c: 235: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4429  014DCC  0E95               	movlw	low STR_2
  4430  014DCE  0100               	movlb	0	; () banked
  4431  014DD0  6FC9               	movwf	printf@f& (0+255),b
  4432  014DD2  0EFF               	movlw	high STR_2
  4433  014DD4  0100               	movlb	0	; () banked
  4434  014DD6  6FCA               	movwf	(printf@f+1)& (0+255),b
  4435  014DD8  C32C  F0CB         	movff	_distanceTotal,?_printf+2
  4436  014DDC  C32D  F0CC         	movff	_distanceTotal+1,?_printf+3
  4437  014DE0  C0EE  F0CD         	movff	_iRBumpLeft,?_printf+4
  4438  014DE4  0100               	movlb	0	; () banked
  4439  014DE6  6BCE               	clrf	(?_printf+5)& (0+255),b
  4440  014DE8  C0EF  F0CF         	movff	_iRBumpRight,?_printf+6
  4441  014DEC  0100               	movlb	0	; () banked
  4442  014DEE  6BD0               	clrf	(?_printf+7)& (0+255),b
  4443  014DF0  EC00  F080         	call	_printf	;wreg free
  4444                           
  4445                           ;main.c: 236: Console_Render();
  4446  014DF4  ECA3  F09A         	call	_Console_Render	;wreg free
  4447                           
  4448                           ;main.c: 238: int dist = 0;
  4449  014DF8  0E00               	movlw	0
  4450  014DFA  0100               	movlb	0	; () banked
  4451  014DFC  6FD8               	movwf	(mode2@dist+1)& (0+255),b
  4452  014DFE  0E00               	movlw	0
  4453  014E00  6FD7               	movwf	mode2@dist& (0+255),b
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;main.c: 239: irobot_move_straight(200);
  4457  014E02  0E00               	movlw	0
  4458  014E04  0100               	movlb	0	; () banked
  4459  014E06  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4460  014E08  0EC8               	movlw	200
  4461  014E0A  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4462  014E0C  EC70  F0BF         	call	_irobot_move_straight	;wreg free
  4463                           
  4464                           ;main.c: 240: while (dist < 5000) {
  4465  014E10  D025               	goto	l2359
  4466  014E12                     
  4467                           ;main.c: 241: update_distance();
  4468  014E12  ECED  F0BF         	call	_update_distance	;wreg free
  4469                           
  4470                           ;main.c: 242: dist += iRDistance;
  4471  014E16  0103               	movlb	3	; () banked
  4472  014E18  5130               	movf	_iRDistance& (0+255),w,b
  4473  014E1A  0100               	movlb	0	; () banked
  4474  014E1C  27D7               	addwf	mode2@dist& (0+255),f,b
  4475  014E1E  0103               	movlb	3	; () banked
  4476  014E20  5131               	movf	(_iRDistance+1)& (0+255),w,b
  4477  014E22  0100               	movlb	0	; () banked
  4478  014E24  23D8               	addwfc	(mode2@dist+1)& (0+255),f,b
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;main.c: 243: printf("%c", (char)35);
  4482  014E26  0EFB               	movlw	low STR_1
  4483  014E28  0100               	movlb	0	; () banked
  4484  014E2A  6FC9               	movwf	printf@f& (0+255),b
  4485  014E2C  0EFF               	movlw	high STR_1
  4486  014E2E  0100               	movlb	0	; () banked
  4487  014E30  6FCA               	movwf	(printf@f+1)& (0+255),b
  4488  014E32  0E00               	movlw	0
  4489  014E34  0100               	movlb	0	; () banked
  4490  014E36  6FCC               	movwf	(?_printf+3)& (0+255),b
  4491  014E38  0E23               	movlw	35
  4492  014E3A  6FCB               	movwf	(?_printf+2)& (0+255),b
  4493  014E3C  EC00  F080         	call	_printf	;wreg free
  4494                           
  4495                           ;main.c: 244: printf("Distance: %d\n", dist);
  4496  014E40  0EED               	movlw	low STR_6
  4497  014E42  0100               	movlb	0	; () banked
  4498  014E44  6FC9               	movwf	printf@f& (0+255),b
  4499  014E46  0EFF               	movlw	high STR_6
  4500  014E48  0100               	movlb	0	; () banked
  4501  014E4A  6FCA               	movwf	(printf@f+1)& (0+255),b
  4502  014E4C  C0D7  F0CB         	movff	mode2@dist,?_printf+2
  4503  014E50  C0D8  F0CC         	movff	mode2@dist+1,?_printf+3
  4504  014E54  EC00  F080         	call	_printf	;wreg free
  4505                           
  4506                           ;main.c: 245: Console_Render();
  4507  014E58  ECA3  F09A         	call	_Console_Render	;wreg free
  4508  014E5C                     l2359:
  4509  014E5C  0100               	movlb	0	; () banked
  4510  014E5E  BFD8               	btfsc	(mode2@dist+1)& (0+255),7,b
  4511  014E60  D7D8               	goto	l2360
  4512  014E62  0E88               	movlw	136
  4513  014E64  0100               	movlb	0	; () banked
  4514  014E66  5DD7               	subwf	mode2@dist& (0+255),w,b
  4515  014E68  0E13               	movlw	19
  4516  014E6A  0100               	movlb	0	; () banked
  4517  014E6C  59D8               	subwfb	(mode2@dist+1)& (0+255),w,b
  4518  014E6E  A0D8               	btfss	status,0,c
  4519  014E70  D7D0               	goto	l2360
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;main.c: 246: }
  4523                           ;main.c: 247: irobot_stop_motion(0);
  4524                           
  4525                           ; BSR set to: 0
  4526  014E72  0E00               	movlw	0
  4527  014E74  EC77  F0BB         	call	_irobot_stop_motion
  4528                           
  4529                           ;main.c: 249: if (MXK_Release())
  4530  014E78  EC47  F0BF         	call	_MXK_Release	;wreg free
  4531  014E7C  0900               	iorlw	0
  4532  014E7E  B4D8               	btfsc	status,2,c
  4533  014E80  0012               	return	
  4534                           
  4535                           ;main.c: 250: MXK_Dequeue();
  4536  014E82  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  4537  014E86  0012               	return	
  4538  014E88                     __end_of_mode2:
  4539                           	opt stack 0
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           postinc0	equ	0xFEE
  4545                           wreg	equ	0xFE8
  4546                           postdec1	equ	0xFE5
  4547                           fsr1h	equ	0xFE2
  4548                           fsr1l	equ	0xFE1
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function _irobot_move_straight *****************
  4552 ;; Defined at:
  4553 ;;		line 313 in file "Library/iRobotSerial.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  straightSpee    2   25[BANK0 ] short 
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;		None
  4558 ;; Return value:  Size  Location     Type
  4559 ;;                  1    wreg      void 
  4560 ;; Registers used:
  4561 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4567 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;Total ram usage:        2 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    9
  4574 ;; This function calls:
  4575 ;;		_irobot_move
  4576 ;; This function is called by:
  4577 ;;		_move_and_rotate
  4578 ;;		_mode2
  4579 ;;		_mode4
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text6
  4584  017EE0                     __ptext6:
  4585                           	opt stack 0
  4586  017EE0                     _irobot_move_straight:
  4587                           	opt stack 20
  4588                           
  4589                           ;iRobotSerial.c: 314: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4590                           
  4591                           ;incstack = 0
  4592  017EE0  C079  F070         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4593  017EE4  C07A  F071         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4594  017EE8  0E7F               	movlw	127
  4595  017EEA  0100               	movlb	0	; () banked
  4596  017EEC  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4597  017EEE  6972               	setf	irobot_move@moveTurnRadius& (0+255),b
  4598  017EF0  0E00               	movlw	0
  4599  017EF2  EC72  F0AE         	call	_irobot_move
  4600  017EF6  0012               	return		;funcret
  4601  017EF8                     __end_of_irobot_move_straight:
  4602                           	opt stack 0
  4603                           tblptru	equ	0xFF8
  4604                           tblptrh	equ	0xFF7
  4605                           tblptrl	equ	0xFF6
  4606                           tablat	equ	0xFF5
  4607                           postinc0	equ	0xFEE
  4608                           wreg	equ	0xFE8
  4609                           postdec1	equ	0xFE5
  4610                           fsr1h	equ	0xFE2
  4611                           fsr1l	equ	0xFE1
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _mode1 *****************
  4615 ;; Defined at:
  4616 ;;		line 134 in file "main.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  moveto          2  121[BANK0 ] int 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;Total ram usage:        8 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:   16
  4637 ;; This function calls:
  4638 ;;		_ADC_Start
  4639 ;;		_ADC_Voltage
  4640 ;;		_Console_Render
  4641 ;;		_HMI_Poll
  4642 ;;		_HMI_Render
  4643 ;;		_HMI_SetNumber
  4644 ;;		_MXK_Dequeue
  4645 ;;		_MXK_Release
  4646 ;;		_MXK_SwitchTo
  4647 ;;		_Motor_Move
  4648 ;;		_Motor_Speed
  4649 ;;		___fldiv
  4650 ;;		___fltol
  4651 ;;		_irobot_song_play
  4652 ;;		_irobot_stop_motion
  4653 ;;		_printf
  4654 ;;		_update_angle
  4655 ;;		_update_bump_and_cliff
  4656 ;;		_update_distance
  4657 ;; This function is called by:
  4658 ;;		_main
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text7
  4663  011FD2                     __ptext7:
  4664                           	opt stack 0
  4665  011FD2                     _mode1:
  4666                           	opt stack 14
  4667                           
  4668                           ;main.c: 135: update_bump_and_cliff();
  4669                           
  4670                           ;incstack = 0
  4671  011FD2  ECDE  F0BC         	call	_update_bump_and_cliff	;wreg free
  4672                           
  4673                           ;main.c: 136: update_distance();
  4674  011FD6  ECED  F0BF         	call	_update_distance	;wreg free
  4675                           
  4676                           ;main.c: 137: update_angle();
  4677  011FDA  ECF6  F0BF         	call	_update_angle	;wreg free
  4678                           
  4679                           ;main.c: 141: if (iRBumpLeft || iRBumpRight) {
  4680  011FDE  0100               	movlb	0	; () banked
  4681  011FE0  51EE               	movf	_iRBumpLeft& (0+255),w,b
  4682  011FE2  A4D8               	btfss	status,2,c
  4683  011FE4  D004               	goto	u16370
  4684                           
  4685                           ; BSR set to: 0
  4686  011FE6  0100               	movlb	0	; () banked
  4687  011FE8  51EF               	movf	_iRBumpRight& (0+255),w,b
  4688  011FEA  B4D8               	btfsc	status,2,c
  4689  011FEC  D006               	goto	l2324
  4690  011FEE                     u16370:
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;main.c: 142: irobot_song_play(0);
  4694                           
  4695                           ; BSR set to: 0
  4696  011FEE  0E00               	movlw	0
  4697  011FF0  ECD0  F0BF         	call	_irobot_song_play
  4698                           
  4699                           ;main.c: 143: irobot_stop_motion(0);
  4700  011FF4  0E00               	movlw	0
  4701  011FF6  EC77  F0BB         	call	_irobot_stop_motion
  4702  011FFA                     l2324:
  4703                           
  4704                           ;main.c: 144: }
  4705                           ;main.c: 145: if (angleTotal > 83) {
  4706  011FFA  BE2C               	btfsc	_angleTotal+1,7,c
  4707  011FFC  D009               	goto	l2327
  4708  011FFE  502C               	movf	_angleTotal+1,w,c
  4709  012000  E104               	bnz	u16380
  4710  012002  0E54               	movlw	84
  4711  012004  5C2B               	subwf	_angleTotal,w,c
  4712  012006  A0D8               	btfss	status,0,c
  4713  012008  D003               	goto	l2327
  4714  01200A                     u16380:
  4715                           
  4716                           ;main.c: 146: irobot_stop_motion(0);
  4717  01200A  0E00               	movlw	0
  4718  01200C  EC77  F0BB         	call	_irobot_stop_motion
  4719  012010                     l2327:
  4720                           
  4721                           ;main.c: 147: }
  4722                           ;main.c: 149: if (MXK_SwitchTo(eMXK_HMI)) {
  4723  012010  0E01               	movlw	1
  4724  012012  EC02  F0BC         	call	_MXK_SwitchTo
  4725  012016  0900               	iorlw	0
  4726  012018  B4D8               	btfsc	status,2,c
  4727  01201A  D029               	goto	l2329
  4728                           
  4729                           ;main.c: 150: printf("%c", (char)35);
  4730  01201C  0EFB               	movlw	low STR_1
  4731  01201E  0100               	movlb	0	; () banked
  4732  012020  6FC9               	movwf	printf@f& (0+255),b
  4733  012022  0EFF               	movlw	high STR_1
  4734  012024  0100               	movlb	0	; () banked
  4735  012026  6FCA               	movwf	(printf@f+1)& (0+255),b
  4736  012028  0E00               	movlw	0
  4737  01202A  0100               	movlb	0	; () banked
  4738  01202C  6FCC               	movwf	(?_printf+3)& (0+255),b
  4739  01202E  0E23               	movlw	35
  4740  012030  6FCB               	movwf	(?_printf+2)& (0+255),b
  4741  012032  EC00  F080         	call	_printf	;wreg free
  4742                           
  4743                           ;main.c: 151: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4744  012036  0E95               	movlw	low STR_2
  4745  012038  0100               	movlb	0	; () banked
  4746  01203A  6FC9               	movwf	printf@f& (0+255),b
  4747  01203C  0EFF               	movlw	high STR_2
  4748  01203E  0100               	movlb	0	; () banked
  4749  012040  6FCA               	movwf	(printf@f+1)& (0+255),b
  4750  012042  C32C  F0CB         	movff	_distanceTotal,?_printf+2
  4751  012046  C32D  F0CC         	movff	_distanceTotal+1,?_printf+3
  4752  01204A  C0EE  F0CD         	movff	_iRBumpLeft,?_printf+4
  4753  01204E  0100               	movlb	0	; () banked
  4754  012050  6BCE               	clrf	(?_printf+5)& (0+255),b
  4755  012052  C0EF  F0CF         	movff	_iRBumpRight,?_printf+6
  4756  012056  0100               	movlb	0	; () banked
  4757  012058  6BD0               	clrf	(?_printf+7)& (0+255),b
  4758  01205A  EC00  F080         	call	_printf	;wreg free
  4759                           
  4760                           ;main.c: 152: Console_Render();
  4761  01205E  ECA3  F09A         	call	_Console_Render	;wreg free
  4762                           
  4763                           ;main.c: 153: if (MXK_Release())
  4764  012062  EC47  F0BF         	call	_MXK_Release	;wreg free
  4765  012066  0900               	iorlw	0
  4766  012068  A4D8               	btfss	status,2,c
  4767                           
  4768                           ;main.c: 154: MXK_Dequeue();
  4769  01206A  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  4770  01206E                     l2329:
  4771                           
  4772                           ;main.c: 155: }
  4773                           ;main.c: 156: HMI_Poll();
  4774  01206E  ECF9  F0B6         	call	_HMI_Poll	;wreg free
  4775                           
  4776                           ;main.c: 157: StepRotate = 0;
  4777  012072  0E00               	movlw	0
  4778  012074  6E2A               	movwf	_StepRotate+1,c
  4779  012076  0E00               	movlw	0
  4780  012078  6E29               	movwf	_StepRotate,c
  4781                           
  4782                           ;main.c: 158: MinDist = 1000;
  4783  01207A  0E03               	movlw	3
  4784  01207C  6E4C               	movwf	_MinDist+1,c
  4785  01207E  0EE8               	movlw	232
  4786  012080  6E4B               	movwf	_MinDist,c
  4787                           
  4788                           ;main.c: 159: Stepstomin = 0;
  4789  012082  0E00               	movlw	0
  4790  012084  0100               	movlb	0	; () banked
  4791  012086  6FE7               	movwf	(_Stepstomin+1)& (0+255),b
  4792  012088  0E00               	movlw	0
  4793  01208A  6FE6               	movwf	_Stepstomin& (0+255),b
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;main.c: 160: IRValue = 0;
  4797  01208C  0E00               	movlw	0
  4798  01208E  0100               	movlb	0	; () banked
  4799  012090  6FE5               	movwf	(_IRValue+1)& (0+255),b
  4800  012092  0E00               	movlw	0
  4801  012094  6FE4               	movwf	_IRValue& (0+255),b
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;main.c: 161: TimerX = 8;
  4805  012096  0E00               	movlw	0
  4806  012098  6E4A               	movwf	_TimerX+1,c
  4807  01209A  0E08               	movlw	8
  4808  01209C  6E49               	movwf	_TimerX,c
  4809                           
  4810                           ;main.c: 162: while (StepRotate < 400) {
  4811  01209E  D0EE               	goto	u16490
  4812  0120A0                     
  4813                           ;main.c: 163: StepRotate++;
  4814                           
  4815                           ; BSR set to: 0
  4816  0120A0  4A29               	infsnz	_StepRotate,f,c
  4817  0120A2  2A2A               	incf	_StepRotate+1,f,c
  4818                           
  4819                           ;main.c: 164: ADC_Start(&ADC_AN0);
  4820  0120A4  0E40               	movlw	low _ADC_AN0
  4821  0120A6  0100               	movlb	0	; () banked
  4822  0120A8  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4823  0120AA  0E00               	movlw	high _ADC_AN0
  4824  0120AC  0100               	movlb	0	; () banked
  4825  0120AE  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4826  0120B0  EC94  F0B4         	call	_ADC_Start	;wreg free
  4827                           
  4828                           ;main.c: 165: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4829  0120B4  0E40               	movlw	low _ADC_AN0
  4830  0120B6  0100               	movlb	0	; () banked
  4831  0120B8  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4832  0120BA  0E00               	movlw	high _ADC_AN0
  4833  0120BC  0100               	movlb	0	; () banked
  4834  0120BE  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4835  0120C0  ECC5  F0A9         	call	_ADC_Voltage	;wreg free
  4836  0120C4  C0A0  F0DB         	movff	?_ADC_Voltage,_mode1$15631
  4837  0120C8  C0A1  F0DC         	movff	?_ADC_Voltage+1,_mode1$15631+1
  4838  0120CC  C0A2  F0DD         	movff	?_ADC_Voltage+2,_mode1$15631+2
  4839  0120D0  C0A3  F0DE         	movff	?_ADC_Voltage+3,_mode1$15631+3
  4840                           
  4841                           ;main.c: 165: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4842  0120D4  C0DB  F072         	movff	_mode1$15631,___fldiv@a
  4843  0120D8  C0DC  F073         	movff	_mode1$15631+1,___fldiv@a+1
  4844  0120DC  C0DD  F074         	movff	_mode1$15631+2,___fldiv@a+2
  4845  0120E0  C0DE  F075         	movff	_mode1$15631+3,___fldiv@a+3
  4846  0120E4  0E00               	movlw	0
  4847  0120E6  0100               	movlb	0	; () banked
  4848  0120E8  6F6E               	movwf	___fldiv@b& (0+255),b
  4849  0120EA  0E00               	movlw	0
  4850  0120EC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4851  0120EE  0E6C               	movlw	108
  4852  0120F0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4853  0120F2  0E42               	movlw	66
  4854  0120F4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4855  0120F6  ECE1  F091         	call	___fldiv	;wreg free
  4856  0120FA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4857  0120FE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4858  012102  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4859  012106  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4860  01210A  ECD7  F0A7         	call	___fltol	;wreg free
  4861  01210E  C0B2  F0E4         	movff	?___fltol,_IRValue
  4862  012112  C0B3  F0E5         	movff	?___fltol+1,_IRValue+1
  4863                           
  4864                           ;main.c: 166: if (MXK_SwitchTo(eMXK_HMI)) {
  4865  012116  0E01               	movlw	1
  4866  012118  EC02  F0BC         	call	_MXK_SwitchTo
  4867  01211C  0900               	iorlw	0
  4868  01211E  B4D8               	btfsc	status,2,c
  4869  012120  D00E               	goto	l2333
  4870                           
  4871                           ;main.c: 167: HMI_SetNumber(IRValue);
  4872  012122  C0E4  F071         	movff	_IRValue,HMI_SetNumber@pInput
  4873  012126  C0E5  F072         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4874  01212A  EC42  F0BE         	call	_HMI_SetNumber	;wreg free
  4875                           
  4876                           ;main.c: 168: HMI_Render();
  4877  01212E  EC62  F0BC         	call	_HMI_Render	;wreg free
  4878                           
  4879                           ;main.c: 169: if (MXK_Release())
  4880  012132  EC47  F0BF         	call	_MXK_Release	;wreg free
  4881  012136  0900               	iorlw	0
  4882  012138  A4D8               	btfss	status,2,c
  4883                           
  4884                           ;main.c: 170: MXK_Dequeue();
  4885  01213A  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  4886  01213E                     l2333:
  4887                           
  4888                           ;main.c: 171: }
  4889                           ;main.c: 172: if (IRValue < MinDist) {
  4890  01213E  504B               	movf	_MinDist,w,c
  4891  012140  0100               	movlb	0	; () banked
  4892  012142  5DE4               	subwf	_IRValue& (0+255),w,b
  4893  012144  0100               	movlb	0	; () banked
  4894  012146  51E5               	movf	(_IRValue+1)& (0+255),w,b
  4895  012148  0A80               	xorlw	128
  4896  01214A  0100               	movlb	0	; () banked
  4897  01214C  6FD7               	movwf	??_mode1& (0+255),b
  4898  01214E  504C               	movf	_MinDist+1,w,c
  4899  012150  0A80               	xorlw	128
  4900  012152  0100               	movlb	0	; () banked
  4901  012154  59D7               	subwfb	??_mode1& (0+255),w,b
  4902  012156  B0D8               	btfsc	status,0,c
  4903  012158  D008               	goto	l2334
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;main.c: 173: MinDist = IRValue;
  4907  01215A  C0E4  F04B         	movff	_IRValue,_MinDist
  4908  01215E  C0E5  F04C         	movff	_IRValue+1,_MinDist+1
  4909                           
  4910                           ;main.c: 174: Stepstomin = StepRotate;
  4911  012162  C029  F0E6         	movff	_StepRotate,_Stepstomin
  4912  012166  C02A  F0E7         	movff	_StepRotate+1,_Stepstomin+1
  4913  01216A                     l2334:
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;main.c: 175: }
  4917                           ;main.c: 176: if (MXK_SwitchTo(eMXK_Motor)) {
  4918                           
  4919                           ; BSR set to: 0
  4920  01216A  0E08               	movlw	8
  4921  01216C  EC02  F0BC         	call	_MXK_SwitchTo
  4922  012170  0900               	iorlw	0
  4923  012172  B4D8               	btfsc	status,2,c
  4924  012174  D020               	goto	l2336
  4925                           
  4926                           ;main.c: 177: Motor_Speed(&Stepper, (50));
  4927  012176  0ECF               	movlw	low _Stepper
  4928  012178  0100               	movlb	0	; () banked
  4929  01217A  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4930  01217C  0E03               	movlw	high _Stepper
  4931  01217E  0100               	movlb	0	; () banked
  4932  012180  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4933  012182  0E00               	movlw	0
  4934  012184  0100               	movlb	0	; () banked
  4935  012186  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4936  012188  0E32               	movlw	50
  4937  01218A  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4938  01218C  EC2D  F0BE         	call	_Motor_Speed	;wreg free
  4939                           
  4940                           ;main.c: 178: Motor_Move(&Stepper, 1);
  4941  012190  0ECF               	movlw	low _Stepper
  4942  012192  0100               	movlb	0	; () banked
  4943  012194  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4944  012196  0E03               	movlw	high _Stepper
  4945  012198  0100               	movlb	0	; () banked
  4946  01219A  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4947  01219C  0E00               	movlw	0
  4948  01219E  0100               	movlb	0	; () banked
  4949  0121A0  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4950  0121A2  0E01               	movlw	1
  4951  0121A4  6F65               	movwf	Motor_Move@pDelta& (0+255),b
  4952  0121A6  ECFB  F0BC         	call	_Motor_Move	;wreg free
  4953                           
  4954                           ;main.c: 179: if (MXK_Release())
  4955  0121AA  EC47  F0BF         	call	_MXK_Release	;wreg free
  4956  0121AE  0900               	iorlw	0
  4957  0121B0  A4D8               	btfss	status,2,c
  4958                           
  4959                           ;main.c: 180: MXK_Dequeue();
  4960  0121B2  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  4961  0121B6                     l2336:
  4962                           
  4963                           ;main.c: 181: }
  4964                           ;main.c: 182: TimerX = 10;
  4965  0121B6  0E00               	movlw	0
  4966  0121B8  6E4A               	movwf	_TimerX+1,c
  4967  0121BA  0E0A               	movlw	10
  4968  0121BC  6E49               	movwf	_TimerX,c
  4969                           
  4970                           ;main.c: 183: if (TimerX > 0) {
  4971  0121BE  BE4A               	btfsc	_TimerX+1,7,c
  4972  0121C0  D05D               	goto	u16490
  4973  0121C2  504A               	movf	_TimerX+1,w,c
  4974  0121C4  E154               	bnz	l18228
  4975  0121C6  0449               	decf	_TimerX,w,c
  4976  0121C8  B0D8               	btfsc	status,0,c
  4977  0121CA  D051               	goto	l2338
  4978  0121CC  D057               	goto	u16490
  4979  0121CE                     l18210:
  4980                           
  4981                           ;main.c: 185: ADC_Start(&ADC_AN0);
  4982  0121CE  0E40               	movlw	low _ADC_AN0
  4983  0121D0  0100               	movlb	0	; () banked
  4984  0121D2  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4985  0121D4  0E00               	movlw	high _ADC_AN0
  4986  0121D6  0100               	movlb	0	; () banked
  4987  0121D8  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4988  0121DA  EC94  F0B4         	call	_ADC_Start	;wreg free
  4989                           
  4990                           ;main.c: 186: if (MXK_SwitchTo(eMXK_HMI)) {
  4991  0121DE  0E01               	movlw	1
  4992  0121E0  EC02  F0BC         	call	_MXK_SwitchTo
  4993  0121E4  0900               	iorlw	0
  4994  0121E6  B4D8               	btfsc	status,2,c
  4995  0121E8  D00E               	goto	l2341
  4996                           
  4997                           ;main.c: 187: HMI_SetNumber(IRValue);
  4998  0121EA  C0E4  F071         	movff	_IRValue,HMI_SetNumber@pInput
  4999  0121EE  C0E5  F072         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5000  0121F2  EC42  F0BE         	call	_HMI_SetNumber	;wreg free
  5001                           
  5002                           ;main.c: 188: HMI_Render();
  5003  0121F6  EC62  F0BC         	call	_HMI_Render	;wreg free
  5004                           
  5005                           ;main.c: 189: if (MXK_Release())
  5006  0121FA  EC47  F0BF         	call	_MXK_Release	;wreg free
  5007  0121FE  0900               	iorlw	0
  5008  012200  A4D8               	btfss	status,2,c
  5009                           
  5010                           ;main.c: 190: MXK_Dequeue();
  5011  012202  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  5012  012206                     l2341:
  5013                           
  5014                           ;main.c: 191: }
  5015                           ;main.c: 192: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5016  012206  0E40               	movlw	low _ADC_AN0
  5017  012208  0100               	movlb	0	; () banked
  5018  01220A  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  5019  01220C  0E00               	movlw	high _ADC_AN0
  5020  01220E  0100               	movlb	0	; () banked
  5021  012210  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5022  012212  ECC5  F0A9         	call	_ADC_Voltage	;wreg free
  5023  012216  C0A0  F0DB         	movff	?_ADC_Voltage,_mode1$15631
  5024  01221A  C0A1  F0DC         	movff	?_ADC_Voltage+1,_mode1$15631+1
  5025  01221E  C0A2  F0DD         	movff	?_ADC_Voltage+2,_mode1$15631+2
  5026  012222  C0A3  F0DE         	movff	?_ADC_Voltage+3,_mode1$15631+3
  5027                           
  5028                           ;main.c: 191: }
  5029                           ;main.c: 192: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5030  012226  C0DB  F072         	movff	_mode1$15631,___fldiv@a
  5031  01222A  C0DC  F073         	movff	_mode1$15631+1,___fldiv@a+1
  5032  01222E  C0DD  F074         	movff	_mode1$15631+2,___fldiv@a+2
  5033  012232  C0DE  F075         	movff	_mode1$15631+3,___fldiv@a+3
  5034  012236  0E00               	movlw	0
  5035  012238  0100               	movlb	0	; () banked
  5036  01223A  6F6E               	movwf	___fldiv@b& (0+255),b
  5037  01223C  0E00               	movlw	0
  5038  01223E  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  5039  012240  0E6C               	movlw	108
  5040  012242  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  5041  012244  0E42               	movlw	66
  5042  012246  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  5043  012248  ECE1  F091         	call	___fldiv	;wreg free
  5044  01224C  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  5045  012250  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  5046  012254  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  5047  012258  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  5048  01225C  ECD7  F0A7         	call	___fltol	;wreg free
  5049  012260  C0B2  F0E4         	movff	?___fltol,_IRValue
  5050  012264  C0B3  F0E5         	movff	?___fltol+1,_IRValue+1
  5051                           
  5052                           ;main.c: 193: TimerX--;
  5053  012268  0649               	decf	_TimerX,f,c
  5054  01226A  A0D8               	btfss	status,0,c
  5055  01226C  064A               	decf	_TimerX+1,f,c
  5056  01226E                     l2338:
  5057  01226E                     l18228:
  5058  01226E  BE4A               	btfsc	_TimerX+1,7,c
  5059  012270  D005               	goto	u16490
  5060  012272  504A               	movf	_TimerX+1,w,c
  5061  012274  E1AC               	bnz	l18210
  5062  012276  0449               	decf	_TimerX,w,c
  5063  012278  B0D8               	btfsc	status,0,c
  5064  01227A  D7A9               	goto	l2339
  5065  01227C                     u16490:
  5066  01227C  BE2A               	btfsc	_StepRotate+1,7,c
  5067  01227E  D710               	goto	l2331
  5068  012280  0E90               	movlw	144
  5069  012282  5C29               	subwf	_StepRotate,w,c
  5070  012284  0E01               	movlw	1
  5071  012286  582A               	subwfb	_StepRotate+1,w,c
  5072  012288  A0D8               	btfss	status,0,c
  5073  01228A  D70A               	goto	l2331
  5074                           
  5075                           ;main.c: 194: }
  5076                           ;main.c: 195: }
  5077                           ;main.c: 196: }
  5078                           ;main.c: 197: if (MXK_SwitchTo(eMXK_Motor)) {
  5079  01228C  0E08               	movlw	8
  5080  01228E  EC02  F0BC         	call	_MXK_SwitchTo
  5081  012292  0900               	iorlw	0
  5082  012294  B4D8               	btfsc	status,2,c
  5083  012296  D08A               	goto	l2346
  5084                           
  5085                           ;main.c: 198: Motor_Speed(&Stepper, (50));
  5086  012298  0ECF               	movlw	low _Stepper
  5087  01229A  0100               	movlb	0	; () banked
  5088  01229C  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  5089  01229E  0E03               	movlw	high _Stepper
  5090  0122A0  0100               	movlb	0	; () banked
  5091  0122A2  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5092  0122A4  0E00               	movlw	0
  5093  0122A6  0100               	movlb	0	; () banked
  5094  0122A8  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5095  0122AA  0E32               	movlw	50
  5096  0122AC  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  5097  0122AE  EC2D  F0BE         	call	_Motor_Speed	;wreg free
  5098                           
  5099                           ;main.c: 199: int moveto = 400 - Stepstomin;
  5100  0122B2  C0E6  F0D7         	movff	_Stepstomin,??_mode1
  5101  0122B6  C0E7  F0D8         	movff	_Stepstomin+1,??_mode1+1
  5102  0122BA  0100               	movlb	0	; () banked
  5103  0122BC  1FD7               	comf	??_mode1& (0+255),f,b
  5104  0122BE  1FD8               	comf	(??_mode1+1)& (0+255),f,b
  5105  0122C0  4BD7               	infsnz	??_mode1& (0+255),f,b
  5106  0122C2  2BD8               	incf	(??_mode1+1)& (0+255),f,b
  5107  0122C4  0E90               	movlw	144
  5108  0122C6  0100               	movlb	0	; () banked
  5109  0122C8  25D7               	addwf	??_mode1& (0+255),w,b
  5110  0122CA  0100               	movlb	0	; () banked
  5111  0122CC  6FD9               	movwf	mode1@moveto& (0+255),b
  5112  0122CE  0E01               	movlw	1
  5113  0122D0  0100               	movlb	0	; () banked
  5114  0122D2  21D8               	addwfc	(??_mode1+1)& (0+255),w,b
  5115  0122D4  0100               	movlb	0	; () banked
  5116  0122D6  6FDA               	movwf	(mode1@moveto+1)& (0+255),b
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;main.c: 201: Motor_Move(&Stepper, (-moveto));
  5120  0122D8  0ECF               	movlw	low _Stepper
  5121  0122DA  0100               	movlb	0	; () banked
  5122  0122DC  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  5123  0122DE  0E03               	movlw	high _Stepper
  5124  0122E0  0100               	movlb	0	; () banked
  5125  0122E2  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5126  0122E4  C0D9  F0D7         	movff	mode1@moveto,??_mode1
  5127  0122E8  C0DA  F0D8         	movff	mode1@moveto+1,??_mode1+1
  5128  0122EC  0100               	movlb	0	; () banked
  5129  0122EE  1FD7               	comf	??_mode1& (0+255),f,b
  5130  0122F0  1FD8               	comf	(??_mode1+1)& (0+255),f,b
  5131  0122F2  4BD7               	infsnz	??_mode1& (0+255),f,b
  5132  0122F4  2BD8               	incf	(??_mode1+1)& (0+255),f,b
  5133  0122F6  C0D7  F065         	movff	??_mode1,Motor_Move@pDelta
  5134  0122FA  C0D8  F066         	movff	??_mode1+1,Motor_Move@pDelta+1
  5135  0122FE  ECFB  F0BC         	call	_Motor_Move	;wreg free
  5136                           
  5137                           ;main.c: 202: if (MXK_Release())
  5138  012302  EC47  F0BF         	call	_MXK_Release	;wreg free
  5139  012306  0900               	iorlw	0
  5140  012308  B4D8               	btfsc	status,2,c
  5141  01230A  D050               	goto	l2346
  5142                           
  5143                           ;main.c: 203: MXK_Dequeue();
  5144  01230C  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  5145                           
  5146                           ;main.c: 204: }
  5147                           ;main.c: 205: while (Stepper.mDelta > 0) {
  5148  012310  D04D               	goto	l2346
  5149  012312                     l18244:
  5150                           
  5151                           ;main.c: 206: ADC_Start(&ADC_AN0);
  5152  012312  0E40               	movlw	low _ADC_AN0
  5153  012314  0100               	movlb	0	; () banked
  5154  012316  6F62               	movwf	ADC_Start@pInput& (0+255),b
  5155  012318  0E00               	movlw	high _ADC_AN0
  5156  01231A  0100               	movlb	0	; () banked
  5157  01231C  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5158  01231E  EC94  F0B4         	call	_ADC_Start	;wreg free
  5159                           
  5160                           ;main.c: 207: if (MXK_SwitchTo(eMXK_HMI)) {
  5161  012322  0E01               	movlw	1
  5162  012324  EC02  F0BC         	call	_MXK_SwitchTo
  5163  012328  0900               	iorlw	0
  5164  01232A  B4D8               	btfsc	status,2,c
  5165  01232C  D00E               	goto	l2349
  5166                           
  5167                           ;main.c: 208: HMI_SetNumber(IRValue);
  5168  01232E  C0E4  F071         	movff	_IRValue,HMI_SetNumber@pInput
  5169  012332  C0E5  F072         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5170  012336  EC42  F0BE         	call	_HMI_SetNumber	;wreg free
  5171                           
  5172                           ;main.c: 209: HMI_Render();
  5173  01233A  EC62  F0BC         	call	_HMI_Render	;wreg free
  5174                           
  5175                           ;main.c: 210: if (MXK_Release())
  5176  01233E  EC47  F0BF         	call	_MXK_Release	;wreg free
  5177  012342  0900               	iorlw	0
  5178  012344  A4D8               	btfss	status,2,c
  5179                           
  5180                           ;main.c: 211: MXK_Dequeue();
  5181  012346  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
  5182  01234A                     l2349:
  5183                           
  5184                           ;main.c: 212: }
  5185                           ;main.c: 213: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5186  01234A  0E40               	movlw	low _ADC_AN0
  5187  01234C  0100               	movlb	0	; () banked
  5188  01234E  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  5189  012350  0E00               	movlw	high _ADC_AN0
  5190  012352  0100               	movlb	0	; () banked
  5191  012354  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5192  012356  ECC5  F0A9         	call	_ADC_Voltage	;wreg free
  5193  01235A  C0A0  F0DB         	movff	?_ADC_Voltage,_mode1$15631
  5194  01235E  C0A1  F0DC         	movff	?_ADC_Voltage+1,_mode1$15631+1
  5195  012362  C0A2  F0DD         	movff	?_ADC_Voltage+2,_mode1$15631+2
  5196  012366  C0A3  F0DE         	movff	?_ADC_Voltage+3,_mode1$15631+3
  5197                           
  5198                           ;main.c: 212: }
  5199                           ;main.c: 213: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5200  01236A  C0DB  F072         	movff	_mode1$15631,___fldiv@a
  5201  01236E  C0DC  F073         	movff	_mode1$15631+1,___fldiv@a+1
  5202  012372  C0DD  F074         	movff	_mode1$15631+2,___fldiv@a+2
  5203  012376  C0DE  F075         	movff	_mode1$15631+3,___fldiv@a+3
  5204  01237A  0E00               	movlw	0
  5205  01237C  0100               	movlb	0	; () banked
  5206  01237E  6F6E               	movwf	___fldiv@b& (0+255),b
  5207  012380  0E00               	movlw	0
  5208  012382  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  5209  012384  0E6C               	movlw	108
  5210  012386  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  5211  012388  0E42               	movlw	66
  5212  01238A  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  5213  01238C  ECE1  F091         	call	___fldiv	;wreg free
  5214  012390  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  5215  012394  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  5216  012398  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  5217  01239C  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  5218  0123A0  ECD7  F0A7         	call	___fltol	;wreg free
  5219  0123A4  C0B2  F0E4         	movff	?___fltol,_IRValue
  5220  0123A8  C0B3  F0E5         	movff	?___fltol+1,_IRValue+1
  5221  0123AC                     l2346:
  5222  0123AC  0103               	movlb	3	; () banked
  5223  0123AE  BFD0               	btfsc	(_Stepper+1)& (0+255),7,b
  5224  0123B0  0012               	return	
  5225  0123B2  0103               	movlb	3	; () banked
  5226  0123B4  51D0               	movf	(_Stepper+1)& (0+255),w,b
  5227  0123B6  E1AD               	bnz	l18244
  5228  0123B8  0103               	movlb	3	; () banked
  5229  0123BA  05CF               	decf	_Stepper& (0+255),w,b
  5230  0123BC  A0D8               	btfss	status,0,c
  5231  0123BE  0012               	return	
  5232  0123C0  D7A8               	goto	l2347
  5233  0123C2                     __end_of_mode1:
  5234                           	opt stack 0
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           postinc0	equ	0xFEE
  5240                           wreg	equ	0xFE8
  5241                           postdec1	equ	0xFE5
  5242                           fsr1h	equ	0xFE2
  5243                           fsr1l	equ	0xFE1
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function _update_distance *****************
  5247 ;; Defined at:
  5248 ;;		line 325 in file "Library/iRobotSerial.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;		None
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;		None
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      void 
  5255 ;; Registers used:
  5256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5266 ;;Total ram usage:        0 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:   10
  5269 ;; This function calls:
  5270 ;;		_irobot_query_and_update
  5271 ;; This function is called by:
  5272 ;;		_move_and_rotate
  5273 ;;		_mode1
  5274 ;;		_mode2
  5275 ;;		_mode4
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text8
  5280  017FDA                     __ptext8:
  5281                           	opt stack 0
  5282  017FDA                     _update_distance:
  5283                           	opt stack 19
  5284                           
  5285                           ;iRobotSerial.c: 326: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5286                           
  5287                           ; BSR set to: 3
  5288                           ;incstack = 0
  5289  017FDA  0E00               	movlw	0
  5290  017FDC  0100               	movlb	0	; () banked
  5291  017FDE  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5292  017FE0  0E13               	movlw	19
  5293  017FE2  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5294  017FE4  0E01               	movlw	1
  5295  017FE6  EC5F  F0A2         	call	_irobot_query_and_update
  5296  017FEA  0012               	return		;funcret
  5297  017FEC                     __end_of_update_distance:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           postinc0	equ	0xFEE
  5304                           wreg	equ	0xFE8
  5305                           postdec1	equ	0xFE5
  5306                           fsr1h	equ	0xFE2
  5307                           fsr1l	equ	0xFE1
  5308                           status	equ	0xFD8
  5309                           
  5310 ;; *************** function _update_bump_and_cliff *****************
  5311 ;; Defined at:
  5312 ;;		line 318 in file "Library/iRobotSerial.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  1    wreg      void 
  5319 ;; Registers used:
  5320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:   10
  5333 ;; This function calls:
  5334 ;;		_irobot_query_and_update
  5335 ;; This function is called by:
  5336 ;;		_mode1
  5337 ;;		_mode2
  5338 ;;		_mode4
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           	psect	text9
  5343  0179BC                     __ptext9:
  5344                           	opt stack 0
  5345  0179BC                     _update_bump_and_cliff:
  5346                           	opt stack 19
  5347                           
  5348                           ;iRobotSerial.c: 319: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5349                           ;iRobotSerial.c: 320: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5350                           ;iRobotSerial.c: 321: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5351                           
  5352                           ;incstack = 0
  5353  0179BC  0E00               	movlw	0
  5354  0179BE  0100               	movlb	0	; () banked
  5355  0179C0  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5356  0179C2  0E07               	movlw	7
  5357  0179C4  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5358  0179C6  0E00               	movlw	0
  5359  0179C8  0100               	movlb	0	; () banked
  5360  0179CA  6F69               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5361  0179CC  0E09               	movlw	9
  5362  0179CE  6F68               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5363  0179D0  0E00               	movlw	0
  5364  0179D2  0100               	movlb	0	; () banked
  5365  0179D4  6F6B               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5366  0179D6  0E0A               	movlw	10
  5367  0179D8  6F6A               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5368  0179DA  0E00               	movlw	0
  5369  0179DC  0100               	movlb	0	; () banked
  5370  0179DE  6F6D               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5371  0179E0  0E0B               	movlw	11
  5372  0179E2  6F6C               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5373  0179E4  0E00               	movlw	0
  5374  0179E6  0100               	movlb	0	; () banked
  5375  0179E8  6F6F               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5376  0179EA  0E0C               	movlw	12
  5377  0179EC  6F6E               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5378  0179EE  0E05               	movlw	5
  5379  0179F0  EC5F  F0A2         	call	_irobot_query_and_update
  5380  0179F4  0012               	return		;funcret
  5381  0179F6                     __end_of_update_bump_and_cliff:
  5382                           	opt stack 0
  5383                           tblptru	equ	0xFF8
  5384                           tblptrh	equ	0xFF7
  5385                           tblptrl	equ	0xFF6
  5386                           tablat	equ	0xFF5
  5387                           postinc0	equ	0xFEE
  5388                           wreg	equ	0xFE8
  5389                           postdec1	equ	0xFE5
  5390                           fsr1h	equ	0xFE2
  5391                           fsr1l	equ	0xFE1
  5392                           status	equ	0xFD8
  5393                           
  5394 ;; *************** function _update_angle *****************
  5395 ;; Defined at:
  5396 ;;		line 330 in file "Library/iRobotSerial.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;                  1    wreg      void 
  5403 ;; Registers used:
  5404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;Total ram usage:        0 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:   10
  5417 ;; This function calls:
  5418 ;;		_irobot_query_and_update
  5419 ;; This function is called by:
  5420 ;;		_irobot_rotate
  5421 ;;		_mode1
  5422 ;;		_mode2
  5423 ;;		_mode4
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text10
  5428  017FEC                     __ptext10:
  5429                           	opt stack 0
  5430  017FEC                     _update_angle:
  5431                           	opt stack 19
  5432                           
  5433                           ;iRobotSerial.c: 331: irobot_query_and_update(1, iR_PKT_ANGLE);
  5434                           
  5435                           ;incstack = 0
  5436  017FEC  0E00               	movlw	0
  5437  017FEE  0100               	movlb	0	; () banked
  5438  017FF0  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5439  017FF2  0E14               	movlw	20
  5440  017FF4  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5441  017FF6  0E01               	movlw	1
  5442  017FF8  EC5F  F0A2         	call	_irobot_query_and_update
  5443  017FFC  0012               	return		;funcret
  5444  017FFE                     __end_of_update_angle:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           postinc0	equ	0xFEE
  5451                           wreg	equ	0xFE8
  5452                           postdec1	equ	0xFE5
  5453                           fsr1h	equ	0xFE2
  5454                           fsr1l	equ	0xFE1
  5455                           status	equ	0xFD8
  5456                           
  5457 ;; *************** function _irobot_query_and_update *****************
  5458 ;; Defined at:
  5459 ;;		line 130 in file "Library/iRobotSerial.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;  numberOfPack    1    wreg     unsigned char 
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5464 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5465 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5466 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5467 ;;		 -> ?_irobot_query_and_update(1), 
  5468 ;;  i               1   28[BANK0 ] unsigned char 
  5469 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5470 ;;  j               1   26[BANK0 ] unsigned char 
  5471 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5472 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5482 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;Total ram usage:      535 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    9
  5489 ;; This function calls:
  5490 ;;		_eusart_getch
  5491 ;;		_eusart_putch
  5492 ;;		_get_packet_size
  5493 ;;		_rx_assign
  5494 ;; This function is called by:
  5495 ;;		_update_bump_and_cliff
  5496 ;;		_update_distance
  5497 ;;		_update_angle
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text11
  5502  0144BE                     __ptext11:
  5503                           	opt stack 0
  5504  0144BE                     _irobot_query_and_update:
  5505                           	opt stack 19
  5506                           
  5507                           ;incstack = 0
  5508                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5509  0144BE  0100               	movlb	0	; () banked
  5510  0144C0  6F78               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5511                           
  5512                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5513  0144C2  0E00               	movlw	0
  5514  0144C4  0100               	movlb	0	; () banked
  5515  0144C6  6F77               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5516  0144C8  0E00               	movlw	0
  5517  0144CA  0100               	movlb	0	; () banked
  5518  0144CC  6F7B               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5519                           
  5520                           ;iRobotSerial.c: 132: va_list packetIDs;
  5521                           ;iRobotSerial.c: 133: *packetIDs = __va_start();
  5522  0144CE  0E66               	movlw	low ?_irobot_query_and_update
  5523  0144D0  0100               	movlb	0	; () banked
  5524  0144D2  6F75               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5525  0144D4  0E00               	movlw	high ?_irobot_query_and_update
  5526  0144D6  0100               	movlb	0	; () banked
  5527  0144D8  6F76               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;iRobotSerial.c: 134: eusart_putch(iR_QUERY_LIST);
  5531  0144DA  0E95               	movlw	149
  5532  0144DC  EC1F  F0C0         	call	_eusart_putch
  5533                           
  5534                           ;iRobotSerial.c: 135: eusart_putch(numberOfPacketRequests);
  5535  0144E0  0100               	movlb	0	; () banked
  5536  0144E2  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5537  0144E4  EC1F  F0C0         	call	_eusart_putch
  5538                           
  5539                           ;iRobotSerial.c: 136: for (i = 0; i < numberOfPacketRequests; i++) {
  5540  0144E8  0E00               	movlw	0
  5541  0144EA  0100               	movlb	0	; () banked
  5542  0144EC  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5543  0144EE  D023               	goto	l2095
  5544  0144F0                     
  5545                           ; BSR set to: 0
  5546                           ;iRobotSerial.c: 137: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5547                           
  5548                           ; BSR set to: 0
  5549  0144F0  C075  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5550  0144F4  C076  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5551  0144F8  50DF               	movf	indf2,w,c
  5552  0144FA  0100               	movlb	0	; () banked
  5553  0144FC  6F79               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5554                           
  5555                           ; BSR set to: 0
  5556  0144FE  0E02               	movlw	2
  5557  014500  0100               	movlb	0	; () banked
  5558  014502  2775               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5559  014504  0E00               	movlw	0
  5560  014506  2376               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;iRobotSerial.c: 138: streamSize += get_packet_size(packetVariable);
  5564  014508  0100               	movlb	0	; () banked
  5565  01450A  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5566  01450C  EC76  F0B8         	call	_get_packet_size
  5567  014510  0100               	movlb	0	; () banked
  5568  014512  2777               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;iRobotSerial.c: 139: TXArray[i] = packetVariable;
  5572  014514  0100               	movlb	0	; () banked
  5573  014516  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5574  014518  0D01               	mullw	1
  5575  01451A  0E00               	movlw	low irobot_query_and_update@TXArray
  5576  01451C  24F3               	addwf	prodl,w,c
  5577  01451E  6ED9               	movwf	fsr2l,c
  5578  014520  0E02               	movlw	high irobot_query_and_update@TXArray
  5579  014522  20F4               	addwfc	prodh,w,c
  5580  014524  6EDA               	movwf	fsr2h,c
  5581  014526  C079  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;iRobotSerial.c: 140: eusart_putch(packetVariable);
  5585  01452A  0100               	movlb	0	; () banked
  5586  01452C  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5587  01452E  EC1F  F0C0         	call	_eusart_putch
  5588  014532  0100               	movlb	0	; () banked
  5589  014534  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5590  014536                     l2095:
  5591                           
  5592                           ; BSR set to: 0
  5593                           
  5594                           ; BSR set to: 0
  5595  014536  0100               	movlb	0	; () banked
  5596  014538  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5597  01453A  0100               	movlb	0	; () banked
  5598  01453C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5599  01453E  A0D8               	btfss	status,0,c
  5600  014540  D7D7               	goto	l2096
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;iRobotSerial.c: 141: }
  5604                           ;iRobotSerial.c: 142: ;
  5605                           ;iRobotSerial.c: 144: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  5606                           
  5607                           ; BSR set to: 0
  5608  014542  0E00               	movlw	0
  5609  014544  0100               	movlb	0	; () banked
  5610  014546  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5611  014548  D00E               	goto	l2098
  5612  01454A                     
  5613                           ; BSR set to: 0
  5614                           
  5615                           ; BSR set to: 0
  5616  01454A  0100               	movlb	0	; () banked
  5617  01454C  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5618  01454E  0D01               	mullw	1
  5619  014550  0E00               	movlw	low irobot_query_and_update@RXArray
  5620  014552  24F3               	addwf	prodl,w,c
  5621  014554  6ED9               	movwf	fsr2l,c
  5622  014556  0E01               	movlw	high irobot_query_and_update@RXArray
  5623  014558  20F4               	addwfc	prodh,w,c
  5624  01455A  6EDA               	movwf	fsr2h,c
  5625  01455C  EC5D  F0C0         	call	_eusart_getch	;wreg free
  5626  014560  6EDF               	movwf	indf2,c
  5627  014562  0100               	movlb	0	; () banked
  5628  014564  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5629  014566                     l2098:
  5630                           
  5631                           ; BSR set to: 0
  5632                           
  5633                           ; BSR set to: 0
  5634  014566  0100               	movlb	0	; () banked
  5635  014568  5177               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5636  01456A  0100               	movlb	0	; () banked
  5637  01456C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5638  01456E  A0D8               	btfss	status,0,c
  5639  014570  D7EC               	goto	l2099
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;iRobotSerial.c: 146: for (i = 0; i < numberOfPacketRequests; i++) {
  5643                           
  5644                           ; BSR set to: 0
  5645  014572  0E00               	movlw	0
  5646  014574  0100               	movlb	0	; () banked
  5647  014576  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5648  014578  D05E               	goto	l2101
  5649  01457A                     l2102:
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;iRobotSerial.c: 147: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5653  01457A  C07B  F07A         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5654  01457E  D021               	goto	l2103
  5655  014580                     
  5656                           ; BSR set to: 0
  5657                           ;iRobotSerial.c: 148: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5658                           
  5659                           ; BSR set to: 0
  5660  014580  0100               	movlb	0	; () banked
  5661  014582  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5662  014584  0D01               	mullw	1
  5663  014586  0E00               	movlw	low irobot_query_and_update@RXArray
  5664  014588  24F3               	addwf	prodl,w,c
  5665  01458A  6ED9               	movwf	fsr2l,c
  5666  01458C  0E01               	movlw	high irobot_query_and_update@RXArray
  5667  01458E  20F4               	addwfc	prodh,w,c
  5668  014590  6EDA               	movwf	fsr2h,c
  5669  014592  50DF               	movf	indf2,w,c
  5670  014594  0100               	movlb	0	; () banked
  5671  014596  6F61               	movwf	rx_assign@packetIDValue& (0+255),b
  5672  014598  0100               	movlb	0	; () banked
  5673  01459A  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5674  01459C  0800               	sublw	0
  5675  01459E  0100               	movlb	0	; () banked
  5676  0145A0  257A               	addwf	irobot_query_and_update@j& (0+255),w,b
  5677  0145A2  0100               	movlb	0	; () banked
  5678  0145A4  6F62               	movwf	rx_assign@byteNumber& (0+255),b
  5679  0145A6  0100               	movlb	0	; () banked
  5680  0145A8  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5681  0145AA  0D01               	mullw	1
  5682  0145AC  0E00               	movlw	low irobot_query_and_update@TXArray
  5683  0145AE  24F3               	addwf	prodl,w,c
  5684  0145B0  6ED9               	movwf	fsr2l,c
  5685  0145B2  0E02               	movlw	high irobot_query_and_update@TXArray
  5686  0145B4  20F4               	addwfc	prodh,w,c
  5687  0145B6  6EDA               	movwf	fsr2h,c
  5688  0145B8  50DF               	movf	indf2,w,c
  5689  0145BA  ECDD  F0A8         	call	_rx_assign
  5690  0145BE  0100               	movlb	0	; () banked
  5691  0145C0  2B7A               	incf	irobot_query_and_update@j& (0+255),f,b
  5692  0145C2                     l2103:
  5693                           
  5694                           ; BSR set to: 0
  5695                           
  5696                           ; BSR set to: 0
  5697  0145C2  0100               	movlb	0	; () banked
  5698  0145C4  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5699  0145C6  0D01               	mullw	1
  5700  0145C8  0E00               	movlw	low irobot_query_and_update@TXArray
  5701  0145CA  24F3               	addwf	prodl,w,c
  5702  0145CC  6ED9               	movwf	fsr2l,c
  5703  0145CE  0E02               	movlw	high irobot_query_and_update@TXArray
  5704  0145D0  20F4               	addwfc	prodh,w,c
  5705  0145D2  6EDA               	movwf	fsr2h,c
  5706  0145D4  50DF               	movf	indf2,w,c
  5707  0145D6  EC76  F0B8         	call	_get_packet_size
  5708  0145DA  0100               	movlb	0	; () banked
  5709  0145DC  6F70               	movwf	??_irobot_query_and_update& (0+255),b
  5710  0145DE  6B71               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5711  0145E0  0100               	movlb	0	; () banked
  5712  0145E2  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5713  0145E4  0100               	movlb	0	; () banked
  5714  0145E6  2770               	addwf	??_irobot_query_and_update& (0+255),f,b
  5715  0145E8  0E00               	movlw	0
  5716  0145EA  2371               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5717  0145EC  0100               	movlb	0	; () banked
  5718  0145EE  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5719  0145F0  0100               	movlb	0	; () banked
  5720  0145F2  6F72               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5721  0145F4  6B73               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5722  0145F6  0100               	movlb	0	; () banked
  5723  0145F8  5170               	movf	??_irobot_query_and_update& (0+255),w,b
  5724  0145FA  0100               	movlb	0	; () banked
  5725  0145FC  5D72               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5726  0145FE  0100               	movlb	0	; () banked
  5727  014600  5173               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5728  014602  0A80               	xorlw	128
  5729  014604  0100               	movlb	0	; () banked
  5730  014606  6F74               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5731  014608  0100               	movlb	0	; () banked
  5732  01460A  5171               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5733  01460C  0A80               	xorlw	128
  5734  01460E  0100               	movlb	0	; () banked
  5735  014610  5974               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5736  014612  A0D8               	btfss	status,0,c
  5737  014614  D7B5               	goto	l2104
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;iRobotSerial.c: 149: }
  5741                           ;iRobotSerial.c: 150: startIndex += get_packet_size(TXArray[i]);
  5742                           
  5743                           ; BSR set to: 0
  5744  014616  0100               	movlb	0	; () banked
  5745  014618  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5746  01461A  0D01               	mullw	1
  5747  01461C  0E00               	movlw	low irobot_query_and_update@TXArray
  5748  01461E  24F3               	addwf	prodl,w,c
  5749  014620  6ED9               	movwf	fsr2l,c
  5750  014622  0E02               	movlw	high irobot_query_and_update@TXArray
  5751  014624  20F4               	addwfc	prodh,w,c
  5752  014626  6EDA               	movwf	fsr2h,c
  5753  014628  50DF               	movf	indf2,w,c
  5754  01462A  EC76  F0B8         	call	_get_packet_size
  5755  01462E  0100               	movlb	0	; () banked
  5756  014630  277B               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5757                           
  5758                           ; BSR set to: 0
  5759  014632  0100               	movlb	0	; () banked
  5760  014634  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5761  014636                     l2101:
  5762                           
  5763                           ; BSR set to: 0
  5764                           
  5765                           ; BSR set to: 0
  5766  014636  0100               	movlb	0	; () banked
  5767  014638  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5768  01463A  0100               	movlb	0	; () banked
  5769  01463C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5770  01463E  B0D8               	btfsc	status,0,c
  5771  014640  0012               	return	
  5772  014642  D79B               	goto	l2102
  5773  014644                     __end_of_irobot_query_and_update:
  5774                           	opt stack 0
  5775                           tblptru	equ	0xFF8
  5776                           tblptrh	equ	0xFF7
  5777                           tblptrl	equ	0xFF6
  5778                           tablat	equ	0xFF5
  5779                           prodh	equ	0xFF4
  5780                           prodl	equ	0xFF3
  5781                           postinc0	equ	0xFEE
  5782                           wreg	equ	0xFE8
  5783                           postdec1	equ	0xFE5
  5784                           fsr1h	equ	0xFE2
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           fsr2h	equ	0xFDA
  5788                           fsr2l	equ	0xFD9
  5789                           status	equ	0xFD8
  5790                           
  5791 ;; *************** function _rx_assign *****************
  5792 ;; Defined at:
  5793 ;;		line 74 in file "Library/iRobotSerial.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;  packetID        1    wreg     unsigned char 
  5796 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5797 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  packetID        1    5[BANK0 ] unsigned char 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5809 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;Total ram usage:        5 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    8
  5816 ;; This function calls:
  5817 ;;		_sort_iRBumpDrop
  5818 ;; This function is called by:
  5819 ;;		_irobot_query_and_update
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text12
  5824  0151BA                     __ptext12:
  5825                           	opt stack 0
  5826  0151BA                     _rx_assign:
  5827                           	opt stack 19
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;incstack = 0
  5831                           ;rx_assign@packetID stored from wreg
  5832  0151BA  0100               	movlb	0	; () banked
  5833  0151BC  6F65               	movwf	rx_assign@packetID& (0+255),b
  5834                           
  5835                           ;iRobotSerial.c: 75: switch (packetID) {
  5836  0151BE  D057               	goto	l2035
  5837  0151C0                     l2036:
  5838                           
  5839                           ; BSR set to: 0
  5840  0151C0  C061  F037         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5841                           
  5842                           ; BSR set to: 0
  5843  0151C4  EC7E  F0B3         	call	_sort_iRBumpDrop	;wreg free
  5844  0151C8  0012               	return	
  5845  0151CA                     l2038:
  5846                           
  5847                           ; BSR set to: 0
  5848  0151CA  C061  F33A         	movff	rx_assign@packetIDValue,_iRWall
  5849  0151CE  0012               	return	
  5850  0151D0                     l2039:
  5851                           
  5852                           ; BSR set to: 0
  5853  0151D0  C061  F339         	movff	rx_assign@packetIDValue,_iRCliffL
  5854  0151D4  0012               	return	
  5855  0151D6                     l2040:
  5856                           
  5857                           ; BSR set to: 0
  5858  0151D6  C061  F338         	movff	rx_assign@packetIDValue,_iRCliffFL
  5859  0151DA  0012               	return	
  5860  0151DC                     l2041:
  5861                           
  5862                           ; BSR set to: 0
  5863  0151DC  C061  F337         	movff	rx_assign@packetIDValue,_iRCliffFR
  5864  0151E0  0012               	return	
  5865  0151E2                     l2042:
  5866                           
  5867                           ; BSR set to: 0
  5868  0151E2  C061  F336         	movff	rx_assign@packetIDValue,_iRCliffR
  5869  0151E6  0012               	return	
  5870  0151E8                     l2043:
  5871                           
  5872                           ; BSR set to: 0
  5873  0151E8  C061  F335         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5874  0151EC  0012               	return	
  5875  0151EE                     
  5876                           ; BSR set to: 0
  5877                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5878                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5879                           
  5880                           ; BSR set to: 0
  5881  0151EE  0100               	movlb	0	; () banked
  5882  0151F0  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5883  0151F2  0100               	movlb	0	; () banked
  5884  0151F4  A4D8               	btfss	status,2,c
  5885  0151F6  D005               	goto	l2046
  5886                           
  5887                           ; BSR set to: 0
  5888  0151F8  C061  F308         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5889  0151FC  0103               	movlb	3	; () banked
  5890  0151FE  6B09               	clrf	(_iRDistanceSS+1)& (0+255),b
  5891  015200  0012               	return	
  5892  015202                     l2046:
  5893                           
  5894                           ; BSR set to: 0
  5895  015202  C061  F30A         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5896  015206  0103               	movlb	3	; () banked
  5897  015208  6B0B               	clrf	(_iRDistanceSS+3)& (0+255),b
  5898                           
  5899                           ; BSR set to: 3
  5900  01520A  0103               	movlb	3	; () banked
  5901  01520C  5108               	movf	_iRDistanceSS& (0+255),w,b
  5902  01520E  0100               	movlb	0	; () banked
  5903  015210  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5904  015212  6B63               	clrf	??_rx_assign& (0+255),b
  5905  015214  0103               	movlb	3	; () banked
  5906  015216  510A               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5907  015218  0100               	movlb	0	; () banked
  5908  01521A  2563               	addwf	??_rx_assign& (0+255),w,b
  5909  01521C  0103               	movlb	3	; () banked
  5910  01521E  6F30               	movwf	_iRDistance& (0+255),b
  5911  015220  0103               	movlb	3	; () banked
  5912  015222  510B               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5913  015224  0100               	movlb	0	; () banked
  5914  015226  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5915  015228  0103               	movlb	3	; () banked
  5916  01522A  6F31               	movwf	(_iRDistance+1)& (0+255),b
  5917                           
  5918                           ; BSR set to: 3
  5919  01522C  0012               	return	
  5920  01522E                     
  5921                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5922                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5923                           
  5924                           ; BSR set to: 3
  5925  01522E  0100               	movlb	0	; () banked
  5926  015230  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5927  015232  0100               	movlb	0	; () banked
  5928  015234  A4D8               	btfss	status,2,c
  5929  015236  D005               	goto	l2051
  5930                           
  5931                           ; BSR set to: 0
  5932  015238  C061  F304         	movff	rx_assign@packetIDValue,_iRAngleSS
  5933  01523C  0103               	movlb	3	; () banked
  5934  01523E  6B05               	clrf	(_iRAngleSS+1)& (0+255),b
  5935  015240  0012               	return	
  5936  015242                     l2051:
  5937                           
  5938                           ; BSR set to: 0
  5939  015242  C061  F306         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  5940  015246  0103               	movlb	3	; () banked
  5941  015248  6B07               	clrf	(_iRAngleSS+3)& (0+255),b
  5942                           
  5943                           ; BSR set to: 3
  5944  01524A  0103               	movlb	3	; () banked
  5945  01524C  5104               	movf	_iRAngleSS& (0+255),w,b
  5946  01524E  0100               	movlb	0	; () banked
  5947  015250  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5948  015252  6B63               	clrf	??_rx_assign& (0+255),b
  5949  015254  0103               	movlb	3	; () banked
  5950  015256  5106               	movf	(_iRAngleSS+2)& (0+255),w,b
  5951  015258  0100               	movlb	0	; () banked
  5952  01525A  2563               	addwf	??_rx_assign& (0+255),w,b
  5953  01525C  0103               	movlb	3	; () banked
  5954  01525E  6F2E               	movwf	_iRAngle& (0+255),b
  5955  015260  0103               	movlb	3	; () banked
  5956  015262  5107               	movf	(_iRAngleSS+3)& (0+255),w,b
  5957  015264  0100               	movlb	0	; () banked
  5958  015266  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5959  015268  0103               	movlb	3	; () banked
  5960  01526A  6F2F               	movwf	(_iRAngle+1)& (0+255),b
  5961                           
  5962                           ; BSR set to: 3
  5963                           ;iRobotSerial.c: 89: }
  5964                           
  5965                           ; BSR set to: 3
  5966  01526C  0012               	return	
  5967  01526E                     l2035:
  5968                           
  5969                           ; BSR set to: 3
  5970  01526E  0100               	movlb	0	; () banked
  5971  015270  5165               	movf	rx_assign@packetID& (0+255),w,b
  5972                           
  5973                           ; Switch size 1, requested type "space"
  5974                           ; Number of cases is 9, Range of values is 7 to 20
  5975                           ; switch strategies available:
  5976                           ; Name         Instructions Cycles
  5977                           ; simple_byte           28    15 (average)
  5978                           ;	Chosen strategy is simple_byte
  5979  015272  0A07               	xorlw	7	; case 7
  5980  015274  B4D8               	btfsc	status,2,c
  5981  015276  D7A4               	goto	l2036
  5982  015278  0A0F               	xorlw	15	; case 8
  5983  01527A  B4D8               	btfsc	status,2,c
  5984  01527C  D7A6               	goto	l2038
  5985  01527E  0A01               	xorlw	1	; case 9
  5986  015280  B4D8               	btfsc	status,2,c
  5987  015282  D7A6               	goto	l2039
  5988  015284  0A03               	xorlw	3	; case 10
  5989  015286  B4D8               	btfsc	status,2,c
  5990  015288  D7A6               	goto	l2040
  5991  01528A  0A01               	xorlw	1	; case 11
  5992  01528C  B4D8               	btfsc	status,2,c
  5993  01528E  D7A6               	goto	l2041
  5994  015290  0A07               	xorlw	7	; case 12
  5995  015292  B4D8               	btfsc	status,2,c
  5996  015294  D7A6               	goto	l2042
  5997  015296  0A01               	xorlw	1	; case 13
  5998  015298  B4D8               	btfsc	status,2,c
  5999  01529A  D7A6               	goto	l2043
  6000  01529C  0A1E               	xorlw	30	; case 19
  6001  01529E  B4D8               	btfsc	status,2,c
  6002  0152A0  D7A6               	goto	l2044
  6003  0152A2  0A07               	xorlw	7	; case 20
  6004  0152A4  A4D8               	btfss	status,2,c
  6005  0152A6  0012               	return	
  6006  0152A8  D7C2               	goto	l2049
  6007  0152AA                     __end_of_rx_assign:
  6008                           	opt stack 0
  6009                           tblptru	equ	0xFF8
  6010                           tblptrh	equ	0xFF7
  6011                           tblptrl	equ	0xFF6
  6012                           tablat	equ	0xFF5
  6013                           prodh	equ	0xFF4
  6014                           prodl	equ	0xFF3
  6015                           postinc0	equ	0xFEE
  6016                           wreg	equ	0xFE8
  6017                           postdec1	equ	0xFE5
  6018                           fsr1h	equ	0xFE2
  6019                           fsr1l	equ	0xFE1
  6020                           indf2	equ	0xFDF
  6021                           fsr2h	equ	0xFDA
  6022                           fsr2l	equ	0xFD9
  6023                           status	equ	0xFD8
  6024                           
  6025 ;; *************** function _sort_iRBumpDrop *****************
  6026 ;; Defined at:
  6027 ;;		line 92 in file "Library/iRobotSerial.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;		None
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;		None
  6032 ;; Return value:  Size  Location     Type
  6033 ;;                  1    wreg      void 
  6034 ;; Registers used:
  6035 ;;		wreg, status,2, status,0
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 0/0
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;Total ram usage:        1 bytes
  6046 ;; Hardware stack levels used:    1
  6047 ;; Hardware stack levels required when called:    7
  6048 ;; This function calls:
  6049 ;;		Nothing
  6050 ;; This function is called by:
  6051 ;;		_rx_assign
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text13
  6056  0166FC                     __ptext13:
  6057                           	opt stack 0
  6058  0166FC                     _sort_iRBumpDrop:
  6059                           	opt stack 19
  6060                           
  6061                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  6062                           
  6063                           ;incstack = 0
  6064  0166FC  A037               	btfss	_iRBumpDrop,0,c
  6065  0166FE  D002               	goto	l2058
  6066  016700  0E01               	movlw	1
  6067  016702  D001               	goto	L1
  6068  016704                     l2058:
  6069                           
  6070                           ; BSR set to: 0
  6071  016704  0E00               	movlw	0
  6072  016706                     L1:
  6073  016706  0100               	movlb	0	; () banked
  6074  016708  6FEF               	movwf	_iRBumpRight& (0+255),b
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  6078                           
  6079                           ; BSR set to: 0
  6080  01670A  C037  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6081  01670E  0100               	movlb	0	; () banked
  6082  016710  90D8               	bcf	status,0,c
  6083  016712  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6084  016714  0100               	movlb	0	; () banked
  6085  016716  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6086  016718  D002               	goto	l2062
  6087                           
  6088                           ; BSR set to: 0
  6089  01671A  0E01               	movlw	1
  6090  01671C  D001               	goto	L2
  6091  01671E                     l2062:
  6092                           
  6093                           ; BSR set to: 0
  6094                           
  6095                           ; BSR set to: 0
  6096  01671E  0E00               	movlw	0
  6097  016720                     L2:
  6098  016720  0100               	movlb	0	; () banked
  6099  016722  6FEE               	movwf	_iRBumpLeft& (0+255),b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  6103                           
  6104                           ; BSR set to: 0
  6105  016724  C037  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6106  016728  0100               	movlb	0	; () banked
  6107  01672A  90D8               	bcf	status,0,c
  6108  01672C  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6109  01672E  0100               	movlb	0	; () banked
  6110  016730  90D8               	bcf	status,0,c
  6111  016732  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6112  016734  0100               	movlb	0	; () banked
  6113  016736  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6114  016738  D002               	goto	l2066
  6115                           
  6116                           ; BSR set to: 0
  6117  01673A  0E01               	movlw	1
  6118  01673C  D001               	goto	L3
  6119  01673E                     l2066:
  6120                           
  6121                           ; BSR set to: 0
  6122                           
  6123                           ; BSR set to: 0
  6124  01673E  0E00               	movlw	0
  6125  016740                     L3:
  6126  016740  6E36               	movwf	_iRDropRight,c
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  6130                           
  6131                           ; BSR set to: 0
  6132  016742  C037  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6133  016746  0100               	movlb	0	; () banked
  6134  016748  90D8               	bcf	status,0,c
  6135  01674A  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6136  01674C  0100               	movlb	0	; () banked
  6137  01674E  90D8               	bcf	status,0,c
  6138  016750  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6139  016752  0100               	movlb	0	; () banked
  6140  016754  90D8               	bcf	status,0,c
  6141  016756  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6142  016758  0100               	movlb	0	; () banked
  6143  01675A  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6144  01675C  D002               	goto	l2070
  6145                           
  6146                           ; BSR set to: 0
  6147  01675E  0E01               	movlw	1
  6148  016760  D001               	goto	L4
  6149  016762                     l2070:
  6150                           
  6151                           ; BSR set to: 0
  6152                           
  6153                           ; BSR set to: 0
  6154  016762  0E00               	movlw	0
  6155  016764                     L4:
  6156  016764  6E35               	movwf	_iRDropLeft,c
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  6160                           
  6161                           ; BSR set to: 0
  6162  016766  C037  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6163  01676A  0100               	movlb	0	; () banked
  6164  01676C  3B60               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  6165  01676E  0E0F               	movlw	15
  6166  016770  1760               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  6167  016772  0100               	movlb	0	; () banked
  6168  016774  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6169  016776  D004               	goto	l2074
  6170                           
  6171                           ; BSR set to: 0
  6172  016778  0E01               	movlw	1
  6173  01677A  0103               	movlb	3	; () banked
  6174  01677C  6F34               	movwf	_iRDropCaster& (0+255),b
  6175  01677E  0012               	return	
  6176  016780                     l2074:
  6177                           
  6178                           ; BSR set to: 3
  6179  016780  0E00               	movlw	0
  6180  016782  0103               	movlb	3	; () banked
  6181  016784  6F34               	movwf	_iRDropCaster& (0+255),b
  6182  016786  0012               	return	
  6183  016788                     __end_of_sort_iRBumpDrop:
  6184                           	opt stack 0
  6185                           tblptru	equ	0xFF8
  6186                           tblptrh	equ	0xFF7
  6187                           tblptrl	equ	0xFF6
  6188                           tablat	equ	0xFF5
  6189                           prodh	equ	0xFF4
  6190                           prodl	equ	0xFF3
  6191                           postinc0	equ	0xFEE
  6192                           wreg	equ	0xFE8
  6193                           postdec1	equ	0xFE5
  6194                           fsr1h	equ	0xFE2
  6195                           fsr1l	equ	0xFE1
  6196                           indf2	equ	0xFDF
  6197                           fsr2h	equ	0xFDA
  6198                           fsr2l	equ	0xFD9
  6199                           status	equ	0xFD8
  6200                           
  6201 ;; *************** function _get_packet_size *****************
  6202 ;; Defined at:
  6203 ;;		line 60 in file "Library/iRobotSerial.c"
  6204 ;; Parameters:    Size  Location     Type
  6205 ;;  packetID        1    wreg     unsigned char 
  6206 ;; Auto vars:     Size  Location     Type
  6207 ;;  packetID        1    0[BANK0 ] unsigned char 
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  1    wreg      unsigned char 
  6210 ;; Registers used:
  6211 ;;		wreg, status,2, status,0
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;Total ram usage:        1 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    7
  6224 ;; This function calls:
  6225 ;;		Nothing
  6226 ;; This function is called by:
  6227 ;;		_irobot_query_and_update
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           	psect	text14
  6232  0170EC                     __ptext14:
  6233                           	opt stack 0
  6234  0170EC                     _get_packet_size:
  6235                           	opt stack 20
  6236                           
  6237                           ; BSR set to: 3
  6238                           ;incstack = 0
  6239                           ;get_packet_size@packetID stored from wreg
  6240  0170EC  0100               	movlb	0	; () banked
  6241  0170EE  6F60               	movwf	get_packet_size@packetID& (0+255),b
  6242                           
  6243                           ;iRobotSerial.c: 61: switch (packetID) {
  6244  0170F0  D012               	goto	l2021
  6245  0170F2  0E01               	movlw	1
  6246  0170F4  0012               	return	
  6247  0170F6  0E01               	movlw	1
  6248  0170F8  0012               	return	
  6249  0170FA  0E01               	movlw	1
  6250  0170FC  0012               	return	
  6251  0170FE  0E01               	movlw	1
  6252  017100  0012               	return	
  6253  017102  0E01               	movlw	1
  6254  017104  0012               	return	
  6255  017106  0E01               	movlw	1
  6256  017108  0012               	return	
  6257  01710A  0E01               	movlw	1
  6258  01710C  0012               	return	
  6259  01710E  0E02               	movlw	2
  6260  017110  0012               	return	
  6261  017112  0E02               	movlw	2
  6262                           
  6263                           ;iRobotSerial.c: 71: }
  6264  017114  0012               	return	
  6265  017116                     l2021:
  6266  017116  0100               	movlb	0	; () banked
  6267  017118  5160               	movf	get_packet_size@packetID& (0+255),w,b
  6268                           
  6269                           ; Switch size 1, requested type "space"
  6270                           ; Number of cases is 9, Range of values is 7 to 20
  6271                           ; switch strategies available:
  6272                           ; Name         Instructions Cycles
  6273                           ; simple_byte           28    15 (average)
  6274                           ;	Chosen strategy is simple_byte
  6275  01711A  0A07               	xorlw	7	; case 7
  6276  01711C  B4D8               	btfsc	status,2,c
  6277  01711E  D7E9               	goto	l2022
  6278  017120  0A0F               	xorlw	15	; case 8
  6279  017122  B4D8               	btfsc	status,2,c
  6280  017124  D7E8               	goto	l2024
  6281  017126  0A01               	xorlw	1	; case 9
  6282  017128  B4D8               	btfsc	status,2,c
  6283  01712A  D7E7               	goto	l2025
  6284  01712C  0A03               	xorlw	3	; case 10
  6285  01712E  B4D8               	btfsc	status,2,c
  6286  017130  D7E6               	goto	l2026
  6287  017132  0A01               	xorlw	1	; case 11
  6288  017134  B4D8               	btfsc	status,2,c
  6289  017136  D7E5               	goto	l2027
  6290  017138  0A07               	xorlw	7	; case 12
  6291  01713A  B4D8               	btfsc	status,2,c
  6292  01713C  D7E4               	goto	l2028
  6293  01713E  0A01               	xorlw	1	; case 13
  6294  017140  B4D8               	btfsc	status,2,c
  6295  017142  D7E3               	goto	l2029
  6296  017144  0A1E               	xorlw	30	; case 19
  6297  017146  B4D8               	btfsc	status,2,c
  6298  017148  D7E2               	goto	l2030
  6299  01714A  0A07               	xorlw	7	; case 20
  6300  01714C  A4D8               	btfss	status,2,c
  6301  01714E  0012               	return	
  6302  017150  D7E0               	goto	l2031
  6303  017152                     __end_of_get_packet_size:
  6304                           	opt stack 0
  6305                           tblptru	equ	0xFF8
  6306                           tblptrh	equ	0xFF7
  6307                           tblptrl	equ	0xFF6
  6308                           tablat	equ	0xFF5
  6309                           prodh	equ	0xFF4
  6310                           prodl	equ	0xFF3
  6311                           postinc0	equ	0xFEE
  6312                           wreg	equ	0xFE8
  6313                           postdec1	equ	0xFE5
  6314                           fsr1h	equ	0xFE2
  6315                           fsr1l	equ	0xFE1
  6316                           indf2	equ	0xFDF
  6317                           fsr2h	equ	0xFDA
  6318                           fsr2l	equ	0xFD9
  6319                           status	equ	0xFD8
  6320                           
  6321 ;; *************** function _eusart_getch *****************
  6322 ;; Defined at:
  6323 ;;		line 125 in file "Library/iRobotSerial.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;		None
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;		None
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  1    wreg      unsigned char 
  6330 ;; Registers used:
  6331 ;;		wreg, status,2
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;Total ram usage:        0 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    7
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_irobot_query_and_update
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           	psect	text15
  6352  0180BA                     __ptext15:
  6353                           	opt stack 0
  6354  0180BA                     _eusart_getch:
  6355                           	opt stack 20
  6356                           
  6357                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  6358                           
  6359                           ;incstack = 0
  6360  0180BA  AA9E               	btfss	3998,5,c	;volatile
  6361  0180BC  D7FE               	goto	_eusart_getch
  6362                           
  6363                           ;iRobotSerial.c: 127: return RCREG1;
  6364  0180BE  50AF               	movf	4015,w,c	;volatile
  6365  0180C0  0012               	return	
  6366  0180C2                     __end_of_eusart_getch:
  6367                           	opt stack 0
  6368                           tblptru	equ	0xFF8
  6369                           tblptrh	equ	0xFF7
  6370                           tblptrl	equ	0xFF6
  6371                           tablat	equ	0xFF5
  6372                           prodh	equ	0xFF4
  6373                           prodl	equ	0xFF3
  6374                           postinc0	equ	0xFEE
  6375                           wreg	equ	0xFE8
  6376                           postdec1	equ	0xFE5
  6377                           fsr1h	equ	0xFE2
  6378                           fsr1l	equ	0xFE1
  6379                           indf2	equ	0xFDF
  6380                           fsr2h	equ	0xFDA
  6381                           fsr2l	equ	0xFD9
  6382                           status	equ	0xFD8
  6383                           
  6384 ;; *************** function _printf *****************
  6385 ;; Defined at:
  6386 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;  f               2  105[BANK0 ] PTR const unsigned char 
  6389 ;;		 -> STR_14(21), STR_13(21), STR_12(21), STR_11(21), 
  6390 ;;		 -> STR_10(21), STR_9(3), STR_8(60), STR_7(3), 
  6391 ;;		 -> STR_6(14), STR_5(3), STR_4(46), STR_3(3), 
  6392 ;;		 -> STR_2(46), STR_1(3), 
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;  fval            4   20[BANK1 ] PTR const unsigned char 
  6395 ;;  tmpval          4   16[BANK1 ] struct .
  6396 ;;  val             4   10[BANK1 ] unsigned long 
  6397 ;;  cp              3    0        PTR const unsigned char 
  6398 ;;  exp             2   14[BANK1 ] int 
  6399 ;;  prec            2    8[BANK1 ] int 
  6400 ;;  flag            2    6[BANK1 ] unsigned short 
  6401 ;;  ap              2    4[BANK1 ] PTR void [1]
  6402 ;;		 -> ?_printf(2), 
  6403 ;;  len             2    0        unsigned int 
  6404 ;;  width           2    0        int 
  6405 ;;  c               1   24[BANK1 ] char 
  6406 ;;  d               1    0        unsigned char 
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  2  105[BANK0 ] int 
  6409 ;; Registers used:
  6410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6411 ;; Tracked objects:
  6412 ;;		On entry : 0/0
  6413 ;;		On exit  : 0/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6416 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Totals:         0      14      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;Total ram usage:       39 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:   12
  6423 ;; This function calls:
  6424 ;;		___awdiv
  6425 ;;		___fladd
  6426 ;;		___flge
  6427 ;;		___flmul
  6428 ;;		___flneg
  6429 ;;		___flsub
  6430 ;;		___fltol
  6431 ;;		___lldiv
  6432 ;;		___llmod
  6433 ;;		___wmul
  6434 ;;		___xxtofl
  6435 ;;		__div_to_l_
  6436 ;;		__tdiv_to_l_
  6437 ;;		_fround
  6438 ;;		_putch
  6439 ;;		_scale
  6440 ;; This function is called by:
  6441 ;;		_mode1
  6442 ;;		_mode2
  6443 ;;		_mode4
  6444 ;;		_main
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text16
  6449  010000                     __ptext16:
  6450                           	opt stack 0
  6451  010000                     _printf:
  6452                           	opt stack 18
  6453                           
  6454                           ;doprnt.c: 466: va_list ap;
  6455                           ;doprnt.c: 499: signed char c;
  6456                           ;doprnt.c: 501: int width;
  6457                           ;doprnt.c: 504: int prec;
  6458                           ;doprnt.c: 508: unsigned short flag;
  6459                           ;doprnt.c: 515: char d;
  6460                           ;doprnt.c: 516: double fval;
  6461                           ;doprnt.c: 517: int exp;
  6462                           ;doprnt.c: 523: union {
  6463                           ;doprnt.c: 524: unsigned long vd;
  6464                           ;doprnt.c: 525: double integ;
  6465                           ;doprnt.c: 526: } tmpval;
  6466                           ;doprnt.c: 528: unsigned long val;
  6467                           ;doprnt.c: 529: unsigned len;
  6468                           ;doprnt.c: 530: const char * cp;
  6469                           ;doprnt.c: 533: *ap = __va_start();
  6470                           
  6471                           ;incstack = 0
  6472  010000  0ECB               	movlw	low (?_printf+2)
  6473  010002  0101               	movlb	1	; () banked
  6474  010004  6F04               	movwf	printf@ap& (0+255),b
  6475  010006  0E00               	movlw	high (?_printf+2)
  6476  010008  0101               	movlb	1	; () banked
  6477  01000A  6F05               	movwf	(printf@ap+1)& (0+255),b
  6478                           
  6479                           ;doprnt.c: 536: while(c = *f++) {
  6480  01000C  EF56  F084         	goto	u14020
  6481  010010                     
  6482                           ; BSR set to: 1
  6483                           ;doprnt.c: 538: if(c != '%')
  6484                           
  6485                           ; BSR set to: 1
  6486  010010  0E25               	movlw	37
  6487  010012  0101               	movlb	1	; () banked
  6488  010014  1918               	xorwf	printf@c& (0+255),w,b
  6489  010016  B4D8               	btfsc	status,2,c
  6490  010018  D006               	goto	l2447
  6491                           
  6492                           ; BSR set to: 1
  6493                           ;doprnt.c: 540: {
  6494                           ;doprnt.c: 541: (putch(c) );
  6495  01001A  0101               	movlb	1	; () banked
  6496  01001C  5118               	movf	printf@c& (0+255),w,b
  6497  01001E  EC11  F0C0         	call	_putch
  6498                           
  6499                           ;doprnt.c: 542: continue;
  6500  010022  EF56  F084         	goto	u14020
  6501  010026                     l2447:
  6502                           
  6503                           ;doprnt.c: 543: }
  6504                           ;doprnt.c: 548: flag = 0;
  6505  010026  0E00               	movlw	0
  6506  010028  0101               	movlb	1	; () banked
  6507  01002A  6F07               	movwf	(printf@flag+1)& (0+255),b
  6508  01002C  0E00               	movlw	0
  6509  01002E  6F06               	movwf	printf@flag& (0+255),b
  6510                           
  6511                           ;doprnt.c: 635: switch(c = *f++) {
  6512  010030  D018               	goto	l2448
  6513  010032                     
  6514                           ; BSR set to: 1
  6515                           ;doprnt.c: 663: flag |= 0x400;
  6516                           
  6517                           ; BSR set to: 1
  6518  010032  0101               	movlb	1	; () banked
  6519  010034  8507               	bsf	(printf@flag+1)& (0+255),2,b
  6520                           
  6521                           ; BSR set to: 1
  6522                           ;doprnt.c: 698: case 'i':
  6523                           ;doprnt.c: 699: break;
  6524                           
  6525                           ; BSR set to: 1
  6526                           
  6527                           ;doprnt.c: 697: case 'd':
  6528                           
  6529                           ;doprnt.c: 664: break;
  6530  010036  D036               	goto	l2452
  6531  010038                     
  6532                           ; BSR set to: 1
  6533                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6534                           
  6535                           ; BSR set to: 1
  6536  010038  C104  FFD9         	movff	printf@ap,fsr2l
  6537  01003C  C105  FFDA         	movff	printf@ap+1,fsr2h
  6538  010040  50DF               	movf	indf2,w,c
  6539  010042  0101               	movlb	1	; () banked
  6540  010044  6F18               	movwf	printf@c& (0+255),b
  6541                           
  6542                           ; BSR set to: 1
  6543  010046  0E02               	movlw	2
  6544  010048  0101               	movlb	1	; () banked
  6545  01004A  2704               	addwf	printf@ap& (0+255),f,b
  6546  01004C  0E00               	movlw	0
  6547  01004E  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  6548  010050                     
  6549                           ; BSR set to: 1
  6550                           ;doprnt.c: 809: (putch(c) );
  6551                           
  6552                           ; BSR set to: 1
  6553  010050  0101               	movlb	1	; () banked
  6554  010052  5118               	movf	printf@c& (0+255),w,b
  6555  010054  EC11  F0C0         	call	_putch
  6556                           
  6557                           ;doprnt.c: 810: continue;
  6558  010058  EF56  F084         	goto	u14020
  6559  01005C                     
  6560                           ;doprnt.c: 818: flag |= 0x40;
  6561  01005C  0101               	movlb	1	; () banked
  6562  01005E  8D06               	bsf	printf@flag& (0+255),6,b
  6563                           
  6564                           ; BSR set to: 1
  6565                           ;doprnt.c: 822: }
  6566                           
  6567                           ;doprnt.c: 819: break;
  6568  010060  D021               	goto	l2452
  6569  010062                     l2448:
  6570                           
  6571                           ; BSR set to: 1
  6572                           
  6573                           ; BSR set to: 1
  6574  010062  C0C9  FFF6         	movff	printf@f,tblptrl
  6575  010066  C0CA  FFF7         	movff	printf@f+1,tblptrh
  6576  01006A  0100               	movlb	0	; () banked
  6577  01006C  4BC9               	infsnz	printf@f& (0+255),f,b
  6578  01006E  2BCA               	incf	(printf@f+1)& (0+255),f,b
  6579  010070                     	if	0	;tblptru may be non-zero
  6580  010070                     	endif
  6581  010070                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6582  010070  0E00               	movlw	low (__mediumconst shr (0+16))
  6583  010072  6EF8               	movwf	tblptru,c
  6584  010074                     	endif
  6585  010074  0008               	tblrd		*
  6586  010076  CFF5 F118          	movff	tablat,printf@c
  6587  01007A  0101               	movlb	1	; () banked
  6588  01007C  5118               	movf	printf@c& (0+255),w,b
  6589                           
  6590                           ; Switch size 1, requested type "space"
  6591                           ; Number of cases is 6, Range of values is 0 to 117
  6592                           ; switch strategies available:
  6593                           ; Name         Instructions Cycles
  6594                           ; simple_byte           19    10 (average)
  6595                           ;	Chosen strategy is simple_byte
  6596  01007E  0A00               	xorlw	0	; case 0
  6597  010080  B4D8               	btfsc	status,2,c
  6598  010082  0012               	return	
  6599  010084  0A63               	xorlw	99	; case 99
  6600  010086  B4D8               	btfsc	status,2,c
  6601  010088  D7D7               	goto	l2455
  6602  01008A  0A07               	xorlw	7	; case 100
  6603  01008C  B4D8               	btfsc	status,2,c
  6604  01008E  D00A               	goto	l2452
  6605  010090  0A02               	xorlw	2	; case 102
  6606  010092  B4D8               	btfsc	status,2,c
  6607  010094  D7CE               	goto	l2451
  6608  010096  0A0F               	xorlw	15	; case 105
  6609  010098  B4D8               	btfsc	status,2,c
  6610  01009A  D004               	goto	l2452
  6611  01009C  0A1C               	xorlw	28	; case 117
  6612  01009E  B4D8               	btfsc	status,2,c
  6613  0100A0  D7DD               	goto	l2457
  6614  0100A2  D7D6               	goto	l2456
  6615  0100A4                     l2452:
  6616                           
  6617                           ; BSR set to: 1
  6618                           ;doprnt.c: 825: if(flag & (0x700)) {
  6619                           
  6620                           ; BSR set to: 1
  6621  0100A4  0E07               	movlw	7
  6622  0100A6  0101               	movlb	1	; () banked
  6623  0100A8  1507               	andwf	(printf@flag+1)& (0+255),w,b
  6624  0100AA  B4D8               	btfsc	status,2,c
  6625  0100AC  D32E               	goto	l2458
  6626                           
  6627                           ; BSR set to: 1
  6628                           ;doprnt.c: 829: prec = 6;
  6629  0100AE  0E00               	movlw	0
  6630  0100B0  0101               	movlb	1	; () banked
  6631  0100B2  6F09               	movwf	(printf@prec+1)& (0+255),b
  6632  0100B4  0E06               	movlw	6
  6633  0100B6  6F08               	movwf	printf@prec& (0+255),b
  6634                           
  6635                           ; BSR set to: 1
  6636                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6637  0100B8  C104  FFD9         	movff	printf@ap,fsr2l
  6638  0100BC  C105  FFDA         	movff	printf@ap+1,fsr2h
  6639  0100C0  CFDE F114          	movff	postinc2,printf@fval
  6640  0100C4  CFDE F115          	movff	postinc2,printf@fval+1
  6641  0100C8  CFDE F116          	movff	postinc2,printf@fval+2
  6642  0100CC  CFDE F117          	movff	postinc2,printf@fval+3
  6643                           
  6644                           ; BSR set to: 1
  6645  0100D0  0E04               	movlw	4
  6646  0100D2  0101               	movlb	1	; () banked
  6647  0100D4  2704               	addwf	printf@ap& (0+255),f,b
  6648  0100D6  0E00               	movlw	0
  6649  0100D8  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  6650                           
  6651                           ; BSR set to: 1
  6652                           ;doprnt.c: 831: if(fval < 0.0) {
  6653  0100DA  0101               	movlb	1	; () banked
  6654  0100DC  AF17               	btfss	(printf@fval+3)& (0+255),7,b
  6655  0100DE  D015               	goto	l2459
  6656                           
  6657                           ; BSR set to: 1
  6658                           ;doprnt.c: 832: fval = -fval;
  6659  0100E0  C114  F060         	movff	printf@fval,___flneg@f1
  6660  0100E4  C115  F061         	movff	printf@fval+1,___flneg@f1+1
  6661  0100E8  C116  F062         	movff	printf@fval+2,___flneg@f1+2
  6662  0100EC  C117  F063         	movff	printf@fval+3,___flneg@f1+3
  6663  0100F0  EC18  F0BD         	call	___flneg	;wreg free
  6664  0100F4  C060  F114         	movff	?___flneg,printf@fval
  6665  0100F8  C061  F115         	movff	?___flneg+1,printf@fval+1
  6666  0100FC  C062  F116         	movff	?___flneg+2,printf@fval+2
  6667  010100  C063  F117         	movff	?___flneg+3,printf@fval+3
  6668                           
  6669                           ;doprnt.c: 833: flag |= 0x03;
  6670  010104  0E03               	movlw	3
  6671  010106  0101               	movlb	1	; () banked
  6672  010108  1306               	iorwf	printf@flag& (0+255),f,b
  6673  01010A                     l2459:
  6674                           
  6675                           ; BSR set to: 1
  6676                           ;doprnt.c: 834: }
  6677                           ;doprnt.c: 835: exp = 0;
  6678                           
  6679                           ; BSR set to: 1
  6680  01010A  0E00               	movlw	0
  6681  01010C  0101               	movlb	1	; () banked
  6682  01010E  6F0F               	movwf	(printf@exp+1)& (0+255),b
  6683  010110  0E00               	movlw	0
  6684  010112  6F0E               	movwf	printf@exp& (0+255),b
  6685                           
  6686                           ; BSR set to: 1
  6687                           ;doprnt.c: 836: if( fval!=0) {
  6688  010114  0101               	movlb	1	; () banked
  6689  010116  5114               	movf	printf@fval& (0+255),w,b
  6690  010118  0101               	movlb	1	; () banked
  6691  01011A  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  6692  01011C  0101               	movlb	1	; () banked
  6693  01011E  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  6694  010120  0101               	movlb	1	; () banked
  6695  010122  1117               	iorwf	(printf@fval+3)& (0+255),w,b
  6696  010124  B4D8               	btfsc	status,2,c
  6697  010126  D08E               	goto	l2464
  6698                           
  6699                           ; BSR set to: 1
  6700                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  6701  010128  0101               	movlb	1	; () banked
  6702  01012A  3516               	rlcf	(printf@fval+2)& (0+255),w,b
  6703  01012C  3517               	rlcf	(printf@fval+3)& (0+255),w,b
  6704  01012E  0F82               	addlw	130
  6705  010130  0101               	movlb	1	; () banked
  6706  010132  6F0E               	movwf	printf@exp& (0+255),b
  6707  010134  0101               	movlb	1	; () banked
  6708  010136  6B0F               	clrf	(printf@exp+1)& (0+255),b
  6709  010138  0EFF               	movlw	255
  6710  01013A  230F               	addwfc	(printf@exp+1)& (0+255),f,b
  6711                           
  6712                           ; BSR set to: 1
  6713                           ;doprnt.c: 838: exp--;
  6714  01013C  0101               	movlb	1	; () banked
  6715  01013E  070E               	decf	printf@exp& (0+255),f,b
  6716  010140  A0D8               	btfss	status,0,c
  6717  010142  070F               	decf	(printf@exp+1)& (0+255),f,b
  6718                           
  6719                           ; BSR set to: 1
  6720                           ;doprnt.c: 839: exp *= 3;
  6721  010144  C10E  F060         	movff	printf@exp,___wmul@multiplier
  6722  010148  C10F  F061         	movff	printf@exp+1,___wmul@multiplier+1
  6723  01014C  0E00               	movlw	0
  6724  01014E  0100               	movlb	0	; () banked
  6725  010150  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6726  010152  0E03               	movlw	3
  6727  010154  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6728  010156  EC34  F0BD         	call	___wmul	;wreg free
  6729  01015A  C060  F10E         	movff	?___wmul,printf@exp
  6730  01015E  C061  F10F         	movff	?___wmul+1,printf@exp+1
  6731                           
  6732                           ;doprnt.c: 840: exp /= 10;
  6733  010162  C10E  F066         	movff	printf@exp,___awdiv@dividend
  6734  010166  C10F  F067         	movff	printf@exp+1,___awdiv@dividend+1
  6735  01016A  0E00               	movlw	0
  6736  01016C  0100               	movlb	0	; () banked
  6737  01016E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  6738  010170  0E0A               	movlw	10
  6739  010172  6F68               	movwf	___awdiv@divisor& (0+255),b
  6740  010174  ECFD  F0AC         	call	___awdiv	;wreg free
  6741  010178  C066  F10E         	movff	?___awdiv,printf@exp
  6742  01017C  C067  F10F         	movff	?___awdiv+1,printf@exp+1
  6743                           
  6744                           ;doprnt.c: 841: if(exp < 0)
  6745  010180  0101               	movlb	1	; () banked
  6746  010182  AF0F               	btfss	(printf@exp+1)& (0+255),7,b
  6747  010184  D004               	goto	l2461
  6748                           
  6749                           ; BSR set to: 1
  6750                           ;doprnt.c: 842: exp--;
  6751  010186  0101               	movlb	1	; () banked
  6752  010188  070E               	decf	printf@exp& (0+255),f,b
  6753  01018A  A0D8               	btfss	status,0,c
  6754  01018C  070F               	decf	(printf@exp+1)& (0+255),f,b
  6755  01018E                     l2461:
  6756                           
  6757                           ; BSR set to: 1
  6758                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6759                           
  6760                           ; BSR set to: 1
  6761  01018E  0101               	movlb	1	; () banked
  6762  010190  510E               	movf	printf@exp& (0+255),w,b
  6763  010192  0800               	sublw	0
  6764  010194  EC68  F084         	call	_scale
  6765  010198  C0A0  F110         	movff	?_scale,printf@tmpval
  6766  01019C  C0A1  F111         	movff	?_scale+1,printf@tmpval+1
  6767  0101A0  C0A2  F112         	movff	?_scale+2,printf@tmpval+2
  6768  0101A4  C0A3  F113         	movff	?_scale+3,printf@tmpval+3
  6769                           
  6770                           ;doprnt.c: 847: tmpval.integ *= fval;
  6771  0101A8  C110  F087         	movff	printf@tmpval,___flmul@b
  6772  0101AC  C111  F088         	movff	printf@tmpval+1,___flmul@b+1
  6773  0101B0  C112  F089         	movff	printf@tmpval+2,___flmul@b+2
  6774  0101B4  C113  F08A         	movff	printf@tmpval+3,___flmul@b+3
  6775  0101B8  C114  F08B         	movff	printf@fval,___flmul@a
  6776  0101BC  C115  F08C         	movff	printf@fval+1,___flmul@a+1
  6777  0101C0  C116  F08D         	movff	printf@fval+2,___flmul@a+2
  6778  0101C4  C117  F08E         	movff	printf@fval+3,___flmul@a+3
  6779  0101C8  EC59  F089         	call	___flmul	;wreg free
  6780  0101CC  C087  F110         	movff	?___flmul,printf@tmpval
  6781  0101D0  C088  F111         	movff	?___flmul+1,printf@tmpval+1
  6782  0101D4  C089  F112         	movff	?___flmul+2,printf@tmpval+2
  6783  0101D8  C08A  F113         	movff	?___flmul+3,printf@tmpval+3
  6784                           
  6785                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6786  0101DC  C110  F060         	movff	printf@tmpval,___flge@ff1
  6787  0101E0  C111  F061         	movff	printf@tmpval+1,___flge@ff1+1
  6788  0101E4  C112  F062         	movff	printf@tmpval+2,___flge@ff1+2
  6789  0101E8  C113  F063         	movff	printf@tmpval+3,___flge@ff1+3
  6790  0101EC  0E00               	movlw	0
  6791  0101EE  0100               	movlb	0	; () banked
  6792  0101F0  6F64               	movwf	___flge@ff2& (0+255),b
  6793  0101F2  0E00               	movlw	0
  6794  0101F4  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  6795  0101F6  0E80               	movlw	128
  6796  0101F8  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  6797  0101FA  0E3F               	movlw	63
  6798  0101FC  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  6799  0101FE  ECD3  F0A0         	call	___flge	;wreg free
  6800  010202  0100               	movlb	0	; () banked
  6801  010204  B0D8               	btfsc	status,0,c
  6802  010206  D005               	goto	l2462
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;doprnt.c: 849: exp--;
  6806  010208  0101               	movlb	1	; () banked
  6807  01020A  070E               	decf	printf@exp& (0+255),f,b
  6808  01020C  A0D8               	btfss	status,0,c
  6809  01020E  070F               	decf	(printf@exp+1)& (0+255),f,b
  6810  010210  D019               	goto	l2464
  6811  010212                     l2462:
  6812                           
  6813                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6814                           
  6815                           ; BSR set to: 1
  6816  010212  C110  F060         	movff	printf@tmpval,___flge@ff1
  6817  010216  C111  F061         	movff	printf@tmpval+1,___flge@ff1+1
  6818  01021A  C112  F062         	movff	printf@tmpval+2,___flge@ff1+2
  6819  01021E  C113  F063         	movff	printf@tmpval+3,___flge@ff1+3
  6820  010222  0E00               	movlw	0
  6821  010224  0100               	movlb	0	; () banked
  6822  010226  6F64               	movwf	___flge@ff2& (0+255),b
  6823  010228  0E00               	movlw	0
  6824  01022A  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  6825  01022C  0E20               	movlw	32
  6826  01022E  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  6827  010230  0E41               	movlw	65
  6828  010232  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  6829  010234  ECD3  F0A0         	call	___flge	;wreg free
  6830  010238  0100               	movlb	0	; () banked
  6831  01023A  A0D8               	btfss	status,0,c
  6832  01023C  D003               	goto	l2464
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;doprnt.c: 851: exp++;
  6836  01023E  0101               	movlb	1	; () banked
  6837  010240  4B0E               	infsnz	printf@exp& (0+255),f,b
  6838  010242  2B0F               	incf	(printf@exp+1)& (0+255),f,b
  6839  010244                     l2464:
  6840                           
  6841                           ;doprnt.c: 852: }
  6842                           ;doprnt.c: 1112: if(prec <= 12)
  6843                           
  6844                           ; BSR set to: 1
  6845                           
  6846                           ; BSR set to: 1
  6847                           
  6848                           ; BSR set to: 1
  6849  010244  0101               	movlb	1	; () banked
  6850  010246  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  6851  010248  D008               	goto	u13800
  6852  01024A  0101               	movlb	1	; () banked
  6853  01024C  5109               	movf	(printf@prec+1)& (0+255),w,b
  6854  01024E  E123               	bnz	l16240
  6855  010250  0E0D               	movlw	13
  6856  010252  0101               	movlb	1	; () banked
  6857  010254  5D08               	subwf	printf@prec& (0+255),w,b
  6858  010256  B0D8               	btfsc	status,0,c
  6859  010258  D01E               	goto	l2465
  6860  01025A                     u13800:
  6861                           
  6862                           ; BSR set to: 1
  6863                           ;doprnt.c: 1113: fval += fround(prec);
  6864  01025A  C114  F0AD         	movff	printf@fval,___fladd@b
  6865  01025E  C115  F0AE         	movff	printf@fval+1,___fladd@b+1
  6866  010262  C116  F0AF         	movff	printf@fval+2,___fladd@b+2
  6867  010266  C117  F0B0         	movff	printf@fval+3,___fladd@b+3
  6868  01026A  0101               	movlb	1	; () banked
  6869  01026C  5108               	movf	printf@prec& (0+255),w,b
  6870  01026E  EC9E  F095         	call	_fround
  6871  010272  C0A0  F0B1         	movff	?_fround,___fladd@a
  6872  010276  C0A1  F0B2         	movff	?_fround+1,___fladd@a+1
  6873  01027A  C0A2  F0B3         	movff	?_fround+2,___fladd@a+2
  6874  01027E  C0A3  F0B4         	movff	?_fround+3,___fladd@a+3
  6875  010282  EC05  F087         	call	___fladd	;wreg free
  6876  010286  C0AD  F114         	movff	?___fladd,printf@fval
  6877  01028A  C0AE  F115         	movff	?___fladd+1,printf@fval+1
  6878  01028E  C0AF  F116         	movff	?___fladd+2,printf@fval+2
  6879  010292  C0B0  F117         	movff	?___fladd+3,printf@fval+3
  6880  010296                     l2465:
  6881  010296                     l16240:
  6882                           
  6883                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6884  010296  0101               	movlb	1	; () banked
  6885  010298  BF0F               	btfsc	(printf@exp+1)& (0+255),7,b
  6886  01029A  D008               	goto	u13810
  6887  01029C  0101               	movlb	1	; () banked
  6888  01029E  510F               	movf	(printf@exp+1)& (0+255),w,b
  6889  0102A0  E12E               	bnz	l16248
  6890  0102A2  0E0A               	movlw	10
  6891  0102A4  0101               	movlb	1	; () banked
  6892  0102A6  5D0E               	subwf	printf@exp& (0+255),w,b
  6893  0102A8  B0D8               	btfsc	status,0,c
  6894  0102AA  D029               	goto	u13840
  6895  0102AC                     u13810:
  6896                           
  6897                           ; BSR set to: 1
  6898  0102AC  0101               	movlb	1	; () banked
  6899  0102AE  5114               	movf	printf@fval& (0+255),w,b
  6900  0102B0  0101               	movlb	1	; () banked
  6901  0102B2  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  6902  0102B4  0101               	movlb	1	; () banked
  6903  0102B6  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  6904  0102B8  0101               	movlb	1	; () banked
  6905  0102BA  1117               	iorwf	(printf@fval+3)& (0+255),w,b
  6906  0102BC  B4D8               	btfsc	status,2,c
  6907  0102BE  D06D               	goto	l2466
  6908                           
  6909                           ; BSR set to: 1
  6910  0102C0  C114  F0B2         	movff	printf@fval,___fltol@f1
  6911  0102C4  C115  F0B3         	movff	printf@fval+1,___fltol@f1+1
  6912  0102C8  C116  F0B4         	movff	printf@fval+2,___fltol@f1+2
  6913  0102CC  C117  F0B5         	movff	printf@fval+3,___fltol@f1+3
  6914  0102D0  ECD7  F0A7         	call	___fltol	;wreg free
  6915  0102D4  0100               	movlb	0	; () banked
  6916  0102D6  51B2               	movf	?___fltol& (0+255),w,b
  6917  0102D8  0100               	movlb	0	; () banked
  6918  0102DA  11B3               	iorwf	(?___fltol+1)& (0+255),w,b
  6919  0102DC  0100               	movlb	0	; () banked
  6920  0102DE  11B4               	iorwf	(?___fltol+2)& (0+255),w,b
  6921  0102E0  0100               	movlb	0	; () banked
  6922  0102E2  11B5               	iorwf	(?___fltol+3)& (0+255),w,b
  6923  0102E4  A4D8               	btfss	status,2,c
  6924  0102E6  D059               	goto	l2466
  6925                           
  6926                           ; BSR set to: 0
  6927  0102E8  0101               	movlb	1	; () banked
  6928  0102EA  BF0F               	btfsc	(printf@exp+1)& (0+255),7,b
  6929  0102EC  D056               	goto	l2466
  6930  0102EE  0101               	movlb	1	; () banked
  6931  0102F0  510F               	movf	(printf@exp+1)& (0+255),w,b
  6932  0102F2  E105               	bnz	l16248
  6933  0102F4  0E02               	movlw	2
  6934  0102F6  0101               	movlb	1	; () banked
  6935  0102F8  5D0E               	subwf	printf@exp& (0+255),w,b
  6936  0102FA  A0D8               	btfss	status,0,c
  6937  0102FC  D04E               	goto	l2466
  6938  0102FE                     u13840:
  6939  0102FE                     l16248:
  6940                           
  6941                           ; BSR set to: 1
  6942                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6943  0102FE  C110  F060         	movff	printf@tmpval,___flge@ff1
  6944  010302  C111  F061         	movff	printf@tmpval+1,___flge@ff1+1
  6945  010306  C112  F062         	movff	printf@tmpval+2,___flge@ff1+2
  6946  01030A  C113  F063         	movff	printf@tmpval+3,___flge@ff1+3
  6947  01030E  0E5F               	movlw	95
  6948  010310  0100               	movlb	0	; () banked
  6949  010312  6F64               	movwf	___flge@ff2& (0+255),b
  6950  010314  0E70               	movlw	112
  6951  010316  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  6952  010318  0E89               	movlw	137
  6953  01031A  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  6954  01031C  0E40               	movlw	64
  6955  01031E  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  6956  010320  ECD3  F0A0         	call	___flge	;wreg free
  6957  010324  0100               	movlb	0	; () banked
  6958  010326  B0D8               	btfsc	status,0,c
  6959  010328  D003               	goto	l2469
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6963  01032A  0101               	movlb	1	; () banked
  6964  01032C  0EF7               	movlw	247
  6965  01032E  D002               	goto	L5
  6966  010330                     l2469:
  6967                           
  6968                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6969                           
  6970                           ; BSR set to: 1
  6971  010330  0101               	movlb	1	; () banked
  6972  010332  0EF8               	movlw	248
  6973  010334                     L5:
  6974  010334  270E               	addwf	printf@exp& (0+255),f,b
  6975  010336  0EFF               	movlw	255
  6976  010338  230F               	addwfc	(printf@exp+1)& (0+255),f,b
  6977                           
  6978                           ; BSR set to: 1
  6979                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6980                           
  6981                           ; BSR set to: 1
  6982  01033A  0101               	movlb	1	; () banked
  6983  01033C  510E               	movf	printf@exp& (0+255),w,b
  6984  01033E  EC68  F084         	call	_scale
  6985  010342  C0A0  F110         	movff	?_scale,printf@tmpval
  6986  010346  C0A1  F111         	movff	?_scale+1,printf@tmpval+1
  6987  01034A  C0A2  F112         	movff	?_scale+2,printf@tmpval+2
  6988  01034E  C0A3  F113         	movff	?_scale+3,printf@tmpval+3
  6989  010352  C114  F060         	movff	printf@fval,__div_to_l_@f1
  6990  010356  C115  F061         	movff	printf@fval+1,__div_to_l_@f1+1
  6991  01035A  C116  F062         	movff	printf@fval+2,__div_to_l_@f1+2
  6992  01035E  C117  F063         	movff	printf@fval+3,__div_to_l_@f1+3
  6993  010362  C110  F064         	movff	printf@tmpval,__div_to_l_@f2
  6994  010366  C111  F065         	movff	printf@tmpval+1,__div_to_l_@f2+1
  6995  01036A  C112  F066         	movff	printf@tmpval+2,__div_to_l_@f2+2
  6996  01036E  C113  F067         	movff	printf@tmpval+3,__div_to_l_@f2+3
  6997  010372  EC9B  F0A1         	call	__div_to_l_	;wreg free
  6998  010376  C060  F10A         	movff	?__div_to_l_,printf@val
  6999  01037A  C061  F10B         	movff	?__div_to_l_+1,printf@val+1
  7000  01037E  C062  F10C         	movff	?__div_to_l_+2,printf@val+2
  7001  010382  C063  F10D         	movff	?__div_to_l_+3,printf@val+3
  7002                           
  7003                           ;doprnt.c: 1129: fval = 0.0;
  7004  010386  0E00               	movlw	0
  7005  010388  0101               	movlb	1	; () banked
  7006  01038A  6F14               	movwf	printf@fval& (0+255),b
  7007  01038C  0E00               	movlw	0
  7008  01038E  6F15               	movwf	(printf@fval+1)& (0+255),b
  7009  010390  0E00               	movlw	0
  7010  010392  6F16               	movwf	(printf@fval+2)& (0+255),b
  7011  010394  0E00               	movlw	0
  7012  010396  6F17               	movwf	(printf@fval+3)& (0+255),b
  7013                           
  7014                           ;doprnt.c: 1130: } else {
  7015  010398  D03C               	goto	l2475
  7016  01039A                     l2466:
  7017                           
  7018                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7019                           
  7020                           ; BSR set to: 1
  7021  01039A  C114  F0B2         	movff	printf@fval,___fltol@f1
  7022  01039E  C115  F0B3         	movff	printf@fval+1,___fltol@f1+1
  7023  0103A2  C116  F0B4         	movff	printf@fval+2,___fltol@f1+2
  7024  0103A6  C117  F0B5         	movff	printf@fval+3,___fltol@f1+3
  7025  0103AA  ECD7  F0A7         	call	___fltol	;wreg free
  7026  0103AE  C0B2  F10A         	movff	?___fltol,printf@val
  7027  0103B2  C0B3  F10B         	movff	?___fltol+1,printf@val+1
  7028  0103B6  C0B4  F10C         	movff	?___fltol+2,printf@val+2
  7029  0103BA  C0B5  F10D         	movff	?___fltol+3,printf@val+3
  7030                           
  7031                           ;doprnt.c: 1132: fval -= (double)val;
  7032  0103BE  C114  F0C1         	movff	printf@fval,___flsub@b
  7033  0103C2  C115  F0C2         	movff	printf@fval+1,___flsub@b+1
  7034  0103C6  C116  F0C3         	movff	printf@fval+2,___flsub@b+2
  7035  0103CA  C117  F0C4         	movff	printf@fval+3,___flsub@b+3
  7036  0103CE  C10A  F060         	movff	printf@val,___xxtofl@val
  7037  0103D2  C10B  F061         	movff	printf@val+1,___xxtofl@val+1
  7038  0103D6  C10C  F062         	movff	printf@val+2,___xxtofl@val+2
  7039  0103DA  C10D  F063         	movff	printf@val+3,___xxtofl@val+3
  7040  0103DE  0E00               	movlw	0
  7041  0103E0  ECA7  F09C         	call	___xxtofl
  7042  0103E4  C060  F0C5         	movff	?___xxtofl,___flsub@a
  7043  0103E8  C061  F0C6         	movff	?___xxtofl+1,___flsub@a+1
  7044  0103EC  C062  F0C7         	movff	?___xxtofl+2,___flsub@a+2
  7045  0103F0  C063  F0C8         	movff	?___xxtofl+3,___flsub@a+3
  7046  0103F4  ECE7  F0BA         	call	___flsub	;wreg free
  7047  0103F8  C0C1  F114         	movff	?___flsub,printf@fval
  7048  0103FC  C0C2  F115         	movff	?___flsub+1,printf@fval+1
  7049  010400  C0C3  F116         	movff	?___flsub+2,printf@fval+2
  7050  010404  C0C4  F117         	movff	?___flsub+3,printf@fval+3
  7051                           
  7052                           ;doprnt.c: 1133: exp = 0;
  7053  010408  0E00               	movlw	0
  7054  01040A  0101               	movlb	1	; () banked
  7055  01040C  6F0F               	movwf	(printf@exp+1)& (0+255),b
  7056  01040E  0E00               	movlw	0
  7057  010410  6F0E               	movwf	printf@exp& (0+255),b
  7058  010412                     l2475:
  7059                           
  7060                           ; BSR set to: 1
  7061                           ;doprnt.c: 1134: }
  7062                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7063                           
  7064                           ; BSR set to: 1
  7065  010412  0E01               	movlw	1
  7066  010414  0101               	movlb	1	; () banked
  7067  010416  6F18               	movwf	printf@c& (0+255),b
  7068  010418                     l16268:
  7069                           
  7070                           ; BSR set to: 1
  7071  010418  0E0A               	movlw	10
  7072  01041A  0101               	movlb	1	; () banked
  7073  01041C  1918               	xorwf	printf@c& (0+255),w,b
  7074  01041E  B4D8               	btfsc	status,2,c
  7075  010420  D021               	goto	u13880
  7076                           
  7077                           ; BSR set to: 1
  7078                           ;doprnt.c: 1137: if(val < dpowers[c])
  7079                           
  7080                           ; BSR set to: 1
  7081                           
  7082                           ; BSR set to: 1
  7083  010422  0101               	movlb	1	; () banked
  7084  010424  5118               	movf	printf@c& (0+255),w,b
  7085  010426  0D04               	mullw	4
  7086  010428  0E13               	movlw	low _dpowers
  7087  01042A  24F3               	addwf	prodl,w,c
  7088  01042C  6EF6               	movwf	tblptrl,c
  7089  01042E  0EFD               	movlw	high _dpowers
  7090  010430  20F4               	addwfc	prodh,w,c
  7091  010432  6EF7               	movwf	tblptrh,c
  7092  010434                     	if	1	;There are 3 active tblptr bytes
  7093  010434  6AF8               	clrf	tblptru,c
  7094  010436  0E00               	movlw	low (__mediumconst shr (0+16))
  7095  010438  22F8               	addwfc	tblptru,f,c
  7096  01043A                     	endif
  7097  01043A  0009               	tblrd		*+
  7098  01043C  50F5               	movf	tablat,w,c
  7099  01043E  0101               	movlb	1	; () banked
  7100  010440  5D0A               	subwf	printf@val& (0+255),w,b
  7101  010442  0009               	tblrd		*+
  7102  010444  50F5               	movf	tablat,w,c
  7103  010446  0101               	movlb	1	; () banked
  7104  010448  590B               	subwfb	(printf@val+1)& (0+255),w,b
  7105  01044A  0009               	tblrd		*+
  7106  01044C  50F5               	movf	tablat,w,c
  7107  01044E  0101               	movlb	1	; () banked
  7108  010450  590C               	subwfb	(printf@val+2)& (0+255),w,b
  7109  010452  0009               	tblrd		*+
  7110  010454  50F5               	movf	tablat,w,c
  7111  010456  0101               	movlb	1	; () banked
  7112  010458  590D               	subwfb	(printf@val+3)& (0+255),w,b
  7113  01045A  A0D8               	btfss	status,0,c
  7114  01045C  D003               	goto	u13880
  7115                           
  7116                           ; BSR set to: 1
  7117                           
  7118                           ; BSR set to: 1
  7119                           
  7120                           ; BSR set to: 1
  7121                           ;doprnt.c: 1138: break;
  7122  01045E  0101               	movlb	1	; () banked
  7123  010460  2B18               	incf	printf@c& (0+255),f,b
  7124  010462  D7DA               	goto	l16268
  7125  010464                     u13880:
  7126                           
  7127                           ; BSR set to: 1
  7128                           ;doprnt.c: 1175: {
  7129                           ;doprnt.c: 1188: if(flag & 0x03)
  7130                           
  7131                           ; BSR set to: 1
  7132  010464  0E03               	movlw	3
  7133  010466  0101               	movlb	1	; () banked
  7134  010468  1506               	andwf	printf@flag& (0+255),w,b
  7135  01046A  0100               	movlb	0	; () banked
  7136  01046C  6FD5               	movwf	??_printf& (0+255),b
  7137  01046E  0E00               	movlw	0
  7138  010470  0101               	movlb	1	; () banked
  7139  010472  1507               	andwf	(printf@flag+1)& (0+255),w,b
  7140  010474  0100               	movlb	0	; () banked
  7141  010476  6FD6               	movwf	(??_printf+1)& (0+255),b
  7142  010478  0100               	movlb	0	; () banked
  7143  01047A  51D5               	movf	??_printf& (0+255),w,b
  7144  01047C  0100               	movlb	0	; () banked
  7145  01047E  11D6               	iorwf	(??_printf+1)& (0+255),w,b
  7146  010480  B4D8               	btfsc	status,2,c
  7147  010482  D04E               	goto	l2480
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;doprnt.c: 1190: (putch('-') );
  7151  010484  0E2D               	movlw	45
  7152  010486  EC11  F0C0         	call	_putch
  7153                           
  7154                           ;doprnt.c: 1195: }
  7155                           ;doprnt.c: 1196: while(c--) {
  7156  01048A  D04A               	goto	l2480
  7157  01048C                     
  7158                           ;doprnt.c: 1200: {
  7159                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7160  01048C  C10A  F060         	movff	printf@val,___lldiv@dividend
  7161  010490  C10B  F061         	movff	printf@val+1,___lldiv@dividend+1
  7162  010494  C10C  F062         	movff	printf@val+2,___lldiv@dividend+2
  7163  010498  C10D  F063         	movff	printf@val+3,___lldiv@dividend+3
  7164  01049C  0101               	movlb	1	; () banked
  7165  01049E  5118               	movf	printf@c& (0+255),w,b
  7166  0104A0  0D04               	mullw	4
  7167  0104A2  0E13               	movlw	low _dpowers
  7168  0104A4  24F3               	addwf	prodl,w,c
  7169  0104A6  6EF6               	movwf	tblptrl,c
  7170  0104A8  0EFD               	movlw	high _dpowers
  7171  0104AA  20F4               	addwfc	prodh,w,c
  7172  0104AC  6EF7               	movwf	tblptrh,c
  7173  0104AE                     	if	1	;There are 3 active tblptr bytes
  7174  0104AE  6AF8               	clrf	tblptru,c
  7175  0104B0  0E00               	movlw	low (__mediumconst shr (0+16))
  7176  0104B2  22F8               	addwfc	tblptru,f,c
  7177  0104B4                     	endif
  7178  0104B4  0009               	tblrd		*+
  7179  0104B6  CFF5 F064          	movff	tablat,___lldiv@divisor
  7180  0104BA  0009               	tblrd		*+
  7181  0104BC  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  7182  0104C0  0009               	tblrd		*+
  7183  0104C2  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  7184  0104C6  000A               	tblrd		*-
  7185  0104C8  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  7186  0104CC  EC5C  F0AD         	call	___lldiv	;wreg free
  7187  0104D0  C060  F110         	movff	?___lldiv,printf@tmpval
  7188  0104D4  C061  F111         	movff	?___lldiv+1,printf@tmpval+1
  7189  0104D8  C062  F112         	movff	?___lldiv+2,printf@tmpval+2
  7190  0104DC  C063  F113         	movff	?___lldiv+3,printf@tmpval+3
  7191                           
  7192                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7193  0104E0  C110  F06D         	movff	printf@tmpval,___llmod@dividend
  7194  0104E4  C111  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
  7195  0104E8  C112  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
  7196  0104EC  C113  F070         	movff	printf@tmpval+3,___llmod@dividend+3
  7197  0104F0  0E0A               	movlw	10
  7198  0104F2  0100               	movlb	0	; () banked
  7199  0104F4  6F71               	movwf	___llmod@divisor& (0+255),b
  7200  0104F6  0E00               	movlw	0
  7201  0104F8  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  7202  0104FA  0E00               	movlw	0
  7203  0104FC  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  7204  0104FE  0E00               	movlw	0
  7205  010500  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  7206  010502  EC56  F0B2         	call	___llmod	;wreg free
  7207  010506  C06D  F110         	movff	?___llmod,printf@tmpval
  7208  01050A  C06E  F111         	movff	?___llmod+1,printf@tmpval+1
  7209  01050E  C06F  F112         	movff	?___llmod+2,printf@tmpval+2
  7210  010512  C070  F113         	movff	?___llmod+3,printf@tmpval+3
  7211                           
  7212                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7213  010516  0101               	movlb	1	; () banked
  7214  010518  5110               	movf	printf@tmpval& (0+255),w,b
  7215  01051A  0F30               	addlw	48
  7216  01051C  EC11  F0C0         	call	_putch
  7217  010520                     l2480:
  7218  010520  0101               	movlb	1	; () banked
  7219  010522  0718               	decf	printf@c& (0+255),f,b
  7220  010524  0101               	movlb	1	; () banked
  7221  010526  2918               	incf	printf@c& (0+255),w,b
  7222  010528  B4D8               	btfsc	status,2,c
  7223  01052A  D008               	goto	l2483
  7224  01052C  D7AF               	goto	l2481
  7225  01052E                     l16292:
  7226                           
  7227                           ; BSR set to: 1
  7228                           ;doprnt.c: 1208: (putch('0') );
  7229  01052E  0E30               	movlw	48
  7230  010530  EC11  F0C0         	call	_putch
  7231                           
  7232                           ;doprnt.c: 1209: exp--;
  7233  010534  0101               	movlb	1	; () banked
  7234  010536  070E               	decf	printf@exp& (0+255),f,b
  7235  010538  A0D8               	btfss	status,0,c
  7236  01053A  070F               	decf	(printf@exp+1)& (0+255),f,b
  7237  01053C                     l2483:
  7238                           
  7239                           ; BSR set to: 1
  7240                           
  7241                           ; BSR set to: 1
  7242  01053C  0101               	movlb	1	; () banked
  7243  01053E  BF0F               	btfsc	(printf@exp+1)& (0+255),7,b
  7244  010540  D007               	goto	u13910
  7245  010542  0101               	movlb	1	; () banked
  7246  010544  510F               	movf	(printf@exp+1)& (0+255),w,b
  7247  010546  E1F3               	bnz	l16292
  7248  010548  0101               	movlb	1	; () banked
  7249  01054A  050E               	decf	printf@exp& (0+255),w,b
  7250  01054C  B0D8               	btfsc	status,0,c
  7251  01054E  D7EF               	goto	l2484
  7252  010550                     u13910:
  7253                           
  7254                           ; BSR set to: 1
  7255                           ;doprnt.c: 1210: }
  7256                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7257                           
  7258                           ; BSR set to: 1
  7259  010550  0101               	movlb	1	; () banked
  7260  010552  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  7261  010554  D00C               	goto	l2486
  7262  010556  0101               	movlb	1	; () banked
  7263  010558  5109               	movf	(printf@prec+1)& (0+255),w,b
  7264  01055A  E105               	bnz	u13920
  7265  01055C  0E09               	movlw	9
  7266  01055E  0101               	movlb	1	; () banked
  7267  010560  5D08               	subwf	printf@prec& (0+255),w,b
  7268  010562  A0D8               	btfss	status,0,c
  7269  010564  D004               	goto	l2486
  7270  010566                     u13920:
  7271                           
  7272                           ; BSR set to: 1
  7273                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7274  010566  0E08               	movlw	8
  7275  010568  0101               	movlb	1	; () banked
  7276  01056A  6F18               	movwf	printf@c& (0+255),b
  7277  01056C  D002               	goto	l2487
  7278  01056E                     l2486:
  7279                           
  7280                           ; BSR set to: 1
  7281                           ;doprnt.c: 1213: else
  7282                           ;doprnt.c: 1214: c = prec;
  7283  01056E  C108  F118         	movff	printf@prec,printf@c
  7284  010572                     l2487:
  7285                           
  7286                           ; BSR set to: 1
  7287                           ;doprnt.c: 1215: prec -= c;
  7288                           
  7289                           ; BSR set to: 1
  7290  010572  0101               	movlb	1	; () banked
  7291  010574  5118               	movf	printf@c& (0+255),w,b
  7292  010576  0101               	movlb	1	; () banked
  7293  010578  5F08               	subwf	printf@prec& (0+255),f,b
  7294  01057A  0E00               	movlw	0
  7295  01057C  0101               	movlb	1	; () banked
  7296  01057E  BF18               	btfsc	printf@c& (0+255),7,b
  7297  010580  0EFF               	movlw	255
  7298  010582  0101               	movlb	1	; () banked
  7299  010584  5B09               	subwfb	(printf@prec+1)& (0+255),f,b
  7300                           
  7301                           ; BSR set to: 1
  7302                           ;doprnt.c: 1219: if(c)
  7303  010586  0101               	movlb	1	; () banked
  7304  010588  5118               	movf	printf@c& (0+255),w,b
  7305  01058A  0101               	movlb	1	; () banked
  7306  01058C  B4D8               	btfsc	status,2,c
  7307  01058E  D003               	goto	l2488
  7308                           
  7309                           ; BSR set to: 1
  7310                           ;doprnt.c: 1221: (putch('.') );
  7311  010590  0E2E               	movlw	46
  7312  010592  EC11  F0C0         	call	_putch
  7313  010596                     l2488:
  7314                           
  7315                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7316  010596  0101               	movlb	1	; () banked
  7317  010598  5118               	movf	printf@c& (0+255),w,b
  7318  01059A  EC68  F084         	call	_scale
  7319  01059E  C0A0  F100         	movff	?_scale,_printf$15636
  7320  0105A2  C0A1  F101         	movff	?_scale+1,_printf$15636+1
  7321  0105A6  C0A2  F102         	movff	?_scale+2,_printf$15636+2
  7322  0105AA  C0A3  F103         	movff	?_scale+3,_printf$15636+3
  7323                           
  7324                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7325  0105AE  C114  F08B         	movff	printf@fval,___flmul@a
  7326  0105B2  C115  F08C         	movff	printf@fval+1,___flmul@a+1
  7327  0105B6  C116  F08D         	movff	printf@fval+2,___flmul@a+2
  7328  0105BA  C117  F08E         	movff	printf@fval+3,___flmul@a+3
  7329  0105BE  C100  F087         	movff	_printf$15636,___flmul@b
  7330  0105C2  C101  F088         	movff	_printf$15636+1,___flmul@b+1
  7331  0105C6  C102  F089         	movff	_printf$15636+2,___flmul@b+2
  7332  0105CA  C103  F08A         	movff	_printf$15636+3,___flmul@b+3
  7333  0105CE  EC59  F089         	call	___flmul	;wreg free
  7334  0105D2  C087  F0B2         	movff	?___flmul,___fltol@f1
  7335  0105D6  C088  F0B3         	movff	?___flmul+1,___fltol@f1+1
  7336  0105DA  C089  F0B4         	movff	?___flmul+2,___fltol@f1+2
  7337  0105DE  C08A  F0B5         	movff	?___flmul+3,___fltol@f1+3
  7338  0105E2  ECD7  F0A7         	call	___fltol	;wreg free
  7339  0105E6  C0B2  F10A         	movff	?___fltol,printf@val
  7340  0105EA  C0B3  F10B         	movff	?___fltol+1,printf@val+1
  7341  0105EE  C0B4  F10C         	movff	?___fltol+2,printf@val+2
  7342  0105F2  C0B5  F10D         	movff	?___fltol+3,printf@val+3
  7343                           
  7344                           ;doprnt.c: 1228: while(c--) {
  7345  0105F6  D074               	goto	l2489
  7346  0105F8                     
  7347                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7348  0105F8  C10A  F060         	movff	printf@val,___lldiv@dividend
  7349  0105FC  C10B  F061         	movff	printf@val+1,___lldiv@dividend+1
  7350  010600  C10C  F062         	movff	printf@val+2,___lldiv@dividend+2
  7351  010604  C10D  F063         	movff	printf@val+3,___lldiv@dividend+3
  7352  010608  0101               	movlb	1	; () banked
  7353  01060A  5118               	movf	printf@c& (0+255),w,b
  7354  01060C  0D04               	mullw	4
  7355  01060E  0E13               	movlw	low _dpowers
  7356  010610  24F3               	addwf	prodl,w,c
  7357  010612  6EF6               	movwf	tblptrl,c
  7358  010614  0EFD               	movlw	high _dpowers
  7359  010616  20F4               	addwfc	prodh,w,c
  7360  010618  6EF7               	movwf	tblptrh,c
  7361  01061A                     	if	1	;There are 3 active tblptr bytes
  7362  01061A  6AF8               	clrf	tblptru,c
  7363  01061C  0E00               	movlw	low (__mediumconst shr (0+16))
  7364  01061E  22F8               	addwfc	tblptru,f,c
  7365  010620                     	endif
  7366  010620  0009               	tblrd		*+
  7367  010622  CFF5 F064          	movff	tablat,___lldiv@divisor
  7368  010626  0009               	tblrd		*+
  7369  010628  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  7370  01062C  0009               	tblrd		*+
  7371  01062E  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  7372  010632  000A               	tblrd		*-
  7373  010634  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  7374  010638  EC5C  F0AD         	call	___lldiv	;wreg free
  7375  01063C  C060  F110         	movff	?___lldiv,printf@tmpval
  7376  010640  C061  F111         	movff	?___lldiv+1,printf@tmpval+1
  7377  010644  C062  F112         	movff	?___lldiv+2,printf@tmpval+2
  7378  010648  C063  F113         	movff	?___lldiv+3,printf@tmpval+3
  7379                           
  7380                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7381  01064C  C110  F06D         	movff	printf@tmpval,___llmod@dividend
  7382  010650  C111  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
  7383  010654  C112  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
  7384  010658  C113  F070         	movff	printf@tmpval+3,___llmod@dividend+3
  7385  01065C  0E0A               	movlw	10
  7386  01065E  0100               	movlb	0	; () banked
  7387  010660  6F71               	movwf	___llmod@divisor& (0+255),b
  7388  010662  0E00               	movlw	0
  7389  010664  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  7390  010666  0E00               	movlw	0
  7391  010668  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  7392  01066A  0E00               	movlw	0
  7393  01066C  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  7394  01066E  EC56  F0B2         	call	___llmod	;wreg free
  7395  010672  C06D  F110         	movff	?___llmod,printf@tmpval
  7396  010676  C06E  F111         	movff	?___llmod+1,printf@tmpval+1
  7397  01067A  C06F  F112         	movff	?___llmod+2,printf@tmpval+2
  7398  01067E  C070  F113         	movff	?___llmod+3,printf@tmpval+3
  7399                           
  7400                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7401  010682  0101               	movlb	1	; () banked
  7402  010684  5110               	movf	printf@tmpval& (0+255),w,b
  7403  010686  0F30               	addlw	48
  7404  010688  EC11  F0C0         	call	_putch
  7405                           
  7406                           ;doprnt.c: 1232: val %= dpowers[c];
  7407  01068C  C10A  F06D         	movff	printf@val,___llmod@dividend
  7408  010690  C10B  F06E         	movff	printf@val+1,___llmod@dividend+1
  7409  010694  C10C  F06F         	movff	printf@val+2,___llmod@dividend+2
  7410  010698  C10D  F070         	movff	printf@val+3,___llmod@dividend+3
  7411  01069C  0101               	movlb	1	; () banked
  7412  01069E  5118               	movf	printf@c& (0+255),w,b
  7413  0106A0  0D04               	mullw	4
  7414  0106A2  0E13               	movlw	low _dpowers
  7415  0106A4  24F3               	addwf	prodl,w,c
  7416  0106A6  6EF6               	movwf	tblptrl,c
  7417  0106A8  0EFD               	movlw	high _dpowers
  7418  0106AA  20F4               	addwfc	prodh,w,c
  7419  0106AC  6EF7               	movwf	tblptrh,c
  7420  0106AE                     	if	1	;There are 3 active tblptr bytes
  7421  0106AE  6AF8               	clrf	tblptru,c
  7422  0106B0  0E00               	movlw	low (__mediumconst shr (0+16))
  7423  0106B2  22F8               	addwfc	tblptru,f,c
  7424  0106B4                     	endif
  7425  0106B4  0009               	tblrd		*+
  7426  0106B6  CFF5 F071          	movff	tablat,___llmod@divisor
  7427  0106BA  0009               	tblrd		*+
  7428  0106BC  CFF5 F072          	movff	tablat,___llmod@divisor+1
  7429  0106C0  0009               	tblrd		*+
  7430  0106C2  CFF5 F073          	movff	tablat,___llmod@divisor+2
  7431  0106C6  000A               	tblrd		*-
  7432  0106C8  CFF5 F074          	movff	tablat,___llmod@divisor+3
  7433  0106CC  EC56  F0B2         	call	___llmod	;wreg free
  7434  0106D0  C06D  F10A         	movff	?___llmod,printf@val
  7435  0106D4  C06E  F10B         	movff	?___llmod+1,printf@val+1
  7436  0106D8  C06F  F10C         	movff	?___llmod+2,printf@val+2
  7437  0106DC  C070  F10D         	movff	?___llmod+3,printf@val+3
  7438  0106E0                     l2489:
  7439  0106E0  0101               	movlb	1	; () banked
  7440  0106E2  0718               	decf	printf@c& (0+255),f,b
  7441  0106E4  0101               	movlb	1	; () banked
  7442  0106E6  2918               	incf	printf@c& (0+255),w,b
  7443  0106E8  B4D8               	btfsc	status,2,c
  7444  0106EA  D008               	goto	l2492
  7445  0106EC  D785               	goto	l2490
  7446  0106EE                     
  7447                           ; BSR set to: 1
  7448                           ;doprnt.c: 1236: (putch('0') );
  7449                           
  7450                           ; BSR set to: 1
  7451  0106EE  0E30               	movlw	48
  7452  0106F0  EC11  F0C0         	call	_putch
  7453                           
  7454                           ;doprnt.c: 1237: prec--;
  7455  0106F4  0101               	movlb	1	; () banked
  7456  0106F6  0708               	decf	printf@prec& (0+255),f,b
  7457  0106F8  A0D8               	btfss	status,0,c
  7458  0106FA  0709               	decf	(printf@prec+1)& (0+255),f,b
  7459  0106FC                     l2492:
  7460                           
  7461                           ; BSR set to: 1
  7462                           
  7463                           ; BSR set to: 1
  7464  0106FC  0101               	movlb	1	; () banked
  7465  0106FE  5108               	movf	printf@prec& (0+255),w,b
  7466  010700  0101               	movlb	1	; () banked
  7467  010702  1109               	iorwf	(printf@prec+1)& (0+255),w,b
  7468  010704  B4D8               	btfsc	status,2,c
  7469  010706  D0D2               	goto	u14020
  7470  010708  D7F2               	goto	l2493
  7471  01070A                     l2458:
  7472                           
  7473                           ; BSR set to: 1
  7474                           ;doprnt.c: 1246: }
  7475                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7476  01070A  0101               	movlb	1	; () banked
  7477  01070C  BD06               	btfsc	printf@flag& (0+255),6,b
  7478  01070E  D023               	goto	l2495
  7479                           
  7480                           ; BSR set to: 1
  7481                           ;doprnt.c: 1253: {
  7482                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7483  010710  C104  FFD9         	movff	printf@ap,fsr2l
  7484  010714  C105  FFDA         	movff	printf@ap+1,fsr2h
  7485  010718  CFDE F10A          	movff	postinc2,printf@val
  7486  01071C  CFDD F10B          	movff	postdec2,printf@val+1
  7487  010720  0101               	movlb	1	; () banked
  7488  010722  0E00               	movlw	0
  7489  010724  BF0B               	btfsc	(printf@val+1)& (0+255),7,b
  7490  010726  0EFF               	movlw	-1
  7491  010728  6F0C               	movwf	(printf@val+2)& (0+255),b
  7492  01072A  6F0D               	movwf	(printf@val+3)& (0+255),b
  7493                           
  7494                           ; BSR set to: 1
  7495  01072C  0E02               	movlw	2
  7496  01072E  0101               	movlb	1	; () banked
  7497  010730  2704               	addwf	printf@ap& (0+255),f,b
  7498  010732  0E00               	movlw	0
  7499  010734  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  7500                           
  7501                           ; BSR set to: 1
  7502                           ;doprnt.c: 1261: if((long)val < 0) {
  7503  010736  0101               	movlb	1	; () banked
  7504  010738  AF0D               	btfss	(printf@val+3)& (0+255),7,b
  7505  01073A  D021               	goto	l2497
  7506                           
  7507                           ; BSR set to: 1
  7508                           ;doprnt.c: 1262: flag |= 0x03;
  7509  01073C  0E03               	movlw	3
  7510  01073E  0101               	movlb	1	; () banked
  7511  010740  1306               	iorwf	printf@flag& (0+255),f,b
  7512                           
  7513                           ; BSR set to: 1
  7514                           ;doprnt.c: 1263: val = -val;
  7515  010742  0101               	movlb	1	; () banked
  7516  010744  1F0D               	comf	(printf@val+3)& (0+255),f,b
  7517  010746  1F0C               	comf	(printf@val+2)& (0+255),f,b
  7518  010748  1F0B               	comf	(printf@val+1)& (0+255),f,b
  7519  01074A  6D0A               	negf	printf@val& (0+255),b
  7520  01074C  0E00               	movlw	0
  7521  01074E  230B               	addwfc	(printf@val+1)& (0+255),f,b
  7522  010750  230C               	addwfc	(printf@val+2)& (0+255),f,b
  7523  010752  230D               	addwfc	(printf@val+3)& (0+255),f,b
  7524                           
  7525                           ; BSR set to: 1
  7526                           ;doprnt.c: 1264: }
  7527                           ;doprnt.c: 1266: }
  7528  010754  D014               	goto	l2497
  7529  010756                     l2495:
  7530                           
  7531                           ; BSR set to: 1
  7532                           ;doprnt.c: 1268: else
  7533                           ;doprnt.c: 1273: {
  7534                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7535                           
  7536                           ; BSR set to: 1
  7537  010756  C104  FFD9         	movff	printf@ap,fsr2l
  7538  01075A  C105  FFDA         	movff	printf@ap+1,fsr2h
  7539  01075E  CFDE F0D5          	movff	postinc2,??_printf
  7540  010762  CFDD F0D6          	movff	postdec2,??_printf+1
  7541  010766  C0D5  F10A         	movff	??_printf,printf@val
  7542  01076A  C0D6  F10B         	movff	??_printf+1,printf@val+1
  7543  01076E  0101               	movlb	1	; () banked
  7544  010770  6B0C               	clrf	(printf@val+2)& (0+255),b
  7545  010772  6B0D               	clrf	(printf@val+3)& (0+255),b
  7546                           
  7547                           ; BSR set to: 1
  7548  010774  0E02               	movlw	2
  7549  010776  0101               	movlb	1	; () banked
  7550  010778  2704               	addwf	printf@ap& (0+255),f,b
  7551  01077A  0E00               	movlw	0
  7552  01077C  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  7553  01077E                     l2497:
  7554                           
  7555                           ; BSR set to: 1
  7556                           ;doprnt.c: 1287: }
  7557                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7558                           
  7559                           ; BSR set to: 1
  7560  01077E  0E01               	movlw	1
  7561  010780  0101               	movlb	1	; () banked
  7562  010782  6F18               	movwf	printf@c& (0+255),b
  7563  010784                     l16344:
  7564                           
  7565                           ; BSR set to: 1
  7566  010784  0E0A               	movlw	10
  7567  010786  0101               	movlb	1	; () banked
  7568  010788  1918               	xorwf	printf@c& (0+255),w,b
  7569  01078A  B4D8               	btfsc	status,2,c
  7570  01078C  D021               	goto	u14000
  7571                           
  7572                           ; BSR set to: 1
  7573                           ;doprnt.c: 1306: if(val < dpowers[c])
  7574                           
  7575                           ; BSR set to: 1
  7576                           
  7577                           ; BSR set to: 1
  7578  01078E  0101               	movlb	1	; () banked
  7579  010790  5118               	movf	printf@c& (0+255),w,b
  7580  010792  0D04               	mullw	4
  7581  010794  0E13               	movlw	low _dpowers
  7582  010796  24F3               	addwf	prodl,w,c
  7583  010798  6EF6               	movwf	tblptrl,c
  7584  01079A  0EFD               	movlw	high _dpowers
  7585  01079C  20F4               	addwfc	prodh,w,c
  7586  01079E  6EF7               	movwf	tblptrh,c
  7587  0107A0                     	if	1	;There are 3 active tblptr bytes
  7588  0107A0  6AF8               	clrf	tblptru,c
  7589  0107A2  0E00               	movlw	low (__mediumconst shr (0+16))
  7590  0107A4  22F8               	addwfc	tblptru,f,c
  7591  0107A6                     	endif
  7592  0107A6  0009               	tblrd		*+
  7593  0107A8  50F5               	movf	tablat,w,c
  7594  0107AA  0101               	movlb	1	; () banked
  7595  0107AC  5D0A               	subwf	printf@val& (0+255),w,b
  7596  0107AE  0009               	tblrd		*+
  7597  0107B0  50F5               	movf	tablat,w,c
  7598  0107B2  0101               	movlb	1	; () banked
  7599  0107B4  590B               	subwfb	(printf@val+1)& (0+255),w,b
  7600  0107B6  0009               	tblrd		*+
  7601  0107B8  50F5               	movf	tablat,w,c
  7602  0107BA  0101               	movlb	1	; () banked
  7603  0107BC  590C               	subwfb	(printf@val+2)& (0+255),w,b
  7604  0107BE  0009               	tblrd		*+
  7605  0107C0  50F5               	movf	tablat,w,c
  7606  0107C2  0101               	movlb	1	; () banked
  7607  0107C4  590D               	subwfb	(printf@val+3)& (0+255),w,b
  7608  0107C6  A0D8               	btfss	status,0,c
  7609  0107C8  D003               	goto	u14000
  7610                           
  7611                           ; BSR set to: 1
  7612                           
  7613                           ; BSR set to: 1
  7614                           
  7615                           ; BSR set to: 1
  7616                           ;doprnt.c: 1307: break;
  7617  0107CA  0101               	movlb	1	; () banked
  7618  0107CC  2B18               	incf	printf@c& (0+255),f,b
  7619  0107CE  D7DA               	goto	l16344
  7620  0107D0                     u14000:
  7621                           
  7622                           ; BSR set to: 1
  7623                           ;doprnt.c: 1422: {
  7624                           ;doprnt.c: 1438: if(flag & 0x03)
  7625                           
  7626                           ; BSR set to: 1
  7627  0107D0  0E03               	movlw	3
  7628  0107D2  0101               	movlb	1	; () banked
  7629  0107D4  1506               	andwf	printf@flag& (0+255),w,b
  7630  0107D6  0100               	movlb	0	; () banked
  7631  0107D8  6FD5               	movwf	??_printf& (0+255),b
  7632  0107DA  0E00               	movlw	0
  7633  0107DC  0101               	movlb	1	; () banked
  7634  0107DE  1507               	andwf	(printf@flag+1)& (0+255),w,b
  7635  0107E0  0100               	movlb	0	; () banked
  7636  0107E2  6FD6               	movwf	(??_printf+1)& (0+255),b
  7637  0107E4  0100               	movlb	0	; () banked
  7638  0107E6  51D5               	movf	??_printf& (0+255),w,b
  7639  0107E8  0100               	movlb	0	; () banked
  7640  0107EA  11D6               	iorwf	(??_printf+1)& (0+255),w,b
  7641  0107EC  B4D8               	btfsc	status,2,c
  7642  0107EE  D003               	goto	l2501
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;doprnt.c: 1439: (putch('-') );
  7646  0107F0  0E2D               	movlw	45
  7647  0107F2  EC11  F0C0         	call	_putch
  7648  0107F6                     l2501:
  7649                           
  7650                           ;doprnt.c: 1469: }
  7651                           ;doprnt.c: 1472: prec = c;
  7652  0107F6  0101               	movlb	1	; () banked
  7653  0107F8  5118               	movf	printf@c& (0+255),w,b
  7654  0107FA  0101               	movlb	1	; () banked
  7655  0107FC  6F08               	movwf	printf@prec& (0+255),b
  7656  0107FE  6B09               	clrf	(printf@prec+1)& (0+255),b
  7657  010800  BF08               	btfsc	printf@prec& (0+255),7,b
  7658  010802  0709               	decf	(printf@prec+1)& (0+255),f,b
  7659                           
  7660                           ;doprnt.c: 1474: while(prec--) {
  7661  010804  D048               	goto	l2502
  7662  010806                     l16362:
  7663                           
  7664                           ; BSR set to: 1
  7665                           ;doprnt.c: 1478: {
  7666                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7667  010806  C108  F0D5         	movff	printf@prec,??_printf
  7668  01080A  C109  F0D6         	movff	printf@prec+1,??_printf+1
  7669  01080E  0100               	movlb	0	; () banked
  7670  010810  90D8               	bcf	status,0,c
  7671  010812  37D5               	rlcf	??_printf& (0+255),f,b
  7672  010814  37D6               	rlcf	(??_printf+1)& (0+255),f,b
  7673  010816  0100               	movlb	0	; () banked
  7674  010818  90D8               	bcf	status,0,c
  7675  01081A  37D5               	rlcf	??_printf& (0+255),f,b
  7676  01081C  37D6               	rlcf	(??_printf+1)& (0+255),f,b
  7677  01081E  0E13               	movlw	low _dpowers
  7678  010820  0100               	movlb	0	; () banked
  7679  010822  25D5               	addwf	??_printf& (0+255),w,b
  7680  010824  6EF6               	movwf	tblptrl,c
  7681  010826  0EFD               	movlw	high _dpowers
  7682  010828  21D6               	addwfc	(??_printf+1)& (0+255),w,b
  7683  01082A  6EF7               	movwf	tblptrh,c
  7684  01082C                     	if	1	;There are 3 active tblptr bytes
  7685  01082C  6AF8               	clrf	tblptru,c
  7686  01082E  0E00               	movlw	low (__mediumconst shr (0+16))
  7687  010830  22F8               	addwfc	tblptru,f,c
  7688  010832                     	endif
  7689  010832  0009               	tblrd		*+
  7690  010834  CFF5 F064          	movff	tablat,___lldiv@divisor
  7691  010838  0009               	tblrd		*+
  7692  01083A  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  7693  01083E  0009               	tblrd		*+
  7694  010840  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  7695  010844  000A               	tblrd		*-
  7696  010846  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  7697  01084A  C10A  F060         	movff	printf@val,___lldiv@dividend
  7698  01084E  C10B  F061         	movff	printf@val+1,___lldiv@dividend+1
  7699  010852  C10C  F062         	movff	printf@val+2,___lldiv@dividend+2
  7700  010856  C10D  F063         	movff	printf@val+3,___lldiv@dividend+3
  7701  01085A  EC5C  F0AD         	call	___lldiv	;wreg free
  7702  01085E  C060  F06D         	movff	?___lldiv,___llmod@dividend
  7703  010862  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  7704  010866  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  7705  01086A  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  7706  01086E  0E0A               	movlw	10
  7707  010870  0100               	movlb	0	; () banked
  7708  010872  6F71               	movwf	___llmod@divisor& (0+255),b
  7709  010874  0E00               	movlw	0
  7710  010876  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  7711  010878  0E00               	movlw	0
  7712  01087A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  7713  01087C  0E00               	movlw	0
  7714  01087E  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  7715  010880  EC56  F0B2         	call	___llmod	;wreg free
  7716  010884  0100               	movlb	0	; () banked
  7717  010886  516D               	movf	?___llmod& (0+255),w,b
  7718  010888  0F30               	addlw	48
  7719  01088A  0101               	movlb	1	; () banked
  7720  01088C  6F18               	movwf	printf@c& (0+255),b
  7721                           
  7722                           ; BSR set to: 1
  7723                           ;doprnt.c: 1523: }
  7724                           ;doprnt.c: 1524: (putch(c) );
  7725  01088E  0101               	movlb	1	; () banked
  7726  010890  5118               	movf	printf@c& (0+255),w,b
  7727  010892  EC11  F0C0         	call	_putch
  7728  010896                     l2502:
  7729  010896  0101               	movlb	1	; () banked
  7730  010898  0708               	decf	printf@prec& (0+255),f,b
  7731  01089A  A0D8               	btfss	status,0,c
  7732  01089C  0709               	decf	(printf@prec+1)& (0+255),f,b
  7733  01089E  0101               	movlb	1	; () banked
  7734  0108A0  2908               	incf	printf@prec& (0+255),w,b
  7735  0108A2  E1B1               	bnz	l16362
  7736  0108A4  0101               	movlb	1	; () banked
  7737  0108A6  2909               	incf	(printf@prec+1)& (0+255),w,b
  7738  0108A8  A4D8               	btfss	status,2,c
  7739  0108AA  D7AD               	goto	l2503
  7740  0108AC                     u14020:
  7741                           
  7742                           ; BSR set to: 1
  7743                           
  7744                           ; BSR set to: 1
  7745  0108AC  C0C9  FFF6         	movff	printf@f,tblptrl
  7746  0108B0  C0CA  FFF7         	movff	printf@f+1,tblptrh
  7747  0108B4  0100               	movlb	0	; () banked
  7748  0108B6  4BC9               	infsnz	printf@f& (0+255),f,b
  7749  0108B8  2BCA               	incf	(printf@f+1)& (0+255),f,b
  7750  0108BA                     	if	0	;tblptru may be non-zero
  7751  0108BA                     	endif
  7752  0108BA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7753  0108BA  0E00               	movlw	low (__mediumconst shr (0+16))
  7754  0108BC  6EF8               	movwf	tblptru,c
  7755  0108BE                     	endif
  7756  0108BE  0008               	tblrd		*
  7757  0108C0  CFF5 F118          	movff	tablat,printf@c
  7758  0108C4  0101               	movlb	1	; () banked
  7759  0108C6  5118               	movf	printf@c& (0+255),w,b
  7760  0108C8  B4D8               	btfsc	status,2,c
  7761  0108CA  0012               	return	
  7762  0108CC  EF08  F080         	goto	l2446
  7763  0108D0                     __end_of_printf:
  7764                           	opt stack 0
  7765                           tblptru	equ	0xFF8
  7766                           tblptrh	equ	0xFF7
  7767                           tblptrl	equ	0xFF6
  7768                           tablat	equ	0xFF5
  7769                           prodh	equ	0xFF4
  7770                           prodl	equ	0xFF3
  7771                           postinc0	equ	0xFEE
  7772                           wreg	equ	0xFE8
  7773                           postdec1	equ	0xFE5
  7774                           fsr1h	equ	0xFE2
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function _scale *****************
  7784 ;; Defined at:
  7785 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  scl             1    wreg     char 
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  scl             1   72[BANK0 ] char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  4   64[BANK0 ] char 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7799 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;Total ram usage:        9 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    8
  7806 ;; This function calls:
  7807 ;;		___awdiv
  7808 ;;		___awmod
  7809 ;;		___flmul
  7810 ;; This function is called by:
  7811 ;;		_printf
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text17
  7816  0108D0                     __ptext17:
  7817                           	opt stack 0
  7818  0108D0                     _scale:
  7819                           	opt stack 21
  7820                           
  7821                           ; BSR set to: 1
  7822                           ;incstack = 0
  7823                           ;scale@scl stored from wreg
  7824  0108D0  0100               	movlb	0	; () banked
  7825  0108D2  6FA8               	movwf	scale@scl& (0+255),b
  7826                           
  7827                           ;doprnt.c: 428: if(scl < 0) {
  7828  0108D4  0100               	movlb	0	; () banked
  7829  0108D6  AFA8               	btfss	scale@scl& (0+255),7,b
  7830  0108D8  D14D               	goto	l2435
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;doprnt.c: 429: scl = -scl;
  7834  0108DA  0100               	movlb	0	; () banked
  7835  0108DC  6DA8               	negf	scale@scl& (0+255),b
  7836                           
  7837                           ;doprnt.c: 430: if(scl>=110)
  7838  0108DE  0100               	movlb	0	; () banked
  7839  0108E0  51A8               	movf	scale@scl& (0+255),w,b
  7840  0108E2  0A80               	xorlw	128
  7841  0108E4  0F12               	addlw	-238
  7842  0108E6  A0D8               	btfss	status,0,c
  7843  0108E8  D0BB               	goto	l2436
  7844                           
  7845                           ; BSR set to: 0
  7846                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7847  0108EA  0E00               	movlw	0
  7848  0108EC  0100               	movlb	0	; () banked
  7849  0108EE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7850  0108F0  0E0A               	movlw	10
  7851  0108F2  6F68               	movwf	___awdiv@divisor& (0+255),b
  7852  0108F4  0E00               	movlw	0
  7853  0108F6  0100               	movlb	0	; () banked
  7854  0108F8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7855  0108FA  0E64               	movlw	100
  7856  0108FC  6F62               	movwf	___awmod@divisor& (0+255),b
  7857  0108FE  0100               	movlb	0	; () banked
  7858  010900  51A8               	movf	scale@scl& (0+255),w,b
  7859  010902  0100               	movlb	0	; () banked
  7860  010904  6F60               	movwf	___awmod@dividend& (0+255),b
  7861  010906  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7862  010908  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7863  01090A  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7864  01090C  EC67  F0B1         	call	___awmod	;wreg free
  7865  010910  C060  F066         	movff	?___awmod,___awdiv@dividend
  7866  010914  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  7867  010918  ECFD  F0AC         	call	___awdiv	;wreg free
  7868  01091C  0100               	movlb	0	; () banked
  7869  01091E  90D8               	bcf	status,0,c
  7870  010920  3766               	rlcf	?___awdiv& (0+255),f,b
  7871  010922  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  7872  010924  0100               	movlb	0	; () banked
  7873  010926  90D8               	bcf	status,0,c
  7874  010928  3766               	rlcf	?___awdiv& (0+255),f,b
  7875  01092A  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  7876  01092C  0E24               	movlw	36
  7877  01092E  0100               	movlb	0	; () banked
  7878  010930  2766               	addwf	?___awdiv& (0+255),f,b
  7879  010932  0E00               	movlw	0
  7880  010934  0100               	movlb	0	; () banked
  7881  010936  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
  7882  010938  0EDF               	movlw	low __npowers_
  7883  01093A  0100               	movlb	0	; () banked
  7884  01093C  2566               	addwf	?___awdiv& (0+255),w,b
  7885  01093E  6EF6               	movwf	tblptrl,c
  7886  010940  0EFC               	movlw	high __npowers_
  7887  010942  0100               	movlb	0	; () banked
  7888  010944  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7889  010946  6EF7               	movwf	tblptrh,c
  7890  010948                     	if	1	;There are 3 active tblptr bytes
  7891  010948  6AF8               	clrf	tblptru,c
  7892  01094A  0E00               	movlw	low (__mediumconst shr (0+16))
  7893  01094C  22F8               	addwfc	tblptru,f,c
  7894  01094E                     	endif
  7895  01094E  0009               	tblrd		*+
  7896  010950  CFF5 F08B          	movff	tablat,___flmul@a
  7897  010954  0009               	tblrd		*+
  7898  010956  CFF5 F08C          	movff	tablat,___flmul@a+1
  7899  01095A  0009               	tblrd		*+
  7900  01095C  CFF5 F08D          	movff	tablat,___flmul@a+2
  7901  010960  000A               	tblrd		*-
  7902  010962  CFF5 F08E          	movff	tablat,___flmul@a+3
  7903  010966  0E00               	movlw	0
  7904  010968  0100               	movlb	0	; () banked
  7905  01096A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7906  01096C  0E64               	movlw	100
  7907  01096E  6F68               	movwf	___awdiv@divisor& (0+255),b
  7908  010970  0100               	movlb	0	; () banked
  7909  010972  51A8               	movf	scale@scl& (0+255),w,b
  7910  010974  0100               	movlb	0	; () banked
  7911  010976  6F66               	movwf	___awdiv@dividend& (0+255),b
  7912  010978  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7913  01097A  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7914  01097C  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7915  01097E  ECFD  F0AC         	call	___awdiv	;wreg free
  7916  010982  0100               	movlb	0	; () banked
  7917  010984  90D8               	bcf	status,0,c
  7918  010986  3766               	rlcf	?___awdiv& (0+255),f,b
  7919  010988  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  7920  01098A  0100               	movlb	0	; () banked
  7921  01098C  90D8               	bcf	status,0,c
  7922  01098E  3766               	rlcf	?___awdiv& (0+255),f,b
  7923  010990  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  7924  010992  0E48               	movlw	72
  7925  010994  0100               	movlb	0	; () banked
  7926  010996  2766               	addwf	?___awdiv& (0+255),f,b
  7927  010998  0E00               	movlw	0
  7928  01099A  0100               	movlb	0	; () banked
  7929  01099C  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
  7930  01099E  0EDF               	movlw	low __npowers_
  7931  0109A0  0100               	movlb	0	; () banked
  7932  0109A2  2566               	addwf	?___awdiv& (0+255),w,b
  7933  0109A4  6EF6               	movwf	tblptrl,c
  7934  0109A6  0EFC               	movlw	high __npowers_
  7935  0109A8  0100               	movlb	0	; () banked
  7936  0109AA  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7937  0109AC  6EF7               	movwf	tblptrh,c
  7938  0109AE                     	if	1	;There are 3 active tblptr bytes
  7939  0109AE  6AF8               	clrf	tblptru,c
  7940  0109B0  0E00               	movlw	low (__mediumconst shr (0+16))
  7941  0109B2  22F8               	addwfc	tblptru,f,c
  7942  0109B4                     	endif
  7943  0109B4  0009               	tblrd		*+
  7944  0109B6  CFF5 F087          	movff	tablat,___flmul@b
  7945  0109BA  0009               	tblrd		*+
  7946  0109BC  CFF5 F088          	movff	tablat,___flmul@b+1
  7947  0109C0  0009               	tblrd		*+
  7948  0109C2  CFF5 F089          	movff	tablat,___flmul@b+2
  7949  0109C6  000A               	tblrd		*-
  7950  0109C8  CFF5 F08A          	movff	tablat,___flmul@b+3
  7951  0109CC  EC59  F089         	call	___flmul	;wreg free
  7952  0109D0  C087  F0A4         	movff	?___flmul,_scale$15635
  7953  0109D4  C088  F0A5         	movff	?___flmul+1,_scale$15635+1
  7954  0109D8  C089  F0A6         	movff	?___flmul+2,_scale$15635+2
  7955  0109DC  C08A  F0A7         	movff	?___flmul+3,_scale$15635+3
  7956                           
  7957                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7958  0109E0  C0A4  F087         	movff	_scale$15635,___flmul@b
  7959  0109E4  C0A5  F088         	movff	_scale$15635+1,___flmul@b+1
  7960  0109E8  C0A6  F089         	movff	_scale$15635+2,___flmul@b+2
  7961  0109EC  C0A7  F08A         	movff	_scale$15635+3,___flmul@b+3
  7962  0109F0  0E00               	movlw	0
  7963  0109F2  0100               	movlb	0	; () banked
  7964  0109F4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7965  0109F6  0E0A               	movlw	10
  7966  0109F8  6F62               	movwf	___awmod@divisor& (0+255),b
  7967  0109FA  0100               	movlb	0	; () banked
  7968  0109FC  51A8               	movf	scale@scl& (0+255),w,b
  7969  0109FE  0100               	movlb	0	; () banked
  7970  010A00  6F60               	movwf	___awmod@dividend& (0+255),b
  7971  010A02  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7972  010A04  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7973  010A06  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7974  010A08  EC67  F0B1         	call	___awmod	;wreg free
  7975  010A0C  0100               	movlb	0	; () banked
  7976  010A0E  90D8               	bcf	status,0,c
  7977  010A10  3760               	rlcf	?___awmod& (0+255),f,b
  7978  010A12  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  7979  010A14  0100               	movlb	0	; () banked
  7980  010A16  90D8               	bcf	status,0,c
  7981  010A18  3760               	rlcf	?___awmod& (0+255),f,b
  7982  010A1A  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  7983  010A1C  0EDF               	movlw	low __npowers_
  7984  010A1E  0100               	movlb	0	; () banked
  7985  010A20  2560               	addwf	?___awmod& (0+255),w,b
  7986  010A22  6EF6               	movwf	tblptrl,c
  7987  010A24  0EFC               	movlw	high __npowers_
  7988  010A26  0100               	movlb	0	; () banked
  7989  010A28  2161               	addwfc	(?___awmod+1)& (0+255),w,b
  7990  010A2A  6EF7               	movwf	tblptrh,c
  7991  010A2C                     	if	1	;There are 3 active tblptr bytes
  7992  010A2C  6AF8               	clrf	tblptru,c
  7993  010A2E  0E00               	movlw	low (__mediumconst shr (0+16))
  7994  010A30  22F8               	addwfc	tblptru,f,c
  7995  010A32                     	endif
  7996  010A32  0009               	tblrd		*+
  7997  010A34  CFF5 F08B          	movff	tablat,___flmul@a
  7998  010A38  0009               	tblrd		*+
  7999  010A3A  CFF5 F08C          	movff	tablat,___flmul@a+1
  8000  010A3E  0009               	tblrd		*+
  8001  010A40  CFF5 F08D          	movff	tablat,___flmul@a+2
  8002  010A44  000A               	tblrd		*-
  8003  010A46  CFF5 F08E          	movff	tablat,___flmul@a+3
  8004  010A4A  EC59  F089         	call	___flmul	;wreg free
  8005  010A4E  C087  F0A0         	movff	?___flmul,?_scale
  8006  010A52  C088  F0A1         	movff	?___flmul+1,?_scale+1
  8007  010A56  C089  F0A2         	movff	?___flmul+2,?_scale+2
  8008  010A5A  C08A  F0A3         	movff	?___flmul+3,?_scale+3
  8009  010A5E  0012               	return	
  8010  010A60                     l2436:
  8011                           
  8012                           ;doprnt.c: 432: else if(scl > 10)
  8013  010A60  0100               	movlb	0	; () banked
  8014  010A62  51A8               	movf	scale@scl& (0+255),w,b
  8015  010A64  0A80               	xorlw	128
  8016  010A66  0F75               	addlw	-139
  8017  010A68  A0D8               	btfss	status,0,c
  8018  010A6A  D06B               	goto	l2439
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8022  010A6C  0E00               	movlw	0
  8023  010A6E  0100               	movlb	0	; () banked
  8024  010A70  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8025  010A72  0E0A               	movlw	10
  8026  010A74  6F68               	movwf	___awdiv@divisor& (0+255),b
  8027  010A76  0100               	movlb	0	; () banked
  8028  010A78  51A8               	movf	scale@scl& (0+255),w,b
  8029  010A7A  0100               	movlb	0	; () banked
  8030  010A7C  6F66               	movwf	___awdiv@dividend& (0+255),b
  8031  010A7E  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  8032  010A80  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  8033  010A82  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8034  010A84  ECFD  F0AC         	call	___awdiv	;wreg free
  8035  010A88  0100               	movlb	0	; () banked
  8036  010A8A  90D8               	bcf	status,0,c
  8037  010A8C  3766               	rlcf	?___awdiv& (0+255),f,b
  8038  010A8E  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  8039  010A90  0100               	movlb	0	; () banked
  8040  010A92  90D8               	bcf	status,0,c
  8041  010A94  3766               	rlcf	?___awdiv& (0+255),f,b
  8042  010A96  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  8043  010A98  0E24               	movlw	36
  8044  010A9A  0100               	movlb	0	; () banked
  8045  010A9C  2766               	addwf	?___awdiv& (0+255),f,b
  8046  010A9E  0E00               	movlw	0
  8047  010AA0  0100               	movlb	0	; () banked
  8048  010AA2  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
  8049  010AA4  0EDF               	movlw	low __npowers_
  8050  010AA6  0100               	movlb	0	; () banked
  8051  010AA8  2566               	addwf	?___awdiv& (0+255),w,b
  8052  010AAA  6EF6               	movwf	tblptrl,c
  8053  010AAC  0EFC               	movlw	high __npowers_
  8054  010AAE  0100               	movlb	0	; () banked
  8055  010AB0  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  8056  010AB2  6EF7               	movwf	tblptrh,c
  8057  010AB4                     	if	1	;There are 3 active tblptr bytes
  8058  010AB4  6AF8               	clrf	tblptru,c
  8059  010AB6  0E00               	movlw	low (__mediumconst shr (0+16))
  8060  010AB8  22F8               	addwfc	tblptru,f,c
  8061  010ABA                     	endif
  8062  010ABA  0009               	tblrd		*+
  8063  010ABC  CFF5 F087          	movff	tablat,___flmul@b
  8064  010AC0  0009               	tblrd		*+
  8065  010AC2  CFF5 F088          	movff	tablat,___flmul@b+1
  8066  010AC6  0009               	tblrd		*+
  8067  010AC8  CFF5 F089          	movff	tablat,___flmul@b+2
  8068  010ACC  000A               	tblrd		*-
  8069  010ACE  CFF5 F08A          	movff	tablat,___flmul@b+3
  8070  010AD2  0E00               	movlw	0
  8071  010AD4  0100               	movlb	0	; () banked
  8072  010AD6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8073  010AD8  0E0A               	movlw	10
  8074  010ADA  6F62               	movwf	___awmod@divisor& (0+255),b
  8075  010ADC  0100               	movlb	0	; () banked
  8076  010ADE  51A8               	movf	scale@scl& (0+255),w,b
  8077  010AE0  0100               	movlb	0	; () banked
  8078  010AE2  6F60               	movwf	___awmod@dividend& (0+255),b
  8079  010AE4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8080  010AE6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  8081  010AE8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  8082  010AEA  EC67  F0B1         	call	___awmod	;wreg free
  8083  010AEE  0100               	movlb	0	; () banked
  8084  010AF0  90D8               	bcf	status,0,c
  8085  010AF2  3760               	rlcf	?___awmod& (0+255),f,b
  8086  010AF4  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  8087  010AF6  0100               	movlb	0	; () banked
  8088  010AF8  90D8               	bcf	status,0,c
  8089  010AFA  3760               	rlcf	?___awmod& (0+255),f,b
  8090  010AFC  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  8091  010AFE  0EDF               	movlw	low __npowers_
  8092  010B00  0100               	movlb	0	; () banked
  8093  010B02  2560               	addwf	?___awmod& (0+255),w,b
  8094  010B04  6EF6               	movwf	tblptrl,c
  8095  010B06  0EFC               	movlw	high __npowers_
  8096  010B08  0100               	movlb	0	; () banked
  8097  010B0A  2161               	addwfc	(?___awmod+1)& (0+255),w,b
  8098  010B0C  6EF7               	movwf	tblptrh,c
  8099  010B0E                     	if	1	;There are 3 active tblptr bytes
  8100  010B0E  6AF8               	clrf	tblptru,c
  8101  010B10  0E00               	movlw	low (__mediumconst shr (0+16))
  8102  010B12  22F8               	addwfc	tblptru,f,c
  8103  010B14                     	endif
  8104  010B14  0009               	tblrd		*+
  8105  010B16  CFF5 F08B          	movff	tablat,___flmul@a
  8106  010B1A  0009               	tblrd		*+
  8107  010B1C  CFF5 F08C          	movff	tablat,___flmul@a+1
  8108  010B20  0009               	tblrd		*+
  8109  010B22  CFF5 F08D          	movff	tablat,___flmul@a+2
  8110  010B26  000A               	tblrd		*-
  8111  010B28  CFF5 F08E          	movff	tablat,___flmul@a+3
  8112  010B2C  EC59  F089         	call	___flmul	;wreg free
  8113  010B30  C087  F0A0         	movff	?___flmul,?_scale
  8114  010B34  C088  F0A1         	movff	?___flmul+1,?_scale+1
  8115  010B38  C089  F0A2         	movff	?___flmul+2,?_scale+2
  8116  010B3C  C08A  F0A3         	movff	?___flmul+3,?_scale+3
  8117  010B40  0012               	return	
  8118  010B42                     l2439:
  8119                           
  8120                           ;doprnt.c: 434: return _npowers_[scl];
  8121  010B42  0100               	movlb	0	; () banked
  8122  010B44  51A8               	movf	scale@scl& (0+255),w,b
  8123  010B46  0D04               	mullw	4
  8124  010B48  0EDF               	movlw	low __npowers_
  8125  010B4A  24F3               	addwf	prodl,w,c
  8126  010B4C  6EF6               	movwf	tblptrl,c
  8127  010B4E  0EFC               	movlw	high __npowers_
  8128  010B50  20F4               	addwfc	prodh,w,c
  8129  010B52  6EF7               	movwf	tblptrh,c
  8130  010B54                     	if	1	;There are 3 active tblptr bytes
  8131  010B54  6AF8               	clrf	tblptru,c
  8132  010B56  0E00               	movlw	low (__mediumconst shr (0+16))
  8133  010B58  22F8               	addwfc	tblptru,f,c
  8134  010B5A                     	endif
  8135  010B5A  0009               	tblrd		*+
  8136  010B5C  CFF5 F0A0          	movff	tablat,?_scale
  8137  010B60  0009               	tblrd		*+
  8138  010B62  CFF5 F0A1          	movff	tablat,?_scale+1
  8139  010B66  0009               	tblrd		*+
  8140  010B68  CFF5 F0A2          	movff	tablat,?_scale+2
  8141  010B6C  000A               	tblrd		*-
  8142  010B6E  CFF5 F0A3          	movff	tablat,?_scale+3
  8143                           
  8144                           ; BSR set to: 0
  8145  010B72  0012               	return	
  8146  010B74                     l2435:
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;doprnt.c: 435: }
  8150                           ;doprnt.c: 436: if(scl>=110)
  8151                           
  8152                           ; BSR set to: 0
  8153  010B74  0100               	movlb	0	; () banked
  8154  010B76  51A8               	movf	scale@scl& (0+255),w,b
  8155  010B78  0A80               	xorlw	128
  8156  010B7A  0F12               	addlw	-238
  8157  010B7C  A0D8               	btfss	status,0,c
  8158  010B7E  D0BB               	goto	l2440
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8162  010B80  0E00               	movlw	0
  8163  010B82  0100               	movlb	0	; () banked
  8164  010B84  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8165  010B86  0E0A               	movlw	10
  8166  010B88  6F68               	movwf	___awdiv@divisor& (0+255),b
  8167  010B8A  0E00               	movlw	0
  8168  010B8C  0100               	movlb	0	; () banked
  8169  010B8E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8170  010B90  0E64               	movlw	100
  8171  010B92  6F62               	movwf	___awmod@divisor& (0+255),b
  8172  010B94  0100               	movlb	0	; () banked
  8173  010B96  51A8               	movf	scale@scl& (0+255),w,b
  8174  010B98  0100               	movlb	0	; () banked
  8175  010B9A  6F60               	movwf	___awmod@dividend& (0+255),b
  8176  010B9C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8177  010B9E  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  8178  010BA0  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  8179  010BA2  EC67  F0B1         	call	___awmod	;wreg free
  8180  010BA6  C060  F066         	movff	?___awmod,___awdiv@dividend
  8181  010BAA  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  8182  010BAE  ECFD  F0AC         	call	___awdiv	;wreg free
  8183  010BB2  0100               	movlb	0	; () banked
  8184  010BB4  90D8               	bcf	status,0,c
  8185  010BB6  3766               	rlcf	?___awdiv& (0+255),f,b
  8186  010BB8  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  8187  010BBA  0100               	movlb	0	; () banked
  8188  010BBC  90D8               	bcf	status,0,c
  8189  010BBE  3766               	rlcf	?___awdiv& (0+255),f,b
  8190  010BC0  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  8191  010BC2  0E24               	movlw	36
  8192  010BC4  0100               	movlb	0	; () banked
  8193  010BC6  2766               	addwf	?___awdiv& (0+255),f,b
  8194  010BC8  0E00               	movlw	0
  8195  010BCA  0100               	movlb	0	; () banked
  8196  010BCC  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
  8197  010BCE  0EAB               	movlw	low __powers_
  8198  010BD0  0100               	movlb	0	; () banked
  8199  010BD2  2566               	addwf	?___awdiv& (0+255),w,b
  8200  010BD4  6EF6               	movwf	tblptrl,c
  8201  010BD6  0EFC               	movlw	high __powers_
  8202  010BD8  0100               	movlb	0	; () banked
  8203  010BDA  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  8204  010BDC  6EF7               	movwf	tblptrh,c
  8205  010BDE                     	if	1	;There are 3 active tblptr bytes
  8206  010BDE  6AF8               	clrf	tblptru,c
  8207  010BE0  0E00               	movlw	low (__mediumconst shr (0+16))
  8208  010BE2  22F8               	addwfc	tblptru,f,c
  8209  010BE4                     	endif
  8210  010BE4  0009               	tblrd		*+
  8211  010BE6  CFF5 F08B          	movff	tablat,___flmul@a
  8212  010BEA  0009               	tblrd		*+
  8213  010BEC  CFF5 F08C          	movff	tablat,___flmul@a+1
  8214  010BF0  0009               	tblrd		*+
  8215  010BF2  CFF5 F08D          	movff	tablat,___flmul@a+2
  8216  010BF6  000A               	tblrd		*-
  8217  010BF8  CFF5 F08E          	movff	tablat,___flmul@a+3
  8218  010BFC  0E00               	movlw	0
  8219  010BFE  0100               	movlb	0	; () banked
  8220  010C00  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8221  010C02  0E64               	movlw	100
  8222  010C04  6F68               	movwf	___awdiv@divisor& (0+255),b
  8223  010C06  0100               	movlb	0	; () banked
  8224  010C08  51A8               	movf	scale@scl& (0+255),w,b
  8225  010C0A  0100               	movlb	0	; () banked
  8226  010C0C  6F66               	movwf	___awdiv@dividend& (0+255),b
  8227  010C0E  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  8228  010C10  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  8229  010C12  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8230  010C14  ECFD  F0AC         	call	___awdiv	;wreg free
  8231  010C18  0100               	movlb	0	; () banked
  8232  010C1A  90D8               	bcf	status,0,c
  8233  010C1C  3766               	rlcf	?___awdiv& (0+255),f,b
  8234  010C1E  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  8235  010C20  0100               	movlb	0	; () banked
  8236  010C22  90D8               	bcf	status,0,c
  8237  010C24  3766               	rlcf	?___awdiv& (0+255),f,b
  8238  010C26  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  8239  010C28  0E48               	movlw	72
  8240  010C2A  0100               	movlb	0	; () banked
  8241  010C2C  2766               	addwf	?___awdiv& (0+255),f,b
  8242  010C2E  0E00               	movlw	0
  8243  010C30  0100               	movlb	0	; () banked
  8244  010C32  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
  8245  010C34  0EAB               	movlw	low __powers_
  8246  010C36  0100               	movlb	0	; () banked
  8247  010C38  2566               	addwf	?___awdiv& (0+255),w,b
  8248  010C3A  6EF6               	movwf	tblptrl,c
  8249  010C3C  0EFC               	movlw	high __powers_
  8250  010C3E  0100               	movlb	0	; () banked
  8251  010C40  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  8252  010C42  6EF7               	movwf	tblptrh,c
  8253  010C44                     	if	1	;There are 3 active tblptr bytes
  8254  010C44  6AF8               	clrf	tblptru,c
  8255  010C46  0E00               	movlw	low (__mediumconst shr (0+16))
  8256  010C48  22F8               	addwfc	tblptru,f,c
  8257  010C4A                     	endif
  8258  010C4A  0009               	tblrd		*+
  8259  010C4C  CFF5 F087          	movff	tablat,___flmul@b
  8260  010C50  0009               	tblrd		*+
  8261  010C52  CFF5 F088          	movff	tablat,___flmul@b+1
  8262  010C56  0009               	tblrd		*+
  8263  010C58  CFF5 F089          	movff	tablat,___flmul@b+2
  8264  010C5C  000A               	tblrd		*-
  8265  010C5E  CFF5 F08A          	movff	tablat,___flmul@b+3
  8266  010C62  EC59  F089         	call	___flmul	;wreg free
  8267  010C66  C087  F0A4         	movff	?___flmul,_scale$15635
  8268  010C6A  C088  F0A5         	movff	?___flmul+1,_scale$15635+1
  8269  010C6E  C089  F0A6         	movff	?___flmul+2,_scale$15635+2
  8270  010C72  C08A  F0A7         	movff	?___flmul+3,_scale$15635+3
  8271                           
  8272                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8273  010C76  C0A4  F087         	movff	_scale$15635,___flmul@b
  8274  010C7A  C0A5  F088         	movff	_scale$15635+1,___flmul@b+1
  8275  010C7E  C0A6  F089         	movff	_scale$15635+2,___flmul@b+2
  8276  010C82  C0A7  F08A         	movff	_scale$15635+3,___flmul@b+3
  8277  010C86  0E00               	movlw	0
  8278  010C88  0100               	movlb	0	; () banked
  8279  010C8A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8280  010C8C  0E0A               	movlw	10
  8281  010C8E  6F62               	movwf	___awmod@divisor& (0+255),b
  8282  010C90  0100               	movlb	0	; () banked
  8283  010C92  51A8               	movf	scale@scl& (0+255),w,b
  8284  010C94  0100               	movlb	0	; () banked
  8285  010C96  6F60               	movwf	___awmod@dividend& (0+255),b
  8286  010C98  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8287  010C9A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  8288  010C9C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  8289  010C9E  EC67  F0B1         	call	___awmod	;wreg free
  8290  010CA2  0100               	movlb	0	; () banked
  8291  010CA4  90D8               	bcf	status,0,c
  8292  010CA6  3760               	rlcf	?___awmod& (0+255),f,b
  8293  010CA8  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  8294  010CAA  0100               	movlb	0	; () banked
  8295  010CAC  90D8               	bcf	status,0,c
  8296  010CAE  3760               	rlcf	?___awmod& (0+255),f,b
  8297  010CB0  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  8298  010CB2  0EAB               	movlw	low __powers_
  8299  010CB4  0100               	movlb	0	; () banked
  8300  010CB6  2560               	addwf	?___awmod& (0+255),w,b
  8301  010CB8  6EF6               	movwf	tblptrl,c
  8302  010CBA  0EFC               	movlw	high __powers_
  8303  010CBC  0100               	movlb	0	; () banked
  8304  010CBE  2161               	addwfc	(?___awmod+1)& (0+255),w,b
  8305  010CC0  6EF7               	movwf	tblptrh,c
  8306  010CC2                     	if	1	;There are 3 active tblptr bytes
  8307  010CC2  6AF8               	clrf	tblptru,c
  8308  010CC4  0E00               	movlw	low (__mediumconst shr (0+16))
  8309  010CC6  22F8               	addwfc	tblptru,f,c
  8310  010CC8                     	endif
  8311  010CC8  0009               	tblrd		*+
  8312  010CCA  CFF5 F08B          	movff	tablat,___flmul@a
  8313  010CCE  0009               	tblrd		*+
  8314  010CD0  CFF5 F08C          	movff	tablat,___flmul@a+1
  8315  010CD4  0009               	tblrd		*+
  8316  010CD6  CFF5 F08D          	movff	tablat,___flmul@a+2
  8317  010CDA  000A               	tblrd		*-
  8318  010CDC  CFF5 F08E          	movff	tablat,___flmul@a+3
  8319  010CE0  EC59  F089         	call	___flmul	;wreg free
  8320  010CE4  C087  F0A0         	movff	?___flmul,?_scale
  8321  010CE8  C088  F0A1         	movff	?___flmul+1,?_scale+1
  8322  010CEC  C089  F0A2         	movff	?___flmul+2,?_scale+2
  8323  010CF0  C08A  F0A3         	movff	?___flmul+3,?_scale+3
  8324  010CF4  0012               	return	
  8325  010CF6                     l2440:
  8326                           
  8327                           ;doprnt.c: 438: else if(scl > 10)
  8328  010CF6  0100               	movlb	0	; () banked
  8329  010CF8  51A8               	movf	scale@scl& (0+255),w,b
  8330  010CFA  0A80               	xorlw	128
  8331  010CFC  0F75               	addlw	-139
  8332  010CFE  A0D8               	btfss	status,0,c
  8333  010D00  D06B               	goto	l2442
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8337  010D02  0E00               	movlw	0
  8338  010D04  0100               	movlb	0	; () banked
  8339  010D06  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8340  010D08  0E0A               	movlw	10
  8341  010D0A  6F68               	movwf	___awdiv@divisor& (0+255),b
  8342  010D0C  0100               	movlb	0	; () banked
  8343  010D0E  51A8               	movf	scale@scl& (0+255),w,b
  8344  010D10  0100               	movlb	0	; () banked
  8345  010D12  6F66               	movwf	___awdiv@dividend& (0+255),b
  8346  010D14  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  8347  010D16  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  8348  010D18  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8349  010D1A  ECFD  F0AC         	call	___awdiv	;wreg free
  8350  010D1E  0100               	movlb	0	; () banked
  8351  010D20  90D8               	bcf	status,0,c
  8352  010D22  3766               	rlcf	?___awdiv& (0+255),f,b
  8353  010D24  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  8354  010D26  0100               	movlb	0	; () banked
  8355  010D28  90D8               	bcf	status,0,c
  8356  010D2A  3766               	rlcf	?___awdiv& (0+255),f,b
  8357  010D2C  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  8358  010D2E  0E24               	movlw	36
  8359  010D30  0100               	movlb	0	; () banked
  8360  010D32  2766               	addwf	?___awdiv& (0+255),f,b
  8361  010D34  0E00               	movlw	0
  8362  010D36  0100               	movlb	0	; () banked
  8363  010D38  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
  8364  010D3A  0EAB               	movlw	low __powers_
  8365  010D3C  0100               	movlb	0	; () banked
  8366  010D3E  2566               	addwf	?___awdiv& (0+255),w,b
  8367  010D40  6EF6               	movwf	tblptrl,c
  8368  010D42  0EFC               	movlw	high __powers_
  8369  010D44  0100               	movlb	0	; () banked
  8370  010D46  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  8371  010D48  6EF7               	movwf	tblptrh,c
  8372  010D4A                     	if	1	;There are 3 active tblptr bytes
  8373  010D4A  6AF8               	clrf	tblptru,c
  8374  010D4C  0E00               	movlw	low (__mediumconst shr (0+16))
  8375  010D4E  22F8               	addwfc	tblptru,f,c
  8376  010D50                     	endif
  8377  010D50  0009               	tblrd		*+
  8378  010D52  CFF5 F087          	movff	tablat,___flmul@b
  8379  010D56  0009               	tblrd		*+
  8380  010D58  CFF5 F088          	movff	tablat,___flmul@b+1
  8381  010D5C  0009               	tblrd		*+
  8382  010D5E  CFF5 F089          	movff	tablat,___flmul@b+2
  8383  010D62  000A               	tblrd		*-
  8384  010D64  CFF5 F08A          	movff	tablat,___flmul@b+3
  8385  010D68  0E00               	movlw	0
  8386  010D6A  0100               	movlb	0	; () banked
  8387  010D6C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8388  010D6E  0E0A               	movlw	10
  8389  010D70  6F62               	movwf	___awmod@divisor& (0+255),b
  8390  010D72  0100               	movlb	0	; () banked
  8391  010D74  51A8               	movf	scale@scl& (0+255),w,b
  8392  010D76  0100               	movlb	0	; () banked
  8393  010D78  6F60               	movwf	___awmod@dividend& (0+255),b
  8394  010D7A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8395  010D7C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  8396  010D7E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  8397  010D80  EC67  F0B1         	call	___awmod	;wreg free
  8398  010D84  0100               	movlb	0	; () banked
  8399  010D86  90D8               	bcf	status,0,c
  8400  010D88  3760               	rlcf	?___awmod& (0+255),f,b
  8401  010D8A  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  8402  010D8C  0100               	movlb	0	; () banked
  8403  010D8E  90D8               	bcf	status,0,c
  8404  010D90  3760               	rlcf	?___awmod& (0+255),f,b
  8405  010D92  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  8406  010D94  0EAB               	movlw	low __powers_
  8407  010D96  0100               	movlb	0	; () banked
  8408  010D98  2560               	addwf	?___awmod& (0+255),w,b
  8409  010D9A  6EF6               	movwf	tblptrl,c
  8410  010D9C  0EFC               	movlw	high __powers_
  8411  010D9E  0100               	movlb	0	; () banked
  8412  010DA0  2161               	addwfc	(?___awmod+1)& (0+255),w,b
  8413  010DA2  6EF7               	movwf	tblptrh,c
  8414  010DA4                     	if	1	;There are 3 active tblptr bytes
  8415  010DA4  6AF8               	clrf	tblptru,c
  8416  010DA6  0E00               	movlw	low (__mediumconst shr (0+16))
  8417  010DA8  22F8               	addwfc	tblptru,f,c
  8418  010DAA                     	endif
  8419  010DAA  0009               	tblrd		*+
  8420  010DAC  CFF5 F08B          	movff	tablat,___flmul@a
  8421  010DB0  0009               	tblrd		*+
  8422  010DB2  CFF5 F08C          	movff	tablat,___flmul@a+1
  8423  010DB6  0009               	tblrd		*+
  8424  010DB8  CFF5 F08D          	movff	tablat,___flmul@a+2
  8425  010DBC  000A               	tblrd		*-
  8426  010DBE  CFF5 F08E          	movff	tablat,___flmul@a+3
  8427  010DC2  EC59  F089         	call	___flmul	;wreg free
  8428  010DC6  C087  F0A0         	movff	?___flmul,?_scale
  8429  010DCA  C088  F0A1         	movff	?___flmul+1,?_scale+1
  8430  010DCE  C089  F0A2         	movff	?___flmul+2,?_scale+2
  8431  010DD2  C08A  F0A3         	movff	?___flmul+3,?_scale+3
  8432  010DD6  0012               	return	
  8433  010DD8                     l2442:
  8434                           
  8435                           ;doprnt.c: 440: return _powers_[scl];
  8436  010DD8  0100               	movlb	0	; () banked
  8437  010DDA  51A8               	movf	scale@scl& (0+255),w,b
  8438  010DDC  0D04               	mullw	4
  8439  010DDE  0EAB               	movlw	low __powers_
  8440  010DE0  24F3               	addwf	prodl,w,c
  8441  010DE2  6EF6               	movwf	tblptrl,c
  8442  010DE4  0EFC               	movlw	high __powers_
  8443  010DE6  20F4               	addwfc	prodh,w,c
  8444  010DE8  6EF7               	movwf	tblptrh,c
  8445  010DEA                     	if	1	;There are 3 active tblptr bytes
  8446  010DEA  6AF8               	clrf	tblptru,c
  8447  010DEC  0E00               	movlw	low (__mediumconst shr (0+16))
  8448  010DEE  22F8               	addwfc	tblptru,f,c
  8449  010DF0                     	endif
  8450  010DF0  0009               	tblrd		*+
  8451  010DF2  CFF5 F0A0          	movff	tablat,?_scale
  8452  010DF6  0009               	tblrd		*+
  8453  010DF8  CFF5 F0A1          	movff	tablat,?_scale+1
  8454  010DFC  0009               	tblrd		*+
  8455  010DFE  CFF5 F0A2          	movff	tablat,?_scale+2
  8456  010E02  000A               	tblrd		*-
  8457  010E04  CFF5 F0A3          	movff	tablat,?_scale+3
  8458  010E08  0012               	return	
  8459  010E0A                     __end_of_scale:
  8460                           	opt stack 0
  8461                           tblptru	equ	0xFF8
  8462                           tblptrh	equ	0xFF7
  8463                           tblptrl	equ	0xFF6
  8464                           tablat	equ	0xFF5
  8465                           prodh	equ	0xFF4
  8466                           prodl	equ	0xFF3
  8467                           postinc0	equ	0xFEE
  8468                           wreg	equ	0xFE8
  8469                           postdec1	equ	0xFE5
  8470                           fsr1h	equ	0xFE2
  8471                           fsr1l	equ	0xFE1
  8472                           indf2	equ	0xFDF
  8473                           postinc2	equ	0xFDE
  8474                           postdec2	equ	0xFDD
  8475                           fsr2h	equ	0xFDA
  8476                           fsr2l	equ	0xFD9
  8477                           status	equ	0xFD8
  8478                           
  8479 ;; *************** function _putch *****************
  8480 ;; Defined at:
  8481 ;;		line 454 in file "Library/Console.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;  c               1    wreg     unsigned char 
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;  c               1   26[BANK0 ] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  1    wreg      void 
  8488 ;; Registers used:
  8489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;Total ram usage:        1 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:   11
  8502 ;; This function calls:
  8503 ;;		_Console_PrintChar
  8504 ;; This function is called by:
  8505 ;;		_printf
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text18
  8510  018022                     __ptext18:
  8511                           	opt stack 0
  8512  018022                     _putch:
  8513                           	opt stack 18
  8514                           
  8515                           ;incstack = 0
  8516                           ;putch@c stored from wreg
  8517  018022  0100               	movlb	0	; () banked
  8518  018024  6F7A               	movwf	putch@c& (0+255),b
  8519                           
  8520                           ;Console.c: 456: Console_PrintChar(c);
  8521  018026  0100               	movlb	0	; () banked
  8522  018028  517A               	movf	putch@c& (0+255),w,b
  8523  01802A  EC3D  F09F         	call	_Console_PrintChar
  8524  01802E  0012               	return		;funcret
  8525  018030                     __end_of_putch:
  8526                           	opt stack 0
  8527                           tblptru	equ	0xFF8
  8528                           tblptrh	equ	0xFF7
  8529                           tblptrl	equ	0xFF6
  8530                           tablat	equ	0xFF5
  8531                           prodh	equ	0xFF4
  8532                           prodl	equ	0xFF3
  8533                           postinc0	equ	0xFEE
  8534                           wreg	equ	0xFE8
  8535                           postdec1	equ	0xFE5
  8536                           fsr1h	equ	0xFE2
  8537                           fsr1l	equ	0xFE1
  8538                           indf2	equ	0xFDF
  8539                           postinc2	equ	0xFDE
  8540                           postdec2	equ	0xFDD
  8541                           fsr2h	equ	0xFDA
  8542                           fsr2l	equ	0xFD9
  8543                           status	equ	0xFD8
  8544                           
  8545 ;; *************** function _Console_PrintChar *****************
  8546 ;; Defined at:
  8547 ;;		line 322 in file "Library/Console.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;  pInput          1    wreg     unsigned char 
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;  pInput          1   25[BANK0 ] unsigned char 
  8552 ;; Return value:  Size  Location     Type
  8553 ;;                  1    wreg      void 
  8554 ;; Registers used:
  8555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8556 ;; Tracked objects:
  8557 ;;		On entry : 0/0
  8558 ;;		On exit  : 0/0
  8559 ;;		Unchanged: 0/0
  8560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8564 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;Total ram usage:        4 bytes
  8566 ;; Hardware stack levels used:    1
  8567 ;; Hardware stack levels required when called:   10
  8568 ;; This function calls:
  8569 ;;		_Console_Backspace
  8570 ;;		_Console_FormFeed
  8571 ;;		_Console_IncrementCursor
  8572 ;;		_Console_NewLine
  8573 ;;		_Console_ResetCursor
  8574 ;;		_Console_Tab
  8575 ;; This function is called by:
  8576 ;;		_putch
  8577 ;;		_Console_PrintString
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text19
  8582  013E7A                     __ptext19:
  8583                           	opt stack 0
  8584  013E7A                     _Console_PrintChar:
  8585                           	opt stack 18
  8586                           
  8587                           ;incstack = 0
  8588                           ;Console_PrintChar@pInput stored from wreg
  8589  013E7A  0100               	movlb	0	; () banked
  8590  013E7C  6F79               	movwf	Console_PrintChar@pInput& (0+255),b
  8591                           
  8592                           ;Console.c: 324: switch(pInput)
  8593  013E7E  D0AF               	goto	l1036
  8594  013E80                     
  8595                           ;Console.c: 327: case '\n':
  8596                           ;Console.c: 328: Console_NewLine();
  8597  013E80  ECB8  F0B1         	call	_Console_NewLine	;wreg free
  8598                           
  8599                           ;Console.c: 329: return;
  8600  013E84  0012               	return	
  8601  013E86                     
  8602                           ;Console.c: 331: Console_Backspace();
  8603  013E86  EC70  F0B9         	call	_Console_Backspace	;wreg free
  8604                           
  8605                           ;Console.c: 332: return;
  8606  013E8A  0012               	return	
  8607  013E8C                     
  8608                           ;Console.c: 334: Console_FormFeed();
  8609  013E8C  ECC4  F0B3         	call	_Console_FormFeed	;wreg free
  8610                           
  8611                           ;Console.c: 335: return;
  8612  013E90  0012               	return	
  8613  013E92                     
  8614                           ;Console.c: 337: Console_Tab();
  8615  013E92  EC3C  F0AC         	call	_Console_Tab	;wreg free
  8616                           
  8617                           ;Console.c: 338: return;
  8618  013E96  0012               	return	
  8619  013E98                     
  8620                           ;Console.c: 340: Console_IncrementCursor();
  8621  013E98  ECA9  F0B8         	call	_Console_IncrementCursor	;wreg free
  8622                           
  8623                           ;Console.c: 341: return;
  8624  013E9C  0012               	return	
  8625  013E9E                     
  8626                           ;Console.c: 343: Console_ResetCursor();
  8627  013E9E  ECC1  F0BE         	call	_Console_ResetCursor	;wreg free
  8628                           
  8629                           ;Console.c: 344: return;
  8630  013EA2  0012               	return	
  8631  013EA4                     
  8632                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  8633                           
  8634                           ;Console.c: 349: default:
  8635  013EA4  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  8636  013EA8  0E7F               	movlw	127
  8637  013EAA  0100               	movlb	0	; () banked
  8638  013EAC  1776               	andwf	??_Console_PrintChar& (0+255),f,b
  8639  013EAE  0100               	movlb	0	; () banked
  8640  013EB0  51F2               	movf	_lBufferY& (0+255),w,b
  8641  013EB2  0D14               	mullw	20
  8642  013EB4  0EF0               	movlw	low _lBuffer
  8643  013EB6  0100               	movlb	0	; () banked
  8644  013EB8  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8645  013EBA  0E04               	movlw	high _lBuffer
  8646  013EBC  0100               	movlb	0	; () banked
  8647  013EBE  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
  8648  013EC0  50F3               	movf	prodl,w,c
  8649  013EC2  0100               	movlb	0	; () banked
  8650  013EC4  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  8651  013EC6  50F4               	movf	prodh,w,c
  8652  013EC8  0100               	movlb	0	; () banked
  8653  013ECA  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  8654  013ECC  0100               	movlb	0	; () banked
  8655  013ECE  51F3               	movf	_lBufferX& (0+255),w,b
  8656  013ED0  0D01               	mullw	1
  8657  013ED2  50F3               	movf	prodl,w,c
  8658  013ED4  0100               	movlb	0	; () banked
  8659  013ED6  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  8660  013ED8  6ED9               	movwf	fsr2l,c
  8661  013EDA  50F4               	movf	prodh,w,c
  8662  013EDC  0100               	movlb	0	; () banked
  8663  013EDE  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  8664  013EE0  6EDA               	movwf	fsr2h,c
  8665  013EE2  50DF               	movf	indf2,w,c
  8666  013EE4  0B7F               	andlw	127
  8667  013EE6  0100               	movlb	0	; () banked
  8668  013EE8  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
  8669  013EEA  B4D8               	btfsc	status,2,c
  8670  013EEC  D02D               	goto	l1047
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;Console.c: 351: {
  8674                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8675  013EEE  0E01               	movlw	1
  8676  013EF0  6E4E               	movwf	_change,c
  8677                           
  8678                           ; BSR set to: 0
  8679  013EF2  0100               	movlb	0	; () banked
  8680  013EF4  51F2               	movf	_lBufferY& (0+255),w,b
  8681  013EF6  0D14               	mullw	20
  8682  013EF8  0EF0               	movlw	low _lBuffer
  8683  013EFA  0100               	movlb	0	; () banked
  8684  013EFC  6F76               	movwf	??_Console_PrintChar& (0+255),b
  8685  013EFE  0E04               	movlw	high _lBuffer
  8686  013F00  0100               	movlb	0	; () banked
  8687  013F02  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8688  013F04  50F3               	movf	prodl,w,c
  8689  013F06  0100               	movlb	0	; () banked
  8690  013F08  2776               	addwf	??_Console_PrintChar& (0+255),f,b
  8691  013F0A  50F4               	movf	prodh,w,c
  8692  013F0C  0100               	movlb	0	; () banked
  8693  013F0E  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  8694  013F10  0100               	movlb	0	; () banked
  8695  013F12  51F3               	movf	_lBufferX& (0+255),w,b
  8696  013F14  0D01               	mullw	1
  8697  013F16  50F3               	movf	prodl,w,c
  8698  013F18  0100               	movlb	0	; () banked
  8699  013F1A  2576               	addwf	??_Console_PrintChar& (0+255),w,b
  8700  013F1C  6ED9               	movwf	fsr2l,c
  8701  013F1E  50F4               	movf	prodh,w,c
  8702  013F20  0100               	movlb	0	; () banked
  8703  013F22  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  8704  013F24  6EDA               	movwf	fsr2h,c
  8705  013F26  0100               	movlb	0	; () banked
  8706  013F28  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
  8707  013F2A  0980               	iorlw	128
  8708  013F2C  6EDF               	movwf	indf2,c
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  8712  013F2E  0100               	movlb	0	; () banked
  8713  013F30  51F2               	movf	_lBufferY& (0+255),w,b
  8714  013F32  0D02               	mullw	2
  8715  013F34  0E00               	movlw	low _lCBuffer
  8716  013F36  24F3               	addwf	prodl,w,c
  8717  013F38  6ED9               	movwf	fsr2l,c
  8718  013F3A  0E04               	movlw	high _lCBuffer
  8719  013F3C  20F4               	addwfc	prodh,w,c
  8720  013F3E  6EDA               	movwf	fsr2h,c
  8721  013F40  C3F8  FFDE         	movff	_gForecolour,postinc2
  8722  013F44  C3F9  FFDD         	movff	_gForecolour+1,postdec2
  8723  013F48                     l1047:
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;Console.c: 354: }
  8727                           ;Console.c: 368: if(Console_IncrementCursor())
  8728                           
  8729                           ; BSR set to: 0
  8730  013F48  ECA9  F0B8         	call	_Console_IncrementCursor	;wreg free
  8731  013F4C  0900               	iorlw	0
  8732  013F4E  B4D8               	btfsc	status,2,c
  8733  013F50  0012               	return	
  8734                           
  8735                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  8736  013F52  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  8737  013F56  0E7F               	movlw	127
  8738  013F58  0100               	movlb	0	; () banked
  8739  013F5A  1776               	andwf	??_Console_PrintChar& (0+255),f,b
  8740  013F5C  0100               	movlb	0	; () banked
  8741  013F5E  51F2               	movf	_lBufferY& (0+255),w,b
  8742  013F60  0D14               	mullw	20
  8743  013F62  0EF0               	movlw	low _lBuffer
  8744  013F64  0100               	movlb	0	; () banked
  8745  013F66  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8746  013F68  0E04               	movlw	high _lBuffer
  8747  013F6A  0100               	movlb	0	; () banked
  8748  013F6C  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
  8749  013F6E  50F3               	movf	prodl,w,c
  8750  013F70  0100               	movlb	0	; () banked
  8751  013F72  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  8752  013F74  50F4               	movf	prodh,w,c
  8753  013F76  0100               	movlb	0	; () banked
  8754  013F78  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  8755  013F7A  0100               	movlb	0	; () banked
  8756  013F7C  51F3               	movf	_lBufferX& (0+255),w,b
  8757  013F7E  0D01               	mullw	1
  8758  013F80  50F3               	movf	prodl,w,c
  8759  013F82  0100               	movlb	0	; () banked
  8760  013F84  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  8761  013F86  6ED9               	movwf	fsr2l,c
  8762  013F88  50F4               	movf	prodh,w,c
  8763  013F8A  0100               	movlb	0	; () banked
  8764  013F8C  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  8765  013F8E  6EDA               	movwf	fsr2h,c
  8766  013F90  50DF               	movf	indf2,w,c
  8767  013F92  0B7F               	andlw	127
  8768  013F94  0100               	movlb	0	; () banked
  8769  013F96  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
  8770  013F98  B4D8               	btfsc	status,2,c
  8771  013F9A  0012               	return	
  8772                           
  8773                           ; BSR set to: 0
  8774                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8775  013F9C  0E01               	movlw	1
  8776  013F9E  6E4E               	movwf	_change,c
  8777                           
  8778                           ; BSR set to: 0
  8779  013FA0  0100               	movlb	0	; () banked
  8780  013FA2  51F2               	movf	_lBufferY& (0+255),w,b
  8781  013FA4  0D14               	mullw	20
  8782  013FA6  0EF0               	movlw	low _lBuffer
  8783  013FA8  0100               	movlb	0	; () banked
  8784  013FAA  6F76               	movwf	??_Console_PrintChar& (0+255),b
  8785  013FAC  0E04               	movlw	high _lBuffer
  8786  013FAE  0100               	movlb	0	; () banked
  8787  013FB0  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8788  013FB2  50F3               	movf	prodl,w,c
  8789  013FB4  0100               	movlb	0	; () banked
  8790  013FB6  2776               	addwf	??_Console_PrintChar& (0+255),f,b
  8791  013FB8  50F4               	movf	prodh,w,c
  8792  013FBA  0100               	movlb	0	; () banked
  8793  013FBC  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  8794  013FBE  0100               	movlb	0	; () banked
  8795  013FC0  51F3               	movf	_lBufferX& (0+255),w,b
  8796  013FC2  0D01               	mullw	1
  8797  013FC4  50F3               	movf	prodl,w,c
  8798  013FC6  0100               	movlb	0	; () banked
  8799  013FC8  2576               	addwf	??_Console_PrintChar& (0+255),w,b
  8800  013FCA  6ED9               	movwf	fsr2l,c
  8801  013FCC  50F4               	movf	prodh,w,c
  8802  013FCE  0100               	movlb	0	; () banked
  8803  013FD0  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  8804  013FD2  6EDA               	movwf	fsr2h,c
  8805  013FD4  0100               	movlb	0	; () banked
  8806  013FD6  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
  8807  013FD8  0980               	iorlw	128
  8808  013FDA  6EDF               	movwf	indf2,c
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;Console.c: 372: };
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;Console.c: 371: return;
  8815                           
  8816                           ; BSR set to: 0
  8817                           
  8818                           ; BSR set to: 0
  8819  013FDC  0012               	return	
  8820  013FDE                     l1036:
  8821                           
  8822                           ; BSR set to: 0
  8823  013FDE  0100               	movlb	0	; () banked
  8824  013FE0  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
  8825                           
  8826                           ; Switch size 1, requested type "space"
  8827                           ; Number of cases is 8, Range of values is 7 to 35
  8828                           ; switch strategies available:
  8829                           ; Name         Instructions Cycles
  8830                           ; simple_byte           25    13 (average)
  8831                           ;	Chosen strategy is simple_byte
  8832  013FE2  0A07               	xorlw	7	; case 7
  8833  013FE4  B4D8               	btfsc	status,2,c
  8834  013FE6  D758               	goto	l1043
  8835  013FE8  0A0F               	xorlw	15	; case 8
  8836  013FEA  B4D8               	btfsc	status,2,c
  8837  013FEC  D74C               	goto	l1040
  8838  013FEE  0A01               	xorlw	1	; case 9
  8839  013FF0  B4D8               	btfsc	status,2,c
  8840  013FF2  D74F               	goto	l1042
  8841  013FF4  0A03               	xorlw	3	; case 10
  8842  013FF6  B4D8               	btfsc	status,2,c
  8843  013FF8  D743               	goto	l1037
  8844  013FFA  0A06               	xorlw	6	; case 12
  8845  013FFC  B4D8               	btfsc	status,2,c
  8846  013FFE  D746               	goto	l1041
  8847  014000  0A01               	xorlw	1	; case 13
  8848  014002  B4D8               	btfsc	status,2,c
  8849  014004  D73D               	goto	l1037
  8850  014006  0A2D               	xorlw	45	; case 32
  8851  014008  B4D8               	btfsc	status,2,c
  8852  01400A  D74C               	goto	l1045
  8853  01400C  0A03               	xorlw	3	; case 35
  8854  01400E  B4D8               	btfsc	status,2,c
  8855  014010  D746               	goto	l1044
  8856  014012  D748               	goto	l1045
  8857  014014                     __end_of_Console_PrintChar:
  8858                           	opt stack 0
  8859                           tblptru	equ	0xFF8
  8860                           tblptrh	equ	0xFF7
  8861                           tblptrl	equ	0xFF6
  8862                           tablat	equ	0xFF5
  8863                           prodh	equ	0xFF4
  8864                           prodl	equ	0xFF3
  8865                           postinc0	equ	0xFEE
  8866                           wreg	equ	0xFE8
  8867                           postdec1	equ	0xFE5
  8868                           fsr1h	equ	0xFE2
  8869                           fsr1l	equ	0xFE1
  8870                           indf2	equ	0xFDF
  8871                           postinc2	equ	0xFDE
  8872                           postdec2	equ	0xFDD
  8873                           fsr2h	equ	0xFDA
  8874                           fsr2l	equ	0xFD9
  8875                           status	equ	0xFD8
  8876                           
  8877 ;; *************** function _Console_Tab *****************
  8878 ;; Defined at:
  8879 ;;		line 260 in file "Library/Console.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;		None
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;  c               1   21[BANK0 ] unsigned char 
  8884 ;;  i               1   20[BANK0 ] unsigned char 
  8885 ;;  t               1   19[BANK0 ] unsigned char 
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  1    wreg      void 
  8888 ;; Registers used:
  8889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8897 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8898 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8899 ;;Total ram usage:        8 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    9
  8902 ;; This function calls:
  8903 ;;		_Console_ClearCursor
  8904 ;;		_Console_IncrementCursor
  8905 ;;		___awdiv
  8906 ;; This function is called by:
  8907 ;;		_Console_PrintChar
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           	psect	text20
  8912  015878                     __ptext20:
  8913                           	opt stack 0
  8914  015878                     _Console_Tab:
  8915                           	opt stack 18
  8916                           
  8917                           ;Console.c: 262: UINT8 i = 0;
  8918                           
  8919                           ;incstack = 0
  8920  015878  0E00               	movlw	0
  8921  01587A  0100               	movlb	0	; () banked
  8922  01587C  6F74               	movwf	Console_Tab@i& (0+255),b
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  8926  01587E  0EFA               	movlw	250
  8927  015880  2445               	addwf	_gCursor,w,c
  8928  015882  0100               	movlb	0	; () banked
  8929  015884  6F66               	movwf	___awdiv@dividend& (0+255),b
  8930  015886  0EFF               	movlw	255
  8931  015888  2046               	addwfc	_gCursor+1,w,c
  8932  01588A  0100               	movlb	0	; () banked
  8933  01588C  6F67               	movwf	(___awdiv@dividend+1)& (0+255),b
  8934  01588E  0E00               	movlw	0
  8935  015890  0100               	movlb	0	; () banked
  8936  015892  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8937  015894  0E06               	movlw	6
  8938  015896  6F68               	movwf	___awdiv@divisor& (0+255),b
  8939  015898  ECFD  F0AC         	call	___awdiv	;wreg free
  8940  01589C  0100               	movlb	0	; () banked
  8941  01589E  5166               	movf	?___awdiv& (0+255),w,b
  8942  0158A0  0100               	movlb	0	; () banked
  8943  0158A2  6F75               	movwf	Console_Tab@c& (0+255),b
  8944                           
  8945                           ; BSR set to: 0
  8946                           ;Console.c: 264: UINT8 t = c/4;
  8947  0158A4  C075  F066         	movff	Console_Tab@c,___awdiv@dividend
  8948  0158A8  0100               	movlb	0	; () banked
  8949  0158AA  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  8950  0158AC  0E00               	movlw	0
  8951  0158AE  0100               	movlb	0	; () banked
  8952  0158B0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8953  0158B2  0E04               	movlw	4
  8954  0158B4  6F68               	movwf	___awdiv@divisor& (0+255),b
  8955  0158B6  ECFD  F0AC         	call	___awdiv	;wreg free
  8956  0158BA  0100               	movlb	0	; () banked
  8957  0158BC  5166               	movf	?___awdiv& (0+255),w,b
  8958  0158BE  0100               	movlb	0	; () banked
  8959  0158C0  6F73               	movwf	Console_Tab@t& (0+255),b
  8960                           
  8961                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  8962  0158C2  0E00               	movlw	0
  8963  0158C4  0100               	movlb	0	; () banked
  8964  0158C6  6F74               	movwf	Console_Tab@i& (0+255),b
  8965  0158C8  D006               	goto	l1009
  8966  0158CA                     
  8967                           ; BSR set to: 0
  8968                           ;Console.c: 266: {
  8969                           ;Console.c: 267: Console_ClearCursor();
  8970                           
  8971                           ; BSR set to: 0
  8972  0158CA  EC43  F0BC         	call	_Console_ClearCursor	;wreg free
  8973                           
  8974                           ;Console.c: 268: Console_IncrementCursor();
  8975  0158CE  ECA9  F0B8         	call	_Console_IncrementCursor	;wreg free
  8976  0158D2  0100               	movlb	0	; () banked
  8977  0158D4  2B74               	incf	Console_Tab@i& (0+255),f,b
  8978  0158D6                     l1009:
  8979                           
  8980                           ; BSR set to: 0
  8981                           
  8982                           ; BSR set to: 0
  8983  0158D6  0100               	movlb	0	; () banked
  8984  0158D8  5173               	movf	Console_Tab@t& (0+255),w,b
  8985  0158DA  0D04               	mullw	4
  8986  0158DC  1EF3               	comf	prodl,f,c
  8987  0158DE  1EF4               	comf	prodh,f,c
  8988  0158E0  4AF3               	infsnz	prodl,f,c
  8989  0158E2  2AF4               	incf	prodh,f,c
  8990  0158E4  0100               	movlb	0	; () banked
  8991  0158E6  5175               	movf	Console_Tab@c& (0+255),w,b
  8992  0158E8  0100               	movlb	0	; () banked
  8993  0158EA  6F6E               	movwf	??_Console_Tab& (0+255),b
  8994  0158EC  6B6F               	clrf	(??_Console_Tab+1)& (0+255),b
  8995  0158EE  50F3               	movf	prodl,w,c
  8996  0158F0  0100               	movlb	0	; () banked
  8997  0158F2  276E               	addwf	??_Console_Tab& (0+255),f,b
  8998  0158F4  50F4               	movf	prodh,w,c
  8999  0158F6  0100               	movlb	0	; () banked
  9000  0158F8  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  9001  0158FA  0100               	movlb	0	; () banked
  9002  0158FC  1F6E               	comf	??_Console_Tab& (0+255),f,b
  9003  0158FE  1F6F               	comf	(??_Console_Tab+1)& (0+255),f,b
  9004  015900  4B6E               	infsnz	??_Console_Tab& (0+255),f,b
  9005  015902  2B6F               	incf	(??_Console_Tab+1)& (0+255),f,b
  9006  015904  0E04               	movlw	4
  9007  015906  0100               	movlb	0	; () banked
  9008  015908  276E               	addwf	??_Console_Tab& (0+255),f,b
  9009  01590A  0E00               	movlw	0
  9010  01590C  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  9011  01590E  0100               	movlb	0	; () banked
  9012  015910  5174               	movf	Console_Tab@i& (0+255),w,b
  9013  015912  0100               	movlb	0	; () banked
  9014  015914  6F70               	movwf	(??_Console_Tab+2)& (0+255),b
  9015  015916  6B71               	clrf	(??_Console_Tab+3)& (0+255),b
  9016  015918  0100               	movlb	0	; () banked
  9017  01591A  516E               	movf	??_Console_Tab& (0+255),w,b
  9018  01591C  0100               	movlb	0	; () banked
  9019  01591E  5D70               	subwf	(??_Console_Tab+2)& (0+255),w,b
  9020  015920  0100               	movlb	0	; () banked
  9021  015922  5171               	movf	(??_Console_Tab+3)& (0+255),w,b
  9022  015924  0A80               	xorlw	128
  9023  015926  0100               	movlb	0	; () banked
  9024  015928  6F72               	movwf	(??_Console_Tab+4)& (0+255),b
  9025  01592A  0100               	movlb	0	; () banked
  9026  01592C  516F               	movf	(??_Console_Tab+1)& (0+255),w,b
  9027  01592E  0A80               	xorlw	128
  9028  015930  0100               	movlb	0	; () banked
  9029  015932  5972               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  9030  015934  B0D8               	btfsc	status,0,c
  9031  015936  0012               	return	
  9032  015938  D7C8               	goto	l1010
  9033  01593A                     __end_of_Console_Tab:
  9034                           	opt stack 0
  9035                           tblptru	equ	0xFF8
  9036                           tblptrh	equ	0xFF7
  9037                           tblptrl	equ	0xFF6
  9038                           tablat	equ	0xFF5
  9039                           prodh	equ	0xFF4
  9040                           prodl	equ	0xFF3
  9041                           postinc0	equ	0xFEE
  9042                           wreg	equ	0xFE8
  9043                           postdec1	equ	0xFE5
  9044                           fsr1h	equ	0xFE2
  9045                           fsr1l	equ	0xFE1
  9046                           indf2	equ	0xFDF
  9047                           postinc2	equ	0xFDE
  9048                           postdec2	equ	0xFDD
  9049                           fsr2h	equ	0xFDA
  9050                           fsr2l	equ	0xFD9
  9051                           status	equ	0xFD8
  9052                           
  9053 ;; *************** function _Console_IncrementCursor *****************
  9054 ;; Defined at:
  9055 ;;		line 243 in file "Library/Console.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;		None
  9058 ;; Auto vars:     Size  Location     Type
  9059 ;;		None
  9060 ;; Return value:  Size  Location     Type
  9061 ;;                  1    wreg      unsigned char 
  9062 ;; Registers used:
  9063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9064 ;; Tracked objects:
  9065 ;;		On entry : 0/0
  9066 ;;		On exit  : 0/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9071 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9072 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9073 ;;Total ram usage:        2 bytes
  9074 ;; Hardware stack levels used:    1
  9075 ;; Hardware stack levels required when called:    8
  9076 ;; This function calls:
  9077 ;;		_Console_FormFeed
  9078 ;;		_Console_NewLine
  9079 ;; This function is called by:
  9080 ;;		_Console_Tab
  9081 ;;		_Console_PrintChar
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           	psect	text21
  9086  017152                     __ptext21:
  9087                           	opt stack 0
  9088  017152                     _Console_IncrementCursor:
  9089                           	opt stack 18
  9090                           
  9091                           ;Console.c: 246: lBufferX += 1;
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;incstack = 0
  9095  017152  0100               	movlb	0	; () banked
  9096  017154  2BF3               	incf	_lBufferX& (0+255),f,b
  9097                           
  9098                           ; BSR set to: 0
  9099                           ;Console.c: 248: gCursor.x += 6;
  9100  017156  0E06               	movlw	6
  9101  017158  2645               	addwf	_gCursor,f,c
  9102  01715A  0E00               	movlw	0
  9103  01715C  2246               	addwfc	_gCursor+1,f,c
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  9107  01715E  0E06               	movlw	6
  9108  017160  2445               	addwf	_gCursor,w,c
  9109  017162  0100               	movlb	0	; () banked
  9110  017164  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  9111  017166  0E00               	movlw	0
  9112  017168  2046               	addwfc	_gCursor+1,w,c
  9113  01716A  0100               	movlb	0	; () banked
  9114  01716C  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9115  01716E  0100               	movlb	0	; () banked
  9116  017170  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9117  017172  D009               	goto	l1004
  9118  017174  0100               	movlb	0	; () banked
  9119  017176  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9120  017178  E104               	bnz	u11060
  9121  01717A  0E80               	movlw	128
  9122  01717C  0100               	movlb	0	; () banked
  9123  01717E  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9124  017180  B0D8               	btfsc	status,0,c
  9125  017182                     u11060:
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;Console.c: 250: Console_NewLine();
  9129  017182  ECB8  F0B1         	call	_Console_NewLine	;wreg free
  9130  017186                     l1004:
  9131                           
  9132                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  9133  017186  0E08               	movlw	8
  9134  017188  2447               	addwf	_gCursor+2,w,c
  9135  01718A  0100               	movlb	0	; () banked
  9136  01718C  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  9137  01718E  0E00               	movlw	0
  9138  017190  2048               	addwfc	_gCursor+3,w,c
  9139  017192  0100               	movlb	0	; () banked
  9140  017194  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9141  017196  0100               	movlb	0	; () banked
  9142  017198  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9143  01719A  D00C               	goto	l1005
  9144  01719C  0100               	movlb	0	; () banked
  9145  01719E  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9146  0171A0  E105               	bnz	u11070
  9147  0171A2  0E80               	movlw	128
  9148  0171A4  0100               	movlb	0	; () banked
  9149  0171A6  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9150  0171A8  A0D8               	btfss	status,0,c
  9151  0171AA  D004               	goto	l1005
  9152  0171AC                     u11070:
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;Console.c: 252: {
  9156                           ;Console.c: 253: Console_FormFeed();
  9157  0171AC  ECC4  F0B3         	call	_Console_FormFeed	;wreg free
  9158                           
  9159                           ;Console.c: 254: return 1;
  9160  0171B0  0E01               	movlw	1
  9161  0171B2  0012               	return	
  9162  0171B4                     l1005:
  9163                           
  9164                           ;Console.c: 255: }
  9165                           ;Console.c: 257: return 0;
  9166  0171B4  0E00               	movlw	0
  9167  0171B6  0012               	return	
  9168  0171B8                     __end_of_Console_IncrementCursor:
  9169                           	opt stack 0
  9170                           tblptru	equ	0xFF8
  9171                           tblptrh	equ	0xFF7
  9172                           tblptrl	equ	0xFF6
  9173                           tablat	equ	0xFF5
  9174                           prodh	equ	0xFF4
  9175                           prodl	equ	0xFF3
  9176                           postinc0	equ	0xFEE
  9177                           wreg	equ	0xFE8
  9178                           postdec1	equ	0xFE5
  9179                           fsr1h	equ	0xFE2
  9180                           fsr1l	equ	0xFE1
  9181                           indf2	equ	0xFDF
  9182                           postinc2	equ	0xFDE
  9183                           postdec2	equ	0xFDD
  9184                           fsr2h	equ	0xFDA
  9185                           fsr2l	equ	0xFD9
  9186                           status	equ	0xFD8
  9187                           
  9188 ;; *************** function _Console_NewLine *****************
  9189 ;; Defined at:
  9190 ;;		line 175 in file "Library/Console.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;		None
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;		None
  9195 ;; Return value:  Size  Location     Type
  9196 ;;                  1    wreg      void 
  9197 ;; Registers used:
  9198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;Total ram usage:        2 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    7
  9211 ;; This function calls:
  9212 ;;		Nothing
  9213 ;; This function is called by:
  9214 ;;		_Console_IncrementCursor
  9215 ;;		_Console_PrintChar
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           	psect	text22
  9220  016370                     __ptext22:
  9221                           	opt stack 0
  9222  016370                     _Console_NewLine:
  9223                           	opt stack 18
  9224                           
  9225                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  9226                           
  9227                           ;incstack = 0
  9228  016370  D03D               	goto	l983
  9229  016372                     
  9230                           ;Console.c: 179: {
  9231                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  9232  016372  0100               	movlb	0	; () banked
  9233  016374  51F2               	movf	_lBufferY& (0+255),w,b
  9234  016376  0D14               	mullw	20
  9235  016378  0EF0               	movlw	low _lBuffer
  9236  01637A  0100               	movlb	0	; () banked
  9237  01637C  6F60               	movwf	??_Console_NewLine& (0+255),b
  9238  01637E  0E04               	movlw	high _lBuffer
  9239  016380  0100               	movlb	0	; () banked
  9240  016382  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  9241  016384  50F3               	movf	prodl,w,c
  9242  016386  0100               	movlb	0	; () banked
  9243  016388  2760               	addwf	??_Console_NewLine& (0+255),f,b
  9244  01638A  50F4               	movf	prodh,w,c
  9245  01638C  0100               	movlb	0	; () banked
  9246  01638E  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9247  016390  0100               	movlb	0	; () banked
  9248  016392  51F3               	movf	_lBufferX& (0+255),w,b
  9249  016394  0D01               	mullw	1
  9250  016396  50F3               	movf	prodl,w,c
  9251  016398  0100               	movlb	0	; () banked
  9252  01639A  2560               	addwf	??_Console_NewLine& (0+255),w,b
  9253  01639C  6ED9               	movwf	fsr2l,c
  9254  01639E  50F4               	movf	prodh,w,c
  9255  0163A0  0100               	movlb	0	; () banked
  9256  0163A2  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9257  0163A4  6EDA               	movwf	fsr2h,c
  9258  0163A6  50DF               	movf	indf2,w,c
  9259  0163A8  B4D8               	btfsc	status,2,c
  9260  0163AA  D01E               	goto	l985
  9261                           
  9262                           ; BSR set to: 0
  9263                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  9264  0163AC  0E01               	movlw	1
  9265  0163AE  6E4E               	movwf	_change,c
  9266                           
  9267                           ; BSR set to: 0
  9268  0163B0  0100               	movlb	0	; () banked
  9269  0163B2  51F2               	movf	_lBufferY& (0+255),w,b
  9270  0163B4  0D14               	mullw	20
  9271  0163B6  0EF0               	movlw	low _lBuffer
  9272  0163B8  0100               	movlb	0	; () banked
  9273  0163BA  6F60               	movwf	??_Console_NewLine& (0+255),b
  9274  0163BC  0E04               	movlw	high _lBuffer
  9275  0163BE  0100               	movlb	0	; () banked
  9276  0163C0  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  9277  0163C2  50F3               	movf	prodl,w,c
  9278  0163C4  0100               	movlb	0	; () banked
  9279  0163C6  2760               	addwf	??_Console_NewLine& (0+255),f,b
  9280  0163C8  50F4               	movf	prodh,w,c
  9281  0163CA  0100               	movlb	0	; () banked
  9282  0163CC  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9283  0163CE  0100               	movlb	0	; () banked
  9284  0163D0  51F3               	movf	_lBufferX& (0+255),w,b
  9285  0163D2  0D01               	mullw	1
  9286  0163D4  50F3               	movf	prodl,w,c
  9287  0163D6  0100               	movlb	0	; () banked
  9288  0163D8  2560               	addwf	??_Console_NewLine& (0+255),w,b
  9289  0163DA  6ED9               	movwf	fsr2l,c
  9290  0163DC  50F4               	movf	prodh,w,c
  9291  0163DE  0100               	movlb	0	; () banked
  9292  0163E0  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9293  0163E2  6EDA               	movwf	fsr2h,c
  9294  0163E4  0E80               	movlw	128
  9295  0163E6  6EDF               	movwf	indf2,c
  9296  0163E8                     l985:
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;Console.c: 182: lBufferX ++;
  9300                           
  9301                           ; BSR set to: 0
  9302  0163E8  0100               	movlb	0	; () banked
  9303  0163EA  2BF3               	incf	_lBufferX& (0+255),f,b
  9304  0163EC                     l983:
  9305                           
  9306                           ; BSR set to: 0
  9307  0163EC  0E13               	movlw	19
  9308  0163EE  0100               	movlb	0	; () banked
  9309  0163F0  65F3               	cpfsgt	_lBufferX& (0+255),b
  9310  0163F2  D7BF               	goto	l984
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;Console.c: 183: }
  9314                           ;Console.c: 185: lBufferX = 0;
  9315                           
  9316                           ; BSR set to: 0
  9317  0163F4  0E00               	movlw	0
  9318  0163F6  0100               	movlb	0	; () banked
  9319  0163F8  6FF3               	movwf	_lBufferX& (0+255),b
  9320                           
  9321                           ; BSR set to: 0
  9322                           ;Console.c: 186: lBufferY ++;
  9323  0163FA  0100               	movlb	0	; () banked
  9324  0163FC  2BF2               	incf	_lBufferY& (0+255),f,b
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;Console.c: 188: gCursor.y += 8;
  9328  0163FE  0E08               	movlw	8
  9329  016400  2647               	addwf	_gCursor+2,f,c
  9330  016402  0E00               	movlw	0
  9331  016404  2248               	addwfc	_gCursor+3,f,c
  9332                           
  9333                           ; BSR set to: 0
  9334                           ;Console.c: 189: gCursor.x = 6;
  9335  016406  0E00               	movlw	0
  9336  016408  6E46               	movwf	_gCursor+1,c
  9337  01640A  0E06               	movlw	6
  9338  01640C  6E45               	movwf	_gCursor,c
  9339                           
  9340                           ; BSR set to: 0
  9341  01640E  0012               	return		;funcret
  9342  016410                     __end_of_Console_NewLine:
  9343                           	opt stack 0
  9344                           tblptru	equ	0xFF8
  9345                           tblptrh	equ	0xFF7
  9346                           tblptrl	equ	0xFF6
  9347                           tablat	equ	0xFF5
  9348                           prodh	equ	0xFF4
  9349                           prodl	equ	0xFF3
  9350                           postinc0	equ	0xFEE
  9351                           wreg	equ	0xFE8
  9352                           postdec1	equ	0xFE5
  9353                           fsr1h	equ	0xFE2
  9354                           fsr1l	equ	0xFE1
  9355                           indf2	equ	0xFDF
  9356                           postinc2	equ	0xFDE
  9357                           postdec2	equ	0xFDD
  9358                           fsr2h	equ	0xFDA
  9359                           fsr2l	equ	0xFD9
  9360                           status	equ	0xFD8
  9361                           
  9362 ;; *************** function _Console_FormFeed *****************
  9363 ;; Defined at:
  9364 ;;		line 192 in file "Library/Console.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;		None
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;  y               1    3[BANK0 ] unsigned char 
  9369 ;;  x               1    2[BANK0 ] unsigned char 
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  1    wreg      void 
  9372 ;; Registers used:
  9373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;Total ram usage:        4 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    7
  9386 ;; This function calls:
  9387 ;;		Nothing
  9388 ;; This function is called by:
  9389 ;;		_Console_IncrementCursor
  9390 ;;		_Console_PrintChar
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text23
  9395  016788                     __ptext23:
  9396                           	opt stack 0
  9397  016788                     _Console_FormFeed:
  9398                           	opt stack 18
  9399                           
  9400                           ;Console.c: 195: lBufferX = 0;
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;incstack = 0
  9404  016788  0E00               	movlw	0
  9405  01678A  0100               	movlb	0	; () banked
  9406  01678C  6FF3               	movwf	_lBufferX& (0+255),b
  9407                           
  9408                           ;Console.c: 196: lBufferY = 0;
  9409  01678E  0E00               	movlw	0
  9410  016790  0100               	movlb	0	; () banked
  9411  016792  6FF2               	movwf	_lBufferY& (0+255),b
  9412                           
  9413                           ;Console.c: 197: UINT8 x, y;
  9414                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  9415  016794  0E00               	movlw	0
  9416  016796  0100               	movlb	0	; () banked
  9417  016798  6F63               	movwf	Console_FormFeed@y& (0+255),b
  9418  01679A                     l13560:
  9419                           
  9420                           ; BSR set to: 0
  9421  01679A  0E0E               	movlw	14
  9422  01679C  0100               	movlb	0	; () banked
  9423  01679E  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  9424  0167A0  D001               	goto	l990
  9425  0167A2  D02C               	goto	u10860
  9426  0167A4                     l990:
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9430                           
  9431                           ; BSR set to: 0
  9432  0167A4  0E00               	movlw	0
  9433  0167A6  0100               	movlb	0	; () banked
  9434  0167A8  6F62               	movwf	Console_FormFeed@x& (0+255),b
  9435  0167AA                     l13566:
  9436                           
  9437                           ; BSR set to: 0
  9438  0167AA  0E13               	movlw	19
  9439  0167AC  0100               	movlb	0	; () banked
  9440  0167AE  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  9441  0167B0  D001               	goto	l992
  9442  0167B2  D021               	goto	u10850
  9443  0167B4                     l992:
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  9447                           
  9448                           ; BSR set to: 0
  9449  0167B4  0E01               	movlw	1
  9450  0167B6  6E4E               	movwf	_change,c
  9451                           
  9452                           ; BSR set to: 0
  9453  0167B8  0100               	movlb	0	; () banked
  9454  0167BA  5163               	movf	Console_FormFeed@y& (0+255),w,b
  9455  0167BC  0D14               	mullw	20
  9456  0167BE  0EF0               	movlw	low _lBuffer
  9457  0167C0  0100               	movlb	0	; () banked
  9458  0167C2  6F60               	movwf	??_Console_FormFeed& (0+255),b
  9459  0167C4  0E04               	movlw	high _lBuffer
  9460  0167C6  0100               	movlb	0	; () banked
  9461  0167C8  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  9462  0167CA  50F3               	movf	prodl,w,c
  9463  0167CC  0100               	movlb	0	; () banked
  9464  0167CE  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  9465  0167D0  50F4               	movf	prodh,w,c
  9466  0167D2  0100               	movlb	0	; () banked
  9467  0167D4  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  9468  0167D6  0100               	movlb	0	; () banked
  9469  0167D8  5162               	movf	Console_FormFeed@x& (0+255),w,b
  9470  0167DA  0D01               	mullw	1
  9471  0167DC  50F3               	movf	prodl,w,c
  9472  0167DE  0100               	movlb	0	; () banked
  9473  0167E0  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  9474  0167E2  6ED9               	movwf	fsr2l,c
  9475  0167E4  50F4               	movf	prodh,w,c
  9476  0167E6  0100               	movlb	0	; () banked
  9477  0167E8  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  9478  0167EA  6EDA               	movwf	fsr2h,c
  9479  0167EC  0E80               	movlw	128
  9480  0167EE  6EDF               	movwf	indf2,c
  9481                           
  9482                           ; BSR set to: 0
  9483  0167F0  0100               	movlb	0	; () banked
  9484  0167F2  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  9485  0167F4  D7DA               	goto	l13566
  9486  0167F6                     u10850:
  9487                           
  9488                           ; BSR set to: 0
  9489                           
  9490                           ; BSR set to: 0
  9491  0167F6  0100               	movlb	0	; () banked
  9492  0167F8  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  9493  0167FA  D7CF               	goto	l13560
  9494  0167FC                     u10860:
  9495                           
  9496                           ; BSR set to: 0
  9497                           ;Console.c: 204: clearall = 1;
  9498                           
  9499                           ; BSR set to: 0
  9500  0167FC  0E01               	movlw	1
  9501  0167FE  0100               	movlb	0	; () banked
  9502  016800  6FF4               	movwf	_clearall& (0+255),b
  9503                           
  9504                           ;Console.c: 205: gCursor.x = 6;
  9505  016802  0E00               	movlw	0
  9506  016804  6E46               	movwf	_gCursor+1,c
  9507  016806  0E06               	movlw	6
  9508  016808  6E45               	movwf	_gCursor,c
  9509                           
  9510                           ;Console.c: 206: gCursor.y = 6;
  9511  01680A  0E00               	movlw	0
  9512  01680C  6E48               	movwf	_gCursor+3,c
  9513  01680E  0E06               	movlw	6
  9514  016810  6E47               	movwf	_gCursor+2,c
  9515                           
  9516                           ; BSR set to: 0
  9517  016812  0012               	return		;funcret
  9518  016814                     __end_of_Console_FormFeed:
  9519                           	opt stack 0
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           prodh	equ	0xFF4
  9525                           prodl	equ	0xFF3
  9526                           postinc0	equ	0xFEE
  9527                           wreg	equ	0xFE8
  9528                           postdec1	equ	0xFE5
  9529                           fsr1h	equ	0xFE2
  9530                           fsr1l	equ	0xFE1
  9531                           indf2	equ	0xFDF
  9532                           postinc2	equ	0xFDE
  9533                           postdec2	equ	0xFDD
  9534                           fsr2h	equ	0xFDA
  9535                           fsr2l	equ	0xFD9
  9536                           status	equ	0xFD8
  9537                           
  9538 ;; *************** function _Console_ResetCursor *****************
  9539 ;; Defined at:
  9540 ;;		line 297 in file "Library/Console.c"
  9541 ;; Parameters:    Size  Location     Type
  9542 ;;		None
  9543 ;; Auto vars:     Size  Location     Type
  9544 ;;		None
  9545 ;; Return value:  Size  Location     Type
  9546 ;;                  1    wreg      void 
  9547 ;; Registers used:
  9548 ;;		wreg, status,2
  9549 ;; Tracked objects:
  9550 ;;		On entry : 0/0
  9551 ;;		On exit  : 0/0
  9552 ;;		Unchanged: 0/0
  9553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9558 ;;Total ram usage:        0 bytes
  9559 ;; Hardware stack levels used:    1
  9560 ;; Hardware stack levels required when called:    7
  9561 ;; This function calls:
  9562 ;;		Nothing
  9563 ;; This function is called by:
  9564 ;;		_Console_PrintChar
  9565 ;; This function uses a non-reentrant model
  9566 ;;
  9567                           
  9568                           	psect	text24
  9569  017D82                     __ptext24:
  9570                           	opt stack 0
  9571  017D82                     _Console_ResetCursor:
  9572                           	opt stack 20
  9573                           
  9574                           ;Console.c: 299: gCursor.x = 6;
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;incstack = 0
  9578  017D82  0E00               	movlw	0
  9579  017D84  6E46               	movwf	_gCursor+1,c
  9580  017D86  0E06               	movlw	6
  9581  017D88  6E45               	movwf	_gCursor,c
  9582                           
  9583                           ;Console.c: 300: gCursor.y = 6;
  9584  017D8A  0E00               	movlw	0
  9585  017D8C  6E48               	movwf	_gCursor+3,c
  9586  017D8E  0E06               	movlw	6
  9587  017D90  6E47               	movwf	_gCursor+2,c
  9588                           
  9589                           ;Console.c: 303: lBufferX = 0;
  9590  017D92  0E00               	movlw	0
  9591  017D94  0100               	movlb	0	; () banked
  9592  017D96  6FF3               	movwf	_lBufferX& (0+255),b
  9593                           
  9594                           ;Console.c: 304: lBufferY = 0;
  9595  017D98  0E00               	movlw	0
  9596  017D9A  0100               	movlb	0	; () banked
  9597  017D9C  6FF2               	movwf	_lBufferY& (0+255),b
  9598                           
  9599                           ; BSR set to: 0
  9600  017D9E  0012               	return		;funcret
  9601  017DA0                     __end_of_Console_ResetCursor:
  9602                           	opt stack 0
  9603                           tblptru	equ	0xFF8
  9604                           tblptrh	equ	0xFF7
  9605                           tblptrl	equ	0xFF6
  9606                           tablat	equ	0xFF5
  9607                           prodh	equ	0xFF4
  9608                           prodl	equ	0xFF3
  9609                           postinc0	equ	0xFEE
  9610                           wreg	equ	0xFE8
  9611                           postdec1	equ	0xFE5
  9612                           fsr1h	equ	0xFE2
  9613                           fsr1l	equ	0xFE1
  9614                           indf2	equ	0xFDF
  9615                           postinc2	equ	0xFDE
  9616                           postdec2	equ	0xFDD
  9617                           fsr2h	equ	0xFDA
  9618                           fsr2l	equ	0xFD9
  9619                           status	equ	0xFD8
  9620                           
  9621 ;; *************** function _Console_Backspace *****************
  9622 ;; Defined at:
  9623 ;;		line 209 in file "Library/Console.c"
  9624 ;; Parameters:    Size  Location     Type
  9625 ;;		None
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;		None
  9628 ;; Return value:  Size  Location     Type
  9629 ;;                  1    wreg      void 
  9630 ;; Registers used:
  9631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9632 ;; Tracked objects:
  9633 ;;		On entry : 0/0
  9634 ;;		On exit  : 0/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9641 ;;Total ram usage:        0 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:    8
  9644 ;; This function calls:
  9645 ;;		_Console_ClearCursor
  9646 ;; This function is called by:
  9647 ;;		_Console_PrintChar
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           	psect	text25
  9652  0172E0                     __ptext25:
  9653                           	opt stack 0
  9654  0172E0                     _Console_Backspace:
  9655                           	opt stack 19
  9656                           
  9657                           ;Console.c: 211: if (lBufferX > 0)
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;incstack = 0
  9661  0172E0  0100               	movlb	0	; () banked
  9662  0172E2  51F3               	movf	_lBufferX& (0+255),w,b
  9663  0172E4  B4D8               	btfsc	status,2,c
  9664  0172E6  D007               	goto	l997
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;Console.c: 212: {
  9668                           ;Console.c: 213: gCursor.x -= 6;
  9669  0172E8  0EFA               	movlw	250
  9670  0172EA  2645               	addwf	_gCursor,f,c
  9671  0172EC  0EFF               	movlw	255
  9672  0172EE  2246               	addwfc	_gCursor+1,f,c
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;Console.c: 216: lBufferX --;
  9676  0172F0  0100               	movlb	0	; () banked
  9677  0172F2  07F3               	decf	_lBufferX& (0+255),f,b
  9678                           
  9679                           ;Console.c: 218: }
  9680  0172F4  D020               	goto	l1000
  9681  0172F6                     l997:
  9682                           
  9683                           ; BSR set to: 0
  9684                           ;Console.c: 219: else if (lBufferY > 0)
  9685                           
  9686                           ; BSR set to: 0
  9687  0172F6  0100               	movlb	0	; () banked
  9688  0172F8  51F2               	movf	_lBufferY& (0+255),w,b
  9689  0172FA  B4D8               	btfsc	status,2,c
  9690  0172FC  D00E               	goto	l999
  9691                           
  9692                           ; BSR set to: 0
  9693                           ;Console.c: 220: {
  9694                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  9695  0172FE  0E00               	movlw	0
  9696  017300  6E46               	movwf	_gCursor+1,c
  9697  017302  0E72               	movlw	114
  9698  017304  6E45               	movwf	_gCursor,c
  9699                           
  9700                           ; BSR set to: 0
  9701                           ;Console.c: 222: gCursor.y -= 8;
  9702  017306  0EF8               	movlw	248
  9703  017308  2647               	addwf	_gCursor+2,f,c
  9704  01730A  0EFF               	movlw	255
  9705  01730C  2248               	addwfc	_gCursor+3,f,c
  9706                           
  9707                           ; BSR set to: 0
  9708                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  9709  01730E  0E13               	movlw	19
  9710  017310  0100               	movlb	0	; () banked
  9711  017312  6FF3               	movwf	_lBufferX& (0+255),b
  9712                           
  9713                           ; BSR set to: 0
  9714                           ;Console.c: 226: lBufferY --;
  9715  017314  0100               	movlb	0	; () banked
  9716  017316  07F2               	decf	_lBufferY& (0+255),f,b
  9717                           
  9718                           ;Console.c: 228: }
  9719  017318  D00E               	goto	l1000
  9720  01731A                     l999:
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;Console.c: 229: else
  9724                           ;Console.c: 230: {
  9725                           ;Console.c: 231: gCursor.x = 6;
  9726                           
  9727                           ; BSR set to: 0
  9728  01731A  0E00               	movlw	0
  9729  01731C  6E46               	movwf	_gCursor+1,c
  9730  01731E  0E06               	movlw	6
  9731  017320  6E45               	movwf	_gCursor,c
  9732                           
  9733                           ;Console.c: 232: gCursor.y = 6;
  9734  017322  0E00               	movlw	0
  9735  017324  6E48               	movwf	_gCursor+3,c
  9736  017326  0E06               	movlw	6
  9737  017328  6E47               	movwf	_gCursor+2,c
  9738                           
  9739                           ;Console.c: 235: lBufferX = 0;
  9740  01732A  0E00               	movlw	0
  9741  01732C  0100               	movlb	0	; () banked
  9742  01732E  6FF3               	movwf	_lBufferX& (0+255),b
  9743                           
  9744                           ;Console.c: 236: lBufferY = 0;
  9745  017330  0E00               	movlw	0
  9746  017332  0100               	movlb	0	; () banked
  9747  017334  6FF2               	movwf	_lBufferY& (0+255),b
  9748  017336                     l1000:
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;Console.c: 238: }
  9752                           ;Console.c: 240: Console_ClearCursor();
  9753                           
  9754                           ; BSR set to: 0
  9755                           
  9756                           ; BSR set to: 0
  9757  017336  EC43  F0BC         	call	_Console_ClearCursor	;wreg free
  9758  01733A  0012               	return		;funcret
  9759  01733C                     __end_of_Console_Backspace:
  9760                           	opt stack 0
  9761                           tblptru	equ	0xFF8
  9762                           tblptrh	equ	0xFF7
  9763                           tblptrl	equ	0xFF6
  9764                           tablat	equ	0xFF5
  9765                           prodh	equ	0xFF4
  9766                           prodl	equ	0xFF3
  9767                           postinc0	equ	0xFEE
  9768                           wreg	equ	0xFE8
  9769                           postdec1	equ	0xFE5
  9770                           fsr1h	equ	0xFE2
  9771                           fsr1l	equ	0xFE1
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _Console_ClearCursor *****************
  9780 ;; Defined at:
  9781 ;;		line 308 in file "Library/Console.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;		None
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      void 
  9788 ;; Registers used:
  9789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;Total ram usage:        2 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    7
  9802 ;; This function calls:
  9803 ;;		Nothing
  9804 ;; This function is called by:
  9805 ;;		_Console_Backspace
  9806 ;;		_Console_Tab
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text26
  9811  017886                     __ptext26:
  9812                           	opt stack 0
  9813  017886                     _Console_ClearCursor:
  9814                           	opt stack 19
  9815                           
  9816                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  9817                           
  9818                           ;incstack = 0
  9819  017886  0E01               	movlw	1
  9820  017888  6E4E               	movwf	_change,c
  9821  01788A  0100               	movlb	0	; () banked
  9822  01788C  51F2               	movf	_lBufferY& (0+255),w,b
  9823  01788E  0D14               	mullw	20
  9824  017890  0EF0               	movlw	low _lBuffer
  9825  017892  0100               	movlb	0	; () banked
  9826  017894  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  9827  017896  0E04               	movlw	high _lBuffer
  9828  017898  0100               	movlb	0	; () banked
  9829  01789A  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  9830  01789C  50F3               	movf	prodl,w,c
  9831  01789E  0100               	movlb	0	; () banked
  9832  0178A0  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  9833  0178A2  50F4               	movf	prodh,w,c
  9834  0178A4  0100               	movlb	0	; () banked
  9835  0178A6  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  9836  0178A8  0100               	movlb	0	; () banked
  9837  0178AA  51F3               	movf	_lBufferX& (0+255),w,b
  9838  0178AC  0D01               	mullw	1
  9839  0178AE  50F3               	movf	prodl,w,c
  9840  0178B0  0100               	movlb	0	; () banked
  9841  0178B2  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  9842  0178B4  6ED9               	movwf	fsr2l,c
  9843  0178B6  50F4               	movf	prodh,w,c
  9844  0178B8  0100               	movlb	0	; () banked
  9845  0178BA  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  9846  0178BC  6EDA               	movwf	fsr2h,c
  9847  0178BE  0E80               	movlw	128
  9848  0178C0  6EDF               	movwf	indf2,c
  9849                           
  9850                           ; BSR set to: 0
  9851  0178C2  0012               	return		;funcret
  9852  0178C4                     __end_of_Console_ClearCursor:
  9853                           	opt stack 0
  9854                           tblptru	equ	0xFF8
  9855                           tblptrh	equ	0xFF7
  9856                           tblptrl	equ	0xFF6
  9857                           tablat	equ	0xFF5
  9858                           prodh	equ	0xFF4
  9859                           prodl	equ	0xFF3
  9860                           postinc0	equ	0xFEE
  9861                           wreg	equ	0xFE8
  9862                           postdec1	equ	0xFE5
  9863                           fsr1h	equ	0xFE2
  9864                           fsr1l	equ	0xFE1
  9865                           indf2	equ	0xFDF
  9866                           postinc2	equ	0xFDE
  9867                           postdec2	equ	0xFDD
  9868                           fsr2h	equ	0xFDA
  9869                           fsr2l	equ	0xFD9
  9870                           status	equ	0xFD8
  9871                           
  9872 ;; *************** function _fround *****************
  9873 ;; Defined at:
  9874 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;  prec            1    wreg     unsigned char 
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;  prec            1   76[BANK0 ] unsigned char 
  9879 ;; Return value:  Size  Location     Type
  9880 ;;                  4   64[BANK0 ] unsigned char 
  9881 ;; Registers used:
  9882 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9888 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9889 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9891 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9892 ;;Total ram usage:       13 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    8
  9895 ;; This function calls:
  9896 ;;		___awdiv
  9897 ;;		___awmod
  9898 ;;		___flmul
  9899 ;; This function is called by:
  9900 ;;		_printf
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           	psect	text27
  9905  012B3C                     __ptext27:
  9906                           	opt stack 0
  9907  012B3C                     _fround:
  9908                           	opt stack 21
  9909                           
  9910                           ; BSR set to: 0
  9911                           ;incstack = 0
  9912                           ;fround@prec stored from wreg
  9913  012B3C  0100               	movlb	0	; () banked
  9914  012B3E  6FAC               	movwf	fround@prec& (0+255),b
  9915                           
  9916                           ;doprnt.c: 413: if(prec>=110)
  9917  012B40  0E6D               	movlw	109
  9918  012B42  0100               	movlb	0	; () banked
  9919  012B44  65AC               	cpfsgt	fround@prec& (0+255),b
  9920  012B46  D0CD               	goto	l2429
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9924  012B48  0E00               	movlw	0
  9925  012B4A  0100               	movlb	0	; () banked
  9926  012B4C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  9927  012B4E  0E0A               	movlw	10
  9928  012B50  6F68               	movwf	___awdiv@divisor& (0+255),b
  9929  012B52  0E00               	movlw	0
  9930  012B54  0100               	movlb	0	; () banked
  9931  012B56  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  9932  012B58  0E64               	movlw	100
  9933  012B5A  6F62               	movwf	___awmod@divisor& (0+255),b
  9934  012B5C  C0AC  F060         	movff	fround@prec,___awmod@dividend
  9935  012B60  0100               	movlb	0	; () banked
  9936  012B62  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  9937  012B64  EC67  F0B1         	call	___awmod	;wreg free
  9938  012B68  C060  F066         	movff	?___awmod,___awdiv@dividend
  9939  012B6C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  9940  012B70  ECFD  F0AC         	call	___awdiv	;wreg free
  9941  012B74  0100               	movlb	0	; () banked
  9942  012B76  90D8               	bcf	status,0,c
  9943  012B78  3766               	rlcf	?___awdiv& (0+255),f,b
  9944  012B7A  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  9945  012B7C  0100               	movlb	0	; () banked
  9946  012B7E  90D8               	bcf	status,0,c
  9947  012B80  3766               	rlcf	?___awdiv& (0+255),f,b
  9948  012B82  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  9949  012B84  0E24               	movlw	36
  9950  012B86  0100               	movlb	0	; () banked
  9951  012B88  2766               	addwf	?___awdiv& (0+255),f,b
  9952  012B8A  0E00               	movlw	0
  9953  012B8C  0100               	movlb	0	; () banked
  9954  012B8E  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
  9955  012B90  0EDF               	movlw	low __npowers_
  9956  012B92  0100               	movlb	0	; () banked
  9957  012B94  2566               	addwf	?___awdiv& (0+255),w,b
  9958  012B96  6EF6               	movwf	tblptrl,c
  9959  012B98  0EFC               	movlw	high __npowers_
  9960  012B9A  0100               	movlb	0	; () banked
  9961  012B9C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  9962  012B9E  6EF7               	movwf	tblptrh,c
  9963  012BA0                     	if	1	;There are 3 active tblptr bytes
  9964  012BA0  6AF8               	clrf	tblptru,c
  9965  012BA2  0E00               	movlw	low (__mediumconst shr (0+16))
  9966  012BA4  22F8               	addwfc	tblptru,f,c
  9967  012BA6                     	endif
  9968  012BA6  0009               	tblrd		*+
  9969  012BA8  CFF5 F08B          	movff	tablat,___flmul@a
  9970  012BAC  0009               	tblrd		*+
  9971  012BAE  CFF5 F08C          	movff	tablat,___flmul@a+1
  9972  012BB2  0009               	tblrd		*+
  9973  012BB4  CFF5 F08D          	movff	tablat,___flmul@a+2
  9974  012BB8  000A               	tblrd		*-
  9975  012BBA  CFF5 F08E          	movff	tablat,___flmul@a+3
  9976  012BBE  0E00               	movlw	0
  9977  012BC0  0100               	movlb	0	; () banked
  9978  012BC2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  9979  012BC4  0E64               	movlw	100
  9980  012BC6  6F68               	movwf	___awdiv@divisor& (0+255),b
  9981  012BC8  C0AC  F066         	movff	fround@prec,___awdiv@dividend
  9982  012BCC  0100               	movlb	0	; () banked
  9983  012BCE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  9984  012BD0  ECFD  F0AC         	call	___awdiv	;wreg free
  9985  012BD4  0100               	movlb	0	; () banked
  9986  012BD6  90D8               	bcf	status,0,c
  9987  012BD8  3766               	rlcf	?___awdiv& (0+255),f,b
  9988  012BDA  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  9989  012BDC  0100               	movlb	0	; () banked
  9990  012BDE  90D8               	bcf	status,0,c
  9991  012BE0  3766               	rlcf	?___awdiv& (0+255),f,b
  9992  012BE2  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
  9993  012BE4  0E48               	movlw	72
  9994  012BE6  0100               	movlb	0	; () banked
  9995  012BE8  2766               	addwf	?___awdiv& (0+255),f,b
  9996  012BEA  0E00               	movlw	0
  9997  012BEC  0100               	movlb	0	; () banked
  9998  012BEE  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
  9999  012BF0  0EDF               	movlw	low __npowers_
 10000  012BF2  0100               	movlb	0	; () banked
 10001  012BF4  2566               	addwf	?___awdiv& (0+255),w,b
 10002  012BF6  6EF6               	movwf	tblptrl,c
 10003  012BF8  0EFC               	movlw	high __npowers_
 10004  012BFA  0100               	movlb	0	; () banked
 10005  012BFC  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 10006  012BFE  6EF7               	movwf	tblptrh,c
 10007  012C00                     	if	1	;There are 3 active tblptr bytes
 10008  012C00  6AF8               	clrf	tblptru,c
 10009  012C02  0E00               	movlw	low (__mediumconst shr (0+16))
 10010  012C04  22F8               	addwfc	tblptru,f,c
 10011  012C06                     	endif
 10012  012C06  0009               	tblrd		*+
 10013  012C08  CFF5 F087          	movff	tablat,___flmul@b
 10014  012C0C  0009               	tblrd		*+
 10015  012C0E  CFF5 F088          	movff	tablat,___flmul@b+1
 10016  012C12  0009               	tblrd		*+
 10017  012C14  CFF5 F089          	movff	tablat,___flmul@b+2
 10018  012C18  000A               	tblrd		*-
 10019  012C1A  CFF5 F08A          	movff	tablat,___flmul@b+3
 10020  012C1E  EC59  F089         	call	___flmul	;wreg free
 10021  012C22  C087  F0A8         	movff	?___flmul,_fround$15633
 10022  012C26  C088  F0A9         	movff	?___flmul+1,_fround$15633+1
 10023  012C2A  C089  F0AA         	movff	?___flmul+2,_fround$15633+2
 10024  012C2E  C08A  F0AB         	movff	?___flmul+3,_fround$15633+3
 10025                           
 10026                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10027  012C32  0E00               	movlw	0
 10028  012C34  0100               	movlb	0	; () banked
 10029  012C36  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 10030  012C38  0E0A               	movlw	10
 10031  012C3A  6F62               	movwf	___awmod@divisor& (0+255),b
 10032  012C3C  C0AC  F060         	movff	fround@prec,___awmod@dividend
 10033  012C40  0100               	movlb	0	; () banked
 10034  012C42  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 10035  012C44  EC67  F0B1         	call	___awmod	;wreg free
 10036  012C48  0100               	movlb	0	; () banked
 10037  012C4A  90D8               	bcf	status,0,c
 10038  012C4C  3760               	rlcf	?___awmod& (0+255),f,b
 10039  012C4E  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 10040  012C50  0100               	movlb	0	; () banked
 10041  012C52  90D8               	bcf	status,0,c
 10042  012C54  3760               	rlcf	?___awmod& (0+255),f,b
 10043  012C56  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 10044  012C58  0EDF               	movlw	low __npowers_
 10045  012C5A  0100               	movlb	0	; () banked
 10046  012C5C  2560               	addwf	?___awmod& (0+255),w,b
 10047  012C5E  6EF6               	movwf	tblptrl,c
 10048  012C60  0EFC               	movlw	high __npowers_
 10049  012C62  0100               	movlb	0	; () banked
 10050  012C64  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 10051  012C66  6EF7               	movwf	tblptrh,c
 10052  012C68                     	if	1	;There are 3 active tblptr bytes
 10053  012C68  6AF8               	clrf	tblptru,c
 10054  012C6A  0E00               	movlw	low (__mediumconst shr (0+16))
 10055  012C6C  22F8               	addwfc	tblptru,f,c
 10056  012C6E                     	endif
 10057  012C6E  0009               	tblrd		*+
 10058  012C70  CFF5 F08B          	movff	tablat,___flmul@a
 10059  012C74  0009               	tblrd		*+
 10060  012C76  CFF5 F08C          	movff	tablat,___flmul@a+1
 10061  012C7A  0009               	tblrd		*+
 10062  012C7C  CFF5 F08D          	movff	tablat,___flmul@a+2
 10063  012C80  000A               	tblrd		*-
 10064  012C82  CFF5 F08E          	movff	tablat,___flmul@a+3
 10065  012C86  C0A8  F087         	movff	_fround$15633,___flmul@b
 10066  012C8A  C0A9  F088         	movff	_fround$15633+1,___flmul@b+1
 10067  012C8E  C0AA  F089         	movff	_fround$15633+2,___flmul@b+2
 10068  012C92  C0AB  F08A         	movff	_fround$15633+3,___flmul@b+3
 10069  012C96  EC59  F089         	call	___flmul	;wreg free
 10070  012C9A  C087  F0A4         	movff	?___flmul,_fround$15634
 10071  012C9E  C088  F0A5         	movff	?___flmul+1,_fround$15634+1
 10072  012CA2  C089  F0A6         	movff	?___flmul+2,_fround$15634+2
 10073  012CA6  C08A  F0A7         	movff	?___flmul+3,_fround$15634+3
 10074                           
 10075                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10076  012CAA  C0A4  F087         	movff	_fround$15634,___flmul@b
 10077  012CAE  C0A5  F088         	movff	_fround$15634+1,___flmul@b+1
 10078  012CB2  C0A6  F089         	movff	_fround$15634+2,___flmul@b+2
 10079  012CB6  C0A7  F08A         	movff	_fround$15634+3,___flmul@b+3
 10080  012CBA  0E00               	movlw	0
 10081  012CBC  0100               	movlb	0	; () banked
 10082  012CBE  6F8B               	movwf	___flmul@a& (0+255),b
 10083  012CC0  0E00               	movlw	0
 10084  012CC2  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 10085  012CC4  0E00               	movlw	0
 10086  012CC6  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 10087  012CC8  0E3F               	movlw	63
 10088  012CCA  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 10089  012CCC  EC59  F089         	call	___flmul	;wreg free
 10090  012CD0  C087  F0A0         	movff	?___flmul,?_fround
 10091  012CD4  C088  F0A1         	movff	?___flmul+1,?_fround+1
 10092  012CD8  C089  F0A2         	movff	?___flmul+2,?_fround+2
 10093  012CDC  C08A  F0A3         	movff	?___flmul+3,?_fround+3
 10094  012CE0  0012               	return	
 10095  012CE2                     l2429:
 10096                           
 10097                           ;doprnt.c: 415: else if(prec > 10)
 10098  012CE2  0E0A               	movlw	10
 10099  012CE4  0100               	movlb	0	; () banked
 10100  012CE6  65AC               	cpfsgt	fround@prec& (0+255),b
 10101  012CE8  D080               	goto	l2432
 10102                           
 10103                           ; BSR set to: 0
 10104                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10105  012CEA  0E00               	movlw	0
 10106  012CEC  0100               	movlb	0	; () banked
 10107  012CEE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 10108  012CF0  0E0A               	movlw	10
 10109  012CF2  6F62               	movwf	___awmod@divisor& (0+255),b
 10110  012CF4  C0AC  F060         	movff	fround@prec,___awmod@dividend
 10111  012CF8  0100               	movlb	0	; () banked
 10112  012CFA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 10113  012CFC  EC67  F0B1         	call	___awmod	;wreg free
 10114  012D00  0100               	movlb	0	; () banked
 10115  012D02  90D8               	bcf	status,0,c
 10116  012D04  3760               	rlcf	?___awmod& (0+255),f,b
 10117  012D06  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 10118  012D08  0100               	movlb	0	; () banked
 10119  012D0A  90D8               	bcf	status,0,c
 10120  012D0C  3760               	rlcf	?___awmod& (0+255),f,b
 10121  012D0E  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 10122  012D10  0EDF               	movlw	low __npowers_
 10123  012D12  0100               	movlb	0	; () banked
 10124  012D14  2560               	addwf	?___awmod& (0+255),w,b
 10125  012D16  6EF6               	movwf	tblptrl,c
 10126  012D18  0EFC               	movlw	high __npowers_
 10127  012D1A  0100               	movlb	0	; () banked
 10128  012D1C  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 10129  012D1E  6EF7               	movwf	tblptrh,c
 10130  012D20                     	if	1	;There are 3 active tblptr bytes
 10131  012D20  6AF8               	clrf	tblptru,c
 10132  012D22  0E00               	movlw	low (__mediumconst shr (0+16))
 10133  012D24  22F8               	addwfc	tblptru,f,c
 10134  012D26                     	endif
 10135  012D26  0009               	tblrd		*+
 10136  012D28  CFF5 F08B          	movff	tablat,___flmul@a
 10137  012D2C  0009               	tblrd		*+
 10138  012D2E  CFF5 F08C          	movff	tablat,___flmul@a+1
 10139  012D32  0009               	tblrd		*+
 10140  012D34  CFF5 F08D          	movff	tablat,___flmul@a+2
 10141  012D38  000A               	tblrd		*-
 10142  012D3A  CFF5 F08E          	movff	tablat,___flmul@a+3
 10143  012D3E  0E00               	movlw	0
 10144  012D40  0100               	movlb	0	; () banked
 10145  012D42  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 10146  012D44  0E0A               	movlw	10
 10147  012D46  6F68               	movwf	___awdiv@divisor& (0+255),b
 10148  012D48  C0AC  F066         	movff	fround@prec,___awdiv@dividend
 10149  012D4C  0100               	movlb	0	; () banked
 10150  012D4E  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 10151  012D50  ECFD  F0AC         	call	___awdiv	;wreg free
 10152  012D54  0100               	movlb	0	; () banked
 10153  012D56  90D8               	bcf	status,0,c
 10154  012D58  3766               	rlcf	?___awdiv& (0+255),f,b
 10155  012D5A  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 10156  012D5C  0100               	movlb	0	; () banked
 10157  012D5E  90D8               	bcf	status,0,c
 10158  012D60  3766               	rlcf	?___awdiv& (0+255),f,b
 10159  012D62  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 10160  012D64  0E24               	movlw	36
 10161  012D66  0100               	movlb	0	; () banked
 10162  012D68  2766               	addwf	?___awdiv& (0+255),f,b
 10163  012D6A  0E00               	movlw	0
 10164  012D6C  0100               	movlb	0	; () banked
 10165  012D6E  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 10166  012D70  0EDF               	movlw	low __npowers_
 10167  012D72  0100               	movlb	0	; () banked
 10168  012D74  2566               	addwf	?___awdiv& (0+255),w,b
 10169  012D76  6EF6               	movwf	tblptrl,c
 10170  012D78  0EFC               	movlw	high __npowers_
 10171  012D7A  0100               	movlb	0	; () banked
 10172  012D7C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 10173  012D7E  6EF7               	movwf	tblptrh,c
 10174  012D80                     	if	1	;There are 3 active tblptr bytes
 10175  012D80  6AF8               	clrf	tblptru,c
 10176  012D82  0E00               	movlw	low (__mediumconst shr (0+16))
 10177  012D84  22F8               	addwfc	tblptru,f,c
 10178  012D86                     	endif
 10179  012D86  0009               	tblrd		*+
 10180  012D88  CFF5 F087          	movff	tablat,___flmul@b
 10181  012D8C  0009               	tblrd		*+
 10182  012D8E  CFF5 F088          	movff	tablat,___flmul@b+1
 10183  012D92  0009               	tblrd		*+
 10184  012D94  CFF5 F089          	movff	tablat,___flmul@b+2
 10185  012D98  000A               	tblrd		*-
 10186  012D9A  CFF5 F08A          	movff	tablat,___flmul@b+3
 10187  012D9E  EC59  F089         	call	___flmul	;wreg free
 10188  012DA2  C087  F0A8         	movff	?___flmul,_fround$15633
 10189  012DA6  C088  F0A9         	movff	?___flmul+1,_fround$15633+1
 10190  012DAA  C089  F0AA         	movff	?___flmul+2,_fround$15633+2
 10191  012DAE  C08A  F0AB         	movff	?___flmul+3,_fround$15633+3
 10192                           
 10193                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10194  012DB2  C0A8  F087         	movff	_fround$15633,___flmul@b
 10195  012DB6  C0A9  F088         	movff	_fround$15633+1,___flmul@b+1
 10196  012DBA  C0AA  F089         	movff	_fround$15633+2,___flmul@b+2
 10197  012DBE  C0AB  F08A         	movff	_fround$15633+3,___flmul@b+3
 10198  012DC2  0E00               	movlw	0
 10199  012DC4  0100               	movlb	0	; () banked
 10200  012DC6  6F8B               	movwf	___flmul@a& (0+255),b
 10201  012DC8  0E00               	movlw	0
 10202  012DCA  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 10203  012DCC  0E00               	movlw	0
 10204  012DCE  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 10205  012DD0  0E3F               	movlw	63
 10206  012DD2  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 10207  012DD4  EC59  F089         	call	___flmul	;wreg free
 10208  012DD8  C087  F0A0         	movff	?___flmul,?_fround
 10209  012DDC  C088  F0A1         	movff	?___flmul+1,?_fround+1
 10210  012DE0  C089  F0A2         	movff	?___flmul+2,?_fround+2
 10211  012DE4  C08A  F0A3         	movff	?___flmul+3,?_fround+3
 10212  012DE8  0012               	return	
 10213  012DEA                     l2432:
 10214                           
 10215                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10216  012DEA  0100               	movlb	0	; () banked
 10217  012DEC  51AC               	movf	fround@prec& (0+255),w,b
 10218  012DEE  0D04               	mullw	4
 10219  012DF0  0EDF               	movlw	low __npowers_
 10220  012DF2  24F3               	addwf	prodl,w,c
 10221  012DF4  6EF6               	movwf	tblptrl,c
 10222  012DF6  0EFC               	movlw	high __npowers_
 10223  012DF8  20F4               	addwfc	prodh,w,c
 10224  012DFA  6EF7               	movwf	tblptrh,c
 10225  012DFC                     	if	1	;There are 3 active tblptr bytes
 10226  012DFC  6AF8               	clrf	tblptru,c
 10227  012DFE  0E00               	movlw	low (__mediumconst shr (0+16))
 10228  012E00  22F8               	addwfc	tblptru,f,c
 10229  012E02                     	endif
 10230  012E02  0009               	tblrd		*+
 10231  012E04  CFF5 F087          	movff	tablat,___flmul@b
 10232  012E08  0009               	tblrd		*+
 10233  012E0A  CFF5 F088          	movff	tablat,___flmul@b+1
 10234  012E0E  0009               	tblrd		*+
 10235  012E10  CFF5 F089          	movff	tablat,___flmul@b+2
 10236  012E14  000A               	tblrd		*-
 10237  012E16  CFF5 F08A          	movff	tablat,___flmul@b+3
 10238  012E1A  0E00               	movlw	0
 10239  012E1C  0100               	movlb	0	; () banked
 10240  012E1E  6F8B               	movwf	___flmul@a& (0+255),b
 10241  012E20  0E00               	movlw	0
 10242  012E22  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 10243  012E24  0E00               	movlw	0
 10244  012E26  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 10245  012E28  0E3F               	movlw	63
 10246  012E2A  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 10247  012E2C  EC59  F089         	call	___flmul	;wreg free
 10248  012E30  C087  F0A0         	movff	?___flmul,?_fround
 10249  012E34  C088  F0A1         	movff	?___flmul+1,?_fround+1
 10250  012E38  C089  F0A2         	movff	?___flmul+2,?_fround+2
 10251  012E3C  C08A  F0A3         	movff	?___flmul+3,?_fround+3
 10252  012E40  0012               	return	
 10253  012E42                     __end_of_fround:
 10254                           	opt stack 0
 10255                           tblptru	equ	0xFF8
 10256                           tblptrh	equ	0xFF7
 10257                           tblptrl	equ	0xFF6
 10258                           tablat	equ	0xFF5
 10259                           prodh	equ	0xFF4
 10260                           prodl	equ	0xFF3
 10261                           postinc0	equ	0xFEE
 10262                           wreg	equ	0xFE8
 10263                           postdec1	equ	0xFE5
 10264                           fsr1h	equ	0xFE2
 10265                           fsr1l	equ	0xFE1
 10266                           indf2	equ	0xFDF
 10267                           postinc2	equ	0xFDE
 10268                           postdec2	equ	0xFDD
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function ___awmod *****************
 10274 ;; Defined at:
 10275 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  dividend        2    0[BANK0 ] int 
 10278 ;;  divisor         2    2[BANK0 ] int 
 10279 ;; Auto vars:     Size  Location     Type
 10280 ;;  sign            1    5[BANK0 ] unsigned char 
 10281 ;;  counter         1    4[BANK0 ] unsigned char 
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  2    0[BANK0 ] int 
 10284 ;; Registers used:
 10285 ;;		wreg, status,2, status,0
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10291 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10292 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10295 ;;Total ram usage:        6 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; Hardware stack levels required when called:    7
 10298 ;; This function calls:
 10299 ;;		Nothing
 10300 ;; This function is called by:
 10301 ;;		_fround
 10302 ;;		_scale
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           	psect	text28
 10307  0162CE                     __ptext28:
 10308                           	opt stack 0
 10309  0162CE                     ___awmod:
 10310                           	opt stack 21
 10311                           
 10312                           ;incstack = 0
 10313  0162CE  0E00               	movlw	0
 10314  0162D0  0100               	movlb	0	; () banked
 10315  0162D2  6F65               	movwf	___awmod@sign& (0+255),b
 10316                           
 10317                           ; BSR set to: 0
 10318  0162D4  0100               	movlb	0	; () banked
 10319  0162D6  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10320  0162D8  D008               	goto	l2687
 10321                           
 10322                           ; BSR set to: 0
 10323  0162DA  0100               	movlb	0	; () banked
 10324  0162DC  6D60               	negf	___awmod@dividend& (0+255),b
 10325  0162DE  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 10326  0162E0  B0D8               	btfsc	status,0,c
 10327  0162E2  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 10328                           
 10329                           ; BSR set to: 0
 10330  0162E4  0E01               	movlw	1
 10331  0162E6  0100               	movlb	0	; () banked
 10332  0162E8  6F65               	movwf	___awmod@sign& (0+255),b
 10333  0162EA                     l2687:
 10334                           
 10335                           ; BSR set to: 0
 10336                           
 10337                           ; BSR set to: 0
 10338  0162EA  0100               	movlb	0	; () banked
 10339  0162EC  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10340  0162EE  D005               	goto	l2688
 10341                           
 10342                           ; BSR set to: 0
 10343  0162F0  0100               	movlb	0	; () banked
 10344  0162F2  6D62               	negf	___awmod@divisor& (0+255),b
 10345  0162F4  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
 10346  0162F6  B0D8               	btfsc	status,0,c
 10347  0162F8  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
 10348  0162FA                     l2688:
 10349                           
 10350                           ; BSR set to: 0
 10351                           
 10352                           ; BSR set to: 0
 10353  0162FA  0100               	movlb	0	; () banked
 10354  0162FC  5162               	movf	___awmod@divisor& (0+255),w,b
 10355  0162FE  0100               	movlb	0	; () banked
 10356  016300  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10357  016302  B4D8               	btfsc	status,2,c
 10358  016304  D026               	goto	l2695
 10359                           
 10360                           ; BSR set to: 0
 10361  016306  0E01               	movlw	1
 10362  016308  0100               	movlb	0	; () banked
 10363  01630A  6F64               	movwf	___awmod@counter& (0+255),b
 10364  01630C  D006               	goto	l2690
 10365  01630E                     
 10366                           ; BSR set to: 0
 10367                           
 10368                           ; BSR set to: 0
 10369  01630E  0100               	movlb	0	; () banked
 10370  016310  90D8               	bcf	status,0,c
 10371  016312  3762               	rlcf	___awmod@divisor& (0+255),f,b
 10372  016314  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10373  016316  0100               	movlb	0	; () banked
 10374  016318  2B64               	incf	___awmod@counter& (0+255),f,b
 10375  01631A                     l2690:
 10376                           
 10377                           ; BSR set to: 0
 10378                           
 10379                           ; BSR set to: 0
 10380  01631A  0100               	movlb	0	; () banked
 10381  01631C  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10382  01631E  D7F7               	goto	l2691
 10383  016320                     u12370:
 10384                           
 10385                           ; BSR set to: 0
 10386                           
 10387                           ; BSR set to: 0
 10388                           
 10389                           ; BSR set to: 0
 10390  016320  0100               	movlb	0	; () banked
 10391  016322  5162               	movf	___awmod@divisor& (0+255),w,b
 10392  016324  0100               	movlb	0	; () banked
 10393  016326  5D60               	subwf	___awmod@dividend& (0+255),w,b
 10394  016328  0100               	movlb	0	; () banked
 10395  01632A  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 10396  01632C  0100               	movlb	0	; () banked
 10397  01632E  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10398  016330  A0D8               	btfss	status,0,c
 10399  016332  D008               	goto	l2694
 10400                           
 10401                           ; BSR set to: 0
 10402  016334  0100               	movlb	0	; () banked
 10403  016336  5162               	movf	___awmod@divisor& (0+255),w,b
 10404  016338  0100               	movlb	0	; () banked
 10405  01633A  5F60               	subwf	___awmod@dividend& (0+255),f,b
 10406  01633C  0100               	movlb	0	; () banked
 10407  01633E  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 10408  016340  0100               	movlb	0	; () banked
 10409  016342  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10410  016344                     l2694:
 10411                           
 10412                           ; BSR set to: 0
 10413                           
 10414                           ; BSR set to: 0
 10415  016344  0100               	movlb	0	; () banked
 10416  016346  90D8               	bcf	status,0,c
 10417  016348  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10418  01634A  3362               	rrcf	___awmod@divisor& (0+255),f,b
 10419                           
 10420                           ; BSR set to: 0
 10421  01634C  0100               	movlb	0	; () banked
 10422  01634E  2F64               	decfsz	___awmod@counter& (0+255),f,b
 10423  016350  D7E7               	goto	u12370
 10424  016352                     l2695:
 10425                           
 10426                           ; BSR set to: 0
 10427                           
 10428                           ; BSR set to: 0
 10429                           
 10430                           ; BSR set to: 0
 10431  016352  0100               	movlb	0	; () banked
 10432  016354  5165               	movf	___awmod@sign& (0+255),w,b
 10433  016356  0100               	movlb	0	; () banked
 10434  016358  B4D8               	btfsc	status,2,c
 10435  01635A  D005               	goto	l2696
 10436                           
 10437                           ; BSR set to: 0
 10438  01635C  0100               	movlb	0	; () banked
 10439  01635E  6D60               	negf	___awmod@dividend& (0+255),b
 10440  016360  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 10441  016362  B0D8               	btfsc	status,0,c
 10442  016364  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 10443  016366                     l2696:
 10444                           
 10445                           ; BSR set to: 0
 10446                           
 10447                           ; BSR set to: 0
 10448  016366  C060  F060         	movff	___awmod@dividend,?___awmod
 10449  01636A  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
 10450  01636E  0012               	return	
 10451  016370                     __end_of___awmod:
 10452                           	opt stack 0
 10453                           tblptru	equ	0xFF8
 10454                           tblptrh	equ	0xFF7
 10455                           tblptrl	equ	0xFF6
 10456                           tablat	equ	0xFF5
 10457                           prodh	equ	0xFF4
 10458                           prodl	equ	0xFF3
 10459                           postinc0	equ	0xFEE
 10460                           wreg	equ	0xFE8
 10461                           postdec1	equ	0xFE5
 10462                           fsr1h	equ	0xFE2
 10463                           fsr1l	equ	0xFE1
 10464                           indf2	equ	0xFDF
 10465                           postinc2	equ	0xFDE
 10466                           postdec2	equ	0xFDD
 10467                           fsr2h	equ	0xFDA
 10468                           fsr2l	equ	0xFD9
 10469                           status	equ	0xFD8
 10470                           
 10471 ;; *************** function ___awdiv *****************
 10472 ;; Defined at:
 10473 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;  dividend        2    6[BANK0 ] int 
 10476 ;;  divisor         2    8[BANK0 ] int 
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;  quotient        2   12[BANK0 ] int 
 10479 ;;  sign            1   11[BANK0 ] unsigned char 
 10480 ;;  counter         1   10[BANK0 ] unsigned char 
 10481 ;; Return value:  Size  Location     Type
 10482 ;;                  2    6[BANK0 ] int 
 10483 ;; Registers used:
 10484 ;;		wreg, status,2, status,0
 10485 ;; Tracked objects:
 10486 ;;		On entry : 0/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10490 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10491 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;Total ram usage:        8 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    7
 10497 ;; This function calls:
 10498 ;;		Nothing
 10499 ;; This function is called by:
 10500 ;;		_Console_Tab
 10501 ;;		_fround
 10502 ;;		_scale
 10503 ;;		_printf
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           	psect	text29
 10508  0159FA                     __ptext29:
 10509                           	opt stack 0
 10510  0159FA                     ___awdiv:
 10511                           	opt stack 21
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;incstack = 0
 10515  0159FA  0E00               	movlw	0
 10516  0159FC  0100               	movlb	0	; () banked
 10517  0159FE  6F6B               	movwf	___awdiv@sign& (0+255),b
 10518                           
 10519                           ; BSR set to: 0
 10520  015A00  0100               	movlb	0	; () banked
 10521  015A02  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10522  015A04  D008               	goto	l2674
 10523                           
 10524                           ; BSR set to: 0
 10525  015A06  0100               	movlb	0	; () banked
 10526  015A08  6D68               	negf	___awdiv@divisor& (0+255),b
 10527  015A0A  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10528  015A0C  B0D8               	btfsc	status,0,c
 10529  015A0E  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10530                           
 10531                           ; BSR set to: 0
 10532  015A10  0E01               	movlw	1
 10533  015A12  0100               	movlb	0	; () banked
 10534  015A14  6F6B               	movwf	___awdiv@sign& (0+255),b
 10535  015A16                     l2674:
 10536                           
 10537                           ; BSR set to: 0
 10538                           
 10539                           ; BSR set to: 0
 10540  015A16  0100               	movlb	0	; () banked
 10541  015A18  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10542  015A1A  D008               	goto	l2675
 10543                           
 10544                           ; BSR set to: 0
 10545  015A1C  0100               	movlb	0	; () banked
 10546  015A1E  6D66               	negf	___awdiv@dividend& (0+255),b
 10547  015A20  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10548  015A22  B0D8               	btfsc	status,0,c
 10549  015A24  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10550                           
 10551                           ; BSR set to: 0
 10552  015A26  0E01               	movlw	1
 10553  015A28  0100               	movlb	0	; () banked
 10554  015A2A  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 10555  015A2C                     l2675:
 10556                           
 10557                           ; BSR set to: 0
 10558                           
 10559                           ; BSR set to: 0
 10560  015A2C  0E00               	movlw	0
 10561  015A2E  0100               	movlb	0	; () banked
 10562  015A30  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10563  015A32  0E00               	movlw	0
 10564  015A34  6F6C               	movwf	___awdiv@quotient& (0+255),b
 10565                           
 10566                           ; BSR set to: 0
 10567  015A36  0100               	movlb	0	; () banked
 10568  015A38  5168               	movf	___awdiv@divisor& (0+255),w,b
 10569  015A3A  0100               	movlb	0	; () banked
 10570  015A3C  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10571  015A3E  B4D8               	btfsc	status,2,c
 10572  015A40  D02C               	goto	l2682
 10573                           
 10574                           ; BSR set to: 0
 10575  015A42  0E01               	movlw	1
 10576  015A44  0100               	movlb	0	; () banked
 10577  015A46  6F6A               	movwf	___awdiv@counter& (0+255),b
 10578  015A48  D006               	goto	l2677
 10579  015A4A                     
 10580                           ; BSR set to: 0
 10581                           
 10582                           ; BSR set to: 0
 10583  015A4A  0100               	movlb	0	; () banked
 10584  015A4C  90D8               	bcf	status,0,c
 10585  015A4E  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 10586  015A50  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10587  015A52  0100               	movlb	0	; () banked
 10588  015A54  2B6A               	incf	___awdiv@counter& (0+255),f,b
 10589  015A56                     l2677:
 10590                           
 10591                           ; BSR set to: 0
 10592                           
 10593                           ; BSR set to: 0
 10594  015A56  0100               	movlb	0	; () banked
 10595  015A58  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10596  015A5A  D7F7               	goto	l2678
 10597  015A5C                     u11220:
 10598                           
 10599                           ; BSR set to: 0
 10600                           
 10601                           ; BSR set to: 0
 10602                           
 10603                           ; BSR set to: 0
 10604  015A5C  0100               	movlb	0	; () banked
 10605  015A5E  90D8               	bcf	status,0,c
 10606  015A60  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 10607  015A62  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10608                           
 10609                           ; BSR set to: 0
 10610  015A64  0100               	movlb	0	; () banked
 10611  015A66  5168               	movf	___awdiv@divisor& (0+255),w,b
 10612  015A68  0100               	movlb	0	; () banked
 10613  015A6A  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 10614  015A6C  0100               	movlb	0	; () banked
 10615  015A6E  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10616  015A70  0100               	movlb	0	; () banked
 10617  015A72  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10618  015A74  A0D8               	btfss	status,0,c
 10619  015A76  D00A               	goto	l2681
 10620                           
 10621                           ; BSR set to: 0
 10622  015A78  0100               	movlb	0	; () banked
 10623  015A7A  5168               	movf	___awdiv@divisor& (0+255),w,b
 10624  015A7C  0100               	movlb	0	; () banked
 10625  015A7E  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 10626  015A80  0100               	movlb	0	; () banked
 10627  015A82  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10628  015A84  0100               	movlb	0	; () banked
 10629  015A86  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10630                           
 10631                           ; BSR set to: 0
 10632  015A88  0100               	movlb	0	; () banked
 10633  015A8A  816C               	bsf	___awdiv@quotient& (0+255),0,b
 10634  015A8C                     l2681:
 10635                           
 10636                           ; BSR set to: 0
 10637                           
 10638                           ; BSR set to: 0
 10639  015A8C  0100               	movlb	0	; () banked
 10640  015A8E  90D8               	bcf	status,0,c
 10641  015A90  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10642  015A92  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 10643                           
 10644                           ; BSR set to: 0
 10645  015A94  0100               	movlb	0	; () banked
 10646  015A96  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 10647  015A98  D7E1               	goto	u11220
 10648  015A9A                     l2682:
 10649                           
 10650                           ; BSR set to: 0
 10651                           
 10652                           ; BSR set to: 0
 10653                           
 10654                           ; BSR set to: 0
 10655  015A9A  0100               	movlb	0	; () banked
 10656  015A9C  516B               	movf	___awdiv@sign& (0+255),w,b
 10657  015A9E  0100               	movlb	0	; () banked
 10658  015AA0  B4D8               	btfsc	status,2,c
 10659  015AA2  D005               	goto	l2683
 10660                           
 10661                           ; BSR set to: 0
 10662  015AA4  0100               	movlb	0	; () banked
 10663  015AA6  6D6C               	negf	___awdiv@quotient& (0+255),b
 10664  015AA8  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10665  015AAA  B0D8               	btfsc	status,0,c
 10666  015AAC  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10667  015AAE                     l2683:
 10668                           
 10669                           ; BSR set to: 0
 10670                           
 10671                           ; BSR set to: 0
 10672  015AAE  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 10673  015AB2  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 10674  015AB6  0012               	return	
 10675  015AB8                     __end_of___awdiv:
 10676                           	opt stack 0
 10677                           tblptru	equ	0xFF8
 10678                           tblptrh	equ	0xFF7
 10679                           tblptrl	equ	0xFF6
 10680                           tablat	equ	0xFF5
 10681                           prodh	equ	0xFF4
 10682                           prodl	equ	0xFF3
 10683                           postinc0	equ	0xFEE
 10684                           wreg	equ	0xFE8
 10685                           postdec1	equ	0xFE5
 10686                           fsr1h	equ	0xFE2
 10687                           fsr1l	equ	0xFE1
 10688                           indf2	equ	0xFDF
 10689                           postinc2	equ	0xFDE
 10690                           postdec2	equ	0xFDD
 10691                           fsr2h	equ	0xFDA
 10692                           fsr2l	equ	0xFD9
 10693                           status	equ	0xFD8
 10694                           
 10695 ;; *************** function __tdiv_to_l_ *****************
 10696 ;; Defined at:
 10697 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  f1              4    0[BANK0 ] float 
 10700 ;;  f2              4    4[BANK0 ] float 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  quot            4   11[BANK0 ] unsigned long 
 10703 ;;  exp1            1   16[BANK0 ] unsigned char 
 10704 ;;  cntr            1   15[BANK0 ] unsigned char 
 10705 ;; Return value:  Size  Location     Type
 10706 ;;                  4    0[BANK0 ] unsigned long 
 10707 ;; Registers used:
 10708 ;;		wreg, status,2, status,0
 10709 ;; Tracked objects:
 10710 ;;		On entry : 0/0
 10711 ;;		On exit  : 0/0
 10712 ;;		Unchanged: 0/0
 10713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10714 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;Total ram usage:       17 bytes
 10719 ;; Hardware stack levels used:    1
 10720 ;; Hardware stack levels required when called:    7
 10721 ;; This function calls:
 10722 ;;		Nothing
 10723 ;; This function is called by:
 10724 ;;		_printf
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           	psect	text30
 10729  013CDC                     __ptext30:
 10730                           	opt stack 0
 10731  013CDC                     __tdiv_to_l_:
 10732                           	opt stack 22
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;incstack = 0
 10736  013CDC  C062  F068         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10737  013CE0  0100               	movlb	0	; () banked
 10738  013CE2  6B69               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10739  013CE4  6B6A               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10740  013CE6  0100               	movlb	0	; () banked
 10741  013CE8  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10742  013CEA  0100               	movlb	0	; () banked
 10743  013CEC  3768               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10744  013CEE  E301               	bnc	u12991
 10745  013CF0  8169               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10746  013CF2                     u12991:
 10747  013CF2  0100               	movlb	0	; () banked
 10748  013CF4  5168               	movf	??__tdiv_to_l_& (0+255),w,b
 10749  013CF6  0100               	movlb	0	; () banked
 10750  013CF8  6F70               	movwf	__tdiv_to_l_@exp1& (0+255),b
 10751  013CFA  0100               	movlb	0	; () banked
 10752  013CFC  5170               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10753  013CFE  A4D8               	btfss	status,2,c
 10754  013D00  D00A               	goto	l2810
 10755                           
 10756                           ; BSR set to: 0
 10757  013D02  0E00               	movlw	0
 10758  013D04  0100               	movlb	0	; () banked
 10759  013D06  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 10760  013D08  0E00               	movlw	0
 10761  013D0A  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10762  013D0C  0E00               	movlw	0
 10763  013D0E  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10764  013D10  0E00               	movlw	0
 10765  013D12  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10766                           
 10767                           ; BSR set to: 0
 10768  013D14  0012               	return	
 10769  013D16                     l2810:
 10770                           
 10771                           ; BSR set to: 0
 10772                           
 10773                           ; BSR set to: 0
 10774  013D16  C066  F068         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10775  013D1A  0100               	movlb	0	; () banked
 10776  013D1C  6B69               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10777  013D1E  6B6A               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10778  013D20  0100               	movlb	0	; () banked
 10779  013D22  3565               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10780  013D24  0100               	movlb	0	; () banked
 10781  013D26  3768               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10782  013D28  E301               	bnc	u13011
 10783  013D2A  8169               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10784  013D2C                     u13011:
 10785  013D2C  0100               	movlb	0	; () banked
 10786  013D2E  5168               	movf	??__tdiv_to_l_& (0+255),w,b
 10787  013D30  0100               	movlb	0	; () banked
 10788  013D32  6F6F               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10789  013D34  0100               	movlb	0	; () banked
 10790  013D36  516F               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10791  013D38  A4D8               	btfss	status,2,c
 10792  013D3A  D00A               	goto	l2812
 10793                           
 10794                           ; BSR set to: 0
 10795  013D3C  0E00               	movlw	0
 10796  013D3E  0100               	movlb	0	; () banked
 10797  013D40  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 10798  013D42  0E00               	movlw	0
 10799  013D44  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10800  013D46  0E00               	movlw	0
 10801  013D48  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10802  013D4A  0E00               	movlw	0
 10803  013D4C  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10804                           
 10805                           ; BSR set to: 0
 10806  013D4E  0012               	return	
 10807  013D50                     l2812:
 10808                           
 10809                           ; BSR set to: 0
 10810                           
 10811                           ; BSR set to: 0
 10812  013D50  0100               	movlb	0	; () banked
 10813  013D52  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 10814                           
 10815                           ; BSR set to: 0
 10816  013D54  0EFF               	movlw	255
 10817  013D56  0100               	movlb	0	; () banked
 10818  013D58  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 10819  013D5A  0EFF               	movlw	255
 10820  013D5C  0100               	movlb	0	; () banked
 10821  013D5E  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10822  013D60  0E00               	movlw	0
 10823  013D62  0100               	movlb	0	; () banked
 10824  013D64  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10825  013D66  0100               	movlb	0	; () banked
 10826  013D68  8F65               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 10827                           
 10828                           ; BSR set to: 0
 10829  013D6A  0EFF               	movlw	255
 10830  013D6C  0100               	movlb	0	; () banked
 10831  013D6E  1764               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 10832  013D70  0EFF               	movlw	255
 10833  013D72  0100               	movlb	0	; () banked
 10834  013D74  1765               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 10835  013D76  0E00               	movlw	0
 10836  013D78  0100               	movlb	0	; () banked
 10837  013D7A  1766               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 10838                           
 10839                           ; BSR set to: 0
 10840  013D7C  0E00               	movlw	0
 10841  013D7E  0100               	movlb	0	; () banked
 10842  013D80  6F6B               	movwf	__tdiv_to_l_@quot& (0+255),b
 10843  013D82  0E00               	movlw	0
 10844  013D84  6F6C               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 10845  013D86  0E00               	movlw	0
 10846  013D88  6F6D               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 10847  013D8A  0E00               	movlw	0
 10848  013D8C  6F6E               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 10849                           
 10850                           ; BSR set to: 0
 10851  013D8E  0E7F               	movlw	127
 10852  013D90  0100               	movlb	0	; () banked
 10853  013D92  5F70               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10854                           
 10855                           ; BSR set to: 0
 10856  013D94  0100               	movlb	0	; () banked
 10857  013D96  516F               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10858  013D98  0F98               	addlw	152
 10859  013D9A  0100               	movlb	0	; () banked
 10860  013D9C  5F70               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10861                           
 10862                           ; BSR set to: 0
 10863  013D9E  0E18               	movlw	24
 10864  013DA0  0100               	movlb	0	; () banked
 10865  013DA2  6F6F               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10866  013DA4                     l2813:
 10867                           
 10868                           ; BSR set to: 0
 10869  013DA4  0100               	movlb	0	; () banked
 10870  013DA6  90D8               	bcf	status,0,c
 10871  013DA8  376B               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10872  013DAA  376C               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10873  013DAC  376D               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10874  013DAE  376E               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10875                           
 10876                           ; BSR set to: 0
 10877  013DB0  0100               	movlb	0	; () banked
 10878  013DB2  5164               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10879  013DB4  0100               	movlb	0	; () banked
 10880  013DB6  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 10881  013DB8  0100               	movlb	0	; () banked
 10882  013DBA  5165               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10883  013DBC  0100               	movlb	0	; () banked
 10884  013DBE  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10885  013DC0  0100               	movlb	0	; () banked
 10886  013DC2  5166               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10887  013DC4  0100               	movlb	0	; () banked
 10888  013DC6  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 10889  013DC8  A0D8               	btfss	status,0,c
 10890  013DCA  D00E               	goto	l2814
 10891                           
 10892                           ; BSR set to: 0
 10893  013DCC  0100               	movlb	0	; () banked
 10894  013DCE  5164               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10895  013DD0  0100               	movlb	0	; () banked
 10896  013DD2  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 10897  013DD4  0100               	movlb	0	; () banked
 10898  013DD6  5165               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10899  013DD8  0100               	movlb	0	; () banked
 10900  013DDA  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10901  013DDC  0100               	movlb	0	; () banked
 10902  013DDE  5166               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10903  013DE0  0100               	movlb	0	; () banked
 10904  013DE2  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10905                           
 10906                           ; BSR set to: 0
 10907  013DE4  0100               	movlb	0	; () banked
 10908  013DE6  816B               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 10909  013DE8                     l2814:
 10910                           
 10911                           ; BSR set to: 0
 10912  013DE8  0100               	movlb	0	; () banked
 10913  013DEA  90D8               	bcf	status,0,c
 10914  013DEC  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 10915  013DEE  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10916  013DF0  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10917                           
 10918                           ; BSR set to: 0
 10919  013DF2  0100               	movlb	0	; () banked
 10920  013DF4  2F6F               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 10921  013DF6  D7D6               	goto	l2813
 10922                           
 10923                           ; BSR set to: 0
 10924                           
 10925                           ; BSR set to: 0
 10926  013DF8  0100               	movlb	0	; () banked
 10927  013DFA  AF70               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 10928  013DFC  D01A               	goto	l2816
 10929                           
 10930                           ; BSR set to: 0
 10931  013DFE  0100               	movlb	0	; () banked
 10932  013E00  5170               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10933  013E02  0A80               	xorlw	128
 10934  013E04  0F97               	addlw	151
 10935  013E06  B0D8               	btfsc	status,0,c
 10936  013E08  D00A               	goto	l2817
 10937                           
 10938                           ; BSR set to: 0
 10939  013E0A  0E00               	movlw	0
 10940  013E0C  0100               	movlb	0	; () banked
 10941  013E0E  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 10942  013E10  0E00               	movlw	0
 10943  013E12  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10944  013E14  0E00               	movlw	0
 10945  013E16  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10946  013E18  0E00               	movlw	0
 10947  013E1A  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10948                           
 10949                           ; BSR set to: 0
 10950  013E1C  0012               	return	
 10951  013E1E                     l2817:
 10952                           
 10953                           ; BSR set to: 0
 10954                           
 10955                           ; BSR set to: 0
 10956                           
 10957                           ; BSR set to: 0
 10958  013E1E  0100               	movlb	0	; () banked
 10959  013E20  90D8               	bcf	status,0,c
 10960  013E22  336E               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10961  013E24  336D               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10962  013E26  336C               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10963  013E28  336B               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 10964                           
 10965                           ; BSR set to: 0
 10966  013E2A  0100               	movlb	0	; () banked
 10967  013E2C  3F70               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 10968  013E2E  D7F7               	goto	l2817
 10969                           
 10970                           ; BSR set to: 0
 10971  013E30  D01B               	goto	u13070
 10972  013E32                     l2816:
 10973                           
 10974                           ; BSR set to: 0
 10975                           
 10976                           ; BSR set to: 0
 10977  013E32  0E17               	movlw	23
 10978  013E34  0100               	movlb	0	; () banked
 10979  013E36  6570               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 10980  013E38  D012               	goto	l2822
 10981                           
 10982                           ; BSR set to: 0
 10983  013E3A  0E00               	movlw	0
 10984  013E3C  0100               	movlb	0	; () banked
 10985  013E3E  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 10986  013E40  0E00               	movlw	0
 10987  013E42  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10988  013E44  0E00               	movlw	0
 10989  013E46  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10990  013E48  0E00               	movlw	0
 10991  013E4A  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10992                           
 10993                           ; BSR set to: 0
 10994  013E4C  0012               	return	
 10995  013E4E                     
 10996                           ; BSR set to: 0
 10997                           
 10998                           ; BSR set to: 0
 10999  013E4E  0100               	movlb	0	; () banked
 11000  013E50  90D8               	bcf	status,0,c
 11001  013E52  376B               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 11002  013E54  376C               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 11003  013E56  376D               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 11004  013E58  376E               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 11005  013E5A  0100               	movlb	0	; () banked
 11006  013E5C  0770               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 11007  013E5E                     l2822:
 11008                           
 11009                           ; BSR set to: 0
 11010                           
 11011                           ; BSR set to: 0
 11012  013E5E  0100               	movlb	0	; () banked
 11013  013E60  5170               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 11014  013E62  0100               	movlb	0	; () banked
 11015  013E64  A4D8               	btfss	status,2,c
 11016  013E66  D7F3               	goto	l2823
 11017  013E68                     u13070:
 11018                           
 11019                           ; BSR set to: 0
 11020                           
 11021                           ; BSR set to: 0
 11022  013E68  C06B  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 11023  013E6C  C06C  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 11024  013E70  C06D  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 11025  013E74  C06E  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 11026                           
 11027                           ; BSR set to: 0
 11028  013E78  0012               	return		;funcret
 11029  013E7A                     __end_of__tdiv_to_l_:
 11030                           	opt stack 0
 11031                           tblptru	equ	0xFF8
 11032                           tblptrh	equ	0xFF7
 11033                           tblptrl	equ	0xFF6
 11034                           tablat	equ	0xFF5
 11035                           prodh	equ	0xFF4
 11036                           prodl	equ	0xFF3
 11037                           postinc0	equ	0xFEE
 11038                           wreg	equ	0xFE8
 11039                           postdec1	equ	0xFE5
 11040                           fsr1h	equ	0xFE2
 11041                           fsr1l	equ	0xFE1
 11042                           indf2	equ	0xFDF
 11043                           postinc2	equ	0xFDE
 11044                           postdec2	equ	0xFDD
 11045                           fsr2h	equ	0xFDA
 11046                           fsr2l	equ	0xFD9
 11047                           status	equ	0xFD8
 11048                           
 11049 ;; *************** function __div_to_l_ *****************
 11050 ;; Defined at:
 11051 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  f1              4    0[BANK0 ] unsigned long 
 11054 ;;  f2              4    4[BANK0 ] unsigned long 
 11055 ;; Auto vars:     Size  Location     Type
 11056 ;;  quot            4    8[BANK0 ] unsigned long 
 11057 ;;  exp1            1   13[BANK0 ] unsigned char 
 11058 ;;  cntr            1   12[BANK0 ] unsigned char 
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  4    0[BANK0 ] unsigned long 
 11061 ;; Registers used:
 11062 ;;		wreg, status,2, status,0
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11068 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11069 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11071 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11072 ;;Total ram usage:       14 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    7
 11075 ;; This function calls:
 11076 ;;		Nothing
 11077 ;; This function is called by:
 11078 ;;		_printf
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           	psect	text31
 11083  014336                     __ptext31:
 11084                           	opt stack 0
 11085  014336                     __div_to_l_:
 11086                           	opt stack 22
 11087                           
 11088                           ; BSR set to: 0
 11089                           ;incstack = 0
 11090  014336  0100               	movlb	0	; () banked
 11091  014338  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 11092  01433A  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 11093  01433C  0100               	movlb	0	; () banked
 11094  01433E  6F6D               	movwf	__div_to_l_@exp1& (0+255),b
 11095  014340  0100               	movlb	0	; () banked
 11096  014342  516D               	movf	__div_to_l_@exp1& (0+255),w,b
 11097  014344  A4D8               	btfss	status,2,c
 11098  014346  D00A               	goto	l2706
 11099                           
 11100                           ; BSR set to: 0
 11101  014348  0E00               	movlw	0
 11102  01434A  0100               	movlb	0	; () banked
 11103  01434C  6F60               	movwf	?__div_to_l_& (0+255),b
 11104  01434E  0E00               	movlw	0
 11105  014350  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 11106  014352  0E00               	movlw	0
 11107  014354  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 11108  014356  0E00               	movlw	0
 11109  014358  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 11110                           
 11111                           ; BSR set to: 0
 11112  01435A  0012               	return	
 11113  01435C                     l2706:
 11114                           
 11115                           ; BSR set to: 0
 11116                           
 11117                           ; BSR set to: 0
 11118  01435C  0100               	movlb	0	; () banked
 11119  01435E  3566               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 11120  014360  3567               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 11121  014362  0100               	movlb	0	; () banked
 11122  014364  6F6C               	movwf	__div_to_l_@cntr& (0+255),b
 11123  014366  0100               	movlb	0	; () banked
 11124  014368  516C               	movf	__div_to_l_@cntr& (0+255),w,b
 11125  01436A  A4D8               	btfss	status,2,c
 11126  01436C  D00A               	goto	l2708
 11127                           
 11128                           ; BSR set to: 0
 11129  01436E  0E00               	movlw	0
 11130  014370  0100               	movlb	0	; () banked
 11131  014372  6F60               	movwf	?__div_to_l_& (0+255),b
 11132  014374  0E00               	movlw	0
 11133  014376  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 11134  014378  0E00               	movlw	0
 11135  01437A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 11136  01437C  0E00               	movlw	0
 11137  01437E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 11138                           
 11139                           ; BSR set to: 0
 11140  014380  0012               	return	
 11141  014382                     l2708:
 11142                           
 11143                           ; BSR set to: 0
 11144                           
 11145                           ; BSR set to: 0
 11146  014382  0100               	movlb	0	; () banked
 11147  014384  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 11148                           
 11149                           ; BSR set to: 0
 11150  014386  0EFF               	movlw	255
 11151  014388  0100               	movlb	0	; () banked
 11152  01438A  1760               	andwf	__div_to_l_@f1& (0+255),f,b
 11153  01438C  0EFF               	movlw	255
 11154  01438E  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 11155  014390  0EFF               	movlw	255
 11156  014392  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 11157  014394  0E00               	movlw	0
 11158  014396  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 11159                           
 11160                           ; BSR set to: 0
 11161  014398  0100               	movlb	0	; () banked
 11162  01439A  8F66               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 11163  01439C  0EFF               	movlw	255
 11164  01439E  0100               	movlb	0	; () banked
 11165  0143A0  1764               	andwf	__div_to_l_@f2& (0+255),f,b
 11166  0143A2  0EFF               	movlw	255
 11167  0143A4  1765               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 11168  0143A6  0EFF               	movlw	255
 11169  0143A8  1766               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 11170  0143AA  0E00               	movlw	0
 11171  0143AC  1767               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 11172                           
 11173                           ; BSR set to: 0
 11174  0143AE  0E00               	movlw	0
 11175  0143B0  0100               	movlb	0	; () banked
 11176  0143B2  6F68               	movwf	__div_to_l_@quot& (0+255),b
 11177  0143B4  0E00               	movlw	0
 11178  0143B6  6F69               	movwf	(__div_to_l_@quot+1)& (0+255),b
 11179  0143B8  0E00               	movlw	0
 11180  0143BA  6F6A               	movwf	(__div_to_l_@quot+2)& (0+255),b
 11181  0143BC  0E00               	movlw	0
 11182  0143BE  6F6B               	movwf	(__div_to_l_@quot+3)& (0+255),b
 11183                           
 11184                           ; BSR set to: 0
 11185  0143C0  0E7F               	movlw	127
 11186  0143C2  0100               	movlb	0	; () banked
 11187  0143C4  5F6D               	subwf	__div_to_l_@exp1& (0+255),f,b
 11188                           
 11189                           ; BSR set to: 0
 11190  0143C6  0100               	movlb	0	; () banked
 11191  0143C8  516C               	movf	__div_to_l_@cntr& (0+255),w,b
 11192  0143CA  0FA0               	addlw	160
 11193  0143CC  0100               	movlb	0	; () banked
 11194  0143CE  5F6D               	subwf	__div_to_l_@exp1& (0+255),f,b
 11195                           
 11196                           ; BSR set to: 0
 11197  0143D0  0E20               	movlw	32
 11198  0143D2  0100               	movlb	0	; () banked
 11199  0143D4  6F6C               	movwf	__div_to_l_@cntr& (0+255),b
 11200  0143D6                     
 11201                           ; BSR set to: 0
 11202                           
 11203                           ; BSR set to: 0
 11204  0143D6  0100               	movlb	0	; () banked
 11205  0143D8  90D8               	bcf	status,0,c
 11206  0143DA  3768               	rlcf	__div_to_l_@quot& (0+255),f,b
 11207  0143DC  3769               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 11208  0143DE  376A               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 11209  0143E0  376B               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 11210                           
 11211                           ; BSR set to: 0
 11212  0143E2  0100               	movlb	0	; () banked
 11213  0143E4  5164               	movf	__div_to_l_@f2& (0+255),w,b
 11214  0143E6  0100               	movlb	0	; () banked
 11215  0143E8  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
 11216  0143EA  0100               	movlb	0	; () banked
 11217  0143EC  5165               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 11218  0143EE  0100               	movlb	0	; () banked
 11219  0143F0  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 11220  0143F2  0100               	movlb	0	; () banked
 11221  0143F4  5166               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 11222  0143F6  0100               	movlb	0	; () banked
 11223  0143F8  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 11224  0143FA  0100               	movlb	0	; () banked
 11225  0143FC  5167               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 11226  0143FE  0100               	movlb	0	; () banked
 11227  014400  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 11228  014402  A0D8               	btfss	status,0,c
 11229  014404  D012               	goto	l2710
 11230                           
 11231                           ; BSR set to: 0
 11232  014406  0100               	movlb	0	; () banked
 11233  014408  5164               	movf	__div_to_l_@f2& (0+255),w,b
 11234  01440A  0100               	movlb	0	; () banked
 11235  01440C  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
 11236  01440E  0100               	movlb	0	; () banked
 11237  014410  5165               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 11238  014412  0100               	movlb	0	; () banked
 11239  014414  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 11240  014416  0100               	movlb	0	; () banked
 11241  014418  5166               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 11242  01441A  0100               	movlb	0	; () banked
 11243  01441C  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 11244  01441E  0100               	movlb	0	; () banked
 11245  014420  5167               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 11246  014422  0100               	movlb	0	; () banked
 11247  014424  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 11248                           
 11249                           ; BSR set to: 0
 11250  014426  0100               	movlb	0	; () banked
 11251  014428  8168               	bsf	__div_to_l_@quot& (0+255),0,b
 11252  01442A                     l2710:
 11253                           
 11254                           ; BSR set to: 0
 11255                           
 11256                           ; BSR set to: 0
 11257  01442A  0100               	movlb	0	; () banked
 11258  01442C  90D8               	bcf	status,0,c
 11259  01442E  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
 11260  014430  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 11261  014432  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 11262  014434  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 11263                           
 11264                           ; BSR set to: 0
 11265  014436  0100               	movlb	0	; () banked
 11266  014438  2F6C               	decfsz	__div_to_l_@cntr& (0+255),f,b
 11267  01443A  D7CD               	goto	l2709
 11268                           
 11269                           ; BSR set to: 0
 11270                           
 11271                           ; BSR set to: 0
 11272  01443C  0100               	movlb	0	; () banked
 11273  01443E  AF6D               	btfss	__div_to_l_@exp1& (0+255),7,b
 11274  014440  D01A               	goto	l2712
 11275                           
 11276                           ; BSR set to: 0
 11277  014442  0100               	movlb	0	; () banked
 11278  014444  516D               	movf	__div_to_l_@exp1& (0+255),w,b
 11279  014446  0A80               	xorlw	128
 11280  014448  0F9F               	addlw	159
 11281  01444A  B0D8               	btfsc	status,0,c
 11282  01444C  D00A               	goto	l2713
 11283                           
 11284                           ; BSR set to: 0
 11285  01444E  0E00               	movlw	0
 11286  014450  0100               	movlb	0	; () banked
 11287  014452  6F60               	movwf	?__div_to_l_& (0+255),b
 11288  014454  0E00               	movlw	0
 11289  014456  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 11290  014458  0E00               	movlw	0
 11291  01445A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 11292  01445C  0E00               	movlw	0
 11293  01445E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 11294                           
 11295                           ; BSR set to: 0
 11296  014460  0012               	return	
 11297  014462                     l2713:
 11298                           
 11299                           ; BSR set to: 0
 11300                           
 11301                           ; BSR set to: 0
 11302                           
 11303                           ; BSR set to: 0
 11304  014462  0100               	movlb	0	; () banked
 11305  014464  90D8               	bcf	status,0,c
 11306  014466  336B               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 11307  014468  336A               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 11308  01446A  3369               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 11309  01446C  3368               	rrcf	__div_to_l_@quot& (0+255),f,b
 11310                           
 11311                           ; BSR set to: 0
 11312  01446E  0100               	movlb	0	; () banked
 11313  014470  3F6D               	incfsz	__div_to_l_@exp1& (0+255),f,b
 11314  014472  D7F7               	goto	l2713
 11315                           
 11316                           ; BSR set to: 0
 11317  014474  D01B               	goto	u13140
 11318  014476                     l2712:
 11319                           
 11320                           ; BSR set to: 0
 11321                           
 11322                           ; BSR set to: 0
 11323  014476  0E1F               	movlw	31
 11324  014478  0100               	movlb	0	; () banked
 11325  01447A  656D               	cpfsgt	__div_to_l_@exp1& (0+255),b
 11326  01447C  D012               	goto	l2718
 11327                           
 11328                           ; BSR set to: 0
 11329  01447E  0E00               	movlw	0
 11330  014480  0100               	movlb	0	; () banked
 11331  014482  6F60               	movwf	?__div_to_l_& (0+255),b
 11332  014484  0E00               	movlw	0
 11333  014486  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 11334  014488  0E00               	movlw	0
 11335  01448A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 11336  01448C  0E00               	movlw	0
 11337  01448E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 11338                           
 11339                           ; BSR set to: 0
 11340  014490  0012               	return	
 11341  014492                     
 11342                           ; BSR set to: 0
 11343                           
 11344                           ; BSR set to: 0
 11345  014492  0100               	movlb	0	; () banked
 11346  014494  90D8               	bcf	status,0,c
 11347  014496  3768               	rlcf	__div_to_l_@quot& (0+255),f,b
 11348  014498  3769               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 11349  01449A  376A               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 11350  01449C  376B               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 11351  01449E  0100               	movlb	0	; () banked
 11352  0144A0  076D               	decf	__div_to_l_@exp1& (0+255),f,b
 11353  0144A2                     l2718:
 11354                           
 11355                           ; BSR set to: 0
 11356                           
 11357                           ; BSR set to: 0
 11358  0144A2  0100               	movlb	0	; () banked
 11359  0144A4  516D               	movf	__div_to_l_@exp1& (0+255),w,b
 11360  0144A6  0100               	movlb	0	; () banked
 11361  0144A8  A4D8               	btfss	status,2,c
 11362  0144AA  D7F3               	goto	l2719
 11363  0144AC                     u13140:
 11364                           
 11365                           ; BSR set to: 0
 11366                           
 11367                           ; BSR set to: 0
 11368  0144AC  C068  F060         	movff	__div_to_l_@quot,?__div_to_l_
 11369  0144B0  C069  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 11370  0144B4  C06A  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 11371  0144B8  C06B  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 11372                           
 11373                           ; BSR set to: 0
 11374  0144BC  0012               	return		;funcret
 11375  0144BE                     __end_of__div_to_l_:
 11376                           	opt stack 0
 11377                           tblptru	equ	0xFF8
 11378                           tblptrh	equ	0xFF7
 11379                           tblptrl	equ	0xFF6
 11380                           tablat	equ	0xFF5
 11381                           prodh	equ	0xFF4
 11382                           prodl	equ	0xFF3
 11383                           postinc0	equ	0xFEE
 11384                           wreg	equ	0xFE8
 11385                           postdec1	equ	0xFE5
 11386                           fsr1h	equ	0xFE2
 11387                           fsr1l	equ	0xFE1
 11388                           indf2	equ	0xFDF
 11389                           postinc2	equ	0xFDE
 11390                           postdec2	equ	0xFDD
 11391                           fsr2h	equ	0xFDA
 11392                           fsr2l	equ	0xFD9
 11393                           status	equ	0xFD8
 11394                           
 11395 ;; *************** function ___llmod *****************
 11396 ;; Defined at:
 11397 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
 11398 ;; Parameters:    Size  Location     Type
 11399 ;;  dividend        4   13[BANK0 ] unsigned long 
 11400 ;;  divisor         4   17[BANK0 ] unsigned long 
 11401 ;; Auto vars:     Size  Location     Type
 11402 ;;  counter         1   21[BANK0 ] unsigned char 
 11403 ;; Return value:  Size  Location     Type
 11404 ;;                  4   13[BANK0 ] unsigned long 
 11405 ;; Registers used:
 11406 ;;		wreg, status,2, status,0
 11407 ;; Tracked objects:
 11408 ;;		On entry : 0/0
 11409 ;;		On exit  : 0/0
 11410 ;;		Unchanged: 0/0
 11411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11412 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11415 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11416 ;;Total ram usage:        9 bytes
 11417 ;; Hardware stack levels used:    1
 11418 ;; Hardware stack levels required when called:    7
 11419 ;; This function calls:
 11420 ;;		Nothing
 11421 ;; This function is called by:
 11422 ;;		_printf
 11423 ;;		_rand_between
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           	psect	text32
 11428  0164AC                     __ptext32:
 11429                           	opt stack 0
 11430  0164AC                     ___llmod:
 11431                           	opt stack 22
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;incstack = 0
 11435  0164AC  0100               	movlb	0	; () banked
 11436  0164AE  5171               	movf	___llmod@divisor& (0+255),w,b
 11437  0164B0  0100               	movlb	0	; () banked
 11438  0164B2  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 11439  0164B4  0100               	movlb	0	; () banked
 11440  0164B6  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 11441  0164B8  0100               	movlb	0	; () banked
 11442  0164BA  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 11443  0164BC  B4D8               	btfsc	status,2,c
 11444  0164BE  D03A               	goto	l2906
 11445                           
 11446                           ; BSR set to: 0
 11447  0164C0  0E01               	movlw	1
 11448  0164C2  0100               	movlb	0	; () banked
 11449  0164C4  6F75               	movwf	___llmod@counter& (0+255),b
 11450  0164C6  D008               	goto	l2901
 11451  0164C8                     
 11452                           ; BSR set to: 0
 11453                           
 11454                           ; BSR set to: 0
 11455  0164C8  0100               	movlb	0	; () banked
 11456  0164CA  90D8               	bcf	status,0,c
 11457  0164CC  3771               	rlcf	___llmod@divisor& (0+255),f,b
 11458  0164CE  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 11459  0164D0  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 11460  0164D2  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 11461  0164D4  0100               	movlb	0	; () banked
 11462  0164D6  2B75               	incf	___llmod@counter& (0+255),f,b
 11463  0164D8                     l2901:
 11464                           
 11465                           ; BSR set to: 0
 11466                           
 11467                           ; BSR set to: 0
 11468  0164D8  0100               	movlb	0	; () banked
 11469  0164DA  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 11470  0164DC  D7F5               	goto	l2902
 11471  0164DE                     u13290:
 11472                           
 11473                           ; BSR set to: 0
 11474                           
 11475                           ; BSR set to: 0
 11476                           
 11477                           ; BSR set to: 0
 11478  0164DE  0100               	movlb	0	; () banked
 11479  0164E0  5171               	movf	___llmod@divisor& (0+255),w,b
 11480  0164E2  0100               	movlb	0	; () banked
 11481  0164E4  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 11482  0164E6  0100               	movlb	0	; () banked
 11483  0164E8  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 11484  0164EA  0100               	movlb	0	; () banked
 11485  0164EC  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 11486  0164EE  0100               	movlb	0	; () banked
 11487  0164F0  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 11488  0164F2  0100               	movlb	0	; () banked
 11489  0164F4  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 11490  0164F6  0100               	movlb	0	; () banked
 11491  0164F8  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 11492  0164FA  0100               	movlb	0	; () banked
 11493  0164FC  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 11494  0164FE  A0D8               	btfss	status,0,c
 11495  016500  D010               	goto	l2905
 11496                           
 11497                           ; BSR set to: 0
 11498  016502  0100               	movlb	0	; () banked
 11499  016504  5171               	movf	___llmod@divisor& (0+255),w,b
 11500  016506  0100               	movlb	0	; () banked
 11501  016508  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 11502  01650A  0100               	movlb	0	; () banked
 11503  01650C  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 11504  01650E  0100               	movlb	0	; () banked
 11505  016510  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 11506  016512  0100               	movlb	0	; () banked
 11507  016514  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 11508  016516  0100               	movlb	0	; () banked
 11509  016518  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 11510  01651A  0100               	movlb	0	; () banked
 11511  01651C  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 11512  01651E  0100               	movlb	0	; () banked
 11513  016520  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 11514  016522                     l2905:
 11515                           
 11516                           ; BSR set to: 0
 11517                           
 11518                           ; BSR set to: 0
 11519  016522  0100               	movlb	0	; () banked
 11520  016524  90D8               	bcf	status,0,c
 11521  016526  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 11522  016528  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 11523  01652A  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 11524  01652C  3371               	rrcf	___llmod@divisor& (0+255),f,b
 11525                           
 11526                           ; BSR set to: 0
 11527  01652E  0100               	movlb	0	; () banked
 11528  016530  2F75               	decfsz	___llmod@counter& (0+255),f,b
 11529  016532  D7D5               	goto	u13290
 11530  016534                     l2906:
 11531                           
 11532                           ; BSR set to: 0
 11533                           
 11534                           ; BSR set to: 0
 11535  016534  C06D  F06D         	movff	___llmod@dividend,?___llmod
 11536  016538  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 11537  01653C  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 11538  016540  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 11539                           
 11540                           ; BSR set to: 0
 11541  016544  0012               	return		;funcret
 11542  016546                     __end_of___llmod:
 11543                           	opt stack 0
 11544                           tblptru	equ	0xFF8
 11545                           tblptrh	equ	0xFF7
 11546                           tblptrl	equ	0xFF6
 11547                           tablat	equ	0xFF5
 11548                           prodh	equ	0xFF4
 11549                           prodl	equ	0xFF3
 11550                           postinc0	equ	0xFEE
 11551                           wreg	equ	0xFE8
 11552                           postdec1	equ	0xFE5
 11553                           fsr1h	equ	0xFE2
 11554                           fsr1l	equ	0xFE1
 11555                           indf2	equ	0xFDF
 11556                           postinc2	equ	0xFDE
 11557                           postdec2	equ	0xFDD
 11558                           fsr2h	equ	0xFDA
 11559                           fsr2l	equ	0xFD9
 11560                           status	equ	0xFD8
 11561                           
 11562 ;; *************** function ___fltol *****************
 11563 ;; Defined at:
 11564 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
 11565 ;; Parameters:    Size  Location     Type
 11566 ;;  f1              4   82[BANK0 ] unsigned long 
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;  exp1            1   91[BANK0 ] unsigned char 
 11569 ;;  sign1           1   90[BANK0 ] unsigned char 
 11570 ;; Return value:  Size  Location     Type
 11571 ;;                  4   82[BANK0 ] long 
 11572 ;; Registers used:
 11573 ;;		wreg, status,2, status,0
 11574 ;; Tracked objects:
 11575 ;;		On entry : 0/0
 11576 ;;		On exit  : 0/0
 11577 ;;		Unchanged: 0/0
 11578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11579 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11580 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11581 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11582 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11583 ;;Total ram usage:       10 bytes
 11584 ;; Hardware stack levels used:    1
 11585 ;; Hardware stack levels required when called:    7
 11586 ;; This function calls:
 11587 ;;		Nothing
 11588 ;; This function is called by:
 11589 ;;		_mode1
 11590 ;;		_mode4
 11591 ;;		_printf
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           	psect	text33
 11596  014FAE                     __ptext33:
 11597                           	opt stack 0
 11598  014FAE                     ___fltol:
 11599                           	opt stack 22
 11600                           
 11601                           ; BSR set to: 0
 11602                           ;incstack = 0
 11603  014FAE  0100               	movlb	0	; () banked
 11604  014FB0  35B4               	rlcf	(___fltol@f1+2)& (0+255),w,b
 11605  014FB2  35B5               	rlcf	(___fltol@f1+3)& (0+255),w,b
 11606  014FB4  0100               	movlb	0	; () banked
 11607  014FB6  6FBB               	movwf	___fltol@exp1& (0+255),b
 11608  014FB8  0100               	movlb	0	; () banked
 11609  014FBA  51BB               	movf	___fltol@exp1& (0+255),w,b
 11610  014FBC  A4D8               	btfss	status,2,c
 11611  014FBE  D00A               	goto	l2753
 11612                           
 11613                           ; BSR set to: 0
 11614  014FC0  0E00               	movlw	0
 11615  014FC2  0100               	movlb	0	; () banked
 11616  014FC4  6FB2               	movwf	?___fltol& (0+255),b
 11617  014FC6  0E00               	movlw	0
 11618  014FC8  6FB3               	movwf	(?___fltol+1)& (0+255),b
 11619  014FCA  0E00               	movlw	0
 11620  014FCC  6FB4               	movwf	(?___fltol+2)& (0+255),b
 11621  014FCE  0E00               	movlw	0
 11622  014FD0  6FB5               	movwf	(?___fltol+3)& (0+255),b
 11623                           
 11624                           ; BSR set to: 0
 11625  014FD2  0012               	return	
 11626  014FD4                     l2753:
 11627                           
 11628                           ; BSR set to: 0
 11629                           
 11630                           ; BSR set to: 0
 11631  014FD4  C0B2  F0B6         	movff	___fltol@f1,??___fltol
 11632  014FD8  C0B3  F0B7         	movff	___fltol@f1+1,??___fltol+1
 11633  014FDC  C0B4  F0B8         	movff	___fltol@f1+2,??___fltol+2
 11634  014FE0  C0B5  F0B9         	movff	___fltol@f1+3,??___fltol+3
 11635  014FE4  0E20               	movlw	32
 11636  014FE6  D006               	goto	u13220
 11637  014FE8                     u13225:
 11638  014FE8  0100               	movlb	0	; () banked
 11639  014FEA  90D8               	bcf	status,0,c
 11640  014FEC  33B9               	rrcf	(??___fltol+3)& (0+255),f,b
 11641  014FEE  33B8               	rrcf	(??___fltol+2)& (0+255),f,b
 11642  014FF0  33B7               	rrcf	(??___fltol+1)& (0+255),f,b
 11643  014FF2  33B6               	rrcf	??___fltol& (0+255),f,b
 11644  014FF4                     u13220:
 11645  014FF4  2EE8               	decfsz	wreg,f,c
 11646  014FF6  D7F8               	goto	u13225
 11647  014FF8  0100               	movlb	0	; () banked
 11648  014FFA  51B6               	movf	??___fltol& (0+255),w,b
 11649  014FFC  0100               	movlb	0	; () banked
 11650  014FFE  6FBA               	movwf	___fltol@sign1& (0+255),b
 11651                           
 11652                           ; BSR set to: 0
 11653  015000  0100               	movlb	0	; () banked
 11654  015002  8FB4               	bsf	(___fltol@f1+2)& (0+255),7,b
 11655                           
 11656                           ; BSR set to: 0
 11657  015004  0EFF               	movlw	255
 11658  015006  0100               	movlb	0	; () banked
 11659  015008  17B2               	andwf	___fltol@f1& (0+255),f,b
 11660  01500A  0EFF               	movlw	255
 11661  01500C  17B3               	andwf	(___fltol@f1+1)& (0+255),f,b
 11662  01500E  0EFF               	movlw	255
 11663  015010  17B4               	andwf	(___fltol@f1+2)& (0+255),f,b
 11664  015012  0E00               	movlw	0
 11665  015014  17B5               	andwf	(___fltol@f1+3)& (0+255),f,b
 11666                           
 11667                           ; BSR set to: 0
 11668  015016  0E96               	movlw	150
 11669  015018  0100               	movlb	0	; () banked
 11670  01501A  5FBB               	subwf	___fltol@exp1& (0+255),f,b
 11671                           
 11672                           ; BSR set to: 0
 11673  01501C  0100               	movlb	0	; () banked
 11674  01501E  AFBB               	btfss	___fltol@exp1& (0+255),7,b
 11675  015020  D01A               	goto	l2755
 11676                           
 11677                           ; BSR set to: 0
 11678  015022  0100               	movlb	0	; () banked
 11679  015024  51BB               	movf	___fltol@exp1& (0+255),w,b
 11680  015026  0A80               	xorlw	128
 11681  015028  0F97               	addlw	151
 11682  01502A  B0D8               	btfsc	status,0,c
 11683  01502C  D00A               	goto	l2756
 11684                           
 11685                           ; BSR set to: 0
 11686  01502E  0E00               	movlw	0
 11687  015030  0100               	movlb	0	; () banked
 11688  015032  6FB2               	movwf	?___fltol& (0+255),b
 11689  015034  0E00               	movlw	0
 11690  015036  6FB3               	movwf	(?___fltol+1)& (0+255),b
 11691  015038  0E00               	movlw	0
 11692  01503A  6FB4               	movwf	(?___fltol+2)& (0+255),b
 11693  01503C  0E00               	movlw	0
 11694  01503E  6FB5               	movwf	(?___fltol+3)& (0+255),b
 11695                           
 11696                           ; BSR set to: 0
 11697  015040  0012               	return	
 11698  015042                     l2756:
 11699                           
 11700                           ; BSR set to: 0
 11701                           
 11702                           ; BSR set to: 0
 11703                           
 11704                           ; BSR set to: 0
 11705  015042  0100               	movlb	0	; () banked
 11706  015044  90D8               	bcf	status,0,c
 11707  015046  33B5               	rrcf	(___fltol@f1+3)& (0+255),f,b
 11708  015048  33B4               	rrcf	(___fltol@f1+2)& (0+255),f,b
 11709  01504A  33B3               	rrcf	(___fltol@f1+1)& (0+255),f,b
 11710  01504C  33B2               	rrcf	___fltol@f1& (0+255),f,b
 11711                           
 11712                           ; BSR set to: 0
 11713  01504E  0100               	movlb	0	; () banked
 11714  015050  3FBB               	incfsz	___fltol@exp1& (0+255),f,b
 11715  015052  D7F7               	goto	l2756
 11716                           
 11717                           ; BSR set to: 0
 11718  015054  D01B               	goto	u13260
 11719  015056                     l2755:
 11720                           
 11721                           ; BSR set to: 0
 11722                           
 11723                           ; BSR set to: 0
 11724  015056  0E1F               	movlw	31
 11725  015058  0100               	movlb	0	; () banked
 11726  01505A  65BB               	cpfsgt	___fltol@exp1& (0+255),b
 11727  01505C  D012               	goto	l2761
 11728                           
 11729                           ; BSR set to: 0
 11730  01505E  0E00               	movlw	0
 11731  015060  0100               	movlb	0	; () banked
 11732  015062  6FB2               	movwf	?___fltol& (0+255),b
 11733  015064  0E00               	movlw	0
 11734  015066  6FB3               	movwf	(?___fltol+1)& (0+255),b
 11735  015068  0E00               	movlw	0
 11736  01506A  6FB4               	movwf	(?___fltol+2)& (0+255),b
 11737  01506C  0E00               	movlw	0
 11738  01506E  6FB5               	movwf	(?___fltol+3)& (0+255),b
 11739                           
 11740                           ; BSR set to: 0
 11741  015070  0012               	return	
 11742  015072                     
 11743                           ; BSR set to: 0
 11744                           
 11745                           ; BSR set to: 0
 11746  015072  0100               	movlb	0	; () banked
 11747  015074  90D8               	bcf	status,0,c
 11748  015076  37B2               	rlcf	___fltol@f1& (0+255),f,b
 11749  015078  37B3               	rlcf	(___fltol@f1+1)& (0+255),f,b
 11750  01507A  37B4               	rlcf	(___fltol@f1+2)& (0+255),f,b
 11751  01507C  37B5               	rlcf	(___fltol@f1+3)& (0+255),f,b
 11752  01507E  0100               	movlb	0	; () banked
 11753  015080  07BB               	decf	___fltol@exp1& (0+255),f,b
 11754  015082                     l2761:
 11755                           
 11756                           ; BSR set to: 0
 11757                           
 11758                           ; BSR set to: 0
 11759  015082  0100               	movlb	0	; () banked
 11760  015084  51BB               	movf	___fltol@exp1& (0+255),w,b
 11761  015086  0100               	movlb	0	; () banked
 11762  015088  A4D8               	btfss	status,2,c
 11763  01508A  D7F3               	goto	l2762
 11764  01508C                     u13260:
 11765                           
 11766                           ; BSR set to: 0
 11767                           
 11768                           ; BSR set to: 0
 11769                           
 11770                           ; BSR set to: 0
 11771  01508C  0100               	movlb	0	; () banked
 11772  01508E  51BA               	movf	___fltol@sign1& (0+255),w,b
 11773  015090  0100               	movlb	0	; () banked
 11774  015092  B4D8               	btfsc	status,2,c
 11775  015094  D009               	goto	l2764
 11776                           
 11777                           ; BSR set to: 0
 11778  015096  0100               	movlb	0	; () banked
 11779  015098  1FB5               	comf	(___fltol@f1+3)& (0+255),f,b
 11780  01509A  1FB4               	comf	(___fltol@f1+2)& (0+255),f,b
 11781  01509C  1FB3               	comf	(___fltol@f1+1)& (0+255),f,b
 11782  01509E  6DB2               	negf	___fltol@f1& (0+255),b
 11783  0150A0  0E00               	movlw	0
 11784  0150A2  23B3               	addwfc	(___fltol@f1+1)& (0+255),f,b
 11785  0150A4  23B4               	addwfc	(___fltol@f1+2)& (0+255),f,b
 11786  0150A6  23B5               	addwfc	(___fltol@f1+3)& (0+255),f,b
 11787  0150A8                     l2764:
 11788                           
 11789                           ; BSR set to: 0
 11790                           
 11791                           ; BSR set to: 0
 11792  0150A8  C0B2  F0B2         	movff	___fltol@f1,?___fltol
 11793  0150AC  C0B3  F0B3         	movff	___fltol@f1+1,?___fltol+1
 11794  0150B0  C0B4  F0B4         	movff	___fltol@f1+2,?___fltol+2
 11795  0150B4  C0B5  F0B5         	movff	___fltol@f1+3,?___fltol+3
 11796  0150B8  0012               	return	
 11797  0150BA                     __end_of___fltol:
 11798                           	opt stack 0
 11799                           tblptru	equ	0xFF8
 11800                           tblptrh	equ	0xFF7
 11801                           tblptrl	equ	0xFF6
 11802                           tablat	equ	0xFF5
 11803                           prodh	equ	0xFF4
 11804                           prodl	equ	0xFF3
 11805                           postinc0	equ	0xFEE
 11806                           wreg	equ	0xFE8
 11807                           postdec1	equ	0xFE5
 11808                           fsr1h	equ	0xFE2
 11809                           fsr1l	equ	0xFE1
 11810                           indf2	equ	0xFDF
 11811                           postinc2	equ	0xFDE
 11812                           postdec2	equ	0xFDD
 11813                           fsr2h	equ	0xFDA
 11814                           fsr2l	equ	0xFD9
 11815                           status	equ	0xFD8
 11816                           
 11817 ;; *************** function ___flsub *****************
 11818 ;; Defined at:
 11819 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;  b               4   97[BANK0 ] long 
 11822 ;;  a               4  101[BANK0 ] long 
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;		None
 11825 ;; Return value:  Size  Location     Type
 11826 ;;                  4   97[BANK0 ] long 
 11827 ;; Registers used:
 11828 ;;		wreg, status,2, status,0, cstack
 11829 ;; Tracked objects:
 11830 ;;		On entry : 0/0
 11831 ;;		On exit  : 0/0
 11832 ;;		Unchanged: 0/0
 11833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11834 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11837 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11838 ;;Total ram usage:        8 bytes
 11839 ;; Hardware stack levels used:    1
 11840 ;; Hardware stack levels required when called:    8
 11841 ;; This function calls:
 11842 ;;		___fladd
 11843 ;; This function is called by:
 11844 ;;		_printf
 11845 ;; This function uses a non-reentrant model
 11846 ;;
 11847                           
 11848                           	psect	text34
 11849  0175CE                     __ptext34:
 11850                           	opt stack 0
 11851  0175CE                     ___flsub:
 11852                           	opt stack 21
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;incstack = 0
 11856  0175CE  0E00               	movlw	0
 11857  0175D0  0100               	movlb	0	; () banked
 11858  0175D2  1BC5               	xorwf	___flsub@a& (0+255),f,b
 11859  0175D4  0E00               	movlw	0
 11860  0175D6  1BC6               	xorwf	(___flsub@a+1)& (0+255),f,b
 11861  0175D8  0E00               	movlw	0
 11862  0175DA  1BC7               	xorwf	(___flsub@a+2)& (0+255),f,b
 11863  0175DC  0E80               	movlw	128
 11864  0175DE  1BC8               	xorwf	(___flsub@a+3)& (0+255),f,b
 11865                           
 11866                           ; BSR set to: 0
 11867  0175E0  C0C1  F0AD         	movff	___flsub@b,___fladd@b
 11868  0175E4  C0C2  F0AE         	movff	___flsub@b+1,___fladd@b+1
 11869  0175E8  C0C3  F0AF         	movff	___flsub@b+2,___fladd@b+2
 11870  0175EC  C0C4  F0B0         	movff	___flsub@b+3,___fladd@b+3
 11871  0175F0  C0C5  F0B1         	movff	___flsub@a,___fladd@a
 11872  0175F4  C0C6  F0B2         	movff	___flsub@a+1,___fladd@a+1
 11873  0175F8  C0C7  F0B3         	movff	___flsub@a+2,___fladd@a+2
 11874  0175FC  C0C8  F0B4         	movff	___flsub@a+3,___fladd@a+3
 11875  017600  EC05  F087         	call	___fladd	;wreg free
 11876  017604  C0AD  F0C1         	movff	?___fladd,?___flsub
 11877  017608  C0AE  F0C2         	movff	?___fladd+1,?___flsub+1
 11878  01760C  C0AF  F0C3         	movff	?___fladd+2,?___flsub+2
 11879  017610  C0B0  F0C4         	movff	?___fladd+3,?___flsub+3
 11880  017614  0012               	return	
 11881  017616                     __end_of___flsub:
 11882                           	opt stack 0
 11883                           tblptru	equ	0xFF8
 11884                           tblptrh	equ	0xFF7
 11885                           tblptrl	equ	0xFF6
 11886                           tablat	equ	0xFF5
 11887                           prodh	equ	0xFF4
 11888                           prodl	equ	0xFF3
 11889                           postinc0	equ	0xFEE
 11890                           wreg	equ	0xFE8
 11891                           postdec1	equ	0xFE5
 11892                           fsr1h	equ	0xFE2
 11893                           fsr1l	equ	0xFE1
 11894                           indf2	equ	0xFDF
 11895                           postinc2	equ	0xFDE
 11896                           postdec2	equ	0xFDD
 11897                           fsr2h	equ	0xFDA
 11898                           fsr2l	equ	0xFD9
 11899                           status	equ	0xFD8
 11900                           
 11901 ;; *************** function ___fladd *****************
 11902 ;; Defined at:
 11903 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;  b               4   77[BANK0 ] long 
 11906 ;;  a               4   81[BANK0 ] long 
 11907 ;; Auto vars:     Size  Location     Type
 11908 ;;  grs             1   96[BANK0 ] unsigned char 
 11909 ;;  bexp            1   95[BANK0 ] unsigned char 
 11910 ;;  aexp            1   94[BANK0 ] unsigned char 
 11911 ;;  signs           1   93[BANK0 ] unsigned char 
 11912 ;; Return value:  Size  Location     Type
 11913 ;;                  4   77[BANK0 ] unsigned char 
 11914 ;; Registers used:
 11915 ;;		wreg, status,2, status,0
 11916 ;; Tracked objects:
 11917 ;;		On entry : 0/0
 11918 ;;		On exit  : 0/0
 11919 ;;		Unchanged: 0/0
 11920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11921 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11922 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11923 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11924 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;Total ram usage:       20 bytes
 11926 ;; Hardware stack levels used:    1
 11927 ;; Hardware stack levels required when called:    7
 11928 ;; This function calls:
 11929 ;;		Nothing
 11930 ;; This function is called by:
 11931 ;;		_printf
 11932 ;;		___flsub
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           	psect	text35
 11937  010E0A                     __ptext35:
 11938                           	opt stack 0
 11939  010E0A                     ___fladd:
 11940                           	opt stack 21
 11941                           
 11942                           ;incstack = 0
 11943  010E0A  0100               	movlb	0	; () banked
 11944  010E0C  51B0               	movf	(___fladd@b+3)& (0+255),w,b
 11945  010E0E  0B80               	andlw	128
 11946  010E10  0100               	movlb	0	; () banked
 11947  010E12  6FBD               	movwf	___fladd@signs& (0+255),b
 11948  010E14  0100               	movlb	0	; () banked
 11949  010E16  51B0               	movf	(___fladd@b+3)& (0+255),w,b
 11950  010E18  25B0               	addwf	(___fladd@b+3)& (0+255),w,b
 11951  010E1A  0100               	movlb	0	; () banked
 11952  010E1C  6FBF               	movwf	___fladd@bexp& (0+255),b
 11953                           
 11954                           ; BSR set to: 0
 11955  010E1E  0100               	movlb	0	; () banked
 11956  010E20  AFAF               	btfss	(___fladd@b+2)& (0+255),7,b
 11957  010E22  D002               	goto	l2978
 11958                           
 11959                           ; BSR set to: 0
 11960  010E24  0100               	movlb	0	; () banked
 11961  010E26  81BF               	bsf	___fladd@bexp& (0+255),0,b
 11962  010E28                     l2978:
 11963                           
 11964                           ; BSR set to: 0
 11965                           
 11966                           ; BSR set to: 0
 11967  010E28  0100               	movlb	0	; () banked
 11968  010E2A  51BF               	movf	___fladd@bexp& (0+255),w,b
 11969  010E2C  0100               	movlb	0	; () banked
 11970  010E2E  B4D8               	btfsc	status,2,c
 11971  010E30  D012               	goto	l2979
 11972                           
 11973                           ; BSR set to: 0
 11974  010E32  0100               	movlb	0	; () banked
 11975  010E34  29BF               	incf	___fladd@bexp& (0+255),w,b
 11976  010E36  A4D8               	btfss	status,2,c
 11977  010E38  D009               	goto	l2980
 11978                           
 11979                           ; BSR set to: 0
 11980  010E3A  0E00               	movlw	0
 11981  010E3C  0100               	movlb	0	; () banked
 11982  010E3E  6FAD               	movwf	___fladd@b& (0+255),b
 11983  010E40  0E00               	movlw	0
 11984  010E42  6FAE               	movwf	(___fladd@b+1)& (0+255),b
 11985  010E44  0E00               	movlw	0
 11986  010E46  6FAF               	movwf	(___fladd@b+2)& (0+255),b
 11987  010E48  0E00               	movlw	0
 11988  010E4A  6FB0               	movwf	(___fladd@b+3)& (0+255),b
 11989  010E4C                     l2980:
 11990                           
 11991                           ; BSR set to: 0
 11992                           
 11993                           ; BSR set to: 0
 11994  010E4C  0100               	movlb	0	; () banked
 11995  010E4E  8FAF               	bsf	(___fladd@b+2)& (0+255),7,b
 11996                           
 11997                           ; BSR set to: 0
 11998  010E50  0E00               	movlw	0
 11999  010E52  0100               	movlb	0	; () banked
 12000  010E54  D008               	goto	L6
 12001  010E56                     l2979:
 12002                           
 12003                           ; BSR set to: 0
 12004                           
 12005                           ; BSR set to: 0
 12006  010E56  0E00               	movlw	0
 12007  010E58  0100               	movlb	0	; () banked
 12008  010E5A  6FAD               	movwf	___fladd@b& (0+255),b
 12009  010E5C  0E00               	movlw	0
 12010  010E5E  6FAE               	movwf	(___fladd@b+1)& (0+255),b
 12011  010E60  0E00               	movlw	0
 12012  010E62  6FAF               	movwf	(___fladd@b+2)& (0+255),b
 12013  010E64  0E00               	movlw	0
 12014  010E66                     L6:
 12015  010E66  6FB0               	movwf	(___fladd@b+3)& (0+255),b
 12016                           
 12017                           ; BSR set to: 0
 12018                           
 12019                           ; BSR set to: 0
 12020  010E68  0100               	movlb	0	; () banked
 12021  010E6A  51B4               	movf	(___fladd@a+3)& (0+255),w,b
 12022  010E6C  0B80               	andlw	128
 12023  010E6E  0100               	movlb	0	; () banked
 12024  010E70  6FBE               	movwf	___fladd@aexp& (0+255),b
 12025                           
 12026                           ; BSR set to: 0
 12027  010E72  0100               	movlb	0	; () banked
 12028  010E74  51BD               	movf	___fladd@signs& (0+255),w,b
 12029  010E76  0100               	movlb	0	; () banked
 12030  010E78  19BE               	xorwf	___fladd@aexp& (0+255),w,b
 12031  010E7A  B4D8               	btfsc	status,2,c
 12032  010E7C  D002               	goto	l2982
 12033                           
 12034                           ; BSR set to: 0
 12035  010E7E  0100               	movlb	0	; () banked
 12036  010E80  8DBD               	bsf	___fladd@signs& (0+255),6,b
 12037  010E82                     l2982:
 12038                           
 12039                           ; BSR set to: 0
 12040                           
 12041                           ; BSR set to: 0
 12042  010E82  0100               	movlb	0	; () banked
 12043  010E84  51B4               	movf	(___fladd@a+3)& (0+255),w,b
 12044  010E86  25B4               	addwf	(___fladd@a+3)& (0+255),w,b
 12045  010E88  0100               	movlb	0	; () banked
 12046  010E8A  6FBE               	movwf	___fladd@aexp& (0+255),b
 12047                           
 12048                           ; BSR set to: 0
 12049  010E8C  0100               	movlb	0	; () banked
 12050  010E8E  AFB3               	btfss	(___fladd@a+2)& (0+255),7,b
 12051  010E90  D002               	goto	l2983
 12052                           
 12053                           ; BSR set to: 0
 12054  010E92  0100               	movlb	0	; () banked
 12055  010E94  81BE               	bsf	___fladd@aexp& (0+255),0,b
 12056  010E96                     l2983:
 12057                           
 12058                           ; BSR set to: 0
 12059                           
 12060                           ; BSR set to: 0
 12061  010E96  0100               	movlb	0	; () banked
 12062  010E98  51BE               	movf	___fladd@aexp& (0+255),w,b
 12063  010E9A  0100               	movlb	0	; () banked
 12064  010E9C  B4D8               	btfsc	status,2,c
 12065  010E9E  D012               	goto	l2984
 12066                           
 12067                           ; BSR set to: 0
 12068  010EA0  0100               	movlb	0	; () banked
 12069  010EA2  29BE               	incf	___fladd@aexp& (0+255),w,b
 12070  010EA4  A4D8               	btfss	status,2,c
 12071  010EA6  D009               	goto	l2985
 12072                           
 12073                           ; BSR set to: 0
 12074  010EA8  0E00               	movlw	0
 12075  010EAA  0100               	movlb	0	; () banked
 12076  010EAC  6FB1               	movwf	___fladd@a& (0+255),b
 12077  010EAE  0E00               	movlw	0
 12078  010EB0  6FB2               	movwf	(___fladd@a+1)& (0+255),b
 12079  010EB2  0E00               	movlw	0
 12080  010EB4  6FB3               	movwf	(___fladd@a+2)& (0+255),b
 12081  010EB6  0E00               	movlw	0
 12082  010EB8  6FB4               	movwf	(___fladd@a+3)& (0+255),b
 12083  010EBA                     l2985:
 12084                           
 12085                           ; BSR set to: 0
 12086                           
 12087                           ; BSR set to: 0
 12088  010EBA  0100               	movlb	0	; () banked
 12089  010EBC  8FB3               	bsf	(___fladd@a+2)& (0+255),7,b
 12090                           
 12091                           ; BSR set to: 0
 12092  010EBE  0E00               	movlw	0
 12093  010EC0  0100               	movlb	0	; () banked
 12094  010EC2  D008               	goto	L7
 12095  010EC4                     l2984:
 12096                           
 12097                           ; BSR set to: 0
 12098                           
 12099                           ; BSR set to: 0
 12100  010EC4  0E00               	movlw	0
 12101  010EC6  0100               	movlb	0	; () banked
 12102  010EC8  6FB1               	movwf	___fladd@a& (0+255),b
 12103  010ECA  0E00               	movlw	0
 12104  010ECC  6FB2               	movwf	(___fladd@a+1)& (0+255),b
 12105  010ECE  0E00               	movlw	0
 12106  010ED0  6FB3               	movwf	(___fladd@a+2)& (0+255),b
 12107  010ED2  0E00               	movlw	0
 12108  010ED4                     L7:
 12109  010ED4  6FB4               	movwf	(___fladd@a+3)& (0+255),b
 12110                           
 12111                           ; BSR set to: 0
 12112                           
 12113                           ; BSR set to: 0
 12114  010ED6  0100               	movlb	0	; () banked
 12115  010ED8  51BF               	movf	___fladd@bexp& (0+255),w,b
 12116  010EDA  0100               	movlb	0	; () banked
 12117  010EDC  5DBE               	subwf	___fladd@aexp& (0+255),w,b
 12118  010EDE  B0D8               	btfsc	status,0,c
 12119  010EE0  D024               	goto	l2987
 12120                           
 12121                           ; BSR set to: 0
 12122  010EE2  0100               	movlb	0	; () banked
 12123  010EE4  ADBD               	btfss	___fladd@signs& (0+255),6,b
 12124  010EE6  D003               	goto	l2988
 12125                           
 12126                           ; BSR set to: 0
 12127  010EE8  0E80               	movlw	128
 12128  010EEA  0100               	movlb	0	; () banked
 12129  010EEC  1BBD               	xorwf	___fladd@signs& (0+255),f,b
 12130  010EEE                     l2988:
 12131                           
 12132                           ; BSR set to: 0
 12133                           
 12134                           ; BSR set to: 0
 12135  010EEE  C0BF  F0C0         	movff	___fladd@bexp,___fladd@grs
 12136                           
 12137                           ; BSR set to: 0
 12138  010EF2  C0BE  F0BF         	movff	___fladd@aexp,___fladd@bexp
 12139                           
 12140                           ; BSR set to: 0
 12141  010EF6  C0C0  F0BE         	movff	___fladd@grs,___fladd@aexp
 12142                           
 12143                           ; BSR set to: 0
 12144  010EFA  C0AD  F0C0         	movff	___fladd@b,___fladd@grs
 12145                           
 12146                           ; BSR set to: 0
 12147  010EFE  C0B1  F0AD         	movff	___fladd@a,___fladd@b
 12148                           
 12149                           ; BSR set to: 0
 12150  010F02  C0C0  F0B1         	movff	___fladd@grs,___fladd@a
 12151                           
 12152                           ; BSR set to: 0
 12153  010F06  C0AE  F0C0         	movff	___fladd@b+1,___fladd@grs
 12154                           
 12155                           ; BSR set to: 0
 12156  010F0A  C0B2  F0AE         	movff	___fladd@a+1,___fladd@b+1
 12157                           
 12158                           ; BSR set to: 0
 12159  010F0E  C0C0  F0B2         	movff	___fladd@grs,___fladd@a+1
 12160                           
 12161                           ; BSR set to: 0
 12162  010F12  C0AF  F0C0         	movff	___fladd@b+2,___fladd@grs
 12163                           
 12164                           ; BSR set to: 0
 12165  010F16  C0B3  F0AF         	movff	___fladd@a+2,___fladd@b+2
 12166                           
 12167                           ; BSR set to: 0
 12168  010F1A  C0C0  F0B3         	movff	___fladd@grs,___fladd@a+2
 12169                           
 12170                           ; BSR set to: 0
 12171  010F1E  C0B0  F0C0         	movff	___fladd@b+3,___fladd@grs
 12172                           
 12173                           ; BSR set to: 0
 12174  010F22  C0B4  F0B0         	movff	___fladd@a+3,___fladd@b+3
 12175                           
 12176                           ; BSR set to: 0
 12177  010F26  C0C0  F0B4         	movff	___fladd@grs,___fladd@a+3
 12178  010F2A                     l2987:
 12179                           
 12180                           ; BSR set to: 0
 12181                           
 12182                           ; BSR set to: 0
 12183  010F2A  0E00               	movlw	0
 12184  010F2C  0100               	movlb	0	; () banked
 12185  010F2E  6FC0               	movwf	___fladd@grs& (0+255),b
 12186                           
 12187                           ; BSR set to: 0
 12188  010F30  0100               	movlb	0	; () banked
 12189  010F32  51BF               	movf	___fladd@bexp& (0+255),w,b
 12190  010F34  0100               	movlb	0	; () banked
 12191  010F36  6FB5               	movwf	??___fladd& (0+255),b
 12192  010F38  6BB6               	clrf	(??___fladd+1)& (0+255),b
 12193  010F3A  0100               	movlb	0	; () banked
 12194  010F3C  1FB5               	comf	??___fladd& (0+255),f,b
 12195  010F3E  1FB6               	comf	(??___fladd+1)& (0+255),f,b
 12196  010F40  4BB5               	infsnz	??___fladd& (0+255),f,b
 12197  010F42  2BB6               	incf	(??___fladd+1)& (0+255),f,b
 12198  010F44  0100               	movlb	0	; () banked
 12199  010F46  51BE               	movf	___fladd@aexp& (0+255),w,b
 12200  010F48  0100               	movlb	0	; () banked
 12201  010F4A  6FB7               	movwf	(??___fladd+2)& (0+255),b
 12202  010F4C  6BB8               	clrf	(??___fladd+3)& (0+255),b
 12203  010F4E  0100               	movlb	0	; () banked
 12204  010F50  51B5               	movf	??___fladd& (0+255),w,b
 12205  010F52  0100               	movlb	0	; () banked
 12206  010F54  27B7               	addwf	(??___fladd+2)& (0+255),f,b
 12207  010F56  0100               	movlb	0	; () banked
 12208  010F58  51B6               	movf	(??___fladd+1)& (0+255),w,b
 12209  010F5A  0100               	movlb	0	; () banked
 12210  010F5C  23B8               	addwfc	(??___fladd+3)& (0+255),f,b
 12211  010F5E  0100               	movlb	0	; () banked
 12212  010F60  BFB8               	btfsc	(??___fladd+3)& (0+255),7,b
 12213  010F62  D03D               	goto	l2991
 12214  010F64  0100               	movlb	0	; () banked
 12215  010F66  51B8               	movf	(??___fladd+3)& (0+255),w,b
 12216  010F68  E105               	bnz	u11850
 12217  010F6A  0E1A               	movlw	26
 12218  010F6C  0100               	movlb	0	; () banked
 12219  010F6E  5DB7               	subwf	(??___fladd+2)& (0+255),w,b
 12220  010F70  A0D8               	btfss	status,0,c
 12221  010F72  D035               	goto	l2991
 12222  010F74                     u11850:
 12223                           
 12224                           ; BSR set to: 0
 12225  010F74  0100               	movlb	0	; () banked
 12226  010F76  51AD               	movf	___fladd@b& (0+255),w,b
 12227  010F78  0100               	movlb	0	; () banked
 12228  010F7A  11AE               	iorwf	(___fladd@b+1)& (0+255),w,b
 12229  010F7C  0100               	movlb	0	; () banked
 12230  010F7E  11AF               	iorwf	(___fladd@b+2)& (0+255),w,b
 12231  010F80  0100               	movlb	0	; () banked
 12232  010F82  11B0               	iorwf	(___fladd@b+3)& (0+255),w,b
 12233  010F84  B4D8               	btfsc	status,2,c
 12234  010F86  D002               	goto	u11860
 12235  010F88  0E01               	movlw	1
 12236  010F8A  D001               	goto	u11870
 12237  010F8C                     u11860:
 12238  010F8C  0E00               	movlw	0
 12239  010F8E                     u11870:
 12240  010F8E  0100               	movlb	0	; () banked
 12241  010F90  6FC0               	movwf	___fladd@grs& (0+255),b
 12242                           
 12243                           ; BSR set to: 0
 12244  010F92  0E00               	movlw	0
 12245  010F94  0100               	movlb	0	; () banked
 12246  010F96  6FAD               	movwf	___fladd@b& (0+255),b
 12247  010F98  0E00               	movlw	0
 12248  010F9A  6FAE               	movwf	(___fladd@b+1)& (0+255),b
 12249  010F9C  0E00               	movlw	0
 12250  010F9E  6FAF               	movwf	(___fladd@b+2)& (0+255),b
 12251  010FA0  0E00               	movlw	0
 12252  010FA2  6FB0               	movwf	(___fladd@b+3)& (0+255),b
 12253                           
 12254                           ; BSR set to: 0
 12255  010FA4  C0BE  F0BF         	movff	___fladd@aexp,___fladd@bexp
 12256  010FA8  D020               	goto	u11900
 12257  010FAA                     l2992:
 12258                           
 12259                           ; BSR set to: 0
 12260  010FAA  0100               	movlb	0	; () banked
 12261  010FAC  A1C0               	btfss	___fladd@grs& (0+255),0,b
 12262  010FAE  D007               	goto	l2993
 12263                           
 12264                           ; BSR set to: 0
 12265  010FB0  0100               	movlb	0	; () banked
 12266  010FB2  90D8               	bcf	status,0,c
 12267  010FB4  31C0               	rrcf	___fladd@grs& (0+255),w,b
 12268  010FB6  0901               	iorlw	1
 12269  010FB8  0100               	movlb	0	; () banked
 12270  010FBA  6FC0               	movwf	___fladd@grs& (0+255),b
 12271  010FBC  D003               	goto	l2994
 12272  010FBE                     l2993:
 12273                           
 12274                           ; BSR set to: 0
 12275                           
 12276                           ; BSR set to: 0
 12277  010FBE  0100               	movlb	0	; () banked
 12278  010FC0  90D8               	bcf	status,0,c
 12279  010FC2  33C0               	rrcf	___fladd@grs& (0+255),f,b
 12280  010FC4                     l2994:
 12281                           
 12282                           ; BSR set to: 0
 12283                           
 12284                           ; BSR set to: 0
 12285  010FC4  0100               	movlb	0	; () banked
 12286  010FC6  A1AD               	btfss	___fladd@b& (0+255),0,b
 12287  010FC8  D002               	goto	l2995
 12288                           
 12289                           ; BSR set to: 0
 12290  010FCA  0100               	movlb	0	; () banked
 12291  010FCC  8FC0               	bsf	___fladd@grs& (0+255),7,b
 12292  010FCE                     l2995:
 12293                           
 12294                           ; BSR set to: 0
 12295                           
 12296                           ; BSR set to: 0
 12297  010FCE  0100               	movlb	0	; () banked
 12298  010FD0  35B0               	rlcf	(___fladd@b+3)& (0+255),w,b
 12299  010FD2  33B0               	rrcf	(___fladd@b+3)& (0+255),f,b
 12300  010FD4  33AF               	rrcf	(___fladd@b+2)& (0+255),f,b
 12301  010FD6  33AE               	rrcf	(___fladd@b+1)& (0+255),f,b
 12302  010FD8  33AD               	rrcf	___fladd@b& (0+255),f,b
 12303                           
 12304                           ; BSR set to: 0
 12305  010FDA  0100               	movlb	0	; () banked
 12306  010FDC  2BBF               	incf	___fladd@bexp& (0+255),f,b
 12307  010FDE                     l2991:
 12308                           
 12309                           ; BSR set to: 0
 12310  010FDE  0100               	movlb	0	; () banked
 12311  010FE0  51BE               	movf	___fladd@aexp& (0+255),w,b
 12312  010FE2  0100               	movlb	0	; () banked
 12313  010FE4  5DBF               	subwf	___fladd@bexp& (0+255),w,b
 12314  010FE6  A0D8               	btfss	status,0,c
 12315  010FE8  D7E0               	goto	l2992
 12316  010FEA                     u11900:
 12317                           
 12318                           ; BSR set to: 0
 12319                           
 12320                           ; BSR set to: 0
 12321  010FEA  0100               	movlb	0	; () banked
 12322  010FEC  BDBD               	btfsc	___fladd@signs& (0+255),6,b
 12323  010FEE  D03F               	goto	l2997
 12324                           
 12325                           ; BSR set to: 0
 12326  010FF0  0100               	movlb	0	; () banked
 12327  010FF2  51BF               	movf	___fladd@bexp& (0+255),w,b
 12328  010FF4  0100               	movlb	0	; () banked
 12329  010FF6  A4D8               	btfss	status,2,c
 12330  010FF8  D00A               	goto	l2998
 12331                           
 12332                           ; BSR set to: 0
 12333  010FFA  0E00               	movlw	0
 12334  010FFC  0100               	movlb	0	; () banked
 12335  010FFE  6FAD               	movwf	?___fladd& (0+255),b
 12336  011000  0E00               	movlw	0
 12337  011002  6FAE               	movwf	(?___fladd+1)& (0+255),b
 12338  011004  0E00               	movlw	0
 12339  011006  6FAF               	movwf	(?___fladd+2)& (0+255),b
 12340  011008  0E00               	movlw	0
 12341  01100A  6FB0               	movwf	(?___fladd+3)& (0+255),b
 12342                           
 12343                           ; BSR set to: 0
 12344  01100C  0012               	return	
 12345  01100E                     l2998:
 12346                           
 12347                           ; BSR set to: 0
 12348                           
 12349                           ; BSR set to: 0
 12350  01100E  0100               	movlb	0	; () banked
 12351  011010  51B1               	movf	___fladd@a& (0+255),w,b
 12352  011012  0100               	movlb	0	; () banked
 12353  011014  27AD               	addwf	___fladd@b& (0+255),f,b
 12354  011016  0100               	movlb	0	; () banked
 12355  011018  51B2               	movf	(___fladd@a+1)& (0+255),w,b
 12356  01101A  0100               	movlb	0	; () banked
 12357  01101C  23AE               	addwfc	(___fladd@b+1)& (0+255),f,b
 12358  01101E  0100               	movlb	0	; () banked
 12359  011020  51B3               	movf	(___fladd@a+2)& (0+255),w,b
 12360  011022  0100               	movlb	0	; () banked
 12361  011024  23AF               	addwfc	(___fladd@b+2)& (0+255),f,b
 12362  011026  0100               	movlb	0	; () banked
 12363  011028  51B4               	movf	(___fladd@a+3)& (0+255),w,b
 12364  01102A  0100               	movlb	0	; () banked
 12365  01102C  23B0               	addwfc	(___fladd@b+3)& (0+255),f,b
 12366                           
 12367                           ; BSR set to: 0
 12368  01102E  0100               	movlb	0	; () banked
 12369  011030  A1B0               	btfss	(___fladd@b+3)& (0+255),0,b
 12370  011032  D0CC               	goto	u12030
 12371                           
 12372                           ; BSR set to: 0
 12373  011034  0100               	movlb	0	; () banked
 12374  011036  A1C0               	btfss	___fladd@grs& (0+255),0,b
 12375  011038  D009               	goto	l3001
 12376                           
 12377                           ; BSR set to: 0
 12378  01103A  0100               	movlb	0	; () banked
 12379  01103C  90D8               	bcf	status,0,c
 12380  01103E  33C0               	rrcf	___fladd@grs& (0+255),f,b
 12381  011040  0100               	movlb	0	; () banked
 12382  011042  51C0               	movf	___fladd@grs& (0+255),w,b
 12383  011044  0901               	iorlw	1
 12384  011046  0100               	movlb	0	; () banked
 12385  011048  6FC0               	movwf	___fladd@grs& (0+255),b
 12386  01104A  D003               	goto	l3002
 12387  01104C                     l3001:
 12388                           
 12389                           ; BSR set to: 0
 12390                           
 12391                           ; BSR set to: 0
 12392  01104C  0100               	movlb	0	; () banked
 12393  01104E  90D8               	bcf	status,0,c
 12394  011050  33C0               	rrcf	___fladd@grs& (0+255),f,b
 12395  011052                     l3002:
 12396                           
 12397                           ; BSR set to: 0
 12398                           
 12399                           ; BSR set to: 0
 12400  011052  0100               	movlb	0	; () banked
 12401  011054  A1AD               	btfss	___fladd@b& (0+255),0,b
 12402  011056  D002               	goto	l3003
 12403                           
 12404                           ; BSR set to: 0
 12405  011058  0100               	movlb	0	; () banked
 12406  01105A  8FC0               	bsf	___fladd@grs& (0+255),7,b
 12407  01105C                     l3003:
 12408                           
 12409                           ; BSR set to: 0
 12410                           
 12411                           ; BSR set to: 0
 12412  01105C  0100               	movlb	0	; () banked
 12413  01105E  35B0               	rlcf	(___fladd@b+3)& (0+255),w,b
 12414  011060  33B0               	rrcf	(___fladd@b+3)& (0+255),f,b
 12415  011062  33AF               	rrcf	(___fladd@b+2)& (0+255),f,b
 12416  011064  33AE               	rrcf	(___fladd@b+1)& (0+255),f,b
 12417  011066  33AD               	rrcf	___fladd@b& (0+255),f,b
 12418                           
 12419                           ; BSR set to: 0
 12420  011068  0100               	movlb	0	; () banked
 12421  01106A  2BBF               	incf	___fladd@bexp& (0+255),f,b
 12422                           
 12423                           ; BSR set to: 0
 12424  01106C  D0AF               	goto	u12030
 12425  01106E                     l2997:
 12426                           
 12427                           ; BSR set to: 0
 12428                           
 12429                           ; BSR set to: 0
 12430  01106E  0100               	movlb	0	; () banked
 12431  011070  51B1               	movf	___fladd@a& (0+255),w,b
 12432  011072  0100               	movlb	0	; () banked
 12433  011074  5DAD               	subwf	___fladd@b& (0+255),w,b
 12434  011076  0100               	movlb	0	; () banked
 12435  011078  51B2               	movf	(___fladd@a+1)& (0+255),w,b
 12436  01107A  0100               	movlb	0	; () banked
 12437  01107C  59AE               	subwfb	(___fladd@b+1)& (0+255),w,b
 12438  01107E  0100               	movlb	0	; () banked
 12439  011080  51B3               	movf	(___fladd@a+2)& (0+255),w,b
 12440  011082  0100               	movlb	0	; () banked
 12441  011084  59AF               	subwfb	(___fladd@b+2)& (0+255),w,b
 12442  011086  0100               	movlb	0	; () banked
 12443  011088  51B0               	movf	(___fladd@b+3)& (0+255),w,b
 12444  01108A  0A80               	xorlw	128
 12445  01108C  0100               	movlb	0	; () banked
 12446  01108E  6FB5               	movwf	??___fladd& (0+255),b
 12447  011090  0100               	movlb	0	; () banked
 12448  011092  51B4               	movf	(___fladd@a+3)& (0+255),w,b
 12449  011094  0A80               	xorlw	128
 12450  011096  0100               	movlb	0	; () banked
 12451  011098  59B5               	subwfb	??___fladd& (0+255),w,b
 12452  01109A  B0D8               	btfsc	status,0,c
 12453  01109C  D050               	goto	l3005
 12454                           
 12455                           ; BSR set to: 0
 12456  01109E  C0AD  F0B5         	movff	___fladd@b,??___fladd
 12457  0110A2  C0AE  F0B6         	movff	___fladd@b+1,??___fladd+1
 12458  0110A6  C0AF  F0B7         	movff	___fladd@b+2,??___fladd+2
 12459  0110AA  C0B0  F0B8         	movff	___fladd@b+3,??___fladd+3
 12460  0110AE  0100               	movlb	0	; () banked
 12461  0110B0  1FB5               	comf	??___fladd& (0+255),f,b
 12462  0110B2  1FB6               	comf	(??___fladd+1)& (0+255),f,b
 12463  0110B4  1FB7               	comf	(??___fladd+2)& (0+255),f,b
 12464  0110B6  1FB8               	comf	(??___fladd+3)& (0+255),f,b
 12465  0110B8  2BB5               	incf	??___fladd& (0+255),f,b
 12466  0110BA  0E00               	movlw	0
 12467  0110BC  23B6               	addwfc	(??___fladd+1)& (0+255),f,b
 12468  0110BE  23B7               	addwfc	(??___fladd+2)& (0+255),f,b
 12469  0110C0  23B8               	addwfc	(??___fladd+3)& (0+255),f,b
 12470  0110C2  0100               	movlb	0	; () banked
 12471  0110C4  51B1               	movf	___fladd@a& (0+255),w,b
 12472  0110C6  0100               	movlb	0	; () banked
 12473  0110C8  25B5               	addwf	??___fladd& (0+255),w,b
 12474  0110CA  0100               	movlb	0	; () banked
 12475  0110CC  6FB9               	movwf	(??___fladd+4)& (0+255),b
 12476  0110CE  0100               	movlb	0	; () banked
 12477  0110D0  51B2               	movf	(___fladd@a+1)& (0+255),w,b
 12478  0110D2  0100               	movlb	0	; () banked
 12479  0110D4  21B6               	addwfc	(??___fladd+1)& (0+255),w,b
 12480  0110D6  0100               	movlb	0	; () banked
 12481  0110D8  6FBA               	movwf	(??___fladd+5)& (0+255),b
 12482  0110DA  0100               	movlb	0	; () banked
 12483  0110DC  51B3               	movf	(___fladd@a+2)& (0+255),w,b
 12484  0110DE  0100               	movlb	0	; () banked
 12485  0110E0  21B7               	addwfc	(??___fladd+2)& (0+255),w,b
 12486  0110E2  0100               	movlb	0	; () banked
 12487  0110E4  6FBB               	movwf	(??___fladd+6)& (0+255),b
 12488  0110E6  0100               	movlb	0	; () banked
 12489  0110E8  51B4               	movf	(___fladd@a+3)& (0+255),w,b
 12490  0110EA  0100               	movlb	0	; () banked
 12491  0110EC  21B8               	addwfc	(??___fladd+3)& (0+255),w,b
 12492  0110EE  0100               	movlb	0	; () banked
 12493  0110F0  6FBC               	movwf	(??___fladd+7)& (0+255),b
 12494  0110F2  0EFF               	movlw	255
 12495  0110F4  0100               	movlb	0	; () banked
 12496  0110F6  25B9               	addwf	(??___fladd+4)& (0+255),w,b
 12497  0110F8  0100               	movlb	0	; () banked
 12498  0110FA  6FAD               	movwf	___fladd@b& (0+255),b
 12499  0110FC  0EFF               	movlw	255
 12500  0110FE  0100               	movlb	0	; () banked
 12501  011100  21BA               	addwfc	(??___fladd+5)& (0+255),w,b
 12502  011102  0100               	movlb	0	; () banked
 12503  011104  6FAE               	movwf	(___fladd@b+1)& (0+255),b
 12504  011106  0EFF               	movlw	255
 12505  011108  0100               	movlb	0	; () banked
 12506  01110A  21BB               	addwfc	(??___fladd+6)& (0+255),w,b
 12507  01110C  0100               	movlb	0	; () banked
 12508  01110E  6FAF               	movwf	(___fladd@b+2)& (0+255),b
 12509  011110  0EFF               	movlw	255
 12510  011112  0100               	movlb	0	; () banked
 12511  011114  21BC               	addwfc	(??___fladd+7)& (0+255),w,b
 12512  011116  0100               	movlb	0	; () banked
 12513  011118  6FB0               	movwf	(___fladd@b+3)& (0+255),b
 12514  01111A  0E80               	movlw	128
 12515  01111C  0100               	movlb	0	; () banked
 12516  01111E  1BBD               	xorwf	___fladd@signs& (0+255),f,b
 12517                           
 12518                           ; BSR set to: 0
 12519  011120  0100               	movlb	0	; () banked
 12520  011122  6DC0               	negf	___fladd@grs& (0+255),b
 12521                           
 12522                           ; BSR set to: 0
 12523  011124  0100               	movlb	0	; () banked
 12524  011126  51C0               	movf	___fladd@grs& (0+255),w,b
 12525  011128  0100               	movlb	0	; () banked
 12526  01112A  A4D8               	btfss	status,2,c
 12527  01112C  D018               	goto	l3007
 12528                           
 12529                           ; BSR set to: 0
 12530  01112E  0E01               	movlw	1
 12531  011130  0100               	movlb	0	; () banked
 12532  011132  27AD               	addwf	___fladd@b& (0+255),f,b
 12533  011134  0E00               	movlw	0
 12534  011136  23AE               	addwfc	(___fladd@b+1)& (0+255),f,b
 12535  011138  23AF               	addwfc	(___fladd@b+2)& (0+255),f,b
 12536  01113A  23B0               	addwfc	(___fladd@b+3)& (0+255),f,b
 12537                           
 12538                           ; BSR set to: 0
 12539  01113C  D010               	goto	l3007
 12540  01113E                     l3005:
 12541                           
 12542                           ; BSR set to: 0
 12543                           
 12544                           ; BSR set to: 0
 12545  01113E  0100               	movlb	0	; () banked
 12546  011140  51B1               	movf	___fladd@a& (0+255),w,b
 12547  011142  0100               	movlb	0	; () banked
 12548  011144  5FAD               	subwf	___fladd@b& (0+255),f,b
 12549  011146  0100               	movlb	0	; () banked
 12550  011148  51B2               	movf	(___fladd@a+1)& (0+255),w,b
 12551  01114A  0100               	movlb	0	; () banked
 12552  01114C  5BAE               	subwfb	(___fladd@b+1)& (0+255),f,b
 12553  01114E  0100               	movlb	0	; () banked
 12554  011150  51B3               	movf	(___fladd@a+2)& (0+255),w,b
 12555  011152  0100               	movlb	0	; () banked
 12556  011154  5BAF               	subwfb	(___fladd@b+2)& (0+255),f,b
 12557  011156  0100               	movlb	0	; () banked
 12558  011158  51B4               	movf	(___fladd@a+3)& (0+255),w,b
 12559  01115A  0100               	movlb	0	; () banked
 12560  01115C  5BB0               	subwfb	(___fladd@b+3)& (0+255),f,b
 12561  01115E                     l3007:
 12562                           
 12563                           ; BSR set to: 0
 12564  01115E  0100               	movlb	0	; () banked
 12565  011160  51AD               	movf	___fladd@b& (0+255),w,b
 12566  011162  0100               	movlb	0	; () banked
 12567  011164  11AE               	iorwf	(___fladd@b+1)& (0+255),w,b
 12568  011166  0100               	movlb	0	; () banked
 12569  011168  11AF               	iorwf	(___fladd@b+2)& (0+255),w,b
 12570  01116A  0100               	movlb	0	; () banked
 12571  01116C  11B0               	iorwf	(___fladd@b+3)& (0+255),w,b
 12572  01116E  A4D8               	btfss	status,2,c
 12573  011170  D02A               	goto	l3014
 12574                           
 12575                           ; BSR set to: 0
 12576  011172  0100               	movlb	0	; () banked
 12577  011174  51C0               	movf	___fladd@grs& (0+255),w,b
 12578  011176  0100               	movlb	0	; () banked
 12579  011178  A4D8               	btfss	status,2,c
 12580  01117A  D025               	goto	l3014
 12581                           
 12582                           ; BSR set to: 0
 12583  01117C  0E00               	movlw	0
 12584  01117E  0100               	movlb	0	; () banked
 12585  011180  6FAD               	movwf	?___fladd& (0+255),b
 12586  011182  0E00               	movlw	0
 12587  011184  6FAE               	movwf	(?___fladd+1)& (0+255),b
 12588  011186  0E00               	movlw	0
 12589  011188  6FAF               	movwf	(?___fladd+2)& (0+255),b
 12590  01118A  0E00               	movlw	0
 12591  01118C  6FB0               	movwf	(?___fladd+3)& (0+255),b
 12592                           
 12593                           ; BSR set to: 0
 12594  01118E  0012               	return	
 12595  011190                     
 12596                           ; BSR set to: 0
 12597                           
 12598                           ; BSR set to: 0
 12599  011190  0100               	movlb	0	; () banked
 12600  011192  90D8               	bcf	status,0,c
 12601  011194  37AD               	rlcf	___fladd@b& (0+255),f,b
 12602  011196  37AE               	rlcf	(___fladd@b+1)& (0+255),f,b
 12603  011198  37AF               	rlcf	(___fladd@b+2)& (0+255),f,b
 12604  01119A  37B0               	rlcf	(___fladd@b+3)& (0+255),f,b
 12605                           
 12606                           ; BSR set to: 0
 12607  01119C  0100               	movlb	0	; () banked
 12608  01119E  AFC0               	btfss	___fladd@grs& (0+255),7,b
 12609  0111A0  D002               	goto	l3011
 12610                           
 12611                           ; BSR set to: 0
 12612  0111A2  0100               	movlb	0	; () banked
 12613  0111A4  81AD               	bsf	___fladd@b& (0+255),0,b
 12614  0111A6                     l3011:
 12615                           
 12616                           ; BSR set to: 0
 12617                           
 12618                           ; BSR set to: 0
 12619  0111A6  0100               	movlb	0	; () banked
 12620  0111A8  A1C0               	btfss	___fladd@grs& (0+255),0,b
 12621  0111AA  D003               	goto	l3012
 12622                           
 12623                           ; BSR set to: 0
 12624  0111AC  80D8               	bsf	status,0,c
 12625  0111AE  0100               	movlb	0	; () banked
 12626  0111B0  D002               	goto	L8
 12627  0111B2                     l3012:
 12628                           
 12629                           ; BSR set to: 0
 12630                           
 12631                           ; BSR set to: 0
 12632  0111B2  0100               	movlb	0	; () banked
 12633  0111B4  90D8               	bcf	status,0,c
 12634  0111B6                     L8:
 12635  0111B6  37C0               	rlcf	___fladd@grs& (0+255),f,b
 12636                           
 12637                           ; BSR set to: 0
 12638                           
 12639                           ; BSR set to: 0
 12640  0111B8  0100               	movlb	0	; () banked
 12641  0111BA  51BF               	movf	___fladd@bexp& (0+255),w,b
 12642  0111BC  0100               	movlb	0	; () banked
 12643  0111BE  B4D8               	btfsc	status,2,c
 12644  0111C0  D002               	goto	l3014
 12645                           
 12646                           ; BSR set to: 0
 12647  0111C2  0100               	movlb	0	; () banked
 12648  0111C4  07BF               	decf	___fladd@bexp& (0+255),f,b
 12649  0111C6                     l3014:
 12650                           
 12651                           ; BSR set to: 0
 12652                           
 12653                           ; BSR set to: 0
 12654                           
 12655                           ; BSR set to: 0
 12656  0111C6  0100               	movlb	0	; () banked
 12657  0111C8  AFAF               	btfss	(___fladd@b+2)& (0+255),7,b
 12658  0111CA  D7E2               	goto	l3010
 12659  0111CC                     u12030:
 12660                           
 12661                           ; BSR set to: 0
 12662                           
 12663                           ; BSR set to: 0
 12664                           
 12665                           ; BSR set to: 0
 12666  0111CC  0E00               	movlw	0
 12667  0111CE  0100               	movlb	0	; () banked
 12668  0111D0  6FBE               	movwf	___fladd@aexp& (0+255),b
 12669                           
 12670                           ; BSR set to: 0
 12671  0111D2  0100               	movlb	0	; () banked
 12672  0111D4  AFC0               	btfss	___fladd@grs& (0+255),7,b
 12673  0111D6  D00D               	goto	l3019
 12674                           
 12675                           ; BSR set to: 0
 12676  0111D8  C0C0  F0B5         	movff	___fladd@grs,??___fladd
 12677  0111DC  0E7F               	movlw	127
 12678  0111DE  0100               	movlb	0	; () banked
 12679  0111E0  17B5               	andwf	??___fladd& (0+255),f,b
 12680  0111E2  A4D8               	btfss	status,2,c
 12681  0111E4  D003               	goto	u12060
 12682                           
 12683                           ; BSR set to: 0
 12684                           
 12685                           ; BSR set to: 0
 12686  0111E6  0100               	movlb	0	; () banked
 12687  0111E8  A1AD               	btfss	___fladd@b& (0+255),0,b
 12688  0111EA  D003               	goto	l3019
 12689  0111EC                     u12060:
 12690                           
 12691                           ; BSR set to: 0
 12692  0111EC  0E01               	movlw	1
 12693  0111EE  0100               	movlb	0	; () banked
 12694  0111F0  6FBE               	movwf	___fladd@aexp& (0+255),b
 12695  0111F2                     l3019:
 12696                           
 12697                           ; BSR set to: 0
 12698                           
 12699                           ; BSR set to: 0
 12700                           
 12701                           ; BSR set to: 0
 12702  0111F2  0100               	movlb	0	; () banked
 12703  0111F4  51BE               	movf	___fladd@aexp& (0+255),w,b
 12704  0111F6  0100               	movlb	0	; () banked
 12705  0111F8  B4D8               	btfsc	status,2,c
 12706  0111FA  D026               	goto	l3022
 12707                           
 12708                           ; BSR set to: 0
 12709  0111FC  0E01               	movlw	1
 12710  0111FE  0100               	movlb	0	; () banked
 12711  011200  27AD               	addwf	___fladd@b& (0+255),f,b
 12712  011202  0E00               	movlw	0
 12713  011204  23AE               	addwfc	(___fladd@b+1)& (0+255),f,b
 12714  011206  23AF               	addwfc	(___fladd@b+2)& (0+255),f,b
 12715  011208  23B0               	addwfc	(___fladd@b+3)& (0+255),f,b
 12716                           
 12717                           ; BSR set to: 0
 12718  01120A  0100               	movlb	0	; () banked
 12719  01120C  A1B0               	btfss	(___fladd@b+3)& (0+255),0,b
 12720  01120E  D01C               	goto	l3022
 12721                           
 12722                           ; BSR set to: 0
 12723  011210  C0AD  F0B5         	movff	___fladd@b,??___fladd
 12724  011214  C0AE  F0B6         	movff	___fladd@b+1,??___fladd+1
 12725  011218  C0AF  F0B7         	movff	___fladd@b+2,??___fladd+2
 12726  01121C  C0B0  F0B8         	movff	___fladd@b+3,??___fladd+3
 12727  011220  0100               	movlb	0	; () banked
 12728  011222  35B8               	rlcf	(??___fladd+3)& (0+255),w,b
 12729  011224  33B8               	rrcf	(??___fladd+3)& (0+255),f,b
 12730  011226  33B7               	rrcf	(??___fladd+2)& (0+255),f,b
 12731  011228  33B6               	rrcf	(??___fladd+1)& (0+255),f,b
 12732  01122A  33B5               	rrcf	??___fladd& (0+255),f,b
 12733  01122C  C0B5  F0AD         	movff	??___fladd,___fladd@b
 12734  011230  C0B6  F0AE         	movff	??___fladd+1,___fladd@b+1
 12735  011234  C0B7  F0AF         	movff	??___fladd+2,___fladd@b+2
 12736  011238  C0B8  F0B0         	movff	??___fladd+3,___fladd@b+3
 12737  01123C  0100               	movlb	0	; () banked
 12738  01123E  29BF               	incf	___fladd@bexp& (0+255),w,b
 12739  011240  B4D8               	btfsc	status,2,c
 12740  011242  D002               	goto	l3022
 12741                           
 12742                           ; BSR set to: 0
 12743  011244  0100               	movlb	0	; () banked
 12744  011246  2BBF               	incf	___fladd@bexp& (0+255),f,b
 12745  011248                     l3022:
 12746                           
 12747                           ; BSR set to: 0
 12748                           
 12749                           ; BSR set to: 0
 12750                           
 12751                           ; BSR set to: 0
 12752                           
 12753                           ; BSR set to: 0
 12754  011248  0100               	movlb	0	; () banked
 12755  01124A  29BF               	incf	___fladd@bexp& (0+255),w,b
 12756  01124C  B4D8               	btfsc	status,2,c
 12757  01124E  D005               	goto	u12110
 12758                           
 12759                           ; BSR set to: 0
 12760  011250  0100               	movlb	0	; () banked
 12761  011252  51BF               	movf	___fladd@bexp& (0+255),w,b
 12762  011254  0100               	movlb	0	; () banked
 12763  011256  A4D8               	btfss	status,2,c
 12764  011258  D011               	goto	l3026
 12765  01125A                     u12110:
 12766                           
 12767                           ; BSR set to: 0
 12768                           
 12769                           ; BSR set to: 0
 12770  01125A  0E00               	movlw	0
 12771  01125C  0100               	movlb	0	; () banked
 12772  01125E  6FAD               	movwf	___fladd@b& (0+255),b
 12773  011260  0E00               	movlw	0
 12774  011262  6FAE               	movwf	(___fladd@b+1)& (0+255),b
 12775  011264  0E00               	movlw	0
 12776  011266  6FAF               	movwf	(___fladd@b+2)& (0+255),b
 12777  011268  0E00               	movlw	0
 12778  01126A  6FB0               	movwf	(___fladd@b+3)& (0+255),b
 12779  01126C  0100               	movlb	0	; () banked
 12780  01126E  51BF               	movf	___fladd@bexp& (0+255),w,b
 12781  011270  0100               	movlb	0	; () banked
 12782  011272  A4D8               	btfss	status,2,c
 12783  011274  D003               	goto	l3026
 12784                           
 12785                           ; BSR set to: 0
 12786  011276  0E00               	movlw	0
 12787  011278  0100               	movlb	0	; () banked
 12788  01127A  6FBD               	movwf	___fladd@signs& (0+255),b
 12789  01127C                     l3026:
 12790                           
 12791                           ; BSR set to: 0
 12792                           
 12793                           ; BSR set to: 0
 12794                           
 12795                           ; BSR set to: 0
 12796  01127C  0100               	movlb	0	; () banked
 12797  01127E  A1BF               	btfss	___fladd@bexp& (0+255),0,b
 12798  011280  D003               	goto	l3027
 12799                           
 12800                           ; BSR set to: 0
 12801  011282  0100               	movlb	0	; () banked
 12802  011284  8FAF               	bsf	(___fladd@b+2)& (0+255),7,b
 12803  011286  D002               	goto	l3028
 12804  011288                     l3027:
 12805                           
 12806                           ; BSR set to: 0
 12807                           
 12808                           ; BSR set to: 0
 12809  011288  0100               	movlb	0	; () banked
 12810  01128A  9FAF               	bcf	(___fladd@b+2)& (0+255),7,b
 12811  01128C                     l3028:
 12812                           
 12813                           ; BSR set to: 0
 12814                           
 12815                           ; BSR set to: 0
 12816  01128C  0100               	movlb	0	; () banked
 12817  01128E  90D8               	bcf	status,0,c
 12818  011290  31BF               	rrcf	___fladd@bexp& (0+255),w,b
 12819  011292  0100               	movlb	0	; () banked
 12820  011294  6FB0               	movwf	(___fladd@b+3)& (0+255),b
 12821                           
 12822                           ; BSR set to: 0
 12823  011296  0100               	movlb	0	; () banked
 12824  011298  AFBD               	btfss	___fladd@signs& (0+255),7,b
 12825  01129A  D002               	goto	l3029
 12826                           
 12827                           ; BSR set to: 0
 12828  01129C  0100               	movlb	0	; () banked
 12829  01129E  8FB0               	bsf	(___fladd@b+3)& (0+255),7,b
 12830  0112A0                     l3029:
 12831                           
 12832                           ; BSR set to: 0
 12833                           
 12834                           ; BSR set to: 0
 12835  0112A0  C0AD  F0AD         	movff	___fladd@b,?___fladd
 12836  0112A4  C0AE  F0AE         	movff	___fladd@b+1,?___fladd+1
 12837  0112A8  C0AF  F0AF         	movff	___fladd@b+2,?___fladd+2
 12838  0112AC  C0B0  F0B0         	movff	___fladd@b+3,?___fladd+3
 12839  0112B0  0012               	return	
 12840  0112B2                     __end_of___fladd:
 12841                           	opt stack 0
 12842                           tblptru	equ	0xFF8
 12843                           tblptrh	equ	0xFF7
 12844                           tblptrl	equ	0xFF6
 12845                           tablat	equ	0xFF5
 12846                           prodh	equ	0xFF4
 12847                           prodl	equ	0xFF3
 12848                           postinc0	equ	0xFEE
 12849                           wreg	equ	0xFE8
 12850                           postdec1	equ	0xFE5
 12851                           fsr1h	equ	0xFE2
 12852                           fsr1l	equ	0xFE1
 12853                           indf2	equ	0xFDF
 12854                           postinc2	equ	0xFDE
 12855                           postdec2	equ	0xFDD
 12856                           fsr2h	equ	0xFDA
 12857                           fsr2l	equ	0xFD9
 12858                           status	equ	0xFD8
 12859                           
 12860 ;; *************** function ___flneg *****************
 12861 ;; Defined at:
 12862 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flneg.c"
 12863 ;; Parameters:    Size  Location     Type
 12864 ;;  f1              4    0[BANK0 ] unsigned char 
 12865 ;; Auto vars:     Size  Location     Type
 12866 ;;		None
 12867 ;; Return value:  Size  Location     Type
 12868 ;;                  4    0[BANK0 ] unsigned char 
 12869 ;; Registers used:
 12870 ;;		wreg, status,2, status,0
 12871 ;; Tracked objects:
 12872 ;;		On entry : 0/0
 12873 ;;		On exit  : 0/0
 12874 ;;		Unchanged: 0/0
 12875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12876 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12879 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12880 ;;Total ram usage:        4 bytes
 12881 ;; Hardware stack levels used:    1
 12882 ;; Hardware stack levels required when called:    7
 12883 ;; This function calls:
 12884 ;;		Nothing
 12885 ;; This function is called by:
 12886 ;;		_printf
 12887 ;; This function uses a non-reentrant model
 12888 ;;
 12889                           
 12890                           	psect	text36
 12891  017A30                     __ptext36:
 12892                           	opt stack 0
 12893  017A30                     ___flneg:
 12894                           	opt stack 22
 12895                           
 12896                           ; BSR set to: 0
 12897                           ;incstack = 0
 12898  017A30  0100               	movlb	0	; () banked
 12899  017A32  5160               	movf	___flneg@f1& (0+255),w,b
 12900  017A34  0100               	movlb	0	; () banked
 12901  017A36  1161               	iorwf	(___flneg@f1+1)& (0+255),w,b
 12902  017A38  0100               	movlb	0	; () banked
 12903  017A3A  1162               	iorwf	(___flneg@f1+2)& (0+255),w,b
 12904  017A3C  0100               	movlb	0	; () banked
 12905  017A3E  1163               	iorwf	(___flneg@f1+3)& (0+255),w,b
 12906  017A40  B4D8               	btfsc	status,2,c
 12907  017A42  D009               	goto	l2730
 12908                           
 12909                           ; BSR set to: 0
 12910  017A44  0E00               	movlw	0
 12911  017A46  0100               	movlb	0	; () banked
 12912  017A48  1B60               	xorwf	___flneg@f1& (0+255),f,b
 12913  017A4A  0E00               	movlw	0
 12914  017A4C  1B61               	xorwf	(___flneg@f1+1)& (0+255),f,b
 12915  017A4E  0E00               	movlw	0
 12916  017A50  1B62               	xorwf	(___flneg@f1+2)& (0+255),f,b
 12917  017A52  0E80               	movlw	128
 12918  017A54  1B63               	xorwf	(___flneg@f1+3)& (0+255),f,b
 12919  017A56                     l2730:
 12920                           
 12921                           ; BSR set to: 0
 12922                           
 12923                           ; BSR set to: 0
 12924  017A56  C060  F060         	movff	___flneg@f1,?___flneg
 12925  017A5A  C061  F061         	movff	___flneg@f1+1,?___flneg+1
 12926  017A5E  C062  F062         	movff	___flneg@f1+2,?___flneg+2
 12927  017A62  C063  F063         	movff	___flneg@f1+3,?___flneg+3
 12928  017A66  0012               	return	
 12929  017A68                     __end_of___flneg:
 12930                           	opt stack 0
 12931                           tblptru	equ	0xFF8
 12932                           tblptrh	equ	0xFF7
 12933                           tblptrl	equ	0xFF6
 12934                           tablat	equ	0xFF5
 12935                           prodh	equ	0xFF4
 12936                           prodl	equ	0xFF3
 12937                           postinc0	equ	0xFEE
 12938                           wreg	equ	0xFE8
 12939                           postdec1	equ	0xFE5
 12940                           fsr1h	equ	0xFE2
 12941                           fsr1l	equ	0xFE1
 12942                           indf2	equ	0xFDF
 12943                           postinc2	equ	0xFDE
 12944                           postdec2	equ	0xFDD
 12945                           fsr2h	equ	0xFDA
 12946                           fsr2l	equ	0xFD9
 12947                           status	equ	0xFD8
 12948                           
 12949 ;; *************** function ___flge *****************
 12950 ;; Defined at:
 12951 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flge.c"
 12952 ;; Parameters:    Size  Location     Type
 12953 ;;  ff1             4    0[BANK0 ] unsigned char 
 12954 ;;  ff2             4    4[BANK0 ] unsigned char 
 12955 ;; Auto vars:     Size  Location     Type
 12956 ;;		None
 12957 ;; Return value:  Size  Location     Type
 12958 ;;		None               void
 12959 ;; Registers used:
 12960 ;;		wreg, status,2, status,0
 12961 ;; Tracked objects:
 12962 ;;		On entry : 0/0
 12963 ;;		On exit  : 0/0
 12964 ;;		Unchanged: 0/0
 12965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12966 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12970 ;;Total ram usage:       12 bytes
 12971 ;; Hardware stack levels used:    1
 12972 ;; Hardware stack levels required when called:    7
 12973 ;; This function calls:
 12974 ;;		Nothing
 12975 ;; This function is called by:
 12976 ;;		_printf
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           	psect	text37
 12981  0141A6                     __ptext37:
 12982                           	opt stack 0
 12983  0141A6                     ___flge:
 12984                           	opt stack 22
 12985                           
 12986                           ; BSR set to: 0
 12987                           ;incstack = 0
 12988  0141A6  0E00               	movlw	0
 12989  0141A8  0100               	movlb	0	; () banked
 12990  0141AA  1560               	andwf	___flge@ff1& (0+255),w,b
 12991  0141AC  0100               	movlb	0	; () banked
 12992  0141AE  6F68               	movwf	??___flge& (0+255),b
 12993  0141B0  0E00               	movlw	0
 12994  0141B2  0100               	movlb	0	; () banked
 12995  0141B4  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 12996  0141B6  0100               	movlb	0	; () banked
 12997  0141B8  6F69               	movwf	(??___flge+1)& (0+255),b
 12998  0141BA  0E80               	movlw	128
 12999  0141BC  0100               	movlb	0	; () banked
 13000  0141BE  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 13001  0141C0  0100               	movlb	0	; () banked
 13002  0141C2  6F6A               	movwf	(??___flge+2)& (0+255),b
 13003  0141C4  0E7F               	movlw	127
 13004  0141C6  0100               	movlb	0	; () banked
 13005  0141C8  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 13006  0141CA  0100               	movlb	0	; () banked
 13007  0141CC  6F6B               	movwf	(??___flge+3)& (0+255),b
 13008  0141CE  0100               	movlb	0	; () banked
 13009  0141D0  5168               	movf	??___flge& (0+255),w,b
 13010  0141D2  0100               	movlb	0	; () banked
 13011  0141D4  1169               	iorwf	(??___flge+1)& (0+255),w,b
 13012  0141D6  0100               	movlb	0	; () banked
 13013  0141D8  116A               	iorwf	(??___flge+2)& (0+255),w,b
 13014  0141DA  0100               	movlb	0	; () banked
 13015  0141DC  116B               	iorwf	(??___flge+3)& (0+255),w,b
 13016  0141DE  A4D8               	btfss	status,2,c
 13017  0141E0  D009               	goto	l2723
 13018                           
 13019                           ; BSR set to: 0
 13020  0141E2  0E00               	movlw	0
 13021  0141E4  0100               	movlb	0	; () banked
 13022  0141E6  6F60               	movwf	___flge@ff1& (0+255),b
 13023  0141E8  0E00               	movlw	0
 13024  0141EA  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 13025  0141EC  0E00               	movlw	0
 13026  0141EE  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 13027  0141F0  0E00               	movlw	0
 13028  0141F2  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 13029  0141F4                     l2723:
 13030                           
 13031                           ; BSR set to: 0
 13032                           
 13033                           ; BSR set to: 0
 13034  0141F4  0E00               	movlw	0
 13035  0141F6  0100               	movlb	0	; () banked
 13036  0141F8  1564               	andwf	___flge@ff2& (0+255),w,b
 13037  0141FA  0100               	movlb	0	; () banked
 13038  0141FC  6F68               	movwf	??___flge& (0+255),b
 13039  0141FE  0E00               	movlw	0
 13040  014200  0100               	movlb	0	; () banked
 13041  014202  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 13042  014204  0100               	movlb	0	; () banked
 13043  014206  6F69               	movwf	(??___flge+1)& (0+255),b
 13044  014208  0E80               	movlw	128
 13045  01420A  0100               	movlb	0	; () banked
 13046  01420C  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 13047  01420E  0100               	movlb	0	; () banked
 13048  014210  6F6A               	movwf	(??___flge+2)& (0+255),b
 13049  014212  0E7F               	movlw	127
 13050  014214  0100               	movlb	0	; () banked
 13051  014216  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 13052  014218  0100               	movlb	0	; () banked
 13053  01421A  6F6B               	movwf	(??___flge+3)& (0+255),b
 13054  01421C  0100               	movlb	0	; () banked
 13055  01421E  5168               	movf	??___flge& (0+255),w,b
 13056  014220  0100               	movlb	0	; () banked
 13057  014222  1169               	iorwf	(??___flge+1)& (0+255),w,b
 13058  014224  0100               	movlb	0	; () banked
 13059  014226  116A               	iorwf	(??___flge+2)& (0+255),w,b
 13060  014228  0100               	movlb	0	; () banked
 13061  01422A  116B               	iorwf	(??___flge+3)& (0+255),w,b
 13062  01422C  A4D8               	btfss	status,2,c
 13063  01422E  D009               	goto	l2724
 13064                           
 13065                           ; BSR set to: 0
 13066  014230  0E00               	movlw	0
 13067  014232  0100               	movlb	0	; () banked
 13068  014234  6F64               	movwf	___flge@ff2& (0+255),b
 13069  014236  0E00               	movlw	0
 13070  014238  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 13071  01423A  0E00               	movlw	0
 13072  01423C  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 13073  01423E  0E00               	movlw	0
 13074  014240  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 13075  014242                     l2724:
 13076                           
 13077                           ; BSR set to: 0
 13078                           
 13079                           ; BSR set to: 0
 13080  014242  0100               	movlb	0	; () banked
 13081  014244  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 13082  014246  D026               	goto	l2725
 13083                           
 13084                           ; BSR set to: 0
 13085  014248  C060  F068         	movff	___flge@ff1,??___flge
 13086  01424C  C061  F069         	movff	___flge@ff1+1,??___flge+1
 13087  014250  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 13088  014254  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 13089  014258  0100               	movlb	0	; () banked
 13090  01425A  1F68               	comf	??___flge& (0+255),f,b
 13091  01425C  1F69               	comf	(??___flge+1)& (0+255),f,b
 13092  01425E  1F6A               	comf	(??___flge+2)& (0+255),f,b
 13093  014260  1F6B               	comf	(??___flge+3)& (0+255),f,b
 13094  014262  2B68               	incf	??___flge& (0+255),f,b
 13095  014264  0E00               	movlw	0
 13096  014266  2369               	addwfc	(??___flge+1)& (0+255),f,b
 13097  014268  236A               	addwfc	(??___flge+2)& (0+255),f,b
 13098  01426A  236B               	addwfc	(??___flge+3)& (0+255),f,b
 13099  01426C  0E00               	movlw	0
 13100  01426E  0100               	movlb	0	; () banked
 13101  014270  2568               	addwf	??___flge& (0+255),w,b
 13102  014272  0100               	movlb	0	; () banked
 13103  014274  6F60               	movwf	___flge@ff1& (0+255),b
 13104  014276  0E00               	movlw	0
 13105  014278  0100               	movlb	0	; () banked
 13106  01427A  2169               	addwfc	(??___flge+1)& (0+255),w,b
 13107  01427C  0100               	movlb	0	; () banked
 13108  01427E  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 13109  014280  0E00               	movlw	0
 13110  014282  0100               	movlb	0	; () banked
 13111  014284  216A               	addwfc	(??___flge+2)& (0+255),w,b
 13112  014286  0100               	movlb	0	; () banked
 13113  014288  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 13114  01428A  0E80               	movlw	128
 13115  01428C  0100               	movlb	0	; () banked
 13116  01428E  216B               	addwfc	(??___flge+3)& (0+255),w,b
 13117  014290  0100               	movlb	0	; () banked
 13118  014292  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 13119  014294                     l2725:
 13120                           
 13121                           ; BSR set to: 0
 13122                           
 13123                           ; BSR set to: 0
 13124  014294  0100               	movlb	0	; () banked
 13125  014296  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 13126  014298  D026               	goto	l2726
 13127                           
 13128                           ; BSR set to: 0
 13129  01429A  C064  F068         	movff	___flge@ff2,??___flge
 13130  01429E  C065  F069         	movff	___flge@ff2+1,??___flge+1
 13131  0142A2  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 13132  0142A6  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 13133  0142AA  0100               	movlb	0	; () banked
 13134  0142AC  1F68               	comf	??___flge& (0+255),f,b
 13135  0142AE  1F69               	comf	(??___flge+1)& (0+255),f,b
 13136  0142B0  1F6A               	comf	(??___flge+2)& (0+255),f,b
 13137  0142B2  1F6B               	comf	(??___flge+3)& (0+255),f,b
 13138  0142B4  2B68               	incf	??___flge& (0+255),f,b
 13139  0142B6  0E00               	movlw	0
 13140  0142B8  2369               	addwfc	(??___flge+1)& (0+255),f,b
 13141  0142BA  236A               	addwfc	(??___flge+2)& (0+255),f,b
 13142  0142BC  236B               	addwfc	(??___flge+3)& (0+255),f,b
 13143  0142BE  0E00               	movlw	0
 13144  0142C0  0100               	movlb	0	; () banked
 13145  0142C2  2568               	addwf	??___flge& (0+255),w,b
 13146  0142C4  0100               	movlb	0	; () banked
 13147  0142C6  6F64               	movwf	___flge@ff2& (0+255),b
 13148  0142C8  0E00               	movlw	0
 13149  0142CA  0100               	movlb	0	; () banked
 13150  0142CC  2169               	addwfc	(??___flge+1)& (0+255),w,b
 13151  0142CE  0100               	movlb	0	; () banked
 13152  0142D0  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 13153  0142D2  0E00               	movlw	0
 13154  0142D4  0100               	movlb	0	; () banked
 13155  0142D6  216A               	addwfc	(??___flge+2)& (0+255),w,b
 13156  0142D8  0100               	movlb	0	; () banked
 13157  0142DA  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 13158  0142DC  0E80               	movlw	128
 13159  0142DE  0100               	movlb	0	; () banked
 13160  0142E0  216B               	addwfc	(??___flge+3)& (0+255),w,b
 13161  0142E2  0100               	movlb	0	; () banked
 13162  0142E4  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 13163  0142E6                     l2726:
 13164                           
 13165                           ; BSR set to: 0
 13166  0142E6  0E00               	movlw	0
 13167  0142E8  0100               	movlb	0	; () banked
 13168  0142EA  1B60               	xorwf	___flge@ff1& (0+255),f,b
 13169  0142EC  0E00               	movlw	0
 13170  0142EE  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 13171  0142F0  0E00               	movlw	0
 13172  0142F2  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 13173  0142F4  0E80               	movlw	128
 13174  0142F6  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 13175  0142F8  0E00               	movlw	0
 13176  0142FA  0100               	movlb	0	; () banked
 13177  0142FC  1B64               	xorwf	___flge@ff2& (0+255),f,b
 13178  0142FE  0E00               	movlw	0
 13179  014300  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 13180  014302  0E00               	movlw	0
 13181  014304  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 13182  014306  0E80               	movlw	128
 13183  014308  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 13184  01430A  0100               	movlb	0	; () banked
 13185  01430C  5164               	movf	___flge@ff2& (0+255),w,b
 13186  01430E  0100               	movlb	0	; () banked
 13187  014310  5D60               	subwf	___flge@ff1& (0+255),w,b
 13188  014312  0100               	movlb	0	; () banked
 13189  014314  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 13190  014316  0100               	movlb	0	; () banked
 13191  014318  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 13192  01431A  0100               	movlb	0	; () banked
 13193  01431C  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 13194  01431E  0100               	movlb	0	; () banked
 13195  014320  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 13196  014322  0100               	movlb	0	; () banked
 13197  014324  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 13198  014326  0100               	movlb	0	; () banked
 13199  014328  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 13200  01432A  B0D8               	btfsc	status,0,c
 13201  01432C  D002               	goto	l13132
 13202                           
 13203                           ; BSR set to: 0
 13204  01432E  90D8               	bcf	status,0,c
 13205  014330  0012               	return	
 13206  014332                     l13132:
 13207                           
 13208                           ; BSR set to: 0
 13209                           
 13210                           ; BSR set to: 0
 13211  014332  80D8               	bsf	status,0,c
 13212                           
 13213                           ; BSR set to: 0
 13214  014334  0012               	return	
 13215  014336                     __end_of___flge:
 13216                           	opt stack 0
 13217                           tblptru	equ	0xFF8
 13218                           tblptrh	equ	0xFF7
 13219                           tblptrl	equ	0xFF6
 13220                           tablat	equ	0xFF5
 13221                           prodh	equ	0xFF4
 13222                           prodl	equ	0xFF3
 13223                           postinc0	equ	0xFEE
 13224                           wreg	equ	0xFE8
 13225                           postdec1	equ	0xFE5
 13226                           fsr1h	equ	0xFE2
 13227                           fsr1l	equ	0xFE1
 13228                           indf2	equ	0xFDF
 13229                           postinc2	equ	0xFDE
 13230                           postdec2	equ	0xFDD
 13231                           fsr2h	equ	0xFDA
 13232                           fsr2l	equ	0xFD9
 13233                           status	equ	0xFD8
 13234                           
 13235 ;; *************** function _irobot_stop_motion *****************
 13236 ;; Defined at:
 13237 ;;		line 298 in file "Library/iRobotSerial.c"
 13238 ;; Parameters:    Size  Location     Type
 13239 ;;  isScript        1    wreg     unsigned char 
 13240 ;; Auto vars:     Size  Location     Type
 13241 ;;  isScript        1   25[BANK0 ] unsigned char 
 13242 ;; Return value:  Size  Location     Type
 13243 ;;                  1    wreg      void 
 13244 ;; Registers used:
 13245 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13246 ;; Tracked objects:
 13247 ;;		On entry : 0/0
 13248 ;;		On exit  : 0/0
 13249 ;;		Unchanged: 0/0
 13250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13254 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13255 ;;Total ram usage:        1 bytes
 13256 ;; Hardware stack levels used:    1
 13257 ;; Hardware stack levels required when called:    9
 13258 ;; This function calls:
 13259 ;;		_irobot_move
 13260 ;; This function is called by:
 13261 ;;		_irobot_rotate
 13262 ;;		_move_and_rotate
 13263 ;;		_mode1
 13264 ;;		_mode2
 13265 ;;		_mode4
 13266 ;;		_irobot_move_to_simple
 13267 ;;		_irobot_rotate_to
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           	psect	text38
 13272  0176EE                     __ptext38:
 13273                           	opt stack 0
 13274  0176EE                     _irobot_stop_motion:
 13275                           	opt stack 20
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;incstack = 0
 13279                           ;irobot_stop_motion@isScript stored from wreg
 13280  0176EE  0100               	movlb	0	; () banked
 13281  0176F0  6F79               	movwf	irobot_stop_motion@isScript& (0+255),b
 13282                           
 13283                           ;iRobotSerial.c: 299: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
 13284  0176F2  0100               	movlb	0	; () banked
 13285  0176F4  5179               	movf	irobot_stop_motion@isScript& (0+255),w,b
 13286  0176F6  0100               	movlb	0	; () banked
 13287  0176F8  B4D8               	btfsc	status,2,c
 13288  0176FA  D00E               	goto	l2168
 13289                           
 13290                           ; BSR set to: 0
 13291  0176FC  0E00               	movlw	0
 13292  0176FE  0100               	movlb	0	; () banked
 13293  017700  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
 13294  017702  0E00               	movlw	0
 13295  017704  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
 13296  017706  0E00               	movlw	0
 13297  017708  0100               	movlb	0	; () banked
 13298  01770A  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
 13299  01770C  0E00               	movlw	0
 13300  01770E  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
 13301  017710  0E01               	movlw	1
 13302  017712  EC72  F0AE         	call	_irobot_move
 13303  017716  0012               	return	
 13304  017718                     l2168:
 13305  017718  0E00               	movlw	0
 13306  01771A  0100               	movlb	0	; () banked
 13307  01771C  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
 13308  01771E  0E00               	movlw	0
 13309  017720  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
 13310  017722  0E00               	movlw	0
 13311  017724  0100               	movlb	0	; () banked
 13312  017726  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
 13313  017728  0E00               	movlw	0
 13314  01772A  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
 13315  01772C  0E00               	movlw	0
 13316  01772E  EC72  F0AE         	call	_irobot_move
 13317  017732  0012               	return	
 13318  017734                     __end_of_irobot_stop_motion:
 13319                           	opt stack 0
 13320                           tblptru	equ	0xFF8
 13321                           tblptrh	equ	0xFF7
 13322                           tblptrl	equ	0xFF6
 13323                           tablat	equ	0xFF5
 13324                           prodh	equ	0xFF4
 13325                           prodl	equ	0xFF3
 13326                           postinc0	equ	0xFEE
 13327                           wreg	equ	0xFE8
 13328                           postdec1	equ	0xFE5
 13329                           fsr1h	equ	0xFE2
 13330                           fsr1l	equ	0xFE1
 13331                           indf2	equ	0xFDF
 13332                           postinc2	equ	0xFDE
 13333                           postdec2	equ	0xFDD
 13334                           fsr2h	equ	0xFDA
 13335                           fsr2l	equ	0xFD9
 13336                           status	equ	0xFD8
 13337                           
 13338 ;; *************** function _irobot_move *****************
 13339 ;; Defined at:
 13340 ;;		line 219 in file "Library/iRobotSerial.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;  isScript        1    wreg     unsigned char 
 13343 ;;  moveSpeed       2   16[BANK0 ] short 
 13344 ;;  moveTurnRadi    2   18[BANK0 ] short 
 13345 ;; Auto vars:     Size  Location     Type
 13346 ;;  isScript        1   24[BANK0 ] unsigned char 
 13347 ;; Return value:  Size  Location     Type
 13348 ;;                  1    wreg      void 
 13349 ;; Registers used:
 13350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13351 ;; Tracked objects:
 13352 ;;		On entry : 0/0
 13353 ;;		On exit  : 0/0
 13354 ;;		Unchanged: 0/0
 13355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13356 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13358 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13359 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;Total ram usage:        9 bytes
 13361 ;; Hardware stack levels used:    1
 13362 ;; Hardware stack levels required when called:    8
 13363 ;; This function calls:
 13364 ;;		_eusart_putch
 13365 ;;		_load_iRScriptStack
 13366 ;;		_twos_complement_of
 13367 ;; This function is called by:
 13368 ;;		_irobot_rotate
 13369 ;;		_irobot_stop_motion
 13370 ;;		_irobot_move_straight
 13371 ;;		_irobot_move_to_simple
 13372 ;; This function uses a non-reentrant model
 13373 ;;
 13374                           
 13375                           	psect	text39
 13376  015CE4                     __ptext39:
 13377                           	opt stack 0
 13378  015CE4                     _irobot_move:
 13379                           	opt stack 20
 13380                           
 13381                           ;incstack = 0
 13382                           ;irobot_move@isScript stored from wreg
 13383  015CE4  0100               	movlb	0	; () banked
 13384  015CE6  6F78               	movwf	irobot_move@isScript& (0+255),b
 13385                           
 13386                           ;iRobotSerial.c: 220: moveSpeed = twos_complement_of(moveSpeed);
 13387  015CE8  C070  F060         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
 13388  015CEC  C071  F061         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
 13389  015CF0  ECE0  F0BB         	call	_twos_complement_of	;wreg free
 13390  015CF4  C060  F070         	movff	?_twos_complement_of,irobot_move@moveSpeed
 13391  015CF8  C061  F071         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
 13392                           
 13393                           ;iRobotSerial.c: 221: moveTurnRadius = twos_complement_of(moveTurnRadius);
 13394  015CFC  C072  F060         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
 13395  015D00  C073  F061         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
 13396  015D04  ECE0  F0BB         	call	_twos_complement_of	;wreg free
 13397  015D08  C060  F072         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
 13398  015D0C  C061  F073         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
 13399                           
 13400                           ;iRobotSerial.c: 223: if (isScript) {
 13401  015D10  0100               	movlb	0	; () banked
 13402  015D12  5178               	movf	irobot_move@isScript& (0+255),w,b
 13403  015D14  0100               	movlb	0	; () banked
 13404  015D16  B4D8               	btfsc	status,2,c
 13405  015D18  D029               	goto	l2139
 13406                           
 13407                           ; BSR set to: 0
 13408                           ;iRobotSerial.c: 224: load_iRScriptStack(5, iR_DRIVE,
 13409                           ;iRobotSerial.c: 225: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
 13410                           ;iRobotSerial.c: 226: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
 13411  015D1A  0E00               	movlw	0
 13412  015D1C  0100               	movlb	0	; () banked
 13413  015D1E  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 13414  015D20  0E89               	movlw	137
 13415  015D22  6F60               	movwf	?_load_iRScriptStack& (0+255),b
 13416  015D24  C071  F074         	movff	irobot_move@moveSpeed+1,??_irobot_move
 13417  015D28  0100               	movlb	0	; () banked
 13418  015D2A  6B75               	clrf	(??_irobot_move+1)& (0+255),b
 13419  015D2C  BF74               	btfsc	??_irobot_move& (0+255),7,b
 13420  015D2E  6975               	setf	(??_irobot_move+1)& (0+255),b
 13421  015D30  0100               	movlb	0	; () banked
 13422  015D32  5174               	movf	??_irobot_move& (0+255),w,b
 13423  015D34  0100               	movlb	0	; () banked
 13424  015D36  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
 13425  015D38  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 13426  015D3A  0100               	movlb	0	; () banked
 13427  015D3C  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
 13428  015D3E  0100               	movlb	0	; () banked
 13429  015D40  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
 13430  015D42  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 13431  015D44  C073  F076         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
 13432  015D48  0100               	movlb	0	; () banked
 13433  015D4A  6B77               	clrf	(??_irobot_move+3)& (0+255),b
 13434  015D4C  BF76               	btfsc	(??_irobot_move+2)& (0+255),7,b
 13435  015D4E  6977               	setf	(??_irobot_move+3)& (0+255),b
 13436  015D50  0100               	movlb	0	; () banked
 13437  015D52  5176               	movf	(??_irobot_move+2)& (0+255),w,b
 13438  015D54  0100               	movlb	0	; () banked
 13439  015D56  6F66               	movwf	(?_load_iRScriptStack+6)& (0+255),b
 13440  015D58  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 13441  015D5A  0100               	movlb	0	; () banked
 13442  015D5C  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
 13443  015D5E  0100               	movlb	0	; () banked
 13444  015D60  6F68               	movwf	(?_load_iRScriptStack+8)& (0+255),b
 13445  015D62  6B69               	clrf	(?_load_iRScriptStack+9)& (0+255),b
 13446  015D64  0E05               	movlw	5
 13447  015D66  ECD7  F0B7         	call	_load_iRScriptStack
 13448                           
 13449                           ;iRobotSerial.c: 227: }
 13450  015D6A  0012               	return	
 13451  015D6C                     l2139:
 13452                           
 13453                           ;iRobotSerial.c: 228: else{
 13454                           ;iRobotSerial.c: 229: eusart_putch(iR_DRIVE);
 13455  015D6C  0E89               	movlw	137
 13456  015D6E  EC1F  F0C0         	call	_eusart_putch
 13457                           
 13458                           ;iRobotSerial.c: 230: eusart_putch((((moveSpeed)>>8) & 0xFF));
 13459  015D72  0100               	movlb	0	; () banked
 13460  015D74  5171               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
 13461  015D76  EC1F  F0C0         	call	_eusart_putch
 13462                           
 13463                           ;iRobotSerial.c: 231: eusart_putch(((moveSpeed) & 0xFF));
 13464  015D7A  0100               	movlb	0	; () banked
 13465  015D7C  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
 13466  015D7E  EC1F  F0C0         	call	_eusart_putch
 13467                           
 13468                           ;iRobotSerial.c: 232: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
 13469  015D82  0100               	movlb	0	; () banked
 13470  015D84  5173               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
 13471  015D86  EC1F  F0C0         	call	_eusart_putch
 13472                           
 13473                           ;iRobotSerial.c: 233: eusart_putch(((moveTurnRadius) & 0xFF));
 13474  015D8A  0100               	movlb	0	; () banked
 13475  015D8C  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
 13476  015D8E  EC1F  F0C0         	call	_eusart_putch
 13477  015D92  0012               	return	
 13478  015D94                     __end_of_irobot_move:
 13479                           	opt stack 0
 13480                           tblptru	equ	0xFF8
 13481                           tblptrh	equ	0xFF7
 13482                           tblptrl	equ	0xFF6
 13483                           tablat	equ	0xFF5
 13484                           prodh	equ	0xFF4
 13485                           prodl	equ	0xFF3
 13486                           postinc0	equ	0xFEE
 13487                           wreg	equ	0xFE8
 13488                           postdec1	equ	0xFE5
 13489                           fsr1h	equ	0xFE2
 13490                           fsr1l	equ	0xFE1
 13491                           indf2	equ	0xFDF
 13492                           postinc2	equ	0xFDE
 13493                           postdec2	equ	0xFDD
 13494                           fsr2h	equ	0xFDA
 13495                           fsr2l	equ	0xFD9
 13496                           status	equ	0xFD8
 13497                           
 13498 ;; *************** function _twos_complement_of *****************
 13499 ;; Defined at:
 13500 ;;		line 166 in file "Library/iRobotSerial.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;  complementVa    2    0[BANK0 ] short 
 13503 ;; Auto vars:     Size  Location     Type
 13504 ;;		None
 13505 ;; Return value:  Size  Location     Type
 13506 ;;                  2    0[BANK0 ] unsigned short 
 13507 ;; Registers used:
 13508 ;;		wreg, status,2, status,0
 13509 ;; Tracked objects:
 13510 ;;		On entry : 0/0
 13511 ;;		On exit  : 0/0
 13512 ;;		Unchanged: 0/0
 13513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13514 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13518 ;;Total ram usage:        2 bytes
 13519 ;; Hardware stack levels used:    1
 13520 ;; Hardware stack levels required when called:    7
 13521 ;; This function calls:
 13522 ;;		Nothing
 13523 ;; This function is called by:
 13524 ;;		_irobot_move
 13525 ;;		_irobot_angle_wait
 13526 ;;		_irobot_distance_wait
 13527 ;; This function uses a non-reentrant model
 13528 ;;
 13529                           
 13530                           	psect	text40
 13531  0177C0                     __ptext40:
 13532                           	opt stack 0
 13533  0177C0                     _twos_complement_of:
 13534                           	opt stack 20
 13535                           
 13536                           ;iRobotSerial.c: 167: if (complementValue < 0) {
 13537                           
 13538                           ;incstack = 0
 13539  0177C0  0100               	movlb	0	; () banked
 13540  0177C2  AF61               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
 13541  0177C4  D01A               	goto	l2110
 13542                           
 13543                           ; BSR set to: 0
 13544                           ;iRobotSerial.c: 168: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
 13545  0177C6  0100               	movlb	0	; () banked
 13546  0177C8  BF61               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
 13547  0177CA  D007               	goto	u11170
 13548  0177CC  0100               	movlb	0	; () banked
 13549  0177CE  5161               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
 13550  0177D0  E10A               	bnz	l2112
 13551  0177D2  0100               	movlb	0	; () banked
 13552  0177D4  0560               	decf	twos_complement_of@complementValue& (0+255),w,b
 13553  0177D6  B0D8               	btfsc	status,0,c
 13554  0177D8  D006               	goto	l2112
 13555  0177DA                     u11170:
 13556                           
 13557                           ; BSR set to: 0
 13558  0177DA  0100               	movlb	0	; () banked
 13559  0177DC  6D60               	negf	twos_complement_of@complementValue& (0+255),b
 13560  0177DE  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
 13561  0177E0  B0D8               	btfsc	status,0,c
 13562  0177E2  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
 13563  0177E4  D004               	goto	l2114
 13564  0177E6                     l2112:
 13565                           
 13566                           ; BSR set to: 0
 13567  0177E6  C060  F060         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
 13568  0177EA  C061  F061         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
 13569  0177EE                     l2114:
 13570                           
 13571                           ; BSR set to: 0
 13572                           ;iRobotSerial.c: 169: complementValue = ~complementValue;
 13573                           
 13574                           ; BSR set to: 0
 13575  0177EE  0100               	movlb	0	; () banked
 13576  0177F0  1F60               	comf	twos_complement_of@complementValue& (0+255),f,b
 13577  0177F2  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
 13578                           
 13579                           ;iRobotSerial.c: 170: complementValue += 1;
 13580  0177F4  0100               	movlb	0	; () banked
 13581  0177F6  4B60               	infsnz	twos_complement_of@complementValue& (0+255),f,b
 13582  0177F8  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
 13583  0177FA                     l2110:
 13584                           
 13585                           ; BSR set to: 0
 13586                           ;iRobotSerial.c: 171: }
 13587                           ;iRobotSerial.c: 172: return complementValue;
 13588                           
 13589                           ; BSR set to: 0
 13590  0177FA  C060  F060         	movff	twos_complement_of@complementValue,?_twos_complement_of
 13591  0177FE  C061  F061         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
 13592  017802  0012               	return	
 13593  017804                     __end_of_twos_complement_of:
 13594                           	opt stack 0
 13595                           tblptru	equ	0xFF8
 13596                           tblptrh	equ	0xFF7
 13597                           tblptrl	equ	0xFF6
 13598                           tablat	equ	0xFF5
 13599                           prodh	equ	0xFF4
 13600                           prodl	equ	0xFF3
 13601                           postinc0	equ	0xFEE
 13602                           wreg	equ	0xFE8
 13603                           postdec1	equ	0xFE5
 13604                           fsr1h	equ	0xFE2
 13605                           fsr1l	equ	0xFE1
 13606                           indf2	equ	0xFDF
 13607                           postinc2	equ	0xFDE
 13608                           postdec2	equ	0xFDD
 13609                           fsr2h	equ	0xFDA
 13610                           fsr2l	equ	0xFD9
 13611                           status	equ	0xFD8
 13612                           
 13613 ;; *************** function _irobot_song_play *****************
 13614 ;; Defined at:
 13615 ;;		line 273 in file "Library/iRobotSerial.c"
 13616 ;; Parameters:    Size  Location     Type
 13617 ;;  songNumber      1    wreg     unsigned char 
 13618 ;; Auto vars:     Size  Location     Type
 13619 ;;  songNumber      1    1[BANK0 ] unsigned char 
 13620 ;; Return value:  Size  Location     Type
 13621 ;;                  1    wreg      void 
 13622 ;; Registers used:
 13623 ;;		wreg, status,2, cstack
 13624 ;; Tracked objects:
 13625 ;;		On entry : 0/0
 13626 ;;		On exit  : 0/0
 13627 ;;		Unchanged: 0/0
 13628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13632 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13633 ;;Total ram usage:        1 bytes
 13634 ;; Hardware stack levels used:    1
 13635 ;; Hardware stack levels required when called:    8
 13636 ;; This function calls:
 13637 ;;		_eusart_putch
 13638 ;; This function is called by:
 13639 ;;		_mode1
 13640 ;;		_mode2
 13641 ;;		_mode4
 13642 ;; This function uses a non-reentrant model
 13643 ;;
 13644                           
 13645                           	psect	text41
 13646  017FA0                     __ptext41:
 13647                           	opt stack 0
 13648  017FA0                     _irobot_song_play:
 13649                           	opt stack 21
 13650                           
 13651                           ; BSR set to: 0
 13652                           ;incstack = 0
 13653                           ;irobot_song_play@songNumber stored from wreg
 13654  017FA0  0100               	movlb	0	; () banked
 13655  017FA2  6F61               	movwf	irobot_song_play@songNumber& (0+255),b
 13656                           
 13657                           ;iRobotSerial.c: 274: eusart_putch(iR_SONG_PLAY);
 13658  017FA4  0E8D               	movlw	141
 13659  017FA6  EC1F  F0C0         	call	_eusart_putch
 13660                           
 13661                           ;iRobotSerial.c: 275: eusart_putch(songNumber);
 13662  017FAA  0100               	movlb	0	; () banked
 13663  017FAC  5161               	movf	irobot_song_play@songNumber& (0+255),w,b
 13664  017FAE  EC1F  F0C0         	call	_eusart_putch
 13665  017FB2  0012               	return		;funcret
 13666  017FB4                     __end_of_irobot_song_play:
 13667                           	opt stack 0
 13668                           tblptru	equ	0xFF8
 13669                           tblptrh	equ	0xFF7
 13670                           tblptrl	equ	0xFF6
 13671                           tablat	equ	0xFF5
 13672                           prodh	equ	0xFF4
 13673                           prodl	equ	0xFF3
 13674                           postinc0	equ	0xFEE
 13675                           wreg	equ	0xFE8
 13676                           postdec1	equ	0xFE5
 13677                           fsr1h	equ	0xFE2
 13678                           fsr1l	equ	0xFE1
 13679                           indf2	equ	0xFDF
 13680                           postinc2	equ	0xFDE
 13681                           postdec2	equ	0xFDD
 13682                           fsr2h	equ	0xFDA
 13683                           fsr2l	equ	0xFD9
 13684                           status	equ	0xFD8
 13685                           
 13686 ;; *************** function _Motor_Speed *****************
 13687 ;; Defined at:
 13688 ;;		line 117 in file "Library/Motor.c"
 13689 ;; Parameters:    Size  Location     Type
 13690 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 13691 ;;		 -> Stepper(6), 
 13692 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 13693 ;; Auto vars:     Size  Location     Type
 13694 ;;		None
 13695 ;; Return value:  Size  Location     Type
 13696 ;;                  1    wreg      unsigned char 
 13697 ;; Registers used:
 13698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13699 ;; Tracked objects:
 13700 ;;		On entry : 0/0
 13701 ;;		On exit  : 0/0
 13702 ;;		Unchanged: 0/0
 13703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13704 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13707 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13708 ;;Total ram usage:        4 bytes
 13709 ;; Hardware stack levels used:    1
 13710 ;; Hardware stack levels required when called:    9
 13711 ;; This function calls:
 13712 ;;		_Timer0_Init
 13713 ;; This function is called by:
 13714 ;;		_mode1
 13715 ;;		_mode4
 13716 ;; This function uses a non-reentrant model
 13717 ;;
 13718                           
 13719                           	psect	text42
 13720  017C5A                     __ptext42:
 13721                           	opt stack 0
 13722  017C5A                     _Motor_Speed:
 13723                           	opt stack 20
 13724                           
 13725                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 13726                           
 13727                           ;incstack = 0
 13728  017C5A  0100               	movlb	0	; () banked
 13729  017C5C  EE20 F002          	lfsr	2,2
 13730  017C60  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
 13731  017C62  26D9               	addwf	fsr2l,f,c
 13732  017C64  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 13733  017C66  22DA               	addwfc	fsr2h,f,c
 13734  017C68  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 13735  017C6C  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 13736                           
 13737                           ; BSR set to: 0
 13738                           ;Motor.c: 120: Timer0_Init(pFrequency);
 13739  017C70  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 13740  017C74  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 13741  017C78  0100               	movlb	0	; () banked
 13742  017C7A  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 13743  017C7C  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 13744  017C7E  EC4E  F0A5         	call	_Timer0_Init	;wreg free
 13745  017C82  0012               	return	
 13746  017C84                     __end_of_Motor_Speed:
 13747                           	opt stack 0
 13748                           tblptru	equ	0xFF8
 13749                           tblptrh	equ	0xFF7
 13750                           tblptrl	equ	0xFF6
 13751                           tablat	equ	0xFF5
 13752                           prodh	equ	0xFF4
 13753                           prodl	equ	0xFF3
 13754                           postinc0	equ	0xFEE
 13755                           wreg	equ	0xFE8
 13756                           postdec1	equ	0xFE5
 13757                           fsr1h	equ	0xFE2
 13758                           fsr1l	equ	0xFE1
 13759                           indf2	equ	0xFDF
 13760                           postinc2	equ	0xFDE
 13761                           postdec2	equ	0xFDD
 13762                           fsr2h	equ	0xFDA
 13763                           fsr2l	equ	0xFD9
 13764                           status	equ	0xFD8
 13765                           
 13766 ;; *************** function _Motor_Move *****************
 13767 ;; Defined at:
 13768 ;;		line 51 in file "Library/Motor.c"
 13769 ;; Parameters:    Size  Location     Type
 13770 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 13771 ;;		 -> Stepper(6), 
 13772 ;;  pDelta          2    5[BANK0 ] short 
 13773 ;; Auto vars:     Size  Location     Type
 13774 ;;		None
 13775 ;; Return value:  Size  Location     Type
 13776 ;;                  1    wreg      unsigned char 
 13777 ;; Registers used:
 13778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13779 ;; Tracked objects:
 13780 ;;		On entry : 0/0
 13781 ;;		On exit  : 0/0
 13782 ;;		Unchanged: 0/0
 13783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13784 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13786 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13787 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13788 ;;Total ram usage:        6 bytes
 13789 ;; Hardware stack levels used:    1
 13790 ;; Hardware stack levels required when called:    8
 13791 ;; This function calls:
 13792 ;;		_Timer0_Start
 13793 ;; This function is called by:
 13794 ;;		_mode1
 13795 ;;		_mode4
 13796 ;; This function uses a non-reentrant model
 13797 ;;
 13798                           
 13799                           	psect	text43
 13800  0179F6                     __ptext43:
 13801                           	opt stack 0
 13802  0179F6                     _Motor_Move:
 13803                           	opt stack 21
 13804                           
 13805                           ;Motor.c: 54: lMotor = pMotor;
 13806                           
 13807                           ;incstack = 0
 13808  0179F6  C063  F0EA         	movff	Motor_Move@pMotor,_lMotor
 13809  0179FA  C064  F0EB         	movff	Motor_Move@pMotor+1,_lMotor+1
 13810                           
 13811                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 13812  0179FE  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 13813  017A02  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 13814  017A06  50DE               	movf	postinc2,w,c
 13815  017A08  10DE               	iorwf	postinc2,w,c
 13816  017A0A  A4D8               	btfss	status,2,c
 13817  017A0C  0012               	return	
 13818                           
 13819                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 13820                           
 13821                           ;Motor.c: 59: return 0;
 13822                           ;	Return value of _Motor_Move is never used
 13823  017A0E  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 13824  017A12  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 13825  017A16  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
 13826  017A1A  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 13827                           
 13828                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 13829  017A1E  C317  F060         	movff	_lStepFunction,Timer0_Start@pFunction
 13830  017A22  C318  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 13831  017A26  C319  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 13832  017A2A  EC6B  F0BE         	call	_Timer0_Start	;wreg free
 13833  017A2E  0012               	return	
 13834  017A30                     __end_of_Motor_Move:
 13835                           	opt stack 0
 13836                           tblptru	equ	0xFF8
 13837                           tblptrh	equ	0xFF7
 13838                           tblptrl	equ	0xFF6
 13839                           tablat	equ	0xFF5
 13840                           prodh	equ	0xFF4
 13841                           prodl	equ	0xFF3
 13842                           postinc0	equ	0xFEE
 13843                           wreg	equ	0xFE8
 13844                           postdec1	equ	0xFE5
 13845                           fsr1h	equ	0xFE2
 13846                           fsr1l	equ	0xFE1
 13847                           indf2	equ	0xFDF
 13848                           postinc2	equ	0xFDE
 13849                           postdec2	equ	0xFDD
 13850                           fsr2h	equ	0xFDA
 13851                           fsr2l	equ	0xFD9
 13852                           status	equ	0xFD8
 13853                           
 13854 ;; *************** function _Timer0_Start *****************
 13855 ;; Defined at:
 13856 ;;		line 75 in file "Library/Timer0.c"
 13857 ;; Parameters:    Size  Location     Type
 13858 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 13859 ;;		 -> Absolute function(1), Motor_Step(1), 
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;		None
 13862 ;; Return value:  Size  Location     Type
 13863 ;;                  1    wreg      void 
 13864 ;; Registers used:
 13865 ;;		wreg, status,2, status,0
 13866 ;; Tracked objects:
 13867 ;;		On entry : 0/0
 13868 ;;		On exit  : 0/0
 13869 ;;		Unchanged: 0/0
 13870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13871 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;Total ram usage:        3 bytes
 13876 ;; Hardware stack levels used:    1
 13877 ;; Hardware stack levels required when called:    7
 13878 ;; This function calls:
 13879 ;;		Nothing
 13880 ;; This function is called by:
 13881 ;;		_Motor_Move
 13882 ;; This function uses a non-reentrant model
 13883 ;;
 13884                           
 13885                           	psect	text44
 13886  017CD6                     __ptext44:
 13887                           	opt stack 0
 13888  017CD6                     _Timer0_Start:
 13889                           	opt stack 21
 13890                           
 13891                           ;Timer0.c: 77: gISR = pFunction;
 13892                           
 13893                           ;incstack = 0
 13894  017CD6  C060  F314         	movff	Timer0_Start@pFunction,_gISR
 13895  017CDA  C061  F315         	movff	Timer0_Start@pFunction+1,_gISR+1
 13896  017CDE  C062  F316         	movff	Timer0_Start@pFunction+2,_gISR+2
 13897                           
 13898                           ;Timer0.c: 78: TMR0 = COUNTER;
 13899  017CE2  C02F  FFD6         	movff	_COUNTER,4054	;volatile
 13900  017CE6  C030  FFD7         	movff	_COUNTER+1,4055	;volatile
 13901                           
 13902                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 13903  017CEA  50D5               	movf	4053,w,c	;volatile
 13904  017CEC  0100               	movlb	0	; () banked
 13905  017CEE  19F1               	xorwf	_INDEX& (0+255),w,b
 13906  017CF0  0BF8               	andlw	-8
 13907  017CF2  19F1               	xorwf	_INDEX& (0+255),w,b
 13908  017CF4  6ED5               	movwf	4053,c	;volatile
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 13912  017CF6  94F2               	bcf	intcon,2,c	;volatile
 13913                           
 13914                           ; BSR set to: 0
 13915                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 13916  017CF8  8AF2               	bsf	intcon,5,c	;volatile
 13917                           
 13918                           ; BSR set to: 0
 13919  017CFA  0012               	return		;funcret
 13920  017CFC                     __end_of_Timer0_Start:
 13921                           	opt stack 0
 13922                           tblptru	equ	0xFF8
 13923                           tblptrh	equ	0xFF7
 13924                           tblptrl	equ	0xFF6
 13925                           tablat	equ	0xFF5
 13926                           prodh	equ	0xFF4
 13927                           prodl	equ	0xFF3
 13928                           intcon	equ	0xFF2
 13929                           postinc0	equ	0xFEE
 13930                           wreg	equ	0xFE8
 13931                           postdec1	equ	0xFE5
 13932                           fsr1h	equ	0xFE2
 13933                           fsr1l	equ	0xFE1
 13934                           indf2	equ	0xFDF
 13935                           postinc2	equ	0xFDE
 13936                           postdec2	equ	0xFDD
 13937                           fsr2h	equ	0xFDA
 13938                           fsr2l	equ	0xFD9
 13939                           status	equ	0xFD8
 13940                           
 13941 ;; *************** function _HMI_Render *****************
 13942 ;; Defined at:
 13943 ;;		line 138 in file "HMI.c"
 13944 ;; Parameters:    Size  Location     Type
 13945 ;;		None
 13946 ;; Auto vars:     Size  Location     Type
 13947 ;;  a               2    8[BANK0 ] unsigned short 
 13948 ;; Return value:  Size  Location     Type
 13949 ;;                  1    wreg      void 
 13950 ;; Registers used:
 13951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13952 ;; Tracked objects:
 13953 ;;		On entry : 0/0
 13954 ;;		On exit  : 0/0
 13955 ;;		Unchanged: 0/0
 13956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13958 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13960 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13961 ;;Total ram usage:        2 bytes
 13962 ;; Hardware stack levels used:    1
 13963 ;; Hardware stack levels required when called:    9
 13964 ;; This function calls:
 13965 ;;		_OutSeg
 13966 ;; This function is called by:
 13967 ;;		_mode1
 13968 ;;		_mode4
 13969 ;; This function uses a non-reentrant model
 13970 ;;
 13971                           
 13972                           	psect	text45
 13973  0178C4                     __ptext45:
 13974                           	opt stack 0
 13975  0178C4                     _HMI_Render:
 13976                           	opt stack 20
 13977                           
 13978                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 13979                           
 13980                           ; BSR set to: 0
 13981                           ;incstack = 0
 13982  0178C4  0E00               	movlw	0
 13983  0178C6  0100               	movlb	0	; () banked
 13984  0178C8  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 13985  0178CA  0E00               	movlw	0
 13986  0178CC  6F68               	movwf	HMI_Render@a& (0+255),b
 13987  0178CE                     l15924:
 13988                           
 13989                           ; BSR set to: 0
 13990  0178CE  0100               	movlb	0	; () banked
 13991  0178D0  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 13992  0178D2  E116               	bnz	l1158
 13993  0178D4  0E08               	movlw	8
 13994  0178D6  0100               	movlb	0	; () banked
 13995  0178D8  5D68               	subwf	HMI_Render@a& (0+255),w,b
 13996  0178DA  B0D8               	btfsc	status,0,c
 13997  0178DC  0012               	return	
 13998                           
 13999                           ; BSR set to: 0
 14000                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 14001                           
 14002                           ; BSR set to: 0
 14003                           
 14004                           ; BSR set to: 0
 14005  0178DE  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 14006  0178E2  0E3F               	movlw	low _HMIBoard
 14007  0178E4  0100               	movlb	0	; () banked
 14008  0178E6  2568               	addwf	HMI_Render@a& (0+255),w,b
 14009  0178E8  6ED9               	movwf	fsr2l,c
 14010  0178EA  0E03               	movlw	high _HMIBoard
 14011  0178EC  0100               	movlb	0	; () banked
 14012  0178EE  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 14013  0178F0  6EDA               	movwf	fsr2h,c
 14014  0178F2  50DF               	movf	indf2,w,c
 14015  0178F4  EC17  F0B5         	call	_OutSeg
 14016  0178F8  0100               	movlb	0	; () banked
 14017  0178FA  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 14018  0178FC  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 14019  0178FE  D7E7               	goto	l15924
 14020  017900                     l1158:
 14021                           
 14022                           ; BSR set to: 0
 14023  017900  0012               	return		;funcret
 14024  017902                     __end_of_HMI_Render:
 14025                           	opt stack 0
 14026                           tblptru	equ	0xFF8
 14027                           tblptrh	equ	0xFF7
 14028                           tblptrl	equ	0xFF6
 14029                           tablat	equ	0xFF5
 14030                           prodh	equ	0xFF4
 14031                           prodl	equ	0xFF3
 14032                           intcon	equ	0xFF2
 14033                           postinc0	equ	0xFEE
 14034                           wreg	equ	0xFE8
 14035                           postdec1	equ	0xFE5
 14036                           fsr1h	equ	0xFE2
 14037                           fsr1l	equ	0xFE1
 14038                           indf2	equ	0xFDF
 14039                           postinc2	equ	0xFDE
 14040                           postdec2	equ	0xFDD
 14041                           fsr2h	equ	0xFDA
 14042                           fsr2l	equ	0xFD9
 14043                           status	equ	0xFD8
 14044                           
 14045 ;; *************** function _OutSeg *****************
 14046 ;; Defined at:
 14047 ;;		line 54 in file "HMI.c"
 14048 ;; Parameters:    Size  Location     Type
 14049 ;;  pInput          1    wreg     unsigned char 
 14050 ;;  pSegment        1    3[BANK0 ] unsigned char 
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;  pInput          1    6[BANK0 ] unsigned char 
 14053 ;;  out             1    7[BANK0 ] volatile unsigned char 
 14054 ;; Return value:  Size  Location     Type
 14055 ;;                  1    wreg      void 
 14056 ;; Registers used:
 14057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14058 ;; Tracked objects:
 14059 ;;		On entry : 0/0
 14060 ;;		On exit  : 0/0
 14061 ;;		Unchanged: 0/0
 14062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14063 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14064 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14065 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14066 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14067 ;;Total ram usage:        5 bytes
 14068 ;; Hardware stack levels used:    1
 14069 ;; Hardware stack levels required when called:    8
 14070 ;; This function calls:
 14071 ;;		_SPI_Send
 14072 ;; This function is called by:
 14073 ;;		_HMI_Render
 14074 ;;		_HMI_GRender
 14075 ;; This function uses a non-reentrant model
 14076 ;;
 14077                           
 14078                           	psect	text46
 14079  016A2E                     __ptext46:
 14080                           	opt stack 0
 14081  016A2E                     _OutSeg:
 14082                           	opt stack 20
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;incstack = 0
 14086                           ;OutSeg@pInput stored from wreg
 14087  016A2E  0100               	movlb	0	; () banked
 14088  016A30  6F66               	movwf	OutSeg@pInput& (0+255),b
 14089                           
 14090                           ;HMI.c: 58: static UINT8 cur;
 14091                           ;HMI.c: 59: volatile UINT8 out;
 14092                           ;HMI.c: 60: static UINT8 segset;
 14093                           ;HMI.c: 61: static UINT8 a;
 14094                           ;HMI.c: 83: if (pSegment <= 8)
 14095  016A32  0E09               	movlw	9
 14096  016A34  0100               	movlb	0	; () banked
 14097  016A36  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 14098  016A38  0012               	return	
 14099                           
 14100                           ; BSR set to: 0
 14101                           ;HMI.c: 84: {
 14102                           ;HMI.c: 85: cur = pInput;
 14103  016A3A  C066  F03F         	movff	OutSeg@pInput,OutSeg@cur
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 14107  016A3E  0E00               	movlw	0
 14108  016A40  6E3D               	movwf	OutSeg@a,c
 14109  016A42                     l15310:
 14110                           
 14111                           ; BSR set to: 0
 14112  016A42  0E07               	movlw	7
 14113  016A44  643D               	cpfsgt	OutSeg@a,c
 14114  016A46  D001               	goto	l1146
 14115  016A48  D027               	goto	u12710
 14116  016A4A                     l1146:
 14117                           
 14118                           ;HMI.c: 87: {
 14119                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 14120                           
 14121                           ; BSR set to: 0
 14122  016A4A  C03F  F064         	movff	OutSeg@cur,??_OutSeg
 14123  016A4E  0E01               	movlw	1
 14124  016A50  0100               	movlb	0	; () banked
 14125  016A52  1764               	andwf	??_OutSeg& (0+255),f,b
 14126  016A54  0E06               	movlw	6
 14127  016A56  0100               	movlb	0	; () banked
 14128  016A58  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 14129  016A5A                     u12705:
 14130  016A5A  0100               	movlb	0	; () banked
 14131  016A5C  90D8               	bcf	status,0,c
 14132  016A5E  3764               	rlcf	??_OutSeg& (0+255),f,b
 14133  016A60  0100               	movlb	0	; () banked
 14134  016A62  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 14135  016A64  D7FA               	goto	u12705
 14136  016A66  0100               	movlb	0	; () banked
 14137  016A68  5164               	movf	??_OutSeg& (0+255),w,b
 14138  016A6A  6E3E               	movwf	OutSeg@segset,c
 14139                           
 14140                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 14141  016A6C  0100               	movlb	0	; () banked
 14142  016A6E  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 14143  016A70  42E8               	rrncf	wreg,f,c
 14144  016A72  0BF8               	andlw	248
 14145  016A74  103D               	iorwf	OutSeg@a,w,c
 14146  016A76  103E               	iorwf	OutSeg@segset,w,c
 14147  016A78  0100               	movlb	0	; () banked
 14148  016A7A  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 14149                           
 14150                           ;HMI.c: 90: cur >>= 1;
 14151  016A7C  90D8               	bcf	status,0,c
 14152  016A7E  323F               	rrcf	OutSeg@cur,f,c
 14153                           
 14154                           ; BSR set to: 0
 14155                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 14156  016A80  0E79               	movlw	low _SPI1
 14157  016A82  0100               	movlb	0	; () banked
 14158  016A84  6F60               	movwf	SPI_Send@pInput& (0+255),b
 14159  016A86  0E03               	movlw	high _SPI1
 14160  016A88  0100               	movlb	0	; () banked
 14161  016A8A  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 14162  016A8C  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 14163  016A90  EC6B  F0B7         	call	_SPI_Send	;wreg free
 14164  016A94  2A3D               	incf	OutSeg@a,f,c
 14165  016A96  D7D5               	goto	l15310
 14166  016A98                     u12710:
 14167                           
 14168                           ;HMI.c: 96: }
 14169                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 14170  016A98  0E79               	movlw	low _SPI1
 14171  016A9A  0100               	movlb	0	; () banked
 14172  016A9C  6F60               	movwf	SPI_Send@pInput& (0+255),b
 14173  016A9E  0E03               	movlw	high _SPI1
 14174  016AA0  0100               	movlb	0	; () banked
 14175  016AA2  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 14176  016AA4  0E00               	movlw	0
 14177  016AA6  0100               	movlb	0	; () banked
 14178  016AA8  6F62               	movwf	SPI_Send@pData& (0+255),b
 14179  016AAA  EC6B  F0B7         	call	_SPI_Send	;wreg free
 14180  016AAE  0012               	return	
 14181  016AB0                     __end_of_OutSeg:
 14182                           	opt stack 0
 14183                           tblptru	equ	0xFF8
 14184                           tblptrh	equ	0xFF7
 14185                           tblptrl	equ	0xFF6
 14186                           tablat	equ	0xFF5
 14187                           prodh	equ	0xFF4
 14188                           prodl	equ	0xFF3
 14189                           intcon	equ	0xFF2
 14190                           postinc0	equ	0xFEE
 14191                           wreg	equ	0xFE8
 14192                           postdec1	equ	0xFE5
 14193                           fsr1h	equ	0xFE2
 14194                           fsr1l	equ	0xFE1
 14195                           indf2	equ	0xFDF
 14196                           postinc2	equ	0xFDE
 14197                           postdec2	equ	0xFDD
 14198                           fsr2h	equ	0xFDA
 14199                           fsr2l	equ	0xFD9
 14200                           status	equ	0xFD8
 14201                           
 14202 ;; *************** function _Console_Render *****************
 14203 ;; Defined at:
 14204 ;;		line 377 in file "Library/Console.c"
 14205 ;; Parameters:    Size  Location     Type
 14206 ;;		None
 14207 ;; Auto vars:     Size  Location     Type
 14208 ;;  lCursor         4   38[BANK0 ] struct Point
 14209 ;;  y               1   43[BANK0 ] unsigned char 
 14210 ;;  x               1   42[BANK0 ] unsigned char 
 14211 ;;  temp            1   37[BANK0 ] unsigned char 
 14212 ;;  Temp            2    0        unsigned short 
 14213 ;; Return value:  Size  Location     Type
 14214 ;;                  1    wreg      void 
 14215 ;; Registers used:
 14216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14217 ;; Tracked objects:
 14218 ;;		On entry : 0/0
 14219 ;;		On exit  : 0/0
 14220 ;;		Unchanged: 0/0
 14221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14223 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14224 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14225 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14226 ;;Total ram usage:        9 bytes
 14227 ;; Hardware stack levels used:    1
 14228 ;; Hardware stack levels required when called:   11
 14229 ;; This function calls:
 14230 ;;		_Console_MakeField
 14231 ;;		_LCD_DrawField
 14232 ;;		_LCD_FillRectangle
 14233 ;; This function is called by:
 14234 ;;		_mode1
 14235 ;;		_mode2
 14236 ;;		_mode4
 14237 ;;		_main
 14238 ;; This function uses a non-reentrant model
 14239 ;;
 14240                           
 14241                           	psect	text47
 14242  013546                     __ptext47:
 14243                           	opt stack 0
 14244  013546                     _Console_Render:
 14245                           	opt stack 18
 14246                           
 14247                           ;Console.c: 379: Colour Temp;
 14248                           ;Console.c: 380: if (change)
 14249                           
 14250                           ;incstack = 0
 14251  013546  504E               	movf	_change,w,c
 14252  013548  B4D8               	btfsc	status,2,c
 14253  01354A  0012               	return	
 14254                           
 14255                           ;Console.c: 381: {
 14256                           ;Console.c: 382: UINT8 x, y, temp;
 14257                           ;Console.c: 383: Point lCursor = {6,6};
 14258  01354C  C3EC  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 14259  013550  C3ED  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 14260  013554  C3EE  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 14261  013558  C3EF  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 14262                           
 14263                           ;Console.c: 385: if (clearall)
 14264  01355C  0100               	movlb	0	; () banked
 14265  01355E  51F4               	movf	_clearall& (0+255),w,b
 14266  013560  B4D8               	btfsc	status,2,c
 14267  013562  D005               	goto	l1056
 14268                           
 14269                           ; BSR set to: 0
 14270                           ;Console.c: 386: {
 14271                           ;Console.c: 389: temp = lBufferY;
 14272  013564  C0F2  F085         	movff	_lBufferY,Console_Render@temp
 14273                           
 14274                           ; BSR set to: 0
 14275                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 14276  013568  0E0F               	movlw	15
 14277  01356A  0100               	movlb	0	; () banked
 14278  01356C  6FF2               	movwf	_lBufferY& (0+255),b
 14279  01356E                     l1056:
 14280                           
 14281                           ; BSR set to: 0
 14282                           ;Console.c: 391: }
 14283                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 14284  01356E  0E00               	movlw	0
 14285  013570  0100               	movlb	0	; () banked
 14286  013572  6F8B               	movwf	Console_Render@y& (0+255),b
 14287  013574  D0DF               	goto	l1057
 14288  013576                     
 14289                           ; BSR set to: 0
 14290                           ;Console.c: 394: {
 14291                           ;Console.c: 395: gForecolour = lCBuffer[y];
 14292                           
 14293                           ; BSR set to: 0
 14294  013576  0100               	movlb	0	; () banked
 14295  013578  518B               	movf	Console_Render@y& (0+255),w,b
 14296  01357A  0D02               	mullw	2
 14297  01357C  0E00               	movlw	low _lCBuffer
 14298  01357E  24F3               	addwf	prodl,w,c
 14299  013580  6ED9               	movwf	fsr2l,c
 14300  013582  0E04               	movlw	high _lCBuffer
 14301  013584  20F4               	addwfc	prodh,w,c
 14302  013586  6EDA               	movwf	fsr2h,c
 14303  013588  CFDE F3F8          	movff	postinc2,_gForecolour
 14304  01358C  CFDD F3F9          	movff	postdec2,_gForecolour+1
 14305                           
 14306                           ; BSR set to: 0
 14307                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 14308  013590  0E00               	movlw	0
 14309  013592  0100               	movlb	0	; () banked
 14310  013594  6F8A               	movwf	Console_Render@x& (0+255),b
 14311  013596                     l15870:
 14312                           
 14313                           ; BSR set to: 0
 14314  013596  0E13               	movlw	19
 14315  013598  0100               	movlb	0	; () banked
 14316  01359A  658A               	cpfsgt	Console_Render@x& (0+255),b
 14317  01359C  D001               	goto	l1059
 14318  01359E  D0BE               	goto	u13550
 14319  0135A0                     l1059:
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;Console.c: 397: {
 14323                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 14324                           
 14325                           ; BSR set to: 0
 14326  0135A0  0100               	movlb	0	; () banked
 14327  0135A2  518B               	movf	Console_Render@y& (0+255),w,b
 14328  0135A4  0D14               	mullw	20
 14329  0135A6  0EF0               	movlw	low _lBuffer
 14330  0135A8  0100               	movlb	0	; () banked
 14331  0135AA  6F83               	movwf	??_Console_Render& (0+255),b
 14332  0135AC  0E04               	movlw	high _lBuffer
 14333  0135AE  0100               	movlb	0	; () banked
 14334  0135B0  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 14335  0135B2  50F3               	movf	prodl,w,c
 14336  0135B4  0100               	movlb	0	; () banked
 14337  0135B6  2783               	addwf	??_Console_Render& (0+255),f,b
 14338  0135B8  50F4               	movf	prodh,w,c
 14339  0135BA  0100               	movlb	0	; () banked
 14340  0135BC  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 14341  0135BE  0100               	movlb	0	; () banked
 14342  0135C0  518A               	movf	Console_Render@x& (0+255),w,b
 14343  0135C2  0D01               	mullw	1
 14344  0135C4  50F3               	movf	prodl,w,c
 14345  0135C6  0100               	movlb	0	; () banked
 14346  0135C8  2583               	addwf	??_Console_Render& (0+255),w,b
 14347  0135CA  6ED9               	movwf	fsr2l,c
 14348  0135CC  50F4               	movf	prodh,w,c
 14349  0135CE  0100               	movlb	0	; () banked
 14350  0135D0  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 14351  0135D2  6EDA               	movwf	fsr2h,c
 14352  0135D4  AEDF               	btfss	indf2,7,c
 14353  0135D6  D09A               	goto	l1063
 14354                           
 14355                           ; BSR set to: 0
 14356                           ;Console.c: 399: {
 14357                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 14358  0135D8  0100               	movlb	0	; () banked
 14359  0135DA  518B               	movf	Console_Render@y& (0+255),w,b
 14360  0135DC  0D14               	mullw	20
 14361  0135DE  0EF0               	movlw	low _lBuffer
 14362  0135E0  0100               	movlb	0	; () banked
 14363  0135E2  6F83               	movwf	??_Console_Render& (0+255),b
 14364  0135E4  0E04               	movlw	high _lBuffer
 14365  0135E6  0100               	movlb	0	; () banked
 14366  0135E8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 14367  0135EA  50F3               	movf	prodl,w,c
 14368  0135EC  0100               	movlb	0	; () banked
 14369  0135EE  2783               	addwf	??_Console_Render& (0+255),f,b
 14370  0135F0  50F4               	movf	prodh,w,c
 14371  0135F2  0100               	movlb	0	; () banked
 14372  0135F4  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 14373  0135F6  0100               	movlb	0	; () banked
 14374  0135F8  518A               	movf	Console_Render@x& (0+255),w,b
 14375  0135FA  0D01               	mullw	1
 14376  0135FC  50F3               	movf	prodl,w,c
 14377  0135FE  0100               	movlb	0	; () banked
 14378  013600  2583               	addwf	??_Console_Render& (0+255),w,b
 14379  013602  6ED9               	movwf	fsr2l,c
 14380  013604  50F4               	movf	prodh,w,c
 14381  013606  0100               	movlb	0	; () banked
 14382  013608  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 14383  01360A  6EDA               	movwf	fsr2h,c
 14384  01360C  0E7F               	movlw	127
 14385  01360E  16DF               	andwf	indf2,f,c
 14386                           
 14387                           ;Console.c: 401: if (lBuffer[y][x])
 14388  013610  0100               	movlb	0	; () banked
 14389  013612  518B               	movf	Console_Render@y& (0+255),w,b
 14390  013614  0D14               	mullw	20
 14391  013616  0EF0               	movlw	low _lBuffer
 14392  013618  0100               	movlb	0	; () banked
 14393  01361A  6F83               	movwf	??_Console_Render& (0+255),b
 14394  01361C  0E04               	movlw	high _lBuffer
 14395  01361E  0100               	movlb	0	; () banked
 14396  013620  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 14397  013622  50F3               	movf	prodl,w,c
 14398  013624  0100               	movlb	0	; () banked
 14399  013626  2783               	addwf	??_Console_Render& (0+255),f,b
 14400  013628  50F4               	movf	prodh,w,c
 14401  01362A  0100               	movlb	0	; () banked
 14402  01362C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 14403  01362E  0100               	movlb	0	; () banked
 14404  013630  518A               	movf	Console_Render@x& (0+255),w,b
 14405  013632  0D01               	mullw	1
 14406  013634  50F3               	movf	prodl,w,c
 14407  013636  0100               	movlb	0	; () banked
 14408  013638  2583               	addwf	??_Console_Render& (0+255),w,b
 14409  01363A  6ED9               	movwf	fsr2l,c
 14410  01363C  50F4               	movf	prodh,w,c
 14411  01363E  0100               	movlb	0	; () banked
 14412  013640  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 14413  013642  6EDA               	movwf	fsr2h,c
 14414  013644  50DF               	movf	indf2,w,c
 14415  013646  B4D8               	btfsc	status,2,c
 14416  013648  D04A               	goto	l1062
 14417                           
 14418                           ; BSR set to: 0
 14419                           ;Console.c: 402: {
 14420                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 14421  01364A  C033  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 14422  01364E  C034  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 14423  013652  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 14424  013656  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 14425  01365A  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 14426  01365E  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 14427  013662  C3F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 14428  013666  C3F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 14429  01366A  C3F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 14430  01366E  C3F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 14431  013672  EC4B  F0B6         	call	_LCD_FillRectangle	;wreg free
 14432                           
 14433                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 14434  013676  0100               	movlb	0	; () banked
 14435  013678  518B               	movf	Console_Render@y& (0+255),w,b
 14436  01367A  0D14               	mullw	20
 14437  01367C  0EF0               	movlw	low _lBuffer
 14438  01367E  0100               	movlb	0	; () banked
 14439  013680  6F83               	movwf	??_Console_Render& (0+255),b
 14440  013682  0E04               	movlw	high _lBuffer
 14441  013684  0100               	movlb	0	; () banked
 14442  013686  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 14443  013688  50F3               	movf	prodl,w,c
 14444  01368A  0100               	movlb	0	; () banked
 14445  01368C  2783               	addwf	??_Console_Render& (0+255),f,b
 14446  01368E  50F4               	movf	prodh,w,c
 14447  013690  0100               	movlb	0	; () banked
 14448  013692  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 14449  013694  0100               	movlb	0	; () banked
 14450  013696  518A               	movf	Console_Render@x& (0+255),w,b
 14451  013698  0D01               	mullw	1
 14452  01369A  50F3               	movf	prodl,w,c
 14453  01369C  0100               	movlb	0	; () banked
 14454  01369E  2583               	addwf	??_Console_Render& (0+255),w,b
 14455  0136A0  6ED9               	movwf	fsr2l,c
 14456  0136A2  50F4               	movf	prodh,w,c
 14457  0136A4  0100               	movlb	0	; () banked
 14458  0136A6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 14459  0136A8  6EDA               	movwf	fsr2h,c
 14460  0136AA  50DF               	movf	indf2,w,c
 14461  0136AC  EC72  F0AB         	call	_Console_MakeField
 14462  0136B0  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 14463  0136B4  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 14464  0136B8  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 14465  0136BC  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 14466  0136C0  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 14467  0136C4  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 14468  0136C8  C3F4  F078         	movff	_gCharSize,LCD_DrawField@pSize
 14469  0136CC  C3F5  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 14470  0136D0  C3F6  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 14471  0136D4  C3F7  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 14472  0136D8  EC15  F0B1         	call	_LCD_DrawField	;wreg free
 14473                           
 14474                           ;Console.c: 405: }
 14475  0136DC  D017               	goto	l1063
 14476  0136DE                     l1062:
 14477                           
 14478                           ;Console.c: 406: else
 14479                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 14480  0136DE  0E00               	movlw	0
 14481  0136E0  0100               	movlb	0	; () banked
 14482  0136E2  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 14483  0136E4  0E00               	movlw	0
 14484  0136E6  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 14485  0136E8  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 14486  0136EC  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 14487  0136F0  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 14488  0136F4  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 14489  0136F8  C3F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 14490  0136FC  C3F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 14491  013700  C3F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 14492  013704  C3F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 14493  013708  EC4B  F0B6         	call	_LCD_FillRectangle	;wreg free
 14494  01370C                     l1063:
 14495                           
 14496                           ;Console.c: 408: }
 14497                           ;Console.c: 409: lCursor.x += (5 + 1);
 14498  01370C  0E06               	movlw	6
 14499  01370E  0100               	movlb	0	; () banked
 14500  013710  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 14501  013712  0E00               	movlw	0
 14502  013714  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 14503                           
 14504                           ; BSR set to: 0
 14505  013716  0100               	movlb	0	; () banked
 14506  013718  2B8A               	incf	Console_Render@x& (0+255),f,b
 14507  01371A  D73D               	goto	l15870
 14508  01371C                     u13550:
 14509                           
 14510                           ; BSR set to: 0
 14511                           ;Console.c: 410: }
 14512                           ;Console.c: 411: lCursor.y += (7 + 1);
 14513                           
 14514                           ; BSR set to: 0
 14515  01371C  0E08               	movlw	8
 14516  01371E  0100               	movlb	0	; () banked
 14517  013720  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 14518  013722  0E00               	movlw	0
 14519  013724  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 14520                           
 14521                           ; BSR set to: 0
 14522                           ;Console.c: 412: lCursor.x = 6;
 14523  013726  0E00               	movlw	0
 14524  013728  0100               	movlb	0	; () banked
 14525  01372A  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 14526  01372C  0E06               	movlw	6
 14527  01372E  6F86               	movwf	Console_Render@lCursor& (0+255),b
 14528                           
 14529                           ; BSR set to: 0
 14530  013730  0100               	movlb	0	; () banked
 14531  013732  2B8B               	incf	Console_Render@y& (0+255),f,b
 14532  013734                     l1057:
 14533                           
 14534                           ; BSR set to: 0
 14535                           
 14536                           ; BSR set to: 0
 14537  013734  0100               	movlb	0	; () banked
 14538  013736  518B               	movf	Console_Render@y& (0+255),w,b
 14539  013738  0100               	movlb	0	; () banked
 14540  01373A  5DF2               	subwf	_lBufferY& (0+255),w,b
 14541  01373C  B0D8               	btfsc	status,0,c
 14542  01373E  D71B               	goto	l1058
 14543                           
 14544                           ; BSR set to: 0
 14545                           ;Console.c: 413: }
 14546                           ;Console.c: 415: if (clearall)
 14547                           
 14548                           ; BSR set to: 0
 14549  013740  0100               	movlb	0	; () banked
 14550  013742  51F4               	movf	_clearall& (0+255),w,b
 14551  013744  B4D8               	btfsc	status,2,c
 14552  013746  0012               	return	
 14553                           
 14554                           ; BSR set to: 0
 14555                           ;Console.c: 416: {
 14556                           ;Console.c: 417: clearall = 0;
 14557  013748  0E00               	movlw	0
 14558  01374A  0100               	movlb	0	; () banked
 14559  01374C  6FF4               	movwf	_clearall& (0+255),b
 14560                           
 14561                           ; BSR set to: 0
 14562                           ;Console.c: 418: lBufferY = temp;
 14563  01374E  C085  F0F2         	movff	Console_Render@temp,_lBufferY
 14564                           
 14565                           ; BSR set to: 0
 14566  013752  0012               	return	
 14567  013754                     __end_of_Console_Render:
 14568                           	opt stack 0
 14569                           tblptru	equ	0xFF8
 14570                           tblptrh	equ	0xFF7
 14571                           tblptrl	equ	0xFF6
 14572                           tablat	equ	0xFF5
 14573                           prodh	equ	0xFF4
 14574                           prodl	equ	0xFF3
 14575                           intcon	equ	0xFF2
 14576                           postinc0	equ	0xFEE
 14577                           wreg	equ	0xFE8
 14578                           postdec1	equ	0xFE5
 14579                           fsr1h	equ	0xFE2
 14580                           fsr1l	equ	0xFE1
 14581                           indf2	equ	0xFDF
 14582                           postinc2	equ	0xFDE
 14583                           postdec2	equ	0xFDD
 14584                           fsr2h	equ	0xFDA
 14585                           fsr2l	equ	0xFD9
 14586                           status	equ	0xFD8
 14587                           
 14588 ;; *************** function _LCD_FillRectangle *****************
 14589 ;; Defined at:
 14590 ;;		line 318 in file "Library/LCD.c"
 14591 ;; Parameters:    Size  Location     Type
 14592 ;;  pColour         2    9[BANK0 ] unsigned short 
 14593 ;;  pPoint          4   11[BANK0 ] struct Point
 14594 ;;  pSize           4   15[BANK0 ] struct Point
 14595 ;; Auto vars:     Size  Location     Type
 14596 ;;  j               1   22[BANK0 ] unsigned char 
 14597 ;;  i               1   21[BANK0 ] unsigned char 
 14598 ;; Return value:  Size  Location     Type
 14599 ;;                  1    wreg      void 
 14600 ;; Registers used:
 14601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14602 ;; Tracked objects:
 14603 ;;		On entry : 0/0
 14604 ;;		On exit  : 0/0
 14605 ;;		Unchanged: 0/0
 14606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14607 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14608 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14609 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14610 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14611 ;;Total ram usage:       14 bytes
 14612 ;; Hardware stack levels used:    1
 14613 ;; Hardware stack levels required when called:   10
 14614 ;; This function calls:
 14615 ;;		_LCD_Word_Write
 14616 ;;		_Set_Addr_Window
 14617 ;; This function is called by:
 14618 ;;		_Console_Render
 14619 ;;		_Console_ClearLine
 14620 ;; This function uses a non-reentrant model
 14621 ;;
 14622                           
 14623                           	psect	text48
 14624  016C96                     __ptext48:
 14625                           	opt stack 0
 14626  016C96                     _LCD_FillRectangle:
 14627                           	opt stack 18
 14628                           
 14629                           ;LCD.c: 320: UINT8 i = 0x00;
 14630                           
 14631                           ;incstack = 0
 14632  016C96  0E00               	movlw	0
 14633  016C98  0100               	movlb	0	; () banked
 14634  016C9A  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 14635                           
 14636                           ;LCD.c: 321: UINT8 j = 0x00;
 14637  016C9C  0E00               	movlw	0
 14638  016C9E  0100               	movlb	0	; () banked
 14639  016CA0  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 14640                           
 14641                           ; BSR set to: 0
 14642                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 14643  016CA2  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 14644  016CA6  0100               	movlb	0	; () banked
 14645  016CA8  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 14646  016CAA  0100               	movlb	0	; () banked
 14647  016CAC  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 14648  016CAE  0100               	movlb	0	; () banked
 14649  016CB0  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 14650  016CB2  0100               	movlb	0	; () banked
 14651  016CB4  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 14652  016CB6  0100               	movlb	0	; () banked
 14653  016CB8  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 14654  016CBA  0100               	movlb	0	; () banked
 14655  016CBC  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 14656  016CBE  0100               	movlb	0	; () banked
 14657  016CC0  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 14658  016CC2  0100               	movlb	0	; () banked
 14659  016CC4  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 14660  016CC6  0100               	movlb	0	; () banked
 14661  016CC8  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 14662  016CCA  0100               	movlb	0	; () banked
 14663  016CCC  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 14664  016CCE  0100               	movlb	0	; () banked
 14665  016CD0  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 14666  016CD2  EC1F  F0AF         	call	_Set_Addr_Window
 14667                           
 14668                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 14669  016CD6  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 14670  016CDA                     l15180:
 14671  016CDA  0100               	movlb	0	; () banked
 14672  016CDC  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 14673  016CDE  0100               	movlb	0	; () banked
 14674  016CE0  B4D8               	btfsc	status,2,c
 14675  016CE2  0012               	return	
 14676                           
 14677                           ; BSR set to: 0
 14678                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 14679                           
 14680                           ; BSR set to: 0
 14681  016CE4  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 14682  016CE8                     l15184:
 14683                           
 14684                           ; BSR set to: 0
 14685  016CE8  0100               	movlb	0	; () banked
 14686  016CEA  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 14687  016CEC  0100               	movlb	0	; () banked
 14688  016CEE  B4D8               	btfsc	status,2,c
 14689  016CF0  D009               	goto	u12580
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;LCD.c: 333: LCD_Word_Write(pColour);
 14693                           
 14694                           ; BSR set to: 0
 14695                           
 14696                           ; BSR set to: 0
 14697  016CF2  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 14698  016CF6  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 14699  016CFA  ECDF  F0BE         	call	_LCD_Word_Write	;wreg free
 14700  016CFE  0100               	movlb	0	; () banked
 14701  016D00  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 14702  016D02  D7F2               	goto	l15184
 14703  016D04                     u12580:
 14704                           
 14705                           ; BSR set to: 0
 14706                           
 14707                           ; BSR set to: 0
 14708  016D04  0100               	movlb	0	; () banked
 14709  016D06  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 14710  016D08  D7E8               	goto	l15180
 14711  016D0A                     __end_of_LCD_FillRectangle:
 14712                           	opt stack 0
 14713                           tblptru	equ	0xFF8
 14714                           tblptrh	equ	0xFF7
 14715                           tblptrl	equ	0xFF6
 14716                           tablat	equ	0xFF5
 14717                           prodh	equ	0xFF4
 14718                           prodl	equ	0xFF3
 14719                           intcon	equ	0xFF2
 14720                           postinc0	equ	0xFEE
 14721                           wreg	equ	0xFE8
 14722                           postdec1	equ	0xFE5
 14723                           fsr1h	equ	0xFE2
 14724                           fsr1l	equ	0xFE1
 14725                           indf2	equ	0xFDF
 14726                           postinc2	equ	0xFDE
 14727                           postdec2	equ	0xFDD
 14728                           fsr2h	equ	0xFDA
 14729                           fsr2l	equ	0xFD9
 14730                           status	equ	0xFD8
 14731                           
 14732 ;; *************** function _LCD_DrawField *****************
 14733 ;; Defined at:
 14734 ;;		line 393 in file "Library/LCD.c"
 14735 ;; Parameters:    Size  Location     Type
 14736 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 14737 ;;		 -> Console_MakeField@Fill(70), 
 14738 ;;  pPoint          4   20[BANK0 ] struct Point
 14739 ;;  pSize           4   24[BANK0 ] struct Point
 14740 ;; Auto vars:     Size  Location     Type
 14741 ;;  count           2   30[BANK0 ] unsigned short 
 14742 ;;  i               1   34[BANK0 ] unsigned char 
 14743 ;;  ymax            1   33[BANK0 ] unsigned char 
 14744 ;;  xmax            1   32[BANK0 ] unsigned char 
 14745 ;; Return value:  Size  Location     Type
 14746 ;;                  1    wreg      void 
 14747 ;; Registers used:
 14748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14749 ;; Tracked objects:
 14750 ;;		On entry : 0/0
 14751 ;;		On exit  : 0/0
 14752 ;;		Unchanged: 0/0
 14753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14754 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14755 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14756 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14757 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14758 ;;Total ram usage:       17 bytes
 14759 ;; Hardware stack levels used:    1
 14760 ;; Hardware stack levels required when called:   10
 14761 ;; This function calls:
 14762 ;;		_LCD_Word_Write
 14763 ;;		_Set_Addr_Window
 14764 ;;		___wmul
 14765 ;; This function is called by:
 14766 ;;		_Console_Render
 14767 ;; This function uses a non-reentrant model
 14768 ;;
 14769                           
 14770                           	psect	text49
 14771  01622A                     __ptext49:
 14772                           	opt stack 0
 14773  01622A                     _LCD_DrawField:
 14774                           	opt stack 18
 14775                           
 14776                           ;LCD.c: 396: UINT8 i = 0x00;
 14777                           
 14778                           ; BSR set to: 0
 14779                           ;incstack = 0
 14780  01622A  0E00               	movlw	0
 14781  01622C  0100               	movlb	0	; () banked
 14782  01622E  6F82               	movwf	LCD_DrawField@i& (0+255),b
 14783                           
 14784                           ; BSR set to: 0
 14785                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 14786  016230  0100               	movlb	0	; () banked
 14787  016232  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 14788  016234  0100               	movlb	0	; () banked
 14789  016236  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 14790  016238  0100               	movlb	0	; () banked
 14791  01623A  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 14792                           
 14793                           ; BSR set to: 0
 14794                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 14795  01623C  0100               	movlb	0	; () banked
 14796  01623E  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 14797  016240  0100               	movlb	0	; () banked
 14798  016242  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 14799  016244  0100               	movlb	0	; () banked
 14800  016246  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 14801                           
 14802                           ; BSR set to: 0
 14803                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 14804  016248  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 14805  01624C  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 14806  016250  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 14807  016254  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 14808  016258  EC34  F0BD         	call	___wmul	;wreg free
 14809  01625C  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 14810  016260  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 14811                           
 14812                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 14813  016264  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 14814  016268  0100               	movlb	0	; () banked
 14815  01626A  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 14816  01626C  0100               	movlb	0	; () banked
 14817  01626E  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 14818  016270  0100               	movlb	0	; () banked
 14819  016272  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 14820  016274  0100               	movlb	0	; () banked
 14821  016276  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 14822  016278  0100               	movlb	0	; () banked
 14823  01627A  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 14824  01627C  EC1F  F0AF         	call	_Set_Addr_Window
 14825                           
 14826                           ;LCD.c: 403: for(i = 0; i < count; i++)
 14827  016280  0E00               	movlw	0
 14828  016282  0100               	movlb	0	; () banked
 14829  016284  6F82               	movwf	LCD_DrawField@i& (0+255),b
 14830  016286  D013               	goto	l183
 14831  016288                     
 14832                           ; BSR set to: 0
 14833                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 14834                           
 14835                           ; BSR set to: 0
 14836  016288  0100               	movlb	0	; () banked
 14837  01628A  5182               	movf	LCD_DrawField@i& (0+255),w,b
 14838  01628C  0D02               	mullw	2
 14839  01628E  50F3               	movf	prodl,w,c
 14840  016290  0100               	movlb	0	; () banked
 14841  016292  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 14842  016294  6ED9               	movwf	fsr2l,c
 14843  016296  50F4               	movf	prodh,w,c
 14844  016298  0100               	movlb	0	; () banked
 14845  01629A  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 14846  01629C  6EDA               	movwf	fsr2h,c
 14847  01629E  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 14848  0162A2  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 14849  0162A6  ECDF  F0BE         	call	_LCD_Word_Write	;wreg free
 14850  0162AA  0100               	movlb	0	; () banked
 14851  0162AC  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 14852  0162AE                     l183:
 14853                           
 14854                           ; BSR set to: 0
 14855                           
 14856                           ; BSR set to: 0
 14857  0162AE  0100               	movlb	0	; () banked
 14858  0162B0  5182               	movf	LCD_DrawField@i& (0+255),w,b
 14859  0162B2  0100               	movlb	0	; () banked
 14860  0162B4  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 14861  0162B6  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 14862  0162B8  0100               	movlb	0	; () banked
 14863  0162BA  517E               	movf	LCD_DrawField@count& (0+255),w,b
 14864  0162BC  0100               	movlb	0	; () banked
 14865  0162BE  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 14866  0162C0  0100               	movlb	0	; () banked
 14867  0162C2  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 14868  0162C4  0100               	movlb	0	; () banked
 14869  0162C6  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 14870  0162C8  B0D8               	btfsc	status,0,c
 14871  0162CA  0012               	return	
 14872  0162CC  D7DD               	goto	l184
 14873  0162CE                     __end_of_LCD_DrawField:
 14874                           	opt stack 0
 14875                           tblptru	equ	0xFF8
 14876                           tblptrh	equ	0xFF7
 14877                           tblptrl	equ	0xFF6
 14878                           tablat	equ	0xFF5
 14879                           prodh	equ	0xFF4
 14880                           prodl	equ	0xFF3
 14881                           intcon	equ	0xFF2
 14882                           postinc0	equ	0xFEE
 14883                           wreg	equ	0xFE8
 14884                           postdec1	equ	0xFE5
 14885                           fsr1h	equ	0xFE2
 14886                           fsr1l	equ	0xFE1
 14887                           indf2	equ	0xFDF
 14888                           postinc2	equ	0xFDE
 14889                           postdec2	equ	0xFDD
 14890                           fsr2h	equ	0xFDA
 14891                           fsr2l	equ	0xFD9
 14892                           status	equ	0xFD8
 14893                           
 14894 ;; *************** function ___wmul *****************
 14895 ;; Defined at:
 14896 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 14897 ;; Parameters:    Size  Location     Type
 14898 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14899 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14900 ;; Auto vars:     Size  Location     Type
 14901 ;;  product         2    4[BANK0 ] unsigned int 
 14902 ;; Return value:  Size  Location     Type
 14903 ;;                  2    0[BANK0 ] unsigned int 
 14904 ;; Registers used:
 14905 ;;		wreg, status,2, status,0, prodl, prodh
 14906 ;; Tracked objects:
 14907 ;;		On entry : 0/0
 14908 ;;		On exit  : 0/0
 14909 ;;		Unchanged: 0/0
 14910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14911 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14912 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14914 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14915 ;;Total ram usage:        6 bytes
 14916 ;; Hardware stack levels used:    1
 14917 ;; Hardware stack levels required when called:    7
 14918 ;; This function calls:
 14919 ;;		Nothing
 14920 ;; This function is called by:
 14921 ;;		_LCD_DrawField
 14922 ;;		_printf
 14923 ;; This function uses a non-reentrant model
 14924 ;;
 14925                           
 14926                           	psect	text50
 14927  017A68                     __ptext50:
 14928                           	opt stack 0
 14929  017A68                     ___wmul:
 14930                           	opt stack 22
 14931                           
 14932                           ; BSR set to: 0
 14933                           ;incstack = 0
 14934  017A68  0100               	movlb	0	; () banked
 14935  017A6A  5160               	movf	___wmul@multiplier& (0+255),w,b
 14936  017A6C  0100               	movlb	0	; () banked
 14937  017A6E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14938  017A70  CFF3 F064          	movff	prodl,___wmul@product
 14939  017A74  CFF4 F065          	movff	prodh,___wmul@product+1
 14940  017A78  0100               	movlb	0	; () banked
 14941  017A7A  5160               	movf	___wmul@multiplier& (0+255),w,b
 14942  017A7C  0100               	movlb	0	; () banked
 14943  017A7E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14944  017A80  50F3               	movf	prodl,w,c
 14945  017A82  0100               	movlb	0	; () banked
 14946  017A84  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14947  017A86  0100               	movlb	0	; () banked
 14948  017A88  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14949  017A8A  0100               	movlb	0	; () banked
 14950  017A8C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14951  017A8E  50F3               	movf	prodl,w,c
 14952  017A90  0100               	movlb	0	; () banked
 14953  017A92  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14954                           
 14955                           ; BSR set to: 0
 14956  017A94  C064  F060         	movff	___wmul@product,?___wmul
 14957  017A98  C065  F061         	movff	___wmul@product+1,?___wmul+1
 14958  017A9C  0012               	return	
 14959  017A9E                     __end_of___wmul:
 14960                           	opt stack 0
 14961                           tblptru	equ	0xFF8
 14962                           tblptrh	equ	0xFF7
 14963                           tblptrl	equ	0xFF6
 14964                           tablat	equ	0xFF5
 14965                           prodh	equ	0xFF4
 14966                           prodl	equ	0xFF3
 14967                           intcon	equ	0xFF2
 14968                           postinc0	equ	0xFEE
 14969                           wreg	equ	0xFE8
 14970                           postdec1	equ	0xFE5
 14971                           fsr1h	equ	0xFE2
 14972                           fsr1l	equ	0xFE1
 14973                           indf2	equ	0xFDF
 14974                           postinc2	equ	0xFDE
 14975                           postdec2	equ	0xFDD
 14976                           fsr2h	equ	0xFDA
 14977                           fsr2l	equ	0xFD9
 14978                           status	equ	0xFD8
 14979                           
 14980 ;; *************** function _Console_MakeField *****************
 14981 ;; Defined at:
 14982 ;;		line 435 in file "Library/Console.c"
 14983 ;; Parameters:    Size  Location     Type
 14984 ;;  pInput          1    wreg     unsigned char 
 14985 ;; Auto vars:     Size  Location     Type
 14986 ;;  pInput          1   11[BANK0 ] unsigned char 
 14987 ;;  y               1   17[BANK0 ] unsigned char 
 14988 ;;  x               1   16[BANK0 ] unsigned char 
 14989 ;;  Column          2   12[BANK0 ] PTR struct Byte
 14990 ;;		 -> Font5x7(480), 
 14991 ;;  Index           2    9[BANK0 ] unsigned short 
 14992 ;; Return value:  Size  Location     Type
 14993 ;;                  2    5[BANK0 ] PTR unsigned short 
 14994 ;; Registers used:
 14995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14996 ;; Tracked objects:
 14997 ;;		On entry : 0/0
 14998 ;;		On exit  : 0/0
 14999 ;;		Unchanged: 0/0
 15000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15001 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15002 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15004 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15005 ;;Total ram usage:       13 bytes
 15006 ;; Hardware stack levels used:    1
 15007 ;; Hardware stack levels required when called:    8
 15008 ;; This function calls:
 15009 ;;		_Byte_GetBit
 15010 ;; This function is called by:
 15011 ;;		_Console_Render
 15012 ;; This function uses a non-reentrant model
 15013 ;;
 15014                           
 15015                           	psect	text51
 15016  0156E4                     __ptext51:
 15017                           	opt stack 0
 15018  0156E4                     _Console_MakeField:
 15019                           	opt stack 20
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;incstack = 0
 15023                           ;Console_MakeField@pInput stored from wreg
 15024  0156E4  0100               	movlb	0	; () banked
 15025  0156E6  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 15026                           
 15027                           ;Console.c: 437: static Colour Fill[7][5];
 15028                           ;Console.c: 438: pInput -= 32;
 15029  0156E8  0E20               	movlw	32
 15030  0156EA  0100               	movlb	0	; () banked
 15031  0156EC  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 15032                           
 15033                           ; BSR set to: 0
 15034                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 15035  0156EE  0100               	movlb	0	; () banked
 15036  0156F0  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 15037  0156F2  0D05               	mullw	5
 15038  0156F4  CFF3 F069          	movff	prodl,Console_MakeField@Index
 15039  0156F8  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 15040                           
 15041                           ; BSR set to: 0
 15042                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 15043  0156FC  0E6B               	movlw	low _Font5x7
 15044  0156FE  0100               	movlb	0	; () banked
 15045  015700  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 15046  015702  0100               	movlb	0	; () banked
 15047  015704  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 15048  015706  0EFD               	movlw	high _Font5x7
 15049  015708  0100               	movlb	0	; () banked
 15050  01570A  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 15051  01570C  0100               	movlb	0	; () banked
 15052  01570E  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 15053                           
 15054                           ; BSR set to: 0
 15055                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 15056  015710  0E00               	movlw	0
 15057  015712  0100               	movlb	0	; () banked
 15058  015714  6F70               	movwf	Console_MakeField@x& (0+255),b
 15059  015716                     l15274:
 15060                           
 15061                           ; BSR set to: 0
 15062  015716  0E04               	movlw	4
 15063  015718  0100               	movlb	0	; () banked
 15064  01571A  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 15065  01571C  D001               	goto	l1077
 15066  01571E  D043               	goto	u12670
 15067  015720                     l1077:
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;Console.c: 444: {
 15071                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 15072                           
 15073                           ; BSR set to: 0
 15074  015720  0E00               	movlw	0
 15075  015722  0100               	movlb	0	; () banked
 15076  015724  6F71               	movwf	Console_MakeField@y& (0+255),b
 15077  015726                     l15280:
 15078                           
 15079                           ; BSR set to: 0
 15080  015726  0E06               	movlw	6
 15081  015728  0100               	movlb	0	; () banked
 15082  01572A  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 15083  01572C  D001               	goto	l1079
 15084  01572E  D035               	goto	u12660
 15085  015730                     l1079:
 15086                           
 15087                           ; BSR set to: 0
 15088                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 15089                           
 15090                           ; BSR set to: 0
 15091  015730  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 15092  015734  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 15093  015738  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 15094  01573C  EC6A  F0BD         	call	_Byte_GetBit	;wreg free
 15095  015740  0900               	iorlw	0
 15096  015742  A4D8               	btfss	status,2,c
 15097  015744  D005               	goto	l1082
 15098  015746  C033  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 15099  01574A  C034  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 15100  01574E  D004               	goto	l1084
 15101  015750                     l1082:
 15102  015750  C3F8  F06E         	movff	_gForecolour,_Console_MakeField$10974
 15103  015754  C3F9  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 15104  015758                     l1084:
 15105  015758  0100               	movlb	0	; () banked
 15106  01575A  5171               	movf	Console_MakeField@y& (0+255),w,b
 15107  01575C  0D0A               	mullw	10
 15108  01575E  0E82               	movlw	low Console_MakeField@Fill
 15109  015760  0100               	movlb	0	; () banked
 15110  015762  6F67               	movwf	??_Console_MakeField& (0+255),b
 15111  015764  0E04               	movlw	high Console_MakeField@Fill
 15112  015766  0100               	movlb	0	; () banked
 15113  015768  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 15114  01576A  50F3               	movf	prodl,w,c
 15115  01576C  0100               	movlb	0	; () banked
 15116  01576E  2767               	addwf	??_Console_MakeField& (0+255),f,b
 15117  015770  50F4               	movf	prodh,w,c
 15118  015772  0100               	movlb	0	; () banked
 15119  015774  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 15120  015776  0100               	movlb	0	; () banked
 15121  015778  5170               	movf	Console_MakeField@x& (0+255),w,b
 15122  01577A  0D02               	mullw	2
 15123  01577C  50F3               	movf	prodl,w,c
 15124  01577E  0100               	movlb	0	; () banked
 15125  015780  2567               	addwf	??_Console_MakeField& (0+255),w,b
 15126  015782  6ED9               	movwf	fsr2l,c
 15127  015784  50F4               	movf	prodh,w,c
 15128  015786  0100               	movlb	0	; () banked
 15129  015788  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 15130  01578A  6EDA               	movwf	fsr2h,c
 15131  01578C  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 15132  015790  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 15133                           
 15134                           ; BSR set to: 0
 15135  015794  0100               	movlb	0	; () banked
 15136  015796  2B71               	incf	Console_MakeField@y& (0+255),f,b
 15137  015798  D7C6               	goto	l15280
 15138  01579A                     u12660:
 15139                           
 15140                           ; BSR set to: 0
 15141                           ;Console.c: 447: Column += 1;
 15142                           
 15143                           ; BSR set to: 0
 15144  01579A  0100               	movlb	0	; () banked
 15145  01579C  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 15146  01579E  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 15147  0157A0  0100               	movlb	0	; () banked
 15148  0157A2  2B70               	incf	Console_MakeField@x& (0+255),f,b
 15149  0157A4  D7B8               	goto	l15274
 15150  0157A6                     u12670:
 15151                           
 15152                           ; BSR set to: 0
 15153                           ;Console.c: 448: }
 15154                           ;Console.c: 449: return (ColourPtr)Fill;
 15155                           
 15156                           ; BSR set to: 0
 15157  0157A6  0E82               	movlw	low Console_MakeField@Fill
 15158  0157A8  0100               	movlb	0	; () banked
 15159  0157AA  6F65               	movwf	?_Console_MakeField& (0+255),b
 15160  0157AC  0E04               	movlw	high Console_MakeField@Fill
 15161  0157AE  0100               	movlb	0	; () banked
 15162  0157B0  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 15163  0157B2  0012               	return	
 15164  0157B4                     __end_of_Console_MakeField:
 15165                           	opt stack 0
 15166                           tblptru	equ	0xFF8
 15167                           tblptrh	equ	0xFF7
 15168                           tblptrl	equ	0xFF6
 15169                           tablat	equ	0xFF5
 15170                           prodh	equ	0xFF4
 15171                           prodl	equ	0xFF3
 15172                           intcon	equ	0xFF2
 15173                           postinc0	equ	0xFEE
 15174                           wreg	equ	0xFE8
 15175                           postdec1	equ	0xFE5
 15176                           fsr1h	equ	0xFE2
 15177                           fsr1l	equ	0xFE1
 15178                           indf2	equ	0xFDF
 15179                           postinc2	equ	0xFDE
 15180                           postdec2	equ	0xFDD
 15181                           fsr2h	equ	0xFDA
 15182                           fsr2l	equ	0xFD9
 15183                           status	equ	0xFD8
 15184                           
 15185 ;; *************** function _Byte_GetBit *****************
 15186 ;; Defined at:
 15187 ;;		line 38 in file "Library/Types.c"
 15188 ;; Parameters:    Size  Location     Type
 15189 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15190 ;;		 -> Font5x7(480), 
 15191 ;;  pBit            1    2[BANK0 ] unsigned char 
 15192 ;; Auto vars:     Size  Location     Type
 15193 ;;  Output          1    4[BANK0 ] unsigned char 
 15194 ;; Return value:  Size  Location     Type
 15195 ;;                  1    wreg      unsigned char 
 15196 ;; Registers used:
 15197 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 15198 ;; Tracked objects:
 15199 ;;		On entry : 0/0
 15200 ;;		On exit  : 0/0
 15201 ;;		Unchanged: 0/0
 15202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15203 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15206 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15207 ;;Total ram usage:        5 bytes
 15208 ;; Hardware stack levels used:    1
 15209 ;; Hardware stack levels required when called:    7
 15210 ;; This function calls:
 15211 ;;		Nothing
 15212 ;; This function is called by:
 15213 ;;		_Console_MakeField
 15214 ;;		_Word_GetBit
 15215 ;; This function uses a non-reentrant model
 15216 ;;
 15217                           
 15218                           	psect	text52
 15219  017AD4                     __ptext52:
 15220                           	opt stack 0
 15221  017AD4                     _Byte_GetBit:
 15222                           	opt stack 20
 15223                           
 15224                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 15225                           
 15226                           ; BSR set to: 0
 15227                           ;incstack = 0
 15228  017AD4  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 15229  017AD8  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 15230  017ADC                     	if	0	;tblptru may be non-zero
 15231  017ADC                     	endif
 15232  017ADC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 15233  017ADC  0E00               	movlw	low (__mediumconst shr (0+16))
 15234  017ADE  6EF8               	movwf	tblptru,c
 15235  017AE0                     	endif
 15236  017AE0  0008               	tblrd		*
 15237  017AE2  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 15238                           
 15239                           ;Types.c: 42: Output >>= pBit;
 15240  017AE6  0100               	movlb	0	; () banked
 15241  017AE8  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 15242  017AEA  0100               	movlb	0	; () banked
 15243  017AEC  6F63               	movwf	??_Byte_GetBit& (0+255),b
 15244  017AEE  D003               	goto	u11670
 15245  017AF0                     u11675:
 15246  017AF0  0100               	movlb	0	; () banked
 15247  017AF2  90D8               	bcf	status,0,c
 15248  017AF4  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 15249  017AF6                     u11670:
 15250  017AF6  0100               	movlb	0	; () banked
 15251  017AF8  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 15252  017AFA  D7FA               	goto	u11675
 15253                           
 15254                           ;Types.c: 43: Output &= 1;
 15255  017AFC  0E01               	movlw	1
 15256  017AFE  0100               	movlb	0	; () banked
 15257  017B00  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 15258                           
 15259                           ; BSR set to: 0
 15260                           ;Types.c: 44: return Output;
 15261  017B02  0100               	movlb	0	; () banked
 15262  017B04  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 15263  017B06  0012               	return	
 15264  017B08                     __end_of_Byte_GetBit:
 15265                           	opt stack 0
 15266                           tblptru	equ	0xFF8
 15267                           tblptrh	equ	0xFF7
 15268                           tblptrl	equ	0xFF6
 15269                           tablat	equ	0xFF5
 15270                           prodh	equ	0xFF4
 15271                           prodl	equ	0xFF3
 15272                           intcon	equ	0xFF2
 15273                           postinc0	equ	0xFEE
 15274                           wreg	equ	0xFE8
 15275                           postdec1	equ	0xFE5
 15276                           fsr1h	equ	0xFE2
 15277                           fsr1l	equ	0xFE1
 15278                           indf2	equ	0xFDF
 15279                           postinc2	equ	0xFDE
 15280                           postdec2	equ	0xFDD
 15281                           fsr2h	equ	0xFDA
 15282                           fsr2l	equ	0xFD9
 15283                           status	equ	0xFD8
 15284                           
 15285 ;; *************** function _ADC_Voltage *****************
 15286 ;; Defined at:
 15287 ;;		line 259 in file "Library/ADC.c"
 15288 ;; Parameters:    Size  Location     Type
 15289 ;;  pInput          2   64[BANK0 ] PTR struct ADC
 15290 ;;		 -> ADC_AN0(5), 
 15291 ;; Auto vars:     Size  Location     Type
 15292 ;;  output          4   78[BANK0 ] float 
 15293 ;;  ref             4   74[BANK0 ] const float 
 15294 ;;  max             4   70[BANK0 ] const float 
 15295 ;; Return value:  Size  Location     Type
 15296 ;;                  4   64[BANK0 ] float 
 15297 ;; Registers used:
 15298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15299 ;; Tracked objects:
 15300 ;;		On entry : 0/0
 15301 ;;		On exit  : 0/0
 15302 ;;		Unchanged: 0/0
 15303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15304 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15305 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15306 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15308 ;;Total ram usage:       18 bytes
 15309 ;; Hardware stack levels used:    1
 15310 ;; Hardware stack levels required when called:    8
 15311 ;; This function calls:
 15312 ;;		___fldiv
 15313 ;;		___flmul
 15314 ;;		___xxtofl
 15315 ;; This function is called by:
 15316 ;;		_mode1
 15317 ;;		_mode4
 15318 ;; This function uses a non-reentrant model
 15319 ;;
 15320                           
 15321                           	psect	text53
 15322  01538A                     __ptext53:
 15323                           	opt stack 0
 15324  01538A                     _ADC_Voltage:
 15325                           	opt stack 21
 15326                           
 15327                           ;ADC.c: 261: const float max = 1024;
 15328                           
 15329                           ; BSR set to: 0
 15330                           ;incstack = 0
 15331  01538A  0E00               	movlw	0
 15332  01538C  0100               	movlb	0	; () banked
 15333  01538E  6FA6               	movwf	ADC_Voltage@max& (0+255),b
 15334  015390  0E00               	movlw	0
 15335  015392  6FA7               	movwf	(ADC_Voltage@max+1)& (0+255),b
 15336  015394  0E80               	movlw	128
 15337  015396  6FA8               	movwf	(ADC_Voltage@max+2)& (0+255),b
 15338  015398  0E44               	movlw	68
 15339  01539A  6FA9               	movwf	(ADC_Voltage@max+3)& (0+255),b
 15340                           
 15341                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 15342  01539C  0E33               	movlw	51
 15343  01539E  0100               	movlb	0	; () banked
 15344  0153A0  6FAA               	movwf	ADC_Voltage@ref& (0+255),b
 15345  0153A2  0E33               	movlw	51
 15346  0153A4  6FAB               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 15347  0153A6  0E53               	movlw	83
 15348  0153A8  6FAC               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 15349  0153AA  0E40               	movlw	64
 15350  0153AC  6FAD               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 15351                           
 15352                           ; BSR set to: 0
 15353                           ;ADC.c: 263: float output = pInput->mValue;
 15354  0153AE  0100               	movlb	0	; () banked
 15355  0153B0  EE20 F001          	lfsr	2,1
 15356  0153B4  51A0               	movf	ADC_Voltage@pInput& (0+255),w,b
 15357  0153B6  26D9               	addwf	fsr2l,f,c
 15358  0153B8  51A1               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 15359  0153BA  22DA               	addwfc	fsr2h,f,c
 15360  0153BC  CFDE F0A4          	movff	postinc2,??_ADC_Voltage
 15361  0153C0  CFDD F0A5          	movff	postdec2,??_ADC_Voltage+1
 15362  0153C4  C0A4  F060         	movff	??_ADC_Voltage,___xxtofl@val
 15363  0153C8  C0A5  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 15364  0153CC  0100               	movlb	0	; () banked
 15365  0153CE  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 15366  0153D0  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 15367  0153D2  0E00               	movlw	0
 15368  0153D4  ECA7  F09C         	call	___xxtofl
 15369  0153D8  C060  F0AE         	movff	?___xxtofl,ADC_Voltage@output
 15370  0153DC  C061  F0AF         	movff	?___xxtofl+1,ADC_Voltage@output+1
 15371  0153E0  C062  F0B0         	movff	?___xxtofl+2,ADC_Voltage@output+2
 15372  0153E4  C063  F0B1         	movff	?___xxtofl+3,ADC_Voltage@output+3
 15373                           
 15374                           ;ADC.c: 265: output /= max;
 15375  0153E8  C0AE  F06E         	movff	ADC_Voltage@output,___fldiv@b
 15376  0153EC  C0AF  F06F         	movff	ADC_Voltage@output+1,___fldiv@b+1
 15377  0153F0  C0B0  F070         	movff	ADC_Voltage@output+2,___fldiv@b+2
 15378  0153F4  C0B1  F071         	movff	ADC_Voltage@output+3,___fldiv@b+3
 15379  0153F8  C0A6  F072         	movff	ADC_Voltage@max,___fldiv@a
 15380  0153FC  C0A7  F073         	movff	ADC_Voltage@max+1,___fldiv@a+1
 15381  015400  C0A8  F074         	movff	ADC_Voltage@max+2,___fldiv@a+2
 15382  015404  C0A9  F075         	movff	ADC_Voltage@max+3,___fldiv@a+3
 15383  015408  ECE1  F091         	call	___fldiv	;wreg free
 15384  01540C  C06E  F0AE         	movff	?___fldiv,ADC_Voltage@output
 15385  015410  C06F  F0AF         	movff	?___fldiv+1,ADC_Voltage@output+1
 15386  015414  C070  F0B0         	movff	?___fldiv+2,ADC_Voltage@output+2
 15387  015418  C071  F0B1         	movff	?___fldiv+3,ADC_Voltage@output+3
 15388                           
 15389                           ;ADC.c: 266: output *= ref;
 15390  01541C  C0AE  F087         	movff	ADC_Voltage@output,___flmul@b
 15391  015420  C0AF  F088         	movff	ADC_Voltage@output+1,___flmul@b+1
 15392  015424  C0B0  F089         	movff	ADC_Voltage@output+2,___flmul@b+2
 15393  015428  C0B1  F08A         	movff	ADC_Voltage@output+3,___flmul@b+3
 15394  01542C  C0AA  F08B         	movff	ADC_Voltage@ref,___flmul@a
 15395  015430  C0AB  F08C         	movff	ADC_Voltage@ref+1,___flmul@a+1
 15396  015434  C0AC  F08D         	movff	ADC_Voltage@ref+2,___flmul@a+2
 15397  015438  C0AD  F08E         	movff	ADC_Voltage@ref+3,___flmul@a+3
 15398  01543C  EC59  F089         	call	___flmul	;wreg free
 15399  015440  C087  F0AE         	movff	?___flmul,ADC_Voltage@output
 15400  015444  C088  F0AF         	movff	?___flmul+1,ADC_Voltage@output+1
 15401  015448  C089  F0B0         	movff	?___flmul+2,ADC_Voltage@output+2
 15402  01544C  C08A  F0B1         	movff	?___flmul+3,ADC_Voltage@output+3
 15403                           
 15404                           ;ADC.c: 268: return output + (float)0.000;
 15405  015450  C0AE  F0A0         	movff	ADC_Voltage@output,?_ADC_Voltage
 15406  015454  C0AF  F0A1         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 15407  015458  C0B0  F0A2         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 15408  01545C  C0B1  F0A3         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 15409  015460  0012               	return	
 15410  015462                     __end_of_ADC_Voltage:
 15411                           	opt stack 0
 15412                           tblptru	equ	0xFF8
 15413                           tblptrh	equ	0xFF7
 15414                           tblptrl	equ	0xFF6
 15415                           tablat	equ	0xFF5
 15416                           prodh	equ	0xFF4
 15417                           prodl	equ	0xFF3
 15418                           intcon	equ	0xFF2
 15419                           postinc0	equ	0xFEE
 15420                           wreg	equ	0xFE8
 15421                           postdec1	equ	0xFE5
 15422                           fsr1h	equ	0xFE2
 15423                           fsr1l	equ	0xFE1
 15424                           indf2	equ	0xFDF
 15425                           postinc2	equ	0xFDE
 15426                           postdec2	equ	0xFDD
 15427                           fsr2h	equ	0xFDA
 15428                           fsr2l	equ	0xFD9
 15429                           status	equ	0xFD8
 15430                           
 15431 ;; *************** function ___xxtofl *****************
 15432 ;; Defined at:
 15433 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 15434 ;; Parameters:    Size  Location     Type
 15435 ;;  sign            1    wreg     unsigned char 
 15436 ;;  val             4    0[BANK0 ] long 
 15437 ;; Auto vars:     Size  Location     Type
 15438 ;;  sign            1    8[BANK0 ] unsigned char 
 15439 ;;  arg             4   10[BANK0 ] unsigned long 
 15440 ;;  exp             1    9[BANK0 ] unsigned char 
 15441 ;; Return value:  Size  Location     Type
 15442 ;;                  4    0[BANK0 ] unsigned char 
 15443 ;; Registers used:
 15444 ;;		wreg, status,2, status,0
 15445 ;; Tracked objects:
 15446 ;;		On entry : 0/0
 15447 ;;		On exit  : 0/0
 15448 ;;		Unchanged: 0/0
 15449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15450 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15451 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15452 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15453 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15454 ;;Total ram usage:       14 bytes
 15455 ;; Hardware stack levels used:    1
 15456 ;; Hardware stack levels required when called:    7
 15457 ;; This function calls:
 15458 ;;		Nothing
 15459 ;; This function is called by:
 15460 ;;		_ADC_Voltage
 15461 ;;		_mode4
 15462 ;;		_printf
 15463 ;; This function uses a non-reentrant model
 15464 ;;
 15465                           
 15466                           	psect	text54
 15467  01394E                     __ptext54:
 15468                           	opt stack 0
 15469  01394E                     ___xxtofl:
 15470                           	opt stack 22
 15471                           
 15472                           ;incstack = 0
 15473                           ;___xxtofl@sign stored from wreg
 15474  01394E  0100               	movlb	0	; () banked
 15475  013950  6F68               	movwf	___xxtofl@sign& (0+255),b
 15476  013952  0100               	movlb	0	; () banked
 15477  013954  5168               	movf	___xxtofl@sign& (0+255),w,b
 15478  013956  0100               	movlb	0	; () banked
 15479  013958  B4D8               	btfsc	status,2,c
 15480  01395A  D01E               	goto	l3098
 15481                           
 15482                           ; BSR set to: 0
 15483  01395C  0100               	movlb	0	; () banked
 15484  01395E  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 15485  013960  D01B               	goto	l3098
 15486                           
 15487                           ; BSR set to: 0
 15488  013962  C060  F064         	movff	___xxtofl@val,??___xxtofl
 15489  013966  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 15490  01396A  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 15491  01396E  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 15492  013972  0100               	movlb	0	; () banked
 15493  013974  1F64               	comf	??___xxtofl& (0+255),f,b
 15494  013976  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 15495  013978  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 15496  01397A  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 15497  01397C  2B64               	incf	??___xxtofl& (0+255),f,b
 15498  01397E  0E00               	movlw	0
 15499  013980  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 15500  013982  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 15501  013984  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 15502  013986  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 15503  01398A  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 15504  01398E  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 15505  013992  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 15506  013996  D008               	goto	l3099
 15507  013998                     l3098:
 15508                           
 15509                           ; BSR set to: 0
 15510  013998  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 15511  01399C  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 15512  0139A0  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 15513  0139A4  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 15514  0139A8                     l3099:
 15515                           
 15516                           ; BSR set to: 0
 15517                           
 15518                           ; BSR set to: 0
 15519  0139A8  0100               	movlb	0	; () banked
 15520  0139AA  5160               	movf	___xxtofl@val& (0+255),w,b
 15521  0139AC  0100               	movlb	0	; () banked
 15522  0139AE  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 15523  0139B0  0100               	movlb	0	; () banked
 15524  0139B2  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 15525  0139B4  0100               	movlb	0	; () banked
 15526  0139B6  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 15527  0139B8  A4D8               	btfss	status,2,c
 15528  0139BA  D00A               	goto	l3100
 15529                           
 15530                           ; BSR set to: 0
 15531  0139BC  0E00               	movlw	0
 15532  0139BE  0100               	movlb	0	; () banked
 15533  0139C0  6F60               	movwf	?___xxtofl& (0+255),b
 15534  0139C2  0E00               	movlw	0
 15535  0139C4  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 15536  0139C6  0E00               	movlw	0
 15537  0139C8  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 15538  0139CA  0E00               	movlw	0
 15539  0139CC  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 15540                           
 15541                           ; BSR set to: 0
 15542  0139CE  0012               	return	
 15543  0139D0                     l3100:
 15544                           
 15545                           ; BSR set to: 0
 15546                           
 15547                           ; BSR set to: 0
 15548  0139D0  0E96               	movlw	150
 15549  0139D2  0100               	movlb	0	; () banked
 15550  0139D4  6F69               	movwf	___xxtofl@exp& (0+255),b
 15551  0139D6  D008               	goto	l3102
 15552  0139D8                     
 15553                           ; BSR set to: 0
 15554                           
 15555                           ; BSR set to: 0
 15556  0139D8  0100               	movlb	0	; () banked
 15557  0139DA  2B69               	incf	___xxtofl@exp& (0+255),f,b
 15558  0139DC  0100               	movlb	0	; () banked
 15559  0139DE  90D8               	bcf	status,0,c
 15560  0139E0  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 15561  0139E2  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 15562  0139E4  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 15563  0139E6  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 15564  0139E8                     l3102:
 15565                           
 15566                           ; BSR set to: 0
 15567                           
 15568                           ; BSR set to: 0
 15569  0139E8  0E00               	movlw	0
 15570  0139EA  0100               	movlb	0	; () banked
 15571  0139EC  156A               	andwf	___xxtofl@arg& (0+255),w,b
 15572  0139EE  0100               	movlb	0	; () banked
 15573  0139F0  6F64               	movwf	??___xxtofl& (0+255),b
 15574  0139F2  0E00               	movlw	0
 15575  0139F4  0100               	movlb	0	; () banked
 15576  0139F6  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 15577  0139F8  0100               	movlb	0	; () banked
 15578  0139FA  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 15579  0139FC  0E00               	movlw	0
 15580  0139FE  0100               	movlb	0	; () banked
 15581  013A00  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 15582  013A02  0100               	movlb	0	; () banked
 15583  013A04  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 15584  013A06  0EFE               	movlw	254
 15585  013A08  0100               	movlb	0	; () banked
 15586  013A0A  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 15587  013A0C  0100               	movlb	0	; () banked
 15588  013A0E  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 15589  013A10  0100               	movlb	0	; () banked
 15590  013A12  5164               	movf	??___xxtofl& (0+255),w,b
 15591  013A14  0100               	movlb	0	; () banked
 15592  013A16  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 15593  013A18  0100               	movlb	0	; () banked
 15594  013A1A  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 15595  013A1C  0100               	movlb	0	; () banked
 15596  013A1E  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 15597  013A20  B4D8               	btfsc	status,2,c
 15598  013A22  D010               	goto	l3105
 15599  013A24  D7D9               	goto	l3103
 15600  013A26                     
 15601                           ; BSR set to: 0
 15602                           
 15603                           ; BSR set to: 0
 15604  013A26  0100               	movlb	0	; () banked
 15605  013A28  2B69               	incf	___xxtofl@exp& (0+255),f,b
 15606                           
 15607                           ; BSR set to: 0
 15608  013A2A  0E01               	movlw	1
 15609  013A2C  0100               	movlb	0	; () banked
 15610  013A2E  276A               	addwf	___xxtofl@arg& (0+255),f,b
 15611  013A30  0E00               	movlw	0
 15612  013A32  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 15613  013A34  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 15614  013A36  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 15615                           
 15616                           ; BSR set to: 0
 15617  013A38  0100               	movlb	0	; () banked
 15618  013A3A  90D8               	bcf	status,0,c
 15619  013A3C  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 15620  013A3E  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 15621  013A40  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 15622  013A42  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 15623  013A44                     l3105:
 15624                           
 15625                           ; BSR set to: 0
 15626  013A44  0E00               	movlw	0
 15627  013A46  0100               	movlb	0	; () banked
 15628  013A48  156A               	andwf	___xxtofl@arg& (0+255),w,b
 15629  013A4A  0100               	movlb	0	; () banked
 15630  013A4C  6F64               	movwf	??___xxtofl& (0+255),b
 15631  013A4E  0E00               	movlw	0
 15632  013A50  0100               	movlb	0	; () banked
 15633  013A52  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 15634  013A54  0100               	movlb	0	; () banked
 15635  013A56  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 15636  013A58  0E00               	movlw	0
 15637  013A5A  0100               	movlb	0	; () banked
 15638  013A5C  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 15639  013A5E  0100               	movlb	0	; () banked
 15640  013A60  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 15641  013A62  0EFF               	movlw	255
 15642  013A64  0100               	movlb	0	; () banked
 15643  013A66  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 15644  013A68  0100               	movlb	0	; () banked
 15645  013A6A  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 15646  013A6C  0100               	movlb	0	; () banked
 15647  013A6E  5164               	movf	??___xxtofl& (0+255),w,b
 15648  013A70  0100               	movlb	0	; () banked
 15649  013A72  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 15650  013A74  0100               	movlb	0	; () banked
 15651  013A76  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 15652  013A78  0100               	movlb	0	; () banked
 15653  013A7A  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 15654  013A7C  B4D8               	btfsc	status,2,c
 15655  013A7E  D009               	goto	l3108
 15656  013A80  D7D2               	goto	l3106
 15657  013A82                     
 15658                           ; BSR set to: 0
 15659                           
 15660                           ; BSR set to: 0
 15661  013A82  0100               	movlb	0	; () banked
 15662  013A84  0769               	decf	___xxtofl@exp& (0+255),f,b
 15663  013A86  0100               	movlb	0	; () banked
 15664  013A88  90D8               	bcf	status,0,c
 15665  013A8A  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 15666  013A8C  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 15667  013A8E  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 15668  013A90  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 15669  013A92                     l3108:
 15670                           
 15671                           ; BSR set to: 0
 15672                           
 15673                           ; BSR set to: 0
 15674  013A92  0100               	movlb	0	; () banked
 15675  013A94  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 15676  013A96  D004               	goto	u13370
 15677                           
 15678                           ; BSR set to: 0
 15679  013A98  0E02               	movlw	2
 15680  013A9A  0100               	movlb	0	; () banked
 15681  013A9C  6169               	cpfslt	___xxtofl@exp& (0+255),b
 15682  013A9E  D7F1               	goto	l3109
 15683  013AA0                     u13370:
 15684                           
 15685                           ; BSR set to: 0
 15686                           
 15687                           ; BSR set to: 0
 15688  013AA0  0100               	movlb	0	; () banked
 15689  013AA2  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 15690  013AA4  D009               	goto	l3113
 15691                           
 15692                           ; BSR set to: 0
 15693  013AA6  0EFF               	movlw	255
 15694  013AA8  0100               	movlb	0	; () banked
 15695  013AAA  176A               	andwf	___xxtofl@arg& (0+255),f,b
 15696  013AAC  0EFF               	movlw	255
 15697  013AAE  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 15698  013AB0  0E7F               	movlw	127
 15699  013AB2  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 15700  013AB4  0EFF               	movlw	255
 15701  013AB6  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 15702  013AB8                     l3113:
 15703                           
 15704                           ; BSR set to: 0
 15705  013AB8  0100               	movlb	0	; () banked
 15706  013ABA  90D8               	bcf	status,0,c
 15707  013ABC  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 15708  013ABE  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 15709  013AC2  0100               	movlb	0	; () banked
 15710  013AC4  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 15711  013AC6  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 15712  013AC8  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 15713  013ACA  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 15714  013ACE  0100               	movlb	0	; () banked
 15715  013AD0  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 15716  013AD2  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 15717  013AD4  6B64               	clrf	??___xxtofl& (0+255),b
 15718  013AD6  0100               	movlb	0	; () banked
 15719  013AD8  5164               	movf	??___xxtofl& (0+255),w,b
 15720  013ADA  0100               	movlb	0	; () banked
 15721  013ADC  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 15722  013ADE  0100               	movlb	0	; () banked
 15723  013AE0  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 15724  013AE2  0100               	movlb	0	; () banked
 15725  013AE4  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 15726  013AE6  0100               	movlb	0	; () banked
 15727  013AE8  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 15728  013AEA  0100               	movlb	0	; () banked
 15729  013AEC  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 15730  013AEE  0100               	movlb	0	; () banked
 15731  013AF0  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 15732  013AF2  0100               	movlb	0	; () banked
 15733  013AF4  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 15734                           
 15735                           ; BSR set to: 0
 15736  013AF6  0100               	movlb	0	; () banked
 15737  013AF8  5168               	movf	___xxtofl@sign& (0+255),w,b
 15738  013AFA  0100               	movlb	0	; () banked
 15739  013AFC  B4D8               	btfsc	status,2,c
 15740  013AFE  D005               	goto	l3114
 15741                           
 15742                           ; BSR set to: 0
 15743  013B00  0100               	movlb	0	; () banked
 15744  013B02  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 15745  013B04  D002               	goto	l3114
 15746                           
 15747                           ; BSR set to: 0
 15748  013B06  0100               	movlb	0	; () banked
 15749  013B08  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 15750  013B0A                     l3114:
 15751                           
 15752                           ; BSR set to: 0
 15753                           
 15754                           ; BSR set to: 0
 15755  013B0A  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 15756  013B0E  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 15757  013B12  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 15758  013B16  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 15759  013B1A  0012               	return	
 15760  013B1C                     __end_of___xxtofl:
 15761                           	opt stack 0
 15762                           tblptru	equ	0xFF8
 15763                           tblptrh	equ	0xFF7
 15764                           tblptrl	equ	0xFF6
 15765                           tablat	equ	0xFF5
 15766                           prodh	equ	0xFF4
 15767                           prodl	equ	0xFF3
 15768                           intcon	equ	0xFF2
 15769                           postinc0	equ	0xFEE
 15770                           wreg	equ	0xFE8
 15771                           postdec1	equ	0xFE5
 15772                           fsr1h	equ	0xFE2
 15773                           fsr1l	equ	0xFE1
 15774                           indf2	equ	0xFDF
 15775                           postinc2	equ	0xFDE
 15776                           postdec2	equ	0xFDD
 15777                           fsr2h	equ	0xFDA
 15778                           fsr2l	equ	0xFD9
 15779                           status	equ	0xFD8
 15780                           
 15781 ;; *************** function ___flmul *****************
 15782 ;; Defined at:
 15783 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 15784 ;; Parameters:    Size  Location     Type
 15785 ;;  b               4   39[BANK0 ] unsigned char 
 15786 ;;  a               4   43[BANK0 ] unsigned char 
 15787 ;; Auto vars:     Size  Location     Type
 15788 ;;  prod            4   58[BANK0 ] struct .
 15789 ;;  grs             4   53[BANK0 ] unsigned long 
 15790 ;;  temp            2   62[BANK0 ] struct .
 15791 ;;  bexp            1   57[BANK0 ] unsigned char 
 15792 ;;  aexp            1   52[BANK0 ] unsigned char 
 15793 ;;  sign            1   51[BANK0 ] unsigned char 
 15794 ;; Return value:  Size  Location     Type
 15795 ;;                  4   39[BANK0 ] unsigned char 
 15796 ;; Registers used:
 15797 ;;		wreg, status,2, status,0, prodl, prodh
 15798 ;; Tracked objects:
 15799 ;;		On entry : 0/0
 15800 ;;		On exit  : 0/0
 15801 ;;		Unchanged: 0/0
 15802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15803 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15804 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15805 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15806 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15807 ;;Total ram usage:       25 bytes
 15808 ;; Hardware stack levels used:    1
 15809 ;; Hardware stack levels required when called:    7
 15810 ;; This function calls:
 15811 ;;		Nothing
 15812 ;; This function is called by:
 15813 ;;		_ADC_Voltage
 15814 ;;		_mode4
 15815 ;;		_fround
 15816 ;;		_scale
 15817 ;;		_printf
 15818 ;; This function uses a non-reentrant model
 15819 ;;
 15820                           
 15821                           	psect	text55
 15822  0112B2                     __ptext55:
 15823                           	opt stack 0
 15824  0112B2                     ___flmul:
 15825                           	opt stack 21
 15826                           
 15827                           ; BSR set to: 0
 15828                           ;incstack = 0
 15829  0112B2  0100               	movlb	0	; () banked
 15830  0112B4  518A               	movf	(___flmul@b+3)& (0+255),w,b
 15831  0112B6  0B80               	andlw	128
 15832  0112B8  0100               	movlb	0	; () banked
 15833  0112BA  6F93               	movwf	___flmul@sign& (0+255),b
 15834  0112BC  0100               	movlb	0	; () banked
 15835  0112BE  518A               	movf	(___flmul@b+3)& (0+255),w,b
 15836  0112C0  258A               	addwf	(___flmul@b+3)& (0+255),w,b
 15837  0112C2  0100               	movlb	0	; () banked
 15838  0112C4  6F99               	movwf	___flmul@bexp& (0+255),b
 15839                           
 15840                           ; BSR set to: 0
 15841  0112C6  0100               	movlb	0	; () banked
 15842  0112C8  AF89               	btfss	(___flmul@b+2)& (0+255),7,b
 15843  0112CA  D002               	goto	l3069
 15844                           
 15845                           ; BSR set to: 0
 15846  0112CC  0100               	movlb	0	; () banked
 15847  0112CE  8199               	bsf	___flmul@bexp& (0+255),0,b
 15848  0112D0                     l3069:
 15849                           
 15850                           ; BSR set to: 0
 15851                           
 15852                           ; BSR set to: 0
 15853  0112D0  0100               	movlb	0	; () banked
 15854  0112D2  5199               	movf	___flmul@bexp& (0+255),w,b
 15855  0112D4  0100               	movlb	0	; () banked
 15856  0112D6  B4D8               	btfsc	status,2,c
 15857  0112D8  D010               	goto	l3070
 15858                           
 15859                           ; BSR set to: 0
 15860  0112DA  0100               	movlb	0	; () banked
 15861  0112DC  2999               	incf	___flmul@bexp& (0+255),w,b
 15862  0112DE  A4D8               	btfss	status,2,c
 15863  0112E0  D009               	goto	l3071
 15864                           
 15865                           ; BSR set to: 0
 15866  0112E2  0E00               	movlw	0
 15867  0112E4  0100               	movlb	0	; () banked
 15868  0112E6  6F87               	movwf	___flmul@b& (0+255),b
 15869  0112E8  0E00               	movlw	0
 15870  0112EA  6F88               	movwf	(___flmul@b+1)& (0+255),b
 15871  0112EC  0E00               	movlw	0
 15872  0112EE  6F89               	movwf	(___flmul@b+2)& (0+255),b
 15873  0112F0  0E00               	movlw	0
 15874  0112F2  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 15875  0112F4                     l3071:
 15876                           
 15877                           ; BSR set to: 0
 15878                           
 15879                           ; BSR set to: 0
 15880  0112F4  0100               	movlb	0	; () banked
 15881  0112F6  8F89               	bsf	(___flmul@b+2)& (0+255),7,b
 15882  0112F8  D009               	goto	l3072
 15883  0112FA                     l3070:
 15884                           
 15885                           ; BSR set to: 0
 15886                           
 15887                           ; BSR set to: 0
 15888  0112FA  0E00               	movlw	0
 15889  0112FC  0100               	movlb	0	; () banked
 15890  0112FE  6F87               	movwf	___flmul@b& (0+255),b
 15891  011300  0E00               	movlw	0
 15892  011302  6F88               	movwf	(___flmul@b+1)& (0+255),b
 15893  011304  0E00               	movlw	0
 15894  011306  6F89               	movwf	(___flmul@b+2)& (0+255),b
 15895  011308  0E00               	movlw	0
 15896  01130A  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 15897  01130C                     l3072:
 15898                           
 15899                           ; BSR set to: 0
 15900                           
 15901                           ; BSR set to: 0
 15902  01130C  0100               	movlb	0	; () banked
 15903  01130E  518E               	movf	(___flmul@a+3)& (0+255),w,b
 15904  011310  0B80               	andlw	128
 15905  011312  0100               	movlb	0	; () banked
 15906  011314  1B93               	xorwf	___flmul@sign& (0+255),f,b
 15907                           
 15908                           ; BSR set to: 0
 15909  011316  0100               	movlb	0	; () banked
 15910  011318  518E               	movf	(___flmul@a+3)& (0+255),w,b
 15911  01131A  258E               	addwf	(___flmul@a+3)& (0+255),w,b
 15912  01131C  0100               	movlb	0	; () banked
 15913  01131E  6F94               	movwf	___flmul@aexp& (0+255),b
 15914                           
 15915                           ; BSR set to: 0
 15916  011320  0100               	movlb	0	; () banked
 15917  011322  AF8D               	btfss	(___flmul@a+2)& (0+255),7,b
 15918  011324  D002               	goto	l3073
 15919                           
 15920                           ; BSR set to: 0
 15921  011326  0100               	movlb	0	; () banked
 15922  011328  8194               	bsf	___flmul@aexp& (0+255),0,b
 15923  01132A                     l3073:
 15924                           
 15925                           ; BSR set to: 0
 15926                           
 15927                           ; BSR set to: 0
 15928  01132A  0100               	movlb	0	; () banked
 15929  01132C  5194               	movf	___flmul@aexp& (0+255),w,b
 15930  01132E  0100               	movlb	0	; () banked
 15931  011330  B4D8               	btfsc	status,2,c
 15932  011332  D010               	goto	l3074
 15933                           
 15934                           ; BSR set to: 0
 15935  011334  0100               	movlb	0	; () banked
 15936  011336  2994               	incf	___flmul@aexp& (0+255),w,b
 15937  011338  A4D8               	btfss	status,2,c
 15938  01133A  D009               	goto	l3075
 15939                           
 15940                           ; BSR set to: 0
 15941  01133C  0E00               	movlw	0
 15942  01133E  0100               	movlb	0	; () banked
 15943  011340  6F8B               	movwf	___flmul@a& (0+255),b
 15944  011342  0E00               	movlw	0
 15945  011344  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 15946  011346  0E00               	movlw	0
 15947  011348  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 15948  01134A  0E00               	movlw	0
 15949  01134C  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 15950  01134E                     l3075:
 15951                           
 15952                           ; BSR set to: 0
 15953                           
 15954                           ; BSR set to: 0
 15955  01134E  0100               	movlb	0	; () banked
 15956  011350  8F8D               	bsf	(___flmul@a+2)& (0+255),7,b
 15957  011352  D009               	goto	l3076
 15958  011354                     l3074:
 15959                           
 15960                           ; BSR set to: 0
 15961                           
 15962                           ; BSR set to: 0
 15963  011354  0E00               	movlw	0
 15964  011356  0100               	movlb	0	; () banked
 15965  011358  6F8B               	movwf	___flmul@a& (0+255),b
 15966  01135A  0E00               	movlw	0
 15967  01135C  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 15968  01135E  0E00               	movlw	0
 15969  011360  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 15970  011362  0E00               	movlw	0
 15971  011364  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 15972  011366                     l3076:
 15973                           
 15974                           ; BSR set to: 0
 15975  011366  0100               	movlb	0	; () banked
 15976  011368  5194               	movf	___flmul@aexp& (0+255),w,b
 15977  01136A  0100               	movlb	0	; () banked
 15978  01136C  B4D8               	btfsc	status,2,c
 15979  01136E  D005               	goto	u12220
 15980                           
 15981                           ; BSR set to: 0
 15982  011370  0100               	movlb	0	; () banked
 15983  011372  5199               	movf	___flmul@bexp& (0+255),w,b
 15984  011374  0100               	movlb	0	; () banked
 15985  011376  A4D8               	btfss	status,2,c
 15986  011378  D00A               	goto	l3077
 15987  01137A                     u12220:
 15988                           
 15989                           ; BSR set to: 0
 15990                           
 15991                           ; BSR set to: 0
 15992  01137A  0E00               	movlw	0
 15993  01137C  0100               	movlb	0	; () banked
 15994  01137E  6F87               	movwf	?___flmul& (0+255),b
 15995  011380  0E00               	movlw	0
 15996  011382  6F88               	movwf	(?___flmul+1)& (0+255),b
 15997  011384  0E00               	movlw	0
 15998  011386  6F89               	movwf	(?___flmul+2)& (0+255),b
 15999  011388  0E00               	movlw	0
 16000  01138A  6F8A               	movwf	(?___flmul+3)& (0+255),b
 16001                           
 16002                           ; BSR set to: 0
 16003  01138C  0012               	return	
 16004  01138E                     l3077:
 16005                           
 16006                           ; BSR set to: 0
 16007                           
 16008                           ; BSR set to: 0
 16009  01138E  0100               	movlb	0	; () banked
 16010  011390  518D               	movf	(___flmul@a+2)& (0+255),w,b
 16011  011392  0100               	movlb	0	; () banked
 16012  011394  0387               	mulwf	___flmul@b& (0+255),b
 16013  011396  CFF3 F09E          	movff	prodl,___flmul@temp
 16014  01139A  CFF4 F09F          	movff	prodh,___flmul@temp+1
 16015                           
 16016                           ; BSR set to: 0
 16017  01139E  0100               	movlb	0	; () banked
 16018  0113A0  519E               	movf	___flmul@temp& (0+255),w,b
 16019  0113A2  0100               	movlb	0	; () banked
 16020  0113A4  6F95               	movwf	___flmul@grs& (0+255),b
 16021  0113A6  6B96               	clrf	(___flmul@grs+1)& (0+255),b
 16022  0113A8  6B97               	clrf	(___flmul@grs+2)& (0+255),b
 16023  0113AA  6B98               	clrf	(___flmul@grs+3)& (0+255),b
 16024                           
 16025                           ; BSR set to: 0
 16026  0113AC  0100               	movlb	0	; () banked
 16027  0113AE  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16028  0113B0  0100               	movlb	0	; () banked
 16029  0113B2  6F9A               	movwf	___flmul@prod& (0+255),b
 16030  0113B4  6B9B               	clrf	(___flmul@prod+1)& (0+255),b
 16031  0113B6  6B9C               	clrf	(___flmul@prod+2)& (0+255),b
 16032  0113B8  6B9D               	clrf	(___flmul@prod+3)& (0+255),b
 16033  0113BA  0100               	movlb	0	; () banked
 16034  0113BC  518C               	movf	(___flmul@a+1)& (0+255),w,b
 16035  0113BE  0100               	movlb	0	; () banked
 16036  0113C0  0388               	mulwf	(___flmul@b+1)& (0+255),b
 16037  0113C2  CFF3 F09E          	movff	prodl,___flmul@temp
 16038  0113C6  CFF4 F09F          	movff	prodh,___flmul@temp+1
 16039                           
 16040                           ; BSR set to: 0
 16041  0113CA  0100               	movlb	0	; () banked
 16042  0113CC  519E               	movf	___flmul@temp& (0+255),w,b
 16043  0113CE  0100               	movlb	0	; () banked
 16044  0113D0  2795               	addwf	___flmul@grs& (0+255),f,b
 16045  0113D2  0E00               	movlw	0
 16046  0113D4  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 16047  0113D6  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 16048  0113D8  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 16049                           
 16050                           ; BSR set to: 0
 16051  0113DA  0100               	movlb	0	; () banked
 16052  0113DC  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16053  0113DE  0100               	movlb	0	; () banked
 16054  0113E0  279A               	addwf	___flmul@prod& (0+255),f,b
 16055  0113E2  0E00               	movlw	0
 16056  0113E4  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 16057  0113E6  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 16058  0113E8  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 16059  0113EA  0100               	movlb	0	; () banked
 16060  0113EC  518B               	movf	___flmul@a& (0+255),w,b
 16061  0113EE  0100               	movlb	0	; () banked
 16062  0113F0  0389               	mulwf	(___flmul@b+2)& (0+255),b
 16063  0113F2  CFF3 F09E          	movff	prodl,___flmul@temp
 16064  0113F6  CFF4 F09F          	movff	prodh,___flmul@temp+1
 16065                           
 16066                           ; BSR set to: 0
 16067  0113FA  0100               	movlb	0	; () banked
 16068  0113FC  519E               	movf	___flmul@temp& (0+255),w,b
 16069  0113FE  0100               	movlb	0	; () banked
 16070  011400  2795               	addwf	___flmul@grs& (0+255),f,b
 16071  011402  0E00               	movlw	0
 16072  011404  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 16073  011406  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 16074  011408  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 16075                           
 16076                           ; BSR set to: 0
 16077  01140A  0100               	movlb	0	; () banked
 16078  01140C  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16079  01140E  0100               	movlb	0	; () banked
 16080  011410  279A               	addwf	___flmul@prod& (0+255),f,b
 16081  011412  0E00               	movlw	0
 16082  011414  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 16083  011416  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 16084  011418  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 16085                           
 16086                           ; BSR set to: 0
 16087  01141A  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 16088  01141E  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 16089  011422  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 16090  011426  0100               	movlb	0	; () banked
 16091  011428  6B95               	clrf	___flmul@grs& (0+255),b
 16092                           
 16093                           ; BSR set to: 0
 16094  01142A  0100               	movlb	0	; () banked
 16095  01142C  518B               	movf	___flmul@a& (0+255),w,b
 16096  01142E  0100               	movlb	0	; () banked
 16097  011430  0388               	mulwf	(___flmul@b+1)& (0+255),b
 16098  011432  CFF3 F09E          	movff	prodl,___flmul@temp
 16099  011436  CFF4 F09F          	movff	prodh,___flmul@temp+1
 16100                           
 16101                           ; BSR set to: 0
 16102  01143A  0100               	movlb	0	; () banked
 16103  01143C  519E               	movf	___flmul@temp& (0+255),w,b
 16104  01143E  0100               	movlb	0	; () banked
 16105  011440  2795               	addwf	___flmul@grs& (0+255),f,b
 16106  011442  0100               	movlb	0	; () banked
 16107  011444  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16108  011446  0100               	movlb	0	; () banked
 16109  011448  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 16110  01144A  0E00               	movlw	0
 16111  01144C  0100               	movlb	0	; () banked
 16112  01144E  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 16113  011450  0E00               	movlw	0
 16114  011452  0100               	movlb	0	; () banked
 16115  011454  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 16116                           
 16117                           ; BSR set to: 0
 16118  011456  0100               	movlb	0	; () banked
 16119  011458  518C               	movf	(___flmul@a+1)& (0+255),w,b
 16120  01145A  0100               	movlb	0	; () banked
 16121  01145C  0387               	mulwf	___flmul@b& (0+255),b
 16122  01145E  CFF3 F09E          	movff	prodl,___flmul@temp
 16123  011462  CFF4 F09F          	movff	prodh,___flmul@temp+1
 16124                           
 16125                           ; BSR set to: 0
 16126  011466  0100               	movlb	0	; () banked
 16127  011468  519E               	movf	___flmul@temp& (0+255),w,b
 16128  01146A  0100               	movlb	0	; () banked
 16129  01146C  2795               	addwf	___flmul@grs& (0+255),f,b
 16130  01146E  0100               	movlb	0	; () banked
 16131  011470  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16132  011472  0100               	movlb	0	; () banked
 16133  011474  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 16134  011476  0E00               	movlw	0
 16135  011478  0100               	movlb	0	; () banked
 16136  01147A  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 16137  01147C  0E00               	movlw	0
 16138  01147E  0100               	movlb	0	; () banked
 16139  011480  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 16140                           
 16141                           ; BSR set to: 0
 16142  011482  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 16143  011486  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 16144  01148A  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 16145  01148E  0100               	movlb	0	; () banked
 16146  011490  6B95               	clrf	___flmul@grs& (0+255),b
 16147  011492  0100               	movlb	0	; () banked
 16148  011494  518B               	movf	___flmul@a& (0+255),w,b
 16149  011496  0100               	movlb	0	; () banked
 16150  011498  0387               	mulwf	___flmul@b& (0+255),b
 16151  01149A  CFF3 F09E          	movff	prodl,___flmul@temp
 16152  01149E  CFF4 F09F          	movff	prodh,___flmul@temp+1
 16153                           
 16154                           ; BSR set to: 0
 16155  0114A2  0100               	movlb	0	; () banked
 16156  0114A4  519E               	movf	___flmul@temp& (0+255),w,b
 16157  0114A6  0100               	movlb	0	; () banked
 16158  0114A8  2795               	addwf	___flmul@grs& (0+255),f,b
 16159  0114AA  0100               	movlb	0	; () banked
 16160  0114AC  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16161  0114AE  0100               	movlb	0	; () banked
 16162  0114B0  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 16163  0114B2  0E00               	movlw	0
 16164  0114B4  0100               	movlb	0	; () banked
 16165  0114B6  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 16166  0114B8  0E00               	movlw	0
 16167  0114BA  0100               	movlb	0	; () banked
 16168  0114BC  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 16169                           
 16170                           ; BSR set to: 0
 16171  0114BE  0100               	movlb	0	; () banked
 16172  0114C0  518D               	movf	(___flmul@a+2)& (0+255),w,b
 16173  0114C2  0100               	movlb	0	; () banked
 16174  0114C4  0388               	mulwf	(___flmul@b+1)& (0+255),b
 16175  0114C6  CFF3 F09E          	movff	prodl,___flmul@temp
 16176  0114CA  CFF4 F09F          	movff	prodh,___flmul@temp+1
 16177  0114CE  0100               	movlb	0	; () banked
 16178  0114D0  519E               	movf	___flmul@temp& (0+255),w,b
 16179  0114D2  0100               	movlb	0	; () banked
 16180  0114D4  279A               	addwf	___flmul@prod& (0+255),f,b
 16181  0114D6  0100               	movlb	0	; () banked
 16182  0114D8  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16183  0114DA  0100               	movlb	0	; () banked
 16184  0114DC  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 16185  0114DE  0E00               	movlw	0
 16186  0114E0  0100               	movlb	0	; () banked
 16187  0114E2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 16188  0114E4  0E00               	movlw	0
 16189  0114E6  0100               	movlb	0	; () banked
 16190  0114E8  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 16191                           
 16192                           ; BSR set to: 0
 16193  0114EA  0100               	movlb	0	; () banked
 16194  0114EC  518C               	movf	(___flmul@a+1)& (0+255),w,b
 16195  0114EE  0100               	movlb	0	; () banked
 16196  0114F0  0389               	mulwf	(___flmul@b+2)& (0+255),b
 16197  0114F2  CFF3 F09E          	movff	prodl,___flmul@temp
 16198  0114F6  CFF4 F09F          	movff	prodh,___flmul@temp+1
 16199                           
 16200                           ; BSR set to: 0
 16201  0114FA  0100               	movlb	0	; () banked
 16202  0114FC  519E               	movf	___flmul@temp& (0+255),w,b
 16203  0114FE  0100               	movlb	0	; () banked
 16204  011500  279A               	addwf	___flmul@prod& (0+255),f,b
 16205  011502  0100               	movlb	0	; () banked
 16206  011504  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16207  011506  0100               	movlb	0	; () banked
 16208  011508  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 16209  01150A  0E00               	movlw	0
 16210  01150C  0100               	movlb	0	; () banked
 16211  01150E  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 16212  011510  0E00               	movlw	0
 16213  011512  0100               	movlb	0	; () banked
 16214  011514  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 16215  011516  0100               	movlb	0	; () banked
 16216  011518  518D               	movf	(___flmul@a+2)& (0+255),w,b
 16217  01151A  0100               	movlb	0	; () banked
 16218  01151C  0389               	mulwf	(___flmul@b+2)& (0+255),b
 16219  01151E  CFF3 F09E          	movff	prodl,___flmul@temp
 16220  011522  CFF4 F09F          	movff	prodh,___flmul@temp+1
 16221                           
 16222                           ; BSR set to: 0
 16223  011526  0100               	movlb	0	; () banked
 16224  011528  519E               	movf	___flmul@temp& (0+255),w,b
 16225  01152A  0100               	movlb	0	; () banked
 16226  01152C  6F8F               	movwf	??___flmul& (0+255),b
 16227  01152E  0100               	movlb	0	; () banked
 16228  011530  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16229  011532  0100               	movlb	0	; () banked
 16230  011534  6F90               	movwf	(??___flmul+1)& (0+255),b
 16231  011536  0100               	movlb	0	; () banked
 16232  011538  6B91               	clrf	(??___flmul+2)& (0+255),b
 16233  01153A  0100               	movlb	0	; () banked
 16234  01153C  6B92               	clrf	(??___flmul+3)& (0+255),b
 16235  01153E  C091  F092         	movff	??___flmul+2,??___flmul+3
 16236  011542  C090  F091         	movff	??___flmul+1,??___flmul+2
 16237  011546  C08F  F090         	movff	??___flmul,??___flmul+1
 16238  01154A  0100               	movlb	0	; () banked
 16239  01154C  6B8F               	clrf	??___flmul& (0+255),b
 16240  01154E  0100               	movlb	0	; () banked
 16241  011550  518F               	movf	??___flmul& (0+255),w,b
 16242  011552  0100               	movlb	0	; () banked
 16243  011554  279A               	addwf	___flmul@prod& (0+255),f,b
 16244  011556  0100               	movlb	0	; () banked
 16245  011558  5190               	movf	(??___flmul+1)& (0+255),w,b
 16246  01155A  0100               	movlb	0	; () banked
 16247  01155C  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 16248  01155E  0100               	movlb	0	; () banked
 16249  011560  5191               	movf	(??___flmul+2)& (0+255),w,b
 16250  011562  0100               	movlb	0	; () banked
 16251  011564  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 16252  011566  0100               	movlb	0	; () banked
 16253  011568  5192               	movf	(??___flmul+3)& (0+255),w,b
 16254  01156A  0100               	movlb	0	; () banked
 16255  01156C  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 16256                           
 16257                           ; BSR set to: 0
 16258  01156E  C095  F08F         	movff	___flmul@grs,??___flmul
 16259  011572  C096  F090         	movff	___flmul@grs+1,??___flmul+1
 16260  011576  C097  F091         	movff	___flmul@grs+2,??___flmul+2
 16261  01157A  C098  F092         	movff	___flmul@grs+3,??___flmul+3
 16262  01157E  0E19               	movlw	25
 16263  011580  D006               	goto	u12230
 16264  011582                     u12235:
 16265  011582  0100               	movlb	0	; () banked
 16266  011584  90D8               	bcf	status,0,c
 16267  011586  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 16268  011588  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 16269  01158A  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 16270  01158C  338F               	rrcf	??___flmul& (0+255),f,b
 16271  01158E                     u12230:
 16272  01158E  2EE8               	decfsz	wreg,f,c
 16273  011590  D7F8               	goto	u12235
 16274  011592  0100               	movlb	0	; () banked
 16275  011594  518F               	movf	??___flmul& (0+255),w,b
 16276  011596  0100               	movlb	0	; () banked
 16277  011598  279A               	addwf	___flmul@prod& (0+255),f,b
 16278  01159A  0100               	movlb	0	; () banked
 16279  01159C  5190               	movf	(??___flmul+1)& (0+255),w,b
 16280  01159E  0100               	movlb	0	; () banked
 16281  0115A0  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 16282  0115A2  0100               	movlb	0	; () banked
 16283  0115A4  5191               	movf	(??___flmul+2)& (0+255),w,b
 16284  0115A6  0100               	movlb	0	; () banked
 16285  0115A8  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 16286  0115AA  0100               	movlb	0	; () banked
 16287  0115AC  5192               	movf	(??___flmul+3)& (0+255),w,b
 16288  0115AE  0100               	movlb	0	; () banked
 16289  0115B0  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 16290                           
 16291                           ; BSR set to: 0
 16292  0115B2  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 16293  0115B6  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 16294  0115BA  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 16295  0115BE  0100               	movlb	0	; () banked
 16296  0115C0  6B95               	clrf	___flmul@grs& (0+255),b
 16297                           
 16298                           ; BSR set to: 0
 16299  0115C2  0100               	movlb	0	; () banked
 16300  0115C4  5194               	movf	___flmul@aexp& (0+255),w,b
 16301  0115C6  C099  F08F         	movff	___flmul@bexp,??___flmul
 16302  0115CA  0100               	movlb	0	; () banked
 16303  0115CC  6B90               	clrf	(??___flmul+1)& (0+255),b
 16304  0115CE  0100               	movlb	0	; () banked
 16305  0115D0  278F               	addwf	??___flmul& (0+255),f,b
 16306  0115D2  0E00               	movlw	0
 16307  0115D4  2390               	addwfc	(??___flmul+1)& (0+255),f,b
 16308  0115D6  0E82               	movlw	130
 16309  0115D8  0100               	movlb	0	; () banked
 16310  0115DA  258F               	addwf	??___flmul& (0+255),w,b
 16311  0115DC  0100               	movlb	0	; () banked
 16312  0115DE  6F9E               	movwf	___flmul@temp& (0+255),b
 16313  0115E0  0EFF               	movlw	255
 16314  0115E2  0100               	movlb	0	; () banked
 16315  0115E4  2190               	addwfc	(??___flmul+1)& (0+255),w,b
 16316  0115E6  0100               	movlb	0	; () banked
 16317  0115E8  6F9F               	movwf	(___flmul@temp+1)& (0+255),b
 16318  0115EA  D015               	goto	l3081
 16319  0115EC                     
 16320                           ; BSR set to: 0
 16321                           
 16322                           ; BSR set to: 0
 16323  0115EC  0100               	movlb	0	; () banked
 16324  0115EE  90D8               	bcf	status,0,c
 16325  0115F0  379A               	rlcf	___flmul@prod& (0+255),f,b
 16326  0115F2  379B               	rlcf	(___flmul@prod+1)& (0+255),f,b
 16327  0115F4  379C               	rlcf	(___flmul@prod+2)& (0+255),f,b
 16328  0115F6  379D               	rlcf	(___flmul@prod+3)& (0+255),f,b
 16329                           
 16330                           ; BSR set to: 0
 16331  0115F8  0100               	movlb	0	; () banked
 16332  0115FA  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 16333  0115FC  D002               	goto	l3083
 16334                           
 16335                           ; BSR set to: 0
 16336  0115FE  0100               	movlb	0	; () banked
 16337  011600  819A               	bsf	___flmul@prod& (0+255),0,b
 16338  011602                     l3083:
 16339                           
 16340                           ; BSR set to: 0
 16341  011602  0100               	movlb	0	; () banked
 16342  011604  90D8               	bcf	status,0,c
 16343  011606  3795               	rlcf	___flmul@grs& (0+255),f,b
 16344  011608  3796               	rlcf	(___flmul@grs+1)& (0+255),f,b
 16345  01160A  3797               	rlcf	(___flmul@grs+2)& (0+255),f,b
 16346  01160C  3798               	rlcf	(___flmul@grs+3)& (0+255),f,b
 16347  01160E  0100               	movlb	0	; () banked
 16348  011610  079E               	decf	___flmul@temp& (0+255),f,b
 16349  011612  A0D8               	btfss	status,0,c
 16350  011614  079F               	decf	(___flmul@temp+1)& (0+255),f,b
 16351  011616                     l3081:
 16352                           
 16353                           ; BSR set to: 0
 16354                           
 16355                           ; BSR set to: 0
 16356  011616  0100               	movlb	0	; () banked
 16357  011618  AF9C               	btfss	(___flmul@prod+2)& (0+255),7,b
 16358  01161A  D7E8               	goto	l3082
 16359                           
 16360                           ; BSR set to: 0
 16361                           
 16362                           ; BSR set to: 0
 16363  01161C  0E00               	movlw	0
 16364  01161E  0100               	movlb	0	; () banked
 16365  011620  6F94               	movwf	___flmul@aexp& (0+255),b
 16366                           
 16367                           ; BSR set to: 0
 16368  011622  0100               	movlb	0	; () banked
 16369  011624  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 16370  011626  D024               	goto	l3088
 16371                           
 16372                           ; BSR set to: 0
 16373  011628  0EFF               	movlw	255
 16374  01162A  0100               	movlb	0	; () banked
 16375  01162C  1595               	andwf	___flmul@grs& (0+255),w,b
 16376  01162E  0100               	movlb	0	; () banked
 16377  011630  6F8F               	movwf	??___flmul& (0+255),b
 16378  011632  0EFF               	movlw	255
 16379  011634  0100               	movlb	0	; () banked
 16380  011636  1596               	andwf	(___flmul@grs+1)& (0+255),w,b
 16381  011638  0100               	movlb	0	; () banked
 16382  01163A  6F90               	movwf	(??___flmul+1)& (0+255),b
 16383  01163C  0EFF               	movlw	255
 16384  01163E  0100               	movlb	0	; () banked
 16385  011640  1597               	andwf	(___flmul@grs+2)& (0+255),w,b
 16386  011642  0100               	movlb	0	; () banked
 16387  011644  6F91               	movwf	(??___flmul+2)& (0+255),b
 16388  011646  0E7F               	movlw	127
 16389  011648  0100               	movlb	0	; () banked
 16390  01164A  1598               	andwf	(___flmul@grs+3)& (0+255),w,b
 16391  01164C  0100               	movlb	0	; () banked
 16392  01164E  6F92               	movwf	(??___flmul+3)& (0+255),b
 16393  011650  0100               	movlb	0	; () banked
 16394  011652  518F               	movf	??___flmul& (0+255),w,b
 16395  011654  0100               	movlb	0	; () banked
 16396  011656  1190               	iorwf	(??___flmul+1)& (0+255),w,b
 16397  011658  0100               	movlb	0	; () banked
 16398  01165A  1191               	iorwf	(??___flmul+2)& (0+255),w,b
 16399  01165C  0100               	movlb	0	; () banked
 16400  01165E  1192               	iorwf	(??___flmul+3)& (0+255),w,b
 16401  011660  A4D8               	btfss	status,2,c
 16402  011662  D003               	goto	u12280
 16403                           
 16404                           ; BSR set to: 0
 16405                           
 16406                           ; BSR set to: 0
 16407  011664  0100               	movlb	0	; () banked
 16408  011666  A19A               	btfss	___flmul@prod& (0+255),0,b
 16409  011668  D003               	goto	l3088
 16410  01166A                     u12280:
 16411                           
 16412                           ; BSR set to: 0
 16413  01166A  0E01               	movlw	1
 16414  01166C  0100               	movlb	0	; () banked
 16415  01166E  6F94               	movwf	___flmul@aexp& (0+255),b
 16416  011670                     l3088:
 16417                           
 16418                           ; BSR set to: 0
 16419                           
 16420                           ; BSR set to: 0
 16421                           
 16422                           ; BSR set to: 0
 16423  011670  0100               	movlb	0	; () banked
 16424  011672  5194               	movf	___flmul@aexp& (0+255),w,b
 16425  011674  0100               	movlb	0	; () banked
 16426  011676  B4D8               	btfsc	status,2,c
 16427  011678  D023               	goto	l3090
 16428                           
 16429                           ; BSR set to: 0
 16430  01167A  0E01               	movlw	1
 16431  01167C  0100               	movlb	0	; () banked
 16432  01167E  279A               	addwf	___flmul@prod& (0+255),f,b
 16433  011680  0E00               	movlw	0
 16434  011682  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 16435  011684  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 16436  011686  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 16437                           
 16438                           ; BSR set to: 0
 16439  011688  0100               	movlb	0	; () banked
 16440  01168A  A19D               	btfss	(___flmul@prod+3)& (0+255),0,b
 16441  01168C  D019               	goto	l3090
 16442                           
 16443                           ; BSR set to: 0
 16444  01168E  C09A  F08F         	movff	___flmul@prod,??___flmul
 16445  011692  C09B  F090         	movff	___flmul@prod+1,??___flmul+1
 16446  011696  C09C  F091         	movff	___flmul@prod+2,??___flmul+2
 16447  01169A  C09D  F092         	movff	___flmul@prod+3,??___flmul+3
 16448  01169E  0100               	movlb	0	; () banked
 16449  0116A0  3592               	rlcf	(??___flmul+3)& (0+255),w,b
 16450  0116A2  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 16451  0116A4  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 16452  0116A6  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 16453  0116A8  338F               	rrcf	??___flmul& (0+255),f,b
 16454  0116AA  C08F  F09A         	movff	??___flmul,___flmul@prod
 16455  0116AE  C090  F09B         	movff	??___flmul+1,___flmul@prod+1
 16456  0116B2  C091  F09C         	movff	??___flmul+2,___flmul@prod+2
 16457  0116B6  C092  F09D         	movff	??___flmul+3,___flmul@prod+3
 16458                           
 16459                           ; BSR set to: 0
 16460  0116BA  0100               	movlb	0	; () banked
 16461  0116BC  4B9E               	infsnz	___flmul@temp& (0+255),f,b
 16462  0116BE  2B9F               	incf	(___flmul@temp+1)& (0+255),f,b
 16463  0116C0                     l3090:
 16464                           
 16465                           ; BSR set to: 0
 16466                           
 16467                           ; BSR set to: 0
 16468                           
 16469                           ; BSR set to: 0
 16470  0116C0  0100               	movlb	0	; () banked
 16471  0116C2  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 16472  0116C4  D010               	goto	l3091
 16473  0116C6  0100               	movlb	0	; () banked
 16474  0116C8  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16475  0116CA  E104               	bnz	u12310
 16476  0116CC  0100               	movlb	0	; () banked
 16477  0116CE  299E               	incf	___flmul@temp& (0+255),w,b
 16478  0116D0  A0D8               	btfss	status,0,c
 16479  0116D2  D009               	goto	l3091
 16480  0116D4                     u12310:
 16481                           
 16482                           ; BSR set to: 0
 16483  0116D4  0E00               	movlw	0
 16484  0116D6  0100               	movlb	0	; () banked
 16485  0116D8  6F9A               	movwf	___flmul@prod& (0+255),b
 16486  0116DA  0E00               	movlw	0
 16487  0116DC  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 16488  0116DE  0E80               	movlw	128
 16489  0116E0  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 16490  0116E2  0E7F               	movlw	127
 16491  0116E4  D02B               	goto	L9
 16492  0116E6                     l3091:
 16493                           
 16494                           ; BSR set to: 0
 16495                           
 16496                           ; BSR set to: 0
 16497  0116E6  0100               	movlb	0	; () banked
 16498  0116E8  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 16499  0116EA  D007               	goto	u12320
 16500  0116EC  0100               	movlb	0	; () banked
 16501  0116EE  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 16502  0116F0  E111               	bnz	l3093
 16503  0116F2  0100               	movlb	0	; () banked
 16504  0116F4  059E               	decf	___flmul@temp& (0+255),w,b
 16505  0116F6  B0D8               	btfsc	status,0,c
 16506  0116F8  D00D               	goto	l3093
 16507  0116FA                     u12320:
 16508                           
 16509                           ; BSR set to: 0
 16510  0116FA  0E00               	movlw	0
 16511  0116FC  0100               	movlb	0	; () banked
 16512  0116FE  6F9A               	movwf	___flmul@prod& (0+255),b
 16513  011700  0E00               	movlw	0
 16514  011702  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 16515  011704  0E00               	movlw	0
 16516  011706  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 16517  011708  0E00               	movlw	0
 16518  01170A  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 16519  01170C  0E00               	movlw	0
 16520  01170E  0100               	movlb	0	; () banked
 16521  011710  6F93               	movwf	___flmul@sign& (0+255),b
 16522  011712  D015               	goto	l3094
 16523  011714                     l3093:
 16524                           
 16525                           ; BSR set to: 0
 16526  011714  C09E  F099         	movff	___flmul@temp,___flmul@bexp
 16527                           
 16528                           ; BSR set to: 0
 16529  011718  0EFF               	movlw	255
 16530  01171A  0100               	movlb	0	; () banked
 16531  01171C  179A               	andwf	___flmul@prod& (0+255),f,b
 16532  01171E  0EFF               	movlw	255
 16533  011720  179B               	andwf	(___flmul@prod+1)& (0+255),f,b
 16534  011722  0E7F               	movlw	127
 16535  011724  179C               	andwf	(___flmul@prod+2)& (0+255),f,b
 16536  011726  0E00               	movlw	0
 16537  011728  179D               	andwf	(___flmul@prod+3)& (0+255),f,b
 16538                           
 16539                           ; BSR set to: 0
 16540  01172A  0100               	movlb	0	; () banked
 16541  01172C  A199               	btfss	___flmul@bexp& (0+255),0,b
 16542  01172E  D002               	goto	l3095
 16543                           
 16544                           ; BSR set to: 0
 16545  011730  0100               	movlb	0	; () banked
 16546  011732  8F9C               	bsf	(___flmul@prod+2)& (0+255),7,b
 16547  011734                     l3095:
 16548                           
 16549                           ; BSR set to: 0
 16550                           
 16551                           ; BSR set to: 0
 16552  011734  0100               	movlb	0	; () banked
 16553  011736  90D8               	bcf	status,0,c
 16554  011738  3199               	rrcf	___flmul@bexp& (0+255),w,b
 16555  01173A  0100               	movlb	0	; () banked
 16556  01173C                     L9:
 16557  01173C  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 16558  01173E                     l3094:
 16559                           
 16560                           ; BSR set to: 0
 16561                           
 16562                           ; BSR set to: 0
 16563                           
 16564                           ; BSR set to: 0
 16565  01173E  0100               	movlb	0	; () banked
 16566  011740  5193               	movf	___flmul@sign& (0+255),w,b
 16567  011742  0100               	movlb	0	; () banked
 16568  011744  139D               	iorwf	(___flmul@prod+3)& (0+255),f,b
 16569                           
 16570                           ; BSR set to: 0
 16571  011746  C09A  F087         	movff	___flmul@prod,?___flmul
 16572  01174A  C09B  F088         	movff	___flmul@prod+1,?___flmul+1
 16573  01174E  C09C  F089         	movff	___flmul@prod+2,?___flmul+2
 16574  011752  C09D  F08A         	movff	___flmul@prod+3,?___flmul+3
 16575  011756  0012               	return	
 16576  011758                     __end_of___flmul:
 16577                           	opt stack 0
 16578                           tblptru	equ	0xFF8
 16579                           tblptrh	equ	0xFF7
 16580                           tblptrl	equ	0xFF6
 16581                           tablat	equ	0xFF5
 16582                           prodh	equ	0xFF4
 16583                           prodl	equ	0xFF3
 16584                           intcon	equ	0xFF2
 16585                           postinc0	equ	0xFEE
 16586                           wreg	equ	0xFE8
 16587                           postdec1	equ	0xFE5
 16588                           fsr1h	equ	0xFE2
 16589                           fsr1l	equ	0xFE1
 16590                           indf2	equ	0xFDF
 16591                           postinc2	equ	0xFDE
 16592                           postdec2	equ	0xFDD
 16593                           fsr2h	equ	0xFDA
 16594                           fsr2l	equ	0xFD9
 16595                           status	equ	0xFD8
 16596                           
 16597 ;; *************** function ___fldiv *****************
 16598 ;; Defined at:
 16599 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 16600 ;; Parameters:    Size  Location     Type
 16601 ;;  b               4   14[BANK0 ] unsigned char 
 16602 ;;  a               4   18[BANK0 ] unsigned char 
 16603 ;; Auto vars:     Size  Location     Type
 16604 ;;  grs             4   33[BANK0 ] unsigned long 
 16605 ;;  rem             4   27[BANK0 ] unsigned long 
 16606 ;;  new_exp         2   31[BANK0 ] int 
 16607 ;;  aexp            1   38[BANK0 ] unsigned char 
 16608 ;;  bexp            1   37[BANK0 ] unsigned char 
 16609 ;;  sign            1   26[BANK0 ] unsigned char 
 16610 ;; Return value:  Size  Location     Type
 16611 ;;                  4   14[BANK0 ] unsigned char 
 16612 ;; Registers used:
 16613 ;;		wreg, status,2, status,0
 16614 ;; Tracked objects:
 16615 ;;		On entry : 0/0
 16616 ;;		On exit  : 0/0
 16617 ;;		Unchanged: 0/0
 16618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16619 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16620 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16621 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16622 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16623 ;;Total ram usage:       25 bytes
 16624 ;; Hardware stack levels used:    1
 16625 ;; Hardware stack levels required when called:    7
 16626 ;; This function calls:
 16627 ;;		Nothing
 16628 ;; This function is called by:
 16629 ;;		_ADC_Voltage
 16630 ;;		_mode1
 16631 ;;		_mode4
 16632 ;; This function uses a non-reentrant model
 16633 ;;
 16634                           
 16635                           	psect	text56
 16636  0123C2                     __ptext56:
 16637                           	opt stack 0
 16638  0123C2                     ___fldiv:
 16639                           	opt stack 22
 16640                           
 16641                           ; BSR set to: 0
 16642                           ;incstack = 0
 16643  0123C2  0100               	movlb	0	; () banked
 16644  0123C4  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 16645  0123C6  0B80               	andlw	128
 16646  0123C8  0100               	movlb	0	; () banked
 16647  0123CA  6F7A               	movwf	___fldiv@sign& (0+255),b
 16648  0123CC  0100               	movlb	0	; () banked
 16649  0123CE  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 16650  0123D0  2571               	addwf	(___fldiv@b+3)& (0+255),w,b
 16651  0123D2  0100               	movlb	0	; () banked
 16652  0123D4  6F85               	movwf	___fldiv@bexp& (0+255),b
 16653                           
 16654                           ; BSR set to: 0
 16655  0123D6  0100               	movlb	0	; () banked
 16656  0123D8  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 16657  0123DA  D002               	goto	l3035
 16658                           
 16659                           ; BSR set to: 0
 16660  0123DC  0100               	movlb	0	; () banked
 16661  0123DE  8185               	bsf	___fldiv@bexp& (0+255),0,b
 16662  0123E0                     l3035:
 16663                           
 16664                           ; BSR set to: 0
 16665                           
 16666                           ; BSR set to: 0
 16667  0123E0  0100               	movlb	0	; () banked
 16668  0123E2  5185               	movf	___fldiv@bexp& (0+255),w,b
 16669  0123E4  0100               	movlb	0	; () banked
 16670  0123E6  B4D8               	btfsc	status,2,c
 16671  0123E8  D012               	goto	l3036
 16672                           
 16673                           ; BSR set to: 0
 16674  0123EA  0100               	movlb	0	; () banked
 16675  0123EC  2985               	incf	___fldiv@bexp& (0+255),w,b
 16676  0123EE  A4D8               	btfss	status,2,c
 16677  0123F0  D009               	goto	l3037
 16678                           
 16679                           ; BSR set to: 0
 16680  0123F2  0E00               	movlw	0
 16681  0123F4  0100               	movlb	0	; () banked
 16682  0123F6  6F6E               	movwf	___fldiv@b& (0+255),b
 16683  0123F8  0E00               	movlw	0
 16684  0123FA  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 16685  0123FC  0E00               	movlw	0
 16686  0123FE  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 16687  012400  0E00               	movlw	0
 16688  012402  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 16689  012404                     l3037:
 16690                           
 16691                           ; BSR set to: 0
 16692                           
 16693                           ; BSR set to: 0
 16694  012404  0100               	movlb	0	; () banked
 16695  012406  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 16696                           
 16697                           ; BSR set to: 0
 16698  012408  0E00               	movlw	0
 16699  01240A  0100               	movlb	0	; () banked
 16700  01240C  D008               	goto	L10
 16701  01240E                     l3036:
 16702                           
 16703                           ; BSR set to: 0
 16704                           
 16705                           ; BSR set to: 0
 16706  01240E  0E00               	movlw	0
 16707  012410  0100               	movlb	0	; () banked
 16708  012412  6F6E               	movwf	___fldiv@b& (0+255),b
 16709  012414  0E00               	movlw	0
 16710  012416  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 16711  012418  0E00               	movlw	0
 16712  01241A  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 16713  01241C  0E00               	movlw	0
 16714  01241E                     L10:
 16715  01241E  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 16716                           
 16717                           ; BSR set to: 0
 16718                           
 16719                           ; BSR set to: 0
 16720  012420  0100               	movlb	0	; () banked
 16721  012422  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 16722  012424  0B80               	andlw	128
 16723  012426  0100               	movlb	0	; () banked
 16724  012428  1B7A               	xorwf	___fldiv@sign& (0+255),f,b
 16725                           
 16726                           ; BSR set to: 0
 16727  01242A  0100               	movlb	0	; () banked
 16728  01242C  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 16729  01242E  2575               	addwf	(___fldiv@a+3)& (0+255),w,b
 16730  012430  0100               	movlb	0	; () banked
 16731  012432  6F86               	movwf	___fldiv@aexp& (0+255),b
 16732                           
 16733                           ; BSR set to: 0
 16734  012434  0100               	movlb	0	; () banked
 16735  012436  AF74               	btfss	(___fldiv@a+2)& (0+255),7,b
 16736  012438  D002               	goto	l3039
 16737                           
 16738                           ; BSR set to: 0
 16739  01243A  0100               	movlb	0	; () banked
 16740  01243C  8186               	bsf	___fldiv@aexp& (0+255),0,b
 16741  01243E                     l3039:
 16742                           
 16743                           ; BSR set to: 0
 16744                           
 16745                           ; BSR set to: 0
 16746  01243E  0100               	movlb	0	; () banked
 16747  012440  5186               	movf	___fldiv@aexp& (0+255),w,b
 16748  012442  0100               	movlb	0	; () banked
 16749  012444  B4D8               	btfsc	status,2,c
 16750  012446  D012               	goto	l3040
 16751                           
 16752                           ; BSR set to: 0
 16753  012448  0100               	movlb	0	; () banked
 16754  01244A  2986               	incf	___fldiv@aexp& (0+255),w,b
 16755  01244C  A4D8               	btfss	status,2,c
 16756  01244E  D009               	goto	l3041
 16757                           
 16758                           ; BSR set to: 0
 16759  012450  0E00               	movlw	0
 16760  012452  0100               	movlb	0	; () banked
 16761  012454  6F72               	movwf	___fldiv@a& (0+255),b
 16762  012456  0E00               	movlw	0
 16763  012458  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 16764  01245A  0E00               	movlw	0
 16765  01245C  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 16766  01245E  0E00               	movlw	0
 16767  012460  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 16768  012462                     l3041:
 16769                           
 16770                           ; BSR set to: 0
 16771                           
 16772                           ; BSR set to: 0
 16773  012462  0100               	movlb	0	; () banked
 16774  012464  8F74               	bsf	(___fldiv@a+2)& (0+255),7,b
 16775                           
 16776                           ; BSR set to: 0
 16777  012466  0E00               	movlw	0
 16778  012468  0100               	movlb	0	; () banked
 16779  01246A  D008               	goto	L11
 16780  01246C                     l3040:
 16781                           
 16782                           ; BSR set to: 0
 16783                           
 16784                           ; BSR set to: 0
 16785  01246C  0E00               	movlw	0
 16786  01246E  0100               	movlb	0	; () banked
 16787  012470  6F72               	movwf	___fldiv@a& (0+255),b
 16788  012472  0E00               	movlw	0
 16789  012474  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 16790  012476  0E00               	movlw	0
 16791  012478  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 16792  01247A  0E00               	movlw	0
 16793  01247C                     L11:
 16794  01247C  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 16795                           
 16796                           ; BSR set to: 0
 16797                           
 16798                           ; BSR set to: 0
 16799  01247E  0100               	movlb	0	; () banked
 16800  012480  5172               	movf	___fldiv@a& (0+255),w,b
 16801  012482  0100               	movlb	0	; () banked
 16802  012484  1173               	iorwf	(___fldiv@a+1)& (0+255),w,b
 16803  012486  0100               	movlb	0	; () banked
 16804  012488  1174               	iorwf	(___fldiv@a+2)& (0+255),w,b
 16805  01248A  0100               	movlb	0	; () banked
 16806  01248C  1175               	iorwf	(___fldiv@a+3)& (0+255),w,b
 16807  01248E  A4D8               	btfss	status,2,c
 16808  012490  D017               	goto	l3043
 16809                           
 16810                           ; BSR set to: 0
 16811  012492  0E00               	movlw	0
 16812  012494  0100               	movlb	0	; () banked
 16813  012496  6F6E               	movwf	___fldiv@b& (0+255),b
 16814  012498  0E00               	movlw	0
 16815  01249A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 16816  01249C  0E00               	movlw	0
 16817  01249E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 16818  0124A0  0E00               	movlw	0
 16819  0124A2  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 16820                           
 16821                           ; BSR set to: 0
 16822  0124A4  0100               	movlb	0	; () banked
 16823  0124A6  0E80               	movlw	128
 16824  0124A8  1370               	iorwf	(___fldiv@b+2)& (0+255),f,b
 16825  0124AA  0E7F               	movlw	127
 16826  0124AC  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 16827                           
 16828                           ; BSR set to: 0
 16829  0124AE  C06E  F06E         	movff	___fldiv@b,?___fldiv
 16830  0124B2  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 16831  0124B6  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 16832  0124BA  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 16833                           
 16834                           ; BSR set to: 0
 16835  0124BE  0012               	return	
 16836  0124C0                     l3043:
 16837                           
 16838                           ; BSR set to: 0
 16839                           
 16840                           ; BSR set to: 0
 16841  0124C0  0100               	movlb	0	; () banked
 16842  0124C2  5185               	movf	___fldiv@bexp& (0+255),w,b
 16843  0124C4  0100               	movlb	0	; () banked
 16844  0124C6  A4D8               	btfss	status,2,c
 16845  0124C8  D012               	goto	l3045
 16846                           
 16847                           ; BSR set to: 0
 16848  0124CA  0E00               	movlw	0
 16849  0124CC  0100               	movlb	0	; () banked
 16850  0124CE  6F6E               	movwf	___fldiv@b& (0+255),b
 16851  0124D0  0E00               	movlw	0
 16852  0124D2  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 16853  0124D4  0E00               	movlw	0
 16854  0124D6  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 16855  0124D8  0E00               	movlw	0
 16856  0124DA  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 16857                           
 16858                           ; BSR set to: 0
 16859  0124DC  C06E  F06E         	movff	___fldiv@b,?___fldiv
 16860  0124E0  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 16861  0124E4  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 16862  0124E8  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 16863                           
 16864                           ; BSR set to: 0
 16865  0124EC  0012               	return	
 16866  0124EE                     l3045:
 16867                           
 16868                           ; BSR set to: 0
 16869                           
 16870                           ; BSR set to: 0
 16871  0124EE  0100               	movlb	0	; () banked
 16872  0124F0  5186               	movf	___fldiv@aexp& (0+255),w,b
 16873  0124F2  0100               	movlb	0	; () banked
 16874  0124F4  6F76               	movwf	??___fldiv& (0+255),b
 16875  0124F6  6B77               	clrf	(??___fldiv+1)& (0+255),b
 16876  0124F8  0100               	movlb	0	; () banked
 16877  0124FA  1F76               	comf	??___fldiv& (0+255),f,b
 16878  0124FC  1F77               	comf	(??___fldiv+1)& (0+255),f,b
 16879  0124FE  4B76               	infsnz	??___fldiv& (0+255),f,b
 16880  012500  2B77               	incf	(??___fldiv+1)& (0+255),f,b
 16881  012502  0100               	movlb	0	; () banked
 16882  012504  5185               	movf	___fldiv@bexp& (0+255),w,b
 16883  012506  0100               	movlb	0	; () banked
 16884  012508  6F78               	movwf	(??___fldiv+2)& (0+255),b
 16885  01250A  6B79               	clrf	(??___fldiv+3)& (0+255),b
 16886  01250C  0100               	movlb	0	; () banked
 16887  01250E  5176               	movf	??___fldiv& (0+255),w,b
 16888  012510  0100               	movlb	0	; () banked
 16889  012512  2778               	addwf	(??___fldiv+2)& (0+255),f,b
 16890  012514  0100               	movlb	0	; () banked
 16891  012516  5177               	movf	(??___fldiv+1)& (0+255),w,b
 16892  012518  0100               	movlb	0	; () banked
 16893  01251A  2379               	addwfc	(??___fldiv+3)& (0+255),f,b
 16894  01251C  0E7F               	movlw	127
 16895  01251E  0100               	movlb	0	; () banked
 16896  012520  2578               	addwf	(??___fldiv+2)& (0+255),w,b
 16897  012522  0100               	movlb	0	; () banked
 16898  012524  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 16899  012526  0E00               	movlw	0
 16900  012528  0100               	movlb	0	; () banked
 16901  01252A  2179               	addwfc	(??___fldiv+3)& (0+255),w,b
 16902  01252C  0100               	movlb	0	; () banked
 16903  01252E  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16904                           
 16905                           ; BSR set to: 0
 16906  012530  C06E  F07B         	movff	___fldiv@b,___fldiv@rem
 16907  012534  C06F  F07C         	movff	___fldiv@b+1,___fldiv@rem+1
 16908  012538  C070  F07D         	movff	___fldiv@b+2,___fldiv@rem+2
 16909  01253C  C071  F07E         	movff	___fldiv@b+3,___fldiv@rem+3
 16910                           
 16911                           ; BSR set to: 0
 16912  012540  0E00               	movlw	0
 16913  012542  0100               	movlb	0	; () banked
 16914  012544  6F6E               	movwf	___fldiv@b& (0+255),b
 16915  012546  0E00               	movlw	0
 16916  012548  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 16917  01254A  0E00               	movlw	0
 16918  01254C  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 16919  01254E  0E00               	movlw	0
 16920  012550  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 16921                           
 16922                           ; BSR set to: 0
 16923  012552  0E00               	movlw	0
 16924  012554  0100               	movlb	0	; () banked
 16925  012556  6F81               	movwf	___fldiv@grs& (0+255),b
 16926  012558  0E00               	movlw	0
 16927  01255A  6F82               	movwf	(___fldiv@grs+1)& (0+255),b
 16928  01255C  0E00               	movlw	0
 16929  01255E  6F83               	movwf	(___fldiv@grs+2)& (0+255),b
 16930  012560  0E00               	movlw	0
 16931  012562  6F84               	movwf	(___fldiv@grs+3)& (0+255),b
 16932                           
 16933                           ; BSR set to: 0
 16934  012564  0E00               	movlw	0
 16935  012566  0100               	movlb	0	; () banked
 16936  012568  6F86               	movwf	___fldiv@aexp& (0+255),b
 16937  01256A  D042               	goto	l3046
 16938  01256C                     
 16939                           ; BSR set to: 0
 16940                           
 16941                           ; BSR set to: 0
 16942  01256C  0100               	movlb	0	; () banked
 16943  01256E  5186               	movf	___fldiv@aexp& (0+255),w,b
 16944  012570  0100               	movlb	0	; () banked
 16945  012572  B4D8               	btfsc	status,2,c
 16946  012574  D017               	goto	l3048
 16947                           
 16948                           ; BSR set to: 0
 16949  012576  0100               	movlb	0	; () banked
 16950  012578  90D8               	bcf	status,0,c
 16951  01257A  377B               	rlcf	___fldiv@rem& (0+255),f,b
 16952  01257C  377C               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 16953  01257E  377D               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 16954  012580  377E               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 16955  012582  0100               	movlb	0	; () banked
 16956  012584  90D8               	bcf	status,0,c
 16957  012586  376E               	rlcf	___fldiv@b& (0+255),f,b
 16958  012588  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16959  01258A  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16960  01258C  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16961                           
 16962                           ; BSR set to: 0
 16963  01258E  0100               	movlb	0	; () banked
 16964  012590  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 16965  012592  D002               	goto	l3049
 16966                           
 16967                           ; BSR set to: 0
 16968  012594  0100               	movlb	0	; () banked
 16969  012596  816E               	bsf	___fldiv@b& (0+255),0,b
 16970  012598                     l3049:
 16971                           
 16972                           ; BSR set to: 0
 16973  012598  0100               	movlb	0	; () banked
 16974  01259A  90D8               	bcf	status,0,c
 16975  01259C  3781               	rlcf	___fldiv@grs& (0+255),f,b
 16976  01259E  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16977  0125A0  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16978  0125A2  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16979  0125A4                     l3048:
 16980                           
 16981                           ; BSR set to: 0
 16982                           
 16983                           ; BSR set to: 0
 16984  0125A4  0100               	movlb	0	; () banked
 16985  0125A6  5172               	movf	___fldiv@a& (0+255),w,b
 16986  0125A8  0100               	movlb	0	; () banked
 16987  0125AA  5D7B               	subwf	___fldiv@rem& (0+255),w,b
 16988  0125AC  0100               	movlb	0	; () banked
 16989  0125AE  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 16990  0125B0  0100               	movlb	0	; () banked
 16991  0125B2  597C               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 16992  0125B4  0100               	movlb	0	; () banked
 16993  0125B6  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 16994  0125B8  0100               	movlb	0	; () banked
 16995  0125BA  597D               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 16996  0125BC  0100               	movlb	0	; () banked
 16997  0125BE  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 16998  0125C0  0100               	movlb	0	; () banked
 16999  0125C2  597E               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 17000  0125C4  A0D8               	btfss	status,0,c
 17001  0125C6  D012               	goto	l3050
 17002                           
 17003                           ; BSR set to: 0
 17004  0125C8  0100               	movlb	0	; () banked
 17005  0125CA  8D84               	bsf	(___fldiv@grs+3)& (0+255),6,b
 17006                           
 17007                           ; BSR set to: 0
 17008  0125CC  0100               	movlb	0	; () banked
 17009  0125CE  5172               	movf	___fldiv@a& (0+255),w,b
 17010  0125D0  0100               	movlb	0	; () banked
 17011  0125D2  5F7B               	subwf	___fldiv@rem& (0+255),f,b
 17012  0125D4  0100               	movlb	0	; () banked
 17013  0125D6  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 17014  0125D8  0100               	movlb	0	; () banked
 17015  0125DA  5B7C               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 17016  0125DC  0100               	movlb	0	; () banked
 17017  0125DE  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 17018  0125E0  0100               	movlb	0	; () banked
 17019  0125E2  5B7D               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 17020  0125E4  0100               	movlb	0	; () banked
 17021  0125E6  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 17022  0125E8  0100               	movlb	0	; () banked
 17023  0125EA  5B7E               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 17024  0125EC                     l3050:
 17025                           
 17026                           ; BSR set to: 0
 17027                           
 17028                           ; BSR set to: 0
 17029  0125EC  0100               	movlb	0	; () banked
 17030  0125EE  2B86               	incf	___fldiv@aexp& (0+255),f,b
 17031  0125F0                     l3046:
 17032                           
 17033                           ; BSR set to: 0
 17034  0125F0  0E19               	movlw	25
 17035  0125F2  0100               	movlb	0	; () banked
 17036  0125F4  6586               	cpfsgt	___fldiv@aexp& (0+255),b
 17037  0125F6  D7BA               	goto	l3047
 17038                           
 17039                           ; BSR set to: 0
 17040                           
 17041                           ; BSR set to: 0
 17042  0125F8  0100               	movlb	0	; () banked
 17043  0125FA  517B               	movf	___fldiv@rem& (0+255),w,b
 17044  0125FC  0100               	movlb	0	; () banked
 17045  0125FE  117C               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 17046  012600  0100               	movlb	0	; () banked
 17047  012602  117D               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 17048  012604  0100               	movlb	0	; () banked
 17049  012606  117E               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 17050  012608  B4D8               	btfsc	status,2,c
 17051  01260A  D018               	goto	l3053
 17052                           
 17053                           ; BSR set to: 0
 17054  01260C  0100               	movlb	0	; () banked
 17055  01260E  8181               	bsf	___fldiv@grs& (0+255),0,b
 17056                           
 17057                           ; BSR set to: 0
 17058  012610  D015               	goto	l3053
 17059  012612                     
 17060                           ; BSR set to: 0
 17061                           
 17062                           ; BSR set to: 0
 17063  012612  0100               	movlb	0	; () banked
 17064  012614  90D8               	bcf	status,0,c
 17065  012616  376E               	rlcf	___fldiv@b& (0+255),f,b
 17066  012618  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 17067  01261A  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 17068  01261C  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 17069                           
 17070                           ; BSR set to: 0
 17071  01261E  0100               	movlb	0	; () banked
 17072  012620  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 17073  012622  D002               	goto	l3055
 17074                           
 17075                           ; BSR set to: 0
 17076  012624  0100               	movlb	0	; () banked
 17077  012626  816E               	bsf	___fldiv@b& (0+255),0,b
 17078  012628                     l3055:
 17079                           
 17080                           ; BSR set to: 0
 17081  012628  0100               	movlb	0	; () banked
 17082  01262A  90D8               	bcf	status,0,c
 17083  01262C  3781               	rlcf	___fldiv@grs& (0+255),f,b
 17084  01262E  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 17085  012630  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 17086  012632  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 17087  012634  0100               	movlb	0	; () banked
 17088  012636  077F               	decf	___fldiv@new_exp& (0+255),f,b
 17089  012638  A0D8               	btfss	status,0,c
 17090  01263A  0780               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 17091  01263C                     l3053:
 17092                           
 17093                           ; BSR set to: 0
 17094                           
 17095                           ; BSR set to: 0
 17096  01263C  0100               	movlb	0	; () banked
 17097  01263E  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 17098  012640  D7E8               	goto	l3054
 17099                           
 17100                           ; BSR set to: 0
 17101                           
 17102                           ; BSR set to: 0
 17103  012642  0E00               	movlw	0
 17104  012644  0100               	movlb	0	; () banked
 17105  012646  6F86               	movwf	___fldiv@aexp& (0+255),b
 17106                           
 17107                           ; BSR set to: 0
 17108  012648  0100               	movlb	0	; () banked
 17109  01264A  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 17110  01264C  D024               	goto	l3060
 17111                           
 17112                           ; BSR set to: 0
 17113  01264E  0EFF               	movlw	255
 17114  012650  0100               	movlb	0	; () banked
 17115  012652  1581               	andwf	___fldiv@grs& (0+255),w,b
 17116  012654  0100               	movlb	0	; () banked
 17117  012656  6F76               	movwf	??___fldiv& (0+255),b
 17118  012658  0EFF               	movlw	255
 17119  01265A  0100               	movlb	0	; () banked
 17120  01265C  1582               	andwf	(___fldiv@grs+1)& (0+255),w,b
 17121  01265E  0100               	movlb	0	; () banked
 17122  012660  6F77               	movwf	(??___fldiv+1)& (0+255),b
 17123  012662  0EFF               	movlw	255
 17124  012664  0100               	movlb	0	; () banked
 17125  012666  1583               	andwf	(___fldiv@grs+2)& (0+255),w,b
 17126  012668  0100               	movlb	0	; () banked
 17127  01266A  6F78               	movwf	(??___fldiv+2)& (0+255),b
 17128  01266C  0E7F               	movlw	127
 17129  01266E  0100               	movlb	0	; () banked
 17130  012670  1584               	andwf	(___fldiv@grs+3)& (0+255),w,b
 17131  012672  0100               	movlb	0	; () banked
 17132  012674  6F79               	movwf	(??___fldiv+3)& (0+255),b
 17133  012676  0100               	movlb	0	; () banked
 17134  012678  5176               	movf	??___fldiv& (0+255),w,b
 17135  01267A  0100               	movlb	0	; () banked
 17136  01267C  1177               	iorwf	(??___fldiv+1)& (0+255),w,b
 17137  01267E  0100               	movlb	0	; () banked
 17138  012680  1178               	iorwf	(??___fldiv+2)& (0+255),w,b
 17139  012682  0100               	movlb	0	; () banked
 17140  012684  1179               	iorwf	(??___fldiv+3)& (0+255),w,b
 17141  012686  A4D8               	btfss	status,2,c
 17142  012688  D003               	goto	u8120
 17143                           
 17144                           ; BSR set to: 0
 17145                           
 17146                           ; BSR set to: 0
 17147  01268A  0100               	movlb	0	; () banked
 17148  01268C  A16E               	btfss	___fldiv@b& (0+255),0,b
 17149  01268E  D003               	goto	l3060
 17150  012690                     u8120:
 17151                           
 17152                           ; BSR set to: 0
 17153  012690  0E01               	movlw	1
 17154  012692  0100               	movlb	0	; () banked
 17155  012694  6F86               	movwf	___fldiv@aexp& (0+255),b
 17156  012696                     l3060:
 17157                           
 17158                           ; BSR set to: 0
 17159                           
 17160                           ; BSR set to: 0
 17161                           
 17162                           ; BSR set to: 0
 17163  012696  0100               	movlb	0	; () banked
 17164  012698  5186               	movf	___fldiv@aexp& (0+255),w,b
 17165  01269A  0100               	movlb	0	; () banked
 17166  01269C  B4D8               	btfsc	status,2,c
 17167  01269E  D023               	goto	l3062
 17168                           
 17169                           ; BSR set to: 0
 17170  0126A0  0E01               	movlw	1
 17171  0126A2  0100               	movlb	0	; () banked
 17172  0126A4  276E               	addwf	___fldiv@b& (0+255),f,b
 17173  0126A6  0E00               	movlw	0
 17174  0126A8  236F               	addwfc	(___fldiv@b+1)& (0+255),f,b
 17175  0126AA  2370               	addwfc	(___fldiv@b+2)& (0+255),f,b
 17176  0126AC  2371               	addwfc	(___fldiv@b+3)& (0+255),f,b
 17177                           
 17178                           ; BSR set to: 0
 17179  0126AE  0100               	movlb	0	; () banked
 17180  0126B0  A171               	btfss	(___fldiv@b+3)& (0+255),0,b
 17181  0126B2  D019               	goto	l3062
 17182                           
 17183                           ; BSR set to: 0
 17184  0126B4  C06E  F076         	movff	___fldiv@b,??___fldiv
 17185  0126B8  C06F  F077         	movff	___fldiv@b+1,??___fldiv+1
 17186  0126BC  C070  F078         	movff	___fldiv@b+2,??___fldiv+2
 17187  0126C0  C071  F079         	movff	___fldiv@b+3,??___fldiv+3
 17188  0126C4  0100               	movlb	0	; () banked
 17189  0126C6  3579               	rlcf	(??___fldiv+3)& (0+255),w,b
 17190  0126C8  3379               	rrcf	(??___fldiv+3)& (0+255),f,b
 17191  0126CA  3378               	rrcf	(??___fldiv+2)& (0+255),f,b
 17192  0126CC  3377               	rrcf	(??___fldiv+1)& (0+255),f,b
 17193  0126CE  3376               	rrcf	??___fldiv& (0+255),f,b
 17194  0126D0  C076  F06E         	movff	??___fldiv,___fldiv@b
 17195  0126D4  C077  F06F         	movff	??___fldiv+1,___fldiv@b+1
 17196  0126D8  C078  F070         	movff	??___fldiv+2,___fldiv@b+2
 17197  0126DC  C079  F071         	movff	??___fldiv+3,___fldiv@b+3
 17198                           
 17199                           ; BSR set to: 0
 17200  0126E0  0100               	movlb	0	; () banked
 17201  0126E2  4B7F               	infsnz	___fldiv@new_exp& (0+255),f,b
 17202  0126E4  2B80               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 17203  0126E6                     l3062:
 17204                           
 17205                           ; BSR set to: 0
 17206                           
 17207                           ; BSR set to: 0
 17208                           
 17209                           ; BSR set to: 0
 17210  0126E6  0100               	movlb	0	; () banked
 17211  0126E8  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17212  0126EA  D014               	goto	l3063
 17213  0126EC  0100               	movlb	0	; () banked
 17214  0126EE  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17215  0126F0  E104               	bnz	u8150
 17216  0126F2  0100               	movlb	0	; () banked
 17217  0126F4  297F               	incf	___fldiv@new_exp& (0+255),w,b
 17218  0126F6  A0D8               	btfss	status,0,c
 17219  0126F8  D00D               	goto	l3063
 17220  0126FA                     u8150:
 17221                           
 17222                           ; BSR set to: 0
 17223  0126FA  0E00               	movlw	0
 17224  0126FC  0100               	movlb	0	; () banked
 17225  0126FE  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17226  012700  697F               	setf	___fldiv@new_exp& (0+255),b
 17227  012702  0E00               	movlw	0
 17228  012704  0100               	movlb	0	; () banked
 17229  012706  6F6E               	movwf	___fldiv@b& (0+255),b
 17230  012708  0E00               	movlw	0
 17231  01270A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 17232  01270C  0E00               	movlw	0
 17233  01270E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 17234  012710  0E00               	movlw	0
 17235  012712  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 17236  012714                     l3063:
 17237                           
 17238                           ; BSR set to: 0
 17239                           
 17240                           ; BSR set to: 0
 17241  012714  0100               	movlb	0	; () banked
 17242  012716  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17243  012718  D007               	goto	u8160
 17244  01271A  0100               	movlb	0	; () banked
 17245  01271C  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17246  01271E  E115               	bnz	l10962
 17247  012720  0100               	movlb	0	; () banked
 17248  012722  057F               	decf	___fldiv@new_exp& (0+255),w,b
 17249  012724  B0D8               	btfsc	status,0,c
 17250  012726  D011               	goto	l3064
 17251  012728                     u8160:
 17252                           
 17253                           ; BSR set to: 0
 17254  012728  0E00               	movlw	0
 17255  01272A  0100               	movlb	0	; () banked
 17256  01272C  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17257  01272E  0E00               	movlw	0
 17258  012730  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 17259  012732  0E00               	movlw	0
 17260  012734  0100               	movlb	0	; () banked
 17261  012736  6F6E               	movwf	___fldiv@b& (0+255),b
 17262  012738  0E00               	movlw	0
 17263  01273A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 17264  01273C  0E00               	movlw	0
 17265  01273E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 17266  012740  0E00               	movlw	0
 17267  012742  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 17268  012744  0E00               	movlw	0
 17269  012746  0100               	movlb	0	; () banked
 17270  012748  6F7A               	movwf	___fldiv@sign& (0+255),b
 17271  01274A                     l3064:
 17272  01274A                     l10962:
 17273                           
 17274                           ; BSR set to: 0
 17275  01274A  C07F  F085         	movff	___fldiv@new_exp,___fldiv@bexp
 17276                           
 17277                           ; BSR set to: 0
 17278  01274E  0100               	movlb	0	; () banked
 17279  012750  A185               	btfss	___fldiv@bexp& (0+255),0,b
 17280  012752  D003               	goto	l3065
 17281                           
 17282                           ; BSR set to: 0
 17283  012754  0100               	movlb	0	; () banked
 17284  012756  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 17285  012758  D002               	goto	l3066
 17286  01275A                     l3065:
 17287                           
 17288                           ; BSR set to: 0
 17289                           
 17290                           ; BSR set to: 0
 17291  01275A  0100               	movlb	0	; () banked
 17292  01275C  9F70               	bcf	(___fldiv@b+2)& (0+255),7,b
 17293  01275E                     l3066:
 17294                           
 17295                           ; BSR set to: 0
 17296                           
 17297                           ; BSR set to: 0
 17298  01275E  0100               	movlb	0	; () banked
 17299  012760  90D8               	bcf	status,0,c
 17300  012762  3185               	rrcf	___fldiv@bexp& (0+255),w,b
 17301  012764  0100               	movlb	0	; () banked
 17302  012766  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 17303                           
 17304                           ; BSR set to: 0
 17305  012768  0100               	movlb	0	; () banked
 17306  01276A  517A               	movf	___fldiv@sign& (0+255),w,b
 17307  01276C  0100               	movlb	0	; () banked
 17308  01276E  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 17309                           
 17310                           ; BSR set to: 0
 17311  012770  C06E  F06E         	movff	___fldiv@b,?___fldiv
 17312  012774  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 17313  012778  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 17314  01277C  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 17315  012780  0012               	return	
 17316  012782                     __end_of___fldiv:
 17317                           	opt stack 0
 17318                           tblptru	equ	0xFF8
 17319                           tblptrh	equ	0xFF7
 17320                           tblptrl	equ	0xFF6
 17321                           tablat	equ	0xFF5
 17322                           prodh	equ	0xFF4
 17323                           prodl	equ	0xFF3
 17324                           intcon	equ	0xFF2
 17325                           postinc0	equ	0xFEE
 17326                           wreg	equ	0xFE8
 17327                           postdec1	equ	0xFE5
 17328                           fsr1h	equ	0xFE2
 17329                           fsr1l	equ	0xFE1
 17330                           indf2	equ	0xFDF
 17331                           postinc2	equ	0xFDE
 17332                           postdec2	equ	0xFDD
 17333                           fsr2h	equ	0xFDA
 17334                           fsr2l	equ	0xFD9
 17335                           status	equ	0xFD8
 17336                           
 17337 ;; *************** function _init *****************
 17338 ;; Defined at:
 17339 ;;		line 62 in file "main.c"
 17340 ;; Parameters:    Size  Location     Type
 17341 ;;		None
 17342 ;; Auto vars:     Size  Location     Type
 17343 ;;		None
 17344 ;; Return value:  Size  Location     Type
 17345 ;;                  1    wreg      void 
 17346 ;; Registers used:
 17347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 17348 ;; Tracked objects:
 17349 ;;		On entry : 0/0
 17350 ;;		On exit  : 0/0
 17351 ;;		Unchanged: 0/0
 17352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17357 ;;Total ram usage:        0 bytes
 17358 ;; Hardware stack levels used:    1
 17359 ;; Hardware stack levels required when called:   17
 17360 ;; This function calls:
 17361 ;;		_ADC_Init
 17362 ;;		_ADC_Start
 17363 ;;		_Console_Init
 17364 ;;		_HMI_Init
 17365 ;;		_ISR_Enable
 17366 ;;		_LCD_Init
 17367 ;;		_MXK_BlockSwitchTo
 17368 ;;		_MXK_Dequeue
 17369 ;;		_MXK_Init
 17370 ;;		_MXK_Release
 17371 ;;		_Motor_Init
 17372 ;;		_delay_ms
 17373 ;;		_eusart_init
 17374 ;;		_irobot_init
 17375 ;;		_irobot_init_song_0
 17376 ;;		_irobot_led_power_on
 17377 ;; This function is called by:
 17378 ;;		_main
 17379 ;; This function uses a non-reentrant model
 17380 ;;
 17381                           
 17382                           	psect	text57
 17383  015F92                     __ptext57:
 17384                           	opt stack 0
 17385  015F92                     _init:
 17386                           	opt stack 13
 17387                           
 17388                           ;main.c: 64: MXK_Init();
 17389                           
 17390                           ; BSR set to: 0
 17391                           ;incstack = 0
 17392  015F92  EC22  F0A3         	call	_MXK_Init	;wreg free
 17393                           
 17394                           ;main.c: 67: ISR_Enable();
 17395  015F96  EC53  F0C0         	call	_ISR_Enable	;wreg free
 17396                           
 17397                           ;main.c: 70: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 17398  015F9A  0E01               	movlw	1
 17399  015F9C  ECA0  F0BC         	call	_MXK_BlockSwitchTo
 17400  015FA0  0900               	iorlw	0
 17401  015FA2  B4D8               	btfsc	status,2,c
 17402  015FA4  D00C               	goto	l2303
 17403                           
 17404                           ;main.c: 71: Console_Init();
 17405  015FA6  EC0A  F0B4         	call	_Console_Init	;wreg free
 17406                           
 17407                           ;main.c: 72: HMI_Init();
 17408  015FAA  ECAA  F09B         	call	_HMI_Init	;wreg free
 17409                           
 17410                           ;main.c: 73: LCD_Init();
 17411  015FAE  ECE2  F0A3         	call	_LCD_Init	;wreg free
 17412                           
 17413                           ;main.c: 74: if (MXK_Release())
 17414  015FB2  EC47  F0BF         	call	_MXK_Release	;wreg free
 17415  015FB6  0900               	iorlw	0
 17416  015FB8  A4D8               	btfss	status,2,c
 17417                           
 17418                           ;main.c: 75: MXK_Dequeue();
 17419  015FBA  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
 17420  015FBE                     l2303:
 17421                           
 17422                           ;main.c: 76: }
 17423                           ;main.c: 79: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 17424  015FBE  0E08               	movlw	8
 17425  015FC0  ECA0  F0BC         	call	_MXK_BlockSwitchTo
 17426  015FC4  0900               	iorlw	0
 17427  015FC6  B4D8               	btfsc	status,2,c
 17428  015FC8  D013               	goto	l2305
 17429                           
 17430                           ;main.c: 80: Motor_Init(&Stepper, 0b1000);
 17431  015FCA  0ECF               	movlw	low _Stepper
 17432  015FCC  0100               	movlb	0	; () banked
 17433  015FCE  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
 17434  015FD0  0E03               	movlw	high _Stepper
 17435  015FD2  0100               	movlb	0	; () banked
 17436  015FD4  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 17437  015FD6  0E00               	movlw	0
 17438  015FD8  0100               	movlb	0	; () banked
 17439  015FDA  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 17440  015FDC  0E08               	movlw	8
 17441  015FDE  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
 17442  015FE0  EC9D  F0AA         	call	_Motor_Init	;wreg free
 17443                           
 17444                           ;main.c: 81: if (MXK_Release())
 17445  015FE4  EC47  F0BF         	call	_MXK_Release	;wreg free
 17446  015FE8  0900               	iorlw	0
 17447  015FEA  A4D8               	btfss	status,2,c
 17448                           
 17449                           ;main.c: 82: MXK_Dequeue();
 17450  015FEC  EC81  F0BC         	call	_MXK_Dequeue	;wreg free
 17451  015FF0                     l2305:
 17452                           
 17453                           ;main.c: 83: }
 17454                           ;main.c: 86: ADC_Init(&ADC_AN0, eADC_Ch0);
 17455  015FF0  0E40               	movlw	low _ADC_AN0
 17456  015FF2  0100               	movlb	0	; () banked
 17457  015FF4  6F64               	movwf	ADC_Init@pInput& (0+255),b
 17458  015FF6  0E00               	movlw	high _ADC_AN0
 17459  015FF8  0100               	movlb	0	; () banked
 17460  015FFA  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 17461  015FFC  0E00               	movlw	0
 17462  015FFE  0100               	movlb	0	; () banked
 17463  016000  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 17464  016002  EC96  F0B5         	call	_ADC_Init	;wreg free
 17465                           
 17466                           ;main.c: 87: float ADC_Voltage(ADCPtr plnput);
 17467                           ;main.c: 88: ADC_Start(&ADC_AN0);
 17468  016006  0E40               	movlw	low _ADC_AN0
 17469  016008  0100               	movlb	0	; () banked
 17470  01600A  6F62               	movwf	ADC_Start@pInput& (0+255),b
 17471  01600C  0E00               	movlw	high _ADC_AN0
 17472  01600E  0100               	movlb	0	; () banked
 17473  016010  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
 17474  016012  EC94  F0B4         	call	_ADC_Start	;wreg free
 17475                           
 17476                           ;main.c: 90: eusart_init();
 17477  016016  ECD0  F0BE         	call	_eusart_init	;wreg free
 17478                           
 17479                           ;main.c: 91: irobot_init();
 17480  01601A  EC18  F0C0         	call	_irobot_init	;wreg free
 17481                           
 17482                           ;main.c: 93: irobot_led_power_on(0xA);
 17483  01601E  0E0A               	movlw	10
 17484  016020  EC39  F0BF         	call	_irobot_led_power_on
 17485                           
 17486                           ;main.c: 94: irobot_init_song_0();
 17487  016024  ECB1  F0BE         	call	_irobot_init_song_0	;wreg free
 17488                           
 17489                           ;main.c: 95: delay_ms(20);
 17490  016028  0E00               	movlw	0
 17491  01602A  0100               	movlb	0	; () banked
 17492  01602C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17493  01602E  0E14               	movlw	20
 17494  016030  6F60               	movwf	delay_ms@ms& (0+255),b
 17495  016032  EC0C  F0B8         	call	_delay_ms	;wreg free
 17496  016036  0012               	return		;funcret
 17497  016038                     __end_of_init:
 17498                           	opt stack 0
 17499                           tblptru	equ	0xFF8
 17500                           tblptrh	equ	0xFF7
 17501                           tblptrl	equ	0xFF6
 17502                           tablat	equ	0xFF5
 17503                           prodh	equ	0xFF4
 17504                           prodl	equ	0xFF3
 17505                           intcon	equ	0xFF2
 17506                           postinc0	equ	0xFEE
 17507                           wreg	equ	0xFE8
 17508                           postdec1	equ	0xFE5
 17509                           fsr1h	equ	0xFE2
 17510                           fsr1l	equ	0xFE1
 17511                           indf2	equ	0xFDF
 17512                           postinc2	equ	0xFDE
 17513                           postdec2	equ	0xFDD
 17514                           fsr2h	equ	0xFDA
 17515                           fsr2l	equ	0xFD9
 17516                           status	equ	0xFD8
 17517                           
 17518 ;; *************** function _irobot_led_power_on *****************
 17519 ;; Defined at:
 17520 ;;		line 303 in file "Library/iRobotSerial.c"
 17521 ;; Parameters:    Size  Location     Type
 17522 ;;  powerOnColou    1    wreg     unsigned char 
 17523 ;; Auto vars:     Size  Location     Type
 17524 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 17525 ;; Return value:  Size  Location     Type
 17526 ;;                  1    wreg      void 
 17527 ;; Registers used:
 17528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17529 ;; Tracked objects:
 17530 ;;		On entry : 0/0
 17531 ;;		On exit  : 0/0
 17532 ;;		Unchanged: 0/0
 17533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17537 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17538 ;;Total ram usage:        1 bytes
 17539 ;; Hardware stack levels used:    1
 17540 ;; Hardware stack levels required when called:    9
 17541 ;; This function calls:
 17542 ;;		_irobot_leds
 17543 ;; This function is called by:
 17544 ;;		_init
 17545 ;; This function uses a non-reentrant model
 17546 ;;
 17547                           
 17548                           	psect	text58
 17549  017E72                     __ptext58:
 17550                           	opt stack 0
 17551  017E72                     _irobot_led_power_on:
 17552                           	opt stack 20
 17553                           
 17554                           ;incstack = 0
 17555                           ;irobot_led_power_on@powerOnColour stored from wreg
 17556  017E72  0100               	movlb	0	; () banked
 17557  017E74  6F74               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 17558                           
 17559                           ;iRobotSerial.c: 304: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 17560  017E76  0E00               	movlw	0
 17561  017E78  0100               	movlb	0	; () banked
 17562  017E7A  6F70               	movwf	irobot_leds@LEDBit& (0+255),b
 17563  017E7C  C074  F071         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 17564  017E80  0EFF               	movlw	255
 17565  017E82  0100               	movlb	0	; () banked
 17566  017E84  6F72               	movwf	irobot_leds@powerLuminosity& (0+255),b
 17567  017E86  0E00               	movlw	0
 17568  017E88  ECCB  F0B9         	call	_irobot_leds
 17569  017E8C  0012               	return		;funcret
 17570  017E8E                     __end_of_irobot_led_power_on:
 17571                           	opt stack 0
 17572                           tblptru	equ	0xFF8
 17573                           tblptrh	equ	0xFF7
 17574                           tblptrl	equ	0xFF6
 17575                           tablat	equ	0xFF5
 17576                           prodh	equ	0xFF4
 17577                           prodl	equ	0xFF3
 17578                           intcon	equ	0xFF2
 17579                           postinc0	equ	0xFEE
 17580                           wreg	equ	0xFE8
 17581                           postdec1	equ	0xFE5
 17582                           fsr1h	equ	0xFE2
 17583                           fsr1l	equ	0xFE1
 17584                           indf2	equ	0xFDF
 17585                           postinc2	equ	0xFDE
 17586                           postdec2	equ	0xFDD
 17587                           fsr2h	equ	0xFDA
 17588                           fsr2l	equ	0xFD9
 17589                           status	equ	0xFD8
 17590                           
 17591 ;; *************** function _irobot_leds *****************
 17592 ;; Defined at:
 17593 ;;		line 238 in file "Library/iRobotSerial.c"
 17594 ;; Parameters:    Size  Location     Type
 17595 ;;  isScript        1    wreg     unsigned char 
 17596 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 17597 ;;  powerColour     1   17[BANK0 ] unsigned char 
 17598 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 17599 ;; Auto vars:     Size  Location     Type
 17600 ;;  isScript        1   19[BANK0 ] unsigned char 
 17601 ;; Return value:  Size  Location     Type
 17602 ;;                  1    wreg      void 
 17603 ;; Registers used:
 17604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17605 ;; Tracked objects:
 17606 ;;		On entry : 0/0
 17607 ;;		On exit  : 0/0
 17608 ;;		Unchanged: 0/0
 17609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17610 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17613 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17614 ;;Total ram usage:        4 bytes
 17615 ;; Hardware stack levels used:    1
 17616 ;; Hardware stack levels required when called:    8
 17617 ;; This function calls:
 17618 ;;		_eusart_putch
 17619 ;;		_load_iRScriptStack
 17620 ;; This function is called by:
 17621 ;;		_irobot_led_power_on
 17622 ;;		_irobot_led_power_off
 17623 ;; This function uses a non-reentrant model
 17624 ;;
 17625                           
 17626                           	psect	text59
 17627  017396                     __ptext59:
 17628                           	opt stack 0
 17629  017396                     _irobot_leds:
 17630                           	opt stack 20
 17631                           
 17632                           ;incstack = 0
 17633                           ;irobot_leds@isScript stored from wreg
 17634  017396  0100               	movlb	0	; () banked
 17635  017398  6F73               	movwf	irobot_leds@isScript& (0+255),b
 17636                           
 17637                           ;iRobotSerial.c: 239: if (isScript) {
 17638  01739A  0100               	movlb	0	; () banked
 17639  01739C  5173               	movf	irobot_leds@isScript& (0+255),w,b
 17640  01739E  0100               	movlb	0	; () banked
 17641  0173A0  B4D8               	btfsc	status,2,c
 17642  0173A2  D015               	goto	l2144
 17643                           
 17644                           ; BSR set to: 0
 17645                           ;iRobotSerial.c: 240: load_iRScriptStack(4, iR_LEDS,
 17646                           ;iRobotSerial.c: 241: LEDBit, powerColour, powerLuminosity);
 17647  0173A4  0E00               	movlw	0
 17648  0173A6  0100               	movlb	0	; () banked
 17649  0173A8  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 17650  0173AA  0E8B               	movlw	139
 17651  0173AC  6F60               	movwf	?_load_iRScriptStack& (0+255),b
 17652  0173AE  C070  F062         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 17653  0173B2  0100               	movlb	0	; () banked
 17654  0173B4  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 17655  0173B6  C071  F064         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 17656  0173BA  0100               	movlb	0	; () banked
 17657  0173BC  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 17658  0173BE  C072  F066         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 17659  0173C2  0100               	movlb	0	; () banked
 17660  0173C4  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 17661  0173C6  0E04               	movlw	4
 17662  0173C8  ECD7  F0B7         	call	_load_iRScriptStack
 17663                           
 17664                           ;iRobotSerial.c: 242: }
 17665  0173CC  0012               	return	
 17666  0173CE                     l2144:
 17667                           
 17668                           ;iRobotSerial.c: 243: else{
 17669                           ;iRobotSerial.c: 244: eusart_putch(iR_LEDS);
 17670  0173CE  0E8B               	movlw	139
 17671  0173D0  EC1F  F0C0         	call	_eusart_putch
 17672                           
 17673                           ;iRobotSerial.c: 245: eusart_putch(LEDBit);
 17674  0173D4  0100               	movlb	0	; () banked
 17675  0173D6  5170               	movf	irobot_leds@LEDBit& (0+255),w,b
 17676  0173D8  EC1F  F0C0         	call	_eusart_putch
 17677                           
 17678                           ;iRobotSerial.c: 246: eusart_putch(powerColour);
 17679  0173DC  0100               	movlb	0	; () banked
 17680  0173DE  5171               	movf	irobot_leds@powerColour& (0+255),w,b
 17681  0173E0  EC1F  F0C0         	call	_eusart_putch
 17682                           
 17683                           ;iRobotSerial.c: 247: eusart_putch(powerLuminosity);
 17684  0173E4  0100               	movlb	0	; () banked
 17685  0173E6  5172               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 17686  0173E8  EC1F  F0C0         	call	_eusart_putch
 17687  0173EC  0012               	return	
 17688  0173EE                     __end_of_irobot_leds:
 17689                           	opt stack 0
 17690                           tblptru	equ	0xFF8
 17691                           tblptrh	equ	0xFF7
 17692                           tblptrl	equ	0xFF6
 17693                           tablat	equ	0xFF5
 17694                           prodh	equ	0xFF4
 17695                           prodl	equ	0xFF3
 17696                           intcon	equ	0xFF2
 17697                           postinc0	equ	0xFEE
 17698                           wreg	equ	0xFE8
 17699                           postdec1	equ	0xFE5
 17700                           fsr1h	equ	0xFE2
 17701                           fsr1l	equ	0xFE1
 17702                           indf2	equ	0xFDF
 17703                           postinc2	equ	0xFDE
 17704                           postdec2	equ	0xFDD
 17705                           fsr2h	equ	0xFDA
 17706                           fsr2l	equ	0xFD9
 17707                           status	equ	0xFD8
 17708                           
 17709 ;; *************** function _load_iRScriptStack *****************
 17710 ;; Defined at:
 17711 ;;		line 175 in file "Library/iRobotSerial.c"
 17712 ;; Parameters:    Size  Location     Type
 17713 ;;  bytesToLoad     1    wreg     unsigned char 
 17714 ;; Auto vars:     Size  Location     Type
 17715 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 17716 ;;  i               1   15[BANK0 ] unsigned char 
 17717 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 17718 ;;		 -> ?_load_iRScriptStack(1), 
 17719 ;; Return value:  Size  Location     Type
 17720 ;;                  1    wreg      void 
 17721 ;; Registers used:
 17722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17723 ;; Tracked objects:
 17724 ;;		On entry : 0/0
 17725 ;;		On exit  : 0/0
 17726 ;;		Unchanged: 0/0
 17727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17728 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17729 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17730 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17731 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17732 ;;Total ram usage:       16 bytes
 17733 ;; Hardware stack levels used:    1
 17734 ;; Hardware stack levels required when called:    7
 17735 ;; This function calls:
 17736 ;;		Nothing
 17737 ;; This function is called by:
 17738 ;;		_irobot_move
 17739 ;;		_irobot_leds
 17740 ;;		_irobot_angle_wait
 17741 ;;		_irobot_distance_wait
 17742 ;; This function uses a non-reentrant model
 17743 ;;
 17744                           
 17745                           	psect	text60
 17746  016FAE                     __ptext60:
 17747                           	opt stack 0
 17748  016FAE                     _load_iRScriptStack:
 17749                           	opt stack 20
 17750                           
 17751                           ;incstack = 0
 17752                           ;load_iRScriptStack@bytesToLoad stored from wreg
 17753  016FAE  0100               	movlb	0	; () banked
 17754  016FB0  6F6E               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 17755                           
 17756                           ;iRobotSerial.c: 176: va_list loadByte;
 17757                           ;iRobotSerial.c: 177: *loadByte = __va_start();
 17758  016FB2  0E60               	movlw	low ?_load_iRScriptStack
 17759  016FB4  0100               	movlb	0	; () banked
 17760  016FB6  6F6C               	movwf	load_iRScriptStack@loadByte& (0+255),b
 17761  016FB8  0E00               	movlw	high ?_load_iRScriptStack
 17762  016FBA  0100               	movlb	0	; () banked
 17763  016FBC  6F6D               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 17764                           
 17765                           ;iRobotSerial.c: 178: for (UINT8 i = 0; i < bytesToLoad; i++) {
 17766  016FBE  0E00               	movlw	0
 17767  016FC0  0100               	movlb	0	; () banked
 17768  016FC2  6F6F               	movwf	load_iRScriptStack@i& (0+255),b
 17769  016FC4  D01F               	goto	l2118
 17770  016FC6                     
 17771                           ; BSR set to: 0
 17772                           ;iRobotSerial.c: 179: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 17773                           
 17774                           ; BSR set to: 0
 17775  016FC6  C06C  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 17776  016FCA  C06D  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 17777  016FCE  0100               	movlb	0	; () banked
 17778  016FD0  516F               	movf	load_iRScriptStack@i& (0+255),w,b
 17779  016FD2  C038  F06A         	movff	_iRScriptIndex,??_load_iRScriptStack
 17780  016FD6  0100               	movlb	0	; () banked
 17781  016FD8  6B6B               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 17782  016FDA  0100               	movlb	0	; () banked
 17783  016FDC  276A               	addwf	??_load_iRScriptStack& (0+255),f,b
 17784  016FDE  0E00               	movlw	0
 17785  016FE0  236B               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 17786  016FE2  0E1E               	movlw	low _iRScriptStack
 17787  016FE4  0100               	movlb	0	; () banked
 17788  016FE6  256A               	addwf	??_load_iRScriptStack& (0+255),w,b
 17789  016FE8  6EE1               	movwf	fsr1l,c
 17790  016FEA  0E04               	movlw	high _iRScriptStack
 17791  016FEC  0100               	movlb	0	; () banked
 17792  016FEE  216B               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 17793  016FF0  6EE2               	movwf	fsr1h,c
 17794  016FF2  CFDF FFE7          	movff	indf2,indf1
 17795                           
 17796                           ; BSR set to: 0
 17797  016FF6  0E02               	movlw	2
 17798  016FF8  0100               	movlb	0	; () banked
 17799  016FFA  276C               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 17800  016FFC  0E00               	movlw	0
 17801  016FFE  236D               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 17802                           
 17803                           ; BSR set to: 0
 17804  017000  0100               	movlb	0	; () banked
 17805  017002  2B6F               	incf	load_iRScriptStack@i& (0+255),f,b
 17806  017004                     l2118:
 17807                           
 17808                           ; BSR set to: 0
 17809                           
 17810                           ; BSR set to: 0
 17811  017004  0100               	movlb	0	; () banked
 17812  017006  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 17813  017008  0100               	movlb	0	; () banked
 17814  01700A  5D6F               	subwf	load_iRScriptStack@i& (0+255),w,b
 17815  01700C  A0D8               	btfss	status,0,c
 17816  01700E  D7DB               	goto	l2119
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;iRobotSerial.c: 180: }
 17820                           ;iRobotSerial.c: 181: ;
 17821                           ;iRobotSerial.c: 182: iRScriptIndex += bytesToLoad;
 17822                           
 17823                           ; BSR set to: 0
 17824  017010  0100               	movlb	0	; () banked
 17825  017012  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 17826  017014  2638               	addwf	_iRScriptIndex,f,c
 17827                           
 17828                           ; BSR set to: 0
 17829  017016  0012               	return		;funcret
 17830  017018                     __end_of_load_iRScriptStack:
 17831                           	opt stack 0
 17832                           tblptru	equ	0xFF8
 17833                           tblptrh	equ	0xFF7
 17834                           tblptrl	equ	0xFF6
 17835                           tablat	equ	0xFF5
 17836                           prodh	equ	0xFF4
 17837                           prodl	equ	0xFF3
 17838                           intcon	equ	0xFF2
 17839                           postinc0	equ	0xFEE
 17840                           wreg	equ	0xFE8
 17841                           indf1	equ	0xFE7
 17842                           postdec1	equ	0xFE5
 17843                           fsr1h	equ	0xFE2
 17844                           fsr1l	equ	0xFE1
 17845                           indf2	equ	0xFDF
 17846                           postinc2	equ	0xFDE
 17847                           postdec2	equ	0xFDD
 17848                           fsr2h	equ	0xFDA
 17849                           fsr2l	equ	0xFD9
 17850                           status	equ	0xFD8
 17851                           
 17852 ;; *************** function _irobot_init_song_0 *****************
 17853 ;; Defined at:
 17854 ;;		line 251 in file "Library/iRobotSerial.c"
 17855 ;; Parameters:    Size  Location     Type
 17856 ;;		None
 17857 ;; Auto vars:     Size  Location     Type
 17858 ;;		None
 17859 ;; Return value:  Size  Location     Type
 17860 ;;                  1    wreg      void 
 17861 ;; Registers used:
 17862 ;;		wreg, cstack
 17863 ;; Tracked objects:
 17864 ;;		On entry : 0/0
 17865 ;;		On exit  : 0/0
 17866 ;;		Unchanged: 0/0
 17867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17872 ;;Total ram usage:        0 bytes
 17873 ;; Hardware stack levels used:    1
 17874 ;; Hardware stack levels required when called:    8
 17875 ;; This function calls:
 17876 ;;		_eusart_putch
 17877 ;; This function is called by:
 17878 ;;		_init
 17879 ;; This function uses a non-reentrant model
 17880 ;;
 17881                           
 17882                           	psect	text61
 17883  017D62                     __ptext61:
 17884                           	opt stack 0
 17885  017D62                     _irobot_init_song_0:
 17886                           	opt stack 21
 17887                           
 17888                           ;iRobotSerial.c: 252: eusart_putch(iR_SONG_INIT);
 17889                           
 17890                           ; BSR set to: 0
 17891                           ;incstack = 0
 17892  017D62  0E8C               	movlw	140
 17893  017D64  EC1F  F0C0         	call	_eusart_putch
 17894                           
 17895                           ;iRobotSerial.c: 253: eusart_putch(0);
 17896  017D68  0E00               	movlw	0
 17897  017D6A  EC1F  F0C0         	call	_eusart_putch
 17898                           
 17899                           ;iRobotSerial.c: 254: eusart_putch(1);
 17900  017D6E  0E01               	movlw	1
 17901  017D70  EC1F  F0C0         	call	_eusart_putch
 17902                           
 17903                           ;iRobotSerial.c: 255: eusart_putch(60);
 17904  017D74  0E3C               	movlw	60
 17905  017D76  EC1F  F0C0         	call	_eusart_putch
 17906                           
 17907                           ;iRobotSerial.c: 256: eusart_putch(4);
 17908  017D7A  0E04               	movlw	4
 17909  017D7C  EC1F  F0C0         	call	_eusart_putch
 17910  017D80  0012               	return		;funcret
 17911  017D82                     __end_of_irobot_init_song_0:
 17912                           	opt stack 0
 17913                           tblptru	equ	0xFF8
 17914                           tblptrh	equ	0xFF7
 17915                           tblptrl	equ	0xFF6
 17916                           tablat	equ	0xFF5
 17917                           prodh	equ	0xFF4
 17918                           prodl	equ	0xFF3
 17919                           intcon	equ	0xFF2
 17920                           postinc0	equ	0xFEE
 17921                           wreg	equ	0xFE8
 17922                           indf1	equ	0xFE7
 17923                           postdec1	equ	0xFE5
 17924                           fsr1h	equ	0xFE2
 17925                           fsr1l	equ	0xFE1
 17926                           indf2	equ	0xFDF
 17927                           postinc2	equ	0xFDE
 17928                           postdec2	equ	0xFDD
 17929                           fsr2h	equ	0xFDA
 17930                           fsr2l	equ	0xFD9
 17931                           status	equ	0xFD8
 17932                           
 17933 ;; *************** function _irobot_init *****************
 17934 ;; Defined at:
 17935 ;;		line 197 in file "Library/iRobotSerial.c"
 17936 ;; Parameters:    Size  Location     Type
 17937 ;;		None
 17938 ;; Auto vars:     Size  Location     Type
 17939 ;;		None
 17940 ;; Return value:  Size  Location     Type
 17941 ;;                  1    wreg      void 
 17942 ;; Registers used:
 17943 ;;		wreg, cstack
 17944 ;; Tracked objects:
 17945 ;;		On entry : 0/0
 17946 ;;		On exit  : 0/0
 17947 ;;		Unchanged: 0/0
 17948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17953 ;;Total ram usage:        0 bytes
 17954 ;; Hardware stack levels used:    1
 17955 ;; Hardware stack levels required when called:    8
 17956 ;; This function calls:
 17957 ;;		_eusart_putch
 17958 ;; This function is called by:
 17959 ;;		_init
 17960 ;; This function uses a non-reentrant model
 17961 ;;
 17962                           
 17963                           	psect	text62
 17964  018030                     __ptext62:
 17965                           	opt stack 0
 17966  018030                     _irobot_init:
 17967                           	opt stack 21
 17968                           
 17969                           ;iRobotSerial.c: 198: eusart_putch(iR_START);
 17970                           
 17971                           ;incstack = 0
 17972  018030  0E80               	movlw	128
 17973  018032  EC1F  F0C0         	call	_eusart_putch
 17974                           
 17975                           ;iRobotSerial.c: 199: eusart_putch(iR_FULL_MODE);
 17976  018036  0E84               	movlw	132
 17977  018038  EC1F  F0C0         	call	_eusart_putch
 17978  01803C  0012               	return		;funcret
 17979  01803E                     __end_of_irobot_init:
 17980                           	opt stack 0
 17981                           tblptru	equ	0xFF8
 17982                           tblptrh	equ	0xFF7
 17983                           tblptrl	equ	0xFF6
 17984                           tablat	equ	0xFF5
 17985                           prodh	equ	0xFF4
 17986                           prodl	equ	0xFF3
 17987                           intcon	equ	0xFF2
 17988                           postinc0	equ	0xFEE
 17989                           wreg	equ	0xFE8
 17990                           indf1	equ	0xFE7
 17991                           postdec1	equ	0xFE5
 17992                           fsr1h	equ	0xFE2
 17993                           fsr1l	equ	0xFE1
 17994                           indf2	equ	0xFDF
 17995                           postinc2	equ	0xFDE
 17996                           postdec2	equ	0xFDD
 17997                           fsr2h	equ	0xFDA
 17998                           fsr2l	equ	0xFD9
 17999                           status	equ	0xFD8
 18000                           
 18001 ;; *************** function _eusart_putch *****************
 18002 ;; Defined at:
 18003 ;;		line 120 in file "Library/iRobotSerial.c"
 18004 ;; Parameters:    Size  Location     Type
 18005 ;;  eusartSendCh    1    wreg     unsigned char 
 18006 ;; Auto vars:     Size  Location     Type
 18007 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 18008 ;; Return value:  Size  Location     Type
 18009 ;;                  1    wreg      void 
 18010 ;; Registers used:
 18011 ;;		wreg
 18012 ;; Tracked objects:
 18013 ;;		On entry : 0/0
 18014 ;;		On exit  : 0/0
 18015 ;;		Unchanged: 0/0
 18016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18020 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18021 ;;Total ram usage:        1 bytes
 18022 ;; Hardware stack levels used:    1
 18023 ;; Hardware stack levels required when called:    7
 18024 ;; This function calls:
 18025 ;;		Nothing
 18026 ;; This function is called by:
 18027 ;;		_irobot_query_and_update
 18028 ;;		_irobot_init
 18029 ;;		_irobot_move
 18030 ;;		_irobot_leds
 18031 ;;		_irobot_init_song_0
 18032 ;;		_irobot_song_play
 18033 ;;		_irobot_script_play
 18034 ;; This function uses a non-reentrant model
 18035 ;;
 18036                           
 18037                           	psect	text63
 18038  01803E                     __ptext63:
 18039                           	opt stack 0
 18040  01803E                     _eusart_putch:
 18041                           	opt stack 20
 18042                           
 18043                           ;incstack = 0
 18044                           ;eusart_putch@eusartSendChar stored from wreg
 18045  01803E  0100               	movlb	0	; () banked
 18046  018040  6F60               	movwf	eusart_putch@eusartSendChar& (0+255),b
 18047  018042                     
 18048                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 18049  018042  A2AD               	btfss	4013,1,c	;volatile
 18050  018044  D7FE               	goto	l13846
 18051                           
 18052                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 18053  018046  C060  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 18054  01804A  0012               	return		;funcret
 18055  01804C                     __end_of_eusart_putch:
 18056                           	opt stack 0
 18057                           tblptru	equ	0xFF8
 18058                           tblptrh	equ	0xFF7
 18059                           tblptrl	equ	0xFF6
 18060                           tablat	equ	0xFF5
 18061                           prodh	equ	0xFF4
 18062                           prodl	equ	0xFF3
 18063                           intcon	equ	0xFF2
 18064                           postinc0	equ	0xFEE
 18065                           wreg	equ	0xFE8
 18066                           indf1	equ	0xFE7
 18067                           postdec1	equ	0xFE5
 18068                           fsr1h	equ	0xFE2
 18069                           fsr1l	equ	0xFE1
 18070                           indf2	equ	0xFDF
 18071                           postinc2	equ	0xFDE
 18072                           postdec2	equ	0xFDD
 18073                           fsr2h	equ	0xFDA
 18074                           fsr2l	equ	0xFD9
 18075                           status	equ	0xFD8
 18076                           
 18077 ;; *************** function _eusart_init *****************
 18078 ;; Defined at:
 18079 ;;		line 103 in file "Library/iRobotSerial.c"
 18080 ;; Parameters:    Size  Location     Type
 18081 ;;		None
 18082 ;; Auto vars:     Size  Location     Type
 18083 ;;		None
 18084 ;; Return value:  Size  Location     Type
 18085 ;;                  1    wreg      void 
 18086 ;; Registers used:
 18087 ;;		wreg, status,2
 18088 ;; Tracked objects:
 18089 ;;		On entry : 0/0
 18090 ;;		On exit  : 0/0
 18091 ;;		Unchanged: 0/0
 18092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18097 ;;Total ram usage:        0 bytes
 18098 ;; Hardware stack levels used:    1
 18099 ;; Hardware stack levels required when called:    7
 18100 ;; This function calls:
 18101 ;;		Nothing
 18102 ;; This function is called by:
 18103 ;;		_init
 18104 ;; This function uses a non-reentrant model
 18105 ;;
 18106                           
 18107                           	psect	text64
 18108  017DA0                     __ptext64:
 18109                           	opt stack 0
 18110  017DA0                     _eusart_init:
 18111                           	opt stack 22
 18112                           
 18113                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 18114                           
 18115                           ;incstack = 0
 18116  017DA0  9C94               	bcf	3988,6,c	;volatile
 18117                           
 18118                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 18119  017DA2  8E94               	bsf	3988,7,c	;volatile
 18120                           
 18121                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 18122  017DA4  0E24               	movlw	36
 18123  017DA6  6EAD               	movwf	4013,c	;volatile
 18124                           
 18125                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 18126  017DA8  0E98               	movlw	152
 18127  017DAA  6EAC               	movwf	4012,c	;volatile
 18128                           
 18129                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 18130  017DAC  9A7E               	bcf	3966,5,c	;volatile
 18131                           
 18132                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 18133  017DAE  987E               	bcf	3966,4,c	;volatile
 18134                           
 18135                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 18136  017DB0  927E               	bcf	3966,1,c	;volatile
 18137                           
 18138                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 18139  017DB2  907E               	bcf	3966,0,c	;volatile
 18140                           
 18141                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 18142  017DB4  84AD               	bsf	4013,2,c	;volatile
 18143                           
 18144                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 18145  017DB6  967E               	bcf	3966,3,c	;volatile
 18146                           
 18147                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 18148  017DB8  0E33               	movlw	51
 18149  017DBA  6EB0               	movwf	4016,c	;volatile
 18150  017DBC  0012               	return		;funcret
 18151  017DBE                     __end_of_eusart_init:
 18152                           	opt stack 0
 18153                           tblptru	equ	0xFF8
 18154                           tblptrh	equ	0xFF7
 18155                           tblptrl	equ	0xFF6
 18156                           tablat	equ	0xFF5
 18157                           prodh	equ	0xFF4
 18158                           prodl	equ	0xFF3
 18159                           intcon	equ	0xFF2
 18160                           postinc0	equ	0xFEE
 18161                           wreg	equ	0xFE8
 18162                           indf1	equ	0xFE7
 18163                           postdec1	equ	0xFE5
 18164                           fsr1h	equ	0xFE2
 18165                           fsr1l	equ	0xFE1
 18166                           indf2	equ	0xFDF
 18167                           postinc2	equ	0xFDE
 18168                           postdec2	equ	0xFDD
 18169                           fsr2h	equ	0xFDA
 18170                           fsr2l	equ	0xFD9
 18171                           status	equ	0xFD8
 18172                           
 18173 ;; *************** function _Motor_Init *****************
 18174 ;; Defined at:
 18175 ;;		line 26 in file "Library/Motor.c"
 18176 ;; Parameters:    Size  Location     Type
 18177 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 18178 ;;		 -> Stepper(6), 
 18179 ;;  pAddress        2   47[BANK0 ] unsigned short 
 18180 ;; Auto vars:     Size  Location     Type
 18181 ;;		None
 18182 ;; Return value:  Size  Location     Type
 18183 ;;                  1    wreg      void 
 18184 ;; Registers used:
 18185 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18186 ;; Tracked objects:
 18187 ;;		On entry : 0/0
 18188 ;;		On exit  : 0/0
 18189 ;;		Unchanged: 0/0
 18190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18191 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18194 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18195 ;;Total ram usage:        4 bytes
 18196 ;; Hardware stack levels used:    1
 18197 ;; Hardware stack levels required when called:   12
 18198 ;; This function calls:
 18199 ;;		_Port_SetPin
 18200 ;;		_Port_SetPinType
 18201 ;;		_Timer0_Init
 18202 ;; This function is called by:
 18203 ;;		_init
 18204 ;; This function uses a non-reentrant model
 18205 ;;
 18206                           
 18207                           	psect	text65
 18208  01553A                     __ptext65:
 18209                           	opt stack 0
 18210  01553A                     _Motor_Init:
 18211                           	opt stack 17
 18212                           
 18213                           ;Motor.c: 28: pMotor->mDelta = 0;
 18214                           
 18215                           ;incstack = 0
 18216  01553A  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
 18217  01553E  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 18218  015542  0E00               	movlw	0
 18219  015544  6EDE               	movwf	postinc2,c
 18220  015546  0E00               	movlw	0
 18221  015548  6EDD               	movwf	postdec2,c
 18222                           
 18223                           ;Motor.c: 29: pMotor->mFrequency = 0;
 18224  01554A  0100               	movlb	0	; () banked
 18225  01554C  EE20 F002          	lfsr	2,2
 18226  015550  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 18227  015552  26D9               	addwf	fsr2l,f,c
 18228  015554  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 18229  015556  22DA               	addwfc	fsr2h,f,c
 18230  015558  0E00               	movlw	0
 18231  01555A  6EDE               	movwf	postinc2,c
 18232  01555C  0E00               	movlw	0
 18233  01555E  6EDD               	movwf	postdec2,c
 18234                           
 18235                           ; BSR set to: 0
 18236                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 18237  015560  0100               	movlb	0	; () banked
 18238  015562  EE20 F004          	lfsr	2,4
 18239  015566  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 18240  015568  26D9               	addwf	fsr2l,f,c
 18241  01556A  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 18242  01556C  22DA               	addwfc	fsr2h,f,c
 18243  01556E  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
 18244  015572  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 18245                           
 18246                           ; BSR set to: 0
 18247                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 18248  015576  0E8F               	movlw	low _PortE
 18249  015578  0100               	movlb	0	; () banked
 18250  01557A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18251  01557C  0E03               	movlw	high _PortE
 18252  01557E  0100               	movlb	0	; () banked
 18253  015580  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18254  015582  0E00               	movlw	0
 18255  015584  0100               	movlb	0	; () banked
 18256  015586  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18257  015588  0E03               	movlw	3
 18258  01558A  0100               	movlb	0	; () banked
 18259  01558C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18260  01558E  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 18261                           
 18262                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 18263  015592  0E8F               	movlw	low _PortE
 18264  015594  0100               	movlb	0	; () banked
 18265  015596  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18266  015598  0E03               	movlw	high _PortE
 18267  01559A  0100               	movlb	0	; () banked
 18268  01559C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18269  01559E  0E01               	movlw	1
 18270  0155A0  0100               	movlb	0	; () banked
 18271  0155A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18272  0155A4  0E03               	movlw	3
 18273  0155A6  0100               	movlb	0	; () banked
 18274  0155A8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18275  0155AA  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 18276                           
 18277                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 18278  0155AE  0E8F               	movlw	low _PortE
 18279  0155B0  0100               	movlb	0	; () banked
 18280  0155B2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18281  0155B4  0E03               	movlw	high _PortE
 18282  0155B6  0100               	movlb	0	; () banked
 18283  0155B8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18284  0155BA  0E00               	movlw	0
 18285  0155BC  0100               	movlb	0	; () banked
 18286  0155BE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18287  0155C0  0E00               	movlw	0
 18288  0155C2  0100               	movlb	0	; () banked
 18289  0155C4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18290  0155C6  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 18291                           
 18292                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 18293  0155CA  0E8F               	movlw	low _PortE
 18294  0155CC  0100               	movlb	0	; () banked
 18295  0155CE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18296  0155D0  0E03               	movlw	high _PortE
 18297  0155D2  0100               	movlb	0	; () banked
 18298  0155D4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18299  0155D6  0E01               	movlw	1
 18300  0155D8  0100               	movlb	0	; () banked
 18301  0155DA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18302  0155DC  0E00               	movlw	0
 18303  0155DE  0100               	movlb	0	; () banked
 18304  0155E0  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18305  0155E2  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 18306                           
 18307                           ;Motor.c: 38: lStepFunction = Motor_Step;
 18308  0155E6  0E88               	movlw	low _Motor_Step
 18309  0155E8  0103               	movlb	3	; () banked
 18310  0155EA  6F17               	movwf	_lStepFunction& (0+255),b
 18311  0155EC  0E4E               	movlw	high _Motor_Step
 18312  0155EE  0103               	movlb	3	; () banked
 18313  0155F0  6F18               	movwf	(_lStepFunction+1)& (0+255),b
 18314  0155F2  0E01               	movlw	low (_Motor_Step shr (0+16))
 18315  0155F4  0103               	movlb	3	; () banked
 18316  0155F6  6F19               	movwf	(_lStepFunction+2)& (0+255),b
 18317                           
 18318                           ; BSR set to: 3
 18319                           ;Motor.c: 39: Timer0_Init(1000);
 18320  0155F8  0EE8               	movlw	232
 18321  0155FA  0100               	movlb	0	; () banked
 18322  0155FC  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
 18323  0155FE  0E03               	movlw	3
 18324  015600  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 18325  015602  0E00               	movlw	0
 18326  015604  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 18327  015606  0E00               	movlw	0
 18328  015608  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 18329  01560A  EC4E  F0A5         	call	_Timer0_Init	;wreg free
 18330  01560E  0012               	return		;funcret
 18331  015610                     __end_of_Motor_Init:
 18332                           	opt stack 0
 18333                           tblptru	equ	0xFF8
 18334                           tblptrh	equ	0xFF7
 18335                           tblptrl	equ	0xFF6
 18336                           tablat	equ	0xFF5
 18337                           prodh	equ	0xFF4
 18338                           prodl	equ	0xFF3
 18339                           intcon	equ	0xFF2
 18340                           postinc0	equ	0xFEE
 18341                           wreg	equ	0xFE8
 18342                           indf1	equ	0xFE7
 18343                           postdec1	equ	0xFE5
 18344                           fsr1h	equ	0xFE2
 18345                           fsr1l	equ	0xFE1
 18346                           indf2	equ	0xFDF
 18347                           postinc2	equ	0xFDE
 18348                           postdec2	equ	0xFDD
 18349                           fsr2h	equ	0xFDA
 18350                           fsr2l	equ	0xFD9
 18351                           status	equ	0xFD8
 18352                           
 18353 ;; *************** function _Timer0_Init *****************
 18354 ;; Defined at:
 18355 ;;		line 25 in file "Library/Timer0.c"
 18356 ;; Parameters:    Size  Location     Type
 18357 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 18358 ;; Auto vars:     Size  Location     Type
 18359 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 18360 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 18361 ;; Return value:  Size  Location     Type
 18362 ;;                  1    wreg      void 
 18363 ;; Registers used:
 18364 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18365 ;; Tracked objects:
 18366 ;;		On entry : 0/0
 18367 ;;		On exit  : 0/0
 18368 ;;		Unchanged: 0/0
 18369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18370 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18371 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18372 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18373 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18374 ;;Total ram usage:       14 bytes
 18375 ;; Hardware stack levels used:    1
 18376 ;; Hardware stack levels required when called:    8
 18377 ;; This function calls:
 18378 ;;		_Timer0_Clear
 18379 ;;		___lldiv
 18380 ;; This function is called by:
 18381 ;;		_Motor_Init
 18382 ;;		_Motor_Speed
 18383 ;; This function uses a non-reentrant model
 18384 ;;
 18385                           
 18386                           	psect	text66
 18387  014A9C                     __ptext66:
 18388                           	opt stack 0
 18389  014A9C                     _Timer0_Init:
 18390                           	opt stack 20
 18391                           
 18392                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 18393                           
 18394                           ;incstack = 0
 18395  014A9C  0E80               	movlw	128
 18396  014A9E  0100               	movlb	0	; () banked
 18397  014AA0  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 18398  014AA2  0E8D               	movlw	141
 18399  014AA4  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 18400  014AA6  0E5B               	movlw	91
 18401  014AA8  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 18402  014AAA  0E00               	movlw	0
 18403  014AAC  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 18404                           
 18405                           ; BSR set to: 0
 18406                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 18407                           ;Timer0.c: 31: static UINT8 PRE = 0;
 18408                           ;Timer0.c: 32: static UINT32 DIV = 0;
 18409                           ;Timer0.c: 34: UINT32 DIVIDE;
 18410                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 18411  014AAE  9ED5               	bcf	4053,7,c	;volatile
 18412                           
 18413                           ; BSR set to: 0
 18414                           ;Timer0.c: 38: if (pFrequency == 0)
 18415  014AB0  0100               	movlb	0	; () banked
 18416  014AB2  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 18417  014AB4  0100               	movlb	0	; () banked
 18418  014AB6  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 18419  014AB8  0100               	movlb	0	; () banked
 18420  014ABA  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 18421  014ABC  0100               	movlb	0	; () banked
 18422  014ABE  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 18423  014AC0  B4D8               	btfsc	status,2,c
 18424  014AC2  0012               	return	
 18425                           
 18426                           ; BSR set to: 0
 18427                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 18428                           
 18429                           ; BSR set to: 0
 18430                           ;Timer0.c: 39: return;
 18431  014AC4  96D5               	bcf	4053,3,c	;volatile
 18432                           
 18433                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 18434  014AC6  9CD5               	bcf	4053,6,c	;volatile
 18435                           
 18436                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 18437  014AC8  9AD5               	bcf	4053,5,c	;volatile
 18438                           
 18439                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 18440  014ACA  98D5               	bcf	4053,4,c	;volatile
 18441                           
 18442                           ; BSR set to: 0
 18443                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 18444  014ACC  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 18445  014AD0  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 18446  014AD4  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 18447  014AD8  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 18448  014ADC  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 18449  014AE0  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 18450  014AE4  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 18451  014AE8  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 18452  014AEC  EC5C  F0AD         	call	___lldiv	;wreg free
 18453  014AF0  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 18454  014AF4  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 18455  014AF8  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 18456  014AFC  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 18457                           
 18458                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 18459  014B00  D00C               	goto	l1787
 18460  014B02                     l15384:
 18461                           
 18462                           ;Timer0.c: 50: {
 18463                           ;Timer0.c: 51: INDEX ++;
 18464  014B02  0100               	movlb	0	; () banked
 18465  014B04  2BF1               	incf	_INDEX& (0+255),f,b
 18466                           
 18467                           ; BSR set to: 0
 18468                           ;Timer0.c: 52: if (INDEX >= 3)
 18469  014B06  0E02               	movlw	2
 18470  014B08  0100               	movlb	0	; () banked
 18471  014B0A  65F1               	cpfsgt	_INDEX& (0+255),b
 18472  014B0C  D001               	goto	l1785
 18473  014B0E  D02F               	goto	u12820
 18474  014B10                     l1785:
 18475                           
 18476                           ; BSR set to: 0
 18477                           ;Timer0.c: 56: if (INDEX >= 8)
 18478                           
 18479                           ; BSR set to: 0
 18480  014B10  0E07               	movlw	7
 18481  014B12  0100               	movlb	0	; () banked
 18482  014B14  65F1               	cpfsgt	_INDEX& (0+255),b
 18483  014B16  D001               	goto	l1787
 18484  014B18  0012               	return	
 18485  014B1A                     l1787:
 18486                           
 18487                           ; BSR set to: 0
 18488                           
 18489                           ; BSR set to: 0
 18490  014B1A  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 18491  014B1E  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 18492  014B22  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 18493  014B26  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 18494  014B2A  0100               	movlb	0	; () banked
 18495  014B2C  51F1               	movf	_INDEX& (0+255),w,b
 18496  014B2E  0D02               	mullw	2
 18497  014B30  0E3B               	movlw	low Timer0_Init@PRESCALE
 18498  014B32  24F3               	addwf	prodl,w,c
 18499  014B34  6EF6               	movwf	tblptrl,c
 18500  014B36  0EFD               	movlw	high Timer0_Init@PRESCALE
 18501  014B38  20F4               	addwfc	prodh,w,c
 18502  014B3A  6EF7               	movwf	tblptrh,c
 18503  014B3C                     	if	1	;There are 3 active tblptr bytes
 18504  014B3C  6AF8               	clrf	tblptru,c
 18505  014B3E  0E00               	movlw	low (__mediumconst shr (0+16))
 18506  014B40  22F8               	addwfc	tblptru,f,c
 18507  014B42                     	endif
 18508  014B42  0009               	tblrd		*+
 18509  014B44  CFF5 F071          	movff	tablat,??_Timer0_Init
 18510  014B48  0009               	tblrd		*+
 18511  014B4A  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 18512  014B4E  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 18513  014B52  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 18514  014B56  0100               	movlb	0	; () banked
 18515  014B58  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 18516  014B5A  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 18517  014B5C  EC5C  F0AD         	call	___lldiv	;wreg free
 18518  014B60  0100               	movlb	0	; () banked
 18519  014B62  5163               	movf	(?___lldiv+3)& (0+255),w,b
 18520  014B64  E1CE               	bnz	l15384
 18521  014B66  0100               	movlb	0	; () banked
 18522  014B68  0562               	decf	(?___lldiv+2)& (0+255),w,b
 18523  014B6A  B0D8               	btfsc	status,0,c
 18524  014B6C  D7CA               	goto	l1784
 18525  014B6E                     u12820:
 18526                           
 18527                           ; BSR set to: 0
 18528                           ;Timer0.c: 58: }
 18529                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 18530                           
 18531                           ; BSR set to: 0
 18532  014B6E  0100               	movlb	0	; () banked
 18533  014B70  51F1               	movf	_INDEX& (0+255),w,b
 18534  014B72  0D02               	mullw	2
 18535  014B74  0E3B               	movlw	low Timer0_Init@PRESCALE
 18536  014B76  24F3               	addwf	prodl,w,c
 18537  014B78  6EF6               	movwf	tblptrl,c
 18538  014B7A  0EFD               	movlw	high Timer0_Init@PRESCALE
 18539  014B7C  20F4               	addwfc	prodh,w,c
 18540  014B7E  6EF7               	movwf	tblptrh,c
 18541  014B80                     	if	1	;There are 3 active tblptr bytes
 18542  014B80  6AF8               	clrf	tblptru,c
 18543  014B82  0E00               	movlw	low (__mediumconst shr (0+16))
 18544  014B84  22F8               	addwfc	tblptru,f,c
 18545  014B86                     	endif
 18546  014B86  0008               	tblrd		*
 18547  014B88  CFF5 F03B          	movff	tablat,Timer0_Init@PRE
 18548                           
 18549                           ; BSR set to: 0
 18550                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 18551  014B8C  0EFF               	movlw	255
 18552  014B8E  0100               	movlb	0	; () banked
 18553  014B90  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 18554  014B92  0103               	movlb	3	; () banked
 18555  014B94  6F10               	movwf	Timer0_Init@DIV& (0+255),b
 18556  014B96  0EFF               	movlw	255
 18557  014B98  0100               	movlb	0	; () banked
 18558  014B9A  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 18559  014B9C  0103               	movlb	3	; () banked
 18560  014B9E  6F11               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 18561  014BA0  0EFF               	movlw	255
 18562  014BA2  0100               	movlb	0	; () banked
 18563  014BA4  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 18564  014BA6  0103               	movlb	3	; () banked
 18565  014BA8  6F12               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 18566  014BAA  0EFF               	movlw	255
 18567  014BAC  0100               	movlb	0	; () banked
 18568  014BAE  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 18569  014BB0  0103               	movlb	3	; () banked
 18570  014BB2  6F13               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 18571                           
 18572                           ; BSR set to: 3
 18573                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 18574  014BB4  C310  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 18575  014BB8  C311  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 18576  014BBC  C312  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 18577  014BC0  C313  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 18578  014BC4  503B               	movf	Timer0_Init@PRE,w,c
 18579  014BC6  0100               	movlb	0	; () banked
 18580  014BC8  6F64               	movwf	___lldiv@divisor& (0+255),b
 18581  014BCA  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 18582  014BCC  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 18583  014BCE  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 18584  014BD0  EC5C  F0AD         	call	___lldiv	;wreg free
 18585  014BD4  0100               	movlb	0	; () banked
 18586  014BD6  1F60               	comf	?___lldiv& (0+255),f,b
 18587  014BD8  0100               	movlb	0	; () banked
 18588  014BDA  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 18589  014BDC  0100               	movlb	0	; () banked
 18590  014BDE  4B60               	infsnz	?___lldiv& (0+255),f,b
 18591  014BE0  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 18592  014BE2  0EFF               	movlw	255
 18593  014BE4  0100               	movlb	0	; () banked
 18594  014BE6  2560               	addwf	?___lldiv& (0+255),w,b
 18595  014BE8  6E2F               	movwf	_COUNTER,c
 18596  014BEA  0EFF               	movlw	255
 18597  014BEC  0100               	movlb	0	; () banked
 18598  014BEE  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 18599  014BF0  6E30               	movwf	_COUNTER+1,c
 18600                           
 18601                           ; BSR set to: 0
 18602                           ;Timer0.c: 68: Timer0_Clear();
 18603  014BF2  EC41  F0C0         	call	_Timer0_Clear	;wreg free
 18604                           
 18605                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 18606  014BF6  8ED5               	bsf	4053,7,c	;volatile
 18607  014BF8  0012               	return		;funcret
 18608  014BFA                     __end_of_Timer0_Init:
 18609                           	opt stack 0
 18610                           tblptru	equ	0xFF8
 18611                           tblptrh	equ	0xFF7
 18612                           tblptrl	equ	0xFF6
 18613                           tablat	equ	0xFF5
 18614                           prodh	equ	0xFF4
 18615                           prodl	equ	0xFF3
 18616                           intcon	equ	0xFF2
 18617                           postinc0	equ	0xFEE
 18618                           wreg	equ	0xFE8
 18619                           indf1	equ	0xFE7
 18620                           postdec1	equ	0xFE5
 18621                           fsr1h	equ	0xFE2
 18622                           fsr1l	equ	0xFE1
 18623                           indf2	equ	0xFDF
 18624                           postinc2	equ	0xFDE
 18625                           postdec2	equ	0xFDD
 18626                           fsr2h	equ	0xFDA
 18627                           fsr2l	equ	0xFD9
 18628                           status	equ	0xFD8
 18629                           
 18630 ;; *************** function _Timer0_Clear *****************
 18631 ;; Defined at:
 18632 ;;		line 20 in file "Library/Timer0.c"
 18633 ;; Parameters:    Size  Location     Type
 18634 ;;		None
 18635 ;; Auto vars:     Size  Location     Type
 18636 ;;		None
 18637 ;; Return value:  Size  Location     Type
 18638 ;;                  1    wreg      void 
 18639 ;; Registers used:
 18640 ;;		None
 18641 ;; Tracked objects:
 18642 ;;		On entry : 0/0
 18643 ;;		On exit  : 0/0
 18644 ;;		Unchanged: 0/0
 18645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18650 ;;Total ram usage:        0 bytes
 18651 ;; Hardware stack levels used:    1
 18652 ;; Hardware stack levels required when called:    7
 18653 ;; This function calls:
 18654 ;;		Nothing
 18655 ;; This function is called by:
 18656 ;;		_Timer0_Init
 18657 ;; This function uses a non-reentrant model
 18658 ;;
 18659                           
 18660                           	psect	text67
 18661  018082                     __ptext67:
 18662                           	opt stack 0
 18663  018082                     _Timer0_Clear:
 18664                           	opt stack 20
 18665                           
 18666                           ;Timer0.c: 22: TMR0 = COUNTER;
 18667                           
 18668                           ;incstack = 0
 18669  018082  C02F  FFD6         	movff	_COUNTER,4054	;volatile
 18670  018086  C030  FFD7         	movff	_COUNTER+1,4055	;volatile
 18671                           
 18672                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 18673  01808A  94F2               	bcf	intcon,2,c	;volatile
 18674  01808C  0012               	return		;funcret
 18675  01808E                     __end_of_Timer0_Clear:
 18676                           	opt stack 0
 18677                           tblptru	equ	0xFF8
 18678                           tblptrh	equ	0xFF7
 18679                           tblptrl	equ	0xFF6
 18680                           tablat	equ	0xFF5
 18681                           prodh	equ	0xFF4
 18682                           prodl	equ	0xFF3
 18683                           intcon	equ	0xFF2
 18684                           postinc0	equ	0xFEE
 18685                           wreg	equ	0xFE8
 18686                           indf1	equ	0xFE7
 18687                           postdec1	equ	0xFE5
 18688                           fsr1h	equ	0xFE2
 18689                           fsr1l	equ	0xFE1
 18690                           indf2	equ	0xFDF
 18691                           postinc2	equ	0xFDE
 18692                           postdec2	equ	0xFDD
 18693                           fsr2h	equ	0xFDA
 18694                           fsr2l	equ	0xFD9
 18695                           status	equ	0xFD8
 18696                           
 18697 ;; *************** function _MXK_Init *****************
 18698 ;; Defined at:
 18699 ;;		line 33 in file "Library/MXK.c"
 18700 ;; Parameters:    Size  Location     Type
 18701 ;;		None
 18702 ;; Auto vars:     Size  Location     Type
 18703 ;;		None
 18704 ;; Return value:  Size  Location     Type
 18705 ;;                  1    wreg      void 
 18706 ;; Registers used:
 18707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18708 ;; Tracked objects:
 18709 ;;		On entry : 0/0
 18710 ;;		On exit  : 0/0
 18711 ;;		Unchanged: 0/0
 18712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18717 ;;Total ram usage:        0 bytes
 18718 ;; Hardware stack levels used:    1
 18719 ;; Hardware stack levels required when called:   16
 18720 ;; This function calls:
 18721 ;;		_LED_Init
 18722 ;;		_Port_Init
 18723 ;;		_Port_SetPin
 18724 ;;		_Port_SetPinType
 18725 ;;		_Port_SetQuadType
 18726 ;;		_Port_SetType
 18727 ;;		_delay_ms
 18728 ;; This function is called by:
 18729 ;;		_init
 18730 ;; This function uses a non-reentrant model
 18731 ;;
 18732                           
 18733                           	psect	text68
 18734  014644                     __ptext68:
 18735                           	opt stack 0
 18736  014644                     _MXK_Init:
 18737                           	opt stack 13
 18738                           
 18739                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 18740                           
 18741                           ;incstack = 0
 18742  014644  0E01               	movlw	1
 18743  014646  6E4D               	movwf	_Bus_State,c
 18744                           
 18745                           ;MXK.c: 36: lQueue = (Function)0;
 18746  014648  0E00               	movlw	0
 18747  01464A  0100               	movlb	0	; () banked
 18748  01464C  6FE1               	movwf	_lQueue& (0+255),b	;volatile
 18749  01464E  0E00               	movlw	0
 18750  014650  0100               	movlb	0	; () banked
 18751  014652  6FE2               	movwf	(_lQueue+1)& (0+255),b	;volatile
 18752  014654  0E00               	movlw	0
 18753  014656  0100               	movlb	0	; () banked
 18754  014658  6FE3               	movwf	(_lQueue+2)& (0+255),b	;volatile
 18755                           
 18756                           ; BSR set to: 0
 18757                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 18758  01465A  0EE6               	movlw	low _PortA
 18759  01465C  0100               	movlb	0	; () banked
 18760  01465E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 18761  014660  0E04               	movlw	high _PortA
 18762  014662  0100               	movlb	0	; () banked
 18763  014664  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 18764  014666  0E00               	movlw	0
 18765  014668  0100               	movlb	0	; () banked
 18766  01466A  6FA2               	movwf	Port_Init@pPort& (0+255),b
 18767  01466C  EC0A  F0A0         	call	_Port_Init	;wreg free
 18768                           
 18769                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 18770  014670  0EA3               	movlw	low _PortB
 18771  014672  0100               	movlb	0	; () banked
 18772  014674  6FA0               	movwf	Port_Init@pInput& (0+255),b
 18773  014676  0E03               	movlw	high _PortB
 18774  014678  0100               	movlb	0	; () banked
 18775  01467A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 18776  01467C  0E01               	movlw	1
 18777  01467E  0100               	movlb	0	; () banked
 18778  014680  6FA2               	movwf	Port_Init@pPort& (0+255),b
 18779  014682  EC0A  F0A0         	call	_Port_Init	;wreg free
 18780                           
 18781                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 18782  014686  0EAD               	movlw	low _PortC
 18783  014688  0100               	movlb	0	; () banked
 18784  01468A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 18785  01468C  0E03               	movlw	high _PortC
 18786  01468E  0100               	movlb	0	; () banked
 18787  014690  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 18788  014692  0E02               	movlw	2
 18789  014694  0100               	movlb	0	; () banked
 18790  014696  6FA2               	movwf	Port_Init@pPort& (0+255),b
 18791  014698  EC0A  F0A0         	call	_Port_Init	;wreg free
 18792                           
 18793                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 18794  01469C  0E99               	movlw	low _PortD
 18795  01469E  0100               	movlb	0	; () banked
 18796  0146A0  6FA0               	movwf	Port_Init@pInput& (0+255),b
 18797  0146A2  0E03               	movlw	high _PortD
 18798  0146A4  0100               	movlb	0	; () banked
 18799  0146A6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 18800  0146A8  0E03               	movlw	3
 18801  0146AA  0100               	movlb	0	; () banked
 18802  0146AC  6FA2               	movwf	Port_Init@pPort& (0+255),b
 18803  0146AE  EC0A  F0A0         	call	_Port_Init	;wreg free
 18804                           
 18805                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 18806  0146B2  0E8F               	movlw	low _PortE
 18807  0146B4  0100               	movlb	0	; () banked
 18808  0146B6  6FA0               	movwf	Port_Init@pInput& (0+255),b
 18809  0146B8  0E03               	movlw	high _PortE
 18810  0146BA  0100               	movlb	0	; () banked
 18811  0146BC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 18812  0146BE  0E04               	movlw	4
 18813  0146C0  0100               	movlb	0	; () banked
 18814  0146C2  6FA2               	movwf	Port_Init@pPort& (0+255),b
 18815  0146C4  EC0A  F0A0         	call	_Port_Init	;wreg free
 18816                           
 18817                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 18818  0146C8  0EB7               	movlw	low _PortF
 18819  0146CA  0100               	movlb	0	; () banked
 18820  0146CC  6FA0               	movwf	Port_Init@pInput& (0+255),b
 18821  0146CE  0E03               	movlw	high _PortF
 18822  0146D0  0100               	movlb	0	; () banked
 18823  0146D2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 18824  0146D4  0E05               	movlw	5
 18825  0146D6  0100               	movlb	0	; () banked
 18826  0146D8  6FA2               	movwf	Port_Init@pPort& (0+255),b
 18827  0146DA  EC0A  F0A0         	call	_Port_Init	;wreg free
 18828                           
 18829                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 18830  0146DE  0EDC               	movlw	low _PortG
 18831  0146E0  0100               	movlb	0	; () banked
 18832  0146E2  6FA0               	movwf	Port_Init@pInput& (0+255),b
 18833  0146E4  0E04               	movlw	high _PortG
 18834  0146E6  0100               	movlb	0	; () banked
 18835  0146E8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 18836  0146EA  0E06               	movlw	6
 18837  0146EC  0100               	movlb	0	; () banked
 18838  0146EE  6FA2               	movwf	Port_Init@pPort& (0+255),b
 18839  0146F0  EC0A  F0A0         	call	_Port_Init	;wreg free
 18840                           
 18841                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 18842  0146F4  0EB7               	movlw	low _PortF
 18843  0146F6  0100               	movlb	0	; () banked
 18844  0146F8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18845  0146FA  0E03               	movlw	high _PortF
 18846  0146FC  0100               	movlb	0	; () banked
 18847  0146FE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18848  014700  0E05               	movlw	5
 18849  014702  0100               	movlb	0	; () banked
 18850  014704  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18851  014706  0E00               	movlw	0
 18852  014708  0100               	movlb	0	; () banked
 18853  01470A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18854  01470C  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 18855                           
 18856                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 18857  014710  0EA3               	movlw	low _PortB
 18858  014712  0100               	movlb	0	; () banked
 18859  014714  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 18860  014716  0E03               	movlw	high _PortB
 18861  014718  0100               	movlb	0	; () banked
 18862  01471A  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 18863  01471C  0E00               	movlw	0
 18864  01471E  0100               	movlb	0	; () banked
 18865  014720  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 18866  014722  0E00               	movlw	0
 18867  014724  0100               	movlb	0	; () banked
 18868  014726  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 18869  014728  EC63  F098         	call	_Port_SetQuadType	;wreg free
 18870                           
 18871                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 18872  01472C  0EB7               	movlw	low _PortF
 18873  01472E  0100               	movlb	0	; () banked
 18874  014730  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18875  014732  0E03               	movlw	high _PortF
 18876  014734  0100               	movlb	0	; () banked
 18877  014736  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18878  014738  0E06               	movlw	6
 18879  01473A  0100               	movlb	0	; () banked
 18880  01473C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18881  01473E  0E03               	movlw	3
 18882  014740  0100               	movlb	0	; () banked
 18883  014742  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18884  014744  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 18885                           
 18886                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 18887  014748  0EDC               	movlw	low _PortG
 18888  01474A  0100               	movlb	0	; () banked
 18889  01474C  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 18890  01474E  0E04               	movlw	high _PortG
 18891  014750  0100               	movlb	0	; () banked
 18892  014752  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 18893  014754  0E03               	movlw	3
 18894  014756  0100               	movlb	0	; () banked
 18895  014758  6F9C               	movwf	Port_SetType@pType& (0+255),b
 18896  01475A  EC8E  F099         	call	_Port_SetType	;wreg free
 18897                           
 18898                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 18899  01475E  0EDC               	movlw	low _PortG
 18900  014760  0100               	movlb	0	; () banked
 18901  014762  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18902  014764  0E04               	movlw	high _PortG
 18903  014766  0100               	movlb	0	; () banked
 18904  014768  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18905  01476A  0E04               	movlw	4
 18906  01476C  0100               	movlb	0	; () banked
 18907  01476E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18908  014770  0E00               	movlw	0
 18909  014772  0100               	movlb	0	; () banked
 18910  014774  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18911  014776  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 18912                           
 18913                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 18914  01477A  0EB7               	movlw	low _PortF
 18915  01477C  0100               	movlb	0	; () banked
 18916  01477E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18917  014780  0E03               	movlw	high _PortF
 18918  014782  0100               	movlb	0	; () banked
 18919  014784  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18920  014786  0E06               	movlw	6
 18921  014788  0100               	movlb	0	; () banked
 18922  01478A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18923  01478C  0E01               	movlw	1
 18924  01478E  0100               	movlb	0	; () banked
 18925  014790  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18926  014792  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 18927                           
 18928                           ;MXK.c: 55: LED_Init(eLED1);
 18929  014796  0E00               	movlw	0
 18930  014798  EC0E  F0B9         	call	_LED_Init
 18931                           
 18932                           ;MXK.c: 56: LED_Init(eLED2);
 18933  01479C  0E01               	movlw	1
 18934  01479E  EC0E  F0B9         	call	_LED_Init
 18935                           
 18936                           ;MXK.c: 58: PIR1 = 0;
 18937  0147A2  0E00               	movlw	0
 18938  0147A4  6E9E               	movwf	3998,c	;volatile
 18939                           
 18940                           ;MXK.c: 59: PIR2 = 0;
 18941  0147A6  0E00               	movlw	0
 18942  0147A8  6EA1               	movwf	4001,c	;volatile
 18943                           
 18944                           ;MXK.c: 60: PIR3 = 0;
 18945  0147AA  0E00               	movlw	0
 18946  0147AC  6EA4               	movwf	4004,c	;volatile
 18947                           
 18948                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 18949  0147AE  8E9B               	bsf	3995,7,c	;volatile
 18950                           
 18951                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 18952  0147B0  8C9B               	bsf	3995,6,c	;volatile
 18953                           
 18954                           ;MXK.c: 66: delay_ms(100);
 18955  0147B2  0E00               	movlw	0
 18956  0147B4  0100               	movlb	0	; () banked
 18957  0147B6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18958  0147B8  0E64               	movlw	100
 18959  0147BA  6F60               	movwf	delay_ms@ms& (0+255),b
 18960  0147BC  EC0C  F0B8         	call	_delay_ms	;wreg free
 18961                           
 18962                           ;MXK.c: 68: RCONbits.IPEN = 1;
 18963  0147C0  8ED0               	bsf	4048,7,c	;volatile
 18964  0147C2  0012               	return		;funcret
 18965  0147C4                     __end_of_MXK_Init:
 18966                           	opt stack 0
 18967                           tblptru	equ	0xFF8
 18968                           tblptrh	equ	0xFF7
 18969                           tblptrl	equ	0xFF6
 18970                           tablat	equ	0xFF5
 18971                           prodh	equ	0xFF4
 18972                           prodl	equ	0xFF3
 18973                           intcon	equ	0xFF2
 18974                           postinc0	equ	0xFEE
 18975                           wreg	equ	0xFE8
 18976                           indf1	equ	0xFE7
 18977                           postdec1	equ	0xFE5
 18978                           fsr1h	equ	0xFE2
 18979                           fsr1l	equ	0xFE1
 18980                           indf2	equ	0xFDF
 18981                           postinc2	equ	0xFDE
 18982                           postdec2	equ	0xFDD
 18983                           fsr2h	equ	0xFDA
 18984                           fsr2l	equ	0xFD9
 18985                           status	equ	0xFD8
 18986                           
 18987 ;; *************** function _Port_Init *****************
 18988 ;; Defined at:
 18989 ;;		line 150 in file "Library/Port.c"
 18990 ;; Parameters:    Size  Location     Type
 18991 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 18992 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18993 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18994 ;;  pPort           1   66[BANK0 ] enum E6786
 18995 ;; Auto vars:     Size  Location     Type
 18996 ;;  i               1   69[BANK0 ] unsigned char 
 18997 ;; Return value:  Size  Location     Type
 18998 ;;                  1    wreg      void 
 18999 ;; Registers used:
 19000 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19001 ;; Tracked objects:
 19002 ;;		On entry : 0/0
 19003 ;;		On exit  : 0/0
 19004 ;;		Unchanged: 0/0
 19005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19006 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19008 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19009 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19010 ;;Total ram usage:        6 bytes
 19011 ;; Hardware stack levels used:    1
 19012 ;; Hardware stack levels required when called:   15
 19013 ;; This function calls:
 19014 ;;		_GetPortPORT
 19015 ;;		_GetPortProperties
 19016 ;;		_GetPortTRIS
 19017 ;;		_Port_Set
 19018 ;;		_Port_SetPinType
 19019 ;;		_Port_SetType
 19020 ;;		_Word_GetPair
 19021 ;; This function is called by:
 19022 ;;		_MXK_Init
 19023 ;; This function uses a non-reentrant model
 19024 ;;
 19025                           
 19026                           	psect	text69
 19027  014014                     __ptext69:
 19028                           	opt stack 0
 19029  014014                     _Port_Init:
 19030                           	opt stack 13
 19031                           
 19032                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 19033                           
 19034                           ;incstack = 0
 19035  014014  0100               	movlb	0	; () banked
 19036  014016  51A2               	movf	Port_Init@pPort& (0+255),w,b
 19037  014018  EC6F  F0B0         	call	_GetPortProperties
 19038  01401C  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 19039  014020  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 19040  014024  0100               	movlb	0	; () banked
 19041  014026  C060  FFDE         	movff	?_GetPortProperties,postinc2
 19042  01402A  0100               	movlb	0	; () banked
 19043  01402C  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 19044                           
 19045                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 19046  014030  0100               	movlb	0	; () banked
 19047  014032  51A2               	movf	Port_Init@pPort& (0+255),w,b
 19048  014034  ECC2  F0B0         	call	_GetPortPORT
 19049  014038  0100               	movlb	0	; () banked
 19050  01403A  EE20 F006          	lfsr	2,6
 19051  01403E  51A0               	movf	Port_Init@pInput& (0+255),w,b
 19052  014040  26D9               	addwf	fsr2l,f,c
 19053  014042  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 19054  014044  22DA               	addwfc	fsr2h,f,c
 19055  014046  0100               	movlb	0	; () banked
 19056  014048  C060  FFDE         	movff	?_GetPortPORT,postinc2
 19057  01404C  0100               	movlb	0	; () banked
 19058  01404E  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 19059                           
 19060                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 19061  014052  0100               	movlb	0	; () banked
 19062  014054  51A2               	movf	Port_Init@pPort& (0+255),w,b
 19063  014056  ECC2  F0B0         	call	_GetPortPORT
 19064  01405A  0100               	movlb	0	; () banked
 19065  01405C  EE20 F004          	lfsr	2,4
 19066  014060  51A0               	movf	Port_Init@pInput& (0+255),w,b
 19067  014062  26D9               	addwf	fsr2l,f,c
 19068  014064  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 19069  014066  22DA               	addwfc	fsr2h,f,c
 19070  014068  0100               	movlb	0	; () banked
 19071  01406A  C060  FFDE         	movff	?_GetPortPORT,postinc2
 19072  01406E  0100               	movlb	0	; () banked
 19073  014070  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 19074                           
 19075                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 19076  014074  0100               	movlb	0	; () banked
 19077  014076  51A2               	movf	Port_Init@pPort& (0+255),w,b
 19078  014078  EC1C  F0B0         	call	_GetPortTRIS
 19079  01407C  0100               	movlb	0	; () banked
 19080  01407E  EE20 F002          	lfsr	2,2
 19081  014082  51A0               	movf	Port_Init@pInput& (0+255),w,b
 19082  014084  26D9               	addwf	fsr2l,f,c
 19083  014086  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 19084  014088  22DA               	addwfc	fsr2h,f,c
 19085  01408A  0100               	movlb	0	; () banked
 19086  01408C  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 19087  014090  0100               	movlb	0	; () banked
 19088  014092  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 19089                           
 19090                           ; BSR set to: 0
 19091                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 19092  014096  0100               	movlb	0	; () banked
 19093  014098  EE20 F004          	lfsr	2,4
 19094  01409C  51A0               	movf	Port_Init@pInput& (0+255),w,b
 19095  01409E  26D9               	addwf	fsr2l,f,c
 19096  0140A0  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 19097  0140A2  22DA               	addwfc	fsr2h,f,c
 19098  0140A4  CFDE F0A3          	movff	postinc2,??_Port_Init
 19099  0140A8  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 19100  0140AC  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 19101  0140B0  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 19102  0140B4  0E00               	movlw	0
 19103  0140B6  6EDF               	movwf	indf2,c
 19104                           
 19105                           ; BSR set to: 0
 19106                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 19107  0140B8  0100               	movlb	0	; () banked
 19108  0140BA  EE20 F002          	lfsr	2,2
 19109  0140BE  51A0               	movf	Port_Init@pInput& (0+255),w,b
 19110  0140C0  26D9               	addwf	fsr2l,f,c
 19111  0140C2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 19112  0140C4  22DA               	addwfc	fsr2h,f,c
 19113  0140C6  CFDE F0A3          	movff	postinc2,??_Port_Init
 19114  0140CA  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 19115  0140CE  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 19116  0140D2  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 19117  0140D6  0EFF               	movlw	255
 19118  0140D8  6EDF               	movwf	indf2,c
 19119                           
 19120                           ; BSR set to: 0
 19121                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 19122  0140DA  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 19123  0140DE  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 19124  0140E2  0E00               	movlw	0
 19125  0140E4  0100               	movlb	0	; () banked
 19126  0140E6  6F9C               	movwf	Port_SetType@pType& (0+255),b
 19127  0140E8  EC8E  F099         	call	_Port_SetType	;wreg free
 19128                           
 19129                           ;Port.c: 166: UINT8 i;
 19130                           ;Port.c: 167: for (i=0; i<8; i++)
 19131  0140EC  0E00               	movlw	0
 19132  0140EE  0100               	movlb	0	; () banked
 19133  0140F0  6FA5               	movwf	Port_Init@i& (0+255),b
 19134  0140F2                     l15238:
 19135                           
 19136                           ; BSR set to: 0
 19137  0140F2  0E07               	movlw	7
 19138  0140F4  0100               	movlb	0	; () banked
 19139  0140F6  65A5               	cpfsgt	Port_Init@i& (0+255),b
 19140  0140F8  D031               	goto	l403
 19141  0140FA  D04B               	goto	u12620
 19142  0140FC                     
 19143                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 19144                           
 19145                           ; BSR set to: 0
 19146  0140FC  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 19147  014100  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 19148  014104  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 19149  014108  0E03               	movlw	3
 19150  01410A  0100               	movlb	0	; () banked
 19151  01410C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19152  01410E  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 19153                           
 19154                           ;Port.c: 173: break;
 19155  014112  D03C               	goto	l405
 19156  014114                     
 19157                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 19158  014114  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 19159  014118  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 19160  01411C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 19161  014120  0E02               	movlw	2
 19162  014122  0100               	movlb	0	; () banked
 19163  014124  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19164  014126  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 19165                           
 19166                           ;Port.c: 176: break;
 19167  01412A  D030               	goto	l405
 19168  01412C                     
 19169                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 19170  01412C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 19171  014130  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 19172  014134  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 19173  014138  0E01               	movlw	1
 19174  01413A  0100               	movlb	0	; () banked
 19175  01413C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19176  01413E  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 19177                           
 19178                           ;Port.c: 179: break;
 19179  014142  D024               	goto	l405
 19180  014144                     
 19181                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 19182  014144  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 19183  014148  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 19184  01414C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 19185  014150  0E00               	movlw	0
 19186  014152  0100               	movlb	0	; () banked
 19187  014154  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19188  014156  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 19189                           
 19190                           ;Port.c: 183: }
 19191                           
 19192                           ;Port.c: 182: break;
 19193  01415A  D018               	goto	l405
 19194  01415C                     l403:
 19195  01415C  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 19196  014160  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 19197  014164  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 19198  014168  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 19199  01416C  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 19200  014170  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 19201                           
 19202                           ; Switch size 1, requested type "space"
 19203                           ; Number of cases is 4, Range of values is 0 to 3
 19204                           ; switch strategies available:
 19205                           ; Name         Instructions Cycles
 19206                           ; simple_byte           13     7 (average)
 19207                           ;	Chosen strategy is simple_byte
 19208  014174  0A00               	xorlw	0	; case 0
 19209  014176  B4D8               	btfsc	status,2,c
 19210  014178  D7C1               	goto	l404
 19211  01417A  0A01               	xorlw	1	; case 1
 19212  01417C  B4D8               	btfsc	status,2,c
 19213  01417E  D7D6               	goto	l407
 19214  014180  0A03               	xorlw	3	; case 2
 19215  014182  B4D8               	btfsc	status,2,c
 19216  014184  D7C7               	goto	l406
 19217  014186  0A01               	xorlw	1	; case 3
 19218  014188  B4D8               	btfsc	status,2,c
 19219  01418A  D7DC               	goto	l408
 19220  01418C                     l405:
 19221  01418C  0100               	movlb	0	; () banked
 19222  01418E  2BA5               	incf	Port_Init@i& (0+255),f,b
 19223  014190  D7B0               	goto	l15238
 19224  014192                     u12620:
 19225                           
 19226                           ; BSR set to: 0
 19227                           ;Port.c: 184: }
 19228                           ;Port.c: 185: Port_Set(pInput, 0x00);
 19229                           
 19230                           ; BSR set to: 0
 19231  014192  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 19232  014196  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 19233  01419A  0E00               	movlw	0
 19234  01419C  0100               	movlb	0	; () banked
 19235  01419E  6F71               	movwf	Port_Set@pValue& (0+255),b
 19236  0141A0  ECC1  F093         	call	_Port_Set	;wreg free
 19237  0141A4  0012               	return		;funcret
 19238  0141A6                     __end_of_Port_Init:
 19239                           	opt stack 0
 19240                           tblptru	equ	0xFF8
 19241                           tblptrh	equ	0xFF7
 19242                           tblptrl	equ	0xFF6
 19243                           tablat	equ	0xFF5
 19244                           prodh	equ	0xFF4
 19245                           prodl	equ	0xFF3
 19246                           intcon	equ	0xFF2
 19247                           postinc0	equ	0xFEE
 19248                           wreg	equ	0xFE8
 19249                           indf1	equ	0xFE7
 19250                           postdec1	equ	0xFE5
 19251                           fsr1h	equ	0xFE2
 19252                           fsr1l	equ	0xFE1
 19253                           indf2	equ	0xFDF
 19254                           postinc2	equ	0xFDE
 19255                           postdec2	equ	0xFDD
 19256                           fsr2h	equ	0xFDA
 19257                           fsr2l	equ	0xFD9
 19258                           status	equ	0xFD8
 19259                           
 19260 ;; *************** function _Port_SetType *****************
 19261 ;; Defined at:
 19262 ;;		line 513 in file "Library/Port.c"
 19263 ;; Parameters:    Size  Location     Type
 19264 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 19265 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19266 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19267 ;;  pType           1   60[BANK0 ] enum E6795
 19268 ;; Auto vars:     Size  Location     Type
 19269 ;;  Output          1   63[BANK0 ] enum E6475
 19270 ;; Return value:  Size  Location     Type
 19271 ;;                  1    wreg      enum E6475
 19272 ;; Registers used:
 19273 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19274 ;; Tracked objects:
 19275 ;;		On entry : 0/0
 19276 ;;		On exit  : 0/0
 19277 ;;		Unchanged: 0/0
 19278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19279 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19282 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19283 ;;Total ram usage:        6 bytes
 19284 ;; Hardware stack levels used:    1
 19285 ;; Hardware stack levels required when called:   14
 19286 ;; This function calls:
 19287 ;;		_Port_CheckPortType
 19288 ;;		_Word_SetPair
 19289 ;; This function is called by:
 19290 ;;		_Port_Init
 19291 ;;		_MXK_Init
 19292 ;; This function uses a non-reentrant model
 19293 ;;
 19294                           
 19295                           	psect	text70
 19296  01331C                     __ptext70:
 19297                           	opt stack 0
 19298  01331C                     _Port_SetType:
 19299                           	opt stack 14
 19300                           
 19301                           ;Port.c: 515: ePinError Output = ePinErrorState;
 19302                           
 19303                           ;incstack = 0
 19304  01331C  0E05               	movlw	5
 19305  01331E  0100               	movlb	0	; () banked
 19306  013320  6F9F               	movwf	Port_SetType@Output& (0+255),b
 19307                           
 19308                           ;Port.c: 517: switch (pType)
 19309  013322  D07A               	goto	l509
 19310  013324                     
 19311                           ; BSR set to: 0
 19312                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 19313                           
 19314                           ; BSR set to: 0
 19315  013324  0100               	movlb	0	; () banked
 19316  013326  EE20 F002          	lfsr	2,2
 19317  01332A  519A               	movf	Port_SetType@pInput& (0+255),w,b
 19318  01332C  26D9               	addwf	fsr2l,f,c
 19319  01332E  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 19320  013330  22DA               	addwfc	fsr2h,f,c
 19321  013332  CFDE F09D          	movff	postinc2,??_Port_SetType
 19322  013336  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 19323  01333A  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 19324  01333E  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 19325  013342  0EFF               	movlw	255
 19326  013344  D067               	goto	L14
 19327  013346                     
 19328                           ; BSR set to: 0
 19329                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 19330                           
 19331                           ; BSR set to: 0
 19332  013346  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 19333  01334A  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 19334  01334E  0E01               	movlw	1
 19335  013350  0100               	movlb	0	; () banked
 19336  013352  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 19337  013354  EC0B  F0BB         	call	_Port_CheckPortType	;wreg free
 19338  013358  0100               	movlb	0	; () banked
 19339  01335A  6F9F               	movwf	Port_SetType@Output& (0+255),b
 19340  01335C  0100               	movlb	0	; () banked
 19341  01335E  519F               	movf	Port_SetType@Output& (0+255),w,b
 19342  013360  A4D8               	btfss	status,2,c
 19343  013362  0012               	return	
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;Port.c: 527: {
 19347                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 19348  013364  0100               	movlb	0	; () banked
 19349  013366  EE20 F002          	lfsr	2,2
 19350  01336A  519A               	movf	Port_SetType@pInput& (0+255),w,b
 19351  01336C  26D9               	addwf	fsr2l,f,c
 19352  01336E  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 19353  013370  22DA               	addwfc	fsr2h,f,c
 19354  013372  CFDE F09D          	movff	postinc2,??_Port_SetType
 19355  013376  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 19356  01337A  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 19357  01337E  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 19358  013382  0E00               	movlw	0
 19359  013384  6EDF               	movwf	indf2,c
 19360                           
 19361                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 19362  013386  0100               	movlb	0	; () banked
 19363  013388  EE20 F004          	lfsr	2,4
 19364  01338C  D036               	goto	L25
 19365  01338E                     
 19366                           ; BSR set to: 0
 19367                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 19368                           
 19369                           ; BSR set to: 0
 19370  01338E  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 19371  013392  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 19372  013396  0E02               	movlw	2
 19373  013398  0100               	movlb	0	; () banked
 19374  01339A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 19375  01339C  EC0B  F0BB         	call	_Port_CheckPortType	;wreg free
 19376  0133A0  0100               	movlb	0	; () banked
 19377  0133A2  6F9F               	movwf	Port_SetType@Output& (0+255),b
 19378  0133A4  0100               	movlb	0	; () banked
 19379  0133A6  519F               	movf	Port_SetType@Output& (0+255),w,b
 19380  0133A8  A4D8               	btfss	status,2,c
 19381  0133AA  0012               	return	
 19382                           
 19383                           ; BSR set to: 0
 19384                           ;Port.c: 538: {
 19385                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 19386  0133AC  0100               	movlb	0	; () banked
 19387  0133AE  EE20 F002          	lfsr	2,2
 19388  0133B2  519A               	movf	Port_SetType@pInput& (0+255),w,b
 19389  0133B4  26D9               	addwf	fsr2l,f,c
 19390  0133B6  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 19391  0133B8  22DA               	addwfc	fsr2h,f,c
 19392  0133BA  CFDE F09D          	movff	postinc2,??_Port_SetType
 19393  0133BE  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 19394  0133C2  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 19395  0133C6  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 19396  0133CA  0EFF               	movlw	255
 19397  0133CC  6EDF               	movwf	indf2,c
 19398                           
 19399                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 19400  0133CE  0100               	movlb	0	; () banked
 19401  0133D0  EE20 F004          	lfsr	2,4
 19402  0133D4  D7AA               	goto	L15
 19403  0133D6                     
 19404                           ; BSR set to: 0
 19405                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 19406                           
 19407                           ; BSR set to: 0
 19408  0133D6  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 19409  0133DA  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 19410  0133DE  0E00               	movlw	0
 19411  0133E0  0100               	movlb	0	; () banked
 19412  0133E2  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 19413  0133E4  EC0B  F0BB         	call	_Port_CheckPortType	;wreg free
 19414  0133E8  0100               	movlb	0	; () banked
 19415  0133EA  6F9F               	movwf	Port_SetType@Output& (0+255),b
 19416  0133EC  0100               	movlb	0	; () banked
 19417  0133EE  519F               	movf	Port_SetType@Output& (0+255),w,b
 19418  0133F0  A4D8               	btfss	status,2,c
 19419  0133F2  0012               	return	
 19420                           
 19421                           ; BSR set to: 0
 19422                           ;Port.c: 549: {
 19423                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 19424  0133F4  0100               	movlb	0	; () banked
 19425  0133F6  EE20 F002          	lfsr	2,2
 19426  0133FA                     L25:
 19427  0133FA  519A               	movf	Port_SetType@pInput& (0+255),w,b
 19428  0133FC  26D9               	addwf	fsr2l,f,c
 19429  0133FE  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 19430  013400  22DA               	addwfc	fsr2h,f,c
 19431  013402  CFDE F09D          	movff	postinc2,??_Port_SetType
 19432  013406  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 19433  01340A  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 19434  01340E  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 19435  013412  0E00               	movlw	0
 19436  013414                     L14:
 19437  013414  6EDF               	movwf	indf2,c
 19438                           
 19439                           ;Port.c: 552: }
 19440  013416  D00E               	goto	l511
 19441  013418                     l509:
 19442                           
 19443                           ; BSR set to: 0
 19444                           
 19445                           ; BSR set to: 0
 19446  013418  0100               	movlb	0	; () banked
 19447  01341A  519C               	movf	Port_SetType@pType& (0+255),w,b
 19448                           
 19449                           ; Switch size 1, requested type "space"
 19450                           ; Number of cases is 4, Range of values is 0 to 3
 19451                           ; switch strategies available:
 19452                           ; Name         Instructions Cycles
 19453                           ; simple_byte           13     7 (average)
 19454                           ;	Chosen strategy is simple_byte
 19455  01341C  0A00               	xorlw	0	; case 0
 19456  01341E  B4D8               	btfsc	status,2,c
 19457  013420  D781               	goto	l510
 19458  013422  0A01               	xorlw	1	; case 1
 19459  013424  B4D8               	btfsc	status,2,c
 19460  013426  D78F               	goto	l512
 19461  013428  0A03               	xorlw	3	; case 2
 19462  01342A  B4D8               	btfsc	status,2,c
 19463  01342C  D7B0               	goto	l516
 19464  01342E  0A01               	xorlw	1	; case 3
 19465  013430  B4D8               	btfsc	status,2,c
 19466  013432  D7D1               	goto	l519
 19467  013434                     l511:
 19468                           
 19469                           ; BSR set to: 0
 19470                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 19471                           
 19472                           ; BSR set to: 0
 19473  013434  0E08               	movlw	8
 19474  013436  0100               	movlb	0	; () banked
 19475  013438  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 19476  01343A  0100               	movlb	0	; () banked
 19477  01343C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19478  01343E  0E00               	movlw	0
 19479  013440  0100               	movlb	0	; () banked
 19480  013442  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 19481  013444  0100               	movlb	0	; () banked
 19482  013446  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19483  013448  0E00               	movlw	0
 19484  01344A  0100               	movlb	0	; () banked
 19485  01344C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19486  01344E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 19487  013452  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 19488                           
 19489                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 19490  013456  0E08               	movlw	8
 19491  013458  0100               	movlb	0	; () banked
 19492  01345A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 19493  01345C  0100               	movlb	0	; () banked
 19494  01345E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19495  013460  0E00               	movlw	0
 19496  013462  0100               	movlb	0	; () banked
 19497  013464  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 19498  013466  0100               	movlb	0	; () banked
 19499  013468  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19500  01346A  0E01               	movlw	1
 19501  01346C  0100               	movlb	0	; () banked
 19502  01346E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19503  013470  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 19504  013474  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 19505                           
 19506                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 19507  013478  0E08               	movlw	8
 19508  01347A  0100               	movlb	0	; () banked
 19509  01347C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 19510  01347E  0100               	movlb	0	; () banked
 19511  013480  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19512  013482  0E00               	movlw	0
 19513  013484  0100               	movlb	0	; () banked
 19514  013486  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 19515  013488  0100               	movlb	0	; () banked
 19516  01348A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19517  01348C  0E02               	movlw	2
 19518  01348E  0100               	movlb	0	; () banked
 19519  013490  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19520  013492  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 19521  013496  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 19522                           
 19523                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 19524  01349A  0E08               	movlw	8
 19525  01349C  0100               	movlb	0	; () banked
 19526  01349E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 19527  0134A0  0100               	movlb	0	; () banked
 19528  0134A2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19529  0134A4  0E00               	movlw	0
 19530  0134A6  0100               	movlb	0	; () banked
 19531  0134A8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 19532  0134AA  0100               	movlb	0	; () banked
 19533  0134AC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19534  0134AE  0E03               	movlw	3
 19535  0134B0  0100               	movlb	0	; () banked
 19536  0134B2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19537  0134B4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 19538  0134B8  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 19539                           
 19540                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 19541  0134BC  0E08               	movlw	8
 19542  0134BE  0100               	movlb	0	; () banked
 19543  0134C0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 19544  0134C2  0100               	movlb	0	; () banked
 19545  0134C4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19546  0134C6  0E00               	movlw	0
 19547  0134C8  0100               	movlb	0	; () banked
 19548  0134CA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 19549  0134CC  0100               	movlb	0	; () banked
 19550  0134CE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19551  0134D0  0E04               	movlw	4
 19552  0134D2  0100               	movlb	0	; () banked
 19553  0134D4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19554  0134D6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 19555  0134DA  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 19556                           
 19557                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 19558  0134DE  0E08               	movlw	8
 19559  0134E0  0100               	movlb	0	; () banked
 19560  0134E2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 19561  0134E4  0100               	movlb	0	; () banked
 19562  0134E6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19563  0134E8  0E00               	movlw	0
 19564  0134EA  0100               	movlb	0	; () banked
 19565  0134EC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 19566  0134EE  0100               	movlb	0	; () banked
 19567  0134F0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19568  0134F2  0E05               	movlw	5
 19569  0134F4  0100               	movlb	0	; () banked
 19570  0134F6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19571  0134F8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 19572  0134FC  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 19573                           
 19574                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 19575  013500  0E08               	movlw	8
 19576  013502  0100               	movlb	0	; () banked
 19577  013504  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 19578  013506  0100               	movlb	0	; () banked
 19579  013508  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19580  01350A  0E00               	movlw	0
 19581  01350C  0100               	movlb	0	; () banked
 19582  01350E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 19583  013510  0100               	movlb	0	; () banked
 19584  013512  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19585  013514  0E06               	movlw	6
 19586  013516  0100               	movlb	0	; () banked
 19587  013518  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19588  01351A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 19589  01351E  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 19590                           
 19591                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 19592  013522  0E08               	movlw	8
 19593  013524  0100               	movlb	0	; () banked
 19594  013526  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 19595  013528  0100               	movlb	0	; () banked
 19596  01352A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19597  01352C  0E00               	movlw	0
 19598  01352E  0100               	movlb	0	; () banked
 19599  013530  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 19600  013532  0100               	movlb	0	; () banked
 19601  013534  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19602  013536  0E07               	movlw	7
 19603  013538  0100               	movlb	0	; () banked
 19604  01353A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19605  01353C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 19606  013540  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 19607  013544  0012               	return	
 19608  013546                     __end_of_Port_SetType:
 19609                           	opt stack 0
 19610                           tblptru	equ	0xFF8
 19611                           tblptrh	equ	0xFF7
 19612                           tblptrl	equ	0xFF6
 19613                           tablat	equ	0xFF5
 19614                           prodh	equ	0xFF4
 19615                           prodl	equ	0xFF3
 19616                           intcon	equ	0xFF2
 19617                           postinc0	equ	0xFEE
 19618                           wreg	equ	0xFE8
 19619                           indf1	equ	0xFE7
 19620                           postdec1	equ	0xFE5
 19621                           fsr1h	equ	0xFE2
 19622                           fsr1l	equ	0xFE1
 19623                           indf2	equ	0xFDF
 19624                           postinc2	equ	0xFDE
 19625                           postdec2	equ	0xFDD
 19626                           fsr2h	equ	0xFDA
 19627                           fsr2l	equ	0xFD9
 19628                           status	equ	0xFD8
 19629                           
 19630 ;; *************** function _Port_CheckPortType *****************
 19631 ;; Defined at:
 19632 ;;		line 138 in file "Library/Port.c"
 19633 ;; Parameters:    Size  Location     Type
 19634 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 19635 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19636 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19637 ;;  pDrive          1   56[BANK0 ] enum E6469
 19638 ;; Auto vars:     Size  Location     Type
 19639 ;;  Output          1   57[BANK0 ] enum E6475
 19640 ;; Return value:  Size  Location     Type
 19641 ;;                  1    wreg      enum E6475
 19642 ;; Registers used:
 19643 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19644 ;; Tracked objects:
 19645 ;;		On entry : 0/0
 19646 ;;		On exit  : 0/0
 19647 ;;		Unchanged: 0/0
 19648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19649 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19652 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19653 ;;Total ram usage:        4 bytes
 19654 ;; Hardware stack levels used:    1
 19655 ;; Hardware stack levels required when called:   13
 19656 ;; This function calls:
 19657 ;;		_Port_CheckQuadType
 19658 ;; This function is called by:
 19659 ;;		_Port_SetType
 19660 ;; This function uses a non-reentrant model
 19661 ;;
 19662                           
 19663                           	psect	text71
 19664  017616                     __ptext71:
 19665                           	opt stack 0
 19666  017616                     _Port_CheckPortType:
 19667                           	opt stack 14
 19668                           
 19669                           ;Port.c: 140: ePinError Output = ePinErrorState;
 19670                           
 19671                           ;incstack = 0
 19672  017616  0E05               	movlw	5
 19673  017618  0100               	movlb	0	; () banked
 19674  01761A  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 19675                           
 19676                           ; BSR set to: 0
 19677                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 19678  01761C  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 19679  017620  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 19680  017624  0E00               	movlw	0
 19681  017626  0100               	movlb	0	; () banked
 19682  017628  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 19683  01762A  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 19684  01762E  EC9E  F0B9         	call	_Port_CheckQuadType	;wreg free
 19685  017632  0100               	movlb	0	; () banked
 19686  017634  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 19687  017636  0100               	movlb	0	; () banked
 19688  017638  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 19689  01763A  A4D8               	btfss	status,2,c
 19690  01763C  D00D               	goto	l397
 19691                           
 19692                           ; BSR set to: 0
 19693                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 19694  01763E  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 19695  017642  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 19696  017646  0E01               	movlw	1
 19697  017648  0100               	movlb	0	; () banked
 19698  01764A  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 19699  01764C  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 19700  017650  EC9E  F0B9         	call	_Port_CheckQuadType	;wreg free
 19701  017654  0100               	movlb	0	; () banked
 19702  017656  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 19703  017658                     l397:
 19704                           
 19705                           ; BSR set to: 0
 19706                           ;Port.c: 146: return Output;
 19707                           
 19708                           ; BSR set to: 0
 19709  017658  0100               	movlb	0	; () banked
 19710  01765A  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 19711  01765C  0012               	return	
 19712  01765E                     __end_of_Port_CheckPortType:
 19713                           	opt stack 0
 19714                           tblptru	equ	0xFF8
 19715                           tblptrh	equ	0xFF7
 19716                           tblptrl	equ	0xFF6
 19717                           tablat	equ	0xFF5
 19718                           prodh	equ	0xFF4
 19719                           prodl	equ	0xFF3
 19720                           intcon	equ	0xFF2
 19721                           postinc0	equ	0xFEE
 19722                           wreg	equ	0xFE8
 19723                           indf1	equ	0xFE7
 19724                           postdec1	equ	0xFE5
 19725                           fsr1h	equ	0xFE2
 19726                           fsr1l	equ	0xFE1
 19727                           indf2	equ	0xFDF
 19728                           postinc2	equ	0xFDE
 19729                           postdec2	equ	0xFDD
 19730                           fsr2h	equ	0xFDA
 19731                           fsr2l	equ	0xFD9
 19732                           status	equ	0xFD8
 19733                           
 19734 ;; *************** function _Port_Set *****************
 19735 ;; Defined at:
 19736 ;;		line 570 in file "Library/Port.c"
 19737 ;; Parameters:    Size  Location     Type
 19738 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 19739 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19740 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19741 ;;  pValue          1   17[BANK0 ] unsigned char 
 19742 ;; Auto vars:     Size  Location     Type
 19743 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 19744 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 19745 ;;  Type            1   38[BANK0 ] enum E6795
 19746 ;; Return value:  Size  Location     Type
 19747 ;;                  1    wreg      void 
 19748 ;; Registers used:
 19749 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19750 ;; Tracked objects:
 19751 ;;		On entry : 0/0
 19752 ;;		On exit  : 0/0
 19753 ;;		Unchanged: 0/0
 19754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19755 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19756 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19757 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19758 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19759 ;;Total ram usage:       24 bytes
 19760 ;; Hardware stack levels used:    1
 19761 ;; Hardware stack levels required when called:   10
 19762 ;; This function calls:
 19763 ;;		_Byte_SetByte
 19764 ;;		_Word_GetPair
 19765 ;; This function is called by:
 19766 ;;		_Port_Init
 19767 ;;		_Port_Toggle
 19768 ;; This function uses a non-reentrant model
 19769 ;;
 19770                           
 19771                           	psect	text72
 19772  012782                     __ptext72:
 19773                           	opt stack 0
 19774  012782                     _Port_Set:
 19775                           	opt stack 17
 19776                           
 19777                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 19778                           
 19779                           ; BSR set to: 0
 19780                           ;incstack = 0
 19781  012782  0E08               	movlw	8
 19782  012784  0100               	movlb	0	; () banked
 19783  012786  256F               	addwf	Port_Set@pInput& (0+255),w,b
 19784  012788  0100               	movlb	0	; () banked
 19785  01278A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 19786  01278C  0E00               	movlw	0
 19787  01278E  0100               	movlb	0	; () banked
 19788  012790  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 19789  012792  0100               	movlb	0	; () banked
 19790  012794  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 19791  012796  0E00               	movlw	0
 19792  012798  0100               	movlb	0	; () banked
 19793  01279A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 19794  01279C  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 19795  0127A0  0100               	movlb	0	; () banked
 19796  0127A2  6F86               	movwf	Port_Set@Type& (0+255),b
 19797                           
 19798                           ; BSR set to: 0
 19799                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 19800  0127A4  0100               	movlb	0	; () banked
 19801  0127A6  5186               	movf	Port_Set@Type& (0+255),w,b
 19802  0127A8  0100               	movlb	0	; () banked
 19803  0127AA  6F72               	movwf	??_Port_Set& (0+255),b
 19804  0127AC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 19805  0127AE  0E0E               	movlw	14
 19806  0127B0                     u11585:
 19807  0127B0  90D8               	bcf	status,0,c
 19808  0127B2  0100               	movlb	0	; () banked
 19809  0127B4  3772               	rlcf	??_Port_Set& (0+255),f,b
 19810  0127B6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 19811  0127B8  2EE8               	decfsz	wreg,f,c
 19812  0127BA  D7FA               	goto	u11585
 19813  0127BC  0100               	movlb	0	; () banked
 19814  0127BE  5186               	movf	Port_Set@Type& (0+255),w,b
 19815  0127C0  0100               	movlb	0	; () banked
 19816  0127C2  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 19817  0127C4  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 19818  0127C6  0E0C               	movlw	12
 19819  0127C8                     u11595:
 19820  0127C8  90D8               	bcf	status,0,c
 19821  0127CA  0100               	movlb	0	; () banked
 19822  0127CC  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 19823  0127CE  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 19824  0127D0  2EE8               	decfsz	wreg,f,c
 19825  0127D2  D7FA               	goto	u11595
 19826  0127D4  0100               	movlb	0	; () banked
 19827  0127D6  5186               	movf	Port_Set@Type& (0+255),w,b
 19828  0127D8  0100               	movlb	0	; () banked
 19829  0127DA  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 19830  0127DC  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 19831  0127DE  0E0A               	movlw	10
 19832  0127E0                     u11605:
 19833  0127E0  90D8               	bcf	status,0,c
 19834  0127E2  0100               	movlb	0	; () banked
 19835  0127E4  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 19836  0127E6  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 19837  0127E8  2EE8               	decfsz	wreg,f,c
 19838  0127EA  D7FA               	goto	u11605
 19839  0127EC  0100               	movlb	0	; () banked
 19840  0127EE  5186               	movf	Port_Set@Type& (0+255),w,b
 19841  0127F0  0100               	movlb	0	; () banked
 19842  0127F2  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 19843  0127F4  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 19844  0127F6  0100               	movlb	0	; () banked
 19845  0127F8  5186               	movf	Port_Set@Type& (0+255),w,b
 19846  0127FA  0100               	movlb	0	; () banked
 19847  0127FC  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 19848  0127FE  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 19849  012800  0E06               	movlw	6
 19850  012802                     u11615:
 19851  012802  90D8               	bcf	status,0,c
 19852  012804  0100               	movlb	0	; () banked
 19853  012806  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 19854  012808  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 19855  01280A  2EE8               	decfsz	wreg,f,c
 19856  01280C  D7FA               	goto	u11615
 19857  01280E  0100               	movlb	0	; () banked
 19858  012810  5186               	movf	Port_Set@Type& (0+255),w,b
 19859  012812  0100               	movlb	0	; () banked
 19860  012814  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 19861  012816  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 19862  012818  0100               	movlb	0	; () banked
 19863  01281A  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 19864  01281C  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 19865  01281E  0EF0               	movlw	240
 19866  012820  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 19867  012822  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 19868  012824  0B0F               	andlw	15
 19869  012826  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 19870  012828  0EF0               	movlw	240
 19871  01282A  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 19872  01282C  0100               	movlb	0	; () banked
 19873  01282E  5186               	movf	Port_Set@Type& (0+255),w,b
 19874  012830  0100               	movlb	0	; () banked
 19875  012832  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 19876  012834  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 19877  012836  0100               	movlb	0	; () banked
 19878  012838  90D8               	bcf	status,0,c
 19879  01283A  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 19880  01283C  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 19881  01283E  0100               	movlb	0	; () banked
 19882  012840  90D8               	bcf	status,0,c
 19883  012842  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 19884  012844  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 19885  012846  0100               	movlb	0	; () banked
 19886  012848  5186               	movf	Port_Set@Type& (0+255),w,b
 19887  01284A  0100               	movlb	0	; () banked
 19888  01284C  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 19889  01284E  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 19890  012850  0100               	movlb	0	; () banked
 19891  012852  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 19892  012854  0100               	movlb	0	; () banked
 19893  012856  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 19894  012858  0100               	movlb	0	; () banked
 19895  01285A  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 19896  01285C  0100               	movlb	0	; () banked
 19897  01285E  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 19898  012860  0100               	movlb	0	; () banked
 19899  012862  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 19900  012864  0100               	movlb	0	; () banked
 19901  012866  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 19902  012868  0100               	movlb	0	; () banked
 19903  01286A  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 19904  01286C  0100               	movlb	0	; () banked
 19905  01286E  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 19906  012870  0100               	movlb	0	; () banked
 19907  012872  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 19908  012874  0100               	movlb	0	; () banked
 19909  012876  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 19910  012878  0100               	movlb	0	; () banked
 19911  01287A  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 19912  01287C  0100               	movlb	0	; () banked
 19913  01287E  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 19914  012880  0100               	movlb	0	; () banked
 19915  012882  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 19916  012884  0100               	movlb	0	; () banked
 19917  012886  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 19918  012888  0100               	movlb	0	; () banked
 19919  01288A  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 19920  01288C  0100               	movlb	0	; () banked
 19921  01288E  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 19922  012890  0100               	movlb	0	; () banked
 19923  012892  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 19924  012894  0100               	movlb	0	; () banked
 19925  012896  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 19926  012898  0100               	movlb	0	; () banked
 19927  01289A  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 19928  01289C  0100               	movlb	0	; () banked
 19929  01289E  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 19930  0128A0  0100               	movlb	0	; () banked
 19931  0128A2  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 19932  0128A4  0100               	movlb	0	; () banked
 19933  0128A6  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 19934  0128A8  0100               	movlb	0	; () banked
 19935  0128AA  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 19936  0128AC  0100               	movlb	0	; () banked
 19937  0128AE  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 19938  0128B0  0100               	movlb	0	; () banked
 19939  0128B2  5172               	movf	??_Port_Set& (0+255),w,b
 19940  0128B4  0100               	movlb	0	; () banked
 19941  0128B6  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 19942  0128B8  0100               	movlb	0	; () banked
 19943  0128BA  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 19944  0128BC  0100               	movlb	0	; () banked
 19945  0128BE  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 19946  0128C0  0100               	movlb	0	; () banked
 19947  0128C2  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 19948  0128C4  0100               	movlb	0	; () banked
 19949  0128C6  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 19950                           
 19951                           ; BSR set to: 0
 19952                           ;Port.c: 574: UINT16 TypeActual = Type;
 19953  0128C8  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 19954  0128CC  0100               	movlb	0	; () banked
 19955  0128CE  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 19956                           
 19957                           ; BSR set to: 0
 19958                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 19959  0128D0  0E08               	movlw	8
 19960  0128D2  0100               	movlb	0	; () banked
 19961  0128D4  256F               	addwf	Port_Set@pInput& (0+255),w,b
 19962  0128D6  0100               	movlb	0	; () banked
 19963  0128D8  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 19964  0128DA  0E00               	movlw	0
 19965  0128DC  0100               	movlb	0	; () banked
 19966  0128DE  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 19967  0128E0  0100               	movlb	0	; () banked
 19968  0128E2  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 19969  0128E4  0E01               	movlw	1
 19970  0128E6  0100               	movlb	0	; () banked
 19971  0128E8  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 19972  0128EA  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 19973  0128EE  0100               	movlb	0	; () banked
 19974  0128F0  6F72               	movwf	??_Port_Set& (0+255),b
 19975  0128F2  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 19976  0128F4  0100               	movlb	0	; () banked
 19977  0128F6  90D8               	bcf	status,0,c
 19978  0128F8  3772               	rlcf	??_Port_Set& (0+255),f,b
 19979  0128FA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 19980  0128FC  0100               	movlb	0	; () banked
 19981  0128FE  90D8               	bcf	status,0,c
 19982  012900  3772               	rlcf	??_Port_Set& (0+255),f,b
 19983  012902  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 19984  012904  0100               	movlb	0	; () banked
 19985  012906  5172               	movf	??_Port_Set& (0+255),w,b
 19986  012908  0100               	movlb	0	; () banked
 19987  01290A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 19988  01290C  0100               	movlb	0	; () banked
 19989  01290E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 19990  012910  0100               	movlb	0	; () banked
 19991  012912  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 19992                           
 19993                           ; BSR set to: 0
 19994                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 19995  012914  0E08               	movlw	8
 19996  012916  0100               	movlb	0	; () banked
 19997  012918  256F               	addwf	Port_Set@pInput& (0+255),w,b
 19998  01291A  0100               	movlb	0	; () banked
 19999  01291C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 20000  01291E  0E00               	movlw	0
 20001  012920  0100               	movlb	0	; () banked
 20002  012922  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 20003  012924  0100               	movlb	0	; () banked
 20004  012926  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 20005  012928  0E02               	movlw	2
 20006  01292A  0100               	movlb	0	; () banked
 20007  01292C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 20008  01292E  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 20009  012932  0100               	movlb	0	; () banked
 20010  012934  6F72               	movwf	??_Port_Set& (0+255),b
 20011  012936  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 20012  012938  0100               	movlb	0	; () banked
 20013  01293A  3B72               	swapf	??_Port_Set& (0+255),f,b
 20014  01293C  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 20015  01293E  0EF0               	movlw	240
 20016  012940  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 20017  012942  5172               	movf	??_Port_Set& (0+255),w,b
 20018  012944  0B0F               	andlw	15
 20019  012946  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 20020  012948  0EF0               	movlw	240
 20021  01294A  1772               	andwf	??_Port_Set& (0+255),f,b
 20022  01294C  0100               	movlb	0	; () banked
 20023  01294E  5172               	movf	??_Port_Set& (0+255),w,b
 20024  012950  0100               	movlb	0	; () banked
 20025  012952  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 20026  012954  0100               	movlb	0	; () banked
 20027  012956  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 20028  012958  0100               	movlb	0	; () banked
 20029  01295A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 20030                           
 20031                           ; BSR set to: 0
 20032                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 20033  01295C  0E08               	movlw	8
 20034  01295E  0100               	movlb	0	; () banked
 20035  012960  256F               	addwf	Port_Set@pInput& (0+255),w,b
 20036  012962  0100               	movlb	0	; () banked
 20037  012964  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 20038  012966  0E00               	movlw	0
 20039  012968  0100               	movlb	0	; () banked
 20040  01296A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 20041  01296C  0100               	movlb	0	; () banked
 20042  01296E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 20043  012970  0E03               	movlw	3
 20044  012972  0100               	movlb	0	; () banked
 20045  012974  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 20046  012976  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 20047  01297A  0100               	movlb	0	; () banked
 20048  01297C  6F72               	movwf	??_Port_Set& (0+255),b
 20049  01297E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 20050  012980  0E06               	movlw	6
 20051  012982                     u11625:
 20052  012982  90D8               	bcf	status,0,c
 20053  012984  0100               	movlb	0	; () banked
 20054  012986  3772               	rlcf	??_Port_Set& (0+255),f,b
 20055  012988  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 20056  01298A  2EE8               	decfsz	wreg,f,c
 20057  01298C  D7FA               	goto	u11625
 20058  01298E  0100               	movlb	0	; () banked
 20059  012990  5172               	movf	??_Port_Set& (0+255),w,b
 20060  012992  0100               	movlb	0	; () banked
 20061  012994  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 20062  012996  0100               	movlb	0	; () banked
 20063  012998  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 20064  01299A  0100               	movlb	0	; () banked
 20065  01299C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 20066                           
 20067                           ; BSR set to: 0
 20068                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 20069  01299E  0E08               	movlw	8
 20070  0129A0  0100               	movlb	0	; () banked
 20071  0129A2  256F               	addwf	Port_Set@pInput& (0+255),w,b
 20072  0129A4  0100               	movlb	0	; () banked
 20073  0129A6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 20074  0129A8  0E00               	movlw	0
 20075  0129AA  0100               	movlb	0	; () banked
 20076  0129AC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 20077  0129AE  0100               	movlb	0	; () banked
 20078  0129B0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 20079  0129B2  0E04               	movlw	4
 20080  0129B4  0100               	movlb	0	; () banked
 20081  0129B6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 20082  0129B8  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 20083  0129BC  0100               	movlb	0	; () banked
 20084  0129BE  6F72               	movwf	??_Port_Set& (0+255),b
 20085  0129C0  0100               	movlb	0	; () banked
 20086  0129C2  5172               	movf	??_Port_Set& (0+255),w,b
 20087  0129C4  0100               	movlb	0	; () banked
 20088  0129C6  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 20089  0129C8  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 20090  0129CA  0100               	movlb	0	; () banked
 20091  0129CC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 20092  0129CE  0100               	movlb	0	; () banked
 20093  0129D0  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 20094  0129D2  0100               	movlb	0	; () banked
 20095  0129D4  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 20096  0129D6  0100               	movlb	0	; () banked
 20097  0129D8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 20098                           
 20099                           ; BSR set to: 0
 20100                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 20101  0129DA  0E08               	movlw	8
 20102  0129DC  0100               	movlb	0	; () banked
 20103  0129DE  256F               	addwf	Port_Set@pInput& (0+255),w,b
 20104  0129E0  0100               	movlb	0	; () banked
 20105  0129E2  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 20106  0129E4  0E00               	movlw	0
 20107  0129E6  0100               	movlb	0	; () banked
 20108  0129E8  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 20109  0129EA  0100               	movlb	0	; () banked
 20110  0129EC  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 20111  0129EE  0E05               	movlw	5
 20112  0129F0  0100               	movlb	0	; () banked
 20113  0129F2  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 20114  0129F4  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 20115  0129F8  0100               	movlb	0	; () banked
 20116  0129FA  6F72               	movwf	??_Port_Set& (0+255),b
 20117  0129FC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 20118  0129FE  0E0A               	movlw	10
 20119  012A00                     u11635:
 20120  012A00  90D8               	bcf	status,0,c
 20121  012A02  0100               	movlb	0	; () banked
 20122  012A04  3772               	rlcf	??_Port_Set& (0+255),f,b
 20123  012A06  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 20124  012A08  2EE8               	decfsz	wreg,f,c
 20125  012A0A  D7FA               	goto	u11635
 20126  012A0C  0100               	movlb	0	; () banked
 20127  012A0E  5172               	movf	??_Port_Set& (0+255),w,b
 20128  012A10  0100               	movlb	0	; () banked
 20129  012A12  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 20130  012A14  0100               	movlb	0	; () banked
 20131  012A16  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 20132  012A18  0100               	movlb	0	; () banked
 20133  012A1A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 20134                           
 20135                           ; BSR set to: 0
 20136                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 20137  012A1C  0E08               	movlw	8
 20138  012A1E  0100               	movlb	0	; () banked
 20139  012A20  256F               	addwf	Port_Set@pInput& (0+255),w,b
 20140  012A22  0100               	movlb	0	; () banked
 20141  012A24  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 20142  012A26  0E00               	movlw	0
 20143  012A28  0100               	movlb	0	; () banked
 20144  012A2A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 20145  012A2C  0100               	movlb	0	; () banked
 20146  012A2E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 20147  012A30  0E06               	movlw	6
 20148  012A32  0100               	movlb	0	; () banked
 20149  012A34  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 20150  012A36  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 20151  012A3A  0100               	movlb	0	; () banked
 20152  012A3C  6F72               	movwf	??_Port_Set& (0+255),b
 20153  012A3E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 20154  012A40  0E0C               	movlw	12
 20155  012A42                     u11645:
 20156  012A42  90D8               	bcf	status,0,c
 20157  012A44  0100               	movlb	0	; () banked
 20158  012A46  3772               	rlcf	??_Port_Set& (0+255),f,b
 20159  012A48  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 20160  012A4A  2EE8               	decfsz	wreg,f,c
 20161  012A4C  D7FA               	goto	u11645
 20162  012A4E  0100               	movlb	0	; () banked
 20163  012A50  5172               	movf	??_Port_Set& (0+255),w,b
 20164  012A52  0100               	movlb	0	; () banked
 20165  012A54  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 20166  012A56  0100               	movlb	0	; () banked
 20167  012A58  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 20168  012A5A  0100               	movlb	0	; () banked
 20169  012A5C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 20170                           
 20171                           ; BSR set to: 0
 20172                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 20173  012A5E  0E08               	movlw	8
 20174  012A60  0100               	movlb	0	; () banked
 20175  012A62  256F               	addwf	Port_Set@pInput& (0+255),w,b
 20176  012A64  0100               	movlb	0	; () banked
 20177  012A66  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 20178  012A68  0E00               	movlw	0
 20179  012A6A  0100               	movlb	0	; () banked
 20180  012A6C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 20181  012A6E  0100               	movlb	0	; () banked
 20182  012A70  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 20183  012A72  0E07               	movlw	7
 20184  012A74  0100               	movlb	0	; () banked
 20185  012A76  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 20186  012A78  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 20187  012A7C  0100               	movlb	0	; () banked
 20188  012A7E  6F72               	movwf	??_Port_Set& (0+255),b
 20189  012A80  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 20190  012A82  0E0E               	movlw	14
 20191  012A84                     u11655:
 20192  012A84  90D8               	bcf	status,0,c
 20193  012A86  0100               	movlb	0	; () banked
 20194  012A88  3772               	rlcf	??_Port_Set& (0+255),f,b
 20195  012A8A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 20196  012A8C  2EE8               	decfsz	wreg,f,c
 20197  012A8E  D7FA               	goto	u11655
 20198  012A90  0100               	movlb	0	; () banked
 20199  012A92  5172               	movf	??_Port_Set& (0+255),w,b
 20200  012A94  0100               	movlb	0	; () banked
 20201  012A96  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 20202  012A98  0100               	movlb	0	; () banked
 20203  012A9A  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 20204  012A9C  0100               	movlb	0	; () banked
 20205  012A9E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 20206                           
 20207                           ;Port.c: 584: if (TypeRequired == TypeActual)
 20208  012AA0  0100               	movlb	0	; () banked
 20209  012AA2  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 20210  012AA4  0100               	movlb	0	; () banked
 20211  012AA6  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 20212  012AA8  E148               	bnz	l528
 20213  012AAA  0100               	movlb	0	; () banked
 20214  012AAC  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 20215  012AAE  0100               	movlb	0	; () banked
 20216  012AB0  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 20217  012AB2  A4D8               	btfss	status,2,c
 20218  012AB4  0012               	return	
 20219  012AB6  D032               	goto	l526
 20220  012AB8                     
 20221                           ; BSR set to: 0
 20222                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 20223                           
 20224                           ; BSR set to: 0
 20225  012AB8  0100               	movlb	0	; () banked
 20226  012ABA  EE20 F002          	lfsr	2,2
 20227  012ABE  516F               	movf	Port_Set@pInput& (0+255),w,b
 20228  012AC0  26D9               	addwf	fsr2l,f,c
 20229  012AC2  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 20230  012AC4  22DA               	addwfc	fsr2h,f,c
 20231  012AC6  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 20232  012ACA  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 20233  012ACE  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 20234  012AD2  EC26  F0C0         	call	_Byte_SetByte	;wreg free
 20235                           
 20236                           ;Port.c: 594: break;
 20237  012AD6  0012               	return	
 20238  012AD8                     
 20239                           ;Port.c: 597: pValue = ~pValue;
 20240  012AD8  0100               	movlb	0	; () banked
 20241  012ADA  1F71               	comf	Port_Set@pValue& (0+255),f,b
 20242                           
 20243                           ; BSR set to: 0
 20244                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 20245  012ADC  0100               	movlb	0	; () banked
 20246  012ADE  EE20 F002          	lfsr	2,2
 20247  012AE2  516F               	movf	Port_Set@pInput& (0+255),w,b
 20248  012AE4  26D9               	addwf	fsr2l,f,c
 20249  012AE6  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 20250  012AE8  22DA               	addwfc	fsr2h,f,c
 20251  012AEA  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 20252  012AEE  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 20253  012AF2  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 20254  012AF6  EC26  F0C0         	call	_Byte_SetByte	;wreg free
 20255                           
 20256                           ;Port.c: 599: break;
 20257  012AFA  0012               	return	
 20258  012AFC                     
 20259                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 20260  012AFC  0100               	movlb	0	; () banked
 20261  012AFE  EE20 F004          	lfsr	2,4
 20262  012B02  516F               	movf	Port_Set@pInput& (0+255),w,b
 20263  012B04  26D9               	addwf	fsr2l,f,c
 20264  012B06  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 20265  012B08  22DA               	addwfc	fsr2h,f,c
 20266  012B0A  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 20267  012B0E  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 20268  012B12  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 20269  012B16  EC26  F0C0         	call	_Byte_SetByte	;wreg free
 20270                           
 20271                           ;Port.c: 606: }
 20272                           
 20273                           ;Port.c: 605: break;
 20274                           
 20275                           ;Port.c: 604: default:
 20276                           
 20277                           ;Port.c: 603: break;
 20278  012B1A  0012               	return	
 20279  012B1C                     l526:
 20280  012B1C  0100               	movlb	0	; () banked
 20281  012B1E  5186               	movf	Port_Set@Type& (0+255),w,b
 20282                           
 20283                           ; Switch size 1, requested type "space"
 20284                           ; Number of cases is 4, Range of values is 0 to 3
 20285                           ; switch strategies available:
 20286                           ; Name         Instructions Cycles
 20287                           ; simple_byte           13     7 (average)
 20288                           ;	Chosen strategy is simple_byte
 20289  012B20  0A00               	xorlw	0	; case 0
 20290  012B22  B4D8               	btfsc	status,2,c
 20291  012B24  0012               	return	
 20292  012B26  0A01               	xorlw	1	; case 1
 20293  012B28  B4D8               	btfsc	status,2,c
 20294  012B2A  D7C6               	goto	l529
 20295  012B2C  0A03               	xorlw	3	; case 2
 20296  012B2E  B4D8               	btfsc	status,2,c
 20297  012B30  D7D3               	goto	l531
 20298  012B32  0A01               	xorlw	1	; case 3
 20299  012B34  A4D8               	btfss	status,2,c
 20300                           
 20301                           ; BSR set to: 0
 20302                           
 20303                           ; BSR set to: 0
 20304                           ;Port.c: 607: }
 20305  012B36  0012               	return	
 20306  012B38  D7E1               	goto	l532
 20307  012B3A                     l528:
 20308  012B3A  0012               	return		;funcret
 20309  012B3C                     __end_of_Port_Set:
 20310                           	opt stack 0
 20311                           tblptru	equ	0xFF8
 20312                           tblptrh	equ	0xFF7
 20313                           tblptrl	equ	0xFF6
 20314                           tablat	equ	0xFF5
 20315                           prodh	equ	0xFF4
 20316                           prodl	equ	0xFF3
 20317                           intcon	equ	0xFF2
 20318                           postinc0	equ	0xFEE
 20319                           wreg	equ	0xFE8
 20320                           indf1	equ	0xFE7
 20321                           postdec1	equ	0xFE5
 20322                           fsr1h	equ	0xFE2
 20323                           fsr1l	equ	0xFE1
 20324                           indf2	equ	0xFDF
 20325                           postinc2	equ	0xFDE
 20326                           postdec2	equ	0xFDD
 20327                           fsr2h	equ	0xFDA
 20328                           fsr2l	equ	0xFD9
 20329                           status	equ	0xFD8
 20330                           
 20331 ;; *************** function _Byte_SetByte *****************
 20332 ;; Defined at:
 20333 ;;		line 110 in file "Library/Types.c"
 20334 ;; Parameters:    Size  Location     Type
 20335 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20336 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 20337 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20338 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20339 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20340 ;;		 -> NULL(0), 
 20341 ;;  pValue          1    2[BANK0 ] unsigned char 
 20342 ;; Auto vars:     Size  Location     Type
 20343 ;;		None
 20344 ;; Return value:  Size  Location     Type
 20345 ;;                  1    wreg      void 
 20346 ;; Registers used:
 20347 ;;		fsr2l, fsr2h
 20348 ;; Tracked objects:
 20349 ;;		On entry : 0/0
 20350 ;;		On exit  : 0/0
 20351 ;;		Unchanged: 0/0
 20352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20353 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20356 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20357 ;;Total ram usage:        3 bytes
 20358 ;; Hardware stack levels used:    1
 20359 ;; Hardware stack levels required when called:    7
 20360 ;; This function calls:
 20361 ;;		Nothing
 20362 ;; This function is called by:
 20363 ;;		_Port_Set
 20364 ;;		_I2C_Init
 20365 ;; This function uses a non-reentrant model
 20366 ;;
 20367                           
 20368                           	psect	text73
 20369  01804C                     __ptext73:
 20370                           	opt stack 0
 20371  01804C                     _Byte_SetByte:
 20372                           	opt stack 19
 20373                           
 20374                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 20375                           
 20376                           ;incstack = 0
 20377  01804C  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 20378  018050  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 20379  018054  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 20380  018058  0012               	return		;funcret
 20381  01805A                     __end_of_Byte_SetByte:
 20382                           	opt stack 0
 20383                           tblptru	equ	0xFF8
 20384                           tblptrh	equ	0xFF7
 20385                           tblptrl	equ	0xFF6
 20386                           tablat	equ	0xFF5
 20387                           prodh	equ	0xFF4
 20388                           prodl	equ	0xFF3
 20389                           intcon	equ	0xFF2
 20390                           postinc0	equ	0xFEE
 20391                           wreg	equ	0xFE8
 20392                           indf1	equ	0xFE7
 20393                           postdec1	equ	0xFE5
 20394                           fsr1h	equ	0xFE2
 20395                           fsr1l	equ	0xFE1
 20396                           indf2	equ	0xFDF
 20397                           postinc2	equ	0xFDE
 20398                           postdec2	equ	0xFDD
 20399                           fsr2h	equ	0xFDA
 20400                           fsr2l	equ	0xFD9
 20401                           status	equ	0xFD8
 20402                           
 20403 ;; *************** function _GetPortTRIS *****************
 20404 ;; Defined at:
 20405 ;;		line 67 in file "Library/Port.c"
 20406 ;; Parameters:    Size  Location     Type
 20407 ;;  pInput          1    wreg     enum E6786
 20408 ;; Auto vars:     Size  Location     Type
 20409 ;;  pInput          1    2[BANK0 ] enum E6786
 20410 ;; Return value:  Size  Location     Type
 20411 ;;                  2    0[BANK0 ] PTR struct Byte
 20412 ;; Registers used:
 20413 ;;		wreg, status,2, status,0
 20414 ;; Tracked objects:
 20415 ;;		On entry : 0/0
 20416 ;;		On exit  : 0/0
 20417 ;;		Unchanged: 0/0
 20418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20419 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20422 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20423 ;;Total ram usage:        3 bytes
 20424 ;; Hardware stack levels used:    1
 20425 ;; Hardware stack levels required when called:    7
 20426 ;; This function calls:
 20427 ;;		Nothing
 20428 ;; This function is called by:
 20429 ;;		_Port_Init
 20430 ;; This function uses a non-reentrant model
 20431 ;;
 20432                           
 20433                           	psect	text74
 20434  016038                     __ptext74:
 20435                           	opt stack 0
 20436  016038                     _GetPortTRIS:
 20437                           	opt stack 20
 20438                           
 20439                           ;incstack = 0
 20440                           ;GetPortTRIS@pInput stored from wreg
 20441  016038  0100               	movlb	0	; () banked
 20442  01603A  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 20443                           
 20444                           ;Port.c: 69: switch (pInput)
 20445  01603C  D038               	goto	l363
 20446  01603E                     
 20447                           ;Port.c: 72: return (BytePtr)&TRISA;
 20448  01603E  0E92               	movlw	146
 20449  016040  0100               	movlb	0	; () banked
 20450  016042  6F60               	movwf	?_GetPortTRIS& (0+255),b
 20451  016044  0E0F               	movlw	15
 20452  016046  0100               	movlb	0	; () banked
 20453  016048  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 20454                           
 20455                           ; BSR set to: 0
 20456  01604A  0012               	return	
 20457  01604C                     
 20458                           ; BSR set to: 0
 20459                           ;Port.c: 74: return (BytePtr)&TRISB;
 20460                           
 20461                           ; BSR set to: 0
 20462  01604C  0E93               	movlw	147
 20463  01604E  0100               	movlb	0	; () banked
 20464  016050  6F60               	movwf	?_GetPortTRIS& (0+255),b
 20465  016052  0E0F               	movlw	15
 20466  016054  0100               	movlb	0	; () banked
 20467  016056  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 20468                           
 20469                           ; BSR set to: 0
 20470  016058  0012               	return	
 20471  01605A                     
 20472                           ; BSR set to: 0
 20473                           ;Port.c: 76: return (BytePtr)&TRISC;
 20474                           
 20475                           ; BSR set to: 0
 20476  01605A  0E94               	movlw	148
 20477  01605C  0100               	movlb	0	; () banked
 20478  01605E  6F60               	movwf	?_GetPortTRIS& (0+255),b
 20479  016060  0E0F               	movlw	15
 20480  016062  0100               	movlb	0	; () banked
 20481  016064  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 20482                           
 20483                           ; BSR set to: 0
 20484  016066  0012               	return	
 20485  016068                     
 20486                           ; BSR set to: 0
 20487                           ;Port.c: 78: return (BytePtr)&TRISD;
 20488                           
 20489                           ; BSR set to: 0
 20490  016068  0E95               	movlw	149
 20491  01606A  0100               	movlb	0	; () banked
 20492  01606C  6F60               	movwf	?_GetPortTRIS& (0+255),b
 20493  01606E  0E0F               	movlw	15
 20494  016070  0100               	movlb	0	; () banked
 20495  016072  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 20496                           
 20497                           ; BSR set to: 0
 20498  016074  0012               	return	
 20499  016076                     
 20500                           ; BSR set to: 0
 20501                           ;Port.c: 80: return (BytePtr)&TRISE;
 20502                           
 20503                           ; BSR set to: 0
 20504  016076  0E96               	movlw	150
 20505  016078  0100               	movlb	0	; () banked
 20506  01607A  6F60               	movwf	?_GetPortTRIS& (0+255),b
 20507  01607C  0E0F               	movlw	15
 20508  01607E  0100               	movlb	0	; () banked
 20509  016080  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 20510                           
 20511                           ; BSR set to: 0
 20512  016082  0012               	return	
 20513  016084                     
 20514                           ; BSR set to: 0
 20515                           ;Port.c: 82: return (BytePtr)&TRISF;
 20516                           
 20517                           ; BSR set to: 0
 20518  016084  0E97               	movlw	151
 20519  016086  0100               	movlb	0	; () banked
 20520  016088  6F60               	movwf	?_GetPortTRIS& (0+255),b
 20521  01608A  0E0F               	movlw	15
 20522  01608C  0100               	movlb	0	; () banked
 20523  01608E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 20524                           
 20525                           ; BSR set to: 0
 20526  016090  0012               	return	
 20527  016092                     
 20528                           ; BSR set to: 0
 20529                           ;Port.c: 84: return (BytePtr)&TRISG;
 20530                           
 20531                           ; BSR set to: 0
 20532  016092  0E98               	movlw	152
 20533  016094  0100               	movlb	0	; () banked
 20534  016096  6F60               	movwf	?_GetPortTRIS& (0+255),b
 20535  016098  0E0F               	movlw	15
 20536  01609A  0100               	movlb	0	; () banked
 20537  01609C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 20538                           
 20539                           ; BSR set to: 0
 20540  01609E  0012               	return	
 20541  0160A0                     
 20542                           ; BSR set to: 0
 20543                           ;Port.c: 86: return (void*)0;
 20544                           
 20545                           ; BSR set to: 0
 20546  0160A0  0E00               	movlw	0
 20547  0160A2  0100               	movlb	0	; () banked
 20548  0160A4  6F60               	movwf	?_GetPortTRIS& (0+255),b
 20549  0160A6  0E00               	movlw	0
 20550  0160A8  0100               	movlb	0	; () banked
 20551  0160AA  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 20552                           
 20553                           ; BSR set to: 0
 20554                           ;Port.c: 87: }
 20555                           
 20556                           ; BSR set to: 0
 20557  0160AC  0012               	return	
 20558  0160AE                     l363:
 20559                           
 20560                           ; BSR set to: 0
 20561  0160AE  0100               	movlb	0	; () banked
 20562  0160B0  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 20563                           
 20564                           ; Switch size 1, requested type "space"
 20565                           ; Number of cases is 7, Range of values is 0 to 6
 20566                           ; switch strategies available:
 20567                           ; Name         Instructions Cycles
 20568                           ; simple_byte           22    12 (average)
 20569                           ;	Chosen strategy is simple_byte
 20570  0160B2  0A00               	xorlw	0	; case 0
 20571  0160B4  B4D8               	btfsc	status,2,c
 20572  0160B6  D7C3               	goto	l364
 20573  0160B8  0A01               	xorlw	1	; case 1
 20574  0160BA  B4D8               	btfsc	status,2,c
 20575  0160BC  D7C7               	goto	l366
 20576  0160BE  0A03               	xorlw	3	; case 2
 20577  0160C0  B4D8               	btfsc	status,2,c
 20578  0160C2  D7CB               	goto	l367
 20579  0160C4  0A01               	xorlw	1	; case 3
 20580  0160C6  B4D8               	btfsc	status,2,c
 20581  0160C8  D7CF               	goto	l368
 20582  0160CA  0A07               	xorlw	7	; case 4
 20583  0160CC  B4D8               	btfsc	status,2,c
 20584  0160CE  D7D3               	goto	l369
 20585  0160D0  0A01               	xorlw	1	; case 5
 20586  0160D2  B4D8               	btfsc	status,2,c
 20587  0160D4  D7D7               	goto	l370
 20588  0160D6  0A03               	xorlw	3	; case 6
 20589  0160D8  B4D8               	btfsc	status,2,c
 20590  0160DA  D7DB               	goto	l371
 20591  0160DC  D7E1               	goto	l372
 20592  0160DE                     __end_of_GetPortTRIS:
 20593                           	opt stack 0
 20594                           tblptru	equ	0xFF8
 20595                           tblptrh	equ	0xFF7
 20596                           tblptrl	equ	0xFF6
 20597                           tablat	equ	0xFF5
 20598                           prodh	equ	0xFF4
 20599                           prodl	equ	0xFF3
 20600                           intcon	equ	0xFF2
 20601                           postinc0	equ	0xFEE
 20602                           wreg	equ	0xFE8
 20603                           indf1	equ	0xFE7
 20604                           postdec1	equ	0xFE5
 20605                           fsr1h	equ	0xFE2
 20606                           fsr1l	equ	0xFE1
 20607                           indf2	equ	0xFDF
 20608                           postinc2	equ	0xFDE
 20609                           postdec2	equ	0xFDD
 20610                           fsr2h	equ	0xFDA
 20611                           fsr2l	equ	0xFD9
 20612                           status	equ	0xFD8
 20613                           
 20614 ;; *************** function _GetPortProperties *****************
 20615 ;; Defined at:
 20616 ;;		line 21 in file "Library/Port.c"
 20617 ;; Parameters:    Size  Location     Type
 20618 ;;  pInput          1    wreg     enum E6786
 20619 ;; Auto vars:     Size  Location     Type
 20620 ;;  pInput          1    2[BANK0 ] enum E6786
 20621 ;; Return value:  Size  Location     Type
 20622 ;;                  2    0[BANK0 ] PTR struct PortProperty
 20623 ;; Registers used:
 20624 ;;		wreg, status,2, status,0
 20625 ;; Tracked objects:
 20626 ;;		On entry : 0/0
 20627 ;;		On exit  : 0/0
 20628 ;;		Unchanged: 0/0
 20629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20630 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20633 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20634 ;;Total ram usage:        3 bytes
 20635 ;; Hardware stack levels used:    1
 20636 ;; Hardware stack levels required when called:    7
 20637 ;; This function calls:
 20638 ;;		Nothing
 20639 ;; This function is called by:
 20640 ;;		_Port_Init
 20641 ;; This function uses a non-reentrant model
 20642 ;;
 20643                           
 20644                           	psect	text75
 20645  0160DE                     __ptext75:
 20646                           	opt stack 0
 20647  0160DE                     _GetPortProperties:
 20648                           	opt stack 20
 20649                           
 20650                           ; BSR set to: 0
 20651                           ;incstack = 0
 20652                           ;GetPortProperties@pInput stored from wreg
 20653  0160DE  0100               	movlb	0	; () banked
 20654  0160E0  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 20655                           
 20656                           ;Port.c: 23: switch (pInput)
 20657  0160E2  D038               	goto	l337
 20658  0160E4                     
 20659                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 20660  0160E4  0E57               	movlw	low _PortA_Property
 20661  0160E6  0100               	movlb	0	; () banked
 20662  0160E8  6F60               	movwf	?_GetPortProperties& (0+255),b
 20663  0160EA  0EFF               	movlw	high _PortA_Property
 20664  0160EC  0100               	movlb	0	; () banked
 20665  0160EE  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 20666                           
 20667                           ; BSR set to: 0
 20668  0160F0  0012               	return	
 20669  0160F2                     
 20670                           ; BSR set to: 0
 20671                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 20672                           
 20673                           ; BSR set to: 0
 20674  0160F2  0E55               	movlw	low _PortB_Property
 20675  0160F4  0100               	movlb	0	; () banked
 20676  0160F6  6F60               	movwf	?_GetPortProperties& (0+255),b
 20677  0160F8  0EFF               	movlw	high _PortB_Property
 20678  0160FA  0100               	movlb	0	; () banked
 20679  0160FC  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 20680                           
 20681                           ; BSR set to: 0
 20682  0160FE  0012               	return	
 20683  016100                     
 20684                           ; BSR set to: 0
 20685                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 20686                           
 20687                           ; BSR set to: 0
 20688  016100  0E53               	movlw	low _PortC_Property
 20689  016102  0100               	movlb	0	; () banked
 20690  016104  6F60               	movwf	?_GetPortProperties& (0+255),b
 20691  016106  0EFF               	movlw	high _PortC_Property
 20692  016108  0100               	movlb	0	; () banked
 20693  01610A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 20694                           
 20695                           ; BSR set to: 0
 20696  01610C  0012               	return	
 20697  01610E                     
 20698                           ; BSR set to: 0
 20699                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 20700                           
 20701                           ; BSR set to: 0
 20702  01610E  0E51               	movlw	low _PortD_Property
 20703  016110  0100               	movlb	0	; () banked
 20704  016112  6F60               	movwf	?_GetPortProperties& (0+255),b
 20705  016114  0EFF               	movlw	high _PortD_Property
 20706  016116  0100               	movlb	0	; () banked
 20707  016118  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 20708                           
 20709                           ; BSR set to: 0
 20710  01611A  0012               	return	
 20711  01611C                     
 20712                           ; BSR set to: 0
 20713                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 20714                           
 20715                           ; BSR set to: 0
 20716  01611C  0E4F               	movlw	low _PortE_Property
 20717  01611E  0100               	movlb	0	; () banked
 20718  016120  6F60               	movwf	?_GetPortProperties& (0+255),b
 20719  016122  0EFF               	movlw	high _PortE_Property
 20720  016124  0100               	movlb	0	; () banked
 20721  016126  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 20722                           
 20723                           ; BSR set to: 0
 20724  016128  0012               	return	
 20725  01612A                     
 20726                           ; BSR set to: 0
 20727                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 20728                           
 20729                           ; BSR set to: 0
 20730  01612A  0E4D               	movlw	low _PortF_Property
 20731  01612C  0100               	movlb	0	; () banked
 20732  01612E  6F60               	movwf	?_GetPortProperties& (0+255),b
 20733  016130  0EFF               	movlw	high _PortF_Property
 20734  016132  0100               	movlb	0	; () banked
 20735  016134  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 20736                           
 20737                           ; BSR set to: 0
 20738  016136  0012               	return	
 20739  016138                     
 20740                           ; BSR set to: 0
 20741                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 20742                           
 20743                           ; BSR set to: 0
 20744  016138  0E4B               	movlw	low _PortG_Property
 20745  01613A  0100               	movlb	0	; () banked
 20746  01613C  6F60               	movwf	?_GetPortProperties& (0+255),b
 20747  01613E  0EFF               	movlw	high _PortG_Property
 20748  016140  0100               	movlb	0	; () banked
 20749  016142  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 20750                           
 20751                           ; BSR set to: 0
 20752  016144  0012               	return	
 20753  016146                     
 20754                           ; BSR set to: 0
 20755                           ;Port.c: 40: return (void*)0;
 20756                           
 20757                           ; BSR set to: 0
 20758  016146  0E00               	movlw	0
 20759  016148  0100               	movlb	0	; () banked
 20760  01614A  6F60               	movwf	?_GetPortProperties& (0+255),b
 20761  01614C  0E00               	movlw	0
 20762  01614E  0100               	movlb	0	; () banked
 20763  016150  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 20764                           
 20765                           ; BSR set to: 0
 20766                           ;Port.c: 41: }
 20767                           
 20768                           ; BSR set to: 0
 20769  016152  0012               	return	
 20770  016154                     l337:
 20771                           
 20772                           ; BSR set to: 0
 20773  016154  0100               	movlb	0	; () banked
 20774  016156  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 20775                           
 20776                           ; Switch size 1, requested type "space"
 20777                           ; Number of cases is 7, Range of values is 0 to 6
 20778                           ; switch strategies available:
 20779                           ; Name         Instructions Cycles
 20780                           ; simple_byte           22    12 (average)
 20781                           ;	Chosen strategy is simple_byte
 20782  016158  0A00               	xorlw	0	; case 0
 20783  01615A  B4D8               	btfsc	status,2,c
 20784  01615C  D7C3               	goto	l338
 20785  01615E  0A01               	xorlw	1	; case 1
 20786  016160  B4D8               	btfsc	status,2,c
 20787  016162  D7C7               	goto	l340
 20788  016164  0A03               	xorlw	3	; case 2
 20789  016166  B4D8               	btfsc	status,2,c
 20790  016168  D7CB               	goto	l341
 20791  01616A  0A01               	xorlw	1	; case 3
 20792  01616C  B4D8               	btfsc	status,2,c
 20793  01616E  D7CF               	goto	l342
 20794  016170  0A07               	xorlw	7	; case 4
 20795  016172  B4D8               	btfsc	status,2,c
 20796  016174  D7D3               	goto	l343
 20797  016176  0A01               	xorlw	1	; case 5
 20798  016178  B4D8               	btfsc	status,2,c
 20799  01617A  D7D7               	goto	l344
 20800  01617C  0A03               	xorlw	3	; case 6
 20801  01617E  B4D8               	btfsc	status,2,c
 20802  016180  D7DB               	goto	l345
 20803  016182  D7E1               	goto	l346
 20804  016184                     __end_of_GetPortProperties:
 20805                           	opt stack 0
 20806                           tblptru	equ	0xFF8
 20807                           tblptrh	equ	0xFF7
 20808                           tblptrl	equ	0xFF6
 20809                           tablat	equ	0xFF5
 20810                           prodh	equ	0xFF4
 20811                           prodl	equ	0xFF3
 20812                           intcon	equ	0xFF2
 20813                           postinc0	equ	0xFEE
 20814                           wreg	equ	0xFE8
 20815                           indf1	equ	0xFE7
 20816                           postdec1	equ	0xFE5
 20817                           fsr1h	equ	0xFE2
 20818                           fsr1l	equ	0xFE1
 20819                           indf2	equ	0xFDF
 20820                           postinc2	equ	0xFDE
 20821                           postdec2	equ	0xFDD
 20822                           fsr2h	equ	0xFDA
 20823                           fsr2l	equ	0xFD9
 20824                           status	equ	0xFD8
 20825                           
 20826 ;; *************** function _GetPortPORT *****************
 20827 ;; Defined at:
 20828 ;;		line 44 in file "Library/Port.c"
 20829 ;; Parameters:    Size  Location     Type
 20830 ;;  pInput          1    wreg     enum E6786
 20831 ;; Auto vars:     Size  Location     Type
 20832 ;;  pInput          1    2[BANK0 ] enum E6786
 20833 ;; Return value:  Size  Location     Type
 20834 ;;                  2    0[BANK0 ] PTR struct Byte
 20835 ;; Registers used:
 20836 ;;		wreg, status,2, status,0
 20837 ;; Tracked objects:
 20838 ;;		On entry : 0/0
 20839 ;;		On exit  : 0/0
 20840 ;;		Unchanged: 0/0
 20841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20842 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20845 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20846 ;;Total ram usage:        3 bytes
 20847 ;; Hardware stack levels used:    1
 20848 ;; Hardware stack levels required when called:    7
 20849 ;; This function calls:
 20850 ;;		Nothing
 20851 ;; This function is called by:
 20852 ;;		_Port_Init
 20853 ;; This function uses a non-reentrant model
 20854 ;;
 20855                           
 20856                           	psect	text76
 20857  016184                     __ptext76:
 20858                           	opt stack 0
 20859  016184                     _GetPortPORT:
 20860                           	opt stack 20
 20861                           
 20862                           ; BSR set to: 0
 20863                           ;incstack = 0
 20864                           ;GetPortPORT@pInput stored from wreg
 20865  016184  0100               	movlb	0	; () banked
 20866  016186  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 20867                           
 20868                           ;Port.c: 46: switch (pInput)
 20869  016188  D038               	goto	l350
 20870  01618A                     
 20871                           ;Port.c: 49: return (BytePtr)&PORTA;
 20872  01618A  0E80               	movlw	128
 20873  01618C  0100               	movlb	0	; () banked
 20874  01618E  6F60               	movwf	?_GetPortPORT& (0+255),b
 20875  016190  0E0F               	movlw	15
 20876  016192  0100               	movlb	0	; () banked
 20877  016194  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 20878                           
 20879                           ; BSR set to: 0
 20880  016196  0012               	return	
 20881  016198                     
 20882                           ; BSR set to: 0
 20883                           ;Port.c: 51: return (BytePtr)&PORTB;
 20884                           
 20885                           ; BSR set to: 0
 20886  016198  0E81               	movlw	129
 20887  01619A  0100               	movlb	0	; () banked
 20888  01619C  6F60               	movwf	?_GetPortPORT& (0+255),b
 20889  01619E  0E0F               	movlw	15
 20890  0161A0  0100               	movlb	0	; () banked
 20891  0161A2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 20892                           
 20893                           ; BSR set to: 0
 20894  0161A4  0012               	return	
 20895  0161A6                     
 20896                           ; BSR set to: 0
 20897                           ;Port.c: 53: return (BytePtr)&PORTC;
 20898                           
 20899                           ; BSR set to: 0
 20900  0161A6  0E82               	movlw	130
 20901  0161A8  0100               	movlb	0	; () banked
 20902  0161AA  6F60               	movwf	?_GetPortPORT& (0+255),b
 20903  0161AC  0E0F               	movlw	15
 20904  0161AE  0100               	movlb	0	; () banked
 20905  0161B0  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 20906                           
 20907                           ; BSR set to: 0
 20908  0161B2  0012               	return	
 20909  0161B4                     
 20910                           ; BSR set to: 0
 20911                           ;Port.c: 55: return (BytePtr)&PORTD;
 20912                           
 20913                           ; BSR set to: 0
 20914  0161B4  0E83               	movlw	131
 20915  0161B6  0100               	movlb	0	; () banked
 20916  0161B8  6F60               	movwf	?_GetPortPORT& (0+255),b
 20917  0161BA  0E0F               	movlw	15
 20918  0161BC  0100               	movlb	0	; () banked
 20919  0161BE  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 20920                           
 20921                           ; BSR set to: 0
 20922  0161C0  0012               	return	
 20923  0161C2                     
 20924                           ; BSR set to: 0
 20925                           ;Port.c: 57: return (BytePtr)&PORTE;
 20926                           
 20927                           ; BSR set to: 0
 20928  0161C2  0E84               	movlw	132
 20929  0161C4  0100               	movlb	0	; () banked
 20930  0161C6  6F60               	movwf	?_GetPortPORT& (0+255),b
 20931  0161C8  0E0F               	movlw	15
 20932  0161CA  0100               	movlb	0	; () banked
 20933  0161CC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 20934                           
 20935                           ; BSR set to: 0
 20936  0161CE  0012               	return	
 20937  0161D0                     
 20938                           ; BSR set to: 0
 20939                           ;Port.c: 59: return (BytePtr)&PORTF;
 20940                           
 20941                           ; BSR set to: 0
 20942  0161D0  0E85               	movlw	133
 20943  0161D2  0100               	movlb	0	; () banked
 20944  0161D4  6F60               	movwf	?_GetPortPORT& (0+255),b
 20945  0161D6  0E0F               	movlw	15
 20946  0161D8  0100               	movlb	0	; () banked
 20947  0161DA  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 20948                           
 20949                           ; BSR set to: 0
 20950  0161DC  0012               	return	
 20951  0161DE                     
 20952                           ; BSR set to: 0
 20953                           ;Port.c: 61: return (BytePtr)&PORTG;
 20954                           
 20955                           ; BSR set to: 0
 20956  0161DE  0E86               	movlw	134
 20957  0161E0  0100               	movlb	0	; () banked
 20958  0161E2  6F60               	movwf	?_GetPortPORT& (0+255),b
 20959  0161E4  0E0F               	movlw	15
 20960  0161E6  0100               	movlb	0	; () banked
 20961  0161E8  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 20962                           
 20963                           ; BSR set to: 0
 20964  0161EA  0012               	return	
 20965  0161EC                     
 20966                           ; BSR set to: 0
 20967                           ;Port.c: 63: return (void*)0;
 20968                           
 20969                           ; BSR set to: 0
 20970  0161EC  0E00               	movlw	0
 20971  0161EE  0100               	movlb	0	; () banked
 20972  0161F0  6F60               	movwf	?_GetPortPORT& (0+255),b
 20973  0161F2  0E00               	movlw	0
 20974  0161F4  0100               	movlb	0	; () banked
 20975  0161F6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 20976                           
 20977                           ; BSR set to: 0
 20978                           ;Port.c: 64: }
 20979                           
 20980                           ; BSR set to: 0
 20981  0161F8  0012               	return	
 20982  0161FA                     l350:
 20983                           
 20984                           ; BSR set to: 0
 20985  0161FA  0100               	movlb	0	; () banked
 20986  0161FC  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 20987                           
 20988                           ; Switch size 1, requested type "space"
 20989                           ; Number of cases is 7, Range of values is 0 to 6
 20990                           ; switch strategies available:
 20991                           ; Name         Instructions Cycles
 20992                           ; simple_byte           22    12 (average)
 20993                           ;	Chosen strategy is simple_byte
 20994  0161FE  0A00               	xorlw	0	; case 0
 20995  016200  B4D8               	btfsc	status,2,c
 20996  016202  D7C3               	goto	l351
 20997  016204  0A01               	xorlw	1	; case 1
 20998  016206  B4D8               	btfsc	status,2,c
 20999  016208  D7C7               	goto	l353
 21000  01620A  0A03               	xorlw	3	; case 2
 21001  01620C  B4D8               	btfsc	status,2,c
 21002  01620E  D7CB               	goto	l354
 21003  016210  0A01               	xorlw	1	; case 3
 21004  016212  B4D8               	btfsc	status,2,c
 21005  016214  D7CF               	goto	l355
 21006  016216  0A07               	xorlw	7	; case 4
 21007  016218  B4D8               	btfsc	status,2,c
 21008  01621A  D7D3               	goto	l356
 21009  01621C  0A01               	xorlw	1	; case 5
 21010  01621E  B4D8               	btfsc	status,2,c
 21011  016220  D7D7               	goto	l357
 21012  016222  0A03               	xorlw	3	; case 6
 21013  016224  B4D8               	btfsc	status,2,c
 21014  016226  D7DB               	goto	l358
 21015  016228  D7E1               	goto	l359
 21016  01622A                     __end_of_GetPortPORT:
 21017                           	opt stack 0
 21018                           tblptru	equ	0xFF8
 21019                           tblptrh	equ	0xFF7
 21020                           tblptrl	equ	0xFF6
 21021                           tablat	equ	0xFF5
 21022                           prodh	equ	0xFF4
 21023                           prodl	equ	0xFF3
 21024                           intcon	equ	0xFF2
 21025                           postinc0	equ	0xFEE
 21026                           wreg	equ	0xFE8
 21027                           indf1	equ	0xFE7
 21028                           postdec1	equ	0xFE5
 21029                           fsr1h	equ	0xFE2
 21030                           fsr1l	equ	0xFE1
 21031                           indf2	equ	0xFDF
 21032                           postinc2	equ	0xFDE
 21033                           postdec2	equ	0xFDD
 21034                           fsr2h	equ	0xFDA
 21035                           fsr2l	equ	0xFD9
 21036                           status	equ	0xFD8
 21037                           
 21038 ;; *************** function _LED_Init *****************
 21039 ;; Defined at:
 21040 ;;		line 15 in file "Library/LED.c"
 21041 ;; Parameters:    Size  Location     Type
 21042 ;;  pLED            1    wreg     enum E6739
 21043 ;; Auto vars:     Size  Location     Type
 21044 ;;  pLED            1   45[BANK0 ] enum E6739
 21045 ;; Return value:  Size  Location     Type
 21046 ;;                  1    wreg      void 
 21047 ;; Registers used:
 21048 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21049 ;; Tracked objects:
 21050 ;;		On entry : 0/0
 21051 ;;		On exit  : 0/0
 21052 ;;		Unchanged: 0/0
 21053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21055 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21057 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21058 ;;Total ram usage:        1 bytes
 21059 ;; Hardware stack levels used:    1
 21060 ;; Hardware stack levels required when called:   12
 21061 ;; This function calls:
 21062 ;;		_LED_Set
 21063 ;;		_Port_SetPinType
 21064 ;; This function is called by:
 21065 ;;		_MXK_Init
 21066 ;; This function uses a non-reentrant model
 21067 ;;
 21068                           
 21069                           	psect	text77
 21070  01721C                     __ptext77:
 21071                           	opt stack 0
 21072  01721C                     _LED_Init:
 21073                           	opt stack 16
 21074                           
 21075                           ; BSR set to: 0
 21076                           ;incstack = 0
 21077                           ;LED_Init@pLED stored from wreg
 21078  01721C  0100               	movlb	0	; () banked
 21079  01721E  6F8D               	movwf	LED_Init@pLED& (0+255),b
 21080                           
 21081                           ;LED.c: 17: switch (pLED)
 21082  017220  D01E               	goto	l220
 21083  017222                     
 21084                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 21085  017222  0EAD               	movlw	low _PortC
 21086  017224  0100               	movlb	0	; () banked
 21087  017226  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21088  017228  0E03               	movlw	high _PortC
 21089  01722A  0100               	movlb	0	; () banked
 21090  01722C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21091  01722E  0E00               	movlw	0
 21092  017230  0100               	movlb	0	; () banked
 21093  017232  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21094  017234  0E03               	movlw	3
 21095  017236  0100               	movlb	0	; () banked
 21096  017238  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21097  01723A  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 21098                           
 21099                           ;LED.c: 21: break;
 21100  01723E  D017               	goto	l222
 21101  017240                     
 21102                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 21103  017240  0EAD               	movlw	low _PortC
 21104  017242  0100               	movlb	0	; () banked
 21105  017244  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21106  017246  0E03               	movlw	high _PortC
 21107  017248  0100               	movlb	0	; () banked
 21108  01724A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21109  01724C  0E01               	movlw	1
 21110  01724E  0100               	movlb	0	; () banked
 21111  017250  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21112  017252  0E03               	movlw	3
 21113  017254  0100               	movlb	0	; () banked
 21114  017256  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21115  017258  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 21116                           
 21117                           ;LED.c: 25: }
 21118                           
 21119                           ;LED.c: 24: break;
 21120  01725C  D008               	goto	l222
 21121  01725E                     l220:
 21122  01725E  0100               	movlb	0	; () banked
 21123  017260  518D               	movf	LED_Init@pLED& (0+255),w,b
 21124                           
 21125                           ; Switch size 1, requested type "space"
 21126                           ; Number of cases is 2, Range of values is 0 to 1
 21127                           ; switch strategies available:
 21128                           ; Name         Instructions Cycles
 21129                           ; simple_byte            7     4 (average)
 21130                           ;	Chosen strategy is simple_byte
 21131  017262  0A00               	xorlw	0	; case 0
 21132  017264  B4D8               	btfsc	status,2,c
 21133  017266  D7DD               	goto	l221
 21134  017268  0A01               	xorlw	1	; case 1
 21135  01726A  B4D8               	btfsc	status,2,c
 21136  01726C  D7E9               	goto	l223
 21137  01726E                     l222:
 21138                           
 21139                           ;LED.c: 26: LED_Set(pLED, 0);
 21140                           
 21141                           ; BSR set to: 0
 21142  01726E  0E00               	movlw	0
 21143  017270  0100               	movlb	0	; () banked
 21144  017272  6F74               	movwf	LED_Set@pValue& (0+255),b
 21145  017274  0100               	movlb	0	; () banked
 21146  017276  518D               	movf	LED_Init@pLED& (0+255),w,b
 21147  017278  EC4C  F0BA         	call	_LED_Set
 21148  01727C  0012               	return		;funcret
 21149  01727E                     __end_of_LED_Init:
 21150                           	opt stack 0
 21151                           tblptru	equ	0xFF8
 21152                           tblptrh	equ	0xFF7
 21153                           tblptrl	equ	0xFF6
 21154                           tablat	equ	0xFF5
 21155                           prodh	equ	0xFF4
 21156                           prodl	equ	0xFF3
 21157                           intcon	equ	0xFF2
 21158                           postinc0	equ	0xFEE
 21159                           wreg	equ	0xFE8
 21160                           indf1	equ	0xFE7
 21161                           postdec1	equ	0xFE5
 21162                           fsr1h	equ	0xFE2
 21163                           fsr1l	equ	0xFE1
 21164                           indf2	equ	0xFDF
 21165                           postinc2	equ	0xFDE
 21166                           postdec2	equ	0xFDD
 21167                           fsr2h	equ	0xFDA
 21168                           fsr2l	equ	0xFD9
 21169                           status	equ	0xFD8
 21170                           
 21171 ;; *************** function _LED_Set *****************
 21172 ;; Defined at:
 21173 ;;		line 33 in file "Library/LED.c"
 21174 ;; Parameters:    Size  Location     Type
 21175 ;;  pLED            1    wreg     enum E6739
 21176 ;;  pValue          1   20[BANK0 ] unsigned char 
 21177 ;; Auto vars:     Size  Location     Type
 21178 ;;  pLED            1   21[BANK0 ] enum E6739
 21179 ;; Return value:  Size  Location     Type
 21180 ;;                  1    wreg      void 
 21181 ;; Registers used:
 21182 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21183 ;; Tracked objects:
 21184 ;;		On entry : 0/0
 21185 ;;		On exit  : 0/0
 21186 ;;		Unchanged: 0/0
 21187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21188 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21191 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21192 ;;Total ram usage:        2 bytes
 21193 ;; Hardware stack levels used:    1
 21194 ;; Hardware stack levels required when called:   11
 21195 ;; This function calls:
 21196 ;;		_Port_SetPin
 21197 ;; This function is called by:
 21198 ;;		_LED_Init
 21199 ;;		_SYSTEM_Initialize
 21200 ;; This function uses a non-reentrant model
 21201 ;;
 21202                           
 21203                           	psect	text78
 21204  017498                     __ptext78:
 21205                           	opt stack 0
 21206  017498                     _LED_Set:
 21207                           	opt stack 16
 21208                           
 21209                           ;incstack = 0
 21210                           ;LED_Set@pLED stored from wreg
 21211  017498  0100               	movlb	0	; () banked
 21212  01749A  6F75               	movwf	LED_Set@pLED& (0+255),b
 21213                           
 21214                           ;LED.c: 35: switch (pLED)
 21215  01749C  D01C               	goto	l227
 21216  01749E                     
 21217                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 21218  01749E  0EAD               	movlw	low _PortC
 21219  0174A0  0100               	movlb	0	; () banked
 21220  0174A2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21221  0174A4  0E03               	movlw	high _PortC
 21222  0174A6  0100               	movlb	0	; () banked
 21223  0174A8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21224  0174AA  0E00               	movlw	0
 21225  0174AC  0100               	movlb	0	; () banked
 21226  0174AE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21227  0174B0  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 21228  0174B4  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 21229                           
 21230                           ;LED.c: 39: break;
 21231  0174B8  0012               	return	
 21232  0174BA                     
 21233                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 21234  0174BA  0EAD               	movlw	low _PortC
 21235  0174BC  0100               	movlb	0	; () banked
 21236  0174BE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21237  0174C0  0E03               	movlw	high _PortC
 21238  0174C2  0100               	movlb	0	; () banked
 21239  0174C4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21240  0174C6  0E01               	movlw	1
 21241  0174C8  0100               	movlb	0	; () banked
 21242  0174CA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21243  0174CC  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 21244  0174D0  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 21245                           
 21246                           ;LED.c: 43: }
 21247                           
 21248                           ;LED.c: 42: break;
 21249  0174D4  0012               	return	
 21250  0174D6                     l227:
 21251  0174D6  0100               	movlb	0	; () banked
 21252  0174D8  5175               	movf	LED_Set@pLED& (0+255),w,b
 21253                           
 21254                           ; Switch size 1, requested type "space"
 21255                           ; Number of cases is 2, Range of values is 0 to 1
 21256                           ; switch strategies available:
 21257                           ; Name         Instructions Cycles
 21258                           ; simple_byte            7     4 (average)
 21259                           ;	Chosen strategy is simple_byte
 21260  0174DA  0A00               	xorlw	0	; case 0
 21261  0174DC  B4D8               	btfsc	status,2,c
 21262  0174DE  D7DF               	goto	l228
 21263  0174E0  0A01               	xorlw	1	; case 1
 21264  0174E2  A4D8               	btfss	status,2,c
 21265  0174E4  0012               	return	
 21266  0174E6  D7E9               	goto	l230
 21267  0174E8                     __end_of_LED_Set:
 21268                           	opt stack 0
 21269                           tblptru	equ	0xFF8
 21270                           tblptrh	equ	0xFF7
 21271                           tblptrl	equ	0xFF6
 21272                           tablat	equ	0xFF5
 21273                           prodh	equ	0xFF4
 21274                           prodl	equ	0xFF3
 21275                           intcon	equ	0xFF2
 21276                           postinc0	equ	0xFEE
 21277                           wreg	equ	0xFE8
 21278                           indf1	equ	0xFE7
 21279                           postdec1	equ	0xFE5
 21280                           fsr1h	equ	0xFE2
 21281                           fsr1l	equ	0xFE1
 21282                           indf2	equ	0xFDF
 21283                           postinc2	equ	0xFDE
 21284                           postdec2	equ	0xFDD
 21285                           fsr2h	equ	0xFDA
 21286                           fsr2l	equ	0xFD9
 21287                           status	equ	0xFD8
 21288                           
 21289 ;; *************** function _MXK_Dequeue *****************
 21290 ;; Defined at:
 21291 ;;		line 153 in file "Library/MXK.c"
 21292 ;; Parameters:    Size  Location     Type
 21293 ;;		None
 21294 ;; Auto vars:     Size  Location     Type
 21295 ;;		None
 21296 ;; Return value:  Size  Location     Type
 21297 ;;                  1    wreg      void 
 21298 ;; Registers used:
 21299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21300 ;; Tracked objects:
 21301 ;;		On entry : 0/0
 21302 ;;		On exit  : 0/0
 21303 ;;		Unchanged: 0/0
 21304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21309 ;;Total ram usage:        0 bytes
 21310 ;; Hardware stack levels used:    1
 21311 ;; Hardware stack levels required when called:   12
 21312 ;; This function calls:
 21313 ;;		Absolute function
 21314 ;;		_Motor_Step
 21315 ;; This function is called by:
 21316 ;;		_init
 21317 ;;		_mode1
 21318 ;;		_mode2
 21319 ;;		_mode4
 21320 ;;		_main
 21321 ;; This function uses a non-reentrant model
 21322 ;;
 21323                           
 21324                           	psect	text79
 21325  017902                     __ptext79:
 21326                           	opt stack 0
 21327  017902                     _MXK_Dequeue:
 21328                           	opt stack 17
 21329                           
 21330                           ;MXK.c: 155: if (lQueue)
 21331                           
 21332                           ;incstack = 0
 21333  017902  0100               	movlb	0	; () banked
 21334  017904  51E1               	movf	_lQueue& (0+255),w,b	;volatile
 21335  017906  0100               	movlb	0	; () banked
 21336  017908  11E2               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 21337  01790A  0100               	movlb	0	; () banked
 21338  01790C  11E3               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 21339  01790E  B4D8               	btfsc	status,2,c
 21340  017910  D00D               	goto	u16299
 21341                           
 21342                           ; BSR set to: 0
 21343                           ;MXK.c: 156: lQueue();
 21344  017912  D801               	call	u16298
 21345  017914  D00B               	goto	u16299
 21346  017916                     u16298:
 21347  017916  0005               	push	
 21348  017918  6EFA               	movwf	pclath,c
 21349  01791A  0100               	movlb	0	; () banked
 21350  01791C  51E1               	movf	_lQueue& (0+255),w,b	;volatile
 21351  01791E  6EFD               	movwf	tosl,c
 21352  017920  51E2               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 21353  017922  6EFE               	movwf	tosh,c
 21354  017924  51E3               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 21355  017926  6EFF               	movwf	tosu,c
 21356  017928  50FA               	movf	pclath,w,c
 21357  01792A  0012               	return		;indir
 21358  01792C                     u16299:
 21359                           
 21360                           ;MXK.c: 157: lQueue = 0;
 21361  01792C  0E00               	movlw	0
 21362  01792E  0100               	movlb	0	; () banked
 21363  017930  6FE1               	movwf	_lQueue& (0+255),b	;volatile
 21364  017932  0E00               	movlw	0
 21365  017934  0100               	movlb	0	; () banked
 21366  017936  6FE2               	movwf	(_lQueue+1)& (0+255),b	;volatile
 21367  017938  0E00               	movlw	0
 21368  01793A  0100               	movlb	0	; () banked
 21369  01793C  6FE3               	movwf	(_lQueue+2)& (0+255),b	;volatile
 21370                           
 21371                           ; BSR set to: 0
 21372  01793E  0012               	return		;funcret
 21373  017940                     __end_of_MXK_Dequeue:
 21374                           	opt stack 0
 21375                           tosu	equ	0xFFF
 21376                           tosh	equ	0xFFE
 21377                           tosl	equ	0xFFD
 21378                           pclath	equ	0xFFA
 21379                           tblptru	equ	0xFF8
 21380                           tblptrh	equ	0xFF7
 21381                           tblptrl	equ	0xFF6
 21382                           tablat	equ	0xFF5
 21383                           prodh	equ	0xFF4
 21384                           prodl	equ	0xFF3
 21385                           intcon	equ	0xFF2
 21386                           postinc0	equ	0xFEE
 21387                           wreg	equ	0xFE8
 21388                           indf1	equ	0xFE7
 21389                           postdec1	equ	0xFE5
 21390                           fsr1h	equ	0xFE2
 21391                           fsr1l	equ	0xFE1
 21392                           indf2	equ	0xFDF
 21393                           postinc2	equ	0xFDE
 21394                           postdec2	equ	0xFDD
 21395                           fsr2h	equ	0xFDA
 21396                           fsr2l	equ	0xFD9
 21397                           status	equ	0xFD8
 21398                           
 21399 ;; *************** function _Motor_Step *****************
 21400 ;; Defined at:
 21401 ;;		line 75 in file "Library/Motor.c"
 21402 ;; Parameters:    Size  Location     Type
 21403 ;;		None
 21404 ;; Auto vars:     Size  Location     Type
 21405 ;;		None
 21406 ;; Return value:  Size  Location     Type
 21407 ;;                  1    wreg      void 
 21408 ;; Registers used:
 21409 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21410 ;; Tracked objects:
 21411 ;;		On entry : 0/0
 21412 ;;		On exit  : 0/0
 21413 ;;		Unchanged: 0/0
 21414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21417 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21419 ;;Total ram usage:        2 bytes
 21420 ;; Hardware stack levels used:    1
 21421 ;; Hardware stack levels required when called:   11
 21422 ;; This function calls:
 21423 ;;		_MXK_Queue
 21424 ;;		_MXK_Release
 21425 ;;		_MXK_SwitchTo
 21426 ;;		_Port_SetPin
 21427 ;;		_Timer0_Restart
 21428 ;;		_Timer0_Stop
 21429 ;; This function is called by:
 21430 ;;		_Motor_Init
 21431 ;;		_MXK_Dequeue
 21432 ;;		_Timer0_ISR
 21433 ;; This function uses a non-reentrant model
 21434 ;;
 21435                           
 21436                           	psect	text80
 21437  014E88                     __ptext80:
 21438                           	opt stack 0
 21439  014E88                     _Motor_Step:
 21440                           	opt stack 0
 21441                           
 21442                           ; BSR set to: 0
 21443                           ;Skip over the trampoline to the duplicate function for level 2
 21444  014E88  B251               	btfsc	btemp,1,c
 21445  014E8A  EF5D  F0A8         	goto	i2_Motor_Step
 21446  014E8E                     _Motor_Step$intlevel0:
 21447                           	opt stack 17
 21448                           
 21449                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 21450                           
 21451                           ;incstack = 0
 21452  014E8E  0100               	movlb	0	; () banked
 21453  014E90  EE20 F004          	lfsr	2,4
 21454  014E94  51EA               	movf	_lMotor& (0+255),w,b
 21455  014E96  26D9               	addwf	fsr2l,f,c
 21456  014E98  51EB               	movf	(_lMotor+1)& (0+255),w,b
 21457  014E9A  22DA               	addwfc	fsr2h,f,c
 21458  014E9C  50DF               	movf	indf2,w,c
 21459  014E9E  EC02  F0BC         	call	_MXK_SwitchTo
 21460  014EA2  0900               	iorlw	0
 21461  014EA4  B4D8               	btfsc	status,2,c
 21462  014EA6  D07A               	goto	l1627
 21463                           
 21464                           ;Motor.c: 78: {
 21465                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 21466  014EA8  C0EA  FFD9         	movff	_lMotor,fsr2l
 21467  014EAC  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 21468  014EB0  50DE               	movf	postinc2,w,c
 21469  014EB2  10DE               	iorwf	postinc2,w,c
 21470  014EB4  B4D8               	btfsc	status,2,c
 21471  014EB6  D06D               	goto	l1628
 21472                           
 21473                           ;Motor.c: 80: {
 21474                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 21475  014EB8  C0EA  FFD9         	movff	_lMotor,fsr2l
 21476  014EBC  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 21477  014EC0  0E01               	movlw	1
 21478  014EC2  BEDB               	btfsc	plusw2,7,c
 21479  014EC4  D026               	goto	l1629
 21480  014EC6  0E01               	movlw	1
 21481  014EC8  50DB               	movf	plusw2,w,c
 21482  014ECA  E103               	bnz	u12850
 21483  014ECC  04DE               	decf	postinc2,w,c
 21484  014ECE  A0D8               	btfss	status,0,c
 21485  014ED0  D020               	goto	l1629
 21486  014ED2                     u12850:
 21487                           
 21488                           ;Motor.c: 83: {
 21489                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 21490  014ED2  C0EA  FFD9         	movff	_lMotor,fsr2l
 21491  014ED6  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 21492  014EDA  28DE               	incf	postinc2,w,c
 21493  014EDC  E104               	bnz	u12860
 21494  014EDE  0E7F               	movlw	127
 21495  014EE0  18DE               	xorwf	postinc2,w,c
 21496  014EE2  B4D8               	btfsc	status,2,c
 21497  014EE4  D007               	goto	l1630
 21498  014EE6                     u12860:
 21499                           
 21500                           ;Motor.c: 85: lMotor->mDelta --;
 21501  014EE6  C0EA  FFD9         	movff	_lMotor,fsr2l
 21502  014EEA  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 21503  014EEE  06DE               	decf	postinc2,f,c
 21504  014EF0  0E00               	movlw	0
 21505  014EF2  5ADD               	subwfb	postdec2,f,c
 21506  014EF4                     l1630:
 21507                           
 21508                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 21509  014EF4  0E8F               	movlw	low _PortE
 21510  014EF6  0100               	movlb	0	; () banked
 21511  014EF8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21512  014EFA  0E03               	movlw	high _PortE
 21513  014EFC  0100               	movlb	0	; () banked
 21514  014EFE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21515  014F00  0E00               	movlw	0
 21516  014F02  0100               	movlb	0	; () banked
 21517  014F04  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21518  014F06  0E01               	movlw	1
 21519  014F08  0100               	movlb	0	; () banked
 21520  014F0A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21521  014F0C  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 21522                           
 21523                           ;Motor.c: 88: }
 21524  014F10  D01F               	goto	l1631
 21525  014F12                     l1629:
 21526                           
 21527                           ;Motor.c: 89: else
 21528                           ;Motor.c: 90: {
 21529                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 21530  014F12  C0EA  FFD9         	movff	_lMotor,fsr2l
 21531  014F16  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 21532  014F1A  04DE               	decf	postinc2,w,c
 21533  014F1C  E104               	bnz	u12870
 21534  014F1E  0E80               	movlw	128
 21535  014F20  18DE               	xorwf	postinc2,w,c
 21536  014F22  B4D8               	btfsc	status,2,c
 21537  014F24  D007               	goto	l1632
 21538  014F26                     u12870:
 21539                           
 21540                           ;Motor.c: 92: lMotor->mDelta ++;
 21541  014F26  C0EA  FFD9         	movff	_lMotor,fsr2l
 21542  014F2A  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 21543  014F2E  2ADE               	incf	postinc2,f,c
 21544  014F30  0E00               	movlw	0
 21545  014F32  22DD               	addwfc	postdec2,f,c
 21546  014F34                     l1632:
 21547                           
 21548                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 21549  014F34  0E8F               	movlw	low _PortE
 21550  014F36  0100               	movlb	0	; () banked
 21551  014F38  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21552  014F3A  0E03               	movlw	high _PortE
 21553  014F3C  0100               	movlb	0	; () banked
 21554  014F3E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21555  014F40  0E00               	movlw	0
 21556  014F42  0100               	movlb	0	; () banked
 21557  014F44  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21558  014F46  0E00               	movlw	0
 21559  014F48  0100               	movlb	0	; () banked
 21560  014F4A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21561  014F4C  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 21562  014F50                     l1631:
 21563                           
 21564                           ;Motor.c: 95: }
 21565                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 21566  014F50  0E8F               	movlw	low _PortE
 21567  014F52  0100               	movlb	0	; () banked
 21568  014F54  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21569  014F56  0E03               	movlw	high _PortE
 21570  014F58  0100               	movlb	0	; () banked
 21571  014F5A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21572  014F5C  0E01               	movlw	1
 21573  014F5E  0100               	movlb	0	; () banked
 21574  014F60  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21575  014F62  0E01               	movlw	1
 21576  014F64  0100               	movlb	0	; () banked
 21577  014F66  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21578  014F68  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 21579                           
 21580                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 21581  014F6C  0E8F               	movlw	low _PortE
 21582  014F6E  0100               	movlb	0	; () banked
 21583  014F70  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21584  014F72  0E03               	movlw	high _PortE
 21585  014F74  0100               	movlb	0	; () banked
 21586  014F76  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21587  014F78  0E01               	movlw	1
 21588  014F7A  0100               	movlb	0	; () banked
 21589  014F7C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21590  014F7E  0E00               	movlw	0
 21591  014F80  0100               	movlb	0	; () banked
 21592  014F82  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21593  014F84  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 21594                           
 21595                           ;Motor.c: 101: MXK_Release();
 21596  014F88  EC47  F0BF         	call	_MXK_Release	;wreg free
 21597                           
 21598                           ;Motor.c: 102: Timer0_Restart();
 21599  014F8C  EC47  F0C0         	call	_Timer0_Restart	;wreg free
 21600                           
 21601                           ;Motor.c: 103: return;
 21602  014F90  0012               	return	
 21603  014F92                     l1628:
 21604                           
 21605                           ;Motor.c: 104: }
 21606                           ;Motor.c: 105: MXK_Release();
 21607  014F92  EC47  F0BF         	call	_MXK_Release	;wreg free
 21608                           
 21609                           ;Motor.c: 106: Timer0_Stop();
 21610  014F96  EC69  F0C0         	call	_Timer0_Stop	;wreg free
 21611                           
 21612                           ;Motor.c: 107: return;
 21613  014F9A  0012               	return	
 21614  014F9C                     l1627:
 21615                           
 21616                           ;Motor.c: 108: }
 21617                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 21618  014F9C  C317  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 21619  014FA0  C318  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 21620  014FA4  C319  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 21621  014FA8  EC2D  F0C0         	call	_MXK_Queue	;wreg free
 21622  014FAC  0012               	return		;funcret
 21623  014FAE                     __end_of_Motor_Step:
 21624                           	opt stack 0
 21625                           tosu	equ	0xFFF
 21626                           tosh	equ	0xFFE
 21627                           tosl	equ	0xFFD
 21628                           pclath	equ	0xFFA
 21629                           tblptru	equ	0xFF8
 21630                           tblptrh	equ	0xFF7
 21631                           tblptrl	equ	0xFF6
 21632                           tablat	equ	0xFF5
 21633                           prodh	equ	0xFF4
 21634                           prodl	equ	0xFF3
 21635                           intcon	equ	0xFF2
 21636                           postinc0	equ	0xFEE
 21637                           wreg	equ	0xFE8
 21638                           indf1	equ	0xFE7
 21639                           postdec1	equ	0xFE5
 21640                           fsr1h	equ	0xFE2
 21641                           fsr1l	equ	0xFE1
 21642                           indf2	equ	0xFDF
 21643                           postinc2	equ	0xFDE
 21644                           postdec2	equ	0xFDD
 21645                           plusw2	equ	0xFDB
 21646                           fsr2h	equ	0xFDA
 21647                           fsr2l	equ	0xFD9
 21648                           status	equ	0xFD8
 21649                           
 21650 ;; *************** function _Timer0_Stop *****************
 21651 ;; Defined at:
 21652 ;;		line 89 in file "Library/Timer0.c"
 21653 ;; Parameters:    Size  Location     Type
 21654 ;;		None
 21655 ;; Auto vars:     Size  Location     Type
 21656 ;;		None
 21657 ;; Return value:  Size  Location     Type
 21658 ;;                  1    wreg      void 
 21659 ;; Registers used:
 21660 ;;		None
 21661 ;; Tracked objects:
 21662 ;;		On entry : 0/0
 21663 ;;		On exit  : 0/0
 21664 ;;		Unchanged: 0/0
 21665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21670 ;;Total ram usage:        0 bytes
 21671 ;; Hardware stack levels used:    1
 21672 ;; Hardware stack levels required when called:    7
 21673 ;; This function calls:
 21674 ;;		Nothing
 21675 ;; This function is called by:
 21676 ;;		_Motor_Step
 21677 ;; This function uses a non-reentrant model
 21678 ;;
 21679                           
 21680                           	psect	text81
 21681  0180D2                     __ptext81:
 21682                           	opt stack 0
 21683  0180D2                     _Timer0_Stop:
 21684                           	opt stack 20
 21685                           
 21686                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 21687                           
 21688                           ;incstack = 0
 21689  0180D2  9AF2               	bcf	intcon,5,c	;volatile
 21690                           
 21691                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 21692  0180D4  94F2               	bcf	intcon,2,c	;volatile
 21693  0180D6  0012               	return		;funcret
 21694  0180D8                     __end_of_Timer0_Stop:
 21695                           	opt stack 0
 21696                           tosu	equ	0xFFF
 21697                           tosh	equ	0xFFE
 21698                           tosl	equ	0xFFD
 21699                           pclath	equ	0xFFA
 21700                           tblptru	equ	0xFF8
 21701                           tblptrh	equ	0xFF7
 21702                           tblptrl	equ	0xFF6
 21703                           tablat	equ	0xFF5
 21704                           prodh	equ	0xFF4
 21705                           prodl	equ	0xFF3
 21706                           intcon	equ	0xFF2
 21707                           postinc0	equ	0xFEE
 21708                           wreg	equ	0xFE8
 21709                           indf1	equ	0xFE7
 21710                           postdec1	equ	0xFE5
 21711                           fsr1h	equ	0xFE2
 21712                           fsr1l	equ	0xFE1
 21713                           indf2	equ	0xFDF
 21714                           postinc2	equ	0xFDE
 21715                           postdec2	equ	0xFDD
 21716                           plusw2	equ	0xFDB
 21717                           fsr2h	equ	0xFDA
 21718                           fsr2l	equ	0xFD9
 21719                           status	equ	0xFD8
 21720                           
 21721 ;; *************** function _Timer0_Restart *****************
 21722 ;; Defined at:
 21723 ;;		line 83 in file "Library/Timer0.c"
 21724 ;; Parameters:    Size  Location     Type
 21725 ;;		None
 21726 ;; Auto vars:     Size  Location     Type
 21727 ;;		None
 21728 ;; Return value:  Size  Location     Type
 21729 ;;                  1    wreg      void 
 21730 ;; Registers used:
 21731 ;;		None
 21732 ;; Tracked objects:
 21733 ;;		On entry : 0/0
 21734 ;;		On exit  : 0/0
 21735 ;;		Unchanged: 0/0
 21736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21741 ;;Total ram usage:        0 bytes
 21742 ;; Hardware stack levels used:    1
 21743 ;; Hardware stack levels required when called:    7
 21744 ;; This function calls:
 21745 ;;		Nothing
 21746 ;; This function is called by:
 21747 ;;		_Motor_Step
 21748 ;; This function uses a non-reentrant model
 21749 ;;
 21750                           
 21751                           	psect	text82
 21752  01808E                     __ptext82:
 21753                           	opt stack 0
 21754  01808E                     _Timer0_Restart:
 21755                           	opt stack 20
 21756                           
 21757                           ;Timer0.c: 85: TMR0 = COUNTER;
 21758                           
 21759                           ;incstack = 0
 21760  01808E  C02F  FFD6         	movff	_COUNTER,4054	;volatile
 21761  018092  C030  FFD7         	movff	_COUNTER+1,4055	;volatile
 21762                           
 21763                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 21764  018096  8AF2               	bsf	intcon,5,c	;volatile
 21765  018098  0012               	return		;funcret
 21766  01809A                     __end_of_Timer0_Restart:
 21767                           	opt stack 0
 21768                           tosu	equ	0xFFF
 21769                           tosh	equ	0xFFE
 21770                           tosl	equ	0xFFD
 21771                           pclath	equ	0xFFA
 21772                           tblptru	equ	0xFF8
 21773                           tblptrh	equ	0xFF7
 21774                           tblptrl	equ	0xFF6
 21775                           tablat	equ	0xFF5
 21776                           prodh	equ	0xFF4
 21777                           prodl	equ	0xFF3
 21778                           intcon	equ	0xFF2
 21779                           postinc0	equ	0xFEE
 21780                           wreg	equ	0xFE8
 21781                           indf1	equ	0xFE7
 21782                           postdec1	equ	0xFE5
 21783                           fsr1h	equ	0xFE2
 21784                           fsr1l	equ	0xFE1
 21785                           indf2	equ	0xFDF
 21786                           postinc2	equ	0xFDE
 21787                           postdec2	equ	0xFDD
 21788                           plusw2	equ	0xFDB
 21789                           fsr2h	equ	0xFDA
 21790                           fsr2l	equ	0xFD9
 21791                           status	equ	0xFD8
 21792                           
 21793 ;; *************** function _MXK_SwitchTo *****************
 21794 ;; Defined at:
 21795 ;;		line 105 in file "Library/MXK.c"
 21796 ;; Parameters:    Size  Location     Type
 21797 ;;  pModule         1    wreg     enum E6927
 21798 ;; Auto vars:     Size  Location     Type
 21799 ;;  pModule         1    7[BANK0 ] enum E6927
 21800 ;;  CUR             1    6[BANK0 ] unsigned char 
 21801 ;; Return value:  Size  Location     Type
 21802 ;;                  1    wreg      unsigned char 
 21803 ;; Registers used:
 21804 ;;		wreg, status,2, status,0, cstack
 21805 ;; Tracked objects:
 21806 ;;		On entry : 0/0
 21807 ;;		On exit  : 0/0
 21808 ;;		Unchanged: 0/0
 21809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21811 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21813 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21814 ;;Total ram usage:        2 bytes
 21815 ;; Hardware stack levels used:    1
 21816 ;; Hardware stack levels required when called:    8
 21817 ;; This function calls:
 21818 ;;		_delay_us
 21819 ;; This function is called by:
 21820 ;;		_Motor_Step
 21821 ;;		_mode1
 21822 ;;		_mode2
 21823 ;;		_mode4
 21824 ;;		_main
 21825 ;; This function uses a non-reentrant model
 21826 ;;
 21827                           
 21828                           	psect	text83
 21829  017804                     __ptext83:
 21830                           	opt stack 0
 21831  017804                     _MXK_SwitchTo:
 21832                           	opt stack 21
 21833                           
 21834                           ;incstack = 0
 21835                           ;MXK_SwitchTo@pModule stored from wreg
 21836  017804  0100               	movlb	0	; () banked
 21837  017806  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 21838                           
 21839                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 21840  017808  5086               	movf	3974,w,c	;volatile
 21841  01780A  0B0F               	andlw	15
 21842  01780C  0100               	movlb	0	; () banked
 21843  01780E  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 21844                           
 21845                           ; BSR set to: 0
 21846                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 21847  017810  504D               	movf	_Bus_State,w,c
 21848  017812  A4D8               	btfss	status,2,c
 21849  017814  D002               	goto	l1730
 21850                           
 21851                           ; BSR set to: 0
 21852                           ;MXK.c: 110: return 0;
 21853  017816  0E00               	movlw	0
 21854                           
 21855                           ; BSR set to: 0
 21856  017818  0012               	return	
 21857  01781A                     l1730:
 21858                           
 21859                           ; BSR set to: 0
 21860                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 21861                           
 21862                           ; BSR set to: 0
 21863  01781A  0E00               	movlw	0
 21864  01781C  6E4D               	movwf	_Bus_State,c
 21865                           
 21866                           ; BSR set to: 0
 21867                           ;MXK.c: 114: if (CUR != pModule)
 21868  01781E  0100               	movlb	0	; () banked
 21869  017820  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 21870  017822  0100               	movlb	0	; () banked
 21871  017824  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 21872  017826  B4D8               	btfsc	status,2,c
 21873  017828  D00C               	goto	l1732
 21874                           
 21875                           ; BSR set to: 0
 21876                           ;MXK.c: 115: {
 21877                           ;MXK.c: 116: PORTG &= ~(0xF);
 21878  01782A  0EF0               	movlw	240
 21879  01782C  1686               	andwf	3974,f,c	;volatile
 21880                           
 21881                           ;MXK.c: 117: PORTG |= pModule;
 21882  01782E  0100               	movlb	0	; () banked
 21883  017830  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 21884  017832  1286               	iorwf	3974,f,c	;volatile
 21885                           
 21886                           ; BSR set to: 0
 21887                           ;MXK.c: 120: delay_us(10);
 21888  017834  0E00               	movlw	0
 21889  017836  0100               	movlb	0	; () banked
 21890  017838  6F61               	movwf	(delay_us@us+1)& (0+255),b
 21891  01783A  0E0A               	movlw	10
 21892  01783C  6F60               	movwf	delay_us@us& (0+255),b
 21893  01783E  EC23  F0BA         	call	_delay_us	;wreg free
 21894  017842                     l1732:
 21895                           
 21896                           ;MXK.c: 121: }
 21897                           ;MXK.c: 122: return 1;
 21898  017842  0E01               	movlw	1
 21899  017844  0012               	return	
 21900  017846                     __end_of_MXK_SwitchTo:
 21901                           	opt stack 0
 21902                           tosu	equ	0xFFF
 21903                           tosh	equ	0xFFE
 21904                           tosl	equ	0xFFD
 21905                           pclath	equ	0xFFA
 21906                           tblptru	equ	0xFF8
 21907                           tblptrh	equ	0xFF7
 21908                           tblptrl	equ	0xFF6
 21909                           tablat	equ	0xFF5
 21910                           prodh	equ	0xFF4
 21911                           prodl	equ	0xFF3
 21912                           intcon	equ	0xFF2
 21913                           postinc0	equ	0xFEE
 21914                           wreg	equ	0xFE8
 21915                           indf1	equ	0xFE7
 21916                           postdec1	equ	0xFE5
 21917                           fsr1h	equ	0xFE2
 21918                           fsr1l	equ	0xFE1
 21919                           indf2	equ	0xFDF
 21920                           postinc2	equ	0xFDE
 21921                           postdec2	equ	0xFDD
 21922                           plusw2	equ	0xFDB
 21923                           fsr2h	equ	0xFDA
 21924                           fsr2l	equ	0xFD9
 21925                           status	equ	0xFD8
 21926                           
 21927 ;; *************** function _MXK_Release *****************
 21928 ;; Defined at:
 21929 ;;		line 130 in file "Library/MXK.c"
 21930 ;; Parameters:    Size  Location     Type
 21931 ;;		None
 21932 ;; Auto vars:     Size  Location     Type
 21933 ;;		None
 21934 ;; Return value:  Size  Location     Type
 21935 ;;                  1    wreg      unsigned char 
 21936 ;; Registers used:
 21937 ;;		wreg, status,2, status,0
 21938 ;; Tracked objects:
 21939 ;;		On entry : 0/0
 21940 ;;		On exit  : 0/0
 21941 ;;		Unchanged: 0/0
 21942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21947 ;;Total ram usage:        0 bytes
 21948 ;; Hardware stack levels used:    1
 21949 ;; Hardware stack levels required when called:    7
 21950 ;; This function calls:
 21951 ;;		Nothing
 21952 ;; This function is called by:
 21953 ;;		_Motor_Step
 21954 ;;		_init
 21955 ;;		_mode1
 21956 ;;		_mode2
 21957 ;;		_mode4
 21958 ;;		_main
 21959 ;; This function uses a non-reentrant model
 21960 ;;
 21961                           
 21962                           	psect	text84
 21963  017E8E                     __ptext84:
 21964                           	opt stack 0
 21965  017E8E                     _MXK_Release:
 21966                           	opt stack 22
 21967                           
 21968                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 21969                           
 21970                           ;incstack = 0
 21971  017E8E  0E01               	movlw	1
 21972  017E90  6E4D               	movwf	_Bus_State,c
 21973                           
 21974                           ;MXK.c: 134: if (lQueue != 0)
 21975  017E92  0100               	movlb	0	; () banked
 21976  017E94  51E1               	movf	_lQueue& (0+255),w,b	;volatile
 21977  017E96  0100               	movlb	0	; () banked
 21978  017E98  11E2               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 21979  017E9A  0100               	movlb	0	; () banked
 21980  017E9C  11E3               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 21981  017E9E  B4D8               	btfsc	status,2,c
 21982  017EA0  D002               	goto	l1735
 21983                           
 21984                           ; BSR set to: 0
 21985                           ;MXK.c: 135: return 1;
 21986  017EA2  0E01               	movlw	1
 21987                           
 21988                           ; BSR set to: 0
 21989  017EA4  0012               	return	
 21990  017EA6                     l1735:
 21991                           
 21992                           ; BSR set to: 0
 21993                           ;MXK.c: 137: return 0;
 21994                           
 21995                           ; BSR set to: 0
 21996  017EA6  0E00               	movlw	0
 21997  017EA8  0012               	return	
 21998  017EAA                     __end_of_MXK_Release:
 21999                           	opt stack 0
 22000                           tosu	equ	0xFFF
 22001                           tosh	equ	0xFFE
 22002                           tosl	equ	0xFFD
 22003                           pclath	equ	0xFFA
 22004                           tblptru	equ	0xFF8
 22005                           tblptrh	equ	0xFF7
 22006                           tblptrl	equ	0xFF6
 22007                           tablat	equ	0xFF5
 22008                           prodh	equ	0xFF4
 22009                           prodl	equ	0xFF3
 22010                           intcon	equ	0xFF2
 22011                           postinc0	equ	0xFEE
 22012                           wreg	equ	0xFE8
 22013                           indf1	equ	0xFE7
 22014                           postdec1	equ	0xFE5
 22015                           fsr1h	equ	0xFE2
 22016                           fsr1l	equ	0xFE1
 22017                           indf2	equ	0xFDF
 22018                           postinc2	equ	0xFDE
 22019                           postdec2	equ	0xFDD
 22020                           plusw2	equ	0xFDB
 22021                           fsr2h	equ	0xFDA
 22022                           fsr2l	equ	0xFD9
 22023                           status	equ	0xFD8
 22024                           
 22025 ;; *************** function _MXK_Queue *****************
 22026 ;; Defined at:
 22027 ;;		line 144 in file "Library/MXK.c"
 22028 ;; Parameters:    Size  Location     Type
 22029 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 22030 ;;		 -> Absolute function(1), Motor_Step(1), 
 22031 ;; Auto vars:     Size  Location     Type
 22032 ;;		None
 22033 ;; Return value:  Size  Location     Type
 22034 ;;                  1    wreg      void 
 22035 ;; Registers used:
 22036 ;;		wreg, status,2, status,0
 22037 ;; Tracked objects:
 22038 ;;		On entry : 0/0
 22039 ;;		On exit  : 0/0
 22040 ;;		Unchanged: 0/0
 22041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22042 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22045 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22046 ;;Total ram usage:        3 bytes
 22047 ;; Hardware stack levels used:    1
 22048 ;; Hardware stack levels required when called:    7
 22049 ;; This function calls:
 22050 ;;		Nothing
 22051 ;; This function is called by:
 22052 ;;		_Motor_Step
 22053 ;; This function uses a non-reentrant model
 22054 ;;
 22055                           
 22056                           	psect	text85
 22057  01805A                     __ptext85:
 22058                           	opt stack 0
 22059  01805A                     _MXK_Queue:
 22060                           	opt stack 20
 22061                           
 22062                           ;MXK.c: 146: lQueue = pCallback;
 22063                           
 22064                           ; BSR set to: 0
 22065                           ;incstack = 0
 22066  01805A  C060  F0E1         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 22067  01805E  C061  F0E2         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 22068  018062  C062  F0E3         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 22069  018066  0012               	return		;funcret
 22070  018068                     __end_of_MXK_Queue:
 22071                           	opt stack 0
 22072                           tosu	equ	0xFFF
 22073                           tosh	equ	0xFFE
 22074                           tosl	equ	0xFFD
 22075                           pclath	equ	0xFFA
 22076                           tblptru	equ	0xFF8
 22077                           tblptrh	equ	0xFF7
 22078                           tblptrl	equ	0xFF6
 22079                           tablat	equ	0xFF5
 22080                           prodh	equ	0xFF4
 22081                           prodl	equ	0xFF3
 22082                           intcon	equ	0xFF2
 22083                           postinc0	equ	0xFEE
 22084                           wreg	equ	0xFE8
 22085                           indf1	equ	0xFE7
 22086                           postdec1	equ	0xFE5
 22087                           fsr1h	equ	0xFE2
 22088                           fsr1l	equ	0xFE1
 22089                           indf2	equ	0xFDF
 22090                           postinc2	equ	0xFDE
 22091                           postdec2	equ	0xFDD
 22092                           plusw2	equ	0xFDB
 22093                           fsr2h	equ	0xFDA
 22094                           fsr2l	equ	0xFD9
 22095                           status	equ	0xFD8
 22096                           
 22097 ;; *************** function _MXK_BlockSwitchTo *****************
 22098 ;; Defined at:
 22099 ;;		line 82 in file "Library/MXK.c"
 22100 ;; Parameters:    Size  Location     Type
 22101 ;;  pModule         1    wreg     enum E6927
 22102 ;; Auto vars:     Size  Location     Type
 22103 ;;  pModule         1    7[BANK0 ] enum E6927
 22104 ;;  CUR             1    6[BANK0 ] unsigned char 
 22105 ;; Return value:  Size  Location     Type
 22106 ;;                  1    wreg      unsigned char 
 22107 ;; Registers used:
 22108 ;;		wreg, status,2, status,0, cstack
 22109 ;; Tracked objects:
 22110 ;;		On entry : 0/0
 22111 ;;		On exit  : 0/0
 22112 ;;		Unchanged: 0/0
 22113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22115 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22117 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22118 ;;Total ram usage:        2 bytes
 22119 ;; Hardware stack levels used:    1
 22120 ;; Hardware stack levels required when called:    8
 22121 ;; This function calls:
 22122 ;;		_delay_us
 22123 ;; This function is called by:
 22124 ;;		_init
 22125 ;; This function uses a non-reentrant model
 22126 ;;
 22127                           
 22128                           	psect	text86
 22129  017940                     __ptext86:
 22130                           	opt stack 0
 22131  017940                     _MXK_BlockSwitchTo:
 22132                           	opt stack 21
 22133                           
 22134                           ;incstack = 0
 22135                           ;MXK_BlockSwitchTo@pModule stored from wreg
 22136  017940  0100               	movlb	0	; () banked
 22137  017942  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 22138                           
 22139                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 22140  017944  5086               	movf	3974,w,c	;volatile
 22141  017946  0B0F               	andlw	15
 22142  017948  0100               	movlb	0	; () banked
 22143  01794A  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 22144  01794C                     
 22145                           ; BSR set to: 0
 22146                           
 22147                           ; BSR set to: 0
 22148  01794C  504D               	movf	_Bus_State,w,c
 22149  01794E  B4D8               	btfsc	status,2,c
 22150  017950  D7FD               	goto	l1724
 22151                           
 22152                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 22153  017952  0E00               	movlw	0
 22154  017954  6E4D               	movwf	_Bus_State,c
 22155                           
 22156                           ;MXK.c: 90: if (CUR != pModule)
 22157  017956  0100               	movlb	0	; () banked
 22158  017958  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 22159  01795A  0100               	movlb	0	; () banked
 22160  01795C  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 22161  01795E  B4D8               	btfsc	status,2,c
 22162  017960  D00C               	goto	l1726
 22163                           
 22164                           ; BSR set to: 0
 22165                           ;MXK.c: 91: {
 22166                           ;MXK.c: 92: PORTG &= ~(0xF);
 22167  017962  0EF0               	movlw	240
 22168  017964  1686               	andwf	3974,f,c	;volatile
 22169                           
 22170                           ;MXK.c: 93: PORTG |= pModule;
 22171  017966  0100               	movlb	0	; () banked
 22172  017968  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 22173  01796A  1286               	iorwf	3974,f,c	;volatile
 22174                           
 22175                           ; BSR set to: 0
 22176                           ;MXK.c: 96: delay_us(10);
 22177  01796C  0E00               	movlw	0
 22178  01796E  0100               	movlb	0	; () banked
 22179  017970  6F61               	movwf	(delay_us@us+1)& (0+255),b
 22180  017972  0E0A               	movlw	10
 22181  017974  6F60               	movwf	delay_us@us& (0+255),b
 22182  017976  EC23  F0BA         	call	_delay_us	;wreg free
 22183  01797A                     l1726:
 22184                           
 22185                           ;MXK.c: 97: }
 22186                           ;MXK.c: 98: return 1;
 22187  01797A  0E01               	movlw	1
 22188  01797C  0012               	return	
 22189  01797E                     __end_of_MXK_BlockSwitchTo:
 22190                           	opt stack 0
 22191                           tosu	equ	0xFFF
 22192                           tosh	equ	0xFFE
 22193                           tosl	equ	0xFFD
 22194                           pclath	equ	0xFFA
 22195                           tblptru	equ	0xFF8
 22196                           tblptrh	equ	0xFF7
 22197                           tblptrl	equ	0xFF6
 22198                           tablat	equ	0xFF5
 22199                           prodh	equ	0xFF4
 22200                           prodl	equ	0xFF3
 22201                           intcon	equ	0xFF2
 22202                           postinc0	equ	0xFEE
 22203                           wreg	equ	0xFE8
 22204                           indf1	equ	0xFE7
 22205                           postdec1	equ	0xFE5
 22206                           fsr1h	equ	0xFE2
 22207                           fsr1l	equ	0xFE1
 22208                           indf2	equ	0xFDF
 22209                           postinc2	equ	0xFDE
 22210                           postdec2	equ	0xFDD
 22211                           plusw2	equ	0xFDB
 22212                           fsr2h	equ	0xFDA
 22213                           fsr2l	equ	0xFD9
 22214                           status	equ	0xFD8
 22215                           
 22216 ;; *************** function _delay_us *****************
 22217 ;; Defined at:
 22218 ;;		line 255 in file "Library/Types.c"
 22219 ;; Parameters:    Size  Location     Type
 22220 ;;  us              2    0[BANK0 ] unsigned short 
 22221 ;; Auto vars:     Size  Location     Type
 22222 ;;  u               4    2[BANK0 ] unsigned long 
 22223 ;; Return value:  Size  Location     Type
 22224 ;;                  1    wreg      void 
 22225 ;; Registers used:
 22226 ;;		wreg, status,2, status,0
 22227 ;; Tracked objects:
 22228 ;;		On entry : 0/0
 22229 ;;		On exit  : 0/0
 22230 ;;		Unchanged: 0/0
 22231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22233 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22235 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22236 ;;Total ram usage:        6 bytes
 22237 ;; Hardware stack levels used:    1
 22238 ;; Hardware stack levels required when called:    7
 22239 ;; This function calls:
 22240 ;;		Nothing
 22241 ;; This function is called by:
 22242 ;;		_MXK_BlockSwitchTo
 22243 ;;		_MXK_SwitchTo
 22244 ;; This function uses a non-reentrant model
 22245 ;;
 22246                           
 22247                           	psect	text87
 22248  017446                     __ptext87:
 22249                           	opt stack 0
 22250  017446                     _delay_us:
 22251                           	opt stack 21
 22252                           
 22253                           ;Types.c: 256: unsigned long u;
 22254                           ;Types.c: 257: while (us--) {
 22255                           
 22256                           ;incstack = 0
 22257  017446  D01C               	goto	u11440
 22258  017448                     l14100:
 22259                           
 22260                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 22261  017448  0E00               	movlw	0
 22262  01744A  0100               	movlb	0	; () banked
 22263  01744C  6F62               	movwf	delay_us@u& (0+255),b
 22264  01744E  0E00               	movlw	0
 22265  017450  6F63               	movwf	(delay_us@u+1)& (0+255),b
 22266  017452  0E00               	movlw	0
 22267  017454  6F64               	movwf	(delay_us@u+2)& (0+255),b
 22268  017456  0E00               	movlw	0
 22269  017458  6F65               	movwf	(delay_us@u+3)& (0+255),b
 22270  01745A                     l14102:
 22271                           
 22272                           ; BSR set to: 0
 22273  01745A  0100               	movlb	0	; () banked
 22274  01745C  5162               	movf	delay_us@u& (0+255),w,b
 22275  01745E  0100               	movlb	0	; () banked
 22276  017460  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 22277  017462  0100               	movlb	0	; () banked
 22278  017464  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 22279  017466  0100               	movlb	0	; () banked
 22280  017468  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 22281  01746A  A4D8               	btfss	status,2,c
 22282  01746C  D009               	goto	u11440
 22283                           
 22284                           ; BSR set to: 0
 22285                           
 22286                           ; BSR set to: 0
 22287  01746E  F000               	nop		; ;# 
 22288  017470  0E01               	movlw	1
 22289  017472  0100               	movlb	0	; () banked
 22290  017474  2762               	addwf	delay_us@u& (0+255),f,b
 22291  017476  0E00               	movlw	0
 22292  017478  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 22293  01747A  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 22294  01747C  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 22295  01747E  D7ED               	goto	l14102
 22296  017480                     u11440:
 22297                           
 22298                           ; BSR set to: 0
 22299                           
 22300                           ; BSR set to: 0
 22301  017480  0100               	movlb	0	; () banked
 22302  017482  0760               	decf	delay_us@us& (0+255),f,b
 22303  017484  A0D8               	btfss	status,0,c
 22304  017486  0761               	decf	(delay_us@us+1)& (0+255),f,b
 22305  017488  0100               	movlb	0	; () banked
 22306  01748A  2960               	incf	delay_us@us& (0+255),w,b
 22307  01748C  E1DD               	bnz	l14100
 22308  01748E  0100               	movlb	0	; () banked
 22309  017490  2961               	incf	(delay_us@us+1)& (0+255),w,b
 22310  017492  B4D8               	btfsc	status,2,c
 22311  017494  0012               	return	
 22312  017496  D7D8               	goto	l832
 22313  017498                     __end_of_delay_us:
 22314                           	opt stack 0
 22315                           tosu	equ	0xFFF
 22316                           tosh	equ	0xFFE
 22317                           tosl	equ	0xFFD
 22318                           pclath	equ	0xFFA
 22319                           tblptru	equ	0xFF8
 22320                           tblptrh	equ	0xFF7
 22321                           tblptrl	equ	0xFF6
 22322                           tablat	equ	0xFF5
 22323                           prodh	equ	0xFF4
 22324                           prodl	equ	0xFF3
 22325                           intcon	equ	0xFF2
 22326                           postinc0	equ	0xFEE
 22327                           wreg	equ	0xFE8
 22328                           indf1	equ	0xFE7
 22329                           postdec1	equ	0xFE5
 22330                           fsr1h	equ	0xFE2
 22331                           fsr1l	equ	0xFE1
 22332                           indf2	equ	0xFDF
 22333                           postinc2	equ	0xFDE
 22334                           postdec2	equ	0xFDD
 22335                           plusw2	equ	0xFDB
 22336                           fsr2h	equ	0xFDA
 22337                           fsr2l	equ	0xFD9
 22338                           status	equ	0xFD8
 22339                           
 22340 ;; *************** function _LCD_Init *****************
 22341 ;; Defined at:
 22342 ;;		line 172 in file "Library/LCD.c"
 22343 ;; Parameters:    Size  Location     Type
 22344 ;;		None
 22345 ;; Auto vars:     Size  Location     Type
 22346 ;;  i               2   55[BANK0 ] unsigned short 
 22347 ;; Return value:  Size  Location     Type
 22348 ;;                  1    wreg      void 
 22349 ;; Registers used:
 22350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22351 ;; Tracked objects:
 22352 ;;		On entry : 0/0
 22353 ;;		On exit  : 0/0
 22354 ;;		Unchanged: 0/0
 22355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22358 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22359 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22360 ;;Total ram usage:        4 bytes
 22361 ;; Hardware stack levels used:    1
 22362 ;; Hardware stack levels required when called:   15
 22363 ;; This function calls:
 22364 ;;		_Configure_GPIOs
 22365 ;;		_LCD_Fill
 22366 ;;		_LCD_Write
 22367 ;;		_Set_Rotation
 22368 ;;		_delay_ms
 22369 ;; This function is called by:
 22370 ;;		_init
 22371 ;; This function uses a non-reentrant model
 22372 ;;
 22373                           
 22374                           	psect	text88
 22375  0147C4                     __ptext88:
 22376                           	opt stack 0
 22377  0147C4                     _LCD_Init:
 22378                           	opt stack 14
 22379                           
 22380                           ;LCD.c: 174: UINT16 i;
 22381                           ;LCD.c: 175: Configure_GPIOs();
 22382                           
 22383                           ; BSR set to: 0
 22384                           ;incstack = 0
 22385  0147C4  EC33  F0B7         	call	_Configure_GPIOs	;wreg free
 22386                           
 22387                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 22388  0147C8  0E00               	movlw	0
 22389  0147CA  0100               	movlb	0	; () banked
 22390  0147CC  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 22391  0147CE  0E00               	movlw	0
 22392  0147D0  6F97               	movwf	LCD_Init@i& (0+255),b
 22393                           
 22394                           ; BSR set to: 0
 22395  0147D2  0100               	movlb	0	; () banked
 22396  0147D4  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 22397  0147D6  E106               	bnz	u13410
 22398  0147D8  0E59               	movlw	89
 22399  0147DA  0100               	movlb	0	; () banked
 22400  0147DC  5D97               	subwf	LCD_Init@i& (0+255),w,b
 22401  0147DE  B0D8               	btfsc	status,0,c
 22402  0147E0  D08B               	goto	u13450
 22403  0147E2  D001               	goto	l85
 22404  0147E4                     u13410:
 22405                           
 22406                           ; BSR set to: 0
 22407  0147E4  D089               	goto	u13450
 22408  0147E6                     l85:
 22409                           
 22410                           ; BSR set to: 0
 22411                           ;LCD.c: 178: {
 22412                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 22413                           
 22414                           ; BSR set to: 0
 22415  0147E6  90D8               	bcf	status,0,c
 22416  0147E8  0100               	movlb	0	; () banked
 22417  0147EA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 22418  0147EC  6EF6               	movwf	tblptrl,c
 22419  0147EE  0100               	movlb	0	; () banked
 22420  0147F0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 22421  0147F2  6EF7               	movwf	tblptrh,c
 22422  0147F4  0EF9               	movlw	low _InitList
 22423  0147F6  26F6               	addwf	tblptrl,f,c
 22424  0147F8  0EFB               	movlw	high _InitList
 22425  0147FA  22F7               	addwfc	tblptrh,f,c
 22426  0147FC                     	if	1	;There are 3 active tblptr bytes
 22427  0147FC  6AF8               	clrf	tblptru,c
 22428  0147FE  0E00               	movlw	low (__mediumconst shr (0+16))
 22429  014800  22F8               	addwfc	tblptru,f,c
 22430  014802                     	endif
 22431  014802  0009               	tblrd		*+
 22432  014804  0E80               	movlw	128
 22433  014806  18F5               	xorwf	tablat,w,c
 22434  014808  0009               	tblrd		*+
 22435  01480A  10F5               	iorwf	tablat,w,c
 22436  01480C  A4D8               	btfss	status,2,c
 22437  01480E  D022               	goto	l87
 22438                           
 22439                           ; BSR set to: 0
 22440  014810  0100               	movlb	0	; () banked
 22441  014812  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 22442  014814  E11F               	bnz	l15814
 22443  014816  0E58               	movlw	88
 22444  014818  0100               	movlb	0	; () banked
 22445  01481A  5D97               	subwf	LCD_Init@i& (0+255),w,b
 22446  01481C  B0D8               	btfsc	status,0,c
 22447  01481E  D01A               	goto	l87
 22448                           
 22449                           ; BSR set to: 0
 22450                           ;LCD.c: 180: delay_ms(InitList[++i]);
 22451  014820  0100               	movlb	0	; () banked
 22452  014822  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 22453  014824  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 22454  014826  90D8               	bcf	status,0,c
 22455  014828  0100               	movlb	0	; () banked
 22456  01482A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 22457  01482C  6EF6               	movwf	tblptrl,c
 22458  01482E  0100               	movlb	0	; () banked
 22459  014830  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 22460  014832  6EF7               	movwf	tblptrh,c
 22461  014834  0EF9               	movlw	low _InitList
 22462  014836  26F6               	addwf	tblptrl,f,c
 22463  014838  0EFB               	movlw	high _InitList
 22464  01483A  22F7               	addwfc	tblptrh,f,c
 22465  01483C                     	if	1	;There are 3 active tblptr bytes
 22466  01483C  6AF8               	clrf	tblptru,c
 22467  01483E  0E00               	movlw	low (__mediumconst shr (0+16))
 22468  014840  22F8               	addwfc	tblptru,f,c
 22469  014842                     	endif
 22470  014842  0009               	tblrd		*+
 22471  014844  CFF5 F060          	movff	tablat,delay_ms@ms
 22472  014848  000A               	tblrd		*-
 22473  01484A  CFF5 F061          	movff	tablat,delay_ms@ms+1
 22474  01484E  EC0C  F0B8         	call	_delay_ms	;wreg free
 22475  014852  D04B               	goto	l90
 22476  014854                     l87:
 22477  014854                     l15814:
 22478                           
 22479                           ;LCD.c: 181: else
 22480                           ;LCD.c: 182: {
 22481                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 22482  014854  90D8               	bcf	status,0,c
 22483  014856  0100               	movlb	0	; () banked
 22484  014858  3597               	rlcf	LCD_Init@i& (0+255),w,b
 22485  01485A  6EF6               	movwf	tblptrl,c
 22486  01485C  0100               	movlb	0	; () banked
 22487  01485E  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 22488  014860  6EF7               	movwf	tblptrh,c
 22489  014862  0EF9               	movlw	low _InitList
 22490  014864  26F6               	addwf	tblptrl,f,c
 22491  014866  0EFB               	movlw	high _InitList
 22492  014868  22F7               	addwfc	tblptrh,f,c
 22493  01486A                     	if	1	;There are 3 active tblptr bytes
 22494  01486A  6AF8               	clrf	tblptru,c
 22495  01486C  0E00               	movlw	low (__mediumconst shr (0+16))
 22496  01486E  22F8               	addwfc	tblptru,f,c
 22497  014870                     	endif
 22498  014870  0009               	tblrd		*+
 22499  014872  0E00               	movlw	0
 22500  014874  5EF5               	subwf	tablat,f,c
 22501  014876  0009               	tblrd		*+
 22502  014878  0E01               	movlw	1
 22503  01487A  5AF5               	subwfb	tablat,f,c
 22504  01487C  A0D8               	btfss	status,0,c
 22505  01487E  D020               	goto	l89
 22506                           
 22507                           ; BSR set to: 0
 22508  014880  0E00               	movlw	0
 22509  014882  0100               	movlb	0	; () banked
 22510  014884  6F63               	movwf	LCD_Write@mode& (0+255),b
 22511  014886  90D8               	bcf	status,0,c
 22512  014888  0100               	movlb	0	; () banked
 22513  01488A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 22514  01488C  6EF6               	movwf	tblptrl,c
 22515  01488E  0100               	movlb	0	; () banked
 22516  014890  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 22517  014892  6EF7               	movwf	tblptrh,c
 22518  014894  0EF9               	movlw	low _InitList
 22519  014896  26F6               	addwf	tblptrl,f,c
 22520  014898  0EFB               	movlw	high _InitList
 22521  01489A  22F7               	addwfc	tblptrh,f,c
 22522  01489C                     	if	1	;There are 3 active tblptr bytes
 22523  01489C  6AF8               	clrf	tblptru,c
 22524  01489E  0E00               	movlw	low (__mediumconst shr (0+16))
 22525  0148A0  22F8               	addwfc	tblptru,f,c
 22526  0148A2                     	endif
 22527  0148A2  0009               	tblrd		*+
 22528  0148A4  CFF5 F095          	movff	tablat,??_LCD_Init
 22529  0148A8  0009               	tblrd		*+
 22530  0148AA  CFF5 F096          	movff	tablat,??_LCD_Init+1
 22531  0148AE  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 22532  0148B2  0100               	movlb	0	; () banked
 22533  0148B4  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 22534  0148B6  0100               	movlb	0	; () banked
 22535  0148B8  5195               	movf	??_LCD_Init& (0+255),w,b
 22536  0148BA  EC7E  F0BE         	call	_LCD_Write
 22537  0148BE  D015               	goto	l90
 22538  0148C0                     l89:
 22539                           
 22540                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 22541  0148C0  0E01               	movlw	1
 22542  0148C2  0100               	movlb	0	; () banked
 22543  0148C4  6F63               	movwf	LCD_Write@mode& (0+255),b
 22544  0148C6  90D8               	bcf	status,0,c
 22545  0148C8  0100               	movlb	0	; () banked
 22546  0148CA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 22547  0148CC  6EF6               	movwf	tblptrl,c
 22548  0148CE  0100               	movlb	0	; () banked
 22549  0148D0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 22550  0148D2  6EF7               	movwf	tblptrh,c
 22551  0148D4  0EF9               	movlw	low _InitList
 22552  0148D6  26F6               	addwf	tblptrl,f,c
 22553  0148D8  0EFB               	movlw	high _InitList
 22554  0148DA  22F7               	addwfc	tblptrh,f,c
 22555  0148DC                     	if	1	;There are 3 active tblptr bytes
 22556  0148DC  6AF8               	clrf	tblptru,c
 22557  0148DE  0E00               	movlw	low (__mediumconst shr (0+16))
 22558  0148E0  22F8               	addwfc	tblptru,f,c
 22559  0148E2                     	endif
 22560  0148E2  0008               	tblrd		*
 22561  0148E4  50F5               	movf	tablat,w,c
 22562  0148E6  EC7E  F0BE         	call	_LCD_Write
 22563  0148EA                     l90:
 22564  0148EA  0100               	movlb	0	; () banked
 22565  0148EC  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 22566  0148EE  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 22567                           
 22568                           ; BSR set to: 0
 22569  0148F0  0100               	movlb	0	; () banked
 22570  0148F2  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 22571  0148F4  E101               	bnz	l15824
 22572  0148F6  D770               	goto	L16
 22573  0148F8                     u13450:
 22574  0148F8                     l15824:
 22575                           
 22576                           ; BSR set to: 0
 22577                           ;LCD.c: 185: }
 22578                           ;LCD.c: 186: }
 22579                           ;LCD.c: 187: delay_ms(100);
 22580  0148F8  0E00               	movlw	0
 22581  0148FA  0100               	movlb	0	; () banked
 22582  0148FC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 22583  0148FE  0E64               	movlw	100
 22584  014900  6F60               	movwf	delay_ms@ms& (0+255),b
 22585  014902  EC0C  F0B8         	call	_delay_ms	;wreg free
 22586                           
 22587                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 22588  014906  0E00               	movlw	0
 22589  014908  0100               	movlb	0	; () banked
 22590  01490A  6F63               	movwf	LCD_Write@mode& (0+255),b
 22591  01490C  0E29               	movlw	41
 22592  01490E  EC7E  F0BE         	call	_LCD_Write
 22593                           
 22594                           ;LCD.c: 189: Set_Rotation(1);
 22595  014912  0E01               	movlw	1
 22596  014914  ECA3  F0B2         	call	_Set_Rotation
 22597                           
 22598                           ;LCD.c: 191: delay_ms(100);
 22599  014918  0E00               	movlw	0
 22600  01491A  0100               	movlb	0	; () banked
 22601  01491C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 22602  01491E  0E64               	movlw	100
 22603  014920  6F60               	movwf	delay_ms@ms& (0+255),b
 22604  014922  EC0C  F0B8         	call	_delay_ms	;wreg free
 22605                           
 22606                           ;LCD.c: 192: LCD_Fill(0x0000);
 22607  014926  0E00               	movlw	0
 22608  014928  0100               	movlb	0	; () banked
 22609  01492A  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 22610  01492C  0E00               	movlw	0
 22611  01492E  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 22612  014930  ECF7  F0B9         	call	_LCD_Fill	;wreg free
 22613  014934  0012               	return		;funcret
 22614  014936                     __end_of_LCD_Init:
 22615                           	opt stack 0
 22616                           tosu	equ	0xFFF
 22617                           tosh	equ	0xFFE
 22618                           tosl	equ	0xFFD
 22619                           pclath	equ	0xFFA
 22620                           tblptru	equ	0xFF8
 22621                           tblptrh	equ	0xFF7
 22622                           tblptrl	equ	0xFF6
 22623                           tablat	equ	0xFF5
 22624                           prodh	equ	0xFF4
 22625                           prodl	equ	0xFF3
 22626                           intcon	equ	0xFF2
 22627                           postinc0	equ	0xFEE
 22628                           wreg	equ	0xFE8
 22629                           indf1	equ	0xFE7
 22630                           postdec1	equ	0xFE5
 22631                           fsr1h	equ	0xFE2
 22632                           fsr1l	equ	0xFE1
 22633                           indf2	equ	0xFDF
 22634                           postinc2	equ	0xFDE
 22635                           postdec2	equ	0xFDD
 22636                           plusw2	equ	0xFDB
 22637                           fsr2h	equ	0xFDA
 22638                           fsr2l	equ	0xFD9
 22639                           status	equ	0xFD8
 22640                           
 22641 ;; *************** function _Set_Rotation *****************
 22642 ;; Defined at:
 22643 ;;		line 248 in file "Library/LCD.c"
 22644 ;; Parameters:    Size  Location     Type
 22645 ;;  m               1    wreg     unsigned char 
 22646 ;; Auto vars:     Size  Location     Type
 22647 ;;  m               1    5[BANK0 ] unsigned char 
 22648 ;;  rotation        1    6[BANK0 ] unsigned char 
 22649 ;; Return value:  Size  Location     Type
 22650 ;;                  1    wreg      void 
 22651 ;; Registers used:
 22652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22653 ;; Tracked objects:
 22654 ;;		On entry : 0/0
 22655 ;;		On exit  : 0/0
 22656 ;;		Unchanged: 0/0
 22657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22662 ;;Total ram usage:        2 bytes
 22663 ;; Hardware stack levels used:    1
 22664 ;; Hardware stack levels required when called:    9
 22665 ;; This function calls:
 22666 ;;		_LCD_Write
 22667 ;; This function is called by:
 22668 ;;		_LCD_Init
 22669 ;; This function uses a non-reentrant model
 22670 ;;
 22671                           
 22672                           	psect	text89
 22673  016546                     __ptext89:
 22674                           	opt stack 0
 22675  016546                     _Set_Rotation:
 22676                           	opt stack 19
 22677                           
 22678                           ;incstack = 0
 22679                           ;Set_Rotation@m stored from wreg
 22680  016546  0100               	movlb	0	; () banked
 22681  016548  6F65               	movwf	Set_Rotation@m& (0+255),b
 22682                           
 22683                           ;LCD.c: 250: UINT8 rotation = 0x00;
 22684  01654A  0E00               	movlw	0
 22685  01654C  0100               	movlb	0	; () banked
 22686  01654E  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 22687                           
 22688                           ; BSR set to: 0
 22689                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 22690  016550  0E00               	movlw	0
 22691  016552  0100               	movlb	0	; () banked
 22692  016554  6F63               	movwf	LCD_Write@mode& (0+255),b
 22693  016556  0E36               	movlw	54
 22694  016558  EC7E  F0BE         	call	_LCD_Write
 22695                           
 22696                           ;LCD.c: 253: rotation = (m % 4);
 22697  01655C  0100               	movlb	0	; () banked
 22698  01655E  5165               	movf	Set_Rotation@m& (0+255),w,b
 22699  016560  0B03               	andlw	3
 22700  016562  0100               	movlb	0	; () banked
 22701  016564  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 22702                           
 22703                           ;LCD.c: 255: switch(rotation)
 22704  016566  D02C               	goto	l117
 22705  016568                     
 22706                           ; BSR set to: 0
 22707                           ;LCD.c: 258: {
 22708                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 22709                           
 22710                           ; BSR set to: 0
 22711  016568  0E01               	movlw	1
 22712  01656A  0100               	movlb	0	; () banked
 22713  01656C  6F63               	movwf	LCD_Write@mode& (0+255),b
 22714  01656E  0EC8               	movlw	200
 22715  016570  EC7E  F0BE         	call	_LCD_Write
 22716                           
 22717                           ;LCD.c: 260: w = 128;
 22718  016574  0E80               	movlw	128
 22719  016576  6E50               	movwf	_w,c
 22720                           
 22721                           ;LCD.c: 261: l = 128;
 22722  016578  0E80               	movlw	128
 22723  01657A  6E4F               	movwf	_l,c
 22724                           
 22725                           ;LCD.c: 262: break;
 22726  01657C  0012               	return	
 22727  01657E                     
 22728                           ;LCD.c: 265: {
 22729                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 22730  01657E  0E01               	movlw	1
 22731  016580  0100               	movlb	0	; () banked
 22732  016582  6F63               	movwf	LCD_Write@mode& (0+255),b
 22733  016584  0EA8               	movlw	168
 22734  016586  EC7E  F0BE         	call	_LCD_Write
 22735                           
 22736                           ;LCD.c: 267: w = 128;
 22737  01658A  0E80               	movlw	128
 22738  01658C  6E50               	movwf	_w,c
 22739                           
 22740                           ;LCD.c: 268: l = 128;
 22741  01658E  0E80               	movlw	128
 22742  016590  6E4F               	movwf	_l,c
 22743                           
 22744                           ;LCD.c: 269: break;
 22745  016592  0012               	return	
 22746  016594                     
 22747                           ;LCD.c: 272: {
 22748                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 22749  016594  0E01               	movlw	1
 22750  016596  0100               	movlb	0	; () banked
 22751  016598  6F63               	movwf	LCD_Write@mode& (0+255),b
 22752  01659A  0E08               	movlw	8
 22753  01659C  EC7E  F0BE         	call	_LCD_Write
 22754                           
 22755                           ;LCD.c: 274: w = 128;
 22756  0165A0  0E80               	movlw	128
 22757  0165A2  6E50               	movwf	_w,c
 22758                           
 22759                           ;LCD.c: 275: l = 128;
 22760  0165A4  0E80               	movlw	128
 22761  0165A6  6E4F               	movwf	_l,c
 22762                           
 22763                           ;LCD.c: 276: break;
 22764  0165A8  0012               	return	
 22765  0165AA                     
 22766                           ;LCD.c: 279: {
 22767                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 22768  0165AA  0E01               	movlw	1
 22769  0165AC  0100               	movlb	0	; () banked
 22770  0165AE  6F63               	movwf	LCD_Write@mode& (0+255),b
 22771  0165B0  0E68               	movlw	104
 22772  0165B2  EC7E  F0BE         	call	_LCD_Write
 22773                           
 22774                           ;LCD.c: 281: w = 128;
 22775  0165B6  0E80               	movlw	128
 22776  0165B8  6E50               	movwf	_w,c
 22777                           
 22778                           ;LCD.c: 282: l = 128;
 22779  0165BA  0E80               	movlw	128
 22780  0165BC  6E4F               	movwf	_l,c
 22781                           
 22782                           ;LCD.c: 284: }
 22783                           ;LCD.c: 285: }
 22784                           
 22785                           ;LCD.c: 283: break;
 22786  0165BE  0012               	return	
 22787  0165C0                     l117:
 22788  0165C0  0100               	movlb	0	; () banked
 22789  0165C2  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 22790                           
 22791                           ; Switch size 1, requested type "space"
 22792                           ; Number of cases is 4, Range of values is 0 to 3
 22793                           ; switch strategies available:
 22794                           ; Name         Instructions Cycles
 22795                           ; simple_byte           13     7 (average)
 22796                           ;	Chosen strategy is simple_byte
 22797  0165C4  0A00               	xorlw	0	; case 0
 22798  0165C6  B4D8               	btfsc	status,2,c
 22799  0165C8  D7CF               	goto	l118
 22800  0165CA  0A01               	xorlw	1	; case 1
 22801  0165CC  B4D8               	btfsc	status,2,c
 22802  0165CE  D7D7               	goto	l120
 22803  0165D0  0A03               	xorlw	3	; case 2
 22804  0165D2  B4D8               	btfsc	status,2,c
 22805  0165D4  D7DF               	goto	l121
 22806  0165D6  0A01               	xorlw	1	; case 3
 22807  0165D8  A4D8               	btfss	status,2,c
 22808  0165DA  0012               	return	
 22809  0165DC  D7E6               	goto	l122
 22810  0165DE                     __end_of_Set_Rotation:
 22811                           	opt stack 0
 22812                           tosu	equ	0xFFF
 22813                           tosh	equ	0xFFE
 22814                           tosl	equ	0xFFD
 22815                           pclath	equ	0xFFA
 22816                           tblptru	equ	0xFF8
 22817                           tblptrh	equ	0xFF7
 22818                           tblptrl	equ	0xFF6
 22819                           tablat	equ	0xFF5
 22820                           prodh	equ	0xFF4
 22821                           prodl	equ	0xFF3
 22822                           intcon	equ	0xFF2
 22823                           postinc0	equ	0xFEE
 22824                           wreg	equ	0xFE8
 22825                           indf1	equ	0xFE7
 22826                           postdec1	equ	0xFE5
 22827                           fsr1h	equ	0xFE2
 22828                           fsr1l	equ	0xFE1
 22829                           indf2	equ	0xFDF
 22830                           postinc2	equ	0xFDE
 22831                           postdec2	equ	0xFDD
 22832                           plusw2	equ	0xFDB
 22833                           fsr2h	equ	0xFDA
 22834                           fsr2l	equ	0xFD9
 22835                           status	equ	0xFD8
 22836                           
 22837 ;; *************** function _LCD_Fill *****************
 22838 ;; Defined at:
 22839 ;;		line 287 in file "Library/LCD.c"
 22840 ;; Parameters:    Size  Location     Type
 22841 ;;  pColour         2    9[BANK0 ] unsigned short 
 22842 ;; Auto vars:     Size  Location     Type
 22843 ;;  j               1   12[BANK0 ] unsigned char 
 22844 ;;  i               1   11[BANK0 ] unsigned char 
 22845 ;; Return value:  Size  Location     Type
 22846 ;;                  1    wreg      void 
 22847 ;; Registers used:
 22848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22849 ;; Tracked objects:
 22850 ;;		On entry : 0/0
 22851 ;;		On exit  : 0/0
 22852 ;;		Unchanged: 0/0
 22853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22854 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22855 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22857 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22858 ;;Total ram usage:        4 bytes
 22859 ;; Hardware stack levels used:    1
 22860 ;; Hardware stack levels required when called:   10
 22861 ;; This function calls:
 22862 ;;		_LCD_Word_Write
 22863 ;;		_Set_Addr_Window
 22864 ;; This function is called by:
 22865 ;;		_LCD_Init
 22866 ;; This function uses a non-reentrant model
 22867 ;;
 22868                           
 22869                           	psect	text90
 22870  0173EE                     __ptext90:
 22871                           	opt stack 0
 22872  0173EE                     _LCD_Fill:
 22873                           	opt stack 18
 22874                           
 22875                           ;LCD.c: 296: UINT8 i = 0x00;
 22876                           
 22877                           ;incstack = 0
 22878  0173EE  0E00               	movlw	0
 22879  0173F0  0100               	movlb	0	; () banked
 22880  0173F2  6F6B               	movwf	LCD_Fill@i& (0+255),b
 22881                           
 22882                           ;LCD.c: 297: UINT8 j = 0x00;
 22883  0173F4  0E00               	movlw	0
 22884  0173F6  0100               	movlb	0	; () banked
 22885  0173F8  6F6C               	movwf	LCD_Fill@j& (0+255),b
 22886                           
 22887                           ; BSR set to: 0
 22888                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 22889  0173FA  0E00               	movlw	0
 22890  0173FC  0100               	movlb	0	; () banked
 22891  0173FE  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 22892  017400  0450               	decf	_w,w,c
 22893  017402  0100               	movlb	0	; () banked
 22894  017404  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 22895  017406  044F               	decf	_l,w,c
 22896  017408  0100               	movlb	0	; () banked
 22897  01740A  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 22898  01740C  0E00               	movlw	0
 22899  01740E  EC1F  F0AF         	call	_Set_Addr_Window
 22900                           
 22901                           ;LCD.c: 299: for (j = l; j > 0; j--)
 22902  017412  C04F  F06C         	movff	_l,LCD_Fill@j
 22903  017416                     l15156:
 22904  017416  0100               	movlb	0	; () banked
 22905  017418  516C               	movf	LCD_Fill@j& (0+255),w,b
 22906  01741A  0100               	movlb	0	; () banked
 22907  01741C  B4D8               	btfsc	status,2,c
 22908  01741E  0012               	return	
 22909                           
 22910                           ; BSR set to: 0
 22911                           ;LCD.c: 300: for (i = w; i > 0; i--)
 22912                           
 22913                           ; BSR set to: 0
 22914  017420  C050  F06B         	movff	_w,LCD_Fill@i
 22915  017424                     l15160:
 22916                           
 22917                           ; BSR set to: 0
 22918  017424  0100               	movlb	0	; () banked
 22919  017426  516B               	movf	LCD_Fill@i& (0+255),w,b
 22920  017428  0100               	movlb	0	; () banked
 22921  01742A  B4D8               	btfsc	status,2,c
 22922  01742C  D009               	goto	u12540
 22923                           
 22924                           ; BSR set to: 0
 22925                           ;LCD.c: 301: LCD_Word_Write(pColour);
 22926                           
 22927                           ; BSR set to: 0
 22928                           
 22929                           ; BSR set to: 0
 22930  01742E  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 22931  017432  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 22932  017436  ECDF  F0BE         	call	_LCD_Word_Write	;wreg free
 22933  01743A  0100               	movlb	0	; () banked
 22934  01743C  076B               	decf	LCD_Fill@i& (0+255),f,b
 22935  01743E  D7F2               	goto	l15160
 22936  017440                     u12540:
 22937                           
 22938                           ; BSR set to: 0
 22939                           
 22940                           ; BSR set to: 0
 22941  017440  0100               	movlb	0	; () banked
 22942  017442  076C               	decf	LCD_Fill@j& (0+255),f,b
 22943  017444  D7E8               	goto	l15156
 22944  017446                     __end_of_LCD_Fill:
 22945                           	opt stack 0
 22946                           tosu	equ	0xFFF
 22947                           tosh	equ	0xFFE
 22948                           tosl	equ	0xFFD
 22949                           pclath	equ	0xFFA
 22950                           tblptru	equ	0xFF8
 22951                           tblptrh	equ	0xFF7
 22952                           tblptrl	equ	0xFF6
 22953                           tablat	equ	0xFF5
 22954                           prodh	equ	0xFF4
 22955                           prodl	equ	0xFF3
 22956                           intcon	equ	0xFF2
 22957                           postinc0	equ	0xFEE
 22958                           wreg	equ	0xFE8
 22959                           indf1	equ	0xFE7
 22960                           postdec1	equ	0xFE5
 22961                           fsr1h	equ	0xFE2
 22962                           fsr1l	equ	0xFE1
 22963                           indf2	equ	0xFDF
 22964                           postinc2	equ	0xFDE
 22965                           postdec2	equ	0xFDD
 22966                           plusw2	equ	0xFDB
 22967                           fsr2h	equ	0xFDA
 22968                           fsr2l	equ	0xFD9
 22969                           status	equ	0xFD8
 22970                           
 22971 ;; *************** function _Set_Addr_Window *****************
 22972 ;; Defined at:
 22973 ;;		line 214 in file "Library/LCD.c"
 22974 ;; Parameters:    Size  Location     Type
 22975 ;;  xs              1    wreg     unsigned char 
 22976 ;;  ys              1    5[BANK0 ] unsigned char 
 22977 ;;  xe              1    6[BANK0 ] unsigned char 
 22978 ;;  ye              1    7[BANK0 ] unsigned char 
 22979 ;; Auto vars:     Size  Location     Type
 22980 ;;  xs              1    8[BANK0 ] unsigned char 
 22981 ;; Return value:  Size  Location     Type
 22982 ;;                  1    wreg      void 
 22983 ;; Registers used:
 22984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22985 ;; Tracked objects:
 22986 ;;		On entry : 0/0
 22987 ;;		On exit  : 0/0
 22988 ;;		Unchanged: 0/0
 22989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22990 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22994 ;;Total ram usage:        4 bytes
 22995 ;; Hardware stack levels used:    1
 22996 ;; Hardware stack levels required when called:    9
 22997 ;; This function calls:
 22998 ;;		_LCD_Write
 22999 ;; This function is called by:
 23000 ;;		_LCD_Fill
 23001 ;;		_LCD_FillRectangle
 23002 ;;		_LCD_DrawField
 23003 ;;		_RAM_Address_Set
 23004 ;;		_LCD_DrawPixel
 23005 ;; This function uses a non-reentrant model
 23006 ;;
 23007                           
 23008                           	psect	text91
 23009  015E3E                     __ptext91:
 23010                           	opt stack 0
 23011  015E3E                     _Set_Addr_Window:
 23012                           	opt stack 18
 23013                           
 23014                           ; BSR set to: 0
 23015                           ;incstack = 0
 23016                           ;Set_Addr_Window@xs stored from wreg
 23017  015E3E  0100               	movlb	0	; () banked
 23018  015E40  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 23019                           
 23020                           ;LCD.c: 216: ys+=2;
 23021  015E42  0E02               	movlw	2
 23022  015E44  0100               	movlb	0	; () banked
 23023  015E46  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 23024                           
 23025                           ;LCD.c: 217: ye+=2;
 23026  015E48  0E02               	movlw	2
 23027  015E4A  0100               	movlb	0	; () banked
 23028  015E4C  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 23029                           
 23030                           ;LCD.c: 218: xs+=3;
 23031  015E4E  0E03               	movlw	3
 23032  015E50  0100               	movlb	0	; () banked
 23033  015E52  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 23034                           
 23035                           ;LCD.c: 219: xe+=3;
 23036  015E54  0E03               	movlw	3
 23037  015E56  0100               	movlb	0	; () banked
 23038  015E58  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 23039                           
 23040                           ; BSR set to: 0
 23041                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 23042  015E5A  0E00               	movlw	0
 23043  015E5C  0100               	movlb	0	; () banked
 23044  015E5E  6F63               	movwf	LCD_Write@mode& (0+255),b
 23045  015E60  0E2A               	movlw	42
 23046  015E62  EC7E  F0BE         	call	_LCD_Write
 23047                           
 23048                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 23049  015E66  0E01               	movlw	1
 23050  015E68  0100               	movlb	0	; () banked
 23051  015E6A  6F63               	movwf	LCD_Write@mode& (0+255),b
 23052  015E6C  0E00               	movlw	0
 23053  015E6E  EC7E  F0BE         	call	_LCD_Write
 23054                           
 23055                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 23056  015E72  0E01               	movlw	1
 23057  015E74  0100               	movlb	0	; () banked
 23058  015E76  6F63               	movwf	LCD_Write@mode& (0+255),b
 23059  015E78  0100               	movlb	0	; () banked
 23060  015E7A  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 23061  015E7C  EC7E  F0BE         	call	_LCD_Write
 23062                           
 23063                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 23064  015E80  0E01               	movlw	1
 23065  015E82  0100               	movlb	0	; () banked
 23066  015E84  6F63               	movwf	LCD_Write@mode& (0+255),b
 23067  015E86  0E00               	movlw	0
 23068  015E88  EC7E  F0BE         	call	_LCD_Write
 23069                           
 23070                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 23071  015E8C  0E01               	movlw	1
 23072  015E8E  0100               	movlb	0	; () banked
 23073  015E90  6F63               	movwf	LCD_Write@mode& (0+255),b
 23074  015E92  0100               	movlb	0	; () banked
 23075  015E94  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 23076  015E96  EC7E  F0BE         	call	_LCD_Write
 23077                           
 23078                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 23079  015E9A  0E00               	movlw	0
 23080  015E9C  0100               	movlb	0	; () banked
 23081  015E9E  6F63               	movwf	LCD_Write@mode& (0+255),b
 23082  015EA0  0E2B               	movlw	43
 23083  015EA2  EC7E  F0BE         	call	_LCD_Write
 23084                           
 23085                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 23086  015EA6  0E01               	movlw	1
 23087  015EA8  0100               	movlb	0	; () banked
 23088  015EAA  6F63               	movwf	LCD_Write@mode& (0+255),b
 23089  015EAC  0E00               	movlw	0
 23090  015EAE  EC7E  F0BE         	call	_LCD_Write
 23091                           
 23092                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 23093  015EB2  0E01               	movlw	1
 23094  015EB4  0100               	movlb	0	; () banked
 23095  015EB6  6F63               	movwf	LCD_Write@mode& (0+255),b
 23096  015EB8  0100               	movlb	0	; () banked
 23097  015EBA  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 23098  015EBC  EC7E  F0BE         	call	_LCD_Write
 23099                           
 23100                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 23101  015EC0  0E01               	movlw	1
 23102  015EC2  0100               	movlb	0	; () banked
 23103  015EC4  6F63               	movwf	LCD_Write@mode& (0+255),b
 23104  015EC6  0E00               	movlw	0
 23105  015EC8  EC7E  F0BE         	call	_LCD_Write
 23106                           
 23107                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 23108  015ECC  0E01               	movlw	1
 23109  015ECE  0100               	movlb	0	; () banked
 23110  015ED0  6F63               	movwf	LCD_Write@mode& (0+255),b
 23111  015ED2  0100               	movlb	0	; () banked
 23112  015ED4  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 23113  015ED6  EC7E  F0BE         	call	_LCD_Write
 23114                           
 23115                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 23116  015EDA  0E00               	movlw	0
 23117  015EDC  0100               	movlb	0	; () banked
 23118  015EDE  6F63               	movwf	LCD_Write@mode& (0+255),b
 23119  015EE0  0E2C               	movlw	44
 23120  015EE2  EC7E  F0BE         	call	_LCD_Write
 23121  015EE6  0012               	return		;funcret
 23122  015EE8                     __end_of_Set_Addr_Window:
 23123                           	opt stack 0
 23124                           tosu	equ	0xFFF
 23125                           tosh	equ	0xFFE
 23126                           tosl	equ	0xFFD
 23127                           pclath	equ	0xFFA
 23128                           tblptru	equ	0xFF8
 23129                           tblptrh	equ	0xFF7
 23130                           tblptrl	equ	0xFF6
 23131                           tablat	equ	0xFF5
 23132                           prodh	equ	0xFF4
 23133                           prodl	equ	0xFF3
 23134                           intcon	equ	0xFF2
 23135                           postinc0	equ	0xFEE
 23136                           wreg	equ	0xFE8
 23137                           indf1	equ	0xFE7
 23138                           postdec1	equ	0xFE5
 23139                           fsr1h	equ	0xFE2
 23140                           fsr1l	equ	0xFE1
 23141                           indf2	equ	0xFDF
 23142                           postinc2	equ	0xFDE
 23143                           postdec2	equ	0xFDD
 23144                           plusw2	equ	0xFDB
 23145                           fsr2h	equ	0xFDA
 23146                           fsr2l	equ	0xFD9
 23147                           status	equ	0xFD8
 23148                           
 23149 ;; *************** function _LCD_Word_Write *****************
 23150 ;; Defined at:
 23151 ;;		line 198 in file "Library/LCD.c"
 23152 ;; Parameters:    Size  Location     Type
 23153 ;;  value           2    5[BANK0 ] unsigned short 
 23154 ;; Auto vars:     Size  Location     Type
 23155 ;;		None
 23156 ;; Return value:  Size  Location     Type
 23157 ;;                  1    wreg      void 
 23158 ;; Registers used:
 23159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23160 ;; Tracked objects:
 23161 ;;		On entry : 0/0
 23162 ;;		On exit  : 0/0
 23163 ;;		Unchanged: 0/0
 23164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23165 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23169 ;;Total ram usage:        2 bytes
 23170 ;; Hardware stack levels used:    1
 23171 ;; Hardware stack levels required when called:    9
 23172 ;; This function calls:
 23173 ;;		_LCD_Write
 23174 ;; This function is called by:
 23175 ;;		_LCD_Fill
 23176 ;;		_LCD_FillRectangle
 23177 ;;		_LCD_DrawField
 23178 ;;		_LCD_DrawPixel
 23179 ;; This function uses a non-reentrant model
 23180 ;;
 23181                           
 23182                           	psect	text92
 23183  017DBE                     __ptext92:
 23184                           	opt stack 0
 23185  017DBE                     _LCD_Word_Write:
 23186                           	opt stack 18
 23187                           
 23188                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 23189                           
 23190                           ;incstack = 0
 23191  017DBE  0E01               	movlw	1
 23192  017DC0  0100               	movlb	0	; () banked
 23193  017DC2  6F63               	movwf	LCD_Write@mode& (0+255),b
 23194  017DC4  0100               	movlb	0	; () banked
 23195  017DC6  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 23196  017DC8  EC7E  F0BE         	call	_LCD_Write
 23197                           
 23198                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 23199  017DCC  0E01               	movlw	1
 23200  017DCE  0100               	movlb	0	; () banked
 23201  017DD0  6F63               	movwf	LCD_Write@mode& (0+255),b
 23202  017DD2  0100               	movlb	0	; () banked
 23203  017DD4  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 23204  017DD6  EC7E  F0BE         	call	_LCD_Write
 23205  017DDA  0012               	return		;funcret
 23206  017DDC                     __end_of_LCD_Word_Write:
 23207                           	opt stack 0
 23208                           tosu	equ	0xFFF
 23209                           tosh	equ	0xFFE
 23210                           tosl	equ	0xFFD
 23211                           pclath	equ	0xFFA
 23212                           tblptru	equ	0xFF8
 23213                           tblptrh	equ	0xFF7
 23214                           tblptrl	equ	0xFF6
 23215                           tablat	equ	0xFF5
 23216                           prodh	equ	0xFF4
 23217                           prodl	equ	0xFF3
 23218                           intcon	equ	0xFF2
 23219                           postinc0	equ	0xFEE
 23220                           wreg	equ	0xFE8
 23221                           indf1	equ	0xFE7
 23222                           postdec1	equ	0xFE5
 23223                           fsr1h	equ	0xFE2
 23224                           fsr1l	equ	0xFE1
 23225                           indf2	equ	0xFDF
 23226                           postinc2	equ	0xFDE
 23227                           postdec2	equ	0xFDD
 23228                           plusw2	equ	0xFDB
 23229                           fsr2h	equ	0xFDA
 23230                           fsr2l	equ	0xFD9
 23231                           status	equ	0xFD8
 23232                           
 23233 ;; *************** function _LCD_Write *****************
 23234 ;; Defined at:
 23235 ;;		line 67 in file "Library/LCD.c"
 23236 ;; Parameters:    Size  Location     Type
 23237 ;;  value           1    wreg     unsigned char 
 23238 ;;  mode            1    3[BANK0 ] enum E6761
 23239 ;; Auto vars:     Size  Location     Type
 23240 ;;  value           1    4[BANK0 ] unsigned char 
 23241 ;; Return value:  Size  Location     Type
 23242 ;;                  1    wreg      void 
 23243 ;; Registers used:
 23244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23245 ;; Tracked objects:
 23246 ;;		On entry : 0/0
 23247 ;;		On exit  : 0/0
 23248 ;;		Unchanged: 0/0
 23249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23250 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23253 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23254 ;;Total ram usage:        2 bytes
 23255 ;; Hardware stack levels used:    1
 23256 ;; Hardware stack levels required when called:    8
 23257 ;; This function calls:
 23258 ;;		_Mode_Set
 23259 ;;		_SPI_Send
 23260 ;; This function is called by:
 23261 ;;		_LCD_Init
 23262 ;;		_LCD_Word_Write
 23263 ;;		_Set_Addr_Window
 23264 ;;		_Set_Rotation
 23265 ;;		_LCD_WriteCMD
 23266 ;;		_LCD_WriteData
 23267 ;;		_LCD_Data_Write
 23268 ;;		_LCD_Data_Write_4k
 23269 ;;		_Invert_Display
 23270 ;; This function uses a non-reentrant model
 23271 ;;
 23272                           
 23273                           	psect	text93
 23274  017CFC                     __ptext93:
 23275                           	opt stack 0
 23276  017CFC                     _LCD_Write:
 23277                           	opt stack 18
 23278                           
 23279                           ;incstack = 0
 23280                           ;LCD_Write@value stored from wreg
 23281  017CFC  0100               	movlb	0	; () banked
 23282  017CFE  6F64               	movwf	LCD_Write@value& (0+255),b
 23283                           
 23284                           ;LCD.c: 89: Mode_Set(mode);
 23285  017D00  0100               	movlb	0	; () banked
 23286  017D02  5163               	movf	LCD_Write@mode& (0+255),w,b
 23287  017D04  ECFF  F0BF         	call	_Mode_Set
 23288                           
 23289                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 23290  017D08  0E84               	movlw	low _SPI2
 23291  017D0A  0100               	movlb	0	; () banked
 23292  017D0C  6F60               	movwf	SPI_Send@pInput& (0+255),b
 23293  017D0E  0E03               	movlw	high _SPI2
 23294  017D10  0100               	movlb	0	; () banked
 23295  017D12  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 23296  017D14  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 23297  017D18  EC6B  F0B7         	call	_SPI_Send	;wreg free
 23298  017D1C  0012               	return		;funcret
 23299  017D1E                     __end_of_LCD_Write:
 23300                           	opt stack 0
 23301                           tosu	equ	0xFFF
 23302                           tosh	equ	0xFFE
 23303                           tosl	equ	0xFFD
 23304                           pclath	equ	0xFFA
 23305                           tblptru	equ	0xFF8
 23306                           tblptrh	equ	0xFF7
 23307                           tblptrl	equ	0xFF6
 23308                           tablat	equ	0xFF5
 23309                           prodh	equ	0xFF4
 23310                           prodl	equ	0xFF3
 23311                           intcon	equ	0xFF2
 23312                           postinc0	equ	0xFEE
 23313                           wreg	equ	0xFE8
 23314                           indf1	equ	0xFE7
 23315                           postdec1	equ	0xFE5
 23316                           fsr1h	equ	0xFE2
 23317                           fsr1l	equ	0xFE1
 23318                           indf2	equ	0xFDF
 23319                           postinc2	equ	0xFDE
 23320                           postdec2	equ	0xFDD
 23321                           plusw2	equ	0xFDB
 23322                           fsr2h	equ	0xFDA
 23323                           fsr2l	equ	0xFD9
 23324                           status	equ	0xFD8
 23325                           
 23326 ;; *************** function _SPI_Send *****************
 23327 ;; Defined at:
 23328 ;;		line 226 in file "Library/SPI.c"
 23329 ;; Parameters:    Size  Location     Type
 23330 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 23331 ;;		 -> SPI1(11), SPI2(11), 
 23332 ;;  pData           1    2[BANK0 ] unsigned char 
 23333 ;; Auto vars:     Size  Location     Type
 23334 ;;		None
 23335 ;; Return value:  Size  Location     Type
 23336 ;;                  1    wreg      unsigned char 
 23337 ;; Registers used:
 23338 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23339 ;; Tracked objects:
 23340 ;;		On entry : 0/0
 23341 ;;		On exit  : 0/0
 23342 ;;		Unchanged: 0/0
 23343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23344 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23347 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23348 ;;Total ram usage:        3 bytes
 23349 ;; Hardware stack levels used:    1
 23350 ;; Hardware stack levels required when called:    7
 23351 ;; This function calls:
 23352 ;;		Nothing
 23353 ;; This function is called by:
 23354 ;;		_LCD_Write
 23355 ;;		_OutSeg
 23356 ;; This function uses a non-reentrant model
 23357 ;;
 23358                           
 23359                           	psect	text94
 23360  016ED6                     __ptext94:
 23361                           	opt stack 0
 23362  016ED6                     _SPI_Send:
 23363                           	opt stack 20
 23364                           
 23365                           ;SPI.c: 253: switch (pInput->mChannel)
 23366                           
 23367                           ;incstack = 0
 23368  016ED6  D026               	goto	l678
 23369  016ED8                     
 23370                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 23371  016ED8  C3B1  FFD9         	movff	_PortC+4,fsr2l
 23372  016EDC  C3B2  FFDA         	movff	_PortC+5,fsr2h
 23373  016EE0  0103               	movlb	3	; () banked
 23374  016EE2  94DF               	bcf	indf2,2,c
 23375                           
 23376                           ; BSR set to: 3
 23377                           ;SPI.c: 257: SSP1BUF = pData;
 23378  016EE4  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 23379  016EE8                     
 23380                           ; BSR set to: 3
 23381  016EE8  A0C7               	btfss	4039,0,c	;volatile
 23382  016EEA  D7FE               	goto	l681
 23383                           
 23384                           ;SPI.c: 259: pData = SSP1BUF;
 23385  016EEC  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 23386                           
 23387                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 23388  016EF0  C3B1  FFD9         	movff	_PortC+4,fsr2l
 23389  016EF4  C3B2  FFDA         	movff	_PortC+5,fsr2h
 23390  016EF8  0103               	movlb	3	; () banked
 23391  016EFA  84DF               	bsf	indf2,2,c
 23392                           
 23393                           ; BSR set to: 3
 23394                           ;SPI.c: 261: return pData;
 23395                           ;	Return value of _SPI_Send is never used
 23396  016EFC  0012               	return	
 23397  016EFE                     
 23398                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 23399                           
 23400                           ; BSR set to: 3
 23401  016EFE  C39D  FFD9         	movff	_PortD+4,fsr2l
 23402  016F02  C39E  FFDA         	movff	_PortD+5,fsr2h
 23403  016F06  0103               	movlb	3	; () banked
 23404  016F08  9EDF               	bcf	indf2,7,c
 23405                           
 23406                           ; BSR set to: 3
 23407                           ;SPI.c: 264: SSP2BUF = pData;
 23408  016F0A  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 23409  016F0E                     
 23410                           ; BSR set to: 3
 23411  016F0E  A06D               	btfss	3949,0,c	;volatile
 23412  016F10  D7FE               	goto	l686
 23413                           
 23414                           ;SPI.c: 266: pData = SSP2BUF;
 23415  016F12  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 23416                           
 23417                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 23418  016F16  C39D  FFD9         	movff	_PortD+4,fsr2l
 23419  016F1A  C39E  FFDA         	movff	_PortD+5,fsr2h
 23420  016F1E  0103               	movlb	3	; () banked
 23421  016F20  8EDF               	bsf	indf2,7,c
 23422                           
 23423                           ; BSR set to: 3
 23424                           ;SPI.c: 269: };
 23425                           
 23426                           ; BSR set to: 3
 23427                           ;SPI.c: 268: return pData;
 23428                           ;	Return value of _SPI_Send is never used
 23429  016F22  0012               	return	
 23430  016F24                     l678:
 23431                           
 23432                           ; BSR set to: 3
 23433  016F24  0100               	movlb	0	; () banked
 23434  016F26  EE20 F002          	lfsr	2,2
 23435  016F2A  5160               	movf	SPI_Send@pInput& (0+255),w,b
 23436  016F2C  26D9               	addwf	fsr2l,f,c
 23437  016F2E  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 23438  016F30  22DA               	addwfc	fsr2h,f,c
 23439  016F32  50DF               	movf	indf2,w,c
 23440                           
 23441                           ; Switch size 1, requested type "space"
 23442                           ; Number of cases is 2, Range of values is 0 to 1
 23443                           ; switch strategies available:
 23444                           ; Name         Instructions Cycles
 23445                           ; simple_byte            7     4 (average)
 23446                           ;	Chosen strategy is simple_byte
 23447  016F34  0A00               	xorlw	0	; case 0
 23448  016F36  B4D8               	btfsc	status,2,c
 23449  016F38  D7CF               	goto	l679
 23450  016F3A  0A01               	xorlw	1	; case 1
 23451  016F3C  A4D8               	btfss	status,2,c
 23452  016F3E  0012               	return	
 23453  016F40  D7DE               	goto	l684
 23454  016F42                     __end_of_SPI_Send:
 23455                           	opt stack 0
 23456                           tosu	equ	0xFFF
 23457                           tosh	equ	0xFFE
 23458                           tosl	equ	0xFFD
 23459                           pclath	equ	0xFFA
 23460                           tblptru	equ	0xFF8
 23461                           tblptrh	equ	0xFF7
 23462                           tblptrl	equ	0xFF6
 23463                           tablat	equ	0xFF5
 23464                           prodh	equ	0xFF4
 23465                           prodl	equ	0xFF3
 23466                           intcon	equ	0xFF2
 23467                           postinc0	equ	0xFEE
 23468                           wreg	equ	0xFE8
 23469                           indf1	equ	0xFE7
 23470                           postdec1	equ	0xFE5
 23471                           fsr1h	equ	0xFE2
 23472                           fsr1l	equ	0xFE1
 23473                           indf2	equ	0xFDF
 23474                           postinc2	equ	0xFDE
 23475                           postdec2	equ	0xFDD
 23476                           plusw2	equ	0xFDB
 23477                           fsr2h	equ	0xFDA
 23478                           fsr2l	equ	0xFD9
 23479                           status	equ	0xFD8
 23480                           
 23481 ;; *************** function _Mode_Set *****************
 23482 ;; Defined at:
 23483 ;;		line 40 in file "Library/LCD.c"
 23484 ;; Parameters:    Size  Location     Type
 23485 ;;  pMode           1    wreg     enum E6761
 23486 ;; Auto vars:     Size  Location     Type
 23487 ;;  pMode           1    0[BANK0 ] enum E6761
 23488 ;; Return value:  Size  Location     Type
 23489 ;;                  1    wreg      void 
 23490 ;; Registers used:
 23491 ;;		wreg
 23492 ;; Tracked objects:
 23493 ;;		On entry : 0/0
 23494 ;;		On exit  : 0/0
 23495 ;;		Unchanged: 0/0
 23496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23498 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23500 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23501 ;;Total ram usage:        1 bytes
 23502 ;; Hardware stack levels used:    1
 23503 ;; Hardware stack levels required when called:    7
 23504 ;; This function calls:
 23505 ;;		Nothing
 23506 ;; This function is called by:
 23507 ;;		_LCD_Write
 23508 ;; This function uses a non-reentrant model
 23509 ;;
 23510                           
 23511                           	psect	text95
 23512  017FFE                     __ptext95:
 23513                           	opt stack 0
 23514  017FFE                     _Mode_Set:
 23515                           	opt stack 18
 23516                           
 23517                           ;incstack = 0
 23518                           ;Mode_Set@pMode stored from wreg
 23519  017FFE  0100               	movlb	0	; () banked
 23520  018000  6F60               	movwf	Mode_Set@pMode& (0+255),b
 23521                           
 23522                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 23523  018002  0100               	movlb	0	; () banked
 23524  018004  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 23525  018006  D002               	bra	u10985
 23526  018008  9E85               	bcf	3973,7,c	;volatile
 23527  01800A  D001               	bra	u10986
 23528  01800C                     u10985:
 23529  01800C  8E85               	bsf	3973,7,c	;volatile
 23530  01800E                     u10986:
 23531  01800E  0012               	return		;funcret
 23532  018010                     __end_of_Mode_Set:
 23533                           	opt stack 0
 23534                           tosu	equ	0xFFF
 23535                           tosh	equ	0xFFE
 23536                           tosl	equ	0xFFD
 23537                           pclath	equ	0xFFA
 23538                           tblptru	equ	0xFF8
 23539                           tblptrh	equ	0xFF7
 23540                           tblptrl	equ	0xFF6
 23541                           tablat	equ	0xFF5
 23542                           prodh	equ	0xFF4
 23543                           prodl	equ	0xFF3
 23544                           intcon	equ	0xFF2
 23545                           postinc0	equ	0xFEE
 23546                           wreg	equ	0xFE8
 23547                           indf1	equ	0xFE7
 23548                           postdec1	equ	0xFE5
 23549                           fsr1h	equ	0xFE2
 23550                           fsr1l	equ	0xFE1
 23551                           indf2	equ	0xFDF
 23552                           postinc2	equ	0xFDE
 23553                           postdec2	equ	0xFDD
 23554                           plusw2	equ	0xFDB
 23555                           fsr2h	equ	0xFDA
 23556                           fsr2l	equ	0xFD9
 23557                           status	equ	0xFD8
 23558                           
 23559 ;; *************** function _Configure_GPIOs *****************
 23560 ;; Defined at:
 23561 ;;		line 46 in file "Library/LCD.c"
 23562 ;; Parameters:    Size  Location     Type
 23563 ;;		None
 23564 ;; Auto vars:     Size  Location     Type
 23565 ;;		None
 23566 ;; Return value:  Size  Location     Type
 23567 ;;                  1    wreg      void 
 23568 ;; Registers used:
 23569 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23570 ;; Tracked objects:
 23571 ;;		On entry : 0/0
 23572 ;;		On exit  : 0/0
 23573 ;;		Unchanged: 0/0
 23574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23579 ;;Total ram usage:        0 bytes
 23580 ;; Hardware stack levels used:    1
 23581 ;; Hardware stack levels required when called:   14
 23582 ;; This function calls:
 23583 ;;		_LCD_Reset
 23584 ;;		_Port_SetPinType
 23585 ;;		_SPI_Init
 23586 ;;		_SPI_MaxSpeed
 23587 ;; This function is called by:
 23588 ;;		_LCD_Init
 23589 ;; This function uses a non-reentrant model
 23590 ;;
 23591                           
 23592                           	psect	text96
 23593  016E66                     __ptext96:
 23594                           	opt stack 0
 23595  016E66                     _Configure_GPIOs:
 23596                           	opt stack 14
 23597                           
 23598                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 23599                           
 23600                           ;incstack = 0
 23601  016E66  0EB7               	movlw	low _PortF
 23602  016E68  0100               	movlb	0	; () banked
 23603  016E6A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23604  016E6C  0E03               	movlw	high _PortF
 23605  016E6E  0100               	movlb	0	; () banked
 23606  016E70  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23607  016E72  0E07               	movlw	7
 23608  016E74  0100               	movlb	0	; () banked
 23609  016E76  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23610  016E78  0E03               	movlw	3
 23611  016E7A  0100               	movlb	0	; () banked
 23612  016E7C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23613  016E7E  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 23614                           
 23615                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 23616  016E82  0EB7               	movlw	low _PortF
 23617  016E84  0100               	movlb	0	; () banked
 23618  016E86  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23619  016E88  0E03               	movlw	high _PortF
 23620  016E8A  0100               	movlb	0	; () banked
 23621  016E8C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23622  016E8E  0E06               	movlw	6
 23623  016E90  0100               	movlb	0	; () banked
 23624  016E92  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23625  016E94  0E03               	movlw	3
 23626  016E96  0100               	movlb	0	; () banked
 23627  016E98  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23628  016E9A  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 23629                           
 23630                           ;LCD.c: 55: LCD_Reset();
 23631  016E9E  EC74  F0BA         	call	_LCD_Reset	;wreg free
 23632                           
 23633                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 23634  016EA2  0EC0               	movlw	192
 23635  016EA4  0100               	movlb	0	; () banked
 23636  016EA6  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 23637  016EA8  0EC6               	movlw	198
 23638  016EAA  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 23639  016EAC  0E2D               	movlw	45
 23640  016EAE  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 23641  016EB0  0E00               	movlw	0
 23642  016EB2  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 23643  016EB4  0E01               	movlw	1
 23644  016EB6  0100               	movlb	0	; () banked
 23645  016EB8  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 23646  016EBA  0E01               	movlw	1
 23647  016EBC  0100               	movlb	0	; () banked
 23648  016EBE  6F92               	movwf	SPI_Init@pMode& (0+255),b
 23649  016EC0  ECDA  F08D         	call	_SPI_Init	;wreg free
 23650                           
 23651                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 23652  016EC4  0E84               	movlw	low _SPI2
 23653  016EC6  0100               	movlb	0	; () banked
 23654  016EC8  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 23655  016ECA  0E03               	movlw	high _SPI2
 23656  016ECC  0100               	movlb	0	; () banked
 23657  016ECE  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 23658  016ED0  EC85  F0B6         	call	_SPI_MaxSpeed	;wreg free
 23659  016ED4  0012               	return		;funcret
 23660  016ED6                     __end_of_Configure_GPIOs:
 23661                           	opt stack 0
 23662                           tosu	equ	0xFFF
 23663                           tosh	equ	0xFFE
 23664                           tosl	equ	0xFFD
 23665                           pclath	equ	0xFFA
 23666                           tblptru	equ	0xFF8
 23667                           tblptrh	equ	0xFF7
 23668                           tblptrl	equ	0xFF6
 23669                           tablat	equ	0xFF5
 23670                           prodh	equ	0xFF4
 23671                           prodl	equ	0xFF3
 23672                           intcon	equ	0xFF2
 23673                           postinc0	equ	0xFEE
 23674                           wreg	equ	0xFE8
 23675                           indf1	equ	0xFE7
 23676                           postdec1	equ	0xFE5
 23677                           fsr1h	equ	0xFE2
 23678                           fsr1l	equ	0xFE1
 23679                           indf2	equ	0xFDF
 23680                           postinc2	equ	0xFDE
 23681                           postdec2	equ	0xFDD
 23682                           plusw2	equ	0xFDB
 23683                           fsr2h	equ	0xFDA
 23684                           fsr2l	equ	0xFD9
 23685                           status	equ	0xFD8
 23686                           
 23687 ;; *************** function _SPI_MaxSpeed *****************
 23688 ;; Defined at:
 23689 ;;		line 201 in file "Library/SPI.c"
 23690 ;; Parameters:    Size  Location     Type
 23691 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 23692 ;;		 -> SPI2(11), 
 23693 ;; Auto vars:     Size  Location     Type
 23694 ;;		None
 23695 ;; Return value:  Size  Location     Type
 23696 ;;                  1    wreg      void 
 23697 ;; Registers used:
 23698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23699 ;; Tracked objects:
 23700 ;;		On entry : 0/0
 23701 ;;		On exit  : 0/0
 23702 ;;		Unchanged: 0/0
 23703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23704 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23708 ;;Total ram usage:        2 bytes
 23709 ;; Hardware stack levels used:    1
 23710 ;; Hardware stack levels required when called:    9
 23711 ;; This function calls:
 23712 ;;		_Byte_SetBit
 23713 ;;		_Byte_SetQuad
 23714 ;; This function is called by:
 23715 ;;		_Configure_GPIOs
 23716 ;; This function uses a non-reentrant model
 23717 ;;
 23718                           
 23719                           	psect	text97
 23720  016D0A                     __ptext97:
 23721                           	opt stack 0
 23722  016D0A                     _SPI_MaxSpeed:
 23723                           	opt stack 18
 23724                           
 23725                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 23726                           
 23727                           ;incstack = 0
 23728  016D0A  0100               	movlb	0	; () banked
 23729  016D0C  EE20 F006          	lfsr	2,6
 23730  016D10  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 23731  016D12  26D9               	addwf	fsr2l,f,c
 23732  016D14  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 23733  016D16  22DA               	addwfc	fsr2h,f,c
 23734  016D18  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23735  016D1C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23736  016D20  0E05               	movlw	5
 23737  016D22  0100               	movlb	0	; () banked
 23738  016D24  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23739  016D26  0E00               	movlw	0
 23740  016D28  0100               	movlb	0	; () banked
 23741  016D2A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23742  016D2C  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 23743                           
 23744                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 23745  016D30  0100               	movlb	0	; () banked
 23746  016D32  EE20 F006          	lfsr	2,6
 23747  016D36  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 23748  016D38  26D9               	addwf	fsr2l,f,c
 23749  016D3A  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 23750  016D3C  22DA               	addwfc	fsr2h,f,c
 23751  016D3E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 23752  016D42  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 23753  016D46  0E00               	movlw	0
 23754  016D48  0100               	movlb	0	; () banked
 23755  016D4A  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 23756  016D4C  0E00               	movlw	0
 23757  016D4E  0100               	movlb	0	; () banked
 23758  016D50  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 23759  016D52  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 23760                           
 23761                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 23762  016D56  0100               	movlb	0	; () banked
 23763  016D58  EE20 F006          	lfsr	2,6
 23764  016D5C  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 23765  016D5E  26D9               	addwf	fsr2l,f,c
 23766  016D60  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 23767  016D62  22DA               	addwfc	fsr2h,f,c
 23768  016D64  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23769  016D68  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23770  016D6C  0E05               	movlw	5
 23771  016D6E  0100               	movlb	0	; () banked
 23772  016D70  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23773  016D72  0E01               	movlw	1
 23774  016D74  0100               	movlb	0	; () banked
 23775  016D76  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23776  016D78  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 23777  016D7C  0012               	return		;funcret
 23778  016D7E                     __end_of_SPI_MaxSpeed:
 23779                           	opt stack 0
 23780                           tosu	equ	0xFFF
 23781                           tosh	equ	0xFFE
 23782                           tosl	equ	0xFFD
 23783                           pclath	equ	0xFFA
 23784                           tblptru	equ	0xFF8
 23785                           tblptrh	equ	0xFF7
 23786                           tblptrl	equ	0xFF6
 23787                           tablat	equ	0xFF5
 23788                           prodh	equ	0xFF4
 23789                           prodl	equ	0xFF3
 23790                           intcon	equ	0xFF2
 23791                           postinc0	equ	0xFEE
 23792                           wreg	equ	0xFE8
 23793                           indf1	equ	0xFE7
 23794                           postdec1	equ	0xFE5
 23795                           fsr1h	equ	0xFE2
 23796                           fsr1l	equ	0xFE1
 23797                           indf2	equ	0xFDF
 23798                           postinc2	equ	0xFDE
 23799                           postdec2	equ	0xFDD
 23800                           plusw2	equ	0xFDB
 23801                           fsr2h	equ	0xFDA
 23802                           fsr2l	equ	0xFD9
 23803                           status	equ	0xFD8
 23804                           
 23805 ;; *************** function _LCD_Reset *****************
 23806 ;; Defined at:
 23807 ;;		line 95 in file "Library/LCD.c"
 23808 ;; Parameters:    Size  Location     Type
 23809 ;;		None
 23810 ;; Auto vars:     Size  Location     Type
 23811 ;;		None
 23812 ;; Return value:  Size  Location     Type
 23813 ;;                  1    wreg      void 
 23814 ;; Registers used:
 23815 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23816 ;; Tracked objects:
 23817 ;;		On entry : 0/0
 23818 ;;		On exit  : 0/0
 23819 ;;		Unchanged: 0/0
 23820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23825 ;;Total ram usage:        0 bytes
 23826 ;; Hardware stack levels used:    1
 23827 ;; Hardware stack levels required when called:   13
 23828 ;; This function calls:
 23829 ;;		_LED_Toggle
 23830 ;;		_Reset_High
 23831 ;;		_Reset_Low
 23832 ;;		_delay_ms
 23833 ;; This function is called by:
 23834 ;;		_Configure_GPIOs
 23835 ;; This function uses a non-reentrant model
 23836 ;;
 23837                           
 23838                           	psect	text98
 23839  0174E8                     __ptext98:
 23840                           	opt stack 0
 23841  0174E8                     _LCD_Reset:
 23842                           	opt stack 14
 23843                           
 23844                           ;LCD.c: 97: Reset_High();
 23845                           
 23846                           ;incstack = 0
 23847  0174E8  ECFD  F0BE         	call	_Reset_High	;wreg free
 23848                           
 23849                           ;LCD.c: 98: LED_Toggle(eLED2);
 23850  0174EC  0E01               	movlw	1
 23851  0174EE  EC53  F0BB         	call	_LED_Toggle
 23852                           
 23853                           ;LCD.c: 99: delay_ms(0x80);
 23854  0174F2  0E00               	movlw	0
 23855  0174F4  0100               	movlb	0	; () banked
 23856  0174F6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 23857  0174F8  0E80               	movlw	128
 23858  0174FA  6F60               	movwf	delay_ms@ms& (0+255),b
 23859  0174FC  EC0C  F0B8         	call	_delay_ms	;wreg free
 23860                           
 23861                           ;LCD.c: 100: LED_Toggle(eLED2);
 23862  017500  0E01               	movlw	1
 23863  017502  EC53  F0BB         	call	_LED_Toggle
 23864                           
 23865                           ;LCD.c: 101: Reset_Low();
 23866  017506  ECEE  F0BE         	call	_Reset_Low	;wreg free
 23867                           
 23868                           ;LCD.c: 102: delay_ms(0x80);
 23869  01750A  0E00               	movlw	0
 23870  01750C  0100               	movlb	0	; () banked
 23871  01750E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 23872  017510  0E80               	movlw	128
 23873  017512  6F60               	movwf	delay_ms@ms& (0+255),b
 23874  017514  EC0C  F0B8         	call	_delay_ms	;wreg free
 23875                           
 23876                           ;LCD.c: 103: LED_Toggle(eLED2);
 23877  017518  0E01               	movlw	1
 23878  01751A  EC53  F0BB         	call	_LED_Toggle
 23879                           
 23880                           ;LCD.c: 104: Reset_High();
 23881  01751E  ECFD  F0BE         	call	_Reset_High	;wreg free
 23882                           
 23883                           ;LCD.c: 105: delay_ms(0x80);
 23884  017522  0E00               	movlw	0
 23885  017524  0100               	movlb	0	; () banked
 23886  017526  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 23887  017528  0E80               	movlw	128
 23888  01752A  6F60               	movwf	delay_ms@ms& (0+255),b
 23889  01752C  EC0C  F0B8         	call	_delay_ms	;wreg free
 23890                           
 23891                           ;LCD.c: 106: LED_Toggle(eLED2);
 23892  017530  0E01               	movlw	1
 23893  017532  EC53  F0BB         	call	_LED_Toggle
 23894  017536  0012               	return		;funcret
 23895  017538                     __end_of_LCD_Reset:
 23896                           	opt stack 0
 23897                           tosu	equ	0xFFF
 23898                           tosh	equ	0xFFE
 23899                           tosl	equ	0xFFD
 23900                           pclath	equ	0xFFA
 23901                           tblptru	equ	0xFF8
 23902                           tblptrh	equ	0xFF7
 23903                           tblptrl	equ	0xFF6
 23904                           tablat	equ	0xFF5
 23905                           prodh	equ	0xFF4
 23906                           prodl	equ	0xFF3
 23907                           intcon	equ	0xFF2
 23908                           postinc0	equ	0xFEE
 23909                           wreg	equ	0xFE8
 23910                           indf1	equ	0xFE7
 23911                           postdec1	equ	0xFE5
 23912                           fsr1h	equ	0xFE2
 23913                           fsr1l	equ	0xFE1
 23914                           indf2	equ	0xFDF
 23915                           postinc2	equ	0xFDE
 23916                           postdec2	equ	0xFDD
 23917                           plusw2	equ	0xFDB
 23918                           fsr2h	equ	0xFDA
 23919                           fsr2l	equ	0xFD9
 23920                           status	equ	0xFD8
 23921                           
 23922 ;; *************** function _delay_ms *****************
 23923 ;; Defined at:
 23924 ;;		line 240 in file "Library/Types.c"
 23925 ;; Parameters:    Size  Location     Type
 23926 ;;  ms              2    0[BANK0 ] unsigned short 
 23927 ;; Auto vars:     Size  Location     Type
 23928 ;;  u               4    2[BANK0 ] volatile unsigned long 
 23929 ;; Return value:  Size  Location     Type
 23930 ;;                  1    wreg      void 
 23931 ;; Registers used:
 23932 ;;		wreg, status,2, status,0
 23933 ;; Tracked objects:
 23934 ;;		On entry : 0/0
 23935 ;;		On exit  : 0/0
 23936 ;;		Unchanged: 0/0
 23937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23938 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23939 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23941 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23942 ;;Total ram usage:        6 bytes
 23943 ;; Hardware stack levels used:    1
 23944 ;; Hardware stack levels required when called:    7
 23945 ;; This function calls:
 23946 ;;		Nothing
 23947 ;; This function is called by:
 23948 ;;		_LCD_Reset
 23949 ;;		_LCD_Init
 23950 ;;		_MXK_Init
 23951 ;;		_init
 23952 ;;		_move_and_rotate
 23953 ;; This function uses a non-reentrant model
 23954 ;;
 23955                           
 23956                           	psect	text99
 23957  017018                     __ptext99:
 23958                           	opt stack 0
 23959  017018                     _delay_ms:
 23960                           	opt stack 21
 23961                           
 23962                           ;Types.c: 242: volatile unsigned long u;
 23963                           ;Types.c: 243: while (ms--)
 23964                           
 23965                           ;incstack = 0
 23966  017018  D01F               	goto	u11320
 23967  01701A                     l13996:
 23968                           
 23969                           ;Types.c: 244: {
 23970                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 23971  01701A  0E00               	movlw	0
 23972  01701C  0100               	movlb	0	; () banked
 23973  01701E  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 23974  017020  0E00               	movlw	0
 23975  017022  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 23976  017024  0E00               	movlw	0
 23977  017026  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 23978  017028  0E00               	movlw	0
 23979  01702A  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 23980  01702C                     l13998:
 23981                           
 23982                           ; BSR set to: 0
 23983  01702C  0100               	movlb	0	; () banked
 23984  01702E  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 23985  017030  0100               	movlb	0	; () banked
 23986  017032  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 23987  017034  E111               	bnz	l14004
 23988  017036  0EB0               	movlw	176
 23989  017038  0100               	movlb	0	; () banked
 23990  01703A  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 23991  01703C  0E04               	movlw	4
 23992  01703E  0100               	movlb	0	; () banked
 23993  017040  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 23994  017042  B0D8               	btfsc	status,0,c
 23995  017044  D009               	goto	u11320
 23996                           
 23997                           ; BSR set to: 0
 23998                           
 23999                           ; BSR set to: 0
 24000  017046  F000               	nop		; ;# 
 24001  017048  0E01               	movlw	1
 24002  01704A  0100               	movlb	0	; () banked
 24003  01704C  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 24004  01704E  0E00               	movlw	0
 24005  017050  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 24006  017052  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 24007  017054  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 24008  017056  D7EA               	goto	l13998
 24009  017058                     u11320:
 24010  017058                     l14004:
 24011  017058  0100               	movlb	0	; () banked
 24012  01705A  0760               	decf	delay_ms@ms& (0+255),f,b
 24013  01705C  A0D8               	btfss	status,0,c
 24014  01705E  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 24015  017060  0100               	movlb	0	; () banked
 24016  017062  2960               	incf	delay_ms@ms& (0+255),w,b
 24017  017064  E1DA               	bnz	l13996
 24018  017066  0100               	movlb	0	; () banked
 24019  017068  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 24020  01706A  A4D8               	btfss	status,2,c
 24021  01706C  D7D6               	goto	l824
 24022                           
 24023                           ; BSR set to: 0
 24024                           ;Types.c: 251: }
 24025                           ;Types.c: 252: }
 24026                           ;Types.c: 253: u = 0x8008;
 24027                           
 24028                           ; BSR set to: 0
 24029  01706E  0E08               	movlw	8
 24030  017070  0100               	movlb	0	; () banked
 24031  017072  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 24032  017074  0E80               	movlw	128
 24033  017076  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 24034  017078  0E00               	movlw	0
 24035  01707A  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 24036  01707C  0E00               	movlw	0
 24037  01707E  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 24038                           
 24039                           ; BSR set to: 0
 24040  017080  0012               	return		;funcret
 24041  017082                     __end_of_delay_ms:
 24042                           	opt stack 0
 24043                           tosu	equ	0xFFF
 24044                           tosh	equ	0xFFE
 24045                           tosl	equ	0xFFD
 24046                           pclath	equ	0xFFA
 24047                           tblptru	equ	0xFF8
 24048                           tblptrh	equ	0xFF7
 24049                           tblptrl	equ	0xFF6
 24050                           tablat	equ	0xFF5
 24051                           prodh	equ	0xFF4
 24052                           prodl	equ	0xFF3
 24053                           intcon	equ	0xFF2
 24054                           postinc0	equ	0xFEE
 24055                           wreg	equ	0xFE8
 24056                           indf1	equ	0xFE7
 24057                           postdec1	equ	0xFE5
 24058                           fsr1h	equ	0xFE2
 24059                           fsr1l	equ	0xFE1
 24060                           indf2	equ	0xFDF
 24061                           postinc2	equ	0xFDE
 24062                           postdec2	equ	0xFDD
 24063                           plusw2	equ	0xFDB
 24064                           fsr2h	equ	0xFDA
 24065                           fsr2l	equ	0xFD9
 24066                           status	equ	0xFD8
 24067                           
 24068 ;; *************** function _Reset_Low *****************
 24069 ;; Defined at:
 24070 ;;		line 32 in file "Library/LCD.c"
 24071 ;; Parameters:    Size  Location     Type
 24072 ;;		None
 24073 ;; Auto vars:     Size  Location     Type
 24074 ;;		None
 24075 ;; Return value:  Size  Location     Type
 24076 ;;                  1    wreg      void 
 24077 ;; Registers used:
 24078 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24079 ;; Tracked objects:
 24080 ;;		On entry : 0/0
 24081 ;;		On exit  : 0/0
 24082 ;;		Unchanged: 0/0
 24083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24088 ;;Total ram usage:        0 bytes
 24089 ;; Hardware stack levels used:    1
 24090 ;; Hardware stack levels required when called:   11
 24091 ;; This function calls:
 24092 ;;		_Port_SetPin
 24093 ;; This function is called by:
 24094 ;;		_LCD_Reset
 24095 ;; This function uses a non-reentrant model
 24096 ;;
 24097                           
 24098                           	psect	text100
 24099  017DDC                     __ptext100:
 24100                           	opt stack 0
 24101  017DDC                     _Reset_Low:
 24102                           	opt stack 15
 24103                           
 24104                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 24105                           
 24106                           ; BSR set to: 0
 24107                           ;incstack = 0
 24108  017DDC  0EB7               	movlw	low _PortF
 24109  017DDE  0100               	movlb	0	; () banked
 24110  017DE0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 24111  017DE2  0E03               	movlw	high _PortF
 24112  017DE4  0100               	movlb	0	; () banked
 24113  017DE6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 24114  017DE8  0E06               	movlw	6
 24115  017DEA  0100               	movlb	0	; () banked
 24116  017DEC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 24117  017DEE  0E01               	movlw	1
 24118  017DF0  0100               	movlb	0	; () banked
 24119  017DF2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 24120  017DF4  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 24121  017DF8  0012               	return		;funcret
 24122  017DFA                     __end_of_Reset_Low:
 24123                           	opt stack 0
 24124                           tosu	equ	0xFFF
 24125                           tosh	equ	0xFFE
 24126                           tosl	equ	0xFFD
 24127                           pclath	equ	0xFFA
 24128                           tblptru	equ	0xFF8
 24129                           tblptrh	equ	0xFF7
 24130                           tblptrl	equ	0xFF6
 24131                           tablat	equ	0xFF5
 24132                           prodh	equ	0xFF4
 24133                           prodl	equ	0xFF3
 24134                           intcon	equ	0xFF2
 24135                           postinc0	equ	0xFEE
 24136                           wreg	equ	0xFE8
 24137                           indf1	equ	0xFE7
 24138                           postdec1	equ	0xFE5
 24139                           fsr1h	equ	0xFE2
 24140                           fsr1l	equ	0xFE1
 24141                           indf2	equ	0xFDF
 24142                           postinc2	equ	0xFDE
 24143                           postdec2	equ	0xFDD
 24144                           plusw2	equ	0xFDB
 24145                           fsr2h	equ	0xFDA
 24146                           fsr2l	equ	0xFD9
 24147                           status	equ	0xFD8
 24148                           
 24149 ;; *************** function _Reset_High *****************
 24150 ;; Defined at:
 24151 ;;		line 36 in file "Library/LCD.c"
 24152 ;; Parameters:    Size  Location     Type
 24153 ;;		None
 24154 ;; Auto vars:     Size  Location     Type
 24155 ;;		None
 24156 ;; Return value:  Size  Location     Type
 24157 ;;                  1    wreg      void 
 24158 ;; Registers used:
 24159 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24160 ;; Tracked objects:
 24161 ;;		On entry : 0/0
 24162 ;;		On exit  : 0/0
 24163 ;;		Unchanged: 0/0
 24164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24169 ;;Total ram usage:        0 bytes
 24170 ;; Hardware stack levels used:    1
 24171 ;; Hardware stack levels required when called:   11
 24172 ;; This function calls:
 24173 ;;		_Port_SetPin
 24174 ;; This function is called by:
 24175 ;;		_LCD_Reset
 24176 ;; This function uses a non-reentrant model
 24177 ;;
 24178                           
 24179                           	psect	text101
 24180  017DFA                     __ptext101:
 24181                           	opt stack 0
 24182  017DFA                     _Reset_High:
 24183                           	opt stack 15
 24184                           
 24185                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 24186                           
 24187                           ;incstack = 0
 24188  017DFA  0EB7               	movlw	low _PortF
 24189  017DFC  0100               	movlb	0	; () banked
 24190  017DFE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 24191  017E00  0E03               	movlw	high _PortF
 24192  017E02  0100               	movlb	0	; () banked
 24193  017E04  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 24194  017E06  0E06               	movlw	6
 24195  017E08  0100               	movlb	0	; () banked
 24196  017E0A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 24197  017E0C  0E00               	movlw	0
 24198  017E0E  0100               	movlb	0	; () banked
 24199  017E10  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 24200  017E12  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 24201  017E16  0012               	return		;funcret
 24202  017E18                     __end_of_Reset_High:
 24203                           	opt stack 0
 24204                           tosu	equ	0xFFF
 24205                           tosh	equ	0xFFE
 24206                           tosl	equ	0xFFD
 24207                           pclath	equ	0xFFA
 24208                           tblptru	equ	0xFF8
 24209                           tblptrh	equ	0xFF7
 24210                           tblptrl	equ	0xFF6
 24211                           tablat	equ	0xFF5
 24212                           prodh	equ	0xFF4
 24213                           prodl	equ	0xFF3
 24214                           intcon	equ	0xFF2
 24215                           postinc0	equ	0xFEE
 24216                           wreg	equ	0xFE8
 24217                           indf1	equ	0xFE7
 24218                           postdec1	equ	0xFE5
 24219                           fsr1h	equ	0xFE2
 24220                           fsr1l	equ	0xFE1
 24221                           indf2	equ	0xFDF
 24222                           postinc2	equ	0xFDE
 24223                           postdec2	equ	0xFDD
 24224                           plusw2	equ	0xFDB
 24225                           fsr2h	equ	0xFDA
 24226                           fsr2l	equ	0xFD9
 24227                           status	equ	0xFD8
 24228                           
 24229 ;; *************** function _ISR_Enable *****************
 24230 ;; Defined at:
 24231 ;;		line 27 in file "Library/ISR.c"
 24232 ;; Parameters:    Size  Location     Type
 24233 ;;		None
 24234 ;; Auto vars:     Size  Location     Type
 24235 ;;		None
 24236 ;; Return value:  Size  Location     Type
 24237 ;;                  1    wreg      void 
 24238 ;; Registers used:
 24239 ;;		None
 24240 ;; Tracked objects:
 24241 ;;		On entry : 0/0
 24242 ;;		On exit  : 0/0
 24243 ;;		Unchanged: 0/0
 24244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24249 ;;Total ram usage:        0 bytes
 24250 ;; Hardware stack levels used:    1
 24251 ;; Hardware stack levels required when called:    7
 24252 ;; This function calls:
 24253 ;;		Nothing
 24254 ;; This function is called by:
 24255 ;;		_init
 24256 ;; This function uses a non-reentrant model
 24257 ;;
 24258                           
 24259                           	psect	text102
 24260  0180A6                     __ptext102:
 24261                           	opt stack 0
 24262  0180A6                     _ISR_Enable:
 24263                           	opt stack 22
 24264                           
 24265                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 24266                           
 24267                           ;incstack = 0
 24268  0180A6  8CF2               	bsf	intcon,6,c	;volatile
 24269                           
 24270                           ;ISR.c: 30: INTCONbits.GIE = 1;
 24271  0180A8  8EF2               	bsf	intcon,7,c	;volatile
 24272                           
 24273                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 24274  0180AA  88F2               	bsf	intcon,4,c	;volatile
 24275                           
 24276                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 24277  0180AC  92F2               	bcf	intcon,1,c	;volatile
 24278  0180AE  0012               	return		;funcret
 24279  0180B0                     __end_of_ISR_Enable:
 24280                           	opt stack 0
 24281                           tosu	equ	0xFFF
 24282                           tosh	equ	0xFFE
 24283                           tosl	equ	0xFFD
 24284                           pclath	equ	0xFFA
 24285                           tblptru	equ	0xFF8
 24286                           tblptrh	equ	0xFF7
 24287                           tblptrl	equ	0xFF6
 24288                           tablat	equ	0xFF5
 24289                           prodh	equ	0xFF4
 24290                           prodl	equ	0xFF3
 24291                           intcon	equ	0xFF2
 24292                           postinc0	equ	0xFEE
 24293                           wreg	equ	0xFE8
 24294                           indf1	equ	0xFE7
 24295                           postdec1	equ	0xFE5
 24296                           fsr1h	equ	0xFE2
 24297                           fsr1l	equ	0xFE1
 24298                           indf2	equ	0xFDF
 24299                           postinc2	equ	0xFDE
 24300                           postdec2	equ	0xFDD
 24301                           plusw2	equ	0xFDB
 24302                           fsr2h	equ	0xFDA
 24303                           fsr2l	equ	0xFD9
 24304                           status	equ	0xFD8
 24305                           
 24306 ;; *************** function _HMI_Init *****************
 24307 ;; Defined at:
 24308 ;;		line 104 in file "HMI.c"
 24309 ;; Parameters:    Size  Location     Type
 24310 ;;		None
 24311 ;; Auto vars:     Size  Location     Type
 24312 ;;  in              2   72[BANK0 ] unsigned short 
 24313 ;; Return value:  Size  Location     Type
 24314 ;;                  1    wreg      void 
 24315 ;; Registers used:
 24316 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24317 ;; Tracked objects:
 24318 ;;		On entry : 0/0
 24319 ;;		On exit  : 0/0
 24320 ;;		Unchanged: 0/0
 24321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24323 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24325 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24326 ;;Total ram usage:        2 bytes
 24327 ;; Hardware stack levels used:    1
 24328 ;; Hardware stack levels required when called:   16
 24329 ;; This function calls:
 24330 ;;		_Button_Init
 24331 ;;		_SPI_Init
 24332 ;;		_SPI_MinSpeed
 24333 ;; This function is called by:
 24334 ;;		_init
 24335 ;; This function uses a non-reentrant model
 24336 ;;
 24337                           
 24338                           	psect	text103
 24339  013754                     __ptext103:
 24340                           	opt stack 0
 24341  013754                     _HMI_Init:
 24342                           	opt stack 13
 24343                           
 24344                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 24345                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 24346                           
 24347                           ;incstack = 0
 24348  013754  0E6F               	movlw	low (_HMIBoard+48)
 24349  013756  0100               	movlb	0	; () banked
 24350  013758  6F9B               	movwf	Button_Init@pInput& (0+255),b
 24351  01375A  0E03               	movlw	high (_HMIBoard+48)
 24352  01375C  0100               	movlb	0	; () banked
 24353  01375E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 24354  013760  0E00               	movlw	0
 24355  013762  0100               	movlb	0	; () banked
 24356  013764  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24357  013766  0E02               	movlw	2
 24358  013768  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24359  01376A  0ED8               	movlw	low _HMI_InitButtons
 24360  01376C  0100               	movlb	0	; () banked
 24361  01376E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 24362  013770  0E80               	movlw	high _HMI_InitButtons
 24363  013772  0100               	movlb	0	; () banked
 24364  013774  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 24365  013776  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 24366  013778  0100               	movlb	0	; () banked
 24367  01377A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 24368  01377C  0E10               	movlw	low _HMI_DIPSwitch
 24369  01377E  0100               	movlb	0	; () banked
 24370  013780  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 24371  013782  0E7F               	movlw	high _HMI_DIPSwitch
 24372  013784  0100               	movlb	0	; () banked
 24373  013786  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 24374  013788  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 24375  01378A  0100               	movlb	0	; () banked
 24376  01378C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 24377  01378E  0E04               	movlw	low _Event_NULL
 24378  013790  0100               	movlb	0	; () banked
 24379  013792  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 24380  013794  0E14               	movlw	high _Event_NULL
 24381  013796  0100               	movlb	0	; () banked
 24382  013798  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 24383  01379A  0E00               	movlw	low (_Event_NULL shr (0+16))
 24384  01379C  0100               	movlb	0	; () banked
 24385  01379E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 24386  0137A0  EC08  F0AB         	call	_Button_Init	;wreg free
 24387                           
 24388                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 24389                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 24390  0137A4  0E51               	movlw	low (_HMIBoard+18)
 24391  0137A6  0100               	movlb	0	; () banked
 24392  0137A8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 24393  0137AA  0E03               	movlw	high (_HMIBoard+18)
 24394  0137AC  0100               	movlb	0	; () banked
 24395  0137AE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 24396  0137B0  0E00               	movlw	0
 24397  0137B2  0100               	movlb	0	; () banked
 24398  0137B4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24399  0137B6  0E02               	movlw	2
 24400  0137B8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24401  0137BA  0ED8               	movlw	low _HMI_InitButtons
 24402  0137BC  0100               	movlb	0	; () banked
 24403  0137BE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 24404  0137C0  0E80               	movlw	high _HMI_InitButtons
 24405  0137C2  0100               	movlb	0	; () banked
 24406  0137C4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 24407  0137C6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 24408  0137C8  0100               	movlb	0	; () banked
 24409  0137CA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 24410  0137CC  0E70               	movlw	low _HMI_LeftSwitch
 24411  0137CE  0100               	movlb	0	; () banked
 24412  0137D0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 24413  0137D2  0E7F               	movlw	high _HMI_LeftSwitch
 24414  0137D4  0100               	movlb	0	; () banked
 24415  0137D6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 24416  0137D8  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 24417  0137DA  0100               	movlb	0	; () banked
 24418  0137DC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 24419  0137DE  0E04               	movlw	low _Event_NULL
 24420  0137E0  0100               	movlb	0	; () banked
 24421  0137E2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 24422  0137E4  0E14               	movlw	high _Event_NULL
 24423  0137E6  0100               	movlb	0	; () banked
 24424  0137E8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 24425  0137EA  0E00               	movlw	low (_Event_NULL shr (0+16))
 24426  0137EC  0100               	movlb	0	; () banked
 24427  0137EE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 24428  0137F0  EC08  F0AB         	call	_Button_Init	;wreg free
 24429                           
 24430                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 24431                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 24432  0137F4  0E47               	movlw	low (_HMIBoard+8)
 24433  0137F6  0100               	movlb	0	; () banked
 24434  0137F8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 24435  0137FA  0E03               	movlw	high (_HMIBoard+8)
 24436  0137FC  0100               	movlb	0	; () banked
 24437  0137FE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 24438  013800  0E00               	movlw	0
 24439  013802  0100               	movlb	0	; () banked
 24440  013804  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24441  013806  0E02               	movlw	2
 24442  013808  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24443  01380A  0ED8               	movlw	low _HMI_InitButtons
 24444  01380C  0100               	movlb	0	; () banked
 24445  01380E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 24446  013810  0E80               	movlw	high _HMI_InitButtons
 24447  013812  0100               	movlb	0	; () banked
 24448  013814  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 24449  013816  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 24450  013818  0100               	movlb	0	; () banked
 24451  01381A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 24452  01381C  0E58               	movlw	low _HMI_RightSwitch
 24453  01381E  0100               	movlb	0	; () banked
 24454  013820  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 24455  013822  0E7F               	movlw	high _HMI_RightSwitch
 24456  013824  0100               	movlb	0	; () banked
 24457  013826  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 24458  013828  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 24459  01382A  0100               	movlb	0	; () banked
 24460  01382C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 24461  01382E  0E04               	movlw	low _Event_NULL
 24462  013830  0100               	movlb	0	; () banked
 24463  013832  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 24464  013834  0E14               	movlw	high _Event_NULL
 24465  013836  0100               	movlb	0	; () banked
 24466  013838  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 24467  01383A  0E00               	movlw	low (_Event_NULL shr (0+16))
 24468  01383C  0100               	movlb	0	; () banked
 24469  01383E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 24470  013840  EC08  F0AB         	call	_Button_Init	;wreg free
 24471                           
 24472                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 24473                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 24474  013844  0E5B               	movlw	low (_HMIBoard+28)
 24475  013846  0100               	movlb	0	; () banked
 24476  013848  6F9B               	movwf	Button_Init@pInput& (0+255),b
 24477  01384A  0E03               	movlw	high (_HMIBoard+28)
 24478  01384C  0100               	movlb	0	; () banked
 24479  01384E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 24480  013850  0E00               	movlw	0
 24481  013852  0100               	movlb	0	; () banked
 24482  013854  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24483  013856  0E02               	movlw	2
 24484  013858  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24485  01385A  0ED8               	movlw	low _HMI_InitButtons
 24486  01385C  0100               	movlb	0	; () banked
 24487  01385E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 24488  013860  0E80               	movlw	high _HMI_InitButtons
 24489  013862  0100               	movlb	0	; () banked
 24490  013864  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 24491  013866  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 24492  013868  0100               	movlb	0	; () banked
 24493  01386A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 24494  01386C  0E40               	movlw	low _HMI_UpSwitch
 24495  01386E  0100               	movlb	0	; () banked
 24496  013870  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 24497  013872  0E7F               	movlw	high _HMI_UpSwitch
 24498  013874  0100               	movlb	0	; () banked
 24499  013876  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 24500  013878  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 24501  01387A  0100               	movlb	0	; () banked
 24502  01387C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 24503  01387E  0E04               	movlw	low _Event_NULL
 24504  013880  0100               	movlb	0	; () banked
 24505  013882  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 24506  013884  0E14               	movlw	high _Event_NULL
 24507  013886  0100               	movlb	0	; () banked
 24508  013888  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 24509  01388A  0E00               	movlw	low (_Event_NULL shr (0+16))
 24510  01388C  0100               	movlb	0	; () banked
 24511  01388E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 24512  013890  EC08  F0AB         	call	_Button_Init	;wreg free
 24513                           
 24514                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 24515                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 24516  013894  0E65               	movlw	low (_HMIBoard+38)
 24517  013896  0100               	movlb	0	; () banked
 24518  013898  6F9B               	movwf	Button_Init@pInput& (0+255),b
 24519  01389A  0E03               	movlw	high (_HMIBoard+38)
 24520  01389C  0100               	movlb	0	; () banked
 24521  01389E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 24522  0138A0  0E00               	movlw	0
 24523  0138A2  0100               	movlb	0	; () banked
 24524  0138A4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24525  0138A6  0E02               	movlw	2
 24526  0138A8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24527  0138AA  0ED8               	movlw	low _HMI_InitButtons
 24528  0138AC  0100               	movlb	0	; () banked
 24529  0138AE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 24530  0138B0  0E80               	movlw	high _HMI_InitButtons
 24531  0138B2  0100               	movlb	0	; () banked
 24532  0138B4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 24533  0138B6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 24534  0138B8  0100               	movlb	0	; () banked
 24535  0138BA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 24536  0138BC  0E28               	movlw	low _HMI_DownSwitch
 24537  0138BE  0100               	movlb	0	; () banked
 24538  0138C0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 24539  0138C2  0E7F               	movlw	high _HMI_DownSwitch
 24540  0138C4  0100               	movlb	0	; () banked
 24541  0138C6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 24542  0138C8  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 24543  0138CA  0100               	movlb	0	; () banked
 24544  0138CC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 24545  0138CE  0E04               	movlw	low _Event_NULL
 24546  0138D0  0100               	movlb	0	; () banked
 24547  0138D2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 24548  0138D4  0E14               	movlw	high _Event_NULL
 24549  0138D6  0100               	movlb	0	; () banked
 24550  0138D8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 24551  0138DA  0E00               	movlw	low (_Event_NULL shr (0+16))
 24552  0138DC  0100               	movlb	0	; () banked
 24553  0138DE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 24554  0138E0  EC08  F0AB         	call	_Button_Init	;wreg free
 24555                           
 24556                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 24557  0138E4  0EA0               	movlw	160
 24558  0138E6  0100               	movlb	0	; () banked
 24559  0138E8  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 24560  0138EA  0E86               	movlw	134
 24561  0138EC  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 24562  0138EE  0E01               	movlw	1
 24563  0138F0  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 24564  0138F2  0E00               	movlw	0
 24565  0138F4  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 24566  0138F6  0E00               	movlw	0
 24567  0138F8  0100               	movlb	0	; () banked
 24568  0138FA  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 24569  0138FC  0E02               	movlw	2
 24570  0138FE  0100               	movlb	0	; () banked
 24571  013900  6F92               	movwf	SPI_Init@pMode& (0+255),b
 24572  013902  ECDA  F08D         	call	_SPI_Init	;wreg free
 24573                           
 24574                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 24575  013906  0E79               	movlw	low _SPI1
 24576  013908  0100               	movlb	0	; () banked
 24577  01390A  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 24578  01390C  0E03               	movlw	high _SPI1
 24579  01390E  0100               	movlb	0	; () banked
 24580  013910  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 24581  013912  ECBF  F0B6         	call	_SPI_MinSpeed	;wreg free
 24582                           
 24583                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 24584  013916  0E00               	movlw	0
 24585  013918  0100               	movlb	0	; () banked
 24586  01391A  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 24587  01391C  0E00               	movlw	0
 24588  01391E  6FA8               	movwf	HMI_Init@in& (0+255),b
 24589  013920                     l15912:
 24590                           
 24591                           ; BSR set to: 0
 24592  013920  0100               	movlb	0	; () banked
 24593  013922  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 24594  013924  E113               	bnz	l1153
 24595  013926  0E08               	movlw	8
 24596  013928  0100               	movlb	0	; () banked
 24597  01392A  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 24598  01392C  B0D8               	btfsc	status,0,c
 24599  01392E  0012               	return	
 24600                           
 24601                           ; BSR set to: 0
 24602                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 24603                           
 24604                           ; BSR set to: 0
 24605                           
 24606                           ; BSR set to: 0
 24607  013930  0E3F               	movlw	low _HMIBoard
 24608  013932  0100               	movlb	0	; () banked
 24609  013934  25A8               	addwf	HMI_Init@in& (0+255),w,b
 24610  013936  6ED9               	movwf	fsr2l,c
 24611  013938  0E03               	movlw	high _HMIBoard
 24612  01393A  0100               	movlb	0	; () banked
 24613  01393C  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 24614  01393E  6EDA               	movwf	fsr2h,c
 24615  013940  0E00               	movlw	0
 24616  013942  6EDF               	movwf	indf2,c
 24617                           
 24618                           ; BSR set to: 0
 24619  013944  0100               	movlb	0	; () banked
 24620  013946  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 24621  013948  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 24622  01394A  D7EA               	goto	l15912
 24623  01394C                     l1153:
 24624                           
 24625                           ; BSR set to: 0
 24626  01394C  0012               	return		;funcret
 24627  01394E                     __end_of_HMI_Init:
 24628                           	opt stack 0
 24629                           tosu	equ	0xFFF
 24630                           tosh	equ	0xFFE
 24631                           tosl	equ	0xFFD
 24632                           pclath	equ	0xFFA
 24633                           tblptru	equ	0xFF8
 24634                           tblptrh	equ	0xFF7
 24635                           tblptrl	equ	0xFF6
 24636                           tablat	equ	0xFF5
 24637                           prodh	equ	0xFF4
 24638                           prodl	equ	0xFF3
 24639                           intcon	equ	0xFF2
 24640                           postinc0	equ	0xFEE
 24641                           wreg	equ	0xFE8
 24642                           indf1	equ	0xFE7
 24643                           postdec1	equ	0xFE5
 24644                           fsr1h	equ	0xFE2
 24645                           fsr1l	equ	0xFE1
 24646                           indf2	equ	0xFDF
 24647                           postinc2	equ	0xFDE
 24648                           postdec2	equ	0xFDD
 24649                           plusw2	equ	0xFDB
 24650                           fsr2h	equ	0xFDA
 24651                           fsr2l	equ	0xFD9
 24652                           status	equ	0xFD8
 24653                           
 24654 ;; *************** function _SPI_MinSpeed *****************
 24655 ;; Defined at:
 24656 ;;		line 190 in file "Library/SPI.c"
 24657 ;; Parameters:    Size  Location     Type
 24658 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 24659 ;;		 -> SPI1(11), 
 24660 ;; Auto vars:     Size  Location     Type
 24661 ;;		None
 24662 ;; Return value:  Size  Location     Type
 24663 ;;                  1    wreg      void 
 24664 ;; Registers used:
 24665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24666 ;; Tracked objects:
 24667 ;;		On entry : 0/0
 24668 ;;		On exit  : 0/0
 24669 ;;		Unchanged: 0/0
 24670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24671 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24675 ;;Total ram usage:        2 bytes
 24676 ;; Hardware stack levels used:    1
 24677 ;; Hardware stack levels required when called:    9
 24678 ;; This function calls:
 24679 ;;		_Byte_SetBit
 24680 ;;		_Byte_SetQuad
 24681 ;; This function is called by:
 24682 ;;		_HMI_Init
 24683 ;; This function uses a non-reentrant model
 24684 ;;
 24685                           
 24686                           	psect	text104
 24687  016D7E                     __ptext104:
 24688                           	opt stack 0
 24689  016D7E                     _SPI_MinSpeed:
 24690                           	opt stack 19
 24691                           
 24692                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 24693                           
 24694                           ; BSR set to: 0
 24695                           ;incstack = 0
 24696  016D7E  0100               	movlb	0	; () banked
 24697  016D80  EE20 F006          	lfsr	2,6
 24698  016D84  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 24699  016D86  26D9               	addwf	fsr2l,f,c
 24700  016D88  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 24701  016D8A  22DA               	addwfc	fsr2h,f,c
 24702  016D8C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24703  016D90  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24704  016D94  0E05               	movlw	5
 24705  016D96  0100               	movlb	0	; () banked
 24706  016D98  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 24707  016D9A  0E00               	movlw	0
 24708  016D9C  0100               	movlb	0	; () banked
 24709  016D9E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24710  016DA0  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 24711                           
 24712                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 24713  016DA4  0100               	movlb	0	; () banked
 24714  016DA6  EE20 F006          	lfsr	2,6
 24715  016DAA  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 24716  016DAC  26D9               	addwf	fsr2l,f,c
 24717  016DAE  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 24718  016DB0  22DA               	addwfc	fsr2h,f,c
 24719  016DB2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 24720  016DB6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 24721  016DBA  0E00               	movlw	0
 24722  016DBC  0100               	movlb	0	; () banked
 24723  016DBE  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 24724  016DC0  0E02               	movlw	2
 24725  016DC2  0100               	movlb	0	; () banked
 24726  016DC4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 24727  016DC6  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 24728                           
 24729                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 24730  016DCA  0100               	movlb	0	; () banked
 24731  016DCC  EE20 F006          	lfsr	2,6
 24732  016DD0  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 24733  016DD2  26D9               	addwf	fsr2l,f,c
 24734  016DD4  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 24735  016DD6  22DA               	addwfc	fsr2h,f,c
 24736  016DD8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24737  016DDC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24738  016DE0  0E05               	movlw	5
 24739  016DE2  0100               	movlb	0	; () banked
 24740  016DE4  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 24741  016DE6  0E01               	movlw	1
 24742  016DE8  0100               	movlb	0	; () banked
 24743  016DEA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24744  016DEC  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 24745  016DF0  0012               	return		;funcret
 24746  016DF2                     __end_of_SPI_MinSpeed:
 24747                           	opt stack 0
 24748                           tosu	equ	0xFFF
 24749                           tosh	equ	0xFFE
 24750                           tosl	equ	0xFFD
 24751                           pclath	equ	0xFFA
 24752                           tblptru	equ	0xFF8
 24753                           tblptrh	equ	0xFF7
 24754                           tblptrl	equ	0xFF6
 24755                           tablat	equ	0xFF5
 24756                           prodh	equ	0xFF4
 24757                           prodl	equ	0xFF3
 24758                           intcon	equ	0xFF2
 24759                           postinc0	equ	0xFEE
 24760                           wreg	equ	0xFE8
 24761                           indf1	equ	0xFE7
 24762                           postdec1	equ	0xFE5
 24763                           fsr1h	equ	0xFE2
 24764                           fsr1l	equ	0xFE1
 24765                           indf2	equ	0xFDF
 24766                           postinc2	equ	0xFDE
 24767                           postdec2	equ	0xFDD
 24768                           plusw2	equ	0xFDB
 24769                           fsr2h	equ	0xFDA
 24770                           fsr2l	equ	0xFD9
 24771                           status	equ	0xFD8
 24772                           
 24773 ;; *************** function _SPI_Init *****************
 24774 ;; Defined at:
 24775 ;;		line 12 in file "Library/SPI.c"
 24776 ;; Parameters:    Size  Location     Type
 24777 ;;  pClock          4   45[BANK0 ] unsigned long 
 24778 ;;  pChannel        1   49[BANK0 ] enum E6744
 24779 ;;  pMode           1   50[BANK0 ] enum E6748
 24780 ;; Auto vars:     Size  Location     Type
 24781 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 24782 ;;		 -> SPI1(11), SPI2(11), 
 24783 ;; Return value:  Size  Location     Type
 24784 ;;                  1    wreg      void 
 24785 ;; Registers used:
 24786 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24787 ;; Tracked objects:
 24788 ;;		On entry : 0/0
 24789 ;;		On exit  : 0/0
 24790 ;;		Unchanged: 0/0
 24791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24792 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24795 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24796 ;;Total ram usage:        8 bytes
 24797 ;; Hardware stack levels used:    1
 24798 ;; Hardware stack levels required when called:   12
 24799 ;; This function calls:
 24800 ;;		_Byte_SetBit
 24801 ;;		_Byte_SetQuad
 24802 ;;		_Port_SetPinType
 24803 ;;		_SPI_DCS
 24804 ;;		_SPI_DisableISR
 24805 ;;		_Timer2_Init
 24806 ;; This function is called by:
 24807 ;;		_Configure_GPIOs
 24808 ;;		_HMI_Init
 24809 ;; This function uses a non-reentrant model
 24810 ;;
 24811                           
 24812                           	psect	text105
 24813  011BB4                     __ptext105:
 24814                           	opt stack 0
 24815  011BB4                     _SPI_Init:
 24816                           	opt stack 15
 24817                           
 24818                           ;SPI.c: 14: SPIPtr pInput;
 24819                           ;SPI.c: 16: switch (pChannel)
 24820                           
 24821                           ;incstack = 0
 24822  011BB4  D00C               	goto	l597
 24823  011BB6                     
 24824                           ;SPI.c: 19: pInput = &SPI1;
 24825  011BB6  0E79               	movlw	low _SPI1
 24826  011BB8  0100               	movlb	0	; () banked
 24827  011BBA  6F93               	movwf	SPI_Init@pInput& (0+255),b
 24828  011BBC  0E03               	movlw	high _SPI1
 24829  011BBE  D004               	goto	L17
 24830  011BC0                     
 24831                           ; BSR set to: 0
 24832                           ;SPI.c: 22: pInput = &SPI2;
 24833                           
 24834                           ; BSR set to: 0
 24835  011BC0  0E84               	movlw	low _SPI2
 24836  011BC2  0100               	movlb	0	; () banked
 24837  011BC4  6F93               	movwf	SPI_Init@pInput& (0+255),b
 24838  011BC6  0E03               	movlw	high _SPI2
 24839  011BC8                     L17:
 24840  011BC8  0100               	movlb	0	; () banked
 24841  011BCA  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 24842                           
 24843                           ; BSR set to: 0
 24844                           ;SPI.c: 24: };
 24845                           
 24846                           ;SPI.c: 23: break;
 24847  011BCC  D008               	goto	l599
 24848  011BCE                     l597:
 24849                           
 24850                           ; BSR set to: 0
 24851  011BCE  0100               	movlb	0	; () banked
 24852  011BD0  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 24853                           
 24854                           ; Switch size 1, requested type "space"
 24855                           ; Number of cases is 2, Range of values is 0 to 1
 24856                           ; switch strategies available:
 24857                           ; Name         Instructions Cycles
 24858                           ; simple_byte            7     4 (average)
 24859                           ;	Chosen strategy is simple_byte
 24860  011BD2  0A00               	xorlw	0	; case 0
 24861  011BD4  B4D8               	btfsc	status,2,c
 24862  011BD6  D7EF               	goto	l598
 24863  011BD8  0A01               	xorlw	1	; case 1
 24864  011BDA  B4D8               	btfsc	status,2,c
 24865  011BDC  D7F1               	goto	l600
 24866  011BDE                     l599:
 24867                           
 24868                           ; BSR set to: 0
 24869                           ;SPI.c: 26: pInput->mChannel = pChannel;
 24870                           
 24871                           ; BSR set to: 0
 24872  011BDE  0100               	movlb	0	; () banked
 24873  011BE0  EE20 F002          	lfsr	2,2
 24874  011BE4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 24875  011BE6  26D9               	addwf	fsr2l,f,c
 24876  011BE8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 24877  011BEA  22DA               	addwfc	fsr2h,f,c
 24878  011BEC  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 24879                           
 24880                           ;SPI.c: 35: switch (pChannel)
 24881  011BF0  D0B1               	goto	l601
 24882  011BF2                     
 24883                           ; BSR set to: 0
 24884                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 24885                           
 24886                           ; BSR set to: 0
 24887  011BF2  0EAD               	movlw	low _PortC
 24888  011BF4  0100               	movlb	0	; () banked
 24889  011BF6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24890  011BF8  0E03               	movlw	high _PortC
 24891  011BFA  0100               	movlb	0	; () banked
 24892  011BFC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24893  011BFE  0E02               	movlw	2
 24894  011C00  0100               	movlb	0	; () banked
 24895  011C02  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24896  011C04  0E03               	movlw	3
 24897  011C06  0100               	movlb	0	; () banked
 24898  011C08  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24899  011C0A  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 24900                           
 24901                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 24902  011C0E  0EAD               	movlw	low _PortC
 24903  011C10  0100               	movlb	0	; () banked
 24904  011C12  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24905  011C14  0E03               	movlw	high _PortC
 24906  011C16  0100               	movlb	0	; () banked
 24907  011C18  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24908  011C1A  0E03               	movlw	3
 24909  011C1C  0100               	movlb	0	; () banked
 24910  011C1E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24911  011C20  0E03               	movlw	3
 24912  011C22  0100               	movlb	0	; () banked
 24913  011C24  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24914  011C26  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 24915                           
 24916                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 24917  011C2A  0EAD               	movlw	low _PortC
 24918  011C2C  0100               	movlb	0	; () banked
 24919  011C2E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24920  011C30  0E03               	movlw	high _PortC
 24921  011C32  0100               	movlb	0	; () banked
 24922  011C34  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24923  011C36  0E05               	movlw	5
 24924  011C38  0100               	movlb	0	; () banked
 24925  011C3A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24926  011C3C  0E03               	movlw	3
 24927  011C3E  0100               	movlb	0	; () banked
 24928  011C40  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24929  011C42  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 24930                           
 24931                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 24932  011C46  0EAD               	movlw	low _PortC
 24933  011C48  0100               	movlb	0	; () banked
 24934  011C4A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24935  011C4C  0E03               	movlw	high _PortC
 24936  011C4E  0100               	movlb	0	; () banked
 24937  011C50  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24938  011C52  0E04               	movlw	4
 24939  011C54  0100               	movlb	0	; () banked
 24940  011C56  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24941  011C58  0E00               	movlw	0
 24942  011C5A  0100               	movlb	0	; () banked
 24943  011C5C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24944  011C5E  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 24945                           
 24946                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 24947  011C62  0100               	movlb	0	; () banked
 24948  011C64  EE20 F003          	lfsr	2,3
 24949  011C68  5193               	movf	SPI_Init@pInput& (0+255),w,b
 24950  011C6A  26D9               	addwf	fsr2l,f,c
 24951  011C6C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 24952  011C6E  22DA               	addwfc	fsr2h,f,c
 24953  011C70  0EC7               	movlw	199
 24954  011C72  6EDE               	movwf	postinc2,c
 24955  011C74  0E0F               	movlw	15
 24956  011C76  6EDD               	movwf	postdec2,c
 24957                           
 24958                           ; BSR set to: 0
 24959                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 24960  011C78  0100               	movlb	0	; () banked
 24961  011C7A  EE20 F006          	lfsr	2,6
 24962  011C7E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 24963  011C80  26D9               	addwf	fsr2l,f,c
 24964  011C82  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 24965  011C84  22DA               	addwfc	fsr2h,f,c
 24966  011C86  0EC6               	movlw	198
 24967  011C88  6EDE               	movwf	postinc2,c
 24968  011C8A  0E0F               	movlw	15
 24969  011C8C  6EDD               	movwf	postdec2,c
 24970                           
 24971                           ; BSR set to: 0
 24972                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 24973  011C8E  0100               	movlb	0	; () banked
 24974  011C90  EE20 F009          	lfsr	2,9
 24975  011C94  5193               	movf	SPI_Init@pInput& (0+255),w,b
 24976  011C96  26D9               	addwf	fsr2l,f,c
 24977  011C98  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 24978  011C9A  22DA               	addwfc	fsr2h,f,c
 24979  011C9C  0EC9               	movlw	201
 24980  011C9E  D056               	goto	L18
 24981  011CA0                     
 24982                           ; BSR set to: 0
 24983                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 24984                           
 24985                           ; BSR set to: 0
 24986  011CA0  0E99               	movlw	low _PortD
 24987  011CA2  0100               	movlb	0	; () banked
 24988  011CA4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24989  011CA6  0E03               	movlw	high _PortD
 24990  011CA8  0100               	movlb	0	; () banked
 24991  011CAA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24992  011CAC  0E07               	movlw	7
 24993  011CAE  0100               	movlb	0	; () banked
 24994  011CB0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24995  011CB2  0E03               	movlw	3
 24996  011CB4  0100               	movlb	0	; () banked
 24997  011CB6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24998  011CB8  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 24999                           
 25000                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 25001  011CBC  0E99               	movlw	low _PortD
 25002  011CBE  0100               	movlb	0	; () banked
 25003  011CC0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 25004  011CC2  0E03               	movlw	high _PortD
 25005  011CC4  0100               	movlb	0	; () banked
 25006  011CC6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 25007  011CC8  0E06               	movlw	6
 25008  011CCA  0100               	movlb	0	; () banked
 25009  011CCC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 25010  011CCE  0E03               	movlw	3
 25011  011CD0  0100               	movlb	0	; () banked
 25012  011CD2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 25013  011CD4  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 25014                           
 25015                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 25016  011CD8  0E99               	movlw	low _PortD
 25017  011CDA  0100               	movlb	0	; () banked
 25018  011CDC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 25019  011CDE  0E03               	movlw	high _PortD
 25020  011CE0  0100               	movlb	0	; () banked
 25021  011CE2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 25022  011CE4  0E04               	movlw	4
 25023  011CE6  0100               	movlb	0	; () banked
 25024  011CE8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 25025  011CEA  0E03               	movlw	3
 25026  011CEC  0100               	movlb	0	; () banked
 25027  011CEE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 25028  011CF0  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 25029                           
 25030                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 25031  011CF4  0E99               	movlw	low _PortD
 25032  011CF6  0100               	movlb	0	; () banked
 25033  011CF8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 25034  011CFA  0E03               	movlw	high _PortD
 25035  011CFC  0100               	movlb	0	; () banked
 25036  011CFE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 25037  011D00  0E05               	movlw	5
 25038  011D02  0100               	movlb	0	; () banked
 25039  011D04  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 25040  011D06  0E00               	movlw	0
 25041  011D08  0100               	movlb	0	; () banked
 25042  011D0A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 25043  011D0C  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 25044                           
 25045                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 25046  011D10  0100               	movlb	0	; () banked
 25047  011D12  EE20 F003          	lfsr	2,3
 25048  011D16  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25049  011D18  26D9               	addwf	fsr2l,f,c
 25050  011D1A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25051  011D1C  22DA               	addwfc	fsr2h,f,c
 25052  011D1E  0E6D               	movlw	109
 25053  011D20  6EDE               	movwf	postinc2,c
 25054  011D22  0E0F               	movlw	15
 25055  011D24  6EDD               	movwf	postdec2,c
 25056                           
 25057                           ; BSR set to: 0
 25058                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 25059  011D26  0100               	movlb	0	; () banked
 25060  011D28  EE20 F006          	lfsr	2,6
 25061  011D2C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25062  011D2E  26D9               	addwf	fsr2l,f,c
 25063  011D30  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25064  011D32  22DA               	addwfc	fsr2h,f,c
 25065  011D34  0E6C               	movlw	108
 25066  011D36  6EDE               	movwf	postinc2,c
 25067  011D38  0E0F               	movlw	15
 25068  011D3A  6EDD               	movwf	postdec2,c
 25069                           
 25070                           ; BSR set to: 0
 25071                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 25072  011D3C  0100               	movlb	0	; () banked
 25073  011D3E  EE20 F009          	lfsr	2,9
 25074  011D42  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25075  011D44  26D9               	addwf	fsr2l,f,c
 25076  011D46  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25077  011D48  22DA               	addwfc	fsr2h,f,c
 25078  011D4A  0E6F               	movlw	111
 25079  011D4C                     L18:
 25080  011D4C  6EDE               	movwf	postinc2,c
 25081  011D4E  0E0F               	movlw	15
 25082  011D50  6EDD               	movwf	postdec2,c
 25083                           
 25084                           ;SPI.c: 68: break;
 25085  011D52  D009               	goto	l603
 25086  011D54                     l601:
 25087                           
 25088                           ; BSR set to: 0
 25089                           
 25090                           ; BSR set to: 0
 25091  011D54  0100               	movlb	0	; () banked
 25092  011D56  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 25093                           
 25094                           ; Switch size 1, requested type "space"
 25095                           ; Number of cases is 2, Range of values is 0 to 1
 25096                           ; switch strategies available:
 25097                           ; Name         Instructions Cycles
 25098                           ; simple_byte            7     4 (average)
 25099                           ;	Chosen strategy is simple_byte
 25100  011D58  0A00               	xorlw	0	; case 0
 25101  011D5A  B4D8               	btfsc	status,2,c
 25102  011D5C  D74A               	goto	l602
 25103  011D5E  0A01               	xorlw	1	; case 1
 25104  011D60  A4D8               	btfss	status,2,c
 25105  011D62  0012               	return	
 25106  011D64  D79D               	goto	l604
 25107  011D66                     l603:
 25108                           
 25109                           ; BSR set to: 0
 25110                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 25111                           
 25112                           ; BSR set to: 0
 25113  011D66  0100               	movlb	0	; () banked
 25114  011D68  EE20 F006          	lfsr	2,6
 25115  011D6C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25116  011D6E  26D9               	addwf	fsr2l,f,c
 25117  011D70  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25118  011D72  22DA               	addwfc	fsr2h,f,c
 25119  011D74  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25120  011D78  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25121  011D7C  0E05               	movlw	5
 25122  011D7E  0100               	movlb	0	; () banked
 25123  011D80  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25124  011D82  0E00               	movlw	0
 25125  011D84  0100               	movlb	0	; () banked
 25126  011D86  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25127  011D88  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25128                           
 25129                           ;SPI.c: 77: switch(pMode)
 25130  011D8C  D09C               	goto	l607
 25131  011D8E                     
 25132                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 25133  011D8E  0100               	movlb	0	; () banked
 25134  011D90  EE20 F006          	lfsr	2,6
 25135  011D94  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25136  011D96  26D9               	addwf	fsr2l,f,c
 25137  011D98  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25138  011D9A  22DA               	addwfc	fsr2h,f,c
 25139  011D9C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25140  011DA0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25141  011DA4  0E04               	movlw	4
 25142  011DA6  0100               	movlb	0	; () banked
 25143  011DA8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25144  011DAA  0E00               	movlw	0
 25145  011DAC  0100               	movlb	0	; () banked
 25146  011DAE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25147  011DB0  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25148                           
 25149                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 25150  011DB4  0100               	movlb	0	; () banked
 25151  011DB6  EE20 F003          	lfsr	2,3
 25152  011DBA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25153  011DBC  26D9               	addwf	fsr2l,f,c
 25154  011DBE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25155  011DC0  22DA               	addwfc	fsr2h,f,c
 25156  011DC2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25157  011DC6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25158  011DCA  0E06               	movlw	6
 25159  011DCC  0100               	movlb	0	; () banked
 25160  011DCE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25161  011DD0  0E00               	movlw	0
 25162  011DD2  0100               	movlb	0	; () banked
 25163  011DD4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25164  011DD6  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25165                           
 25166                           ;SPI.c: 82: break;
 25167  011DDA  D084               	goto	l609
 25168  011DDC                     
 25169                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 25170  011DDC  0100               	movlb	0	; () banked
 25171  011DDE  EE20 F006          	lfsr	2,6
 25172  011DE2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25173  011DE4  26D9               	addwf	fsr2l,f,c
 25174  011DE6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25175  011DE8  22DA               	addwfc	fsr2h,f,c
 25176  011DEA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25177  011DEE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25178  011DF2  0E04               	movlw	4
 25179  011DF4  0100               	movlb	0	; () banked
 25180  011DF6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25181  011DF8  0E00               	movlw	0
 25182  011DFA  0100               	movlb	0	; () banked
 25183  011DFC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25184  011DFE  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25185                           
 25186                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 25187  011E02  0100               	movlb	0	; () banked
 25188  011E04  EE20 F003          	lfsr	2,3
 25189  011E08  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25190  011E0A  26D9               	addwf	fsr2l,f,c
 25191  011E0C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25192  011E0E  22DA               	addwfc	fsr2h,f,c
 25193  011E10  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25194  011E14  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25195  011E18  0E06               	movlw	6
 25196  011E1A  0100               	movlb	0	; () banked
 25197  011E1C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25198  011E1E  0E01               	movlw	1
 25199  011E20  0100               	movlb	0	; () banked
 25200  011E22  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25201  011E24  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25202                           
 25203                           ;SPI.c: 86: break;
 25204  011E28  D05D               	goto	l609
 25205  011E2A                     
 25206                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 25207  011E2A  0100               	movlb	0	; () banked
 25208  011E2C  EE20 F006          	lfsr	2,6
 25209  011E30  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25210  011E32  26D9               	addwf	fsr2l,f,c
 25211  011E34  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25212  011E36  22DA               	addwfc	fsr2h,f,c
 25213  011E38  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25214  011E3C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25215  011E40  0E04               	movlw	4
 25216  011E42  0100               	movlb	0	; () banked
 25217  011E44  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25218  011E46  0E01               	movlw	1
 25219  011E48  0100               	movlb	0	; () banked
 25220  011E4A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25221  011E4C  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25222                           
 25223                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 25224  011E50  0100               	movlb	0	; () banked
 25225  011E52  EE20 F003          	lfsr	2,3
 25226  011E56  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25227  011E58  26D9               	addwf	fsr2l,f,c
 25228  011E5A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25229  011E5C  22DA               	addwfc	fsr2h,f,c
 25230  011E5E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25231  011E62  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25232  011E66  0E06               	movlw	6
 25233  011E68  0100               	movlb	0	; () banked
 25234  011E6A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25235  011E6C  0E00               	movlw	0
 25236  011E6E  0100               	movlb	0	; () banked
 25237  011E70  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25238  011E72  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25239                           
 25240                           ;SPI.c: 90: break;
 25241  011E76  D036               	goto	l609
 25242  011E78                     
 25243                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 25244  011E78  0100               	movlb	0	; () banked
 25245  011E7A  EE20 F006          	lfsr	2,6
 25246  011E7E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25247  011E80  26D9               	addwf	fsr2l,f,c
 25248  011E82  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25249  011E84  22DA               	addwfc	fsr2h,f,c
 25250  011E86  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25251  011E8A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25252  011E8E  0E04               	movlw	4
 25253  011E90  0100               	movlb	0	; () banked
 25254  011E92  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25255  011E94  0E01               	movlw	1
 25256  011E96  0100               	movlb	0	; () banked
 25257  011E98  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25258  011E9A  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25259                           
 25260                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 25261  011E9E  0100               	movlb	0	; () banked
 25262  011EA0  EE20 F003          	lfsr	2,3
 25263  011EA4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25264  011EA6  26D9               	addwf	fsr2l,f,c
 25265  011EA8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25266  011EAA  22DA               	addwfc	fsr2h,f,c
 25267  011EAC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25268  011EB0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25269  011EB4  0E06               	movlw	6
 25270  011EB6  0100               	movlb	0	; () banked
 25271  011EB8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25272  011EBA  0E01               	movlw	1
 25273  011EBC  0100               	movlb	0	; () banked
 25274  011EBE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25275  011EC0  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25276                           
 25277                           ;SPI.c: 94: break;
 25278  011EC4  D00F               	goto	l609
 25279  011EC6                     l607:
 25280  011EC6  0100               	movlb	0	; () banked
 25281  011EC8  5192               	movf	SPI_Init@pMode& (0+255),w,b
 25282                           
 25283                           ; Switch size 1, requested type "space"
 25284                           ; Number of cases is 4, Range of values is 0 to 3
 25285                           ; switch strategies available:
 25286                           ; Name         Instructions Cycles
 25287                           ; simple_byte           13     7 (average)
 25288                           ;	Chosen strategy is simple_byte
 25289  011ECA  0A00               	xorlw	0	; case 0
 25290  011ECC  B4D8               	btfsc	status,2,c
 25291  011ECE  D75F               	goto	l608
 25292  011ED0  0A01               	xorlw	1	; case 1
 25293  011ED2  B4D8               	btfsc	status,2,c
 25294  011ED4  D783               	goto	l610
 25295  011ED6  0A03               	xorlw	3	; case 2
 25296  011ED8  B4D8               	btfsc	status,2,c
 25297  011EDA  D7A7               	goto	l611
 25298  011EDC  0A01               	xorlw	1	; case 3
 25299  011EDE  A4D8               	btfss	status,2,c
 25300  011EE0  0012               	return	
 25301  011EE2  D7CA               	goto	l612
 25302  011EE4                     l609:
 25303                           
 25304                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 25305                           
 25306                           ; BSR set to: 0
 25307  011EE4  0100               	movlb	0	; () banked
 25308  011EE6  EE20 F006          	lfsr	2,6
 25309  011EEA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25310  011EEC  26D9               	addwf	fsr2l,f,c
 25311  011EEE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25312  011EF0  22DA               	addwfc	fsr2h,f,c
 25313  011EF2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25314  011EF6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25315  011EFA  0E07               	movlw	7
 25316  011EFC  0100               	movlb	0	; () banked
 25317  011EFE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25318  011F00  0E00               	movlw	0
 25319  011F02  0100               	movlb	0	; () banked
 25320  011F04  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25321  011F06  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25322                           
 25323                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 25324  011F0A  0100               	movlb	0	; () banked
 25325  011F0C  EE20 F006          	lfsr	2,6
 25326  011F10  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25327  011F12  26D9               	addwf	fsr2l,f,c
 25328  011F14  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25329  011F16  22DA               	addwfc	fsr2h,f,c
 25330  011F18  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25331  011F1C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25332  011F20  0E06               	movlw	6
 25333  011F22  0100               	movlb	0	; () banked
 25334  011F24  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25335  011F26  0E00               	movlw	0
 25336  011F28  0100               	movlb	0	; () banked
 25337  011F2A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25338  011F2C  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25339                           
 25340                           ;SPI.c: 106: Timer2_Init(pClock);
 25341  011F30  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 25342  011F34  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 25343  011F38  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 25344  011F3C  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 25345  011F40  ECFD  F0A5         	call	_Timer2_Init	;wreg free
 25346                           
 25347                           ;SPI.c: 112: SPI_DisableISR(pInput);
 25348  011F44  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 25349  011F48  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 25350  011F4C  EC57  F0BE         	call	_SPI_DisableISR	;wreg free
 25351                           
 25352                           ;SPI.c: 116: switch (pChannel)
 25353  011F50  D004               	goto	l614
 25354  011F52                     l615:
 25355                           
 25356                           ; BSR set to: 0
 25357  011F52  869F               	bsf	3999,3,c	;volatile
 25358  011F54  D00B               	goto	l616
 25359  011F56                     l617:
 25360                           
 25361                           ; BSR set to: 0
 25362  011F56  8EA5               	bsf	4005,7,c	;volatile
 25363  011F58  D009               	goto	l616
 25364  011F5A                     l614:
 25365                           
 25366                           ; BSR set to: 0
 25367  011F5A  0100               	movlb	0	; () banked
 25368  011F5C  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 25369                           
 25370                           ; Switch size 1, requested type "space"
 25371                           ; Number of cases is 2, Range of values is 0 to 1
 25372                           ; switch strategies available:
 25373                           ; Name         Instructions Cycles
 25374                           ; simple_byte            7     4 (average)
 25375                           ;	Chosen strategy is simple_byte
 25376  011F5E  0A00               	xorlw	0	; case 0
 25377  011F60  B4D8               	btfsc	status,2,c
 25378  011F62  D7F7               	goto	l615
 25379  011F64  0A01               	xorlw	1	; case 1
 25380  011F66  A4D8               	btfss	status,2,c
 25381  011F68  0012               	return	
 25382  011F6A  D7F5               	goto	l617
 25383  011F6C                     l616:
 25384                           
 25385                           ; BSR set to: 0
 25386                           ;SPI.c: 124: SPI_DCS(pInput);
 25387                           
 25388                           ; BSR set to: 0
 25389  011F6C  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 25390  011F70  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 25391  011F74  ECB7  F0BD         	call	_SPI_DCS	;wreg free
 25392                           
 25393                           ;SPI.c: 126: pInput->mBusy = 0;
 25394  011F78  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 25395  011F7C  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 25396  011F80  0E00               	movlw	0
 25397  011F82  6EDF               	movwf	indf2,c
 25398                           
 25399                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 25400  011F84  0100               	movlb	0	; () banked
 25401  011F86  EE20 F006          	lfsr	2,6
 25402  011F8A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25403  011F8C  26D9               	addwf	fsr2l,f,c
 25404  011F8E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25405  011F90  22DA               	addwfc	fsr2h,f,c
 25406  011F92  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25407  011F96  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25408  011F9A  0E00               	movlw	0
 25409  011F9C  0100               	movlb	0	; () banked
 25410  011F9E  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 25411  011FA0  0E03               	movlw	3
 25412  011FA2  0100               	movlb	0	; () banked
 25413  011FA4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25414  011FA6  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 25415                           
 25416                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 25417  011FAA  0100               	movlb	0	; () banked
 25418  011FAC  EE20 F006          	lfsr	2,6
 25419  011FB0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 25420  011FB2  26D9               	addwf	fsr2l,f,c
 25421  011FB4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 25422  011FB6  22DA               	addwfc	fsr2h,f,c
 25423  011FB8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25424  011FBC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25425  011FC0  0E05               	movlw	5
 25426  011FC2  0100               	movlb	0	; () banked
 25427  011FC4  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 25428  011FC6  0E01               	movlw	1
 25429  011FC8  0100               	movlb	0	; () banked
 25430  011FCA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25431  011FCC  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 25432  011FD0  0012               	return		;funcret
 25433  011FD2                     __end_of_SPI_Init:
 25434                           	opt stack 0
 25435                           tosu	equ	0xFFF
 25436                           tosh	equ	0xFFE
 25437                           tosl	equ	0xFFD
 25438                           pclath	equ	0xFFA
 25439                           tblptru	equ	0xFF8
 25440                           tblptrh	equ	0xFF7
 25441                           tblptrl	equ	0xFF6
 25442                           tablat	equ	0xFF5
 25443                           prodh	equ	0xFF4
 25444                           prodl	equ	0xFF3
 25445                           intcon	equ	0xFF2
 25446                           postinc0	equ	0xFEE
 25447                           wreg	equ	0xFE8
 25448                           indf1	equ	0xFE7
 25449                           postdec1	equ	0xFE5
 25450                           fsr1h	equ	0xFE2
 25451                           fsr1l	equ	0xFE1
 25452                           indf2	equ	0xFDF
 25453                           postinc2	equ	0xFDE
 25454                           postdec2	equ	0xFDD
 25455                           plusw2	equ	0xFDB
 25456                           fsr2h	equ	0xFDA
 25457                           fsr2l	equ	0xFD9
 25458                           status	equ	0xFD8
 25459                           
 25460 ;; *************** function _Timer2_Init *****************
 25461 ;; Defined at:
 25462 ;;		line 10 in file "Library/Timer2.c"
 25463 ;; Parameters:    Size  Location     Type
 25464 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 25465 ;; Auto vars:     Size  Location     Type
 25466 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 25467 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 25468 ;;  RDIV            4   18[BANK0 ] unsigned long 
 25469 ;; Return value:  Size  Location     Type
 25470 ;;                  1    wreg      void 
 25471 ;; Registers used:
 25472 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25473 ;; Tracked objects:
 25474 ;;		On entry : 0/0
 25475 ;;		On exit  : 0/0
 25476 ;;		Unchanged: 0/0
 25477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25478 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25479 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25480 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25481 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25482 ;;Total ram usage:       17 bytes
 25483 ;; Hardware stack levels used:    1
 25484 ;; Hardware stack levels required when called:    8
 25485 ;; This function calls:
 25486 ;;		_Timer2_Clear
 25487 ;;		___lldiv
 25488 ;; This function is called by:
 25489 ;;		_SPI_Init
 25490 ;; This function uses a non-reentrant model
 25491 ;;
 25492                           
 25493                           	psect	text106
 25494  014BFA                     __ptext106:
 25495                           	opt stack 0
 25496  014BFA                     _Timer2_Init:
 25497                           	opt stack 18
 25498                           
 25499                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 25500                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 25501                           ;Timer2.c: 14: static UINT8 PRE = 0;
 25502                           ;Timer2.c: 15: static UINT32 DIV = 0;
 25503                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 25504                           
 25505                           ;incstack = 0
 25506  014BFA  0E00               	movlw	0
 25507  014BFC  0100               	movlb	0	; () banked
 25508  014BFE  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 25509  014C00  0E6C               	movlw	108
 25510  014C02  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 25511  014C04  0EDC               	movlw	220
 25512  014C06  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 25513  014C08  0E02               	movlw	2
 25514  014C0A  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 25515                           
 25516                           ; BSR set to: 0
 25517                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 25518                           ;Timer2.c: 20: pFrequency *= 2;
 25519  014C0C  0100               	movlb	0	; () banked
 25520  014C0E  90D8               	bcf	status,0,c
 25521  014C10  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 25522  014C12  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 25523  014C14  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 25524  014C16  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 25525                           
 25526                           ; BSR set to: 0
 25527                           ;Timer2.c: 23: pCPUClock /= 4;
 25528  014C18  0E02               	movlw	2
 25529  014C1A  0100               	movlb	0	; () banked
 25530  014C1C  6F71               	movwf	??_Timer2_Init& (0+255),b
 25531  014C1E                     u11395:
 25532  014C1E  90D8               	bcf	status,0,c
 25533  014C20  0100               	movlb	0	; () banked
 25534  014C22  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 25535  014C24  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 25536  014C26  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 25537  014C28  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 25538  014C2A  0100               	movlb	0	; () banked
 25539  014C2C  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 25540  014C2E  D7F7               	goto	u11395
 25541                           
 25542                           ; BSR set to: 0
 25543                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 25544  014C30  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 25545  014C34  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 25546  014C38  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 25547  014C3C  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 25548  014C40  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 25549  014C44  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 25550  014C48  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 25551  014C4C  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 25552  014C50  EC5C  F0AD         	call	___lldiv	;wreg free
 25553  014C54  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 25554  014C58  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 25555  014C5C  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 25556  014C60  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 25557                           
 25558                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 25559  014C64  D010               	goto	l1828
 25560  014C66                     l14062:
 25561                           
 25562                           ;Timer2.c: 28: {
 25563                           ;Timer2.c: 29: RDIV = 0;
 25564  014C66  0E00               	movlw	0
 25565  014C68  0100               	movlb	0	; () banked
 25566  014C6A  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 25567  014C6C  0E00               	movlw	0
 25568  014C6E  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 25569  014C70  0E00               	movlw	0
 25570  014C72  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 25571  014C74  0E00               	movlw	0
 25572  014C76  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 25573                           
 25574                           ; BSR set to: 0
 25575                           ;Timer2.c: 30: INDEX ++;
 25576  014C78  0100               	movlb	0	; () banked
 25577  014C7A  2BF0               	incf	Timer2_Init@INDEX& (0+255),f,b
 25578                           
 25579                           ; BSR set to: 0
 25580                           ;Timer2.c: 31: if (INDEX >= 3)
 25581  014C7C  0E02               	movlw	2
 25582  014C7E  0100               	movlb	0	; () banked
 25583  014C80  65F0               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 25584  014C82  D001               	goto	l1828
 25585  014C84  D026               	goto	u11410
 25586  014C86                     l1828:
 25587                           
 25588                           ; BSR set to: 0
 25589                           
 25590                           ; BSR set to: 0
 25591  014C86  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 25592  014C8A  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 25593  014C8E  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 25594  014C92  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 25595  014C96  0100               	movlb	0	; () banked
 25596  014C98  51F0               	movf	Timer2_Init@INDEX& (0+255),w,b
 25597  014C9A  0D01               	mullw	1
 25598  014C9C  0E68               	movlw	low Timer2_Init@PRESCALE
 25599  014C9E  24F3               	addwf	prodl,w,c
 25600  014CA0  6EF6               	movwf	tblptrl,c
 25601  014CA2  0EFD               	movlw	high Timer2_Init@PRESCALE
 25602  014CA4  20F4               	addwfc	prodh,w,c
 25603  014CA6  6EF7               	movwf	tblptrh,c
 25604  014CA8                     	if	1	;There are 3 active tblptr bytes
 25605  014CA8  6AF8               	clrf	tblptru,c
 25606  014CAA  0E00               	movlw	low (__mediumconst shr (0+16))
 25607  014CAC  22F8               	addwfc	tblptru,f,c
 25608  014CAE                     	endif
 25609  014CAE  0008               	tblrd		*
 25610  014CB0  50F5               	movf	tablat,w,c
 25611  014CB2  0100               	movlb	0	; () banked
 25612  014CB4  6F64               	movwf	___lldiv@divisor& (0+255),b
 25613  014CB6  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 25614  014CB8  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 25615  014CBA  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 25616  014CBC  EC5C  F0AD         	call	___lldiv	;wreg free
 25617  014CC0  0100               	movlb	0	; () banked
 25618  014CC2  5163               	movf	(?___lldiv+3)& (0+255),w,b
 25619  014CC4  0100               	movlb	0	; () banked
 25620  014CC6  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 25621  014CC8  E1CE               	bnz	l14062
 25622  014CCA  0100               	movlb	0	; () banked
 25623  014CCC  0561               	decf	(?___lldiv+1)& (0+255),w,b
 25624  014CCE  B0D8               	btfsc	status,0,c
 25625  014CD0  D7CA               	goto	l1827
 25626  014CD2                     u11410:
 25627                           
 25628                           ; BSR set to: 0
 25629                           ;Timer2.c: 33: }
 25630                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 25631                           
 25632                           ; BSR set to: 0
 25633  014CD2  50CA               	movf	4042,w,c	;volatile
 25634  014CD4  0100               	movlb	0	; () banked
 25635  014CD6  19F0               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 25636  014CD8  0BFC               	andlw	-4
 25637  014CDA  19F0               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 25638  014CDC  6ECA               	movwf	4042,c	;volatile
 25639                           
 25640                           ; BSR set to: 0
 25641                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 25642  014CDE  84CA               	bsf	4042,2,c	;volatile
 25643                           
 25644                           ; BSR set to: 0
 25645                           ;Timer2.c: 44: Timer2_Clear();
 25646  014CE0  EC61  F0C0         	call	_Timer2_Clear	;wreg free
 25647                           
 25648                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 25649  014CE4  0100               	movlb	0	; () banked
 25650  014CE6  51F0               	movf	Timer2_Init@INDEX& (0+255),w,b
 25651  014CE8  0D01               	mullw	1
 25652  014CEA  0E68               	movlw	low Timer2_Init@PRESCALE
 25653  014CEC  24F3               	addwf	prodl,w,c
 25654  014CEE  6EF6               	movwf	tblptrl,c
 25655  014CF0  0EFD               	movlw	high Timer2_Init@PRESCALE
 25656  014CF2  20F4               	addwfc	prodh,w,c
 25657  014CF4  6EF7               	movwf	tblptrh,c
 25658  014CF6                     	if	1	;There are 3 active tblptr bytes
 25659  014CF6  6AF8               	clrf	tblptru,c
 25660  014CF8  0E00               	movlw	low (__mediumconst shr (0+16))
 25661  014CFA  22F8               	addwfc	tblptru,f,c
 25662  014CFC                     	endif
 25663  014CFC  0008               	tblrd		*
 25664  014CFE  CFF5 F03A          	movff	tablat,Timer2_Init@PRE
 25665                           
 25666                           ; BSR set to: 0
 25667                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 25668  014D02  0EFF               	movlw	255
 25669  014D04  0100               	movlb	0	; () banked
 25670  014D06  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 25671  014D08  0103               	movlb	3	; () banked
 25672  014D0A  6F0C               	movwf	Timer2_Init@DIV& (0+255),b
 25673  014D0C  0EFF               	movlw	255
 25674  014D0E  0100               	movlb	0	; () banked
 25675  014D10  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 25676  014D12  0103               	movlb	3	; () banked
 25677  014D14  6F0D               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 25678  014D16  0EFF               	movlw	255
 25679  014D18  0100               	movlb	0	; () banked
 25680  014D1A  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 25681  014D1C  0103               	movlb	3	; () banked
 25682  014D1E  6F0E               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 25683  014D20  0EFF               	movlw	255
 25684  014D22  0100               	movlb	0	; () banked
 25685  014D24  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 25686  014D26  0103               	movlb	3	; () banked
 25687  014D28  6F0F               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 25688                           
 25689                           ; BSR set to: 3
 25690                           ;Timer2.c: 48: INDEX = DIV/PRE;
 25691  014D2A  C30C  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 25692  014D2E  C30D  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 25693  014D32  C30E  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 25694  014D36  C30F  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 25695  014D3A  503A               	movf	Timer2_Init@PRE,w,c
 25696  014D3C  0100               	movlb	0	; () banked
 25697  014D3E  6F64               	movwf	___lldiv@divisor& (0+255),b
 25698  014D40  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 25699  014D42  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 25700  014D44  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 25701  014D46  EC5C  F0AD         	call	___lldiv	;wreg free
 25702  014D4A  0100               	movlb	0	; () banked
 25703  014D4C  5160               	movf	?___lldiv& (0+255),w,b
 25704  014D4E  0100               	movlb	0	; () banked
 25705  014D50  6FF0               	movwf	Timer2_Init@INDEX& (0+255),b
 25706                           
 25707                           ; BSR set to: 0
 25708                           ;Timer2.c: 49: PR2 = INDEX;
 25709  014D52  C0F0  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 25710                           
 25711                           ; BSR set to: 0
 25712  014D56  0012               	return		;funcret
 25713  014D58                     __end_of_Timer2_Init:
 25714                           	opt stack 0
 25715                           tosu	equ	0xFFF
 25716                           tosh	equ	0xFFE
 25717                           tosl	equ	0xFFD
 25718                           pclath	equ	0xFFA
 25719                           tblptru	equ	0xFF8
 25720                           tblptrh	equ	0xFF7
 25721                           tblptrl	equ	0xFF6
 25722                           tablat	equ	0xFF5
 25723                           prodh	equ	0xFF4
 25724                           prodl	equ	0xFF3
 25725                           intcon	equ	0xFF2
 25726                           postinc0	equ	0xFEE
 25727                           wreg	equ	0xFE8
 25728                           indf1	equ	0xFE7
 25729                           postdec1	equ	0xFE5
 25730                           fsr1h	equ	0xFE2
 25731                           fsr1l	equ	0xFE1
 25732                           indf2	equ	0xFDF
 25733                           postinc2	equ	0xFDE
 25734                           postdec2	equ	0xFDD
 25735                           plusw2	equ	0xFDB
 25736                           fsr2h	equ	0xFDA
 25737                           fsr2l	equ	0xFD9
 25738                           status	equ	0xFD8
 25739                           
 25740 ;; *************** function ___lldiv *****************
 25741 ;; Defined at:
 25742 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 25743 ;; Parameters:    Size  Location     Type
 25744 ;;  dividend        4    0[BANK0 ] unsigned long 
 25745 ;;  divisor         4    4[BANK0 ] unsigned long 
 25746 ;; Auto vars:     Size  Location     Type
 25747 ;;  quotient        4    8[BANK0 ] unsigned long 
 25748 ;;  counter         1   12[BANK0 ] unsigned char 
 25749 ;; Return value:  Size  Location     Type
 25750 ;;                  4    0[BANK0 ] unsigned long 
 25751 ;; Registers used:
 25752 ;;		wreg, status,2, status,0
 25753 ;; Tracked objects:
 25754 ;;		On entry : 0/0
 25755 ;;		On exit  : 0/0
 25756 ;;		Unchanged: 0/0
 25757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25758 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25759 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25761 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25762 ;;Total ram usage:       13 bytes
 25763 ;; Hardware stack levels used:    1
 25764 ;; Hardware stack levels required when called:    7
 25765 ;; This function calls:
 25766 ;;		Nothing
 25767 ;; This function is called by:
 25768 ;;		_Timer0_Init
 25769 ;;		_Timer2_Init
 25770 ;;		_printf
 25771 ;;		_rand_between
 25772 ;;		_I2C_Init
 25773 ;; This function uses a non-reentrant model
 25774 ;;
 25775                           
 25776                           	psect	text107
 25777  015AB8                     __ptext107:
 25778                           	opt stack 0
 25779  015AB8                     ___lldiv:
 25780                           	opt stack 22
 25781                           
 25782                           ; BSR set to: 0
 25783                           ;incstack = 0
 25784  015AB8  0E00               	movlw	0
 25785  015ABA  0100               	movlb	0	; () banked
 25786  015ABC  6F68               	movwf	___lldiv@quotient& (0+255),b
 25787  015ABE  0E00               	movlw	0
 25788  015AC0  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 25789  015AC2  0E00               	movlw	0
 25790  015AC4  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 25791  015AC6  0E00               	movlw	0
 25792  015AC8  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 25793                           
 25794                           ; BSR set to: 0
 25795  015ACA  0100               	movlb	0	; () banked
 25796  015ACC  5164               	movf	___lldiv@divisor& (0+255),w,b
 25797  015ACE  0100               	movlb	0	; () banked
 25798  015AD0  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 25799  015AD2  0100               	movlb	0	; () banked
 25800  015AD4  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 25801  015AD6  0100               	movlb	0	; () banked
 25802  015AD8  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 25803  015ADA  B4D8               	btfsc	status,2,c
 25804  015ADC  D042               	goto	l2896
 25805                           
 25806                           ; BSR set to: 0
 25807  015ADE  0E01               	movlw	1
 25808  015AE0  0100               	movlb	0	; () banked
 25809  015AE2  6F6C               	movwf	___lldiv@counter& (0+255),b
 25810  015AE4  D008               	goto	l2891
 25811  015AE6                     
 25812                           ; BSR set to: 0
 25813                           
 25814                           ; BSR set to: 0
 25815  015AE6  0100               	movlb	0	; () banked
 25816  015AE8  90D8               	bcf	status,0,c
 25817  015AEA  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 25818  015AEC  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 25819  015AEE  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 25820  015AF0  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 25821  015AF2  0100               	movlb	0	; () banked
 25822  015AF4  2B6C               	incf	___lldiv@counter& (0+255),f,b
 25823  015AF6                     l2891:
 25824                           
 25825                           ; BSR set to: 0
 25826                           
 25827                           ; BSR set to: 0
 25828  015AF6  0100               	movlb	0	; () banked
 25829  015AF8  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 25830  015AFA  D7F5               	goto	l2892
 25831  015AFC                     u11260:
 25832                           
 25833                           ; BSR set to: 0
 25834                           
 25835                           ; BSR set to: 0
 25836                           
 25837                           ; BSR set to: 0
 25838  015AFC  0100               	movlb	0	; () banked
 25839  015AFE  90D8               	bcf	status,0,c
 25840  015B00  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 25841  015B02  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 25842  015B04  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 25843  015B06  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 25844                           
 25845                           ; BSR set to: 0
 25846  015B08  0100               	movlb	0	; () banked
 25847  015B0A  5164               	movf	___lldiv@divisor& (0+255),w,b
 25848  015B0C  0100               	movlb	0	; () banked
 25849  015B0E  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 25850  015B10  0100               	movlb	0	; () banked
 25851  015B12  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 25852  015B14  0100               	movlb	0	; () banked
 25853  015B16  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 25854  015B18  0100               	movlb	0	; () banked
 25855  015B1A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 25856  015B1C  0100               	movlb	0	; () banked
 25857  015B1E  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 25858  015B20  0100               	movlb	0	; () banked
 25859  015B22  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 25860  015B24  0100               	movlb	0	; () banked
 25861  015B26  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 25862  015B28  A0D8               	btfss	status,0,c
 25863  015B2A  D012               	goto	l2895
 25864                           
 25865                           ; BSR set to: 0
 25866  015B2C  0100               	movlb	0	; () banked
 25867  015B2E  5164               	movf	___lldiv@divisor& (0+255),w,b
 25868  015B30  0100               	movlb	0	; () banked
 25869  015B32  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 25870  015B34  0100               	movlb	0	; () banked
 25871  015B36  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 25872  015B38  0100               	movlb	0	; () banked
 25873  015B3A  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 25874  015B3C  0100               	movlb	0	; () banked
 25875  015B3E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 25876  015B40  0100               	movlb	0	; () banked
 25877  015B42  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 25878  015B44  0100               	movlb	0	; () banked
 25879  015B46  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 25880  015B48  0100               	movlb	0	; () banked
 25881  015B4A  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 25882                           
 25883                           ; BSR set to: 0
 25884  015B4C  0100               	movlb	0	; () banked
 25885  015B4E  8168               	bsf	___lldiv@quotient& (0+255),0,b
 25886  015B50                     l2895:
 25887                           
 25888                           ; BSR set to: 0
 25889                           
 25890                           ; BSR set to: 0
 25891  015B50  0100               	movlb	0	; () banked
 25892  015B52  90D8               	bcf	status,0,c
 25893  015B54  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 25894  015B56  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 25895  015B58  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 25896  015B5A  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 25897                           
 25898                           ; BSR set to: 0
 25899  015B5C  0100               	movlb	0	; () banked
 25900  015B5E  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 25901  015B60  D7CD               	goto	u11260
 25902  015B62                     l2896:
 25903                           
 25904                           ; BSR set to: 0
 25905                           
 25906                           ; BSR set to: 0
 25907  015B62  C068  F060         	movff	___lldiv@quotient,?___lldiv
 25908  015B66  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 25909  015B6A  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 25910  015B6E  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 25911                           
 25912                           ; BSR set to: 0
 25913  015B72  0012               	return		;funcret
 25914  015B74                     __end_of___lldiv:
 25915                           	opt stack 0
 25916                           tosu	equ	0xFFF
 25917                           tosh	equ	0xFFE
 25918                           tosl	equ	0xFFD
 25919                           pclath	equ	0xFFA
 25920                           tblptru	equ	0xFF8
 25921                           tblptrh	equ	0xFF7
 25922                           tblptrl	equ	0xFF6
 25923                           tablat	equ	0xFF5
 25924                           prodh	equ	0xFF4
 25925                           prodl	equ	0xFF3
 25926                           intcon	equ	0xFF2
 25927                           postinc0	equ	0xFEE
 25928                           wreg	equ	0xFE8
 25929                           indf1	equ	0xFE7
 25930                           postdec1	equ	0xFE5
 25931                           fsr1h	equ	0xFE2
 25932                           fsr1l	equ	0xFE1
 25933                           indf2	equ	0xFDF
 25934                           postinc2	equ	0xFDE
 25935                           postdec2	equ	0xFDD
 25936                           plusw2	equ	0xFDB
 25937                           fsr2h	equ	0xFDA
 25938                           fsr2l	equ	0xFD9
 25939                           status	equ	0xFD8
 25940                           
 25941 ;; *************** function _Timer2_Clear *****************
 25942 ;; Defined at:
 25943 ;;		line 3 in file "Library/Timer2.c"
 25944 ;; Parameters:    Size  Location     Type
 25945 ;;		None
 25946 ;; Auto vars:     Size  Location     Type
 25947 ;;		None
 25948 ;; Return value:  Size  Location     Type
 25949 ;;                  1    wreg      void 
 25950 ;; Registers used:
 25951 ;;		None
 25952 ;; Tracked objects:
 25953 ;;		On entry : 0/0
 25954 ;;		On exit  : 0/0
 25955 ;;		Unchanged: 0/0
 25956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25961 ;;Total ram usage:        0 bytes
 25962 ;; Hardware stack levels used:    1
 25963 ;; Hardware stack levels required when called:    7
 25964 ;; This function calls:
 25965 ;;		Nothing
 25966 ;; This function is called by:
 25967 ;;		_Timer2_Init
 25968 ;; This function uses a non-reentrant model
 25969 ;;
 25970                           
 25971                           	psect	text108
 25972  0180C2                     __ptext108:
 25973                           	opt stack 0
 25974  0180C2                     _Timer2_Clear:
 25975                           	opt stack 18
 25976                           
 25977                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 25978                           
 25979                           ; BSR set to: 0
 25980                           ;incstack = 0
 25981  0180C2  929E               	bcf	3998,1,c	;volatile
 25982                           
 25983                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 25984  0180C4  929D               	bcf	3997,1,c	;volatile
 25985                           
 25986                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 25987  0180C6  929F               	bcf	3999,1,c	;volatile
 25988  0180C8  0012               	return		;funcret
 25989  0180CA                     __end_of_Timer2_Clear:
 25990                           	opt stack 0
 25991                           tosu	equ	0xFFF
 25992                           tosh	equ	0xFFE
 25993                           tosl	equ	0xFFD
 25994                           pclath	equ	0xFFA
 25995                           tblptru	equ	0xFF8
 25996                           tblptrh	equ	0xFF7
 25997                           tblptrl	equ	0xFF6
 25998                           tablat	equ	0xFF5
 25999                           prodh	equ	0xFF4
 26000                           prodl	equ	0xFF3
 26001                           intcon	equ	0xFF2
 26002                           postinc0	equ	0xFEE
 26003                           wreg	equ	0xFE8
 26004                           indf1	equ	0xFE7
 26005                           postdec1	equ	0xFE5
 26006                           fsr1h	equ	0xFE2
 26007                           fsr1l	equ	0xFE1
 26008                           indf2	equ	0xFDF
 26009                           postinc2	equ	0xFDE
 26010                           postdec2	equ	0xFDD
 26011                           plusw2	equ	0xFDB
 26012                           fsr2h	equ	0xFDA
 26013                           fsr2l	equ	0xFD9
 26014                           status	equ	0xFD8
 26015                           
 26016 ;; *************** function _SPI_DisableISR *****************
 26017 ;; Defined at:
 26018 ;;		line 181 in file "Library/SPI.c"
 26019 ;; Parameters:    Size  Location     Type
 26020 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 26021 ;;		 -> SPI1(11), SPI2(11), 
 26022 ;; Auto vars:     Size  Location     Type
 26023 ;;		None
 26024 ;; Return value:  Size  Location     Type
 26025 ;;                  1    wreg      void 
 26026 ;; Registers used:
 26027 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26028 ;; Tracked objects:
 26029 ;;		On entry : 0/0
 26030 ;;		On exit  : 0/0
 26031 ;;		Unchanged: 0/0
 26032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26033 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26036 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26037 ;;Total ram usage:        2 bytes
 26038 ;; Hardware stack levels used:    1
 26039 ;; Hardware stack levels required when called:    7
 26040 ;; This function calls:
 26041 ;;		Nothing
 26042 ;; This function is called by:
 26043 ;;		_SPI_Init
 26044 ;; This function uses a non-reentrant model
 26045 ;;
 26046                           
 26047                           	psect	text109
 26048  017CAE                     __ptext109:
 26049                           	opt stack 0
 26050  017CAE                     _SPI_DisableISR:
 26051                           	opt stack 19
 26052                           
 26053                           ;SPI.c: 183: switch (pInput->mChannel)
 26054                           
 26055                           ;incstack = 0
 26056  017CAE  D004               	goto	l654
 26057  017CB0                     l655:
 26058                           
 26059                           ; BSR set to: 0
 26060  017CB0  969D               	bcf	3997,3,c	;volatile
 26061  017CB2  0012               	return	
 26062  017CB4                     l657:
 26063                           
 26064                           ; BSR set to: 0
 26065  017CB4  9EA3               	bcf	4003,7,c	;volatile
 26066                           
 26067                           ; BSR set to: 0
 26068                           ;SPI.c: 188: };
 26069                           
 26070                           ; BSR set to: 0
 26071                           
 26072                           ;SPI.c: 187: default: return;
 26073  017CB6  0012               	return	
 26074  017CB8                     l654:
 26075                           
 26076                           ; BSR set to: 0
 26077  017CB8  0100               	movlb	0	; () banked
 26078  017CBA  EE20 F002          	lfsr	2,2
 26079  017CBE  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 26080  017CC0  26D9               	addwf	fsr2l,f,c
 26081  017CC2  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 26082  017CC4  22DA               	addwfc	fsr2h,f,c
 26083  017CC6  50DF               	movf	indf2,w,c
 26084                           
 26085                           ; Switch size 1, requested type "space"
 26086                           ; Number of cases is 2, Range of values is 0 to 1
 26087                           ; switch strategies available:
 26088                           ; Name         Instructions Cycles
 26089                           ; simple_byte            7     4 (average)
 26090                           ;	Chosen strategy is simple_byte
 26091  017CC8  0A00               	xorlw	0	; case 0
 26092  017CCA  B4D8               	btfsc	status,2,c
 26093  017CCC  D7F1               	goto	l655
 26094  017CCE  0A01               	xorlw	1	; case 1
 26095  017CD0  A4D8               	btfss	status,2,c
 26096  017CD2  0012               	return	
 26097  017CD4  D7EF               	goto	l657
 26098  017CD6                     __end_of_SPI_DisableISR:
 26099                           	opt stack 0
 26100                           tosu	equ	0xFFF
 26101                           tosh	equ	0xFFE
 26102                           tosl	equ	0xFFD
 26103                           pclath	equ	0xFFA
 26104                           tblptru	equ	0xFF8
 26105                           tblptrh	equ	0xFF7
 26106                           tblptrl	equ	0xFF6
 26107                           tablat	equ	0xFF5
 26108                           prodh	equ	0xFF4
 26109                           prodl	equ	0xFF3
 26110                           intcon	equ	0xFF2
 26111                           postinc0	equ	0xFEE
 26112                           wreg	equ	0xFE8
 26113                           indf1	equ	0xFE7
 26114                           postdec1	equ	0xFE5
 26115                           fsr1h	equ	0xFE2
 26116                           fsr1l	equ	0xFE1
 26117                           indf2	equ	0xFDF
 26118                           postinc2	equ	0xFDE
 26119                           postdec2	equ	0xFDD
 26120                           plusw2	equ	0xFDB
 26121                           fsr2h	equ	0xFDA
 26122                           fsr2l	equ	0xFD9
 26123                           status	equ	0xFD8
 26124                           
 26125 ;; *************** function _SPI_DCS *****************
 26126 ;; Defined at:
 26127 ;;		line 219 in file "Library/SPI.c"
 26128 ;; Parameters:    Size  Location     Type
 26129 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 26130 ;;		 -> SPI1(11), SPI2(11), 
 26131 ;; Auto vars:     Size  Location     Type
 26132 ;;		None
 26133 ;; Return value:  Size  Location     Type
 26134 ;;                  1    wreg      void 
 26135 ;; Registers used:
 26136 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26137 ;; Tracked objects:
 26138 ;;		On entry : 0/0
 26139 ;;		On exit  : 0/0
 26140 ;;		Unchanged: 0/0
 26141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26142 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26145 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26146 ;;Total ram usage:        2 bytes
 26147 ;; Hardware stack levels used:    1
 26148 ;; Hardware stack levels required when called:    7
 26149 ;; This function calls:
 26150 ;;		Nothing
 26151 ;; This function is called by:
 26152 ;;		_SPI_Init
 26153 ;; This function uses a non-reentrant model
 26154 ;;
 26155                           
 26156                           	psect	text110
 26157  017B6E                     __ptext110:
 26158                           	opt stack 0
 26159  017B6E                     _SPI_DCS:
 26160                           	opt stack 19
 26161                           
 26162                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 26163                           
 26164                           ; BSR set to: 0
 26165                           ;incstack = 0
 26166  017B6E  0100               	movlb	0	; () banked
 26167  017B70  EE20 F002          	lfsr	2,2
 26168  017B74  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 26169  017B76  26D9               	addwf	fsr2l,f,c
 26170  017B78  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 26171  017B7A  22DA               	addwfc	fsr2h,f,c
 26172  017B7C  50DF               	movf	indf2,w,c
 26173  017B7E  A4D8               	btfss	status,2,c
 26174  017B80  D007               	goto	l673
 26175                           
 26176                           ; BSR set to: 0
 26177                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 26178  017B82  C3B1  FFD9         	movff	_PortC+4,fsr2l
 26179  017B86  C3B2  FFDA         	movff	_PortC+5,fsr2h
 26180  017B8A  0103               	movlb	3	; () banked
 26181  017B8C  84DF               	bsf	indf2,2,c
 26182  017B8E  0012               	return	
 26183  017B90                     l673:
 26184                           
 26185                           ;SPI.c: 223: else
 26186                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 26187                           
 26188                           ; BSR set to: 3
 26189  017B90  C39D  FFD9         	movff	_PortD+4,fsr2l
 26190  017B94  C39E  FFDA         	movff	_PortD+5,fsr2h
 26191  017B98  0103               	movlb	3	; () banked
 26192  017B9A  8EDF               	bsf	indf2,7,c
 26193  017B9C  0012               	return	
 26194  017B9E                     __end_of_SPI_DCS:
 26195                           	opt stack 0
 26196                           tosu	equ	0xFFF
 26197                           tosh	equ	0xFFE
 26198                           tosl	equ	0xFFD
 26199                           pclath	equ	0xFFA
 26200                           tblptru	equ	0xFF8
 26201                           tblptrh	equ	0xFF7
 26202                           tblptrl	equ	0xFF6
 26203                           tablat	equ	0xFF5
 26204                           prodh	equ	0xFF4
 26205                           prodl	equ	0xFF3
 26206                           intcon	equ	0xFF2
 26207                           postinc0	equ	0xFEE
 26208                           wreg	equ	0xFE8
 26209                           indf1	equ	0xFE7
 26210                           postdec1	equ	0xFE5
 26211                           fsr1h	equ	0xFE2
 26212                           fsr1l	equ	0xFE1
 26213                           indf2	equ	0xFDF
 26214                           postinc2	equ	0xFDE
 26215                           postdec2	equ	0xFDD
 26216                           plusw2	equ	0xFDB
 26217                           fsr2h	equ	0xFDA
 26218                           fsr2l	equ	0xFD9
 26219                           status	equ	0xFD8
 26220                           
 26221 ;; *************** function _Button_Init *****************
 26222 ;; Defined at:
 26223 ;;		line 18 in file "Library/Button.c"
 26224 ;; Parameters:    Size  Location     Type
 26225 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 26226 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 26227 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 26228 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 26229 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 26230 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 26231 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 26232 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 26233 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 26234 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 26235 ;; Auto vars:     Size  Location     Type
 26236 ;;		None
 26237 ;; Return value:  Size  Location     Type
 26238 ;;                  1    wreg      void 
 26239 ;; Registers used:
 26240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26241 ;; Tracked objects:
 26242 ;;		On entry : 0/0
 26243 ;;		On exit  : 0/0
 26244 ;;		Unchanged: 0/0
 26245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26246 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26249 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26250 ;;Total ram usage:       13 bytes
 26251 ;; Hardware stack levels used:    1
 26252 ;; Hardware stack levels required when called:   15
 26253 ;; This function calls:
 26254 ;;		_HMI_InitButtons
 26255 ;;		_MXK_InitDIPSwitch
 26256 ;;		_MXK_InitTestButton
 26257 ;; This function is called by:
 26258 ;;		_HMI_Init
 26259 ;;		_FunctInitButton
 26260 ;; This function uses a non-reentrant model
 26261 ;;
 26262                           
 26263                           	psect	text111
 26264  015610                     __ptext111:
 26265                           	opt stack 0
 26266  015610                     _Button_Init:
 26267                           	opt stack 13
 26268                           
 26269                           ;Button.c: 21: if(pInput==(void*)0)
 26270                           
 26271                           ; BSR set to: 3
 26272                           ;incstack = 0
 26273  015610  0100               	movlb	0	; () banked
 26274  015612  519B               	movf	Button_Init@pInput& (0+255),w,b
 26275  015614  0100               	movlb	0	; () banked
 26276  015616  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 26277  015618  B4D8               	btfsc	status,2,c
 26278  01561A  0012               	return	
 26279                           
 26280                           ; BSR set to: 0
 26281                           ;Button.c: 23: if(pInitIO==(void*)0)
 26282                           
 26283                           ; BSR set to: 0
 26284                           
 26285                           ; BSR set to: 0
 26286                           ;Button.c: 22: return;
 26287  01561C  0100               	movlb	0	; () banked
 26288  01561E  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 26289  015620  0100               	movlb	0	; () banked
 26290  015622  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 26291  015624  0100               	movlb	0	; () banked
 26292  015626  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 26293  015628  B4D8               	btfsc	status,2,c
 26294  01562A  0012               	return	
 26295                           
 26296                           ; BSR set to: 0
 26297                           ;Button.c: 25: if(pGetState==(void*)0)
 26298                           
 26299                           ; BSR set to: 0
 26300                           
 26301                           ; BSR set to: 0
 26302                           ;Button.c: 24: return;
 26303  01562C  0100               	movlb	0	; () banked
 26304  01562E  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 26305  015630  0100               	movlb	0	; () banked
 26306  015632  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 26307  015634  0100               	movlb	0	; () banked
 26308  015636  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 26309  015638  B4D8               	btfsc	status,2,c
 26310  01563A  0012               	return	
 26311                           
 26312                           ; BSR set to: 0
 26313                           ;Button.c: 27: if(pFunction==(void*)0)
 26314                           
 26315                           ; BSR set to: 0
 26316                           
 26317                           ; BSR set to: 0
 26318                           ;Button.c: 26: return;
 26319  01563C  0100               	movlb	0	; () banked
 26320  01563E  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 26321  015640  0100               	movlb	0	; () banked
 26322  015642  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 26323  015644  0100               	movlb	0	; () banked
 26324  015646  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 26325  015648  B4D8               	btfsc	status,2,c
 26326  01564A  0012               	return	
 26327                           
 26328                           ; BSR set to: 0
 26329                           ;Button.c: 30: if(pThreshold == 0)
 26330                           
 26331                           ; BSR set to: 0
 26332                           
 26333                           ; BSR set to: 0
 26334                           ;Button.c: 28: return;
 26335  01564C  0100               	movlb	0	; () banked
 26336  01564E  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 26337  015650  0100               	movlb	0	; () banked
 26338  015652  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 26339  015654  A4D8               	btfss	status,2,c
 26340  015656  D005               	goto	l8
 26341                           
 26342                           ; BSR set to: 0
 26343                           ;Button.c: 31: pThreshold = 1;
 26344  015658  0E00               	movlw	0
 26345  01565A  0100               	movlb	0	; () banked
 26346  01565C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 26347  01565E  0E01               	movlw	1
 26348  015660  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 26349  015662                     l8:
 26350                           
 26351                           ; BSR set to: 0
 26352                           ;Button.c: 34: pInput->mState = 0;
 26353                           
 26354                           ; BSR set to: 0
 26355  015662  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 26356  015666  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 26357  01566A  0E00               	movlw	0
 26358  01566C  6EDF               	movwf	indf2,c
 26359                           
 26360                           ; BSR set to: 0
 26361                           ;Button.c: 35: pInput->mCount = 0;
 26362  01566E  0100               	movlb	0	; () banked
 26363  015670  EE20 F001          	lfsr	2,1
 26364  015674  519B               	movf	Button_Init@pInput& (0+255),w,b
 26365  015676  26D9               	addwf	fsr2l,f,c
 26366  015678  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 26367  01567A  22DA               	addwfc	fsr2h,f,c
 26368  01567C  0E00               	movlw	0
 26369  01567E  6EDF               	movwf	indf2,c
 26370                           
 26371                           ; BSR set to: 0
 26372                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 26373  015680  0100               	movlb	0	; () banked
 26374  015682  EE20 F002          	lfsr	2,2
 26375  015686  519B               	movf	Button_Init@pInput& (0+255),w,b
 26376  015688  26D9               	addwf	fsr2l,f,c
 26377  01568A  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 26378  01568C  22DA               	addwfc	fsr2h,f,c
 26379  01568E  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 26380  015692  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 26381                           
 26382                           ; BSR set to: 0
 26383                           ;Button.c: 37: pInput->mFunction = pFunction;
 26384  015696  0100               	movlb	0	; () banked
 26385  015698  EE20 F004          	lfsr	2,4
 26386  01569C  519B               	movf	Button_Init@pInput& (0+255),w,b
 26387  01569E  26D9               	addwf	fsr2l,f,c
 26388  0156A0  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 26389  0156A2  22DA               	addwfc	fsr2h,f,c
 26390  0156A4  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 26391  0156A8  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 26392  0156AC  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 26393                           
 26394                           ; BSR set to: 0
 26395                           ;Button.c: 38: pInput->mGetState = pGetState;
 26396  0156B0  0100               	movlb	0	; () banked
 26397  0156B2  EE20 F007          	lfsr	2,7
 26398  0156B6  519B               	movf	Button_Init@pInput& (0+255),w,b
 26399  0156B8  26D9               	addwf	fsr2l,f,c
 26400  0156BA  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 26401  0156BC  22DA               	addwfc	fsr2h,f,c
 26402  0156BE  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 26403  0156C2  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 26404  0156C6  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 26405                           
 26406                           ; BSR set to: 0
 26407                           ;Button.c: 41: pInitIO();
 26408  0156CA  D801               	call	u12458
 26409  0156CC  0012               	return	
 26410  0156CE                     u12458:
 26411  0156CE  0005               	push	
 26412  0156D0  6EFA               	movwf	pclath,c
 26413  0156D2  0100               	movlb	0	; () banked
 26414  0156D4  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 26415  0156D6  6EFD               	movwf	tosl,c
 26416  0156D8  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 26417  0156DA  6EFE               	movwf	tosh,c
 26418  0156DC  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 26419  0156DE  6EFF               	movwf	tosu,c
 26420  0156E0  50FA               	movf	pclath,w,c
 26421  0156E2  0012               	return		;indir
 26422  0156E4                     __end_of_Button_Init:
 26423                           	opt stack 0
 26424                           tosu	equ	0xFFF
 26425                           tosh	equ	0xFFE
 26426                           tosl	equ	0xFFD
 26427                           pclath	equ	0xFFA
 26428                           tblptru	equ	0xFF8
 26429                           tblptrh	equ	0xFF7
 26430                           tblptrl	equ	0xFF6
 26431                           tablat	equ	0xFF5
 26432                           prodh	equ	0xFF4
 26433                           prodl	equ	0xFF3
 26434                           intcon	equ	0xFF2
 26435                           postinc0	equ	0xFEE
 26436                           wreg	equ	0xFE8
 26437                           indf1	equ	0xFE7
 26438                           postdec1	equ	0xFE5
 26439                           fsr1h	equ	0xFE2
 26440                           fsr1l	equ	0xFE1
 26441                           indf2	equ	0xFDF
 26442                           postinc2	equ	0xFDE
 26443                           postdec2	equ	0xFDD
 26444                           plusw2	equ	0xFDB
 26445                           fsr2h	equ	0xFDA
 26446                           fsr2l	equ	0xFD9
 26447                           status	equ	0xFD8
 26448                           
 26449 ;; *************** function _MXK_InitDIPSwitch *****************
 26450 ;; Defined at:
 26451 ;;		line 20 in file "Library/MXK.c"
 26452 ;; Parameters:    Size  Location     Type
 26453 ;;		None
 26454 ;; Auto vars:     Size  Location     Type
 26455 ;;		None
 26456 ;; Return value:  Size  Location     Type
 26457 ;;                  1    wreg      void 
 26458 ;; Registers used:
 26459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26460 ;; Tracked objects:
 26461 ;;		On entry : 0/0
 26462 ;;		On exit  : 0/0
 26463 ;;		Unchanged: 0/0
 26464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26469 ;;Total ram usage:        0 bytes
 26470 ;; Hardware stack levels used:    1
 26471 ;; Hardware stack levels required when called:   14
 26472 ;; This function calls:
 26473 ;;		_Port_SetQuadType
 26474 ;; This function is called by:
 26475 ;;		_FunctInitButton
 26476 ;;		_Button_Init
 26477 ;; This function uses a non-reentrant model
 26478 ;;
 26479                           
 26480                           	psect	text112
 26481  017E18                     __ptext112:
 26482                           	opt stack 0
 26483  017E18                     _MXK_InitDIPSwitch:
 26484                           	opt stack 13
 26485                           
 26486                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 26487                           
 26488                           ;incstack = 0
 26489  017E18  0E99               	movlw	low _PortD
 26490  017E1A  0100               	movlb	0	; () banked
 26491  017E1C  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 26492  017E1E  0E03               	movlw	high _PortD
 26493  017E20  0100               	movlb	0	; () banked
 26494  017E22  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 26495  017E24  0E00               	movlw	0
 26496  017E26  0100               	movlb	0	; () banked
 26497  017E28  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 26498  017E2A  0E00               	movlw	0
 26499  017E2C  0100               	movlb	0	; () banked
 26500  017E2E  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 26501  017E30  EC63  F098         	call	_Port_SetQuadType	;wreg free
 26502  017E34  0012               	return		;funcret
 26503  017E36                     __end_of_MXK_InitDIPSwitch:
 26504                           	opt stack 0
 26505                           tosu	equ	0xFFF
 26506                           tosh	equ	0xFFE
 26507                           tosl	equ	0xFFD
 26508                           pclath	equ	0xFFA
 26509                           tblptru	equ	0xFF8
 26510                           tblptrh	equ	0xFF7
 26511                           tblptrl	equ	0xFF6
 26512                           tablat	equ	0xFF5
 26513                           prodh	equ	0xFF4
 26514                           prodl	equ	0xFF3
 26515                           intcon	equ	0xFF2
 26516                           postinc0	equ	0xFEE
 26517                           wreg	equ	0xFE8
 26518                           indf1	equ	0xFE7
 26519                           postdec1	equ	0xFE5
 26520                           fsr1h	equ	0xFE2
 26521                           fsr1l	equ	0xFE1
 26522                           indf2	equ	0xFDF
 26523                           postinc2	equ	0xFDE
 26524                           postdec2	equ	0xFDD
 26525                           plusw2	equ	0xFDB
 26526                           fsr2h	equ	0xFDA
 26527                           fsr2l	equ	0xFD9
 26528                           status	equ	0xFD8
 26529                           
 26530 ;; *************** function _HMI_InitButtons *****************
 26531 ;; Defined at:
 26532 ;;		line 21 in file "HMI.c"
 26533 ;; Parameters:    Size  Location     Type
 26534 ;;		None
 26535 ;; Auto vars:     Size  Location     Type
 26536 ;;		None
 26537 ;; Return value:  Size  Location     Type
 26538 ;;                  1    wreg      void 
 26539 ;; Registers used:
 26540 ;;		wreg, status,2
 26541 ;; Tracked objects:
 26542 ;;		On entry : 0/0
 26543 ;;		On exit  : 0/0
 26544 ;;		Unchanged: 0/0
 26545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26550 ;;Total ram usage:        0 bytes
 26551 ;; Hardware stack levels used:    1
 26552 ;; Hardware stack levels required when called:    7
 26553 ;; This function calls:
 26554 ;;		Nothing
 26555 ;; This function is called by:
 26556 ;;		_HMI_Init
 26557 ;;		_Button_Init
 26558 ;; This function uses a non-reentrant model
 26559 ;;
 26560                           
 26561                           	psect	text113
 26562  0180D8                     __ptext113:
 26563                           	opt stack 0
 26564  0180D8                     _HMI_InitButtons:
 26565                           	opt stack 20
 26566                           
 26567                           ;HMI.c: 23: TRISE = 0xFC;
 26568                           
 26569                           ;incstack = 0
 26570  0180D8  0EFC               	movlw	252
 26571  0180DA  6E96               	movwf	3990,c	;volatile
 26572  0180DC  0012               	return		;funcret
 26573  0180DE                     __end_of_HMI_InitButtons:
 26574                           	opt stack 0
 26575                           tosu	equ	0xFFF
 26576                           tosh	equ	0xFFE
 26577                           tosl	equ	0xFFD
 26578                           pclath	equ	0xFFA
 26579                           tblptru	equ	0xFF8
 26580                           tblptrh	equ	0xFF7
 26581                           tblptrl	equ	0xFF6
 26582                           tablat	equ	0xFF5
 26583                           prodh	equ	0xFF4
 26584                           prodl	equ	0xFF3
 26585                           intcon	equ	0xFF2
 26586                           postinc0	equ	0xFEE
 26587                           wreg	equ	0xFE8
 26588                           indf1	equ	0xFE7
 26589                           postdec1	equ	0xFE5
 26590                           fsr1h	equ	0xFE2
 26591                           fsr1l	equ	0xFE1
 26592                           indf2	equ	0xFDF
 26593                           postinc2	equ	0xFDE
 26594                           postdec2	equ	0xFDD
 26595                           plusw2	equ	0xFDB
 26596                           fsr2h	equ	0xFDA
 26597                           fsr2l	equ	0xFD9
 26598                           status	equ	0xFD8
 26599                           
 26600 ;; *************** function _MXK_InitTestButton *****************
 26601 ;; Defined at:
 26602 ;;		line 10 in file "Library/MXK.c"
 26603 ;; Parameters:    Size  Location     Type
 26604 ;;		None
 26605 ;; Auto vars:     Size  Location     Type
 26606 ;;		None
 26607 ;; Return value:  Size  Location     Type
 26608 ;;                  1    wreg      void 
 26609 ;; Registers used:
 26610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26611 ;; Tracked objects:
 26612 ;;		On entry : 0/0
 26613 ;;		On exit  : 0/0
 26614 ;;		Unchanged: 0/0
 26615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26620 ;;Total ram usage:        0 bytes
 26621 ;; Hardware stack levels used:    1
 26622 ;; Hardware stack levels required when called:   12
 26623 ;; This function calls:
 26624 ;;		_Port_SetPinType
 26625 ;; This function is called by:
 26626 ;;		_FunctInitButton
 26627 ;;		_Button_Init
 26628 ;; This function uses a non-reentrant model
 26629 ;;
 26630                           
 26631                           	psect	text114
 26632  017E36                     __ptext114:
 26633                           	opt stack 0
 26634  017E36                     _MXK_InitTestButton:
 26635                           	opt stack 15
 26636                           
 26637                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 26638                           
 26639                           ;incstack = 0
 26640  017E36  0EA3               	movlw	low _PortB
 26641  017E38  0100               	movlb	0	; () banked
 26642  017E3A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 26643  017E3C  0E03               	movlw	high _PortB
 26644  017E3E  0100               	movlb	0	; () banked
 26645  017E40  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 26646  017E42  0E04               	movlw	4
 26647  017E44  0100               	movlb	0	; () banked
 26648  017E46  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 26649  017E48  0E00               	movlw	0
 26650  017E4A  0100               	movlb	0	; () banked
 26651  017E4C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 26652  017E4E  EC8E  F09D         	call	_Port_SetPinType	;wreg free
 26653  017E52  0012               	return		;funcret
 26654  017E54                     __end_of_MXK_InitTestButton:
 26655                           	opt stack 0
 26656                           tosu	equ	0xFFF
 26657                           tosh	equ	0xFFE
 26658                           tosl	equ	0xFFD
 26659                           pclath	equ	0xFFA
 26660                           tblptru	equ	0xFF8
 26661                           tblptrh	equ	0xFF7
 26662                           tblptrl	equ	0xFF6
 26663                           tablat	equ	0xFF5
 26664                           prodh	equ	0xFF4
 26665                           prodl	equ	0xFF3
 26666                           intcon	equ	0xFF2
 26667                           postinc0	equ	0xFEE
 26668                           wreg	equ	0xFE8
 26669                           indf1	equ	0xFE7
 26670                           postdec1	equ	0xFE5
 26671                           fsr1h	equ	0xFE2
 26672                           fsr1l	equ	0xFE1
 26673                           indf2	equ	0xFDF
 26674                           postinc2	equ	0xFDE
 26675                           postdec2	equ	0xFDD
 26676                           plusw2	equ	0xFDB
 26677                           fsr2h	equ	0xFDA
 26678                           fsr2l	equ	0xFD9
 26679                           status	equ	0xFD8
 26680                           
 26681 ;; *************** function _Port_SetPinType *****************
 26682 ;; Defined at:
 26683 ;;		line 189 in file "Library/Port.c"
 26684 ;; Parameters:    Size  Location     Type
 26685 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 26686 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 26687 ;;		 -> PortD(10), PortC(10), PortF(10), 
 26688 ;;  pPin            1   40[BANK0 ] enum E6750
 26689 ;;  pType           1   41[BANK0 ] enum E6795
 26690 ;; Auto vars:     Size  Location     Type
 26691 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 26692 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 26693 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 26694 ;;  Output          1   42[BANK0 ] enum E6475
 26695 ;; Return value:  Size  Location     Type
 26696 ;;                  1    wreg      enum E6475
 26697 ;; Registers used:
 26698 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26699 ;; Tracked objects:
 26700 ;;		On entry : 0/0
 26701 ;;		On exit  : 0/0
 26702 ;;		Unchanged: 0/0
 26703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26704 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26705 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26707 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26708 ;;Total ram usage:        7 bytes
 26709 ;; Hardware stack levels used:    1
 26710 ;; Hardware stack levels required when called:   11
 26711 ;; This function calls:
 26712 ;;		_Byte_SetBit
 26713 ;;		_PortProperty_Valid
 26714 ;;		_Word_SetPair
 26715 ;; This function is called by:
 26716 ;;		_Configure_GPIOs
 26717 ;;		_LED_Init
 26718 ;;		_Port_Init
 26719 ;;		_SPI_Init
 26720 ;;		_Motor_Init
 26721 ;;		_MXK_InitTestButton
 26722 ;;		_MXK_Init
 26723 ;;		_I2C_Init
 26724 ;; This function uses a non-reentrant model
 26725 ;;
 26726                           
 26727                           	psect	text115
 26728  013B1C                     __ptext115:
 26729                           	opt stack 0
 26730  013B1C                     _Port_SetPinType:
 26731                           	opt stack 17
 26732                           
 26733                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 26734                           
 26735                           ;incstack = 0
 26736  013B1C  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 26737  013B20  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 26738  013B24  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 26739  013B28  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 26740                           
 26741                           ;Port.c: 192: ePinError Output = ePinErrorState;
 26742  013B2C  0E05               	movlw	5
 26743  013B2E  0100               	movlb	0	; () banked
 26744  013B30  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 26745                           
 26746                           ;Port.c: 193: switch (pType)
 26747  013B32  D0B5               	goto	l412
 26748  013B34                     
 26749                           ; BSR set to: 0
 26750                           ;Port.c: 197: {
 26751                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 26752                           
 26753                           ; BSR set to: 0
 26754  013B34  0100               	movlb	0	; () banked
 26755  013B36  EE20 F002          	lfsr	2,2
 26756  013B3A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 26757  013B3C  26D9               	addwf	fsr2l,f,c
 26758  013B3E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 26759  013B40  22DA               	addwfc	fsr2h,f,c
 26760  013B42  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 26761  013B46  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 26762  013B4A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 26763  013B4E  0E01               	movlw	1
 26764  013B50  0100               	movlb	0	; () banked
 26765  013B52  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 26766  013B54  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 26767                           
 26768                           ;Port.c: 203: break;
 26769  013B58  D0B0               	goto	l414
 26770  013B5A                     
 26771                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 26772  013B5A  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 26773  013B5E  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 26774  013B62  0E01               	movlw	1
 26775  013B64  0100               	movlb	0	; () banked
 26776  013B66  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 26777  013B68  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 26778  013B6C  EC58  F0B5         	call	_PortProperty_Valid	;wreg free
 26779  013B70  0100               	movlb	0	; () banked
 26780  013B72  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 26781  013B74  0100               	movlb	0	; () banked
 26782  013B76  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 26783  013B78  A4D8               	btfss	status,2,c
 26784  013B7A  0012               	return	
 26785                           
 26786                           ; BSR set to: 0
 26787                           ;Port.c: 208: {
 26788                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 26789  013B7C  0100               	movlb	0	; () banked
 26790  013B7E  EE20 F002          	lfsr	2,2
 26791  013B82  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 26792  013B84  26D9               	addwf	fsr2l,f,c
 26793  013B86  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 26794  013B88  22DA               	addwfc	fsr2h,f,c
 26795  013B8A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 26796  013B8E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 26797  013B92  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 26798  013B96  0E00               	movlw	0
 26799  013B98  0100               	movlb	0	; () banked
 26800  013B9A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 26801  013B9C  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 26802                           
 26803                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 26804  013BA0  0100               	movlb	0	; () banked
 26805  013BA2  EE20 F004          	lfsr	2,4
 26806  013BA6  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 26807  013BA8  26D9               	addwf	fsr2l,f,c
 26808  013BAA  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 26809  013BAC  22DA               	addwfc	fsr2h,f,c
 26810  013BAE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 26811  013BB2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 26812  013BB6  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 26813  013BBA  0E00               	movlw	0
 26814  013BBC  0100               	movlb	0	; () banked
 26815  013BBE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 26816  013BC0  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 26817                           
 26818                           ;Port.c: 214: break;
 26819  013BC4  D07A               	goto	l414
 26820  013BC6                     
 26821                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 26822                           
 26823                           ;Port.c: 218: case eTypeOutputOpenSource:
 26824  013BC6  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 26825  013BCA  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 26826  013BCE  0E02               	movlw	2
 26827  013BD0  0100               	movlb	0	; () banked
 26828  013BD2  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 26829  013BD4  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 26830  013BD8  EC58  F0B5         	call	_PortProperty_Valid	;wreg free
 26831  013BDC  0100               	movlb	0	; () banked
 26832  013BDE  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 26833  013BE0  0100               	movlb	0	; () banked
 26834  013BE2  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 26835  013BE4  A4D8               	btfss	status,2,c
 26836  013BE6  0012               	return	
 26837                           
 26838                           ; BSR set to: 0
 26839                           ;Port.c: 220: {
 26840                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 26841  013BE8  0100               	movlb	0	; () banked
 26842  013BEA  EE20 F002          	lfsr	2,2
 26843  013BEE  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 26844  013BF0  26D9               	addwf	fsr2l,f,c
 26845  013BF2  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 26846  013BF4  22DA               	addwfc	fsr2h,f,c
 26847  013BF6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 26848  013BFA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 26849  013BFE  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 26850  013C02  0E01               	movlw	1
 26851  013C04  0100               	movlb	0	; () banked
 26852  013C06  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 26853  013C08  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 26854                           
 26855                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 26856  013C0C  0100               	movlb	0	; () banked
 26857  013C0E  EE20 F004          	lfsr	2,4
 26858  013C12  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 26859  013C14  26D9               	addwf	fsr2l,f,c
 26860  013C16  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 26861  013C18  22DA               	addwfc	fsr2h,f,c
 26862  013C1A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 26863  013C1E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 26864  013C22  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 26865  013C26  0E01               	movlw	1
 26866  013C28  0100               	movlb	0	; () banked
 26867  013C2A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 26868  013C2C  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 26869                           
 26870                           ;Port.c: 226: break;
 26871  013C30  D044               	goto	l414
 26872  013C32                     
 26873                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 26874                           
 26875                           ;Port.c: 230: case eTypeOutputPushPull:
 26876  013C32  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 26877  013C36  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 26878  013C3A  0E00               	movlw	0
 26879  013C3C  0100               	movlb	0	; () banked
 26880  013C3E  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 26881  013C40  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 26882  013C44  EC58  F0B5         	call	_PortProperty_Valid	;wreg free
 26883  013C48  0100               	movlb	0	; () banked
 26884  013C4A  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 26885  013C4C  0100               	movlb	0	; () banked
 26886  013C4E  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 26887  013C50  A4D8               	btfss	status,2,c
 26888  013C52  0012               	return	
 26889                           
 26890                           ; BSR set to: 0
 26891                           ;Port.c: 232: {
 26892                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 26893  013C54  0100               	movlb	0	; () banked
 26894  013C56  EE20 F002          	lfsr	2,2
 26895  013C5A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 26896  013C5C  26D9               	addwf	fsr2l,f,c
 26897  013C5E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 26898  013C60  22DA               	addwfc	fsr2h,f,c
 26899  013C62  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 26900  013C66  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 26901  013C6A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 26902  013C6E  0E00               	movlw	0
 26903  013C70  0100               	movlb	0	; () banked
 26904  013C72  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 26905  013C74  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 26906                           
 26907                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 26908  013C78  0100               	movlb	0	; () banked
 26909  013C7A  EE20 F004          	lfsr	2,4
 26910  013C7E  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 26911  013C80  26D9               	addwf	fsr2l,f,c
 26912  013C82  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 26913  013C84  22DA               	addwfc	fsr2h,f,c
 26914  013C86  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 26915  013C8A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 26916  013C8E  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 26917  013C92  0E00               	movlw	0
 26918  013C94  0100               	movlb	0	; () banked
 26919  013C96  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 26920  013C98  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 26921                           
 26922                           ;Port.c: 239: }
 26923                           
 26924                           ;Port.c: 238: break;
 26925  013C9C  D00E               	goto	l414
 26926  013C9E                     l412:
 26927  013C9E  0100               	movlb	0	; () banked
 26928  013CA0  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 26929                           
 26930                           ; Switch size 1, requested type "space"
 26931                           ; Number of cases is 4, Range of values is 0 to 3
 26932                           ; switch strategies available:
 26933                           ; Name         Instructions Cycles
 26934                           ; simple_byte           13     7 (average)
 26935                           ;	Chosen strategy is simple_byte
 26936  013CA2  0A00               	xorlw	0	; case 0
 26937  013CA4  B4D8               	btfsc	status,2,c
 26938  013CA6  D746               	goto	l413
 26939  013CA8  0A01               	xorlw	1	; case 1
 26940  013CAA  B4D8               	btfsc	status,2,c
 26941  013CAC  D756               	goto	l415
 26942  013CAE  0A03               	xorlw	3	; case 2
 26943  013CB0  B4D8               	btfsc	status,2,c
 26944  013CB2  D789               	goto	l417
 26945  013CB4  0A01               	xorlw	1	; case 3
 26946  013CB6  B4D8               	btfsc	status,2,c
 26947  013CB8  D7BC               	goto	l421
 26948  013CBA                     l414:
 26949                           
 26950                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 26951                           
 26952                           ; BSR set to: 0
 26953  013CBA  0E08               	movlw	8
 26954  013CBC  0100               	movlb	0	; () banked
 26955  013CBE  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 26956  013CC0  0100               	movlb	0	; () banked
 26957  013CC2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 26958  013CC4  0E00               	movlw	0
 26959  013CC6  0100               	movlb	0	; () banked
 26960  013CC8  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 26961  013CCA  0100               	movlb	0	; () banked
 26962  013CCC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 26963  013CCE  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 26964  013CD2  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 26965  013CD6  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 26966  013CDA  0012               	return	
 26967  013CDC                     __end_of_Port_SetPinType:
 26968                           	opt stack 0
 26969                           tosu	equ	0xFFF
 26970                           tosh	equ	0xFFE
 26971                           tosl	equ	0xFFD
 26972                           pclath	equ	0xFFA
 26973                           tblptru	equ	0xFF8
 26974                           tblptrh	equ	0xFF7
 26975                           tblptrl	equ	0xFF6
 26976                           tablat	equ	0xFF5
 26977                           prodh	equ	0xFF4
 26978                           prodl	equ	0xFF3
 26979                           intcon	equ	0xFF2
 26980                           postinc0	equ	0xFEE
 26981                           wreg	equ	0xFE8
 26982                           indf1	equ	0xFE7
 26983                           postdec1	equ	0xFE5
 26984                           fsr1h	equ	0xFE2
 26985                           fsr1l	equ	0xFE1
 26986                           indf2	equ	0xFDF
 26987                           postinc2	equ	0xFDE
 26988                           postdec2	equ	0xFDD
 26989                           plusw2	equ	0xFDB
 26990                           fsr2h	equ	0xFDA
 26991                           fsr2l	equ	0xFD9
 26992                           status	equ	0xFD8
 26993                           
 26994 ;; *************** function _Port_SetQuadType *****************
 26995 ;; Defined at:
 26996 ;;		line 399 in file "Library/Port.c"
 26997 ;; Parameters:    Size  Location     Type
 26998 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 26999 ;;		 -> PortB(10), PortD(10), 
 27000 ;;  pQuad           1   56[BANK0 ] enum E6776
 27001 ;;  pType           1   57[BANK0 ] enum E6795
 27002 ;; Auto vars:     Size  Location     Type
 27003 ;;  Output          1   58[BANK0 ] enum E6475
 27004 ;; Return value:  Size  Location     Type
 27005 ;;                  1    wreg      enum E6475
 27006 ;; Registers used:
 27007 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27008 ;; Tracked objects:
 27009 ;;		On entry : 0/0
 27010 ;;		On exit  : 0/0
 27011 ;;		Unchanged: 0/0
 27012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27013 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27016 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27017 ;;Total ram usage:        5 bytes
 27018 ;; Hardware stack levels used:    1
 27019 ;; Hardware stack levels required when called:   13
 27020 ;; This function calls:
 27021 ;;		_Byte_SetQuad
 27022 ;;		_Port_CheckQuadType
 27023 ;;		_Word_SetPair
 27024 ;; This function is called by:
 27025 ;;		_MXK_InitDIPSwitch
 27026 ;;		_MXK_Init
 27027 ;; This function uses a non-reentrant model
 27028 ;;
 27029                           
 27030                           	psect	text116
 27031  0130C6                     __ptext116:
 27032                           	opt stack 0
 27033  0130C6                     _Port_SetQuadType:
 27034                           	opt stack 15
 27035                           
 27036                           ;Port.c: 401: ePinError Output = ePinErrorState;
 27037                           
 27038                           ;incstack = 0
 27039  0130C6  0E05               	movlw	5
 27040  0130C8  0100               	movlb	0	; () banked
 27041  0130CA  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 27042                           
 27043                           ;Port.c: 403: switch (pType)
 27044  0130CC  D0C7               	goto	l476
 27045  0130CE                     
 27046                           ; BSR set to: 0
 27047                           ;Port.c: 407: {
 27048                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 27049                           
 27050                           ; BSR set to: 0
 27051  0130CE  0100               	movlb	0	; () banked
 27052  0130D0  EE20 F002          	lfsr	2,2
 27053  0130D4  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 27054  0130D6  26D9               	addwf	fsr2l,f,c
 27055  0130D8  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27056  0130DA  22DA               	addwfc	fsr2h,f,c
 27057  0130DC  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 27058  0130E0  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 27059  0130E4  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 27060  0130E8  0E0F               	movlw	15
 27061  0130EA  0100               	movlb	0	; () banked
 27062  0130EC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 27063  0130EE  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 27064                           
 27065                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 27066  0130F2  0100               	movlb	0	; () banked
 27067  0130F4  EE20 F004          	lfsr	2,4
 27068  0130F8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 27069  0130FA  26D9               	addwf	fsr2l,f,c
 27070  0130FC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27071  0130FE  22DA               	addwfc	fsr2h,f,c
 27072  013100  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 27073  013104  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 27074  013108  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 27075  01310C  0E00               	movlw	0
 27076  01310E  0100               	movlb	0	; () banked
 27077  013110  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 27078  013112  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 27079                           
 27080                           ;Port.c: 413: }
 27081                           ;Port.c: 415: break;
 27082  013116  D0B0               	goto	l478
 27083  013118                     
 27084                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 27085  013118  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 27086  01311C  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 27087  013120  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 27088  013124  0E03               	movlw	3
 27089  013126  0100               	movlb	0	; () banked
 27090  013128  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 27091  01312A  EC9E  F0B9         	call	_Port_CheckQuadType	;wreg free
 27092  01312E  0100               	movlb	0	; () banked
 27093  013130  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 27094  013132  0100               	movlb	0	; () banked
 27095  013134  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 27096  013136  A4D8               	btfss	status,2,c
 27097  013138  0012               	return	
 27098                           
 27099                           ; BSR set to: 0
 27100                           ;Port.c: 418: {
 27101                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 27102  01313A  0100               	movlb	0	; () banked
 27103  01313C  EE20 F002          	lfsr	2,2
 27104  013140  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 27105  013142  26D9               	addwf	fsr2l,f,c
 27106  013144  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27107  013146  22DA               	addwfc	fsr2h,f,c
 27108  013148  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 27109  01314C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 27110  013150  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 27111  013154  0E00               	movlw	0
 27112  013156  0100               	movlb	0	; () banked
 27113  013158  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 27114  01315A  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 27115                           
 27116                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 27117  01315E  0100               	movlb	0	; () banked
 27118  013160  EE20 F004          	lfsr	2,4
 27119  013164  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 27120  013166  26D9               	addwf	fsr2l,f,c
 27121  013168  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27122  01316A  22DA               	addwfc	fsr2h,f,c
 27123  01316C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 27124  013170  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 27125  013174  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 27126  013178  0E00               	movlw	0
 27127  01317A  0100               	movlb	0	; () banked
 27128  01317C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 27129  01317E  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 27130                           
 27131                           ;Port.c: 424: }
 27132  013182  D07A               	goto	l478
 27133  013184                     
 27134                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 27135  013184  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 27136  013188  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 27137  01318C  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 27138  013190  0E03               	movlw	3
 27139  013192  0100               	movlb	0	; () banked
 27140  013194  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 27141  013196  EC9E  F0B9         	call	_Port_CheckQuadType	;wreg free
 27142  01319A  0100               	movlb	0	; () banked
 27143  01319C  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 27144  01319E  0100               	movlb	0	; () banked
 27145  0131A0  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 27146  0131A2  A4D8               	btfss	status,2,c
 27147  0131A4  0012               	return	
 27148                           
 27149                           ; BSR set to: 0
 27150                           ;Port.c: 429: {
 27151                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 27152  0131A6  0100               	movlb	0	; () banked
 27153  0131A8  EE20 F002          	lfsr	2,2
 27154  0131AC  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 27155  0131AE  26D9               	addwf	fsr2l,f,c
 27156  0131B0  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27157  0131B2  22DA               	addwfc	fsr2h,f,c
 27158  0131B4  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 27159  0131B8  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 27160  0131BC  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 27161  0131C0  0E0F               	movlw	15
 27162  0131C2  0100               	movlb	0	; () banked
 27163  0131C4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 27164  0131C6  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 27165                           
 27166                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 27167  0131CA  0100               	movlb	0	; () banked
 27168  0131CC  EE20 F004          	lfsr	2,4
 27169  0131D0  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 27170  0131D2  26D9               	addwf	fsr2l,f,c
 27171  0131D4  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27172  0131D6  22DA               	addwfc	fsr2h,f,c
 27173  0131D8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 27174  0131DC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 27175  0131E0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 27176  0131E4  0E0F               	movlw	15
 27177  0131E6  0100               	movlb	0	; () banked
 27178  0131E8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 27179  0131EA  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 27180                           
 27181                           ;Port.c: 435: }
 27182  0131EE  D044               	goto	l478
 27183  0131F0                     
 27184                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 27185  0131F0  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 27186  0131F4  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 27187  0131F8  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 27188  0131FC  0E03               	movlw	3
 27189  0131FE  0100               	movlb	0	; () banked
 27190  013200  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 27191  013202  EC9E  F0B9         	call	_Port_CheckQuadType	;wreg free
 27192  013206  0100               	movlb	0	; () banked
 27193  013208  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 27194  01320A  0100               	movlb	0	; () banked
 27195  01320C  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 27196  01320E  A4D8               	btfss	status,2,c
 27197  013210  0012               	return	
 27198                           
 27199                           ; BSR set to: 0
 27200                           ;Port.c: 440: {
 27201                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 27202  013212  0100               	movlb	0	; () banked
 27203  013214  EE20 F002          	lfsr	2,2
 27204  013218  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 27205  01321A  26D9               	addwf	fsr2l,f,c
 27206  01321C  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27207  01321E  22DA               	addwfc	fsr2h,f,c
 27208  013220  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 27209  013224  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 27210  013228  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 27211  01322C  0E00               	movlw	0
 27212  01322E  0100               	movlb	0	; () banked
 27213  013230  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 27214  013232  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 27215                           
 27216                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 27217  013236  0100               	movlb	0	; () banked
 27218  013238  EE20 F004          	lfsr	2,4
 27219  01323C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 27220  01323E  26D9               	addwf	fsr2l,f,c
 27221  013240  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27222  013242  22DA               	addwfc	fsr2h,f,c
 27223  013244  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 27224  013248  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 27225  01324C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 27226  013250  0E00               	movlw	0
 27227  013252  0100               	movlb	0	; () banked
 27228  013254  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 27229  013256  ECA0  F0BE         	call	_Byte_SetQuad	;wreg free
 27230                           
 27231                           ;Port.c: 446: }
 27232  01325A  D00E               	goto	l478
 27233  01325C                     l476:
 27234  01325C  0100               	movlb	0	; () banked
 27235  01325E  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 27236                           
 27237                           ; Switch size 1, requested type "space"
 27238                           ; Number of cases is 4, Range of values is 0 to 3
 27239                           ; switch strategies available:
 27240                           ; Name         Instructions Cycles
 27241                           ; simple_byte           13     7 (average)
 27242                           ;	Chosen strategy is simple_byte
 27243  013260  0A00               	xorlw	0	; case 0
 27244  013262  B4D8               	btfsc	status,2,c
 27245  013264  D734               	goto	l477
 27246  013266  0A01               	xorlw	1	; case 1
 27247  013268  B4D8               	btfsc	status,2,c
 27248  01326A  D756               	goto	l479
 27249  01326C  0A03               	xorlw	3	; case 2
 27250  01326E  B4D8               	btfsc	status,2,c
 27251  013270  D789               	goto	l483
 27252  013272  0A01               	xorlw	1	; case 3
 27253  013274  B4D8               	btfsc	status,2,c
 27254  013276  D7BC               	goto	l486
 27255  013278                     l478:
 27256                           
 27257                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 27258                           
 27259                           ; BSR set to: 0
 27260  013278  0E08               	movlw	8
 27261  01327A  0100               	movlb	0	; () banked
 27262  01327C  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 27263  01327E  0100               	movlb	0	; () banked
 27264  013280  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 27265  013282  0E00               	movlw	0
 27266  013284  0100               	movlb	0	; () banked
 27267  013286  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27268  013288  0100               	movlb	0	; () banked
 27269  01328A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 27270  01328C  0100               	movlb	0	; () banked
 27271  01328E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 27272  013290  0D04               	mullw	4
 27273  013292  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 27274  013296  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 27275  01329A  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 27276                           
 27277                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 27278  01329E  0E08               	movlw	8
 27279  0132A0  0100               	movlb	0	; () banked
 27280  0132A2  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 27281  0132A4  0100               	movlb	0	; () banked
 27282  0132A6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 27283  0132A8  0E00               	movlw	0
 27284  0132AA  0100               	movlb	0	; () banked
 27285  0132AC  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27286  0132AE  0100               	movlb	0	; () banked
 27287  0132B0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 27288  0132B2  0100               	movlb	0	; () banked
 27289  0132B4  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 27290  0132B6  0D04               	mullw	4
 27291  0132B8  28F3               	incf	prodl,w,c
 27292  0132BA  0100               	movlb	0	; () banked
 27293  0132BC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 27294  0132BE  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 27295  0132C2  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 27296                           
 27297                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 27298  0132C6  0E08               	movlw	8
 27299  0132C8  0100               	movlb	0	; () banked
 27300  0132CA  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 27301  0132CC  0100               	movlb	0	; () banked
 27302  0132CE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 27303  0132D0  0E00               	movlw	0
 27304  0132D2  0100               	movlb	0	; () banked
 27305  0132D4  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27306  0132D6  0100               	movlb	0	; () banked
 27307  0132D8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 27308  0132DA  0100               	movlb	0	; () banked
 27309  0132DC  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 27310  0132DE  0D04               	mullw	4
 27311  0132E0  50F3               	movf	prodl,w,c
 27312  0132E2  0F02               	addlw	2
 27313  0132E4  0100               	movlb	0	; () banked
 27314  0132E6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 27315  0132E8  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 27316  0132EC  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 27317                           
 27318                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 27319  0132F0  0E08               	movlw	8
 27320  0132F2  0100               	movlb	0	; () banked
 27321  0132F4  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 27322  0132F6  0100               	movlb	0	; () banked
 27323  0132F8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 27324  0132FA  0E00               	movlw	0
 27325  0132FC  0100               	movlb	0	; () banked
 27326  0132FE  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 27327  013300  0100               	movlb	0	; () banked
 27328  013302  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 27329  013304  0100               	movlb	0	; () banked
 27330  013306  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 27331  013308  0D04               	mullw	4
 27332  01330A  50F3               	movf	prodl,w,c
 27333  01330C  0F03               	addlw	3
 27334  01330E  0100               	movlb	0	; () banked
 27335  013310  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 27336  013312  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 27337  013316  EC9A  F0BB         	call	_Word_SetPair	;wreg free
 27338  01331A  0012               	return	
 27339  01331C                     __end_of_Port_SetQuadType:
 27340                           	opt stack 0
 27341                           tosu	equ	0xFFF
 27342                           tosh	equ	0xFFE
 27343                           tosl	equ	0xFFD
 27344                           pclath	equ	0xFFA
 27345                           tblptru	equ	0xFF8
 27346                           tblptrh	equ	0xFF7
 27347                           tblptrl	equ	0xFF6
 27348                           tablat	equ	0xFF5
 27349                           prodh	equ	0xFF4
 27350                           prodl	equ	0xFF3
 27351                           intcon	equ	0xFF2
 27352                           postinc0	equ	0xFEE
 27353                           wreg	equ	0xFE8
 27354                           indf1	equ	0xFE7
 27355                           postdec1	equ	0xFE5
 27356                           fsr1h	equ	0xFE2
 27357                           fsr1l	equ	0xFE1
 27358                           indf2	equ	0xFDF
 27359                           postinc2	equ	0xFDE
 27360                           postdec2	equ	0xFDD
 27361                           plusw2	equ	0xFDB
 27362                           fsr2h	equ	0xFDA
 27363                           fsr2l	equ	0xFD9
 27364                           status	equ	0xFD8
 27365                           
 27366 ;; *************** function _Word_SetPair *****************
 27367 ;; Defined at:
 27368 ;;		line 149 in file "Library/Types.c"
 27369 ;; Parameters:    Size  Location     Type
 27370 ;;  pInput          2   15[BANK0 ] PTR struct Word
 27371 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 27372 ;;		 -> PortD(10), PortC(10), PortF(10), 
 27373 ;;  pPair           1   17[BANK0 ] unsigned char 
 27374 ;;  pValue          1   18[BANK0 ] unsigned char 
 27375 ;; Auto vars:     Size  Location     Type
 27376 ;;		None
 27377 ;; Return value:  Size  Location     Type
 27378 ;;                  1    wreg      void 
 27379 ;; Registers used:
 27380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27381 ;; Tracked objects:
 27382 ;;		On entry : 0/0
 27383 ;;		On exit  : 0/0
 27384 ;;		Unchanged: 0/0
 27385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27386 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27389 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27390 ;;Total ram usage:        4 bytes
 27391 ;; Hardware stack levels used:    1
 27392 ;; Hardware stack levels required when called:    9
 27393 ;; This function calls:
 27394 ;;		_Byte_SetPair
 27395 ;; This function is called by:
 27396 ;;		_Port_SetPinType
 27397 ;;		_Port_SetQuadType
 27398 ;;		_Port_SetType
 27399 ;;		_Port_SetPairType
 27400 ;;		_PortProperty_Init
 27401 ;; This function uses a non-reentrant model
 27402 ;;
 27403                           
 27404                           	psect	text117
 27405  017734                     __ptext117:
 27406                           	opt stack 0
 27407  017734                     _Word_SetPair:
 27408                           	opt stack 18
 27409                           
 27410                           ;Types.c: 151: if (pPair >= 4)
 27411                           
 27412                           ;incstack = 0
 27413  017734  0E03               	movlw	3
 27414  017736  0100               	movlb	0	; () banked
 27415  017738  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 27416  01773A  D014               	goto	l776
 27417                           
 27418                           ; BSR set to: 0
 27419                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 27420  01773C  0E01               	movlw	1
 27421  01773E  0100               	movlb	0	; () banked
 27422  017740  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 27423  017742  0100               	movlb	0	; () banked
 27424  017744  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 27425  017746  0E00               	movlw	0
 27426  017748  0100               	movlb	0	; () banked
 27427  01774A  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 27428  01774C  0100               	movlb	0	; () banked
 27429  01774E  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 27430  017750  0100               	movlb	0	; () banked
 27431  017752  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 27432  017754  0FFC               	addlw	252
 27433  017756  0100               	movlb	0	; () banked
 27434  017758  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 27435  01775A  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 27436  01775E  EC8F  F0BE         	call	_Byte_SetPair	;wreg free
 27437  017762  0012               	return	
 27438  017764                     l776:
 27439                           
 27440                           ;Types.c: 153: else
 27441                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 27442  017764  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 27443  017768  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 27444  01776C  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 27445  017770  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 27446  017774  EC8F  F0BE         	call	_Byte_SetPair	;wreg free
 27447  017778  0012               	return	
 27448  01777A                     __end_of_Word_SetPair:
 27449                           	opt stack 0
 27450                           tosu	equ	0xFFF
 27451                           tosh	equ	0xFFE
 27452                           tosl	equ	0xFFD
 27453                           pclath	equ	0xFFA
 27454                           tblptru	equ	0xFF8
 27455                           tblptrh	equ	0xFF7
 27456                           tblptrl	equ	0xFF6
 27457                           tablat	equ	0xFF5
 27458                           prodh	equ	0xFF4
 27459                           prodl	equ	0xFF3
 27460                           intcon	equ	0xFF2
 27461                           postinc0	equ	0xFEE
 27462                           wreg	equ	0xFE8
 27463                           indf1	equ	0xFE7
 27464                           postdec1	equ	0xFE5
 27465                           fsr1h	equ	0xFE2
 27466                           fsr1l	equ	0xFE1
 27467                           indf2	equ	0xFDF
 27468                           postinc2	equ	0xFDE
 27469                           postdec2	equ	0xFDD
 27470                           plusw2	equ	0xFDB
 27471                           fsr2h	equ	0xFDA
 27472                           fsr2l	equ	0xFD9
 27473                           status	equ	0xFD8
 27474                           
 27475 ;; *************** function _Byte_SetPair *****************
 27476 ;; Defined at:
 27477 ;;		line 83 in file "Library/Types.c"
 27478 ;; Parameters:    Size  Location     Type
 27479 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 27480 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 27481 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 27482 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 27483 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 27484 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 27485 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 27486 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 27487 ;;		 -> NULL(0), 
 27488 ;;  pPair           1   13[BANK0 ] unsigned char 
 27489 ;;  pValue          1   14[BANK0 ] unsigned char 
 27490 ;; Auto vars:     Size  Location     Type
 27491 ;;		None
 27492 ;; Return value:  Size  Location     Type
 27493 ;;                  1    wreg      void 
 27494 ;; Registers used:
 27495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27496 ;; Tracked objects:
 27497 ;;		On entry : 0/0
 27498 ;;		On exit  : 0/0
 27499 ;;		Unchanged: 0/0
 27500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27501 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27504 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27505 ;;Total ram usage:        4 bytes
 27506 ;; Hardware stack levels used:    1
 27507 ;; Hardware stack levels required when called:    8
 27508 ;; This function calls:
 27509 ;;		_Byte_SetZone
 27510 ;; This function is called by:
 27511 ;;		_Word_SetPair
 27512 ;;		_Port_SetPairType
 27513 ;;		_Port_SetPair
 27514 ;; This function uses a non-reentrant model
 27515 ;;
 27516                           
 27517                           	psect	text118
 27518  017D1E                     __ptext118:
 27519                           	opt stack 0
 27520  017D1E                     _Byte_SetPair:
 27521                           	opt stack 18
 27522                           
 27523                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 27524                           
 27525                           ;incstack = 0
 27526  017D1E  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 27527  017D22  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 27528  017D26  0E04               	movlw	4
 27529  017D28  0100               	movlb	0	; () banked
 27530  017D2A  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 27531  017D2C  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 27532  017D30  0E02               	movlw	2
 27533  017D32  0100               	movlb	0	; () banked
 27534  017D34  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 27535  017D36  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 27536  017D3A  EC17  F0AE         	call	_Byte_SetZone	;wreg free
 27537  017D3E  0012               	return		;funcret
 27538  017D40                     __end_of_Byte_SetPair:
 27539                           	opt stack 0
 27540                           tosu	equ	0xFFF
 27541                           tosh	equ	0xFFE
 27542                           tosl	equ	0xFFD
 27543                           pclath	equ	0xFFA
 27544                           tblptru	equ	0xFF8
 27545                           tblptrh	equ	0xFF7
 27546                           tblptrl	equ	0xFF6
 27547                           tablat	equ	0xFF5
 27548                           prodh	equ	0xFF4
 27549                           prodl	equ	0xFF3
 27550                           intcon	equ	0xFF2
 27551                           postinc0	equ	0xFEE
 27552                           wreg	equ	0xFE8
 27553                           indf1	equ	0xFE7
 27554                           postdec1	equ	0xFE5
 27555                           fsr1h	equ	0xFE2
 27556                           fsr1l	equ	0xFE1
 27557                           indf2	equ	0xFDF
 27558                           postinc2	equ	0xFDE
 27559                           postdec2	equ	0xFDD
 27560                           plusw2	equ	0xFDB
 27561                           fsr2h	equ	0xFDA
 27562                           fsr2l	equ	0xFD9
 27563                           status	equ	0xFD8
 27564                           
 27565 ;; *************** function _Port_CheckQuadType *****************
 27566 ;; Defined at:
 27567 ;;		line 126 in file "Library/Port.c"
 27568 ;; Parameters:    Size  Location     Type
 27569 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 27570 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 27571 ;;		 -> PortD(10), PortC(10), PortF(10), 
 27572 ;;  pQuad           1   49[BANK0 ] enum E6776
 27573 ;;  pDrive          1   50[BANK0 ] enum E6469
 27574 ;; Auto vars:     Size  Location     Type
 27575 ;;  Output          1   53[BANK0 ] enum E6475
 27576 ;;  Pair2           1   52[BANK0 ] enum E6760
 27577 ;;  Pair1           1   51[BANK0 ] enum E6760
 27578 ;; Return value:  Size  Location     Type
 27579 ;;                  1    wreg      enum E6475
 27580 ;; Registers used:
 27581 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27582 ;; Tracked objects:
 27583 ;;		On entry : 0/0
 27584 ;;		On exit  : 0/0
 27585 ;;		Unchanged: 0/0
 27586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27587 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27588 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27590 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27591 ;;Total ram usage:        7 bytes
 27592 ;; Hardware stack levels used:    1
 27593 ;; Hardware stack levels required when called:   12
 27594 ;; This function calls:
 27595 ;;		_Port_CheckPairType
 27596 ;; This function is called by:
 27597 ;;		_Port_CheckPortType
 27598 ;;		_Port_SetQuadType
 27599 ;; This function uses a non-reentrant model
 27600 ;;
 27601                           
 27602                           	psect	text119
 27603  01733C                     __ptext119:
 27604                           	opt stack 0
 27605  01733C                     _Port_CheckQuadType:
 27606                           	opt stack 14
 27607                           
 27608                           ;Port.c: 128: ePinError Output = ePinErrorState;
 27609                           
 27610                           ;incstack = 0
 27611  01733C  0E05               	movlw	5
 27612  01733E  0100               	movlb	0	; () banked
 27613  017340  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 27614                           
 27615                           ; BSR set to: 0
 27616                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 27617  017342  0100               	movlb	0	; () banked
 27618  017344  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 27619  017346  0D02               	mullw	2
 27620  017348  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 27621                           
 27622                           ; BSR set to: 0
 27623                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 27624  01734C  0100               	movlb	0	; () banked
 27625  01734E  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 27626  017350  0D02               	mullw	2
 27627  017352  28F3               	incf	prodl,w,c
 27628  017354  0100               	movlb	0	; () banked
 27629  017356  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 27630                           
 27631                           ; BSR set to: 0
 27632                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 27633  017358  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 27634  01735C  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 27635  017360  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 27636  017364  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 27637  017368  EC41  F0B8         	call	_Port_CheckPairType	;wreg free
 27638  01736C  0100               	movlb	0	; () banked
 27639  01736E  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 27640  017370  0100               	movlb	0	; () banked
 27641  017372  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 27642  017374  A4D8               	btfss	status,2,c
 27643  017376  D00C               	goto	l393
 27644                           
 27645                           ; BSR set to: 0
 27646                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 27647  017378  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 27648  01737C  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 27649  017380  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 27650  017384  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 27651  017388  EC41  F0B8         	call	_Port_CheckPairType	;wreg free
 27652  01738C  0100               	movlb	0	; () banked
 27653  01738E  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 27654  017390                     l393:
 27655                           
 27656                           ; BSR set to: 0
 27657                           ;Port.c: 136: return Output;
 27658                           
 27659                           ; BSR set to: 0
 27660  017390  0100               	movlb	0	; () banked
 27661  017392  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 27662  017394  0012               	return	
 27663  017396                     __end_of_Port_CheckQuadType:
 27664                           	opt stack 0
 27665                           tosu	equ	0xFFF
 27666                           tosh	equ	0xFFE
 27667                           tosl	equ	0xFFD
 27668                           pclath	equ	0xFFA
 27669                           tblptru	equ	0xFF8
 27670                           tblptrh	equ	0xFF7
 27671                           tblptrl	equ	0xFF6
 27672                           tablat	equ	0xFF5
 27673                           prodh	equ	0xFF4
 27674                           prodl	equ	0xFF3
 27675                           intcon	equ	0xFF2
 27676                           postinc0	equ	0xFEE
 27677                           wreg	equ	0xFE8
 27678                           indf1	equ	0xFE7
 27679                           postdec1	equ	0xFE5
 27680                           fsr1h	equ	0xFE2
 27681                           fsr1l	equ	0xFE1
 27682                           indf2	equ	0xFDF
 27683                           postinc2	equ	0xFDE
 27684                           postdec2	equ	0xFDD
 27685                           plusw2	equ	0xFDB
 27686                           fsr2h	equ	0xFDA
 27687                           fsr2l	equ	0xFD9
 27688                           status	equ	0xFD8
 27689                           
 27690 ;; *************** function _Port_CheckPairType *****************
 27691 ;; Defined at:
 27692 ;;		line 112 in file "Library/Port.c"
 27693 ;; Parameters:    Size  Location     Type
 27694 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 27695 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 27696 ;;		 -> PortD(10), PortC(10), PortF(10), 
 27697 ;;  pPair           1   40[BANK0 ] enum E6760
 27698 ;;  pDrive          1   41[BANK0 ] enum E6469
 27699 ;; Auto vars:     Size  Location     Type
 27700 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 27701 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 27702 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 27703 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 27704 ;;		 -> PortC(10), PortF(10), NULL(0), 
 27705 ;;  Output          1   44[BANK0 ] enum E6475
 27706 ;;  Pin2            1   43[BANK0 ] enum E6750
 27707 ;;  Pin1            1   42[BANK0 ] enum E6750
 27708 ;; Return value:  Size  Location     Type
 27709 ;;                  1    wreg      enum E6475
 27710 ;; Registers used:
 27711 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27712 ;; Tracked objects:
 27713 ;;		On entry : 0/0
 27714 ;;		On exit  : 0/0
 27715 ;;		Unchanged: 0/0
 27716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27717 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27718 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27720 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27721 ;;Total ram usage:        9 bytes
 27722 ;; Hardware stack levels used:    1
 27723 ;; Hardware stack levels required when called:   11
 27724 ;; This function calls:
 27725 ;;		_PortProperty_Valid
 27726 ;; This function is called by:
 27727 ;;		_Port_CheckQuadType
 27728 ;;		_Port_SetPairType
 27729 ;; This function uses a non-reentrant model
 27730 ;;
 27731                           
 27732                           	psect	text120
 27733  017082                     __ptext120:
 27734                           	opt stack 0
 27735  017082                     _Port_CheckPairType:
 27736                           	opt stack 14
 27737                           
 27738                           ;Port.c: 114: ePinError Output = ePinErrorState;
 27739                           
 27740                           ; BSR set to: 0
 27741                           ;incstack = 0
 27742  017082  0E05               	movlw	5
 27743  017084  0100               	movlb	0	; () banked
 27744  017086  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 27745                           
 27746                           ; BSR set to: 0
 27747                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 27748  017088  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 27749  01708C  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 27750  017090  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 27751  017094  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 27752                           
 27753                           ; BSR set to: 0
 27754                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 27755  017098  0100               	movlb	0	; () banked
 27756  01709A  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 27757  01709C  0D02               	mullw	2
 27758  01709E  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 27759                           
 27760                           ; BSR set to: 0
 27761                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 27762  0170A2  0100               	movlb	0	; () banked
 27763  0170A4  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 27764  0170A6  0D02               	mullw	2
 27765  0170A8  28F3               	incf	prodl,w,c
 27766  0170AA  0100               	movlb	0	; () banked
 27767  0170AC  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 27768                           
 27769                           ; BSR set to: 0
 27770                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 27771  0170AE  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 27772  0170B2  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 27773  0170B6  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 27774  0170BA  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 27775  0170BE  EC58  F0B5         	call	_PortProperty_Valid	;wreg free
 27776  0170C2  0100               	movlb	0	; () banked
 27777  0170C4  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 27778  0170C6  0100               	movlb	0	; () banked
 27779  0170C8  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 27780  0170CA  A4D8               	btfss	status,2,c
 27781  0170CC  D00C               	goto	l389
 27782                           
 27783                           ; BSR set to: 0
 27784                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 27785  0170CE  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 27786  0170D2  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 27787  0170D6  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 27788  0170DA  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 27789  0170DE  EC58  F0B5         	call	_PortProperty_Valid	;wreg free
 27790  0170E2  0100               	movlb	0	; () banked
 27791  0170E4  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 27792  0170E6                     l389:
 27793                           
 27794                           ; BSR set to: 0
 27795                           ;Port.c: 124: return Output;
 27796                           
 27797                           ; BSR set to: 0
 27798  0170E6  0100               	movlb	0	; () banked
 27799  0170E8  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 27800  0170EA  0012               	return	
 27801  0170EC                     __end_of_Port_CheckPairType:
 27802                           	opt stack 0
 27803                           tosu	equ	0xFFF
 27804                           tosh	equ	0xFFE
 27805                           tosl	equ	0xFFD
 27806                           pclath	equ	0xFFA
 27807                           tblptru	equ	0xFF8
 27808                           tblptrh	equ	0xFF7
 27809                           tblptrl	equ	0xFF6
 27810                           tablat	equ	0xFF5
 27811                           prodh	equ	0xFF4
 27812                           prodl	equ	0xFF3
 27813                           intcon	equ	0xFF2
 27814                           postinc0	equ	0xFEE
 27815                           wreg	equ	0xFE8
 27816                           indf1	equ	0xFE7
 27817                           postdec1	equ	0xFE5
 27818                           fsr1h	equ	0xFE2
 27819                           fsr1l	equ	0xFE1
 27820                           indf2	equ	0xFDF
 27821                           postinc2	equ	0xFDE
 27822                           postdec2	equ	0xFDD
 27823                           plusw2	equ	0xFDB
 27824                           fsr2h	equ	0xFDA
 27825                           fsr2l	equ	0xFD9
 27826                           status	equ	0xFD8
 27827                           
 27828 ;; *************** function _PortProperty_Valid *****************
 27829 ;; Defined at:
 27830 ;;		line 220 in file "Library/Types.c"
 27831 ;; Parameters:    Size  Location     Type
 27832 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 27833 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 27834 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 27835 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 27836 ;;		 -> PortC(10), PortF(10), NULL(0), 
 27837 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 27838 ;;  pPin            1   18[BANK0 ] unsigned char 
 27839 ;; Auto vars:     Size  Location     Type
 27840 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 27841 ;;  Pair            1   37[BANK0 ] enum E6469
 27842 ;; Return value:  Size  Location     Type
 27843 ;;                  1    wreg      enum E6475
 27844 ;; Registers used:
 27845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27846 ;; Tracked objects:
 27847 ;;		On entry : 0/0
 27848 ;;		On exit  : 0/0
 27849 ;;		Unchanged: 0/0
 27850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27851 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27852 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27854 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27855 ;;Total ram usage:       23 bytes
 27856 ;; Hardware stack levels used:    1
 27857 ;; Hardware stack levels required when called:   10
 27858 ;; This function calls:
 27859 ;;		_Word_GetPair
 27860 ;; This function is called by:
 27861 ;;		_Port_CheckPairType
 27862 ;;		_Port_SetPinType
 27863 ;; This function uses a non-reentrant model
 27864 ;;
 27865                           
 27866                           	psect	text121
 27867  016AB0                     __ptext121:
 27868                           	opt stack 0
 27869  016AB0                     _PortProperty_Valid:
 27870                           	opt stack 17
 27871                           
 27872                           ;Types.c: 222: ePinDrive Pair;
 27873                           ;Types.c: 223: const ePinError Errors[4][4] =
 27874                           ;Types.c: 224: {
 27875                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 27876                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 27877                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 27878                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 27879                           ;Types.c: 230: };
 27880                           
 27881                           ; BSR set to: 0
 27882                           ;incstack = 0
 27883  016AB0  0E4B               	movlw	low PortProperty_Valid@F6830
 27884  016AB2  6EF6               	movwf	tblptrl,c
 27885  016AB4                     	if	1	;There is more than 1 active tblptr byte
 27886  016AB4  0EFD               	movlw	high PortProperty_Valid@F6830
 27887  016AB6  6EF7               	movwf	tblptrh,c
 27888  016AB8                     	endif
 27889  016AB8                     	if	1	;There are 3 active tblptr bytes
 27890  016AB8  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 27891  016ABA  6EF8               	movwf	tblptru,c
 27892  016ABC                     	endif
 27893  016ABC  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 27894  016AC0  0E0F               	movlw	15
 27895  016AC2                     u10700:
 27896  016AC2  0009               	tblrd		*+
 27897  016AC4  CFF5 FFDE          	movff	tablat,postinc2
 27898  016AC8  06E8               	decf	wreg,f,c
 27899  016ACA  E2FB               	bc	u10700
 27900                           
 27901                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 27902  016ACC  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 27903  016AD0  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 27904  016AD4  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 27905  016AD8  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 27906  016ADC  0100               	movlb	0	; () banked
 27907  016ADE  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 27908                           
 27909                           ; BSR set to: 0
 27910                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 27911  016AE0  0E04               	movlw	4
 27912  016AE2  0100               	movlb	0	; () banked
 27913  016AE4  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 27914  016AE6  D020               	goto	l819
 27915                           
 27916                           ; BSR set to: 0
 27917  016AE8  0E04               	movlw	4
 27918  016AEA  0100               	movlb	0	; () banked
 27919  016AEC  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 27920  016AEE  D01C               	goto	l819
 27921                           
 27922                           ; BSR set to: 0
 27923                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 27924  016AF0  0100               	movlb	0	; () banked
 27925  016AF2  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 27926  016AF4  0D04               	mullw	4
 27927  016AF6  0E75               	movlw	low PortProperty_Valid@Errors
 27928  016AF8  0100               	movlb	0	; () banked
 27929  016AFA  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 27930  016AFC  0E00               	movlw	high PortProperty_Valid@Errors
 27931  016AFE  0100               	movlb	0	; () banked
 27932  016B00  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 27933  016B02  50F3               	movf	prodl,w,c
 27934  016B04  0100               	movlb	0	; () banked
 27935  016B06  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 27936  016B08  50F4               	movf	prodh,w,c
 27937  016B0A  0100               	movlb	0	; () banked
 27938  016B0C  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 27939  016B0E  0100               	movlb	0	; () banked
 27940  016B10  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 27941  016B12  0D01               	mullw	1
 27942  016B14  50F3               	movf	prodl,w,c
 27943  016B16  0100               	movlb	0	; () banked
 27944  016B18  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 27945  016B1A  6ED9               	movwf	fsr2l,c
 27946  016B1C  50F4               	movf	prodh,w,c
 27947  016B1E  0100               	movlb	0	; () banked
 27948  016B20  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 27949  016B22  6EDA               	movwf	fsr2h,c
 27950  016B24  50DF               	movf	indf2,w,c
 27951                           
 27952                           ; BSR set to: 0
 27953  016B26  0012               	return	
 27954  016B28                     l819:
 27955                           
 27956                           ; BSR set to: 0
 27957                           ;Types.c: 237: return ePinErrorState;
 27958                           
 27959                           ; BSR set to: 0
 27960  016B28  0E05               	movlw	5
 27961  016B2A  0012               	return	
 27962  016B2C                     __end_of_PortProperty_Valid:
 27963                           	opt stack 0
 27964                           tosu	equ	0xFFF
 27965                           tosh	equ	0xFFE
 27966                           tosl	equ	0xFFD
 27967                           pclath	equ	0xFFA
 27968                           tblptru	equ	0xFF8
 27969                           tblptrh	equ	0xFF7
 27970                           tblptrl	equ	0xFF6
 27971                           tablat	equ	0xFF5
 27972                           prodh	equ	0xFF4
 27973                           prodl	equ	0xFF3
 27974                           intcon	equ	0xFF2
 27975                           postinc0	equ	0xFEE
 27976                           wreg	equ	0xFE8
 27977                           indf1	equ	0xFE7
 27978                           postdec1	equ	0xFE5
 27979                           fsr1h	equ	0xFE2
 27980                           fsr1l	equ	0xFE1
 27981                           indf2	equ	0xFDF
 27982                           postinc2	equ	0xFDE
 27983                           postdec2	equ	0xFDD
 27984                           plusw2	equ	0xFDB
 27985                           fsr2h	equ	0xFDA
 27986                           fsr2l	equ	0xFD9
 27987                           status	equ	0xFD8
 27988                           
 27989 ;; *************** function _Byte_SetQuad *****************
 27990 ;; Defined at:
 27991 ;;		line 101 in file "Library/Types.c"
 27992 ;; Parameters:    Size  Location     Type
 27993 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 27994 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 27995 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 27996 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 27997 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 27998 ;;		 -> NULL(0), 
 27999 ;;  pQuad           1   13[BANK0 ] unsigned char 
 28000 ;;  pValue          1   14[BANK0 ] unsigned char 
 28001 ;; Auto vars:     Size  Location     Type
 28002 ;;		None
 28003 ;; Return value:  Size  Location     Type
 28004 ;;                  1    wreg      void 
 28005 ;; Registers used:
 28006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28007 ;; Tracked objects:
 28008 ;;		On entry : 0/0
 28009 ;;		On exit  : 0/0
 28010 ;;		Unchanged: 0/0
 28011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28012 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28015 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28016 ;;Total ram usage:        4 bytes
 28017 ;; Hardware stack levels used:    1
 28018 ;; Hardware stack levels required when called:    8
 28019 ;; This function calls:
 28020 ;;		_Byte_SetZone
 28021 ;; This function is called by:
 28022 ;;		_Port_SetQuadType
 28023 ;;		_SPI_Init
 28024 ;;		_SPI_MinSpeed
 28025 ;;		_SPI_MaxSpeed
 28026 ;;		_Port_SetQuad
 28027 ;;		_Word_SetQuad
 28028 ;;		_I2C_Init
 28029 ;; This function uses a non-reentrant model
 28030 ;;
 28031                           
 28032                           	psect	text122
 28033  017D40                     __ptext122:
 28034                           	opt stack 0
 28035  017D40                     _Byte_SetQuad:
 28036                           	opt stack 19
 28037                           
 28038                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 28039                           
 28040                           ; BSR set to: 0
 28041                           ;incstack = 0
 28042  017D40  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 28043  017D44  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 28044  017D48  0E02               	movlw	2
 28045  017D4A  0100               	movlb	0	; () banked
 28046  017D4C  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 28047  017D4E  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 28048  017D52  0E04               	movlw	4
 28049  017D54  0100               	movlb	0	; () banked
 28050  017D56  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 28051  017D58  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 28052  017D5C  EC17  F0AE         	call	_Byte_SetZone	;wreg free
 28053  017D60  0012               	return		;funcret
 28054  017D62                     __end_of_Byte_SetQuad:
 28055                           	opt stack 0
 28056                           tosu	equ	0xFFF
 28057                           tosh	equ	0xFFE
 28058                           tosl	equ	0xFFD
 28059                           pclath	equ	0xFFA
 28060                           tblptru	equ	0xFF8
 28061                           tblptrh	equ	0xFF7
 28062                           tblptrl	equ	0xFF6
 28063                           tablat	equ	0xFF5
 28064                           prodh	equ	0xFF4
 28065                           prodl	equ	0xFF3
 28066                           intcon	equ	0xFF2
 28067                           postinc0	equ	0xFEE
 28068                           wreg	equ	0xFE8
 28069                           indf1	equ	0xFE7
 28070                           postdec1	equ	0xFE5
 28071                           fsr1h	equ	0xFE2
 28072                           fsr1l	equ	0xFE1
 28073                           indf2	equ	0xFDF
 28074                           postinc2	equ	0xFDE
 28075                           postdec2	equ	0xFDD
 28076                           plusw2	equ	0xFDB
 28077                           fsr2h	equ	0xFDA
 28078                           fsr2l	equ	0xFD9
 28079                           status	equ	0xFD8
 28080                           
 28081 ;; *************** function _Byte_SetZone *****************
 28082 ;; Defined at:
 28083 ;;		line 47 in file "Library/Types.c"
 28084 ;; Parameters:    Size  Location     Type
 28085 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28086 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 28087 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 28088 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 28089 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 28090 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28091 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28092 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28093 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28094 ;;  pMax            1    2[BANK0 ] unsigned char 
 28095 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28096 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28097 ;;  pValue          1    5[BANK0 ] unsigned char 
 28098 ;; Auto vars:     Size  Location     Type
 28099 ;;  MASK            1   10[BANK0 ] unsigned char 
 28100 ;;  Offset          1    9[BANK0 ] unsigned char 
 28101 ;; Return value:  Size  Location     Type
 28102 ;;                  1    wreg      void 
 28103 ;; Registers used:
 28104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28105 ;; Tracked objects:
 28106 ;;		On entry : 0/0
 28107 ;;		On exit  : 0/0
 28108 ;;		Unchanged: 0/0
 28109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28110 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28111 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28112 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28113 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28114 ;;Total ram usage:       11 bytes
 28115 ;; Hardware stack levels used:    1
 28116 ;; Hardware stack levels required when called:    7
 28117 ;; This function calls:
 28118 ;;		Nothing
 28119 ;; This function is called by:
 28120 ;;		_Byte_SetPair
 28121 ;;		_Byte_SetQuad
 28122 ;;		_Byte_SetTriple
 28123 ;; This function uses a non-reentrant model
 28124 ;;
 28125                           
 28126                           	psect	text123
 28127  015C2E                     __ptext123:
 28128                           	opt stack 0
 28129  015C2E                     _Byte_SetZone:
 28130                           	opt stack 18
 28131                           
 28132                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 28133                           
 28134                           ;incstack = 0
 28135  015C2E  0100               	movlb	0	; () banked
 28136  015C30  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 28137  015C32  0D01               	mullw	1
 28138  015C34  0E5B               	movlw	low _MASKS
 28139  015C36  24F3               	addwf	prodl,w,c
 28140  015C38  6EF6               	movwf	tblptrl,c
 28141  015C3A  0EFD               	movlw	high _MASKS
 28142  015C3C  20F4               	addwfc	prodh,w,c
 28143  015C3E  6EF7               	movwf	tblptrh,c
 28144  015C40                     	if	1	;There are 3 active tblptr bytes
 28145  015C40  6AF8               	clrf	tblptru,c
 28146  015C42  0E00               	movlw	low (__mediumconst shr (0+16))
 28147  015C44  22F8               	addwfc	tblptru,f,c
 28148  015C46                     	endif
 28149  015C46  0008               	tblrd		*
 28150  015C48  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 28151                           
 28152                           ; BSR set to: 0
 28153                           ;Types.c: 50: UINT8 Offset = 0;
 28154  015C4C  0E00               	movlw	0
 28155  015C4E  0100               	movlb	0	; () banked
 28156  015C50  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 28157                           
 28158                           ;Types.c: 52: while (pChunk >= pMax)
 28159  015C52  D006               	goto	l726
 28160  015C54                     
 28161                           ; BSR set to: 0
 28162                           ;Types.c: 53: {
 28163                           ;Types.c: 54: pChunk -= pMax;
 28164                           
 28165                           ; BSR set to: 0
 28166  015C54  0100               	movlb	0	; () banked
 28167  015C56  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 28168  015C58  0100               	movlb	0	; () banked
 28169  015C5A  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 28170                           
 28171                           ; BSR set to: 0
 28172                           ;Types.c: 55: Offset += 1;
 28173  015C5C  0100               	movlb	0	; () banked
 28174  015C5E  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 28175  015C60                     l726:
 28176                           
 28177                           ; BSR set to: 0
 28178                           
 28179                           ; BSR set to: 0
 28180  015C60  0100               	movlb	0	; () banked
 28181  015C62  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 28182  015C64  0100               	movlb	0	; () banked
 28183  015C66  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 28184  015C68  B0D8               	btfsc	status,0,c
 28185  015C6A  D7F4               	goto	l727
 28186                           
 28187                           ; BSR set to: 0
 28188                           ;Types.c: 56: }
 28189                           ;Types.c: 57: pChunk *= pChunkSize;
 28190                           
 28191                           ; BSR set to: 0
 28192  015C6C  0100               	movlb	0	; () banked
 28193  015C6E  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 28194  015C70  0100               	movlb	0	; () banked
 28195  015C72  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 28196  015C74  50F3               	movf	prodl,w,c
 28197  015C76  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 28198                           
 28199                           ; BSR set to: 0
 28200                           ;Types.c: 58: pChunk += Offset;
 28201  015C78  0100               	movlb	0	; () banked
 28202  015C7A  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 28203  015C7C  0100               	movlb	0	; () banked
 28204  015C7E  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 28205                           
 28206                           ; BSR set to: 0
 28207                           ;Types.c: 60: pValue &= MASK;
 28208  015C80  0100               	movlb	0	; () banked
 28209  015C82  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 28210  015C84  0100               	movlb	0	; () banked
 28211  015C86  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 28212                           
 28213                           ; BSR set to: 0
 28214                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 28215  015C88  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 28216  015C8C  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 28217  015C90  0100               	movlb	0	; () banked
 28218  015C92  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 28219  015C94  D003               	goto	u10764
 28220  015C96                     u10765:
 28221  015C96  0100               	movlb	0	; () banked
 28222  015C98  90D8               	bcf	status,0,c
 28223  015C9A  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 28224  015C9C                     u10764:
 28225  015C9C  0100               	movlb	0	; () banked
 28226  015C9E  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 28227  015CA0  D7FA               	goto	u10765
 28228  015CA2  0100               	movlb	0	; () banked
 28229  015CA4  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 28230  015CA6  0AFF               	xorlw	255
 28231  015CA8  0100               	movlb	0	; () banked
 28232  015CAA  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 28233  015CAC  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 28234  015CB0  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 28235  015CB4  0100               	movlb	0	; () banked
 28236  015CB6  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 28237  015CB8  16DF               	andwf	indf2,f,c
 28238                           
 28239                           ; BSR set to: 0
 28240                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 28241  015CBA  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 28242  015CBE  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 28243  015CC2  0100               	movlb	0	; () banked
 28244  015CC4  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 28245  015CC6  D003               	goto	u10774
 28246  015CC8                     u10775:
 28247  015CC8  0100               	movlb	0	; () banked
 28248  015CCA  90D8               	bcf	status,0,c
 28249  015CCC  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 28250  015CCE                     u10774:
 28251  015CCE  0100               	movlb	0	; () banked
 28252  015CD0  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 28253  015CD2  D7FA               	goto	u10775
 28254  015CD4  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 28255  015CD8  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 28256  015CDC  0100               	movlb	0	; () banked
 28257  015CDE  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 28258  015CE0  12DF               	iorwf	indf2,f,c
 28259                           
 28260                           ; BSR set to: 0
 28261  015CE2  0012               	return		;funcret
 28262  015CE4                     __end_of_Byte_SetZone:
 28263                           	opt stack 0
 28264                           tosu	equ	0xFFF
 28265                           tosh	equ	0xFFE
 28266                           tosl	equ	0xFFD
 28267                           pclath	equ	0xFFA
 28268                           tblptru	equ	0xFF8
 28269                           tblptrh	equ	0xFF7
 28270                           tblptrl	equ	0xFF6
 28271                           tablat	equ	0xFF5
 28272                           prodh	equ	0xFF4
 28273                           prodl	equ	0xFF3
 28274                           intcon	equ	0xFF2
 28275                           postinc0	equ	0xFEE
 28276                           wreg	equ	0xFE8
 28277                           indf1	equ	0xFE7
 28278                           postdec1	equ	0xFE5
 28279                           fsr1h	equ	0xFE2
 28280                           fsr1l	equ	0xFE1
 28281                           indf2	equ	0xFDF
 28282                           postinc2	equ	0xFDE
 28283                           postdec2	equ	0xFDD
 28284                           plusw2	equ	0xFDB
 28285                           fsr2h	equ	0xFDA
 28286                           fsr2l	equ	0xFD9
 28287                           status	equ	0xFD8
 28288                           
 28289 ;; *************** function _Console_Init *****************
 28290 ;; Defined at:
 28291 ;;		line 157 in file "Library/Console.c"
 28292 ;; Parameters:    Size  Location     Type
 28293 ;;		None
 28294 ;; Auto vars:     Size  Location     Type
 28295 ;;  y               1    3[BANK0 ] unsigned char 
 28296 ;;  x               1    2[BANK0 ] unsigned char 
 28297 ;; Return value:  Size  Location     Type
 28298 ;;                  1    wreg      void 
 28299 ;; Registers used:
 28300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 28301 ;; Tracked objects:
 28302 ;;		On entry : 0/0
 28303 ;;		On exit  : 0/0
 28304 ;;		Unchanged: 0/0
 28305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28307 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28308 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28309 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28310 ;;Total ram usage:        4 bytes
 28311 ;; Hardware stack levels used:    1
 28312 ;; Hardware stack levels required when called:    7
 28313 ;; This function calls:
 28314 ;;		Nothing
 28315 ;; This function is called by:
 28316 ;;		_init
 28317 ;; This function uses a non-reentrant model
 28318 ;;
 28319                           
 28320                           	psect	text124
 28321  016814                     __ptext124:
 28322                           	opt stack 0
 28323  016814                     _Console_Init:
 28324                           	opt stack 22
 28325                           
 28326                           ;Console.c: 160: lBufferX = 0;
 28327                           
 28328                           ; BSR set to: 0
 28329                           ;incstack = 0
 28330  016814  0E00               	movlw	0
 28331  016816  0100               	movlb	0	; () banked
 28332  016818  6FF3               	movwf	_lBufferX& (0+255),b
 28333                           
 28334                           ;Console.c: 161: lBufferY = 0;
 28335  01681A  0E00               	movlw	0
 28336  01681C  0100               	movlb	0	; () banked
 28337  01681E  6FF2               	movwf	_lBufferY& (0+255),b
 28338                           
 28339                           ;Console.c: 163: UINT8 x, y;
 28340                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 28341  016820  0E00               	movlw	0
 28342  016822  0100               	movlb	0	; () banked
 28343  016824  6F62               	movwf	Console_Init@x& (0+255),b
 28344  016826                     l15836:
 28345                           
 28346                           ; BSR set to: 0
 28347  016826  0E13               	movlw	19
 28348  016828  0100               	movlb	0	; () banked
 28349  01682A  6562               	cpfsgt	Console_Init@x& (0+255),b
 28350  01682C  D001               	goto	l976
 28351  01682E  0012               	return	
 28352  016830                     l976:
 28353                           
 28354                           ; BSR set to: 0
 28355                           ;Console.c: 165: {
 28356                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 28357                           
 28358                           ; BSR set to: 0
 28359  016830  0E00               	movlw	0
 28360  016832  0100               	movlb	0	; () banked
 28361  016834  6F63               	movwf	Console_Init@y& (0+255),b
 28362  016836                     l15842:
 28363                           
 28364                           ; BSR set to: 0
 28365  016836  0E0E               	movlw	14
 28366  016838  0100               	movlb	0	; () banked
 28367  01683A  6563               	cpfsgt	Console_Init@y& (0+255),b
 28368  01683C  D001               	goto	l978
 28369  01683E  D02C               	goto	u13480
 28370  016840                     l978:
 28371                           
 28372                           ; BSR set to: 0
 28373                           ;Console.c: 167: {
 28374                           ;Console.c: 168: lBuffer[y][x] = '\0';
 28375                           
 28376                           ; BSR set to: 0
 28377  016840  0100               	movlb	0	; () banked
 28378  016842  5163               	movf	Console_Init@y& (0+255),w,b
 28379  016844  0D14               	mullw	20
 28380  016846  0EF0               	movlw	low _lBuffer
 28381  016848  0100               	movlb	0	; () banked
 28382  01684A  6F60               	movwf	??_Console_Init& (0+255),b
 28383  01684C  0E04               	movlw	high _lBuffer
 28384  01684E  0100               	movlb	0	; () banked
 28385  016850  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 28386  016852  50F3               	movf	prodl,w,c
 28387  016854  0100               	movlb	0	; () banked
 28388  016856  2760               	addwf	??_Console_Init& (0+255),f,b
 28389  016858  50F4               	movf	prodh,w,c
 28390  01685A  0100               	movlb	0	; () banked
 28391  01685C  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 28392  01685E  0100               	movlb	0	; () banked
 28393  016860  5162               	movf	Console_Init@x& (0+255),w,b
 28394  016862  0D01               	mullw	1
 28395  016864  50F3               	movf	prodl,w,c
 28396  016866  0100               	movlb	0	; () banked
 28397  016868  2560               	addwf	??_Console_Init& (0+255),w,b
 28398  01686A  6ED9               	movwf	fsr2l,c
 28399  01686C  50F4               	movf	prodh,w,c
 28400  01686E  0100               	movlb	0	; () banked
 28401  016870  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 28402  016872  6EDA               	movwf	fsr2h,c
 28403  016874  0E00               	movlw	0
 28404  016876  6EDF               	movwf	indf2,c
 28405                           
 28406                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 28407  016878  0100               	movlb	0	; () banked
 28408  01687A  5163               	movf	Console_Init@y& (0+255),w,b
 28409  01687C  0D02               	mullw	2
 28410  01687E  0E00               	movlw	low _lCBuffer
 28411  016880  24F3               	addwf	prodl,w,c
 28412  016882  6ED9               	movwf	fsr2l,c
 28413  016884  0E04               	movlw	high _lCBuffer
 28414  016886  20F4               	addwfc	prodh,w,c
 28415  016888  6EDA               	movwf	fsr2h,c
 28416  01688A  0EFF               	movlw	255
 28417  01688C  6EDE               	movwf	postinc2,c
 28418  01688E  0EFF               	movlw	255
 28419  016890  6EDD               	movwf	postdec2,c
 28420                           
 28421                           ; BSR set to: 0
 28422  016892  0100               	movlb	0	; () banked
 28423  016894  2B63               	incf	Console_Init@y& (0+255),f,b
 28424  016896  D7CF               	goto	l15842
 28425  016898                     u13480:
 28426                           
 28427                           ; BSR set to: 0
 28428                           
 28429                           ; BSR set to: 0
 28430  016898  0100               	movlb	0	; () banked
 28431  01689A  2B62               	incf	Console_Init@x& (0+255),f,b
 28432  01689C  D7C4               	goto	l15836
 28433  01689E                     __end_of_Console_Init:
 28434                           	opt stack 0
 28435                           tosu	equ	0xFFF
 28436                           tosh	equ	0xFFE
 28437                           tosl	equ	0xFFD
 28438                           pclath	equ	0xFFA
 28439                           tblptru	equ	0xFF8
 28440                           tblptrh	equ	0xFF7
 28441                           tblptrl	equ	0xFF6
 28442                           tablat	equ	0xFF5
 28443                           prodh	equ	0xFF4
 28444                           prodl	equ	0xFF3
 28445                           intcon	equ	0xFF2
 28446                           postinc0	equ	0xFEE
 28447                           wreg	equ	0xFE8
 28448                           indf1	equ	0xFE7
 28449                           postdec1	equ	0xFE5
 28450                           fsr1h	equ	0xFE2
 28451                           fsr1l	equ	0xFE1
 28452                           indf2	equ	0xFDF
 28453                           postinc2	equ	0xFDE
 28454                           postdec2	equ	0xFDD
 28455                           plusw2	equ	0xFDB
 28456                           fsr2h	equ	0xFDA
 28457                           fsr2l	equ	0xFD9
 28458                           status	equ	0xFD8
 28459                           
 28460 ;; *************** function _ADC_Start *****************
 28461 ;; Defined at:
 28462 ;;		line 114 in file "Library/ADC.c"
 28463 ;; Parameters:    Size  Location     Type
 28464 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 28465 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 28466 ;;		 -> NULL(0), 
 28467 ;; Auto vars:     Size  Location     Type
 28468 ;;		None
 28469 ;; Return value:  Size  Location     Type
 28470 ;;                  1    wreg      void 
 28471 ;; Registers used:
 28472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28473 ;; Tracked objects:
 28474 ;;		On entry : 0/0
 28475 ;;		On exit  : 0/0
 28476 ;;		Unchanged: 0/0
 28477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28478 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28480 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28481 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28482 ;;Total ram usage:        4 bytes
 28483 ;; Hardware stack levels used:    1
 28484 ;; Hardware stack levels required when called:    8
 28485 ;; This function calls:
 28486 ;;		_ADC_Off
 28487 ;;		_ADC_On
 28488 ;;		_ADC_SetChannel
 28489 ;; This function is called by:
 28490 ;;		_init
 28491 ;;		_mode1
 28492 ;;		_mode4
 28493 ;;		_FunctADC
 28494 ;; This function uses a non-reentrant model
 28495 ;;
 28496                           
 28497                           	psect	text125
 28498  016928                     __ptext125:
 28499                           	opt stack 0
 28500  016928                     _ADC_Start:
 28501                           	opt stack 21
 28502                           
 28503                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 28504                           
 28505                           ; BSR set to: 0
 28506                           ;incstack = 0
 28507  016928  B2C2               	btfsc	4034,1,c	;volatile
 28508  01692A  0012               	return	
 28509  01692C                     
 28510                           ;ADC.c: 128: {
 28511                           ;ADC.c: 129: ADC_Off();
 28512                           
 28513                           ;ADC.c: 127: for(;;)
 28514  01692C  EC65  F0C0         	call	_ADC_Off	;wreg free
 28515                           
 28516                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 28517  016930  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
 28518  016934  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 28519  016938  50DF               	movf	indf2,w,c
 28520  01693A  EC55  F0BF         	call	_ADC_SetChannel
 28521                           
 28522                           ;ADC.c: 131: ADC_On();
 28523  01693E  EC6F  F0C0         	call	_ADC_On	;wreg free
 28524                           
 28525                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 28526  016942  82C2               	bsf	4034,1,c	;volatile
 28527  016944  B2C2               	btfsc	4034,1,c	;volatile
 28528  016946  D7FE               	goto	l1280
 28529                           
 28530                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 28531  016948  50C3               	movf	4035,w,c	;volatile
 28532  01694A  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
 28533  01694E  0100               	movlb	0	; () banked
 28534  016950  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
 28535  016952  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
 28536  016956  0100               	movlb	0	; () banked
 28537  016958  6B64               	clrf	??_ADC_Start& (0+255),b
 28538  01695A  0100               	movlb	0	; () banked
 28539  01695C  1364               	iorwf	??_ADC_Start& (0+255),f,b
 28540  01695E  0E00               	movlw	0
 28541  016960  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 28542  016962  0100               	movlb	0	; () banked
 28543  016964  EE20 F001          	lfsr	2,1
 28544  016968  5162               	movf	ADC_Start@pInput& (0+255),w,b
 28545  01696A  26D9               	addwf	fsr2l,f,c
 28546  01696C  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 28547  01696E  22DA               	addwfc	fsr2h,f,c
 28548  016970  C064  FFDE         	movff	??_ADC_Start,postinc2
 28549  016974  C065  FFDD         	movff	??_ADC_Start+1,postdec2
 28550                           
 28551                           ;ADC.c: 141: if (pInput->mNext == 0)
 28552  016978  0100               	movlb	0	; () banked
 28553  01697A  EE20 F003          	lfsr	2,3
 28554  01697E  5162               	movf	ADC_Start@pInput& (0+255),w,b
 28555  016980  26D9               	addwf	fsr2l,f,c
 28556  016982  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 28557  016984  22DA               	addwfc	fsr2h,f,c
 28558  016986  50DE               	movf	postinc2,w,c
 28559  016988  10DE               	iorwf	postinc2,w,c
 28560  01698A  B4D8               	btfsc	status,2,c
 28561  01698C  D00C               	goto	l1283
 28562                           
 28563                           ; BSR set to: 0
 28564                           ;ADC.c: 145: pInput = pInput->mNext;
 28565                           
 28566                           ; BSR set to: 0
 28567                           
 28568                           ; BSR set to: 0
 28569                           ;ADC.c: 142: break;
 28570  01698E  0100               	movlb	0	; () banked
 28571  016990  EE20 F003          	lfsr	2,3
 28572  016994  5162               	movf	ADC_Start@pInput& (0+255),w,b
 28573  016996  26D9               	addwf	fsr2l,f,c
 28574  016998  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 28575  01699A  22DA               	addwfc	fsr2h,f,c
 28576  01699C  CFDE F062          	movff	postinc2,ADC_Start@pInput
 28577  0169A0  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
 28578                           
 28579                           ;ADC.c: 146: }
 28580  0169A4  D7C3               	goto	l1276
 28581  0169A6                     l1283:
 28582                           
 28583                           ; BSR set to: 0
 28584                           ;ADC.c: 147: ADC_Off();
 28585                           
 28586                           ; BSR set to: 0
 28587  0169A6  EC65  F0C0         	call	_ADC_Off	;wreg free
 28588  0169AA  0012               	return		;funcret
 28589  0169AC                     __end_of_ADC_Start:
 28590                           	opt stack 0
 28591                           tosu	equ	0xFFF
 28592                           tosh	equ	0xFFE
 28593                           tosl	equ	0xFFD
 28594                           pclath	equ	0xFFA
 28595                           tblptru	equ	0xFF8
 28596                           tblptrh	equ	0xFF7
 28597                           tblptrl	equ	0xFF6
 28598                           tablat	equ	0xFF5
 28599                           prodh	equ	0xFF4
 28600                           prodl	equ	0xFF3
 28601                           intcon	equ	0xFF2
 28602                           postinc0	equ	0xFEE
 28603                           wreg	equ	0xFE8
 28604                           indf1	equ	0xFE7
 28605                           postdec1	equ	0xFE5
 28606                           fsr1h	equ	0xFE2
 28607                           fsr1l	equ	0xFE1
 28608                           indf2	equ	0xFDF
 28609                           postinc2	equ	0xFDE
 28610                           postdec2	equ	0xFDD
 28611                           plusw2	equ	0xFDB
 28612                           fsr2h	equ	0xFDA
 28613                           fsr2l	equ	0xFD9
 28614                           status	equ	0xFD8
 28615                           
 28616 ;; *************** function _ADC_Init *****************
 28617 ;; Defined at:
 28618 ;;		line 19 in file "Library/ADC.c"
 28619 ;; Parameters:    Size  Location     Type
 28620 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 28621 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 28622 ;;  pChannel        1    6[BANK0 ] enum E6742
 28623 ;; Auto vars:     Size  Location     Type
 28624 ;;		None
 28625 ;; Return value:  Size  Location     Type
 28626 ;;                  1    wreg      void 
 28627 ;; Registers used:
 28628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28629 ;; Tracked objects:
 28630 ;;		On entry : 0/0
 28631 ;;		On exit  : 0/0
 28632 ;;		Unchanged: 0/0
 28633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28634 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28637 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28638 ;;Total ram usage:        3 bytes
 28639 ;; Hardware stack levels used:    1
 28640 ;; Hardware stack levels required when called:    9
 28641 ;; This function calls:
 28642 ;;		_ADC_Calibrate
 28643 ;;		_ADC_ClockDivision
 28644 ;;		_ADC_ConversionTime
 28645 ;;		_ADC_SetChannel
 28646 ;;		_ADC_SetupIO
 28647 ;; This function is called by:
 28648 ;;		_init
 28649 ;;		_FunctInitADC
 28650 ;; This function uses a non-reentrant model
 28651 ;;
 28652                           
 28653                           	psect	text126
 28654  016B2C                     __ptext126:
 28655                           	opt stack 0
 28656  016B2C                     _ADC_Init:
 28657                           	opt stack 20
 28658                           
 28659                           ;ADC.c: 21: if(pInput==(void*)0)
 28660                           
 28661                           ;incstack = 0
 28662  016B2C  0100               	movlb	0	; () banked
 28663  016B2E  5164               	movf	ADC_Init@pInput& (0+255),w,b
 28664  016B30  0100               	movlb	0	; () banked
 28665  016B32  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 28666  016B34  B4D8               	btfsc	status,2,c
 28667  016B36  0012               	return	
 28668                           
 28669                           ; BSR set to: 0
 28670                           ;ADC.c: 25: lCurrent = pInput;
 28671                           
 28672                           ; BSR set to: 0
 28673                           
 28674                           ; BSR set to: 0
 28675                           ;ADC.c: 22: return;
 28676  016B38  C064  F0EC         	movff	ADC_Init@pInput,_lCurrent
 28677  016B3C  C065  F0ED         	movff	ADC_Init@pInput+1,_lCurrent+1
 28678                           
 28679                           ; BSR set to: 0
 28680                           ;ADC.c: 27: pInput->mChannel = pChannel;
 28681  016B40  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 28682  016B44  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 28683  016B48  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 28684                           
 28685                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 28686  016B4C  0100               	movlb	0	; () banked
 28687  016B4E  EE20 F003          	lfsr	2,3
 28688  016B52  5164               	movf	ADC_Init@pInput& (0+255),w,b
 28689  016B54  26D9               	addwf	fsr2l,f,c
 28690  016B56  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 28691  016B58  22DA               	addwfc	fsr2h,f,c
 28692  016B5A  0E00               	movlw	0
 28693  016B5C  6EDE               	movwf	postinc2,c
 28694  016B5E  0E00               	movlw	0
 28695  016B60  6EDD               	movwf	postdec2,c
 28696                           
 28697                           ;ADC.c: 29: pInput->mValue = 0;
 28698  016B62  0100               	movlb	0	; () banked
 28699  016B64  EE20 F001          	lfsr	2,1
 28700  016B68  5164               	movf	ADC_Init@pInput& (0+255),w,b
 28701  016B6A  26D9               	addwf	fsr2l,f,c
 28702  016B6C  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 28703  016B6E  22DA               	addwfc	fsr2h,f,c
 28704  016B70  0E00               	movlw	0
 28705  016B72  6EDE               	movwf	postinc2,c
 28706  016B74  0E00               	movlw	0
 28707  016B76  6EDD               	movwf	postdec2,c
 28708                           
 28709                           ; BSR set to: 0
 28710                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 28711  016B78  0100               	movlb	0	; () banked
 28712  016B7A  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 28713  016B7C  EC55  F0BF         	call	_ADC_SetChannel
 28714                           
 28715                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 28716  016B80  9EC2               	bcf	4034,7,c	;volatile
 28717                           
 28718                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 28719  016B82  9CC2               	bcf	4034,6,c	;volatile
 28720                           
 28721                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 28722  016B84  8EC1               	bsf	4033,7,c	;volatile
 28723                           
 28724                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 28725  016B86  8CC1               	bsf	4033,6,c	;volatile
 28726                           
 28727                           ;ADC.c: 43: ADC_ConversionTime(12);
 28728  016B88  0E0C               	movlw	12
 28729  016B8A  EC2F  F0BB         	call	_ADC_ConversionTime
 28730                           
 28731                           ;ADC.c: 47: ADC_ClockDivision(16);
 28732  016B8E  0E10               	movlw	16
 28733  016B90  EC4F  F0B4         	call	_ADC_ClockDivision
 28734                           
 28735                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 28736  016B94  0100               	movlb	0	; () banked
 28737  016B96  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 28738  016B98  EC9E  F0BD         	call	_ADC_SetupIO
 28739                           
 28740                           ;ADC.c: 58: ADC_Initialised = 1;
 28741  016B9C  0E01               	movlw	1
 28742  016B9E  0103               	movlb	3	; () banked
 28743  016BA0  6F3E               	movwf	_ADC_Initialised& (0+255),b
 28744                           
 28745                           ; BSR set to: 3
 28746                           ;ADC.c: 61: ADC_Calibrate();
 28747  016BA2  ECDA  F0BF         	call	_ADC_Calibrate	;wreg free
 28748  016BA6  0012               	return		;funcret
 28749  016BA8                     __end_of_ADC_Init:
 28750                           	opt stack 0
 28751                           tosu	equ	0xFFF
 28752                           tosh	equ	0xFFE
 28753                           tosl	equ	0xFFD
 28754                           pclath	equ	0xFFA
 28755                           tblptru	equ	0xFF8
 28756                           tblptrh	equ	0xFF7
 28757                           tblptrl	equ	0xFF6
 28758                           tablat	equ	0xFF5
 28759                           prodh	equ	0xFF4
 28760                           prodl	equ	0xFF3
 28761                           intcon	equ	0xFF2
 28762                           postinc0	equ	0xFEE
 28763                           wreg	equ	0xFE8
 28764                           indf1	equ	0xFE7
 28765                           postdec1	equ	0xFE5
 28766                           fsr1h	equ	0xFE2
 28767                           fsr1l	equ	0xFE1
 28768                           indf2	equ	0xFDF
 28769                           postinc2	equ	0xFDE
 28770                           postdec2	equ	0xFDD
 28771                           plusw2	equ	0xFDB
 28772                           fsr2h	equ	0xFDA
 28773                           fsr2l	equ	0xFD9
 28774                           status	equ	0xFD8
 28775                           
 28776 ;; *************** function _ADC_SetupIO *****************
 28777 ;; Defined at:
 28778 ;;		line 150 in file "Library/ADC.c"
 28779 ;; Parameters:    Size  Location     Type
 28780 ;;  pChannel        1    wreg     enum E6742
 28781 ;; Auto vars:     Size  Location     Type
 28782 ;;  pChannel        1    2[BANK0 ] enum E6742
 28783 ;;  MASK            1    3[BANK0 ] unsigned char 
 28784 ;; Return value:  Size  Location     Type
 28785 ;;                  1    wreg      void 
 28786 ;; Registers used:
 28787 ;;		wreg, status,2, status,0
 28788 ;; Tracked objects:
 28789 ;;		On entry : 0/0
 28790 ;;		On exit  : 0/0
 28791 ;;		Unchanged: 0/0
 28792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28794 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28795 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28796 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28797 ;;Total ram usage:        4 bytes
 28798 ;; Hardware stack levels used:    1
 28799 ;; Hardware stack levels required when called:    7
 28800 ;; This function calls:
 28801 ;;		Nothing
 28802 ;; This function is called by:
 28803 ;;		_ADC_Init
 28804 ;; This function uses a non-reentrant model
 28805 ;;
 28806                           
 28807                           	psect	text127
 28808  017B3C                     __ptext127:
 28809                           	opt stack 0
 28810  017B3C                     _ADC_SetupIO:
 28811                           	opt stack 21
 28812                           
 28813                           ;incstack = 0
 28814                           ;ADC_SetupIO@pChannel stored from wreg
 28815  017B3C  0100               	movlb	0	; () banked
 28816  017B3E  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 28817                           
 28818                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 28819  017B40  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 28820  017B44  0E01               	movlw	1
 28821  017B46  0100               	movlb	0	; () banked
 28822  017B48  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 28823  017B4A  0100               	movlb	0	; () banked
 28824  017B4C  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 28825  017B4E  D003               	goto	u12774
 28826  017B50                     u12775:
 28827  017B50  0100               	movlb	0	; () banked
 28828  017B52  90D8               	bcf	status,0,c
 28829  017B54  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 28830  017B56                     u12774:
 28831  017B56  0100               	movlb	0	; () banked
 28832  017B58  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 28833  017B5A  D7FA               	goto	u12775
 28834  017B5C  0100               	movlb	0	; () banked
 28835  017B5E  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 28836  017B60  0AFF               	xorlw	255
 28837  017B62  0100               	movlb	0	; () banked
 28838  017B64  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 28839                           
 28840                           ;ADC.c: 153: ANCON0 &= MASK;
 28841  017B66  0100               	movlb	0	; () banked
 28842  017B68  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 28843  017B6A  16C1               	andwf	4033,f,c	;volatile
 28844                           
 28845                           ; BSR set to: 0
 28846  017B6C  0012               	return		;funcret
 28847  017B6E                     __end_of_ADC_SetupIO:
 28848                           	opt stack 0
 28849                           tosu	equ	0xFFF
 28850                           tosh	equ	0xFFE
 28851                           tosl	equ	0xFFD
 28852                           pclath	equ	0xFFA
 28853                           tblptru	equ	0xFF8
 28854                           tblptrh	equ	0xFF7
 28855                           tblptrl	equ	0xFF6
 28856                           tablat	equ	0xFF5
 28857                           prodh	equ	0xFF4
 28858                           prodl	equ	0xFF3
 28859                           intcon	equ	0xFF2
 28860                           postinc0	equ	0xFEE
 28861                           wreg	equ	0xFE8
 28862                           indf1	equ	0xFE7
 28863                           postdec1	equ	0xFE5
 28864                           fsr1h	equ	0xFE2
 28865                           fsr1l	equ	0xFE1
 28866                           indf2	equ	0xFDF
 28867                           postinc2	equ	0xFDE
 28868                           postdec2	equ	0xFDD
 28869                           plusw2	equ	0xFDB
 28870                           fsr2h	equ	0xFDA
 28871                           fsr2l	equ	0xFD9
 28872                           status	equ	0xFD8
 28873                           
 28874 ;; *************** function _ADC_SetChannel *****************
 28875 ;; Defined at:
 28876 ;;		line 155 in file "Library/ADC.c"
 28877 ;; Parameters:    Size  Location     Type
 28878 ;;  pChannel        1    wreg     enum E6742
 28879 ;; Auto vars:     Size  Location     Type
 28880 ;;  pChannel        1    1[BANK0 ] enum E6742
 28881 ;; Return value:  Size  Location     Type
 28882 ;;                  1    wreg      void 
 28883 ;; Registers used:
 28884 ;;		wreg, status,2, status,0
 28885 ;; Tracked objects:
 28886 ;;		On entry : 0/0
 28887 ;;		On exit  : 0/0
 28888 ;;		Unchanged: 0/0
 28889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28893 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28894 ;;Total ram usage:        2 bytes
 28895 ;; Hardware stack levels used:    1
 28896 ;; Hardware stack levels required when called:    7
 28897 ;; This function calls:
 28898 ;;		Nothing
 28899 ;; This function is called by:
 28900 ;;		_ADC_Init
 28901 ;;		_ADC_Start
 28902 ;;		_ADC_ISR
 28903 ;;		_ADC_Sample
 28904 ;; This function uses a non-reentrant model
 28905 ;;
 28906                           
 28907                           	psect	text128
 28908  017EAA                     __ptext128:
 28909                           	opt stack 0
 28910  017EAA                     _ADC_SetChannel:
 28911                           	opt stack 21
 28912                           
 28913                           ; BSR set to: 0
 28914                           ;incstack = 0
 28915                           ;ADC_SetChannel@pChannel stored from wreg
 28916  017EAA  0100               	movlb	0	; () banked
 28917  017EAC  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 28918                           
 28919                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 28920  017EAE  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 28921  017EB2  0100               	movlb	0	; () banked
 28922  017EB4  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 28923  017EB6  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 28924  017EB8  50C2               	movf	4034,w,c	;volatile
 28925  017EBA  0100               	movlb	0	; () banked
 28926  017EBC  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 28927  017EBE  0BC3               	andlw	-61
 28928  017EC0  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 28929  017EC2  6EC2               	movwf	4034,c	;volatile
 28930                           
 28931                           ; BSR set to: 0
 28932  017EC4  0012               	return		;funcret
 28933  017EC6                     __end_of_ADC_SetChannel:
 28934                           	opt stack 0
 28935                           tosu	equ	0xFFF
 28936                           tosh	equ	0xFFE
 28937                           tosl	equ	0xFFD
 28938                           pclath	equ	0xFFA
 28939                           tblptru	equ	0xFF8
 28940                           tblptrh	equ	0xFF7
 28941                           tblptrl	equ	0xFF6
 28942                           tablat	equ	0xFF5
 28943                           prodh	equ	0xFF4
 28944                           prodl	equ	0xFF3
 28945                           intcon	equ	0xFF2
 28946                           postinc0	equ	0xFEE
 28947                           wreg	equ	0xFE8
 28948                           indf1	equ	0xFE7
 28949                           postdec1	equ	0xFE5
 28950                           fsr1h	equ	0xFE2
 28951                           fsr1l	equ	0xFE1
 28952                           indf2	equ	0xFDF
 28953                           postinc2	equ	0xFDE
 28954                           postdec2	equ	0xFDD
 28955                           plusw2	equ	0xFDB
 28956                           fsr2h	equ	0xFDA
 28957                           fsr2l	equ	0xFD9
 28958                           status	equ	0xFD8
 28959                           
 28960 ;; *************** function _ADC_ConversionTime *****************
 28961 ;; Defined at:
 28962 ;;		line 199 in file "Library/ADC.c"
 28963 ;; Parameters:    Size  Location     Type
 28964 ;;  pCount          1    wreg     unsigned char 
 28965 ;; Auto vars:     Size  Location     Type
 28966 ;;  pCount          1    1[BANK0 ] unsigned char 
 28967 ;; Return value:  Size  Location     Type
 28968 ;;                  1    wreg      void 
 28969 ;; Registers used:
 28970 ;;		wreg, status,2, status,0
 28971 ;; Tracked objects:
 28972 ;;		On entry : 0/0
 28973 ;;		On exit  : 0/0
 28974 ;;		Unchanged: 0/0
 28975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28980 ;;Total ram usage:        2 bytes
 28981 ;; Hardware stack levels used:    1
 28982 ;; Hardware stack levels required when called:    7
 28983 ;; This function calls:
 28984 ;;		Nothing
 28985 ;; This function is called by:
 28986 ;;		_ADC_Init
 28987 ;; This function uses a non-reentrant model
 28988 ;;
 28989                           
 28990                           	psect	text129
 28991  01765E                     __ptext129:
 28992                           	opt stack 0
 28993  01765E                     _ADC_ConversionTime:
 28994                           	opt stack 21
 28995                           
 28996                           ; BSR set to: 0
 28997                           ;incstack = 0
 28998                           ;ADC_ConversionTime@pCount stored from wreg
 28999  01765E  0100               	movlb	0	; () banked
 29000  017660  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 29001                           
 29002                           ;ADC.c: 201: if (pCount == 10)
 29003  017662  0E0A               	movlw	10
 29004  017664  0100               	movlb	0	; () banked
 29005  017666  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 29006  017668  B4D8               	btfsc	status,2,c
 29007  01766A  D00A               	goto	u12740
 29008                           
 29009                           ; BSR set to: 0
 29010                           ;ADC.c: 203: else if (pCount == 14)
 29011                           
 29012                           ; BSR set to: 0
 29013                           
 29014                           ; BSR set to: 0
 29015                           ;ADC.c: 202: pCount -= 2;
 29016  01766C  0E0E               	movlw	14
 29017  01766E  0100               	movlb	0	; () banked
 29018  017670  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 29019  017672  B4D8               	btfsc	status,2,c
 29020  017674  D005               	goto	u12740
 29021                           
 29022                           ; BSR set to: 0
 29023                           ;ADC.c: 205: else if (pCount == 18)
 29024                           
 29025                           ; BSR set to: 0
 29026                           
 29027                           ; BSR set to: 0
 29028                           ;ADC.c: 204: pCount -= 2;
 29029  017676  0E12               	movlw	18
 29030  017678  0100               	movlb	0	; () banked
 29031  01767A  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 29032  01767C  A4D8               	btfss	status,2,c
 29033  01767E  D003               	goto	l1313
 29034  017680                     u12740:
 29035                           
 29036                           ; BSR set to: 0
 29037                           ;ADC.c: 206: pCount -= 2;
 29038  017680  0E02               	movlw	2
 29039  017682  0100               	movlb	0	; () banked
 29040  017684  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 29041  017686                     l1313:
 29042                           
 29043                           ; BSR set to: 0
 29044                           ;ADC.c: 208: pCount <<= 1;
 29045                           
 29046                           ; BSR set to: 0
 29047                           
 29048                           ; BSR set to: 0
 29049  017686  0100               	movlb	0	; () banked
 29050  017688  90D8               	bcf	status,0,c
 29051  01768A  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 29052                           
 29053                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 29054  01768C  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 29055  017690  0100               	movlb	0	; () banked
 29056  017692  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 29057  017694  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 29058  017696  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 29059  017698  50C1               	movf	4033,w,c	;volatile
 29060  01769A  0100               	movlb	0	; () banked
 29061  01769C  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 29062  01769E  0BC7               	andlw	-57
 29063  0176A0  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 29064  0176A2  6EC1               	movwf	4033,c	;volatile
 29065                           
 29066                           ; BSR set to: 0
 29067  0176A4  0012               	return		;funcret
 29068  0176A6                     __end_of_ADC_ConversionTime:
 29069                           	opt stack 0
 29070                           tosu	equ	0xFFF
 29071                           tosh	equ	0xFFE
 29072                           tosl	equ	0xFFD
 29073                           pclath	equ	0xFFA
 29074                           tblptru	equ	0xFF8
 29075                           tblptrh	equ	0xFF7
 29076                           tblptrl	equ	0xFF6
 29077                           tablat	equ	0xFF5
 29078                           prodh	equ	0xFF4
 29079                           prodl	equ	0xFF3
 29080                           intcon	equ	0xFF2
 29081                           postinc0	equ	0xFEE
 29082                           wreg	equ	0xFE8
 29083                           indf1	equ	0xFE7
 29084                           postdec1	equ	0xFE5
 29085                           fsr1h	equ	0xFE2
 29086                           fsr1l	equ	0xFE1
 29087                           indf2	equ	0xFDF
 29088                           postinc2	equ	0xFDE
 29089                           postdec2	equ	0xFDD
 29090                           plusw2	equ	0xFDB
 29091                           fsr2h	equ	0xFDA
 29092                           fsr2l	equ	0xFD9
 29093                           status	equ	0xFD8
 29094                           
 29095 ;; *************** function _ADC_ClockDivision *****************
 29096 ;; Defined at:
 29097 ;;		line 159 in file "Library/ADC.c"
 29098 ;; Parameters:    Size  Location     Type
 29099 ;;  pDivide         1    wreg     unsigned char 
 29100 ;; Auto vars:     Size  Location     Type
 29101 ;;  pDivide         1    0[BANK0 ] unsigned char 
 29102 ;;  unfound         1    2[BANK0 ] unsigned char 
 29103 ;;  reg             1    1[BANK0 ] unsigned char 
 29104 ;; Return value:  Size  Location     Type
 29105 ;;                  1    wreg      void 
 29106 ;; Registers used:
 29107 ;;		wreg, status,2, status,0
 29108 ;; Tracked objects:
 29109 ;;		On entry : 0/0
 29110 ;;		On exit  : 0/0
 29111 ;;		Unchanged: 0/0
 29112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29114 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29116 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29117 ;;Total ram usage:        3 bytes
 29118 ;; Hardware stack levels used:    1
 29119 ;; Hardware stack levels required when called:    7
 29120 ;; This function calls:
 29121 ;;		Nothing
 29122 ;; This function is called by:
 29123 ;;		_ADC_Init
 29124 ;; This function uses a non-reentrant model
 29125 ;;
 29126                           
 29127                           	psect	text130
 29128  01689E                     __ptext130:
 29129                           	opt stack 0
 29130  01689E                     _ADC_ClockDivision:
 29131                           	opt stack 21
 29132                           
 29133                           ; BSR set to: 0
 29134                           ;incstack = 0
 29135                           ;ADC_ClockDivision@pDivide stored from wreg
 29136  01689E  0100               	movlb	0	; () banked
 29137  0168A0  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 29138                           
 29139                           ;ADC.c: 161: UINT8 reg = 0;
 29140  0168A2  0E00               	movlw	0
 29141  0168A4  0100               	movlb	0	; () banked
 29142  0168A6  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 29143                           
 29144                           ;ADC.c: 162: bool unfound = 1;
 29145  0168A8  0E01               	movlw	1
 29146  0168AA  D002               	goto	L19
 29147  0168AC                     
 29148                           ; BSR set to: 0
 29149                           ;ADC.c: 167: reg = 0;
 29150                           
 29151                           ; BSR set to: 0
 29152  0168AC  0E00               	movlw	0
 29153  0168AE  D00C               	goto	L24
 29154  0168B0                     L19:
 29155  0168B0  0100               	movlb	0	; () banked
 29156  0168B2  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 29157                           
 29158                           ;ADC.c: 169: break;
 29159  0168B4  D02D               	goto	l1296
 29160  0168B6                     
 29161                           ; BSR set to: 0
 29162                           ;ADC.c: 171: reg = 0b100;
 29163                           
 29164                           ; BSR set to: 0
 29165  0168B6  0E04               	movlw	4
 29166  0168B8  D007               	goto	L24
 29167  0168BA                     
 29168                           ; BSR set to: 0
 29169                           ;ADC.c: 175: reg = 0b001;
 29170                           
 29171                           ; BSR set to: 0
 29172  0168BA  0E01               	movlw	1
 29173  0168BC  D005               	goto	L24
 29174  0168BE                     
 29175                           ; BSR set to: 0
 29176                           ;ADC.c: 179: reg = 0b101;
 29177                           
 29178                           ; BSR set to: 0
 29179  0168BE  0E05               	movlw	5
 29180  0168C0  D003               	goto	L24
 29181  0168C2                     
 29182                           ; BSR set to: 0
 29183                           ;ADC.c: 183: reg = 0b010;
 29184                           
 29185                           ; BSR set to: 0
 29186  0168C2  0E02               	movlw	2
 29187  0168C4  D001               	goto	L24
 29188  0168C6                     
 29189                           ; BSR set to: 0
 29190                           ;ADC.c: 187: reg = 0b110;
 29191                           
 29192                           ; BSR set to: 0
 29193  0168C6  0E06               	movlw	6
 29194  0168C8                     L24:
 29195  0168C8  0100               	movlb	0	; () banked
 29196  0168CA  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 29197                           
 29198                           ;ADC.c: 188: unfound = 0;
 29199  0168CC  0E00               	movlw	0
 29200  0168CE  D7F0               	goto	L19
 29201  0168D0                     
 29202                           ; BSR set to: 0
 29203                           ;ADC.c: 191: if (pDivide > 2)
 29204                           
 29205                           ; BSR set to: 0
 29206  0168D0  0E02               	movlw	2
 29207  0168D2  0100               	movlb	0	; () banked
 29208  0168D4  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 29209  0168D6  D003               	goto	l1303
 29210                           
 29211                           ; BSR set to: 0
 29212                           ;ADC.c: 192: pDivide --;
 29213  0168D8  0100               	movlb	0	; () banked
 29214  0168DA  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 29215  0168DC  D019               	goto	l1296
 29216  0168DE                     l1303:
 29217                           
 29218                           ; BSR set to: 0
 29219                           ;ADC.c: 193: else
 29220                           ;ADC.c: 194: pDivide = 2;
 29221                           
 29222                           ; BSR set to: 0
 29223  0168DE  0E02               	movlw	2
 29224  0168E0  0100               	movlb	0	; () banked
 29225  0168E2  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 29226                           
 29227                           ; BSR set to: 0
 29228                           ;ADC.c: 195: };
 29229  0168E4  D015               	goto	l1296
 29230  0168E6                     
 29231                           ; BSR set to: 0
 29232                           
 29233                           ; BSR set to: 0
 29234  0168E6  0100               	movlb	0	; () banked
 29235  0168E8  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 29236                           
 29237                           ; Switch size 1, requested type "space"
 29238                           ; Number of cases is 6, Range of values is 2 to 64
 29239                           ; switch strategies available:
 29240                           ; Name         Instructions Cycles
 29241                           ; simple_byte           19    10 (average)
 29242                           ;	Chosen strategy is simple_byte
 29243  0168EA  0A02               	xorlw	2	; case 2
 29244  0168EC  B4D8               	btfsc	status,2,c
 29245  0168EE  D7DE               	goto	l1295
 29246  0168F0  0A06               	xorlw	6	; case 4
 29247  0168F2  B4D8               	btfsc	status,2,c
 29248  0168F4  D7E0               	goto	l1297
 29249  0168F6  0A0C               	xorlw	12	; case 8
 29250  0168F8  B4D8               	btfsc	status,2,c
 29251  0168FA  D7DF               	goto	l1298
 29252  0168FC  0A18               	xorlw	24	; case 16
 29253  0168FE  B4D8               	btfsc	status,2,c
 29254  016900  D7DE               	goto	l1299
 29255  016902  0A30               	xorlw	48	; case 32
 29256  016904  B4D8               	btfsc	status,2,c
 29257  016906  D7DD               	goto	l1300
 29258  016908  0A60               	xorlw	96	; case 64
 29259  01690A  B4D8               	btfsc	status,2,c
 29260  01690C  D7DC               	goto	l1301
 29261  01690E  D7E0               	goto	l1302
 29262  016910                     l1296:
 29263                           
 29264                           ; BSR set to: 0
 29265                           
 29266                           ; BSR set to: 0
 29267                           
 29268                           ; BSR set to: 0
 29269  016910  0100               	movlb	0	; () banked
 29270  016912  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 29271  016914  0100               	movlb	0	; () banked
 29272  016916  A4D8               	btfss	status,2,c
 29273  016918  D7E6               	goto	l1294
 29274                           
 29275                           ; BSR set to: 0
 29276                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 29277                           
 29278                           ; BSR set to: 0
 29279  01691A  50C1               	movf	4033,w,c	;volatile
 29280  01691C  0100               	movlb	0	; () banked
 29281  01691E  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 29282  016920  0BF8               	andlw	-8
 29283  016922  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 29284  016924  6EC1               	movwf	4033,c	;volatile
 29285                           
 29286                           ; BSR set to: 0
 29287  016926  0012               	return		;funcret
 29288  016928                     __end_of_ADC_ClockDivision:
 29289                           	opt stack 0
 29290                           tosu	equ	0xFFF
 29291                           tosh	equ	0xFFE
 29292                           tosl	equ	0xFFD
 29293                           pclath	equ	0xFFA
 29294                           tblptru	equ	0xFF8
 29295                           tblptrh	equ	0xFF7
 29296                           tblptrl	equ	0xFF6
 29297                           tablat	equ	0xFF5
 29298                           prodh	equ	0xFF4
 29299                           prodl	equ	0xFF3
 29300                           intcon	equ	0xFF2
 29301                           postinc0	equ	0xFEE
 29302                           wreg	equ	0xFE8
 29303                           indf1	equ	0xFE7
 29304                           postdec1	equ	0xFE5
 29305                           fsr1h	equ	0xFE2
 29306                           fsr1l	equ	0xFE1
 29307                           indf2	equ	0xFDF
 29308                           postinc2	equ	0xFDE
 29309                           postdec2	equ	0xFDD
 29310                           plusw2	equ	0xFDB
 29311                           fsr2h	equ	0xFDA
 29312                           fsr2l	equ	0xFD9
 29313                           status	equ	0xFD8
 29314                           
 29315 ;; *************** function _ADC_Calibrate *****************
 29316 ;; Defined at:
 29317 ;;		line 63 in file "Library/ADC.c"
 29318 ;; Parameters:    Size  Location     Type
 29319 ;;		None
 29320 ;; Auto vars:     Size  Location     Type
 29321 ;;		None
 29322 ;; Return value:  Size  Location     Type
 29323 ;;                  1    wreg      void 
 29324 ;; Registers used:
 29325 ;;		cstack
 29326 ;; Tracked objects:
 29327 ;;		On entry : 0/0
 29328 ;;		On exit  : 0/0
 29329 ;;		Unchanged: 0/0
 29330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29335 ;;Total ram usage:        0 bytes
 29336 ;; Hardware stack levels used:    1
 29337 ;; Hardware stack levels required when called:    8
 29338 ;; This function calls:
 29339 ;;		_ADC_Off
 29340 ;;		_ADC_On
 29341 ;; This function is called by:
 29342 ;;		_ADC_Init
 29343 ;; This function uses a non-reentrant model
 29344 ;;
 29345                           
 29346                           	psect	text131
 29347  017FB4                     __ptext131:
 29348                           	opt stack 0
 29349  017FB4                     _ADC_Calibrate:
 29350                           	opt stack 20
 29351                           
 29352                           ;ADC.c: 65: ADC_On();
 29353                           
 29354                           ; BSR set to: 0
 29355                           ;incstack = 0
 29356  017FB4  EC6F  F0C0         	call	_ADC_On	;wreg free
 29357                           
 29358                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 29359  017FB8  8CC1               	bsf	4033,6,c	;volatile
 29360                           
 29361                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 29362  017FBA  82C2               	bsf	4034,1,c	;volatile
 29363  017FBC  B2C2               	btfsc	4034,1,c	;volatile
 29364  017FBE  D7FE               	goto	l1254
 29365                           
 29366                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 29367  017FC0  9CC1               	bcf	4033,6,c	;volatile
 29368                           
 29369                           ;ADC.c: 73: ADC_Off();
 29370  017FC2  EC65  F0C0         	call	_ADC_Off	;wreg free
 29371  017FC6  0012               	return		;funcret
 29372  017FC8                     __end_of_ADC_Calibrate:
 29373                           	opt stack 0
 29374                           tosu	equ	0xFFF
 29375                           tosh	equ	0xFFE
 29376                           tosl	equ	0xFFD
 29377                           pclath	equ	0xFFA
 29378                           tblptru	equ	0xFF8
 29379                           tblptrh	equ	0xFF7
 29380                           tblptrl	equ	0xFF6
 29381                           tablat	equ	0xFF5
 29382                           prodh	equ	0xFF4
 29383                           prodl	equ	0xFF3
 29384                           intcon	equ	0xFF2
 29385                           postinc0	equ	0xFEE
 29386                           wreg	equ	0xFE8
 29387                           indf1	equ	0xFE7
 29388                           postdec1	equ	0xFE5
 29389                           fsr1h	equ	0xFE2
 29390                           fsr1l	equ	0xFE1
 29391                           indf2	equ	0xFDF
 29392                           postinc2	equ	0xFDE
 29393                           postdec2	equ	0xFDD
 29394                           plusw2	equ	0xFDB
 29395                           fsr2h	equ	0xFDA
 29396                           fsr2l	equ	0xFD9
 29397                           status	equ	0xFD8
 29398                           
 29399 ;; *************** function _ADC_On *****************
 29400 ;; Defined at:
 29401 ;;		line 85 in file "Library/ADC.c"
 29402 ;; Parameters:    Size  Location     Type
 29403 ;;		None
 29404 ;; Auto vars:     Size  Location     Type
 29405 ;;		None
 29406 ;; Return value:  Size  Location     Type
 29407 ;;                  1    wreg      void 
 29408 ;; Registers used:
 29409 ;;		None
 29410 ;; Tracked objects:
 29411 ;;		On entry : 0/0
 29412 ;;		On exit  : 0/0
 29413 ;;		Unchanged: 0/0
 29414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29419 ;;Total ram usage:        0 bytes
 29420 ;; Hardware stack levels used:    1
 29421 ;; Hardware stack levels required when called:    7
 29422 ;; This function calls:
 29423 ;;		Nothing
 29424 ;; This function is called by:
 29425 ;;		_ADC_Calibrate
 29426 ;;		_ADC_Start
 29427 ;;		_ADC_ISR
 29428 ;;		_ADC_Sample
 29429 ;; This function uses a non-reentrant model
 29430 ;;
 29431                           
 29432                           	psect	text132
 29433  0180DE                     __ptext132:
 29434                           	opt stack 0
 29435  0180DE                     _ADC_On:
 29436                           	opt stack 21
 29437                           
 29438                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 29439                           
 29440                           ;incstack = 0
 29441  0180DE  80C2               	bsf	4034,0,c	;volatile
 29442                           
 29443                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 29444  0180E0  9C9E               	bcf	3998,6,c	;volatile
 29445  0180E2  0012               	return		;funcret
 29446  0180E4                     __end_of_ADC_On:
 29447                           	opt stack 0
 29448                           tosu	equ	0xFFF
 29449                           tosh	equ	0xFFE
 29450                           tosl	equ	0xFFD
 29451                           pclath	equ	0xFFA
 29452                           tblptru	equ	0xFF8
 29453                           tblptrh	equ	0xFF7
 29454                           tblptrl	equ	0xFF6
 29455                           tablat	equ	0xFF5
 29456                           prodh	equ	0xFF4
 29457                           prodl	equ	0xFF3
 29458                           intcon	equ	0xFF2
 29459                           postinc0	equ	0xFEE
 29460                           wreg	equ	0xFE8
 29461                           indf1	equ	0xFE7
 29462                           postdec1	equ	0xFE5
 29463                           fsr1h	equ	0xFE2
 29464                           fsr1l	equ	0xFE1
 29465                           indf2	equ	0xFDF
 29466                           postinc2	equ	0xFDE
 29467                           postdec2	equ	0xFDD
 29468                           plusw2	equ	0xFDB
 29469                           fsr2h	equ	0xFDA
 29470                           fsr2l	equ	0xFD9
 29471                           status	equ	0xFD8
 29472                           
 29473 ;; *************** function _ADC_Off *****************
 29474 ;; Defined at:
 29475 ;;		line 94 in file "Library/ADC.c"
 29476 ;; Parameters:    Size  Location     Type
 29477 ;;		None
 29478 ;; Auto vars:     Size  Location     Type
 29479 ;;		None
 29480 ;; Return value:  Size  Location     Type
 29481 ;;                  1    wreg      void 
 29482 ;; Registers used:
 29483 ;;		None
 29484 ;; Tracked objects:
 29485 ;;		On entry : 0/0
 29486 ;;		On exit  : 0/0
 29487 ;;		Unchanged: 0/0
 29488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29493 ;;Total ram usage:        0 bytes
 29494 ;; Hardware stack levels used:    1
 29495 ;; Hardware stack levels required when called:    7
 29496 ;; This function calls:
 29497 ;;		Nothing
 29498 ;; This function is called by:
 29499 ;;		_ADC_Calibrate
 29500 ;;		_ADC_Start
 29501 ;;		_ADC_ISR
 29502 ;;		_ADC_Sample
 29503 ;; This function uses a non-reentrant model
 29504 ;;
 29505                           
 29506                           	psect	text133
 29507  0180CA                     __ptext133:
 29508                           	opt stack 0
 29509  0180CA                     _ADC_Off:
 29510                           	opt stack 21
 29511                           
 29512                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 29513                           
 29514                           ;incstack = 0
 29515  0180CA  90C2               	bcf	4034,0,c	;volatile
 29516                           
 29517                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 29518  0180CC  9C9E               	bcf	3998,6,c	;volatile
 29519                           
 29520                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 29521  0180CE  9C9D               	bcf	3997,6,c	;volatile
 29522  0180D0  0012               	return		;funcret
 29523  0180D2                     __end_of_ADC_Off:
 29524                           	opt stack 0
 29525                           tosu	equ	0xFFF
 29526                           tosh	equ	0xFFE
 29527                           tosl	equ	0xFFD
 29528                           pclath	equ	0xFFA
 29529                           tblptru	equ	0xFF8
 29530                           tblptrh	equ	0xFF7
 29531                           tblptrl	equ	0xFF6
 29532                           tablat	equ	0xFF5
 29533                           prodh	equ	0xFF4
 29534                           prodl	equ	0xFF3
 29535                           intcon	equ	0xFF2
 29536                           postinc0	equ	0xFEE
 29537                           wreg	equ	0xFE8
 29538                           indf1	equ	0xFE7
 29539                           postdec1	equ	0xFE5
 29540                           fsr1h	equ	0xFE2
 29541                           fsr1l	equ	0xFE1
 29542                           indf2	equ	0xFDF
 29543                           postinc2	equ	0xFDE
 29544                           postdec2	equ	0xFDD
 29545                           plusw2	equ	0xFDB
 29546                           fsr2h	equ	0xFDA
 29547                           fsr2l	equ	0xFD9
 29548                           status	equ	0xFD8
 29549                           
 29550 ;; *************** function _getMode *****************
 29551 ;; Defined at:
 29552 ;;		line 102 in file "main.c"
 29553 ;; Parameters:    Size  Location     Type
 29554 ;;		None
 29555 ;; Auto vars:     Size  Location     Type
 29556 ;;		None
 29557 ;; Return value:  Size  Location     Type
 29558 ;;                  1    wreg      void 
 29559 ;; Registers used:
 29560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 29561 ;; Tracked objects:
 29562 ;;		On entry : 0/0
 29563 ;;		On exit  : 0/0
 29564 ;;		Unchanged: 0/0
 29565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29570 ;;Total ram usage:        0 bytes
 29571 ;; Hardware stack levels used:    1
 29572 ;; Hardware stack levels required when called:   16
 29573 ;; This function calls:
 29574 ;;		_HMI_DIPSwitch
 29575 ;;		_HMI_DownSwitch
 29576 ;;		_HMI_LeftSwitch
 29577 ;;		_HMI_Poll
 29578 ;;		_HMI_RightSwitch
 29579 ;;		_HMI_UpSwitch
 29580 ;;		_MXK_DIPSwitch
 29581 ;;		_MXK_TestButton
 29582 ;; This function is called by:
 29583 ;;		_main
 29584 ;; This function uses a non-reentrant model
 29585 ;;
 29586                           
 29587                           	psect	text134
 29588  01593A                     __ptext134:
 29589                           	opt stack 0
 29590  01593A                     _getMode:
 29591                           	opt stack 14
 29592                           
 29593                           ;main.c: 103: HMI_Poll();
 29594                           
 29595                           ;incstack = 0
 29596  01593A  ECF9  F0B6         	call	_HMI_Poll	;wreg free
 29597                           
 29598                           ;main.c: 104: mode = 0;
 29599  01593E  0E00               	movlw	0
 29600  015940  0103               	movlb	3	; () banked
 29601  015942  6F29               	movwf	(_mode+1)& (0+255),b
 29602  015944  0E00               	movlw	0
 29603  015946  6F28               	movwf	_mode& (0+255),b
 29604                           
 29605                           ; BSR set to: 3
 29606                           ;main.c: 105: if (HMIBoard.mUp.mGetState()) {
 29607  015948  EE23  F062         	lfsr	2,_HMIBoard+35
 29608  01594C  D801               	call	u14318
 29609  01594E  D00A               	goto	u14319
 29610  015950                     u14318:
 29611  015950  0005               	push	
 29612  015952  6EFA               	movwf	pclath,c
 29613  015954  50DE               	movf	postinc2,w,c
 29614  015956  6EFD               	movwf	tosl,c
 29615  015958  50DE               	movf	postinc2,w,c
 29616  01595A  6EFE               	movwf	tosh,c
 29617  01595C  50DE               	movf	postinc2,w,c
 29618  01595E  6EFF               	movwf	tosu,c
 29619  015960  50FA               	movf	pclath,w,c
 29620  015962  0012               	return		;indir
 29621  015964                     u14319:
 29622  015964  0900               	iorlw	0
 29623  015966  B4D8               	btfsc	status,2,c
 29624  015968  D005               	goto	l2311
 29625                           
 29626                           ;main.c: 106: mode = 1;
 29627  01596A  0E00               	movlw	0
 29628  01596C  0103               	movlb	3	; () banked
 29629  01596E  6F29               	movwf	(_mode+1)& (0+255),b
 29630  015970  0E01               	movlw	1
 29631  015972  6F28               	movwf	_mode& (0+255),b
 29632  015974                     l2311:
 29633                           
 29634                           ;main.c: 107: }
 29635                           ;main.c: 108: if (HMIBoard.mRight.mGetState()) {
 29636                           
 29637                           ; BSR set to: 3
 29638  015974  EE23  F04E         	lfsr	2,_HMIBoard+15
 29639  015978  D801               	call	u14338
 29640  01597A  D00A               	goto	u14339
 29641  01597C                     u14338:
 29642  01597C  0005               	push	
 29643  01597E  6EFA               	movwf	pclath,c
 29644  015980  50DE               	movf	postinc2,w,c
 29645  015982  6EFD               	movwf	tosl,c
 29646  015984  50DE               	movf	postinc2,w,c
 29647  015986  6EFE               	movwf	tosh,c
 29648  015988  50DE               	movf	postinc2,w,c
 29649  01598A  6EFF               	movwf	tosu,c
 29650  01598C  50FA               	movf	pclath,w,c
 29651  01598E  0012               	return		;indir
 29652  015990                     u14339:
 29653  015990  0900               	iorlw	0
 29654  015992  B4D8               	btfsc	status,2,c
 29655  015994  D005               	goto	l2312
 29656                           
 29657                           ;main.c: 109: mode = 2;
 29658  015996  0E00               	movlw	0
 29659  015998  0103               	movlb	3	; () banked
 29660  01599A  6F29               	movwf	(_mode+1)& (0+255),b
 29661  01599C  0E02               	movlw	2
 29662  01599E  6F28               	movwf	_mode& (0+255),b
 29663  0159A0                     l2312:
 29664                           
 29665                           ;main.c: 110: }
 29666                           ;main.c: 111: if (HMIBoard.mDown.mGetState()) {
 29667                           
 29668                           ; BSR set to: 3
 29669  0159A0  EE23  F06C         	lfsr	2,_HMIBoard+45
 29670  0159A4  D801               	call	u14358
 29671  0159A6  D00A               	goto	u14359
 29672  0159A8                     u14358:
 29673  0159A8  0005               	push	
 29674  0159AA  6EFA               	movwf	pclath,c
 29675  0159AC  50DE               	movf	postinc2,w,c
 29676  0159AE  6EFD               	movwf	tosl,c
 29677  0159B0  50DE               	movf	postinc2,w,c
 29678  0159B2  6EFE               	movwf	tosh,c
 29679  0159B4  50DE               	movf	postinc2,w,c
 29680  0159B6  6EFF               	movwf	tosu,c
 29681  0159B8  50FA               	movf	pclath,w,c
 29682  0159BA  0012               	return		;indir
 29683  0159BC                     u14359:
 29684  0159BC  0900               	iorlw	0
 29685  0159BE  B4D8               	btfsc	status,2,c
 29686  0159C0  D005               	goto	l2313
 29687                           
 29688                           ;main.c: 112: mode = 3;
 29689  0159C2  0E00               	movlw	0
 29690  0159C4  0103               	movlb	3	; () banked
 29691  0159C6  6F29               	movwf	(_mode+1)& (0+255),b
 29692  0159C8  0E03               	movlw	3
 29693  0159CA  6F28               	movwf	_mode& (0+255),b
 29694  0159CC                     l2313:
 29695                           
 29696                           ;main.c: 113: }
 29697                           ;main.c: 114: if (HMIBoard.mLeft.mGetState()) {
 29698                           
 29699                           ; BSR set to: 3
 29700  0159CC  EE23  F058         	lfsr	2,_HMIBoard+25
 29701  0159D0  D801               	call	u14378
 29702  0159D2  D00A               	goto	u14379
 29703  0159D4                     u14378:
 29704  0159D4  0005               	push	
 29705  0159D6  6EFA               	movwf	pclath,c
 29706  0159D8  50DE               	movf	postinc2,w,c
 29707  0159DA  6EFD               	movwf	tosl,c
 29708  0159DC  50DE               	movf	postinc2,w,c
 29709  0159DE  6EFE               	movwf	tosh,c
 29710  0159E0  50DE               	movf	postinc2,w,c
 29711  0159E2  6EFF               	movwf	tosu,c
 29712  0159E4  50FA               	movf	pclath,w,c
 29713  0159E6  0012               	return		;indir
 29714  0159E8                     u14379:
 29715  0159E8  0900               	iorlw	0
 29716  0159EA  B4D8               	btfsc	status,2,c
 29717  0159EC  0012               	return	
 29718                           
 29719                           ;main.c: 115: mode = 4;
 29720  0159EE  0E00               	movlw	0
 29721  0159F0  0103               	movlb	3	; () banked
 29722  0159F2  6F29               	movwf	(_mode+1)& (0+255),b
 29723  0159F4  0E04               	movlw	4
 29724  0159F6  6F28               	movwf	_mode& (0+255),b
 29725  0159F8  0012               	return	
 29726  0159FA                     __end_of_getMode:
 29727                           	opt stack 0
 29728                           tosu	equ	0xFFF
 29729                           tosh	equ	0xFFE
 29730                           tosl	equ	0xFFD
 29731                           pclath	equ	0xFFA
 29732                           tblptru	equ	0xFF8
 29733                           tblptrh	equ	0xFF7
 29734                           tblptrl	equ	0xFF6
 29735                           tablat	equ	0xFF5
 29736                           prodh	equ	0xFF4
 29737                           prodl	equ	0xFF3
 29738                           intcon	equ	0xFF2
 29739                           postinc0	equ	0xFEE
 29740                           wreg	equ	0xFE8
 29741                           indf1	equ	0xFE7
 29742                           postdec1	equ	0xFE5
 29743                           fsr1h	equ	0xFE2
 29744                           fsr1l	equ	0xFE1
 29745                           indf2	equ	0xFDF
 29746                           postinc2	equ	0xFDE
 29747                           postdec2	equ	0xFDD
 29748                           plusw2	equ	0xFDB
 29749                           fsr2h	equ	0xFDA
 29750                           fsr2l	equ	0xFD9
 29751                           status	equ	0xFD8
 29752                           
 29753 ;; *************** function _HMI_Poll *****************
 29754 ;; Defined at:
 29755 ;;		line 252 in file "HMI.c"
 29756 ;; Parameters:    Size  Location     Type
 29757 ;;		None
 29758 ;; Auto vars:     Size  Location     Type
 29759 ;;		None
 29760 ;; Return value:  Size  Location     Type
 29761 ;;                  1    wreg      void 
 29762 ;; Registers used:
 29763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 29764 ;; Tracked objects:
 29765 ;;		On entry : 0/0
 29766 ;;		On exit  : 0/0
 29767 ;;		Unchanged: 0/0
 29768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29773 ;;Total ram usage:        0 bytes
 29774 ;; Hardware stack levels used:    1
 29775 ;; Hardware stack levels required when called:   15
 29776 ;; This function calls:
 29777 ;;		_Button_Poll
 29778 ;; This function is called by:
 29779 ;;		_getMode
 29780 ;;		_mode1
 29781 ;;		_mode2
 29782 ;;		_mode4
 29783 ;;		_main
 29784 ;; This function uses a non-reentrant model
 29785 ;;
 29786                           
 29787                           	psect	text135
 29788  016DF2                     __ptext135:
 29789                           	opt stack 0
 29790  016DF2                     _HMI_Poll:
 29791                           	opt stack 14
 29792                           
 29793                           ;HMI.c: 254: TRISE = 0xFC;
 29794                           
 29795                           ;incstack = 0
 29796  016DF2  0EFC               	movlw	252
 29797  016DF4  6E96               	movwf	3990,c	;volatile
 29798                           
 29799                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 29800  016DF6  0E6F               	movlw	low (_HMIBoard+48)
 29801  016DF8  0100               	movlb	0	; () banked
 29802  016DFA  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 29803  016DFC  0E03               	movlw	high (_HMIBoard+48)
 29804  016DFE  0100               	movlb	0	; () banked
 29805  016E00  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 29806  016E02  0E01               	movlw	1
 29807  016E04  0100               	movlb	0	; () banked
 29808  016E06  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 29809  016E08  EC9B  F0A4         	call	_Button_Poll	;wreg free
 29810                           
 29811                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 29812  016E0C  0E51               	movlw	low (_HMIBoard+18)
 29813  016E0E  0100               	movlb	0	; () banked
 29814  016E10  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 29815  016E12  0E03               	movlw	high (_HMIBoard+18)
 29816  016E14  0100               	movlb	0	; () banked
 29817  016E16  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 29818  016E18  0E01               	movlw	1
 29819  016E1A  0100               	movlb	0	; () banked
 29820  016E1C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 29821  016E1E  EC9B  F0A4         	call	_Button_Poll	;wreg free
 29822                           
 29823                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 29824  016E22  0E47               	movlw	low (_HMIBoard+8)
 29825  016E24  0100               	movlb	0	; () banked
 29826  016E26  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 29827  016E28  0E03               	movlw	high (_HMIBoard+8)
 29828  016E2A  0100               	movlb	0	; () banked
 29829  016E2C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 29830  016E2E  0E01               	movlw	1
 29831  016E30  0100               	movlb	0	; () banked
 29832  016E32  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 29833  016E34  EC9B  F0A4         	call	_Button_Poll	;wreg free
 29834                           
 29835                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 29836  016E38  0E5B               	movlw	low (_HMIBoard+28)
 29837  016E3A  0100               	movlb	0	; () banked
 29838  016E3C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 29839  016E3E  0E03               	movlw	high (_HMIBoard+28)
 29840  016E40  0100               	movlb	0	; () banked
 29841  016E42  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 29842  016E44  0E01               	movlw	1
 29843  016E46  0100               	movlb	0	; () banked
 29844  016E48  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 29845  016E4A  EC9B  F0A4         	call	_Button_Poll	;wreg free
 29846                           
 29847                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 29848  016E4E  0E65               	movlw	low (_HMIBoard+38)
 29849  016E50  0100               	movlb	0	; () banked
 29850  016E52  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 29851  016E54  0E03               	movlw	high (_HMIBoard+38)
 29852  016E56  0100               	movlb	0	; () banked
 29853  016E58  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 29854  016E5A  0E01               	movlw	1
 29855  016E5C  0100               	movlb	0	; () banked
 29856  016E5E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 29857  016E60  EC9B  F0A4         	call	_Button_Poll	;wreg free
 29858  016E64  0012               	return		;funcret
 29859  016E66                     __end_of_HMI_Poll:
 29860                           	opt stack 0
 29861                           tosu	equ	0xFFF
 29862                           tosh	equ	0xFFE
 29863                           tosl	equ	0xFFD
 29864                           pclath	equ	0xFFA
 29865                           tblptru	equ	0xFF8
 29866                           tblptrh	equ	0xFF7
 29867                           tblptrl	equ	0xFF6
 29868                           tablat	equ	0xFF5
 29869                           prodh	equ	0xFF4
 29870                           prodl	equ	0xFF3
 29871                           intcon	equ	0xFF2
 29872                           postinc0	equ	0xFEE
 29873                           wreg	equ	0xFE8
 29874                           indf1	equ	0xFE7
 29875                           postdec1	equ	0xFE5
 29876                           fsr1h	equ	0xFE2
 29877                           fsr1l	equ	0xFE1
 29878                           indf2	equ	0xFDF
 29879                           postinc2	equ	0xFDE
 29880                           postdec2	equ	0xFDD
 29881                           plusw2	equ	0xFDB
 29882                           fsr2h	equ	0xFDA
 29883                           fsr2l	equ	0xFD9
 29884                           status	equ	0xFD8
 29885                           
 29886 ;; *************** function _Button_Poll *****************
 29887 ;; Defined at:
 29888 ;;		line 57 in file "Library/Button.c"
 29889 ;; Parameters:    Size  Location     Type
 29890 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 29891 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 29892 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 29893 ;; Auto vars:     Size  Location     Type
 29894 ;;  Pin             1   35[BANK0 ] unsigned char 
 29895 ;; Return value:  Size  Location     Type
 29896 ;;                  1    wreg      unsigned char 
 29897 ;; Registers used:
 29898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 29899 ;; Tracked objects:
 29900 ;;		On entry : 0/0
 29901 ;;		On exit  : 0/0
 29902 ;;		Unchanged: 0/0
 29903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29904 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29906 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29907 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29908 ;;Total ram usage:        9 bytes
 29909 ;; Hardware stack levels used:    1
 29910 ;; Hardware stack levels required when called:   14
 29911 ;; This function calls:
 29912 ;;		_Event_DIPSwitch
 29913 ;;		_Event_NULL
 29914 ;;		_Event_TestButton
 29915 ;;		_HMI_DIPSwitch
 29916 ;;		_HMI_DownSwitch
 29917 ;;		_HMI_LeftSwitch
 29918 ;;		_HMI_RightSwitch
 29919 ;;		_HMI_UpSwitch
 29920 ;;		_MXK_DIPSwitch
 29921 ;;		_MXK_TestButton
 29922 ;; This function is called by:
 29923 ;;		_HMI_Poll
 29924 ;;		_MXK_Poll
 29925 ;; This function uses a non-reentrant model
 29926 ;;
 29927                           
 29928                           	psect	text136
 29929  014936                     __ptext136:
 29930                           	opt stack 0
 29931  014936                     _Button_Poll:
 29932                           	opt stack 14
 29933                           
 29934                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 29935                           
 29936                           ;incstack = 0
 29937  014936  0100               	movlb	0	; () banked
 29938  014938  EE20 F007          	lfsr	2,7
 29939  01493C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 29940  01493E  26D9               	addwf	fsr2l,f,c
 29941  014940  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 29942  014942  22DA               	addwfc	fsr2h,f,c
 29943  014944  D801               	call	u12468
 29944  014946  D00A               	goto	u12469
 29945  014948                     u12468:
 29946  014948  0005               	push	
 29947  01494A  6EFA               	movwf	pclath,c
 29948  01494C  50DE               	movf	postinc2,w,c
 29949  01494E  6EFD               	movwf	tosl,c
 29950  014950  50DE               	movf	postinc2,w,c
 29951  014952  6EFE               	movwf	tosh,c
 29952  014954  50DE               	movf	postinc2,w,c
 29953  014956  6EFF               	movwf	tosu,c
 29954  014958  50FA               	movf	pclath,w,c
 29955  01495A  0012               	return		;indir
 29956  01495C                     u12469:
 29957  01495C  0100               	movlb	0	; () banked
 29958  01495E  6F83               	movwf	Button_Poll@Pin& (0+255),b
 29959                           
 29960                           ; BSR set to: 0
 29961                           ;Button.c: 61: if (pButton->mState == Pin)
 29962  014960  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 29963  014964  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 29964  014968  0100               	movlb	0	; () banked
 29965  01496A  5183               	movf	Button_Poll@Pin& (0+255),w,b
 29966  01496C  18DE               	xorwf	postinc2,w,c
 29967  01496E  A4D8               	btfss	status,2,c
 29968  014970  D021               	goto	l11
 29969                           
 29970                           ; BSR set to: 0
 29971                           ;Button.c: 62: {
 29972                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 29973  014972  0100               	movlb	0	; () banked
 29974  014974  EE20 F001          	lfsr	2,1
 29975  014978  517B               	movf	Button_Poll@pButton& (0+255),w,b
 29976  01497A  26D9               	addwf	fsr2l,f,c
 29977  01497C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 29978  01497E  22DA               	addwfc	fsr2h,f,c
 29979  014980  0100               	movlb	0	; () banked
 29980  014982  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 29981  014984  5CDE               	subwf	postinc2,w,c
 29982  014986  B0D8               	btfsc	status,0,c
 29983  014988  D00A               	goto	l12
 29984                           
 29985                           ; BSR set to: 0
 29986                           ;Button.c: 66: pButton->mCount = 0;
 29987  01498A  0100               	movlb	0	; () banked
 29988  01498C  EE20 F001          	lfsr	2,1
 29989  014990  517B               	movf	Button_Poll@pButton& (0+255),w,b
 29990  014992  26D9               	addwf	fsr2l,f,c
 29991  014994  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 29992  014996  22DA               	addwfc	fsr2h,f,c
 29993  014998  0E00               	movlw	0
 29994  01499A  6EDF               	movwf	indf2,c
 29995  01499C  0012               	return	
 29996  01499E                     l12:
 29997                           
 29998                           ; BSR set to: 0
 29999                           ;Button.c: 67: else
 30000                           ;Button.c: 68: pButton->mCount -= pIncrement;
 30001                           
 30002                           ; BSR set to: 0
 30003  01499E  0100               	movlb	0	; () banked
 30004  0149A0  EE20 F001          	lfsr	2,1
 30005  0149A4  517B               	movf	Button_Poll@pButton& (0+255),w,b
 30006  0149A6  26D9               	addwf	fsr2l,f,c
 30007  0149A8  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 30008  0149AA  22DA               	addwfc	fsr2h,f,c
 30009  0149AC  0100               	movlb	0	; () banked
 30010  0149AE  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 30011  0149B0  5EDF               	subwf	indf2,f,c
 30012                           
 30013                           ; BSR set to: 0
 30014                           ;Button.c: 69: }
 30015  0149B2  0012               	return	
 30016  0149B4                     l11:
 30017                           
 30018                           ; BSR set to: 0
 30019                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 30020                           
 30021                           ; BSR set to: 0
 30022  0149B4  0100               	movlb	0	; () banked
 30023  0149B6  EE20 F001          	lfsr	2,1
 30024  0149BA  517B               	movf	Button_Poll@pButton& (0+255),w,b
 30025  0149BC  26D9               	addwf	fsr2l,f,c
 30026  0149BE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 30027  0149C0  22DA               	addwfc	fsr2h,f,c
 30028  0149C2  50DF               	movf	indf2,w,c
 30029  0149C4  0100               	movlb	0	; () banked
 30030  0149C6  6F7E               	movwf	??_Button_Poll& (0+255),b
 30031  0149C8  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 30032  0149CA  0100               	movlb	0	; () banked
 30033  0149CC  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 30034  0149CE  0100               	movlb	0	; () banked
 30035  0149D0  277E               	addwf	??_Button_Poll& (0+255),f,b
 30036  0149D2  0E00               	movlw	0
 30037  0149D4  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 30038  0149D6  0100               	movlb	0	; () banked
 30039  0149D8  EE20 F001          	lfsr	2,1
 30040  0149DC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 30041  0149DE  26D9               	addwf	fsr2l,f,c
 30042  0149E0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 30043  0149E2  22DA               	addwfc	fsr2h,f,c
 30044  0149E4  50DF               	movf	indf2,w,c
 30045  0149E6  0100               	movlb	0	; () banked
 30046  0149E8  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 30047  0149EA  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 30048  0149EC  0100               	movlb	0	; () banked
 30049  0149EE  517E               	movf	??_Button_Poll& (0+255),w,b
 30050  0149F0  0100               	movlb	0	; () banked
 30051  0149F2  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 30052  0149F4  0100               	movlb	0	; () banked
 30053  0149F6  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 30054  0149F8  0A80               	xorlw	128
 30055  0149FA  0100               	movlb	0	; () banked
 30056  0149FC  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 30057  0149FE  0100               	movlb	0	; () banked
 30058  014A00  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 30059  014A02  0A80               	xorlw	128
 30060  014A04  0100               	movlb	0	; () banked
 30061  014A06  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 30062  014A08  B0D8               	btfsc	status,0,c
 30063  014A0A  0012               	return	
 30064                           
 30065                           ; BSR set to: 0
 30066                           ;Button.c: 73: {
 30067                           ;Button.c: 75: pButton->mCount += pIncrement;
 30068  014A0C  0100               	movlb	0	; () banked
 30069  014A0E  EE20 F001          	lfsr	2,1
 30070  014A12  517B               	movf	Button_Poll@pButton& (0+255),w,b
 30071  014A14  26D9               	addwf	fsr2l,f,c
 30072  014A16  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 30073  014A18  22DA               	addwfc	fsr2h,f,c
 30074  014A1A  0100               	movlb	0	; () banked
 30075  014A1C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 30076  014A1E  26DF               	addwf	indf2,f,c
 30077                           
 30078                           ; BSR set to: 0
 30079                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 30080  014A20  0100               	movlb	0	; () banked
 30081  014A22  EE20 F002          	lfsr	2,2
 30082  014A26  517B               	movf	Button_Poll@pButton& (0+255),w,b
 30083  014A28  26D9               	addwf	fsr2l,f,c
 30084  014A2A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 30085  014A2C  22DA               	addwfc	fsr2h,f,c
 30086  014A2E  0100               	movlb	0	; () banked
 30087  014A30  EE10 F001          	lfsr	1,1
 30088  014A34  517B               	movf	Button_Poll@pButton& (0+255),w,b
 30089  014A36  26E1               	addwf	fsr1l,f,c
 30090  014A38  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 30091  014A3A  22E2               	addwfc	fsr1h,f,c
 30092  014A3C  50E7               	movf	indf1,w,c
 30093  014A3E  0100               	movlb	0	; () banked
 30094  014A40  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 30095  014A42  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 30096  014A44  50DE               	movf	postinc2,w,c
 30097  014A46  0100               	movlb	0	; () banked
 30098  014A48  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 30099  014A4A  50DE               	movf	postinc2,w,c
 30100  014A4C  0100               	movlb	0	; () banked
 30101  014A4E  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 30102  014A50  A0D8               	btfss	status,0,c
 30103  014A52  0012               	return	
 30104                           
 30105                           ; BSR set to: 0
 30106                           ;Button.c: 77: {
 30107                           ;Button.c: 79: pButton->mState = Pin;
 30108  014A54  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 30109  014A58  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 30110  014A5C  C083  FFDF         	movff	Button_Poll@Pin,indf2
 30111                           
 30112                           ; BSR set to: 0
 30113                           ;Button.c: 80: pButton->mCount = 0;
 30114  014A60  0100               	movlb	0	; () banked
 30115  014A62  EE20 F001          	lfsr	2,1
 30116  014A66  517B               	movf	Button_Poll@pButton& (0+255),w,b
 30117  014A68  26D9               	addwf	fsr2l,f,c
 30118  014A6A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 30119  014A6C  22DA               	addwfc	fsr2h,f,c
 30120  014A6E  0E00               	movlw	0
 30121  014A70  6EDF               	movwf	indf2,c
 30122                           
 30123                           ; BSR set to: 0
 30124                           ;Button.c: 83: pButton->mFunction(Pin);
 30125  014A72  0100               	movlb	0	; () banked
 30126  014A74  EE20 F004          	lfsr	2,4
 30127  014A78  517B               	movf	Button_Poll@pButton& (0+255),w,b
 30128  014A7A  26D9               	addwf	fsr2l,f,c
 30129  014A7C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 30130  014A7E  22DA               	addwfc	fsr2h,f,c
 30131  014A80  D801               	call	u12518
 30132  014A82  0012               	return	
 30133  014A84                     u12518:
 30134  014A84  0005               	push	
 30135  014A86  6EFA               	movwf	pclath,c
 30136  014A88  50DE               	movf	postinc2,w,c
 30137  014A8A  6EFD               	movwf	tosl,c
 30138  014A8C  50DE               	movf	postinc2,w,c
 30139  014A8E  6EFE               	movwf	tosh,c
 30140  014A90  50DE               	movf	postinc2,w,c
 30141  014A92  6EFF               	movwf	tosu,c
 30142  014A94  50FA               	movf	pclath,w,c
 30143  014A96  0100               	movlb	0	; () banked
 30144  014A98  5183               	movf	Button_Poll@Pin& (0+255),w,b
 30145  014A9A  0012               	return		;indir
 30146  014A9C                     __end_of_Button_Poll:
 30147                           	opt stack 0
 30148                           tosu	equ	0xFFF
 30149                           tosh	equ	0xFFE
 30150                           tosl	equ	0xFFD
 30151                           pclath	equ	0xFFA
 30152                           tblptru	equ	0xFF8
 30153                           tblptrh	equ	0xFF7
 30154                           tblptrl	equ	0xFF6
 30155                           tablat	equ	0xFF5
 30156                           prodh	equ	0xFF4
 30157                           prodl	equ	0xFF3
 30158                           intcon	equ	0xFF2
 30159                           postinc0	equ	0xFEE
 30160                           wreg	equ	0xFE8
 30161                           indf1	equ	0xFE7
 30162                           postdec1	equ	0xFE5
 30163                           fsr1h	equ	0xFE2
 30164                           fsr1l	equ	0xFE1
 30165                           indf2	equ	0xFDF
 30166                           postinc2	equ	0xFDE
 30167                           postdec2	equ	0xFDD
 30168                           plusw2	equ	0xFDB
 30169                           fsr2h	equ	0xFDA
 30170                           fsr2l	equ	0xFD9
 30171                           status	equ	0xFD8
 30172                           
 30173 ;; *************** function _MXK_DIPSwitch *****************
 30174 ;; Defined at:
 30175 ;;		line 24 in file "Library/MXK.c"
 30176 ;; Parameters:    Size  Location     Type
 30177 ;;		None
 30178 ;; Auto vars:     Size  Location     Type
 30179 ;;		None
 30180 ;; Return value:  Size  Location     Type
 30181 ;;                  1    wreg      unsigned char 
 30182 ;; Registers used:
 30183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30184 ;; Tracked objects:
 30185 ;;		On entry : 0/0
 30186 ;;		On exit  : 0/0
 30187 ;;		Unchanged: 0/0
 30188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30193 ;;Total ram usage:        0 bytes
 30194 ;; Hardware stack levels used:    1
 30195 ;; Hardware stack levels required when called:    8
 30196 ;; This function calls:
 30197 ;;		_Port_GetQuad
 30198 ;; This function is called by:
 30199 ;;		_FunctInitButton
 30200 ;;		_Button_Poll
 30201 ;;		_getMode
 30202 ;; This function uses a non-reentrant model
 30203 ;;
 30204                           
 30205                           	psect	text137
 30206  017EF8                     __ptext137:
 30207                           	opt stack 0
 30208  017EF8                     _MXK_DIPSwitch:
 30209                           	opt stack 19
 30210                           
 30211                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 30212                           
 30213                           ;incstack = 0
 30214  017EF8  0E99               	movlw	low _PortD
 30215  017EFA  0100               	movlb	0	; () banked
 30216  017EFC  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 30217  017EFE  0E03               	movlw	high _PortD
 30218  017F00  0100               	movlb	0	; () banked
 30219  017F02  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 30220  017F04  0E00               	movlw	0
 30221  017F06  0100               	movlb	0	; () banked
 30222  017F08  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 30223  017F0A  ECC2  F0BA         	call	_Port_GetQuad
 30224  017F0E  0012               	return	
 30225  017F10                     __end_of_MXK_DIPSwitch:
 30226                           	opt stack 0
 30227                           tosu	equ	0xFFF
 30228                           tosh	equ	0xFFE
 30229                           tosl	equ	0xFFD
 30230                           pclath	equ	0xFFA
 30231                           tblptru	equ	0xFF8
 30232                           tblptrh	equ	0xFF7
 30233                           tblptrl	equ	0xFF6
 30234                           tablat	equ	0xFF5
 30235                           prodh	equ	0xFF4
 30236                           prodl	equ	0xFF3
 30237                           intcon	equ	0xFF2
 30238                           postinc0	equ	0xFEE
 30239                           wreg	equ	0xFE8
 30240                           indf1	equ	0xFE7
 30241                           postdec1	equ	0xFE5
 30242                           fsr1h	equ	0xFE2
 30243                           fsr1l	equ	0xFE1
 30244                           indf2	equ	0xFDF
 30245                           postinc2	equ	0xFDE
 30246                           postdec2	equ	0xFDD
 30247                           plusw2	equ	0xFDB
 30248                           fsr2h	equ	0xFDA
 30249                           fsr2l	equ	0xFD9
 30250                           status	equ	0xFD8
 30251                           
 30252 ;; *************** function _HMI_DIPSwitch *****************
 30253 ;; Defined at:
 30254 ;;		line 47 in file "HMI.c"
 30255 ;; Parameters:    Size  Location     Type
 30256 ;;		None
 30257 ;; Auto vars:     Size  Location     Type
 30258 ;;		None
 30259 ;; Return value:  Size  Location     Type
 30260 ;;                  1    wreg      unsigned char 
 30261 ;; Registers used:
 30262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30263 ;; Tracked objects:
 30264 ;;		On entry : 0/0
 30265 ;;		On exit  : 0/0
 30266 ;;		Unchanged: 0/0
 30267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30272 ;;Total ram usage:        0 bytes
 30273 ;; Hardware stack levels used:    1
 30274 ;; Hardware stack levels required when called:    8
 30275 ;; This function calls:
 30276 ;;		_Port_GetQuad
 30277 ;; This function is called by:
 30278 ;;		_HMI_Init
 30279 ;;		_Button_Poll
 30280 ;;		_getMode
 30281 ;; This function uses a non-reentrant model
 30282 ;;
 30283                           
 30284                           	psect	text138
 30285  017F10                     __ptext138:
 30286                           	opt stack 0
 30287  017F10                     _HMI_DIPSwitch:
 30288                           	opt stack 19
 30289                           
 30290                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 30291                           
 30292                           ;incstack = 0
 30293  017F10  0E8F               	movlw	low _PortE
 30294  017F12  0100               	movlb	0	; () banked
 30295  017F14  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 30296  017F16  0E03               	movlw	high _PortE
 30297  017F18  0100               	movlb	0	; () banked
 30298  017F1A  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 30299  017F1C  0E00               	movlw	0
 30300  017F1E  0100               	movlb	0	; () banked
 30301  017F20  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 30302  017F22  ECC2  F0BA         	call	_Port_GetQuad	;wreg free
 30303  017F26  0012               	return	
 30304  017F28                     __end_of_HMI_DIPSwitch:
 30305                           	opt stack 0
 30306                           tosu	equ	0xFFF
 30307                           tosh	equ	0xFFE
 30308                           tosl	equ	0xFFD
 30309                           pclath	equ	0xFFA
 30310                           tblptru	equ	0xFF8
 30311                           tblptrh	equ	0xFF7
 30312                           tblptrl	equ	0xFF6
 30313                           tablat	equ	0xFF5
 30314                           prodh	equ	0xFF4
 30315                           prodl	equ	0xFF3
 30316                           intcon	equ	0xFF2
 30317                           postinc0	equ	0xFEE
 30318                           wreg	equ	0xFE8
 30319                           indf1	equ	0xFE7
 30320                           postdec1	equ	0xFE5
 30321                           fsr1h	equ	0xFE2
 30322                           fsr1l	equ	0xFE1
 30323                           indf2	equ	0xFDF
 30324                           postinc2	equ	0xFDE
 30325                           postdec2	equ	0xFDD
 30326                           plusw2	equ	0xFDB
 30327                           fsr2h	equ	0xFDA
 30328                           fsr2l	equ	0xFD9
 30329                           status	equ	0xFD8
 30330                           
 30331 ;; *************** function _HMI_DownSwitch *****************
 30332 ;; Defined at:
 30333 ;;		line 42 in file "HMI.c"
 30334 ;; Parameters:    Size  Location     Type
 30335 ;;		None
 30336 ;; Auto vars:     Size  Location     Type
 30337 ;;		None
 30338 ;; Return value:  Size  Location     Type
 30339 ;;                  1    wreg      unsigned char 
 30340 ;; Registers used:
 30341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 30342 ;; Tracked objects:
 30343 ;;		On entry : 0/0
 30344 ;;		On exit  : 0/0
 30345 ;;		Unchanged: 0/0
 30346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30351 ;;Total ram usage:        0 bytes
 30352 ;; Hardware stack levels used:    1
 30353 ;; Hardware stack levels required when called:    8
 30354 ;; This function calls:
 30355 ;;		_Port_GetPin
 30356 ;; This function is called by:
 30357 ;;		_HMI_Init
 30358 ;;		_Button_Poll
 30359 ;;		_getMode
 30360 ;; This function uses a non-reentrant model
 30361 ;;
 30362                           
 30363                           	psect	text139
 30364  017F28                     __ptext139:
 30365                           	opt stack 0
 30366  017F28                     _HMI_DownSwitch:
 30367                           	opt stack 19
 30368                           
 30369                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 30370                           
 30371                           ;incstack = 0
 30372  017F28  0E8F               	movlw	low _PortE
 30373  017F2A  0100               	movlb	0	; () banked
 30374  017F2C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 30375  017F2E  0E03               	movlw	high _PortE
 30376  017F30  0100               	movlb	0	; () banked
 30377  017F32  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 30378  017F34  0E06               	movlw	6
 30379  017F36  0100               	movlb	0	; () banked
 30380  017F38  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 30381  017F3A  ECBD  F0BB         	call	_Port_GetPin	;wreg free
 30382  017F3E  0012               	return	
 30383  017F40                     __end_of_HMI_DownSwitch:
 30384                           	opt stack 0
 30385                           tosu	equ	0xFFF
 30386                           tosh	equ	0xFFE
 30387                           tosl	equ	0xFFD
 30388                           pclath	equ	0xFFA
 30389                           tblptru	equ	0xFF8
 30390                           tblptrh	equ	0xFF7
 30391                           tblptrl	equ	0xFF6
 30392                           tablat	equ	0xFF5
 30393                           prodh	equ	0xFF4
 30394                           prodl	equ	0xFF3
 30395                           intcon	equ	0xFF2
 30396                           postinc0	equ	0xFEE
 30397                           wreg	equ	0xFE8
 30398                           indf1	equ	0xFE7
 30399                           postdec1	equ	0xFE5
 30400                           fsr1h	equ	0xFE2
 30401                           fsr1l	equ	0xFE1
 30402                           indf2	equ	0xFDF
 30403                           postinc2	equ	0xFDE
 30404                           postdec2	equ	0xFDD
 30405                           plusw2	equ	0xFDB
 30406                           fsr2h	equ	0xFDA
 30407                           fsr2l	equ	0xFD9
 30408                           status	equ	0xFD8
 30409                           
 30410 ;; *************** function _HMI_UpSwitch *****************
 30411 ;; Defined at:
 30412 ;;		line 37 in file "HMI.c"
 30413 ;; Parameters:    Size  Location     Type
 30414 ;;		None
 30415 ;; Auto vars:     Size  Location     Type
 30416 ;;		None
 30417 ;; Return value:  Size  Location     Type
 30418 ;;                  1    wreg      unsigned char 
 30419 ;; Registers used:
 30420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 30421 ;; Tracked objects:
 30422 ;;		On entry : 0/0
 30423 ;;		On exit  : 0/0
 30424 ;;		Unchanged: 0/0
 30425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30430 ;;Total ram usage:        0 bytes
 30431 ;; Hardware stack levels used:    1
 30432 ;; Hardware stack levels required when called:    8
 30433 ;; This function calls:
 30434 ;;		_Port_GetPin
 30435 ;; This function is called by:
 30436 ;;		_HMI_Init
 30437 ;;		_Button_Poll
 30438 ;;		_getMode
 30439 ;; This function uses a non-reentrant model
 30440 ;;
 30441                           
 30442                           	psect	text140
 30443  017F40                     __ptext140:
 30444                           	opt stack 0
 30445  017F40                     _HMI_UpSwitch:
 30446                           	opt stack 19
 30447                           
 30448                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 30449                           
 30450                           ;incstack = 0
 30451  017F40  0E8F               	movlw	low _PortE
 30452  017F42  0100               	movlb	0	; () banked
 30453  017F44  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 30454  017F46  0E03               	movlw	high _PortE
 30455  017F48  0100               	movlb	0	; () banked
 30456  017F4A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 30457  017F4C  0E07               	movlw	7
 30458  017F4E  0100               	movlb	0	; () banked
 30459  017F50  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 30460  017F52  ECBD  F0BB         	call	_Port_GetPin	;wreg free
 30461  017F56  0012               	return	
 30462  017F58                     __end_of_HMI_UpSwitch:
 30463                           	opt stack 0
 30464                           tosu	equ	0xFFF
 30465                           tosh	equ	0xFFE
 30466                           tosl	equ	0xFFD
 30467                           pclath	equ	0xFFA
 30468                           tblptru	equ	0xFF8
 30469                           tblptrh	equ	0xFF7
 30470                           tblptrl	equ	0xFF6
 30471                           tablat	equ	0xFF5
 30472                           prodh	equ	0xFF4
 30473                           prodl	equ	0xFF3
 30474                           intcon	equ	0xFF2
 30475                           postinc0	equ	0xFEE
 30476                           wreg	equ	0xFE8
 30477                           indf1	equ	0xFE7
 30478                           postdec1	equ	0xFE5
 30479                           fsr1h	equ	0xFE2
 30480                           fsr1l	equ	0xFE1
 30481                           indf2	equ	0xFDF
 30482                           postinc2	equ	0xFDE
 30483                           postdec2	equ	0xFDD
 30484                           plusw2	equ	0xFDB
 30485                           fsr2h	equ	0xFDA
 30486                           fsr2l	equ	0xFD9
 30487                           status	equ	0xFD8
 30488                           
 30489 ;; *************** function _HMI_RightSwitch *****************
 30490 ;; Defined at:
 30491 ;;		line 32 in file "HMI.c"
 30492 ;; Parameters:    Size  Location     Type
 30493 ;;		None
 30494 ;; Auto vars:     Size  Location     Type
 30495 ;;		None
 30496 ;; Return value:  Size  Location     Type
 30497 ;;                  1    wreg      unsigned char 
 30498 ;; Registers used:
 30499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 30500 ;; Tracked objects:
 30501 ;;		On entry : 0/0
 30502 ;;		On exit  : 0/0
 30503 ;;		Unchanged: 0/0
 30504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30509 ;;Total ram usage:        0 bytes
 30510 ;; Hardware stack levels used:    1
 30511 ;; Hardware stack levels required when called:    8
 30512 ;; This function calls:
 30513 ;;		_Port_GetPin
 30514 ;; This function is called by:
 30515 ;;		_HMI_Init
 30516 ;;		_Button_Poll
 30517 ;;		_getMode
 30518 ;; This function uses a non-reentrant model
 30519 ;;
 30520                           
 30521                           	psect	text141
 30522  017F58                     __ptext141:
 30523                           	opt stack 0
 30524  017F58                     _HMI_RightSwitch:
 30525                           	opt stack 19
 30526                           
 30527                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 30528                           
 30529                           ;incstack = 0
 30530  017F58  0E8F               	movlw	low _PortE
 30531  017F5A  0100               	movlb	0	; () banked
 30532  017F5C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 30533  017F5E  0E03               	movlw	high _PortE
 30534  017F60  0100               	movlb	0	; () banked
 30535  017F62  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 30536  017F64  0E04               	movlw	4
 30537  017F66  0100               	movlb	0	; () banked
 30538  017F68  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 30539  017F6A  ECBD  F0BB         	call	_Port_GetPin	;wreg free
 30540  017F6E  0012               	return	
 30541  017F70                     __end_of_HMI_RightSwitch:
 30542                           	opt stack 0
 30543                           tosu	equ	0xFFF
 30544                           tosh	equ	0xFFE
 30545                           tosl	equ	0xFFD
 30546                           pclath	equ	0xFFA
 30547                           tblptru	equ	0xFF8
 30548                           tblptrh	equ	0xFF7
 30549                           tblptrl	equ	0xFF6
 30550                           tablat	equ	0xFF5
 30551                           prodh	equ	0xFF4
 30552                           prodl	equ	0xFF3
 30553                           intcon	equ	0xFF2
 30554                           postinc0	equ	0xFEE
 30555                           wreg	equ	0xFE8
 30556                           indf1	equ	0xFE7
 30557                           postdec1	equ	0xFE5
 30558                           fsr1h	equ	0xFE2
 30559                           fsr1l	equ	0xFE1
 30560                           indf2	equ	0xFDF
 30561                           postinc2	equ	0xFDE
 30562                           postdec2	equ	0xFDD
 30563                           plusw2	equ	0xFDB
 30564                           fsr2h	equ	0xFDA
 30565                           fsr2l	equ	0xFD9
 30566                           status	equ	0xFD8
 30567                           
 30568 ;; *************** function _HMI_LeftSwitch *****************
 30569 ;; Defined at:
 30570 ;;		line 27 in file "HMI.c"
 30571 ;; Parameters:    Size  Location     Type
 30572 ;;		None
 30573 ;; Auto vars:     Size  Location     Type
 30574 ;;		None
 30575 ;; Return value:  Size  Location     Type
 30576 ;;                  1    wreg      unsigned char 
 30577 ;; Registers used:
 30578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 30579 ;; Tracked objects:
 30580 ;;		On entry : 0/0
 30581 ;;		On exit  : 0/0
 30582 ;;		Unchanged: 0/0
 30583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30588 ;;Total ram usage:        0 bytes
 30589 ;; Hardware stack levels used:    1
 30590 ;; Hardware stack levels required when called:    8
 30591 ;; This function calls:
 30592 ;;		_Port_GetPin
 30593 ;; This function is called by:
 30594 ;;		_HMI_Init
 30595 ;;		_Button_Poll
 30596 ;;		_getMode
 30597 ;; This function uses a non-reentrant model
 30598 ;;
 30599                           
 30600                           	psect	text142
 30601  017F70                     __ptext142:
 30602                           	opt stack 0
 30603  017F70                     _HMI_LeftSwitch:
 30604                           	opt stack 19
 30605                           
 30606                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 30607                           
 30608                           ;incstack = 0
 30609  017F70  0E8F               	movlw	low _PortE
 30610  017F72  0100               	movlb	0	; () banked
 30611  017F74  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 30612  017F76  0E03               	movlw	high _PortE
 30613  017F78  0100               	movlb	0	; () banked
 30614  017F7A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 30615  017F7C  0E05               	movlw	5
 30616  017F7E  0100               	movlb	0	; () banked
 30617  017F80  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 30618  017F82  ECBD  F0BB         	call	_Port_GetPin	;wreg free
 30619  017F86  0012               	return	
 30620  017F88                     __end_of_HMI_LeftSwitch:
 30621                           	opt stack 0
 30622                           tosu	equ	0xFFF
 30623                           tosh	equ	0xFFE
 30624                           tosl	equ	0xFFD
 30625                           pclath	equ	0xFFA
 30626                           tblptru	equ	0xFF8
 30627                           tblptrh	equ	0xFF7
 30628                           tblptrl	equ	0xFF6
 30629                           tablat	equ	0xFF5
 30630                           prodh	equ	0xFF4
 30631                           prodl	equ	0xFF3
 30632                           intcon	equ	0xFF2
 30633                           postinc0	equ	0xFEE
 30634                           wreg	equ	0xFE8
 30635                           indf1	equ	0xFE7
 30636                           postdec1	equ	0xFE5
 30637                           fsr1h	equ	0xFE2
 30638                           fsr1l	equ	0xFE1
 30639                           indf2	equ	0xFDF
 30640                           postinc2	equ	0xFDE
 30641                           postdec2	equ	0xFDD
 30642                           plusw2	equ	0xFDB
 30643                           fsr2h	equ	0xFDA
 30644                           fsr2l	equ	0xFD9
 30645                           status	equ	0xFD8
 30646                           
 30647 ;; *************** function _MXK_TestButton *****************
 30648 ;; Defined at:
 30649 ;;		line 14 in file "Library/MXK.c"
 30650 ;; Parameters:    Size  Location     Type
 30651 ;;		None
 30652 ;; Auto vars:     Size  Location     Type
 30653 ;;		None
 30654 ;; Return value:  Size  Location     Type
 30655 ;;                  1    wreg      unsigned char 
 30656 ;; Registers used:
 30657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 30658 ;; Tracked objects:
 30659 ;;		On entry : 0/0
 30660 ;;		On exit  : 0/0
 30661 ;;		Unchanged: 0/0
 30662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30667 ;;Total ram usage:        0 bytes
 30668 ;; Hardware stack levels used:    1
 30669 ;; Hardware stack levels required when called:    8
 30670 ;; This function calls:
 30671 ;;		_Port_GetPin
 30672 ;; This function is called by:
 30673 ;;		_FunctInitButton
 30674 ;;		_Button_Poll
 30675 ;;		_getMode
 30676 ;; This function uses a non-reentrant model
 30677 ;;
 30678                           
 30679                           	psect	text143
 30680  017F88                     __ptext143:
 30681                           	opt stack 0
 30682  017F88                     _MXK_TestButton:
 30683                           	opt stack 19
 30684                           
 30685                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 30686                           
 30687                           ;incstack = 0
 30688  017F88  0EA3               	movlw	low _PortB
 30689  017F8A  0100               	movlb	0	; () banked
 30690  017F8C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 30691  017F8E  0E03               	movlw	high _PortB
 30692  017F90  0100               	movlb	0	; () banked
 30693  017F92  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 30694  017F94  0E04               	movlw	4
 30695  017F96  0100               	movlb	0	; () banked
 30696  017F98  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 30697  017F9A  ECBD  F0BB         	call	_Port_GetPin	;wreg free
 30698  017F9E  0012               	return	
 30699  017FA0                     __end_of_MXK_TestButton:
 30700                           	opt stack 0
 30701                           tosu	equ	0xFFF
 30702                           tosh	equ	0xFFE
 30703                           tosl	equ	0xFFD
 30704                           pclath	equ	0xFFA
 30705                           tblptru	equ	0xFF8
 30706                           tblptrh	equ	0xFF7
 30707                           tblptrl	equ	0xFF6
 30708                           tablat	equ	0xFF5
 30709                           prodh	equ	0xFF4
 30710                           prodl	equ	0xFF3
 30711                           intcon	equ	0xFF2
 30712                           postinc0	equ	0xFEE
 30713                           wreg	equ	0xFE8
 30714                           indf1	equ	0xFE7
 30715                           postdec1	equ	0xFE5
 30716                           fsr1h	equ	0xFE2
 30717                           fsr1l	equ	0xFE1
 30718                           indf2	equ	0xFDF
 30719                           postinc2	equ	0xFDE
 30720                           postdec2	equ	0xFDD
 30721                           plusw2	equ	0xFDB
 30722                           fsr2h	equ	0xFDA
 30723                           fsr2l	equ	0xFD9
 30724                           status	equ	0xFD8
 30725                           
 30726 ;; *************** function _Port_GetQuad *****************
 30727 ;; Defined at:
 30728 ;;		line 498 in file "Library/Port.c"
 30729 ;; Parameters:    Size  Location     Type
 30730 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 30731 ;;		 -> PortE(10), PortD(10), 
 30732 ;;  pQuad           1    2[BANK0 ] enum E6776
 30733 ;; Auto vars:     Size  Location     Type
 30734 ;;  Output          1    5[BANK0 ] unsigned char 
 30735 ;; Return value:  Size  Location     Type
 30736 ;;                  1    wreg      unsigned char 
 30737 ;; Registers used:
 30738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 30739 ;; Tracked objects:
 30740 ;;		On entry : 0/0
 30741 ;;		On exit  : 0/0
 30742 ;;		Unchanged: 0/0
 30743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30744 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30746 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30747 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30748 ;;Total ram usage:        6 bytes
 30749 ;; Hardware stack levels used:    1
 30750 ;; Hardware stack levels required when called:    7
 30751 ;; This function calls:
 30752 ;;		Nothing
 30753 ;; This function is called by:
 30754 ;;		_HMI_DIPSwitch
 30755 ;;		_MXK_DIPSwitch
 30756 ;;		_Port_ToggleQuad
 30757 ;; This function uses a non-reentrant model
 30758 ;;
 30759                           
 30760                           	psect	text144
 30761  017584                     __ptext144:
 30762                           	opt stack 0
 30763  017584                     _Port_GetQuad:
 30764                           	opt stack 19
 30765                           
 30766                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 30767                           
 30768                           ;incstack = 0
 30769  017584  0100               	movlb	0	; () banked
 30770  017586  EE20 F006          	lfsr	2,6
 30771  01758A  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 30772  01758C  26D9               	addwf	fsr2l,f,c
 30773  01758E  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 30774  017590  22DA               	addwfc	fsr2h,f,c
 30775  017592  CFDE F063          	movff	postinc2,??_Port_GetQuad
 30776  017596  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 30777  01759A  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 30778  01759E  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 30779  0175A2  50DF               	movf	indf2,w,c
 30780  0175A4  0100               	movlb	0	; () banked
 30781  0175A6  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 30782                           
 30783                           ; BSR set to: 0
 30784                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 30785  0175A8  0100               	movlb	0	; () banked
 30786  0175AA  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 30787  0175AC  0D04               	mullw	4
 30788  0175AE  28F3               	incf	prodl,w,c
 30789  0175B0  0100               	movlb	0	; () banked
 30790  0175B2  6F63               	movwf	??_Port_GetQuad& (0+255),b
 30791  0175B4  D003               	goto	u11380
 30792  0175B6                     u11385:
 30793  0175B6  0100               	movlb	0	; () banked
 30794  0175B8  90D8               	bcf	status,0,c
 30795  0175BA  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 30796  0175BC                     u11380:
 30797  0175BC  0100               	movlb	0	; () banked
 30798  0175BE  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 30799  0175C0  D7FA               	goto	u11385
 30800                           
 30801                           ;Port.c: 502: Output &= 0xF;
 30802  0175C2  0E0F               	movlw	15
 30803  0175C4  0100               	movlb	0	; () banked
 30804  0175C6  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 30805                           
 30806                           ; BSR set to: 0
 30807                           ;Port.c: 503: return Output;
 30808  0175C8  0100               	movlb	0	; () banked
 30809  0175CA  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 30810  0175CC  0012               	return	
 30811  0175CE                     __end_of_Port_GetQuad:
 30812                           	opt stack 0
 30813                           tosu	equ	0xFFF
 30814                           tosh	equ	0xFFE
 30815                           tosl	equ	0xFFD
 30816                           pclath	equ	0xFFA
 30817                           tblptru	equ	0xFF8
 30818                           tblptrh	equ	0xFF7
 30819                           tblptrl	equ	0xFF6
 30820                           tablat	equ	0xFF5
 30821                           prodh	equ	0xFF4
 30822                           prodl	equ	0xFF3
 30823                           intcon	equ	0xFF2
 30824                           postinc0	equ	0xFEE
 30825                           wreg	equ	0xFE8
 30826                           indf1	equ	0xFE7
 30827                           postdec1	equ	0xFE5
 30828                           fsr1h	equ	0xFE2
 30829                           fsr1l	equ	0xFE1
 30830                           indf2	equ	0xFDF
 30831                           postinc2	equ	0xFDE
 30832                           postdec2	equ	0xFDD
 30833                           plusw2	equ	0xFDB
 30834                           fsr2h	equ	0xFDA
 30835                           fsr2l	equ	0xFD9
 30836                           status	equ	0xFD8
 30837                           
 30838 ;; *************** function _Event_DIPSwitch *****************
 30839 ;; Defined at:
 30840 ;;		line 22 in file "Events.c"
 30841 ;; Parameters:    Size  Location     Type
 30842 ;;  pState          1    wreg     unsigned char 
 30843 ;; Auto vars:     Size  Location     Type
 30844 ;;  pState          1   25[BANK0 ] unsigned char 
 30845 ;;  Bar             1   26[BANK0 ] unsigned char 
 30846 ;; Return value:  Size  Location     Type
 30847 ;;                  1    wreg      void 
 30848 ;; Registers used:
 30849 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30850 ;; Tracked objects:
 30851 ;;		On entry : 0/0
 30852 ;;		On exit  : 0/0
 30853 ;;		Unchanged: 0/0
 30854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30856 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30859 ;;Total ram usage:        2 bytes
 30860 ;; Hardware stack levels used:    1
 30861 ;; Hardware stack levels required when called:   13
 30862 ;; This function calls:
 30863 ;;		_HMI_GetBar
 30864 ;;		_HMI_SetBar
 30865 ;;		_LED_Toggle
 30866 ;; This function is called by:
 30867 ;;		_FunctInitButton
 30868 ;;		_Button_Poll
 30869 ;; This function uses a non-reentrant model
 30870 ;;
 30871                           
 30872                           	psect	text145
 30873  017BFE                     __ptext145:
 30874                           	opt stack 0
 30875  017BFE                     _Event_DIPSwitch:
 30876                           	opt stack 14
 30877                           
 30878                           ; BSR set to: 0
 30879                           ;incstack = 0
 30880                           ;Event_DIPSwitch@pState stored from wreg
 30881  017BFE  0100               	movlb	0	; () banked
 30882  017C00  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 30883                           
 30884                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 30885  017C02  EC72  F0C0         	call	_HMI_GetBar	;wreg free
 30886  017C06  0100               	movlb	0	; () banked
 30887  017C08  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 30888                           
 30889                           ; BSR set to: 0
 30890                           ;Events.c: 25: Bar &= 0x0F;
 30891  017C0A  0E0F               	movlw	15
 30892  017C0C  0100               	movlb	0	; () banked
 30893  017C0E  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 30894                           
 30895                           ; BSR set to: 0
 30896                           ;Events.c: 26: pState <<= 4;
 30897  017C10  0100               	movlb	0	; () banked
 30898  017C12  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 30899  017C14  0EF0               	movlw	240
 30900  017C16  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 30901                           
 30902                           ; BSR set to: 0
 30903                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 30904  017C18  0100               	movlb	0	; () banked
 30905  017C1A  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 30906  017C1C  0100               	movlb	0	; () banked
 30907  017C1E  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 30908  017C20  EC58  F0C0         	call	_HMI_SetBar
 30909                           
 30910                           ;Events.c: 32: LED_Toggle(eLED1);
 30911  017C24  0E00               	movlw	0
 30912  017C26  EC53  F0BB         	call	_LED_Toggle
 30913  017C2A  0012               	return		;funcret
 30914  017C2C                     __end_of_Event_DIPSwitch:
 30915                           	opt stack 0
 30916                           tosu	equ	0xFFF
 30917                           tosh	equ	0xFFE
 30918                           tosl	equ	0xFFD
 30919                           pclath	equ	0xFFA
 30920                           tblptru	equ	0xFF8
 30921                           tblptrh	equ	0xFF7
 30922                           tblptrl	equ	0xFF6
 30923                           tablat	equ	0xFF5
 30924                           prodh	equ	0xFF4
 30925                           prodl	equ	0xFF3
 30926                           intcon	equ	0xFF2
 30927                           postinc0	equ	0xFEE
 30928                           wreg	equ	0xFE8
 30929                           indf1	equ	0xFE7
 30930                           postdec1	equ	0xFE5
 30931                           fsr1h	equ	0xFE2
 30932                           fsr1l	equ	0xFE1
 30933                           indf2	equ	0xFDF
 30934                           postinc2	equ	0xFDE
 30935                           postdec2	equ	0xFDD
 30936                           plusw2	equ	0xFDB
 30937                           fsr2h	equ	0xFDA
 30938                           fsr2l	equ	0xFD9
 30939                           status	equ	0xFD8
 30940                           
 30941 ;; *************** function _Event_NULL *****************
 30942 ;; Defined at:
 30943 ;;		line 9 in file "Events.c"
 30944 ;; Parameters:    Size  Location     Type
 30945 ;;  pState          1    wreg     unsigned char 
 30946 ;; Auto vars:     Size  Location     Type
 30947 ;;  pState          1    0[COMRAM] unsigned char 
 30948 ;; Return value:  Size  Location     Type
 30949 ;;                  1    wreg      void 
 30950 ;; Registers used:
 30951 ;;		wreg
 30952 ;; Tracked objects:
 30953 ;;		On entry : 0/0
 30954 ;;		On exit  : 0/0
 30955 ;;		Unchanged: 0/0
 30956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30961 ;;Total ram usage:        0 bytes
 30962 ;; Hardware stack levels used:    1
 30963 ;; Hardware stack levels required when called:    7
 30964 ;; This function calls:
 30965 ;;		Nothing
 30966 ;; This function is called by:
 30967 ;;		_HMI_Init
 30968 ;;		_Button_Poll
 30969 ;; This function uses a non-reentrant model
 30970 ;;
 30971                           
 30972                           	psect	text146
 30973  001404                     __ptext146:
 30974                           	opt stack 0
 30975  001404                     _Event_NULL:
 30976                           	opt stack 20
 30977                           
 30978                           ;incstack = 0
 30979  001404  0012               	return		;funcret
 30980  001406                     __end_of_Event_NULL:
 30981                           	opt stack 0
 30982                           tosu	equ	0xFFF
 30983                           tosh	equ	0xFFE
 30984                           tosl	equ	0xFFD
 30985                           pclath	equ	0xFFA
 30986                           tblptru	equ	0xFF8
 30987                           tblptrh	equ	0xFF7
 30988                           tblptrl	equ	0xFF6
 30989                           tablat	equ	0xFF5
 30990                           prodh	equ	0xFF4
 30991                           prodl	equ	0xFF3
 30992                           intcon	equ	0xFF2
 30993                           postinc0	equ	0xFEE
 30994                           wreg	equ	0xFE8
 30995                           indf1	equ	0xFE7
 30996                           postdec1	equ	0xFE5
 30997                           fsr1h	equ	0xFE2
 30998                           fsr1l	equ	0xFE1
 30999                           indf2	equ	0xFDF
 31000                           postinc2	equ	0xFDE
 31001                           postdec2	equ	0xFDD
 31002                           plusw2	equ	0xFDB
 31003                           fsr2h	equ	0xFDA
 31004                           fsr2l	equ	0xFD9
 31005                           status	equ	0xFD8
 31006                           
 31007 ;; *************** function _Event_TestButton *****************
 31008 ;; Defined at:
 31009 ;;		line 52 in file "Events.c"
 31010 ;; Parameters:    Size  Location     Type
 31011 ;;  pState          1    wreg     unsigned char 
 31012 ;; Auto vars:     Size  Location     Type
 31013 ;;  pState          1   25[BANK0 ] unsigned char 
 31014 ;; Return value:  Size  Location     Type
 31015 ;;                  1    wreg      void 
 31016 ;; Registers used:
 31017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31018 ;; Tracked objects:
 31019 ;;		On entry : 0/0
 31020 ;;		On exit  : 0/0
 31021 ;;		Unchanged: 0/0
 31022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31026 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31027 ;;Total ram usage:        1 bytes
 31028 ;; Hardware stack levels used:    1
 31029 ;; Hardware stack levels required when called:   13
 31030 ;; This function calls:
 31031 ;;		_HMI_SetButton
 31032 ;;		_HMI_SetNumber
 31033 ;;		_LED_Toggle
 31034 ;; This function is called by:
 31035 ;;		_FunctInitButton
 31036 ;;		_Button_Poll
 31037 ;; This function uses a non-reentrant model
 31038 ;;
 31039                           
 31040                           	psect	text147
 31041  017B08                     __ptext147:
 31042                           	opt stack 0
 31043  017B08                     _Event_TestButton:
 31044                           	opt stack 14
 31045                           
 31046                           ;incstack = 0
 31047                           ;Event_TestButton@pState stored from wreg
 31048  017B08  0100               	movlb	0	; () banked
 31049  017B0A  6F79               	movwf	Event_TestButton@pState& (0+255),b
 31050                           
 31051                           ;Events.c: 56: static UINT8 j = 0;
 31052                           ;Events.c: 60: if (pState == 0)
 31053  017B0C  0100               	movlb	0	; () banked
 31054  017B0E  5179               	movf	Event_TestButton@pState& (0+255),w,b
 31055  017B10  0100               	movlb	0	; () banked
 31056  017B12  A4D8               	btfss	status,2,c
 31057  017B14  D00F               	goto	l1873
 31058                           
 31059                           ; BSR set to: 0
 31060                           ;Events.c: 61: {
 31061                           ;Events.c: 62: j++;
 31062  017B16  2A39               	incf	Event_TestButton@j,f,c
 31063                           
 31064                           ; BSR set to: 0
 31065                           ;Events.c: 63: val += j;
 31066  017B18  5039               	movf	Event_TestButton@j,w,c
 31067  017B1A  262D               	addwf	_val,f,c
 31068  017B1C  0E00               	movlw	0
 31069  017B1E  222E               	addwfc	_val+1,f,c
 31070                           
 31071                           ; BSR set to: 0
 31072                           ;Events.c: 64: HMI_SetNumber( val );
 31073  017B20  C02D  F071         	movff	_val,HMI_SetNumber@pInput
 31074  017B24  C02E  F072         	movff	_val+1,HMI_SetNumber@pInput+1
 31075  017B28  EC42  F0BE         	call	_HMI_SetNumber	;wreg free
 31076                           
 31077                           ;Events.c: 67: HMI_SetButton( j & 3 );
 31078  017B2C  5039               	movf	Event_TestButton@j,w,c
 31079  017B2E  0B03               	andlw	3
 31080  017B30  ECEF  F0B2         	call	_HMI_SetButton
 31081  017B34                     l1873:
 31082                           
 31083                           ;Events.c: 68: }
 31084                           ;Events.c: 72: LED_Toggle(eLED1);
 31085  017B34  0E00               	movlw	0
 31086  017B36  EC53  F0BB         	call	_LED_Toggle
 31087  017B3A  0012               	return		;funcret
 31088  017B3C                     __end_of_Event_TestButton:
 31089                           	opt stack 0
 31090                           tosu	equ	0xFFF
 31091                           tosh	equ	0xFFE
 31092                           tosl	equ	0xFFD
 31093                           pclath	equ	0xFFA
 31094                           tblptru	equ	0xFF8
 31095                           tblptrh	equ	0xFF7
 31096                           tblptrl	equ	0xFF6
 31097                           tablat	equ	0xFF5
 31098                           prodh	equ	0xFF4
 31099                           prodl	equ	0xFF3
 31100                           intcon	equ	0xFF2
 31101                           postinc0	equ	0xFEE
 31102                           wreg	equ	0xFE8
 31103                           indf1	equ	0xFE7
 31104                           postdec1	equ	0xFE5
 31105                           fsr1h	equ	0xFE2
 31106                           fsr1l	equ	0xFE1
 31107                           indf2	equ	0xFDF
 31108                           postinc2	equ	0xFDE
 31109                           postdec2	equ	0xFDD
 31110                           plusw2	equ	0xFDB
 31111                           fsr2h	equ	0xFDA
 31112                           fsr2l	equ	0xFD9
 31113                           status	equ	0xFD8
 31114                           
 31115 ;; *************** function _HMI_SetNumber *****************
 31116 ;; Defined at:
 31117 ;;		line 221 in file "HMI.c"
 31118 ;; Parameters:    Size  Location     Type
 31119 ;;  pInput          2   17[BANK0 ] int 
 31120 ;; Auto vars:     Size  Location     Type
 31121 ;;		None
 31122 ;; Return value:  Size  Location     Type
 31123 ;;                  1    wreg      void 
 31124 ;; Registers used:
 31125 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 31126 ;; Tracked objects:
 31127 ;;		On entry : 0/0
 31128 ;;		On exit  : 0/0
 31129 ;;		Unchanged: 0/0
 31130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31135 ;;Total ram usage:        2 bytes
 31136 ;; Hardware stack levels used:    1
 31137 ;; Hardware stack levels required when called:    9
 31138 ;; This function calls:
 31139 ;;		_HMI_SetSegments
 31140 ;;		_itos
 31141 ;; This function is called by:
 31142 ;;		_Event_TestButton
 31143 ;;		_mode1
 31144 ;;		_mode4
 31145 ;;		_Event_HMI_UpButton
 31146 ;;		_Event_HMI_DownButton
 31147 ;; This function uses a non-reentrant model
 31148 ;;
 31149                           
 31150                           	psect	text148
 31151  017C84                     __ptext148:
 31152                           	opt stack 0
 31153  017C84                     _HMI_SetNumber:
 31154                           	opt stack 20
 31155                           
 31156                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 31157                           
 31158                           ;incstack = 0
 31159  017C84  C071  F067         	movff	HMI_SetNumber@pInput,itos@input
 31160  017C88  C072  F068         	movff	HMI_SetNumber@pInput+1,itos@input+1
 31161  017C8C  0E3F               	movlw	low _HMIBoard
 31162  017C8E  0100               	movlb	0	; () banked
 31163  017C90  6F69               	movwf	itos@destination& (0+255),b
 31164  017C92  0E03               	movlw	high _HMIBoard
 31165  017C94  0100               	movlb	0	; () banked
 31166  017C96  6F6A               	movwf	(itos@destination+1)& (0+255),b
 31167  017C98  EC31  F0AA         	call	_itos	;wreg free
 31168                           
 31169                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 31170  017C9C  0E3F               	movlw	low _HMIBoard
 31171  017C9E  0100               	movlb	0	; () banked
 31172  017CA0  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 31173  017CA2  0E03               	movlw	high _HMIBoard
 31174  017CA4  0100               	movlb	0	; () banked
 31175  017CA6  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 31176  017CA8  ECBA  F0AD         	call	_HMI_SetSegments	;wreg free
 31177  017CAC  0012               	return		;funcret
 31178  017CAE                     __end_of_HMI_SetNumber:
 31179                           	opt stack 0
 31180                           tosu	equ	0xFFF
 31181                           tosh	equ	0xFFE
 31182                           tosl	equ	0xFFD
 31183                           pclath	equ	0xFFA
 31184                           tblptru	equ	0xFF8
 31185                           tblptrh	equ	0xFF7
 31186                           tblptrl	equ	0xFF6
 31187                           tablat	equ	0xFF5
 31188                           prodh	equ	0xFF4
 31189                           prodl	equ	0xFF3
 31190                           intcon	equ	0xFF2
 31191                           postinc0	equ	0xFEE
 31192                           wreg	equ	0xFE8
 31193                           indf1	equ	0xFE7
 31194                           postdec1	equ	0xFE5
 31195                           fsr1h	equ	0xFE2
 31196                           fsr1l	equ	0xFE1
 31197                           indf2	equ	0xFDF
 31198                           postinc2	equ	0xFDE
 31199                           postdec2	equ	0xFDD
 31200                           plusw2	equ	0xFDB
 31201                           fsr2h	equ	0xFDA
 31202                           fsr2l	equ	0xFD9
 31203                           status	equ	0xFD8
 31204                           
 31205 ;; *************** function _itos *****************
 31206 ;; Defined at:
 31207 ;;		line 369 in file "Library/Types.c"
 31208 ;; Parameters:    Size  Location     Type
 31209 ;;  input           2    7[BANK0 ] unsigned short 
 31210 ;;  destination     2    9[BANK0 ] PTR unsigned char 
 31211 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 31212 ;; Auto vars:     Size  Location     Type
 31213 ;;  Out             2   15[BANK0 ] unsigned short 
 31214 ;;  Length          2   13[BANK0 ] unsigned short 
 31215 ;;  Data            2   11[BANK0 ] PTR unsigned char 
 31216 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 31217 ;; Return value:  Size  Location     Type
 31218 ;;                  1    wreg      void 
 31219 ;; Registers used:
 31220 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 31221 ;; Tracked objects:
 31222 ;;		On entry : 0/0
 31223 ;;		On exit  : 0/0
 31224 ;;		Unchanged: 0/0
 31225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31227 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31229 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31230 ;;Total ram usage:       10 bytes
 31231 ;; Hardware stack levels used:    1
 31232 ;; Hardware stack levels required when called:    8
 31233 ;; This function calls:
 31234 ;;		___lwdiv
 31235 ;;		___lwmod
 31236 ;;		_reverse
 31237 ;; This function is called by:
 31238 ;;		_HMI_SetNumber
 31239 ;; This function uses a non-reentrant model
 31240 ;;
 31241                           
 31242                           	psect	text149
 31243  015462                     __ptext149:
 31244                           	opt stack 0
 31245  015462                     _itos:
 31246                           	opt stack 20
 31247                           
 31248                           ;Types.c: 371: UINT16 Out = input;
 31249                           
 31250                           ;incstack = 0
 31251  015462  C067  F06F         	movff	itos@input,itos@Out
 31252  015466  C068  F070         	movff	itos@input+1,itos@Out+1
 31253                           
 31254                           ;Types.c: 372: UINT16 Length = 0;
 31255  01546A  0E00               	movlw	0
 31256  01546C  0100               	movlb	0	; () banked
 31257  01546E  6F6E               	movwf	(itos@Length+1)& (0+255),b
 31258  015470  0E00               	movlw	0
 31259  015472  6F6D               	movwf	itos@Length& (0+255),b
 31260                           
 31261                           ; BSR set to: 0
 31262                           ;Types.c: 373: char *Data = destination;
 31263  015474  C069  F06B         	movff	itos@destination,itos@Data
 31264  015478  C06A  F06C         	movff	itos@destination+1,itos@Data+1
 31265                           
 31266                           ; BSR set to: 0
 31267                           ;Types.c: 374: if(Out == 0)
 31268  01547C  0100               	movlb	0	; () banked
 31269  01547E  516F               	movf	itos@Out& (0+255),w,b
 31270  015480  0100               	movlb	0	; () banked
 31271  015482  1170               	iorwf	(itos@Out+1)& (0+255),w,b
 31272  015484  A4D8               	btfss	status,2,c
 31273  015486  D034               	goto	l929
 31274                           
 31275                           ; BSR set to: 0
 31276                           ;Types.c: 375: {
 31277                           ;Types.c: 376: Data[0] = (UINT16)'0';
 31278  015488  C06B  FFD9         	movff	itos@Data,fsr2l
 31279  01548C  C06C  FFDA         	movff	itos@Data+1,fsr2h
 31280  015490  0E30               	movlw	48
 31281  015492  6EDF               	movwf	indf2,c
 31282                           
 31283                           ; BSR set to: 0
 31284                           ;Types.c: 377: Length = 1;
 31285  015494  0E00               	movlw	0
 31286  015496  0100               	movlb	0	; () banked
 31287  015498  6F6E               	movwf	(itos@Length+1)& (0+255),b
 31288  01549A  0E01               	movlw	1
 31289  01549C  6F6D               	movwf	itos@Length& (0+255),b
 31290                           
 31291                           ;Types.c: 378: }
 31292  01549E  D040               	goto	l928
 31293  0154A0                     
 31294                           ; BSR set to: 0
 31295                           ;Types.c: 382: {
 31296                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 31297                           
 31298                           ; BSR set to: 0
 31299  0154A0  C06F  F060         	movff	itos@Out,___lwmod@dividend
 31300  0154A4  C070  F061         	movff	itos@Out+1,___lwmod@dividend+1
 31301  0154A8  0E00               	movlw	0
 31302  0154AA  0100               	movlb	0	; () banked
 31303  0154AC  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
 31304  0154AE  0E0A               	movlw	10
 31305  0154B0  6F62               	movwf	___lwmod@divisor& (0+255),b
 31306  0154B2  EC3F  F0B9         	call	___lwmod	;wreg free
 31307  0154B6  0100               	movlb	0	; () banked
 31308  0154B8  5160               	movf	?___lwmod& (0+255),w,b
 31309  0154BA  0F30               	addlw	48
 31310  0154BC  C06B  FFD9         	movff	itos@Data,fsr2l
 31311  0154C0  C06C  FFDA         	movff	itos@Data+1,fsr2h
 31312  0154C4  6EDF               	movwf	indf2,c
 31313                           
 31314                           ; BSR set to: 0
 31315                           ;Types.c: 384: Out /= 10;
 31316  0154C6  C06F  F060         	movff	itos@Out,___lwdiv@dividend
 31317  0154CA  C070  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 31318  0154CE  0E00               	movlw	0
 31319  0154D0  0100               	movlb	0	; () banked
 31320  0154D2  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 31321  0154D4  0E0A               	movlw	10
 31322  0154D6  6F62               	movwf	___lwdiv@divisor& (0+255),b
 31323  0154D8  ECD4  F0B5         	call	___lwdiv	;wreg free
 31324  0154DC  C060  F06F         	movff	?___lwdiv,itos@Out
 31325  0154E0  C061  F070         	movff	?___lwdiv+1,itos@Out+1
 31326                           
 31327                           ;Types.c: 385: Length ++;
 31328  0154E4  0100               	movlb	0	; () banked
 31329  0154E6  4B6D               	infsnz	itos@Length& (0+255),f,b
 31330  0154E8  2B6E               	incf	(itos@Length+1)& (0+255),f,b
 31331                           
 31332                           ; BSR set to: 0
 31333                           ;Types.c: 386: Data++;
 31334  0154EA  0100               	movlb	0	; () banked
 31335  0154EC  4B6B               	infsnz	itos@Data& (0+255),f,b
 31336  0154EE  2B6C               	incf	(itos@Data+1)& (0+255),f,b
 31337  0154F0                     l929:
 31338                           
 31339                           ; BSR set to: 0
 31340                           
 31341                           ; BSR set to: 0
 31342  0154F0  0100               	movlb	0	; () banked
 31343  0154F2  516F               	movf	itos@Out& (0+255),w,b
 31344  0154F4  0100               	movlb	0	; () banked
 31345  0154F6  1170               	iorwf	(itos@Out+1)& (0+255),w,b
 31346  0154F8  B4D8               	btfsc	status,2,c
 31347  0154FA  D008               	goto	u11050
 31348                           
 31349                           ; BSR set to: 0
 31350  0154FC  0100               	movlb	0	; () banked
 31351  0154FE  516E               	movf	(itos@Length+1)& (0+255),w,b
 31352  015500  E105               	bnz	l13728
 31353  015502  0E06               	movlw	6
 31354  015504  0100               	movlb	0	; () banked
 31355  015506  5D6D               	subwf	itos@Length& (0+255),w,b
 31356  015508  A0D8               	btfss	status,0,c
 31357  01550A  D7CA               	goto	l930
 31358  01550C                     u11050:
 31359  01550C                     l13728:
 31360                           
 31361                           ; BSR set to: 0
 31362                           ;Types.c: 387: }
 31363                           ;Types.c: 388: reverse(destination, Length);
 31364  01550C  C069  F060         	movff	itos@destination,reverse@input
 31365  015510  C06A  F061         	movff	itos@destination+1,reverse@input+1
 31366  015514  C06D  F062         	movff	itos@Length,reverse@length
 31367  015518  C06E  F063         	movff	itos@Length+1,reverse@length+1
 31368  01551C  ECA1  F0B7         	call	_reverse	;wreg free
 31369  015520                     l928:
 31370                           
 31371                           ;Types.c: 389: }
 31372                           ;Types.c: 390: destination[Length] = '\0';
 31373  015520  0100               	movlb	0	; () banked
 31374  015522  516D               	movf	itos@Length& (0+255),w,b
 31375  015524  0100               	movlb	0	; () banked
 31376  015526  2569               	addwf	itos@destination& (0+255),w,b
 31377  015528  6ED9               	movwf	fsr2l,c
 31378  01552A  0100               	movlb	0	; () banked
 31379  01552C  516E               	movf	(itos@Length+1)& (0+255),w,b
 31380  01552E  0100               	movlb	0	; () banked
 31381  015530  216A               	addwfc	(itos@destination+1)& (0+255),w,b
 31382  015532  6EDA               	movwf	fsr2h,c
 31383  015534  0E00               	movlw	0
 31384  015536  6EDF               	movwf	indf2,c
 31385                           
 31386                           ; BSR set to: 0
 31387  015538  0012               	return		;funcret
 31388  01553A                     __end_of_itos:
 31389                           	opt stack 0
 31390                           tosu	equ	0xFFF
 31391                           tosh	equ	0xFFE
 31392                           tosl	equ	0xFFD
 31393                           pclath	equ	0xFFA
 31394                           tblptru	equ	0xFF8
 31395                           tblptrh	equ	0xFF7
 31396                           tblptrl	equ	0xFF6
 31397                           tablat	equ	0xFF5
 31398                           prodh	equ	0xFF4
 31399                           prodl	equ	0xFF3
 31400                           intcon	equ	0xFF2
 31401                           postinc0	equ	0xFEE
 31402                           wreg	equ	0xFE8
 31403                           indf1	equ	0xFE7
 31404                           postdec1	equ	0xFE5
 31405                           fsr1h	equ	0xFE2
 31406                           fsr1l	equ	0xFE1
 31407                           indf2	equ	0xFDF
 31408                           postinc2	equ	0xFDE
 31409                           postdec2	equ	0xFDD
 31410                           plusw2	equ	0xFDB
 31411                           fsr2h	equ	0xFDA
 31412                           fsr2l	equ	0xFD9
 31413                           status	equ	0xFD8
 31414                           
 31415 ;; *************** function _reverse *****************
 31416 ;; Defined at:
 31417 ;;		line 357 in file "Library/Types.c"
 31418 ;; Parameters:    Size  Location     Type
 31419 ;;  input           2    0[BANK0 ] PTR unsigned char 
 31420 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 31421 ;;  length          2    2[BANK0 ] unsigned short 
 31422 ;; Auto vars:     Size  Location     Type
 31423 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 31424 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 31425 ;;  tempVar         1    4[BANK0 ] unsigned char 
 31426 ;; Return value:  Size  Location     Type
 31427 ;;                  1    wreg      void 
 31428 ;; Registers used:
 31429 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 31430 ;; Tracked objects:
 31431 ;;		On entry : 0/0
 31432 ;;		On exit  : 0/0
 31433 ;;		Unchanged: 0/0
 31434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31435 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31436 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31438 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31439 ;;Total ram usage:        7 bytes
 31440 ;; Hardware stack levels used:    1
 31441 ;; Hardware stack levels required when called:    7
 31442 ;; This function calls:
 31443 ;;		Nothing
 31444 ;; This function is called by:
 31445 ;;		_itos
 31446 ;; This function uses a non-reentrant model
 31447 ;;
 31448                           
 31449                           	psect	text150
 31450  016F42                     __ptext150:
 31451                           	opt stack 0
 31452  016F42                     _reverse:
 31453                           	opt stack 20
 31454                           
 31455                           ;Types.c: 359: char tempVar,
 31456                           ;Types.c: 360: *iterator = input + length;
 31457                           
 31458                           ; BSR set to: 0
 31459                           ;incstack = 0
 31460  016F42  0100               	movlb	0	; () banked
 31461  016F44  5162               	movf	reverse@length& (0+255),w,b
 31462  016F46  0100               	movlb	0	; () banked
 31463  016F48  2560               	addwf	reverse@input& (0+255),w,b
 31464  016F4A  0100               	movlb	0	; () banked
 31465  016F4C  6F65               	movwf	reverse@iterator& (0+255),b
 31466  016F4E  0100               	movlb	0	; () banked
 31467  016F50  5163               	movf	(reverse@length+1)& (0+255),w,b
 31468  016F52  0100               	movlb	0	; () banked
 31469  016F54  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 31470  016F56  0100               	movlb	0	; () banked
 31471  016F58  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 31472                           
 31473                           ;Types.c: 362: while ( --iterator > input )
 31474  016F5A  D01A               	goto	l921
 31475  016F5C                     
 31476                           ; BSR set to: 0
 31477                           ;Types.c: 363: {
 31478                           ;Types.c: 364: tempVar = *input;
 31479                           
 31480                           ; BSR set to: 0
 31481  016F5C  C060  FFD9         	movff	reverse@input,fsr2l
 31482  016F60  C061  FFDA         	movff	reverse@input+1,fsr2h
 31483  016F64  50DF               	movf	indf2,w,c
 31484  016F66  0100               	movlb	0	; () banked
 31485  016F68  6F64               	movwf	reverse@tempVar& (0+255),b
 31486                           
 31487                           ; BSR set to: 0
 31488                           ;Types.c: 365: *input++=*iterator;
 31489  016F6A  C065  FFD9         	movff	reverse@iterator,fsr2l
 31490  016F6E  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 31491  016F72  C060  FFE1         	movff	reverse@input,fsr1l
 31492  016F76  C061  FFE2         	movff	reverse@input+1,fsr1h
 31493  016F7A  CFDF FFE7          	movff	indf2,indf1
 31494                           
 31495                           ; BSR set to: 0
 31496  016F7E  0100               	movlb	0	; () banked
 31497  016F80  4B60               	infsnz	reverse@input& (0+255),f,b
 31498  016F82  2B61               	incf	(reverse@input+1)& (0+255),f,b
 31499                           
 31500                           ; BSR set to: 0
 31501                           ;Types.c: 366: *iterator=tempVar;
 31502  016F84  C065  FFD9         	movff	reverse@iterator,fsr2l
 31503  016F88  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 31504  016F8C  C064  FFDF         	movff	reverse@tempVar,indf2
 31505  016F90                     l921:
 31506                           
 31507                           ; BSR set to: 0
 31508                           
 31509                           ; BSR set to: 0
 31510  016F90  0100               	movlb	0	; () banked
 31511  016F92  0765               	decf	reverse@iterator& (0+255),f,b
 31512  016F94  A0D8               	btfss	status,0,c
 31513  016F96  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 31514  016F98  0100               	movlb	0	; () banked
 31515  016F9A  5165               	movf	reverse@iterator& (0+255),w,b
 31516  016F9C  0100               	movlb	0	; () banked
 31517  016F9E  5D60               	subwf	reverse@input& (0+255),w,b
 31518  016FA0  0100               	movlb	0	; () banked
 31519  016FA2  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 31520  016FA4  0100               	movlb	0	; () banked
 31521  016FA6  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 31522  016FA8  B0D8               	btfsc	status,0,c
 31523  016FAA  0012               	return	
 31524  016FAC  D7D7               	goto	l922
 31525  016FAE                     __end_of_reverse:
 31526                           	opt stack 0
 31527                           tosu	equ	0xFFF
 31528                           tosh	equ	0xFFE
 31529                           tosl	equ	0xFFD
 31530                           pclath	equ	0xFFA
 31531                           tblptru	equ	0xFF8
 31532                           tblptrh	equ	0xFF7
 31533                           tblptrl	equ	0xFF6
 31534                           tablat	equ	0xFF5
 31535                           prodh	equ	0xFF4
 31536                           prodl	equ	0xFF3
 31537                           intcon	equ	0xFF2
 31538                           postinc0	equ	0xFEE
 31539                           wreg	equ	0xFE8
 31540                           indf1	equ	0xFE7
 31541                           postdec1	equ	0xFE5
 31542                           fsr1h	equ	0xFE2
 31543                           fsr1l	equ	0xFE1
 31544                           indf2	equ	0xFDF
 31545                           postinc2	equ	0xFDE
 31546                           postdec2	equ	0xFDD
 31547                           plusw2	equ	0xFDB
 31548                           fsr2h	equ	0xFDA
 31549                           fsr2l	equ	0xFD9
 31550                           status	equ	0xFD8
 31551                           
 31552 ;; *************** function ___lwmod *****************
 31553 ;; Defined at:
 31554 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 31555 ;; Parameters:    Size  Location     Type
 31556 ;;  dividend        2    0[BANK0 ] unsigned int 
 31557 ;;  divisor         2    2[BANK0 ] unsigned int 
 31558 ;; Auto vars:     Size  Location     Type
 31559 ;;  counter         1    4[BANK0 ] unsigned char 
 31560 ;; Return value:  Size  Location     Type
 31561 ;;                  2    0[BANK0 ] unsigned int 
 31562 ;; Registers used:
 31563 ;;		wreg, status,2, status,0
 31564 ;; Tracked objects:
 31565 ;;		On entry : 0/0
 31566 ;;		On exit  : 0/0
 31567 ;;		Unchanged: 0/0
 31568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31569 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31572 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31573 ;;Total ram usage:        5 bytes
 31574 ;; Hardware stack levels used:    1
 31575 ;; Hardware stack levels required when called:    7
 31576 ;; This function calls:
 31577 ;;		Nothing
 31578 ;; This function is called by:
 31579 ;;		_itos
 31580 ;; This function uses a non-reentrant model
 31581 ;;
 31582                           
 31583                           	psect	text151
 31584  01727E                     __ptext151:
 31585                           	opt stack 0
 31586  01727E                     ___lwmod:
 31587                           	opt stack 20
 31588                           
 31589                           ; BSR set to: 0
 31590                           ;incstack = 0
 31591  01727E  0100               	movlb	0	; () banked
 31592  017280  5162               	movf	___lwmod@divisor& (0+255),w,b
 31593  017282  0100               	movlb	0	; () banked
 31594  017284  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 31595  017286  B4D8               	btfsc	status,2,c
 31596  017288  D026               	goto	l2959
 31597                           
 31598                           ; BSR set to: 0
 31599  01728A  0E01               	movlw	1
 31600  01728C  0100               	movlb	0	; () banked
 31601  01728E  6F64               	movwf	___lwmod@counter& (0+255),b
 31602  017290  D006               	goto	l2954
 31603  017292                     
 31604                           ; BSR set to: 0
 31605                           
 31606                           ; BSR set to: 0
 31607  017292  0100               	movlb	0	; () banked
 31608  017294  90D8               	bcf	status,0,c
 31609  017296  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 31610  017298  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 31611  01729A  0100               	movlb	0	; () banked
 31612  01729C  2B64               	incf	___lwmod@counter& (0+255),f,b
 31613  01729E                     l2954:
 31614                           
 31615                           ; BSR set to: 0
 31616                           
 31617                           ; BSR set to: 0
 31618  01729E  0100               	movlb	0	; () banked
 31619  0172A0  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 31620  0172A2  D7F7               	goto	l2955
 31621  0172A4                     u10960:
 31622                           
 31623                           ; BSR set to: 0
 31624                           
 31625                           ; BSR set to: 0
 31626                           
 31627                           ; BSR set to: 0
 31628  0172A4  0100               	movlb	0	; () banked
 31629  0172A6  5162               	movf	___lwmod@divisor& (0+255),w,b
 31630  0172A8  0100               	movlb	0	; () banked
 31631  0172AA  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 31632  0172AC  0100               	movlb	0	; () banked
 31633  0172AE  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 31634  0172B0  0100               	movlb	0	; () banked
 31635  0172B2  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 31636  0172B4  A0D8               	btfss	status,0,c
 31637  0172B6  D008               	goto	l2958
 31638                           
 31639                           ; BSR set to: 0
 31640  0172B8  0100               	movlb	0	; () banked
 31641  0172BA  5162               	movf	___lwmod@divisor& (0+255),w,b
 31642  0172BC  0100               	movlb	0	; () banked
 31643  0172BE  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 31644  0172C0  0100               	movlb	0	; () banked
 31645  0172C2  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 31646  0172C4  0100               	movlb	0	; () banked
 31647  0172C6  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 31648  0172C8                     l2958:
 31649                           
 31650                           ; BSR set to: 0
 31651                           
 31652                           ; BSR set to: 0
 31653  0172C8  0100               	movlb	0	; () banked
 31654  0172CA  90D8               	bcf	status,0,c
 31655  0172CC  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 31656  0172CE  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 31657                           
 31658                           ; BSR set to: 0
 31659  0172D0  0100               	movlb	0	; () banked
 31660  0172D2  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 31661  0172D4  D7E7               	goto	u10960
 31662  0172D6                     l2959:
 31663                           
 31664                           ; BSR set to: 0
 31665                           
 31666                           ; BSR set to: 0
 31667  0172D6  C060  F060         	movff	___lwmod@dividend,?___lwmod
 31668  0172DA  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 31669                           
 31670                           ; BSR set to: 0
 31671  0172DE  0012               	return		;funcret
 31672  0172E0                     __end_of___lwmod:
 31673                           	opt stack 0
 31674                           tosu	equ	0xFFF
 31675                           tosh	equ	0xFFE
 31676                           tosl	equ	0xFFD
 31677                           pclath	equ	0xFFA
 31678                           tblptru	equ	0xFF8
 31679                           tblptrh	equ	0xFF7
 31680                           tblptrl	equ	0xFF6
 31681                           tablat	equ	0xFF5
 31682                           prodh	equ	0xFF4
 31683                           prodl	equ	0xFF3
 31684                           intcon	equ	0xFF2
 31685                           postinc0	equ	0xFEE
 31686                           wreg	equ	0xFE8
 31687                           indf1	equ	0xFE7
 31688                           postdec1	equ	0xFE5
 31689                           fsr1h	equ	0xFE2
 31690                           fsr1l	equ	0xFE1
 31691                           indf2	equ	0xFDF
 31692                           postinc2	equ	0xFDE
 31693                           postdec2	equ	0xFDD
 31694                           plusw2	equ	0xFDB
 31695                           fsr2h	equ	0xFDA
 31696                           fsr2l	equ	0xFD9
 31697                           status	equ	0xFD8
 31698                           
 31699 ;; *************** function ___lwdiv *****************
 31700 ;; Defined at:
 31701 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 31702 ;; Parameters:    Size  Location     Type
 31703 ;;  dividend        2    0[BANK0 ] unsigned int 
 31704 ;;  divisor         2    2[BANK0 ] unsigned int 
 31705 ;; Auto vars:     Size  Location     Type
 31706 ;;  quotient        2    5[BANK0 ] unsigned int 
 31707 ;;  counter         1    4[BANK0 ] unsigned char 
 31708 ;; Return value:  Size  Location     Type
 31709 ;;                  2    0[BANK0 ] unsigned int 
 31710 ;; Registers used:
 31711 ;;		wreg, status,2, status,0
 31712 ;; Tracked objects:
 31713 ;;		On entry : 0/0
 31714 ;;		On exit  : 0/0
 31715 ;;		Unchanged: 0/0
 31716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31717 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31718 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31720 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31721 ;;Total ram usage:        7 bytes
 31722 ;; Hardware stack levels used:    1
 31723 ;; Hardware stack levels required when called:    7
 31724 ;; This function calls:
 31725 ;;		Nothing
 31726 ;; This function is called by:
 31727 ;;		_itos
 31728 ;; This function uses a non-reentrant model
 31729 ;;
 31730                           
 31731                           	psect	text152
 31732  016BA8                     __ptext152:
 31733                           	opt stack 0
 31734  016BA8                     ___lwdiv:
 31735                           	opt stack 20
 31736                           
 31737                           ; BSR set to: 0
 31738                           ;incstack = 0
 31739  016BA8  0E00               	movlw	0
 31740  016BAA  0100               	movlb	0	; () banked
 31741  016BAC  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 31742  016BAE  0E00               	movlw	0
 31743  016BB0  6F65               	movwf	___lwdiv@quotient& (0+255),b
 31744                           
 31745                           ; BSR set to: 0
 31746  016BB2  0100               	movlb	0	; () banked
 31747  016BB4  5162               	movf	___lwdiv@divisor& (0+255),w,b
 31748  016BB6  0100               	movlb	0	; () banked
 31749  016BB8  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 31750  016BBA  B4D8               	btfsc	status,2,c
 31751  016BBC  D02C               	goto	l2949
 31752                           
 31753                           ; BSR set to: 0
 31754  016BBE  0E01               	movlw	1
 31755  016BC0  0100               	movlb	0	; () banked
 31756  016BC2  6F64               	movwf	___lwdiv@counter& (0+255),b
 31757  016BC4  D006               	goto	l2944
 31758  016BC6                     
 31759                           ; BSR set to: 0
 31760                           
 31761                           ; BSR set to: 0
 31762  016BC6  0100               	movlb	0	; () banked
 31763  016BC8  90D8               	bcf	status,0,c
 31764  016BCA  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 31765  016BCC  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 31766  016BCE  0100               	movlb	0	; () banked
 31767  016BD0  2B64               	incf	___lwdiv@counter& (0+255),f,b
 31768  016BD2                     l2944:
 31769                           
 31770                           ; BSR set to: 0
 31771                           
 31772                           ; BSR set to: 0
 31773  016BD2  0100               	movlb	0	; () banked
 31774  016BD4  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 31775  016BD6  D7F7               	goto	l2945
 31776  016BD8                     u10930:
 31777                           
 31778                           ; BSR set to: 0
 31779                           
 31780                           ; BSR set to: 0
 31781                           
 31782                           ; BSR set to: 0
 31783  016BD8  0100               	movlb	0	; () banked
 31784  016BDA  90D8               	bcf	status,0,c
 31785  016BDC  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 31786  016BDE  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 31787                           
 31788                           ; BSR set to: 0
 31789  016BE0  0100               	movlb	0	; () banked
 31790  016BE2  5162               	movf	___lwdiv@divisor& (0+255),w,b
 31791  016BE4  0100               	movlb	0	; () banked
 31792  016BE6  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 31793  016BE8  0100               	movlb	0	; () banked
 31794  016BEA  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 31795  016BEC  0100               	movlb	0	; () banked
 31796  016BEE  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 31797  016BF0  A0D8               	btfss	status,0,c
 31798  016BF2  D00A               	goto	l2948
 31799                           
 31800                           ; BSR set to: 0
 31801  016BF4  0100               	movlb	0	; () banked
 31802  016BF6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 31803  016BF8  0100               	movlb	0	; () banked
 31804  016BFA  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 31805  016BFC  0100               	movlb	0	; () banked
 31806  016BFE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 31807  016C00  0100               	movlb	0	; () banked
 31808  016C02  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 31809                           
 31810                           ; BSR set to: 0
 31811  016C04  0100               	movlb	0	; () banked
 31812  016C06  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 31813  016C08                     l2948:
 31814                           
 31815                           ; BSR set to: 0
 31816                           
 31817                           ; BSR set to: 0
 31818  016C08  0100               	movlb	0	; () banked
 31819  016C0A  90D8               	bcf	status,0,c
 31820  016C0C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 31821  016C0E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 31822                           
 31823                           ; BSR set to: 0
 31824  016C10  0100               	movlb	0	; () banked
 31825  016C12  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 31826  016C14  D7E1               	goto	u10930
 31827  016C16                     l2949:
 31828                           
 31829                           ; BSR set to: 0
 31830                           
 31831                           ; BSR set to: 0
 31832  016C16  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 31833  016C1A  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 31834                           
 31835                           ; BSR set to: 0
 31836  016C1E  0012               	return		;funcret
 31837  016C20                     __end_of___lwdiv:
 31838                           	opt stack 0
 31839                           tosu	equ	0xFFF
 31840                           tosh	equ	0xFFE
 31841                           tosl	equ	0xFFD
 31842                           pclath	equ	0xFFA
 31843                           tblptru	equ	0xFF8
 31844                           tblptrh	equ	0xFF7
 31845                           tblptrl	equ	0xFF6
 31846                           tablat	equ	0xFF5
 31847                           prodh	equ	0xFF4
 31848                           prodl	equ	0xFF3
 31849                           intcon	equ	0xFF2
 31850                           postinc0	equ	0xFEE
 31851                           wreg	equ	0xFE8
 31852                           indf1	equ	0xFE7
 31853                           postdec1	equ	0xFE5
 31854                           fsr1h	equ	0xFE2
 31855                           fsr1l	equ	0xFE1
 31856                           indf2	equ	0xFDF
 31857                           postinc2	equ	0xFDE
 31858                           postdec2	equ	0xFDD
 31859                           plusw2	equ	0xFDB
 31860                           fsr2h	equ	0xFDA
 31861                           fsr2l	equ	0xFD9
 31862                           status	equ	0xFD8
 31863                           
 31864 ;; *************** function _HMI_SetSegments *****************
 31865 ;; Defined at:
 31866 ;;		line 226 in file "HMI.c"
 31867 ;; Parameters:    Size  Location     Type
 31868 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 31869 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 31870 ;; Auto vars:     Size  Location     Type
 31871 ;;  in              2    4[BANK0 ] unsigned short 
 31872 ;; Return value:  Size  Location     Type
 31873 ;;                  1    wreg      void 
 31874 ;; Registers used:
 31875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 31876 ;; Tracked objects:
 31877 ;;		On entry : 0/0
 31878 ;;		On exit  : 0/0
 31879 ;;		Unchanged: 0/0
 31880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31881 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31882 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31884 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31885 ;;Total ram usage:        5 bytes
 31886 ;; Hardware stack levels used:    1
 31887 ;; Hardware stack levels required when called:    8
 31888 ;; This function calls:
 31889 ;;		_ToSegment
 31890 ;; This function is called by:
 31891 ;;		_HMI_SetNumber
 31892 ;; This function uses a non-reentrant model
 31893 ;;
 31894                           
 31895                           	psect	text153
 31896  015B74                     __ptext153:
 31897                           	opt stack 0
 31898  015B74                     _HMI_SetSegments:
 31899                           	opt stack 20
 31900                           
 31901                           ;HMI.c: 228: UINT16 in=0;
 31902                           
 31903                           ; BSR set to: 0
 31904                           ;incstack = 0
 31905  015B74  0E00               	movlw	0
 31906  015B76  0100               	movlb	0	; () banked
 31907  015B78  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 31908  015B7A  0E00               	movlw	0
 31909  015B7C  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 31910                           
 31911                           ;HMI.c: 229: while(*pString)
 31912  015B7E  D038               	goto	l1202
 31913  015B80                     
 31914                           ; BSR set to: 0
 31915                           ;HMI.c: 230: {
 31916                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 31917                           
 31918                           ; BSR set to: 0
 31919  015B80  0E3F               	movlw	low _HMIBoard
 31920  015B82  0100               	movlb	0	; () banked
 31921  015B84  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 31922  015B86  6ED9               	movwf	fsr2l,c
 31923  015B88  0E03               	movlw	high _HMIBoard
 31924  015B8A  0100               	movlb	0	; () banked
 31925  015B8C  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 31926  015B8E  6EDA               	movwf	fsr2h,c
 31927  015B90  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 31928  015B94  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 31929  015B98  50E7               	movf	indf1,w,c
 31930  015B9A  EC21  F097         	call	_ToSegment
 31931  015B9E  6EDF               	movwf	indf2,c
 31932                           
 31933                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 31934  015BA0  0E3F               	movlw	low _HMIBoard
 31935  015BA2  0100               	movlb	0	; () banked
 31936  015BA4  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 31937  015BA6  6ED9               	movwf	fsr2l,c
 31938  015BA8  0E03               	movlw	high _HMIBoard
 31939  015BAA  0100               	movlb	0	; () banked
 31940  015BAC  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 31941  015BAE  6EDA               	movwf	fsr2h,c
 31942  015BB0  0E80               	movlw	128
 31943  015BB2  18DE               	xorwf	postinc2,w,c
 31944  015BB4  A4D8               	btfss	status,2,c
 31945  015BB6  D00E               	goto	l1201
 31946                           
 31947                           ; BSR set to: 0
 31948                           ;HMI.c: 234: {
 31949                           ;HMI.c: 235: in--;
 31950  015BB8  0100               	movlb	0	; () banked
 31951  015BBA  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 31952  015BBC  A0D8               	btfss	status,0,c
 31953  015BBE  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 31954                           
 31955                           ; BSR set to: 0
 31956                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 31957  015BC0  0E3F               	movlw	low _HMIBoard
 31958  015BC2  0100               	movlb	0	; () banked
 31959  015BC4  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 31960  015BC6  6ED9               	movwf	fsr2l,c
 31961  015BC8  0E03               	movlw	high _HMIBoard
 31962  015BCA  0100               	movlb	0	; () banked
 31963  015BCC  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 31964  015BCE  6EDA               	movwf	fsr2h,c
 31965  015BD0  0E00               	movlw	0
 31966  015BD2  8EDB               	bsf	plusw2,7,c
 31967  015BD4                     l1201:
 31968                           
 31969                           ; BSR set to: 0
 31970                           ;HMI.c: 237: }
 31971                           ;HMI.c: 239: pString++;
 31972                           
 31973                           ; BSR set to: 0
 31974  015BD4  0100               	movlb	0	; () banked
 31975  015BD6  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 31976  015BD8  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 31977                           
 31978                           ; BSR set to: 0
 31979                           ;HMI.c: 240: in++;
 31980  015BDA  0100               	movlb	0	; () banked
 31981  015BDC  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 31982  015BDE  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 31983                           
 31984                           ; BSR set to: 0
 31985                           ;HMI.c: 241: if (in>=6)
 31986  015BE0  0100               	movlb	0	; () banked
 31987  015BE2  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 31988  015BE4  E11A               	bnz	l13780
 31989  015BE6  0E06               	movlw	6
 31990  015BE8  0100               	movlb	0	; () banked
 31991  015BEA  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 31992  015BEC  B0D8               	btfsc	status,0,c
 31993  015BEE  D015               	goto	l1204
 31994  015BF0                     l1202:
 31995                           
 31996                           ; BSR set to: 0
 31997                           
 31998                           ; BSR set to: 0
 31999                           
 32000                           ; BSR set to: 0
 32001  015BF0  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 32002  015BF4  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 32003  015BF8  50DF               	movf	indf2,w,c
 32004  015BFA  B4D8               	btfsc	status,2,c
 32005  015BFC  D00E               	goto	l1204
 32006  015BFE  D7C0               	goto	l1200
 32007  015C00                     
 32008                           ; BSR set to: 0
 32009                           ;HMI.c: 245: {
 32010                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 32011                           
 32012                           ; BSR set to: 0
 32013  015C00  0E3F               	movlw	low _HMIBoard
 32014  015C02  0100               	movlb	0	; () banked
 32015  015C04  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 32016  015C06  6ED9               	movwf	fsr2l,c
 32017  015C08  0E03               	movlw	high _HMIBoard
 32018  015C0A  0100               	movlb	0	; () banked
 32019  015C0C  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 32020  015C0E  6EDA               	movwf	fsr2h,c
 32021  015C10  0E00               	movlw	0
 32022  015C12  6EDF               	movwf	indf2,c
 32023                           
 32024                           ; BSR set to: 0
 32025                           ;HMI.c: 247: in++;
 32026  015C14  0100               	movlb	0	; () banked
 32027  015C16  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 32028  015C18  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 32029  015C1A                     l1204:
 32030  015C1A                     l13780:
 32031                           
 32032                           ; BSR set to: 0
 32033  015C1A  0100               	movlb	0	; () banked
 32034  015C1C  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 32035  015C1E  E106               	bnz	l1207
 32036  015C20  0E06               	movlw	6
 32037  015C22  0100               	movlb	0	; () banked
 32038  015C24  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 32039  015C26  B0D8               	btfsc	status,0,c
 32040  015C28  0012               	return	
 32041  015C2A  D7EA               	goto	l1205
 32042  015C2C                     l1207:
 32043                           
 32044                           ; BSR set to: 0
 32045  015C2C  0012               	return		;funcret
 32046  015C2E                     __end_of_HMI_SetSegments:
 32047                           	opt stack 0
 32048                           tosu	equ	0xFFF
 32049                           tosh	equ	0xFFE
 32050                           tosl	equ	0xFFD
 32051                           pclath	equ	0xFFA
 32052                           tblptru	equ	0xFF8
 32053                           tblptrh	equ	0xFF7
 32054                           tblptrl	equ	0xFF6
 32055                           tablat	equ	0xFF5
 32056                           prodh	equ	0xFF4
 32057                           prodl	equ	0xFF3
 32058                           intcon	equ	0xFF2
 32059                           postinc0	equ	0xFEE
 32060                           wreg	equ	0xFE8
 32061                           indf1	equ	0xFE7
 32062                           postdec1	equ	0xFE5
 32063                           fsr1h	equ	0xFE2
 32064                           fsr1l	equ	0xFE1
 32065                           indf2	equ	0xFDF
 32066                           postinc2	equ	0xFDE
 32067                           postdec2	equ	0xFDD
 32068                           plusw2	equ	0xFDB
 32069                           fsr2h	equ	0xFDA
 32070                           fsr2l	equ	0xFD9
 32071                           status	equ	0xFD8
 32072                           
 32073 ;; *************** function _ToSegment *****************
 32074 ;; Defined at:
 32075 ;;		line 284 in file "Library/Types.c"
 32076 ;; Parameters:    Size  Location     Type
 32077 ;;  pCHR            1    wreg     unsigned char 
 32078 ;; Auto vars:     Size  Location     Type
 32079 ;;  pCHR            1    0[BANK0 ] unsigned char 
 32080 ;; Return value:  Size  Location     Type
 32081 ;;                  1    wreg      unsigned char 
 32082 ;; Registers used:
 32083 ;;		wreg, status,2, status,0
 32084 ;; Tracked objects:
 32085 ;;		On entry : 0/0
 32086 ;;		On exit  : 0/0
 32087 ;;		Unchanged: 0/0
 32088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32092 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32093 ;;Total ram usage:        1 bytes
 32094 ;; Hardware stack levels used:    1
 32095 ;; Hardware stack levels required when called:    7
 32096 ;; This function calls:
 32097 ;;		Nothing
 32098 ;; This function is called by:
 32099 ;;		_HMI_SetSegments
 32100 ;; This function uses a non-reentrant model
 32101 ;;
 32102                           
 32103                           	psect	text154
 32104  012E42                     __ptext154:
 32105                           	opt stack 0
 32106  012E42                     _ToSegment:
 32107                           	opt stack 20
 32108                           
 32109                           ; BSR set to: 0
 32110                           ;incstack = 0
 32111                           ;ToSegment@pCHR stored from wreg
 32112  012E42  0100               	movlb	0	; () banked
 32113  012E44  6F60               	movwf	ToSegment@pCHR& (0+255),b
 32114                           
 32115                           ;Types.c: 286: switch(pCHR)
 32116  012E46  D07E               	goto	l853
 32117  012E48  0E3F               	movlw	63
 32118  012E4A  0012               	return	
 32119  012E4C  0E06               	movlw	6
 32120  012E4E  0012               	return	
 32121  012E50  0E5B               	movlw	91
 32122  012E52  0012               	return	
 32123  012E54  0E4F               	movlw	79
 32124  012E56  0012               	return	
 32125  012E58  0E66               	movlw	102
 32126  012E5A  0012               	return	
 32127  012E5C  0E6D               	movlw	109
 32128  012E5E  0012               	return	
 32129  012E60  0E7D               	movlw	125
 32130  012E62  0012               	return	
 32131  012E64  0E07               	movlw	7
 32132  012E66  0012               	return	
 32133  012E68  0E7F               	movlw	127
 32134  012E6A  0012               	return	
 32135  012E6C  0E6F               	movlw	111
 32136  012E6E  0012               	return	
 32137  012E70  0E5F               	movlw	95
 32138  012E72  0012               	return	
 32139  012E74  0E7C               	movlw	124
 32140  012E76  0012               	return	
 32141  012E78  0E58               	movlw	88
 32142  012E7A  0012               	return	
 32143  012E7C  0E5E               	movlw	94
 32144  012E7E  0012               	return	
 32145  012E80  0E7B               	movlw	123
 32146  012E82  0012               	return	
 32147  012E84  0E71               	movlw	113
 32148  012E86  0012               	return	
 32149  012E88  0E6F               	movlw	111
 32150  012E8A  0012               	return	
 32151  012E8C  0E74               	movlw	116
 32152  012E8E  0012               	return	
 32153  012E90  0E04               	movlw	4
 32154  012E92  0012               	return	
 32155  012E94  0E0E               	movlw	14
 32156  012E96  0012               	return	
 32157  012E98  0E7A               	movlw	122
 32158  012E9A  0012               	return	
 32159  012E9C  0E06               	movlw	6
 32160  012E9E  0012               	return	
 32161  012EA0  0E14               	movlw	20
 32162  012EA2  0012               	return	
 32163  012EA4  0E54               	movlw	84
 32164  012EA6  0012               	return	
 32165  012EA8  0E5C               	movlw	92
 32166  012EAA  0012               	return	
 32167  012EAC  0E73               	movlw	115
 32168  012EAE  0012               	return	
 32169  012EB0  0E67               	movlw	103
 32170  012EB2  0012               	return	
 32171  012EB4  0E50               	movlw	80
 32172  012EB6  0012               	return	
 32173  012EB8  0E6D               	movlw	109
 32174  012EBA  0012               	return	
 32175  012EBC  0E78               	movlw	120
 32176  012EBE  0012               	return	
 32177  012EC0  0E1C               	movlw	28
 32178  012EC2  0012               	return	
 32179  012EC4  0E62               	movlw	98
 32180  012EC6  0012               	return	
 32181  012EC8  0E2A               	movlw	42
 32182  012ECA  0012               	return	
 32183  012ECC  0E64               	movlw	100
 32184  012ECE  0012               	return	
 32185  012ED0  0E6E               	movlw	110
 32186  012ED2  0012               	return	
 32187  012ED4  0E5B               	movlw	91
 32188  012ED6  0012               	return	
 32189  012ED8  0E77               	movlw	119
 32190  012EDA  0012               	return	
 32191  012EDC  0E7F               	movlw	127
 32192  012EDE  0012               	return	
 32193  012EE0  0E39               	movlw	57
 32194  012EE2  0012               	return	
 32195  012EE4  0E3F               	movlw	63
 32196  012EE6  0012               	return	
 32197  012EE8  0E79               	movlw	121
 32198  012EEA  0012               	return	
 32199  012EEC  0E71               	movlw	113
 32200  012EEE  0012               	return	
 32201  012EF0  0E3D               	movlw	61
 32202  012EF2  0012               	return	
 32203  012EF4  0E76               	movlw	118
 32204  012EF6  0012               	return	
 32205  012EF8  0E06               	movlw	6
 32206  012EFA  0012               	return	
 32207  012EFC  0E1E               	movlw	30
 32208  012EFE  0012               	return	
 32209  012F00  0E57               	movlw	87
 32210  012F02  0012               	return	
 32211  012F04  0E38               	movlw	56
 32212  012F06  0012               	return	
 32213  012F08  0E76               	movlw	118
 32214  012F0A  0012               	return	
 32215  012F0C  0E76               	movlw	118
 32216  012F0E  0012               	return	
 32217  012F10  0E3F               	movlw	63
 32218  012F12  0012               	return	
 32219  012F14  0E73               	movlw	115
 32220  012F16  0012               	return	
 32221  012F18  0E3F               	movlw	63
 32222  012F1A  0012               	return	
 32223  012F1C  0E77               	movlw	119
 32224  012F1E  0012               	return	
 32225  012F20  0E6D               	movlw	109
 32226  012F22  0012               	return	
 32227  012F24  0E31               	movlw	49
 32228  012F26  0012               	return	
 32229  012F28  0E3E               	movlw	62
 32230  012F2A  0012               	return	
 32231  012F2C  0E3E               	movlw	62
 32232  012F2E  0012               	return	
 32233  012F30  0E7E               	movlw	126
 32234  012F32  0012               	return	
 32235  012F34  0E76               	movlw	118
 32236  012F36  0012               	return	
 32237  012F38  0E66               	movlw	102
 32238  012F3A  0012               	return	
 32239  012F3C  0E5B               	movlw	91
 32240  012F3E  0012               	return	
 32241  012F40  0E80               	movlw	128
 32242  012F42  0012               	return	
 32243  012F44                     l853:
 32244  012F44  0100               	movlb	0	; () banked
 32245  012F46  5160               	movf	ToSegment@pCHR& (0+255),w,b
 32246                           
 32247                           ; Switch size 1, requested type "space"
 32248                           ; Number of cases is 63, Range of values is 46 to 122
 32249                           ; switch strategies available:
 32250                           ; Name         Instructions Cycles
 32251                           ; simple_byte          190    96 (average)
 32252                           ;	Chosen strategy is simple_byte
 32253  012F48  0A2E               	xorlw	46	; case 46
 32254  012F4A  B4D8               	btfsc	status,2,c
 32255  012F4C  D7F9               	goto	l917
 32256  012F4E  0A1E               	xorlw	30	; case 48
 32257  012F50  B4D8               	btfsc	status,2,c
 32258  012F52  D77A               	goto	l854
 32259  012F54  0A01               	xorlw	1	; case 49
 32260  012F56  B4D8               	btfsc	status,2,c
 32261  012F58  D779               	goto	l856
 32262  012F5A  0A03               	xorlw	3	; case 50
 32263  012F5C  B4D8               	btfsc	status,2,c
 32264  012F5E  D778               	goto	l857
 32265  012F60  0A01               	xorlw	1	; case 51
 32266  012F62  B4D8               	btfsc	status,2,c
 32267  012F64  D777               	goto	l858
 32268  012F66  0A07               	xorlw	7	; case 52
 32269  012F68  B4D8               	btfsc	status,2,c
 32270  012F6A  D776               	goto	l859
 32271  012F6C  0A01               	xorlw	1	; case 53
 32272  012F6E  B4D8               	btfsc	status,2,c
 32273  012F70  D775               	goto	l860
 32274  012F72  0A03               	xorlw	3	; case 54
 32275  012F74  B4D8               	btfsc	status,2,c
 32276  012F76  D774               	goto	l861
 32277  012F78  0A01               	xorlw	1	; case 55
 32278  012F7A  B4D8               	btfsc	status,2,c
 32279  012F7C  D773               	goto	l862
 32280  012F7E  0A0F               	xorlw	15	; case 56
 32281  012F80  B4D8               	btfsc	status,2,c
 32282  012F82  D772               	goto	l863
 32283  012F84  0A01               	xorlw	1	; case 57
 32284  012F86  B4D8               	btfsc	status,2,c
 32285  012F88  D771               	goto	l864
 32286  012F8A  0A78               	xorlw	120	; case 65
 32287  012F8C  B4D8               	btfsc	status,2,c
 32288  012F8E  D7A4               	goto	l891
 32289  012F90  0A03               	xorlw	3	; case 66
 32290  012F92  B4D8               	btfsc	status,2,c
 32291  012F94  D7A3               	goto	l892
 32292  012F96  0A01               	xorlw	1	; case 67
 32293  012F98  B4D8               	btfsc	status,2,c
 32294  012F9A  D7A2               	goto	l893
 32295  012F9C  0A07               	xorlw	7	; case 68
 32296  012F9E  B4D8               	btfsc	status,2,c
 32297  012FA0  D7A1               	goto	l894
 32298  012FA2  0A01               	xorlw	1	; case 69
 32299  012FA4  B4D8               	btfsc	status,2,c
 32300  012FA6  D7A0               	goto	l895
 32301  012FA8  0A03               	xorlw	3	; case 70
 32302  012FAA  B4D8               	btfsc	status,2,c
 32303  012FAC  D79F               	goto	l896
 32304  012FAE  0A01               	xorlw	1	; case 71
 32305  012FB0  B4D8               	btfsc	status,2,c
 32306  012FB2  D79E               	goto	l897
 32307  012FB4  0A0F               	xorlw	15	; case 72
 32308  012FB6  B4D8               	btfsc	status,2,c
 32309  012FB8  D79D               	goto	l898
 32310  012FBA  0A01               	xorlw	1	; case 73
 32311  012FBC  B4D8               	btfsc	status,2,c
 32312  012FBE  D79C               	goto	l899
 32313  012FC0  0A03               	xorlw	3	; case 74
 32314  012FC2  B4D8               	btfsc	status,2,c
 32315  012FC4  D79B               	goto	l900
 32316  012FC6  0A01               	xorlw	1	; case 75
 32317  012FC8  B4D8               	btfsc	status,2,c
 32318  012FCA  D79A               	goto	l901
 32319  012FCC  0A07               	xorlw	7	; case 76
 32320  012FCE  B4D8               	btfsc	status,2,c
 32321  012FD0  D799               	goto	l902
 32322  012FD2  0A01               	xorlw	1	; case 77
 32323  012FD4  B4D8               	btfsc	status,2,c
 32324  012FD6  D798               	goto	l903
 32325  012FD8  0A03               	xorlw	3	; case 78
 32326  012FDA  B4D8               	btfsc	status,2,c
 32327  012FDC  D797               	goto	l904
 32328  012FDE  0A01               	xorlw	1	; case 79
 32329  012FE0  B4D8               	btfsc	status,2,c
 32330  012FE2  D796               	goto	l905
 32331  012FE4  0A1F               	xorlw	31	; case 80
 32332  012FE6  B4D8               	btfsc	status,2,c
 32333  012FE8  D795               	goto	l906
 32334  012FEA  0A01               	xorlw	1	; case 81
 32335  012FEC  B4D8               	btfsc	status,2,c
 32336  012FEE  D794               	goto	l907
 32337  012FF0  0A03               	xorlw	3	; case 82
 32338  012FF2  B4D8               	btfsc	status,2,c
 32339  012FF4  D793               	goto	l908
 32340  012FF6  0A01               	xorlw	1	; case 83
 32341  012FF8  B4D8               	btfsc	status,2,c
 32342  012FFA  D792               	goto	l909
 32343  012FFC  0A07               	xorlw	7	; case 84
 32344  012FFE  B4D8               	btfsc	status,2,c
 32345  013000  D791               	goto	l910
 32346  013002  0A01               	xorlw	1	; case 85
 32347  013004  B4D8               	btfsc	status,2,c
 32348  013006  D790               	goto	l911
 32349  013008  0A03               	xorlw	3	; case 86
 32350  01300A  B4D8               	btfsc	status,2,c
 32351  01300C  D78F               	goto	l912
 32352  01300E  0A01               	xorlw	1	; case 87
 32353  013010  B4D8               	btfsc	status,2,c
 32354  013012  D78E               	goto	l913
 32355  013014  0A0F               	xorlw	15	; case 88
 32356  013016  B4D8               	btfsc	status,2,c
 32357  013018  D78D               	goto	l914
 32358  01301A  0A01               	xorlw	1	; case 89
 32359  01301C  B4D8               	btfsc	status,2,c
 32360  01301E  D78C               	goto	l915
 32361  013020  0A03               	xorlw	3	; case 90
 32362  013022  B4D8               	btfsc	status,2,c
 32363  013024  D78B               	goto	l916
 32364  013026  0A3B               	xorlw	59	; case 97
 32365  013028  B4D8               	btfsc	status,2,c
 32366  01302A  D722               	goto	l865
 32367  01302C  0A03               	xorlw	3	; case 98
 32368  01302E  B4D8               	btfsc	status,2,c
 32369  013030  D721               	goto	l866
 32370  013032  0A01               	xorlw	1	; case 99
 32371  013034  B4D8               	btfsc	status,2,c
 32372  013036  D720               	goto	l867
 32373  013038  0A07               	xorlw	7	; case 100
 32374  01303A  B4D8               	btfsc	status,2,c
 32375  01303C  D71F               	goto	l868
 32376  01303E  0A01               	xorlw	1	; case 101
 32377  013040  B4D8               	btfsc	status,2,c
 32378  013042  D71E               	goto	l869
 32379  013044  0A03               	xorlw	3	; case 102
 32380  013046  B4D8               	btfsc	status,2,c
 32381  013048  D71D               	goto	l870
 32382  01304A  0A01               	xorlw	1	; case 103
 32383  01304C  B4D8               	btfsc	status,2,c
 32384  01304E  D71C               	goto	l871
 32385  013050  0A0F               	xorlw	15	; case 104
 32386  013052  B4D8               	btfsc	status,2,c
 32387  013054  D71B               	goto	l872
 32388  013056  0A01               	xorlw	1	; case 105
 32389  013058  B4D8               	btfsc	status,2,c
 32390  01305A  D71A               	goto	l873
 32391  01305C  0A03               	xorlw	3	; case 106
 32392  01305E  B4D8               	btfsc	status,2,c
 32393  013060  D719               	goto	l874
 32394  013062  0A01               	xorlw	1	; case 107
 32395  013064  B4D8               	btfsc	status,2,c
 32396  013066  D718               	goto	l875
 32397  013068  0A07               	xorlw	7	; case 108
 32398  01306A  B4D8               	btfsc	status,2,c
 32399  01306C  D717               	goto	l876
 32400  01306E  0A01               	xorlw	1	; case 109
 32401  013070  B4D8               	btfsc	status,2,c
 32402  013072  D716               	goto	l877
 32403  013074  0A03               	xorlw	3	; case 110
 32404  013076  B4D8               	btfsc	status,2,c
 32405  013078  D715               	goto	l878
 32406  01307A  0A01               	xorlw	1	; case 111
 32407  01307C  B4D8               	btfsc	status,2,c
 32408  01307E  D714               	goto	l879
 32409  013080  0A1F               	xorlw	31	; case 112
 32410  013082  B4D8               	btfsc	status,2,c
 32411  013084  D713               	goto	l880
 32412  013086  0A01               	xorlw	1	; case 113
 32413  013088  B4D8               	btfsc	status,2,c
 32414  01308A  D712               	goto	l881
 32415  01308C  0A03               	xorlw	3	; case 114
 32416  01308E  B4D8               	btfsc	status,2,c
 32417  013090  D711               	goto	l882
 32418  013092  0A01               	xorlw	1	; case 115
 32419  013094  B4D8               	btfsc	status,2,c
 32420  013096  D710               	goto	l883
 32421  013098  0A07               	xorlw	7	; case 116
 32422  01309A  B4D8               	btfsc	status,2,c
 32423  01309C  D70F               	goto	l884
 32424  01309E  0A01               	xorlw	1	; case 117
 32425  0130A0  B4D8               	btfsc	status,2,c
 32426  0130A2  D70E               	goto	l885
 32427  0130A4  0A03               	xorlw	3	; case 118
 32428  0130A6  B4D8               	btfsc	status,2,c
 32429  0130A8  D70D               	goto	l886
 32430  0130AA  0A01               	xorlw	1	; case 119
 32431  0130AC  B4D8               	btfsc	status,2,c
 32432  0130AE  D70C               	goto	l887
 32433  0130B0  0A0F               	xorlw	15	; case 120
 32434  0130B2  B4D8               	btfsc	status,2,c
 32435  0130B4  D70B               	goto	l888
 32436  0130B6  0A01               	xorlw	1	; case 121
 32437  0130B8  B4D8               	btfsc	status,2,c
 32438  0130BA  D70A               	goto	l889
 32439  0130BC  0A03               	xorlw	3	; case 122
 32440  0130BE  B4D8               	btfsc	status,2,c
 32441  0130C0  D709               	goto	l890
 32442                           
 32443                           ;Types.c: 354: return 0;
 32444                           
 32445                           ; BSR set to: 0
 32446  0130C2  0E00               	movlw	0
 32447  0130C4  0012               	return	
 32448  0130C6                     __end_of_ToSegment:
 32449                           	opt stack 0
 32450                           tosu	equ	0xFFF
 32451                           tosh	equ	0xFFE
 32452                           tosl	equ	0xFFD
 32453                           pclath	equ	0xFFA
 32454                           tblptru	equ	0xFF8
 32455                           tblptrh	equ	0xFF7
 32456                           tblptrl	equ	0xFF6
 32457                           tablat	equ	0xFF5
 32458                           prodh	equ	0xFF4
 32459                           prodl	equ	0xFF3
 32460                           intcon	equ	0xFF2
 32461                           postinc0	equ	0xFEE
 32462                           wreg	equ	0xFE8
 32463                           indf1	equ	0xFE7
 32464                           postdec1	equ	0xFE5
 32465                           fsr1h	equ	0xFE2
 32466                           fsr1l	equ	0xFE1
 32467                           indf2	equ	0xFDF
 32468                           postinc2	equ	0xFDE
 32469                           postdec2	equ	0xFDD
 32470                           plusw2	equ	0xFDB
 32471                           fsr2h	equ	0xFDA
 32472                           fsr2l	equ	0xFD9
 32473                           status	equ	0xFD8
 32474                           
 32475 ;; *************** function _HMI_SetButton *****************
 32476 ;; Defined at:
 32477 ;;		line 186 in file "HMI.c"
 32478 ;; Parameters:    Size  Location     Type
 32479 ;;  pValue          1    wreg     unsigned char 
 32480 ;; Auto vars:     Size  Location     Type
 32481 ;;  pValue          1    6[BANK0 ] unsigned char 
 32482 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 32483 ;;  v               1    7[BANK0 ] unsigned char 
 32484 ;; Return value:  Size  Location     Type
 32485 ;;                  1    wreg      void 
 32486 ;; Registers used:
 32487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 32488 ;; Tracked objects:
 32489 ;;		On entry : 0/0
 32490 ;;		On exit  : 0/0
 32491 ;;		Unchanged: 0/0
 32492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32494 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32495 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32496 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32497 ;;Total ram usage:        8 bytes
 32498 ;; Hardware stack levels used:    1
 32499 ;; Hardware stack levels required when called:    7
 32500 ;; This function calls:
 32501 ;;		Nothing
 32502 ;; This function is called by:
 32503 ;;		_Event_TestButton
 32504 ;; This function uses a non-reentrant model
 32505 ;;
 32506                           
 32507                           	psect	text155
 32508  0165DE                     __ptext155:
 32509                           	opt stack 0
 32510  0165DE                     _HMI_SetButton:
 32511                           	opt stack 19
 32512                           
 32513                           ;incstack = 0
 32514                           ;HMI_SetButton@pValue stored from wreg
 32515  0165DE  0100               	movlb	0	; () banked
 32516  0165E0  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 32517                           
 32518                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 32519  0165E2  0E64               	movlw	low HMI_SetButton@F7213
 32520  0165E4  6EF6               	movwf	tblptrl,c
 32521  0165E6                     	if	1	;There is more than 1 active tblptr byte
 32522  0165E6  0EFD               	movlw	high HMI_SetButton@F7213
 32523  0165E8  6EF7               	movwf	tblptrh,c
 32524  0165EA                     	endif
 32525  0165EA                     	if	1	;There are 3 active tblptr bytes
 32526  0165EA  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 32527  0165EC  6EF8               	movwf	tblptru,c
 32528  0165EE                     	endif
 32529  0165EE  0009               	tblrd		*+
 32530  0165F0  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 32531  0165F4  0009               	tblrd		*+
 32532  0165F6  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 32533  0165FA  0009               	tblrd		*+
 32534  0165FC  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 32535  016600  000A               	tblrd		*-
 32536  016602  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 32537                           
 32538                           ;HMI.c: 189: UINT8 v = 0b00010001;
 32539  016606  0E11               	movlw	17
 32540  016608  0100               	movlb	0	; () banked
 32541  01660A  6F67               	movwf	HMI_SetButton@v& (0+255),b
 32542                           
 32543                           ; BSR set to: 0
 32544                           ;HMI.c: 190: pValue &= 3;
 32545  01660C  0E03               	movlw	3
 32546  01660E  0100               	movlb	0	; () banked
 32547  016610  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 32548                           
 32549                           ; BSR set to: 0
 32550                           ;HMI.c: 191: v = v << reindex[pValue];
 32551  016612  0100               	movlb	0	; () banked
 32552  016614  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 32553  016616  0D01               	mullw	1
 32554  016618  0E62               	movlw	low HMI_SetButton@reindex
 32555  01661A  24F3               	addwf	prodl,w,c
 32556  01661C  6ED9               	movwf	fsr2l,c
 32557  01661E  0E00               	movlw	high HMI_SetButton@reindex
 32558  016620  20F4               	addwfc	prodh,w,c
 32559  016622  6EDA               	movwf	fsr2h,c
 32560  016624  50DF               	movf	indf2,w,c
 32561  016626  0100               	movlb	0	; () banked
 32562  016628  6F60               	movwf	??_HMI_SetButton& (0+255),b
 32563  01662A  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 32564  01662E  0100               	movlb	0	; () banked
 32565  016630  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 32566  016632  D003               	goto	u11494
 32567  016634                     u11495:
 32568  016634  0100               	movlb	0	; () banked
 32569  016636  90D8               	bcf	status,0,c
 32570  016638  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 32571  01663A                     u11494:
 32572  01663A  0100               	movlb	0	; () banked
 32573  01663C  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 32574  01663E  D7FA               	goto	u11495
 32575  016640  0100               	movlb	0	; () banked
 32576  016642  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 32577  016644  0100               	movlb	0	; () banked
 32578  016646  6F67               	movwf	HMI_SetButton@v& (0+255),b
 32579                           
 32580                           ; BSR set to: 0
 32581                           ;HMI.c: 192: v = v >> 4;
 32582  016648  0100               	movlb	0	; () banked
 32583  01664A  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 32584  01664C  0B0F               	andlw	15
 32585  01664E  0100               	movlb	0	; () banked
 32586  016650  6F67               	movwf	HMI_SetButton@v& (0+255),b
 32587                           
 32588                           ; BSR set to: 0
 32589                           ;HMI.c: 193: v = v & 0x0F;
 32590  016652  0100               	movlb	0	; () banked
 32591  016654  5167               	movf	HMI_SetButton@v& (0+255),w,b
 32592  016656  0B0F               	andlw	15
 32593  016658  0100               	movlb	0	; () banked
 32594  01665A  6F67               	movwf	HMI_SetButton@v& (0+255),b
 32595                           
 32596                           ; BSR set to: 0
 32597                           ;HMI.c: 194: HMIBoard.pButton = v;
 32598  01665C  0103               	movlb	3	; () banked
 32599  01665E  5145               	movf	(_HMIBoard+6)& (0+255),w,b
 32600  016660  0100               	movlb	0	; () banked
 32601  016662  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 32602  016664  0BF0               	andlw	-16
 32603  016666  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 32604  016668  0103               	movlb	3	; () banked
 32605  01666A  6F45               	movwf	(_HMIBoard+6)& (0+255),b
 32606                           
 32607                           ; BSR set to: 3
 32608  01666C  0012               	return		;funcret
 32609  01666E                     __end_of_HMI_SetButton:
 32610                           	opt stack 0
 32611                           tosu	equ	0xFFF
 32612                           tosh	equ	0xFFE
 32613                           tosl	equ	0xFFD
 32614                           pclath	equ	0xFFA
 32615                           tblptru	equ	0xFF8
 32616                           tblptrh	equ	0xFF7
 32617                           tblptrl	equ	0xFF6
 32618                           tablat	equ	0xFF5
 32619                           prodh	equ	0xFF4
 32620                           prodl	equ	0xFF3
 32621                           intcon	equ	0xFF2
 32622                           postinc0	equ	0xFEE
 32623                           wreg	equ	0xFE8
 32624                           indf1	equ	0xFE7
 32625                           postdec1	equ	0xFE5
 32626                           fsr1h	equ	0xFE2
 32627                           fsr1l	equ	0xFE1
 32628                           indf2	equ	0xFDF
 32629                           postinc2	equ	0xFDE
 32630                           postdec2	equ	0xFDD
 32631                           plusw2	equ	0xFDB
 32632                           fsr2h	equ	0xFDA
 32633                           fsr2l	equ	0xFD9
 32634                           status	equ	0xFD8
 32635                           
 32636 ;; *************** function _LED_Toggle *****************
 32637 ;; Defined at:
 32638 ;;		line 50 in file "Library/LED.c"
 32639 ;; Parameters:    Size  Location     Type
 32640 ;;  pLED            1    wreg     enum E6739
 32641 ;; Auto vars:     Size  Location     Type
 32642 ;;  pLED            1   24[BANK0 ] enum E6739
 32643 ;; Return value:  Size  Location     Type
 32644 ;;                  1    wreg      void 
 32645 ;; Registers used:
 32646 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32647 ;; Tracked objects:
 32648 ;;		On entry : 0/0
 32649 ;;		On exit  : 0/0
 32650 ;;		Unchanged: 0/0
 32651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32656 ;;Total ram usage:        1 bytes
 32657 ;; Hardware stack levels used:    1
 32658 ;; Hardware stack levels required when called:   12
 32659 ;; This function calls:
 32660 ;;		_Port_TogglePin
 32661 ;; This function is called by:
 32662 ;;		_LCD_Reset
 32663 ;;		_Event_DIPSwitch
 32664 ;;		_Event_TestButton
 32665 ;;		_Event_ADCSequenceComplete
 32666 ;;		_Event_HMI_DIPSwitch
 32667 ;;		_Event_HMI_LeftButton
 32668 ;;		_Event_HMI_RightButton
 32669 ;;		_Event_HMI_UpButton
 32670 ;;		_Event_HMI_DownButton
 32671 ;; This function uses a non-reentrant model
 32672 ;;
 32673                           
 32674                           	psect	text156
 32675  0176A6                     __ptext156:
 32676                           	opt stack 0
 32677  0176A6                     _LED_Toggle:
 32678                           	opt stack 14
 32679                           
 32680                           ; BSR set to: 3
 32681                           ;incstack = 0
 32682                           ;LED_Toggle@pLED stored from wreg
 32683  0176A6  0100               	movlb	0	; () banked
 32684  0176A8  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 32685                           
 32686                           ;LED.c: 52: switch (pLED)
 32687  0176AA  D018               	goto	l234
 32688  0176AC                     
 32689                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 32690  0176AC  0EAD               	movlw	low _PortC
 32691  0176AE  0100               	movlb	0	; () banked
 32692  0176B0  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 32693  0176B2  0E03               	movlw	high _PortC
 32694  0176B4  0100               	movlb	0	; () banked
 32695  0176B6  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 32696  0176B8  0E00               	movlw	0
 32697  0176BA  0100               	movlb	0	; () banked
 32698  0176BC  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 32699  0176BE  ECCF  F0BD         	call	_Port_TogglePin	;wreg free
 32700                           
 32701                           ;LED.c: 56: break;
 32702  0176C2  0012               	return	
 32703  0176C4                     
 32704                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 32705  0176C4  0EAD               	movlw	low _PortC
 32706  0176C6  0100               	movlb	0	; () banked
 32707  0176C8  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 32708  0176CA  0E03               	movlw	high _PortC
 32709  0176CC  0100               	movlb	0	; () banked
 32710  0176CE  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 32711  0176D0  0E01               	movlw	1
 32712  0176D2  0100               	movlb	0	; () banked
 32713  0176D4  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 32714  0176D6  ECCF  F0BD         	call	_Port_TogglePin	;wreg free
 32715                           
 32716                           ;LED.c: 60: }
 32717                           
 32718                           ;LED.c: 59: break;
 32719  0176DA  0012               	return	
 32720  0176DC                     l234:
 32721  0176DC  0100               	movlb	0	; () banked
 32722  0176DE  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 32723                           
 32724                           ; Switch size 1, requested type "space"
 32725                           ; Number of cases is 2, Range of values is 0 to 1
 32726                           ; switch strategies available:
 32727                           ; Name         Instructions Cycles
 32728                           ; simple_byte            7     4 (average)
 32729                           ;	Chosen strategy is simple_byte
 32730  0176E0  0A00               	xorlw	0	; case 0
 32731  0176E2  B4D8               	btfsc	status,2,c
 32732  0176E4  D7E3               	goto	l235
 32733  0176E6  0A01               	xorlw	1	; case 1
 32734  0176E8  A4D8               	btfss	status,2,c
 32735  0176EA  0012               	return	
 32736  0176EC  D7EB               	goto	l237
 32737  0176EE                     __end_of_LED_Toggle:
 32738                           	opt stack 0
 32739                           tosu	equ	0xFFF
 32740                           tosh	equ	0xFFE
 32741                           tosl	equ	0xFFD
 32742                           pclath	equ	0xFFA
 32743                           tblptru	equ	0xFF8
 32744                           tblptrh	equ	0xFF7
 32745                           tblptrl	equ	0xFF6
 32746                           tablat	equ	0xFF5
 32747                           prodh	equ	0xFF4
 32748                           prodl	equ	0xFF3
 32749                           intcon	equ	0xFF2
 32750                           postinc0	equ	0xFEE
 32751                           wreg	equ	0xFE8
 32752                           indf1	equ	0xFE7
 32753                           postdec1	equ	0xFE5
 32754                           fsr1h	equ	0xFE2
 32755                           fsr1l	equ	0xFE1
 32756                           indf2	equ	0xFDF
 32757                           postinc2	equ	0xFDE
 32758                           postdec2	equ	0xFDD
 32759                           plusw2	equ	0xFDB
 32760                           fsr2h	equ	0xFDA
 32761                           fsr2l	equ	0xFD9
 32762                           status	equ	0xFD8
 32763                           
 32764 ;; *************** function _Port_TogglePin *****************
 32765 ;; Defined at:
 32766 ;;		line 278 in file "Library/Port.c"
 32767 ;; Parameters:    Size  Location     Type
 32768 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 32769 ;;		 -> PortC(10), 
 32770 ;;  pPin            1   22[BANK0 ] enum E6750
 32771 ;; Auto vars:     Size  Location     Type
 32772 ;;  Value           1   23[BANK0 ] unsigned char 
 32773 ;; Return value:  Size  Location     Type
 32774 ;;                  1    wreg      void 
 32775 ;; Registers used:
 32776 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32777 ;; Tracked objects:
 32778 ;;		On entry : 0/0
 32779 ;;		On exit  : 0/0
 32780 ;;		Unchanged: 0/0
 32781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32782 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32785 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32786 ;;Total ram usage:        4 bytes
 32787 ;; Hardware stack levels used:    1
 32788 ;; Hardware stack levels required when called:   11
 32789 ;; This function calls:
 32790 ;;		_Port_GetPin
 32791 ;;		_Port_SetPin
 32792 ;; This function is called by:
 32793 ;;		_LED_Toggle
 32794 ;; This function uses a non-reentrant model
 32795 ;;
 32796                           
 32797                           	psect	text157
 32798  017B9E                     __ptext157:
 32799                           	opt stack 0
 32800  017B9E                     _Port_TogglePin:
 32801                           	opt stack 14
 32802                           
 32803                           ;Port.c: 280: UINT8 Value;
 32804                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 32805                           
 32806                           ;incstack = 0
 32807  017B9E  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 32808  017BA2  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 32809  017BA6  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 32810  017BAA  ECBD  F0BB         	call	_Port_GetPin	;wreg free
 32811  017BAE  0100               	movlb	0	; () banked
 32812  017BB0  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 32813                           
 32814                           ; BSR set to: 0
 32815                           ;Port.c: 282: Value ^= 0x01;
 32816  017BB2  0E01               	movlw	1
 32817  017BB4  0100               	movlb	0	; () banked
 32818  017BB6  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 32819                           
 32820                           ; BSR set to: 0
 32821                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 32822  017BB8  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 32823  017BBC  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 32824  017BC0  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 32825  017BC4  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 32826  017BC8  ECDA  F0AB         	call	_Port_SetPin	;wreg free
 32827  017BCC  0012               	return		;funcret
 32828  017BCE                     __end_of_Port_TogglePin:
 32829                           	opt stack 0
 32830                           tosu	equ	0xFFF
 32831                           tosh	equ	0xFFE
 32832                           tosl	equ	0xFFD
 32833                           pclath	equ	0xFFA
 32834                           tblptru	equ	0xFF8
 32835                           tblptrh	equ	0xFF7
 32836                           tblptrl	equ	0xFF6
 32837                           tablat	equ	0xFF5
 32838                           prodh	equ	0xFF4
 32839                           prodl	equ	0xFF3
 32840                           intcon	equ	0xFF2
 32841                           postinc0	equ	0xFEE
 32842                           wreg	equ	0xFE8
 32843                           indf1	equ	0xFE7
 32844                           postdec1	equ	0xFE5
 32845                           fsr1h	equ	0xFE2
 32846                           fsr1l	equ	0xFE1
 32847                           indf2	equ	0xFDF
 32848                           postinc2	equ	0xFDE
 32849                           postdec2	equ	0xFDD
 32850                           plusw2	equ	0xFDB
 32851                           fsr2h	equ	0xFDA
 32852                           fsr2l	equ	0xFD9
 32853                           status	equ	0xFD8
 32854                           
 32855 ;; *************** function _Port_SetPin *****************
 32856 ;; Defined at:
 32857 ;;		line 247 in file "Library/Port.c"
 32858 ;; Parameters:    Size  Location     Type
 32859 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 32860 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 32861 ;;  pPin            1   17[BANK0 ] enum E6750
 32862 ;;  pValue          1   18[BANK0 ] unsigned char 
 32863 ;; Auto vars:     Size  Location     Type
 32864 ;;  Type            1   19[BANK0 ] enum E6795
 32865 ;; Return value:  Size  Location     Type
 32866 ;;                  1    wreg      void 
 32867 ;; Registers used:
 32868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32869 ;; Tracked objects:
 32870 ;;		On entry : 0/0
 32871 ;;		On exit  : 0/0
 32872 ;;		Unchanged: 0/0
 32873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32874 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32877 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32878 ;;Total ram usage:        5 bytes
 32879 ;; Hardware stack levels used:    1
 32880 ;; Hardware stack levels required when called:   10
 32881 ;; This function calls:
 32882 ;;		_Byte_SetBit
 32883 ;;		_Word_GetPair
 32884 ;; This function is called by:
 32885 ;;		_Reset_Low
 32886 ;;		_Reset_High
 32887 ;;		_LED_Set
 32888 ;;		_Port_TogglePin
 32889 ;;		_Motor_Init
 32890 ;;		_Motor_Step
 32891 ;;		_MXK_Init
 32892 ;; This function uses a non-reentrant model
 32893 ;;
 32894                           
 32895                           	psect	text158
 32896  0157B4                     __ptext158:
 32897                           	opt stack 0
 32898  0157B4                     _Port_SetPin:
 32899                           	opt stack 17
 32900                           
 32901                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 32902                           
 32903                           ;incstack = 0
 32904  0157B4  0E08               	movlw	8
 32905  0157B6  0100               	movlb	0	; () banked
 32906  0157B8  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 32907  0157BA  0100               	movlb	0	; () banked
 32908  0157BC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 32909  0157BE  0E00               	movlw	0
 32910  0157C0  0100               	movlb	0	; () banked
 32911  0157C2  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 32912  0157C4  0100               	movlb	0	; () banked
 32913  0157C6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 32914  0157C8  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 32915  0157CC  ECBF  F0BC         	call	_Word_GetPair	;wreg free
 32916  0157D0  0100               	movlb	0	; () banked
 32917  0157D2  6F73               	movwf	Port_SetPin@Type& (0+255),b
 32918                           
 32919                           ;Port.c: 250: switch (Type)
 32920  0157D4  D042               	goto	l427
 32921  0157D6                     
 32922                           ; BSR set to: 0
 32923                           ;Port.c: 256: pValue &= 1;
 32924                           
 32925                           ; BSR set to: 0
 32926  0157D6  0E01               	movlw	1
 32927  0157D8  0100               	movlb	0	; () banked
 32928  0157DA  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 32929                           
 32930                           ; BSR set to: 0
 32931                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 32932  0157DC  0100               	movlb	0	; () banked
 32933  0157DE  EE20 F002          	lfsr	2,2
 32934  0157E2  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 32935  0157E4  26D9               	addwf	fsr2l,f,c
 32936  0157E6  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 32937  0157E8  22DA               	addwfc	fsr2h,f,c
 32938  0157EA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 32939  0157EE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 32940  0157F2  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 32941  0157F6  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 32942  0157FA  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 32943                           
 32944                           ;Port.c: 258: break;
 32945  0157FE  0012               	return	
 32946  015800                     
 32947                           ;Port.c: 261: pValue &= 1;
 32948  015800  0E01               	movlw	1
 32949  015802  0100               	movlb	0	; () banked
 32950  015804  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 32951                           
 32952                           ;Port.c: 262: pValue ^= 1;
 32953  015806  0E01               	movlw	1
 32954  015808  0100               	movlb	0	; () banked
 32955  01580A  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 32956                           
 32957                           ; BSR set to: 0
 32958                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 32959  01580C  0100               	movlb	0	; () banked
 32960  01580E  EE20 F002          	lfsr	2,2
 32961  015812  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 32962  015814  26D9               	addwf	fsr2l,f,c
 32963  015816  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 32964  015818  22DA               	addwfc	fsr2h,f,c
 32965  01581A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 32966  01581E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 32967  015822  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 32968  015826  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 32969  01582A  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 32970                           
 32971                           ;Port.c: 264: break;
 32972  01582E  0012               	return	
 32973  015830                     
 32974                           ;Port.c: 266: pValue &= 1;
 32975  015830  0E01               	movlw	1
 32976  015832  0100               	movlb	0	; () banked
 32977  015834  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 32978                           
 32979                           ; BSR set to: 0
 32980                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 32981  015836  0100               	movlb	0	; () banked
 32982  015838  EE20 F004          	lfsr	2,4
 32983  01583C  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 32984  01583E  26D9               	addwf	fsr2l,f,c
 32985  015840  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 32986  015842  22DA               	addwfc	fsr2h,f,c
 32987  015844  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 32988  015848  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 32989  01584C  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 32990  015850  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 32991  015854  ECDC  F0B8         	call	_Byte_SetBit	;wreg free
 32992                           
 32993                           ;Port.c: 269: }
 32994                           
 32995                           ;Port.c: 268: break;
 32996  015858  0012               	return	
 32997  01585A                     l427:
 32998  01585A  0100               	movlb	0	; () banked
 32999  01585C  5173               	movf	Port_SetPin@Type& (0+255),w,b
 33000                           
 33001                           ; Switch size 1, requested type "space"
 33002                           ; Number of cases is 4, Range of values is 0 to 3
 33003                           ; switch strategies available:
 33004                           ; Name         Instructions Cycles
 33005                           ; simple_byte           13     7 (average)
 33006                           ;	Chosen strategy is simple_byte
 33007  01585E  0A00               	xorlw	0	; case 0
 33008  015860  B4D8               	btfsc	status,2,c
 33009  015862  0012               	return	
 33010  015864  0A01               	xorlw	1	; case 1
 33011  015866  B4D8               	btfsc	status,2,c
 33012  015868  D7B6               	goto	l430
 33013  01586A  0A03               	xorlw	3	; case 2
 33014  01586C  B4D8               	btfsc	status,2,c
 33015  01586E  D7C8               	goto	l432
 33016  015870  0A01               	xorlw	1	; case 3
 33017  015872  A4D8               	btfss	status,2,c
 33018  015874  0012               	return	
 33019  015876  D7DC               	goto	l433
 33020  015878                     __end_of_Port_SetPin:
 33021                           	opt stack 0
 33022                           tosu	equ	0xFFF
 33023                           tosh	equ	0xFFE
 33024                           tosl	equ	0xFFD
 33025                           pclath	equ	0xFFA
 33026                           tblptru	equ	0xFF8
 33027                           tblptrh	equ	0xFF7
 33028                           tblptrl	equ	0xFF6
 33029                           tablat	equ	0xFF5
 33030                           prodh	equ	0xFF4
 33031                           prodl	equ	0xFF3
 33032                           intcon	equ	0xFF2
 33033                           postinc0	equ	0xFEE
 33034                           wreg	equ	0xFE8
 33035                           indf1	equ	0xFE7
 33036                           postdec1	equ	0xFE5
 33037                           fsr1h	equ	0xFE2
 33038                           fsr1l	equ	0xFE1
 33039                           indf2	equ	0xFDF
 33040                           postinc2	equ	0xFDE
 33041                           postdec2	equ	0xFDD
 33042                           plusw2	equ	0xFDB
 33043                           fsr2h	equ	0xFDA
 33044                           fsr2l	equ	0xFD9
 33045                           status	equ	0xFD8
 33046                           
 33047 ;; *************** function _Word_GetPair *****************
 33048 ;; Defined at:
 33049 ;;		line 156 in file "Library/Types.c"
 33050 ;; Parameters:    Size  Location     Type
 33051 ;;  pInput          2   12[BANK0 ] PTR struct Word
 33052 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 33053 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 33054 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 33055 ;;		 -> PortC(10), PortF(10), NULL(0), 
 33056 ;;  pPair           1   14[BANK0 ] unsigned char 
 33057 ;; Auto vars:     Size  Location     Type
 33058 ;;		None
 33059 ;; Return value:  Size  Location     Type
 33060 ;;                  1    wreg      unsigned char 
 33061 ;; Registers used:
 33062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33063 ;; Tracked objects:
 33064 ;;		On entry : 0/0
 33065 ;;		On exit  : 0/0
 33066 ;;		Unchanged: 0/0
 33067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33068 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33071 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33072 ;;Total ram usage:        3 bytes
 33073 ;; Hardware stack levels used:    1
 33074 ;; Hardware stack levels required when called:    9
 33075 ;; This function calls:
 33076 ;;		_Byte_GetPair
 33077 ;; This function is called by:
 33078 ;;		_Port_Init
 33079 ;;		_Port_SetPin
 33080 ;;		_Port_Set
 33081 ;;		_PortProperty_Valid
 33082 ;;		_Port_SetPair
 33083 ;;		_Port_SetQuad
 33084 ;; This function uses a non-reentrant model
 33085 ;;
 33086                           
 33087                           	psect	text159
 33088  01797E                     __ptext159:
 33089                           	opt stack 0
 33090  01797E                     _Word_GetPair:
 33091                           	opt stack 17
 33092                           
 33093                           ;Types.c: 158: if (pPair >= 4)
 33094                           
 33095                           ;incstack = 0
 33096  01797E  0E03               	movlw	3
 33097  017980  0100               	movlb	0	; () banked
 33098  017982  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 33099  017984  D012               	goto	l781
 33100                           
 33101                           ; BSR set to: 0
 33102                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 33103  017986  0E01               	movlw	1
 33104  017988  0100               	movlb	0	; () banked
 33105  01798A  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 33106  01798C  0100               	movlb	0	; () banked
 33107  01798E  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 33108  017990  0E00               	movlw	0
 33109  017992  0100               	movlb	0	; () banked
 33110  017994  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 33111  017996  0100               	movlb	0	; () banked
 33112  017998  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 33113  01799A  0100               	movlb	0	; () banked
 33114  01799C  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 33115  01799E  0FFC               	addlw	252
 33116  0179A0  0100               	movlb	0	; () banked
 33117  0179A2  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 33118  0179A4  EC2A  F0BF         	call	_Byte_GetPair	;wreg free
 33119  0179A8  0012               	return	
 33120  0179AA                     l781:
 33121                           
 33122                           ;Types.c: 160: else
 33123                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 33124  0179AA  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 33125  0179AE  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 33126  0179B2  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 33127  0179B6  EC2A  F0BF         	call	_Byte_GetPair	;wreg free
 33128  0179BA  0012               	return	
 33129  0179BC                     __end_of_Word_GetPair:
 33130                           	opt stack 0
 33131                           tosu	equ	0xFFF
 33132                           tosh	equ	0xFFE
 33133                           tosl	equ	0xFFD
 33134                           pclath	equ	0xFFA
 33135                           tblptru	equ	0xFF8
 33136                           tblptrh	equ	0xFF7
 33137                           tblptrl	equ	0xFF6
 33138                           tablat	equ	0xFF5
 33139                           prodh	equ	0xFF4
 33140                           prodl	equ	0xFF3
 33141                           intcon	equ	0xFF2
 33142                           postinc0	equ	0xFEE
 33143                           wreg	equ	0xFE8
 33144                           indf1	equ	0xFE7
 33145                           postdec1	equ	0xFE5
 33146                           fsr1h	equ	0xFE2
 33147                           fsr1l	equ	0xFE1
 33148                           indf2	equ	0xFDF
 33149                           postinc2	equ	0xFDE
 33150                           postdec2	equ	0xFDD
 33151                           plusw2	equ	0xFDB
 33152                           fsr2h	equ	0xFDA
 33153                           fsr2l	equ	0xFD9
 33154                           status	equ	0xFD8
 33155                           
 33156 ;; *************** function _Byte_GetPair *****************
 33157 ;; Defined at:
 33158 ;;		line 87 in file "Library/Types.c"
 33159 ;; Parameters:    Size  Location     Type
 33160 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 33161 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 33162 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 33163 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 33164 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 33165 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 33166 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 33167 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 33168 ;;		 -> NULL(0), 
 33169 ;;  pPair           1   11[BANK0 ] unsigned char 
 33170 ;; Auto vars:     Size  Location     Type
 33171 ;;		None
 33172 ;; Return value:  Size  Location     Type
 33173 ;;                  1    wreg      unsigned char 
 33174 ;; Registers used:
 33175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33176 ;; Tracked objects:
 33177 ;;		On entry : 0/0
 33178 ;;		On exit  : 0/0
 33179 ;;		Unchanged: 0/0
 33180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33181 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33184 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33185 ;;Total ram usage:        3 bytes
 33186 ;; Hardware stack levels used:    1
 33187 ;; Hardware stack levels required when called:    8
 33188 ;; This function calls:
 33189 ;;		_Byte_GetZone
 33190 ;; This function is called by:
 33191 ;;		_Word_GetPair
 33192 ;; This function uses a non-reentrant model
 33193 ;;
 33194                           
 33195                           	psect	text160
 33196  017E54                     __ptext160:
 33197                           	opt stack 0
 33198  017E54                     _Byte_GetPair:
 33199                           	opt stack 17
 33200                           
 33201                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 33202                           
 33203                           ;incstack = 0
 33204  017E54  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 33205  017E58  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 33206  017E5C  0E04               	movlw	4
 33207  017E5E  0100               	movlb	0	; () banked
 33208  017E60  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 33209  017E62  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 33210  017E66  0E02               	movlw	2
 33211  017E68  0100               	movlb	0	; () banked
 33212  017E6A  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 33213  017E6C  EC08  F0B2         	call	_Byte_GetZone	;wreg free
 33214  017E70  0012               	return	
 33215  017E72                     __end_of_Byte_GetPair:
 33216                           	opt stack 0
 33217                           tosu	equ	0xFFF
 33218                           tosh	equ	0xFFE
 33219                           tosl	equ	0xFFD
 33220                           pclath	equ	0xFFA
 33221                           tblptru	equ	0xFF8
 33222                           tblptrh	equ	0xFF7
 33223                           tblptrl	equ	0xFF6
 33224                           tablat	equ	0xFF5
 33225                           prodh	equ	0xFF4
 33226                           prodl	equ	0xFF3
 33227                           intcon	equ	0xFF2
 33228                           postinc0	equ	0xFEE
 33229                           wreg	equ	0xFE8
 33230                           indf1	equ	0xFE7
 33231                           postdec1	equ	0xFE5
 33232                           fsr1h	equ	0xFE2
 33233                           fsr1l	equ	0xFE1
 33234                           indf2	equ	0xFDF
 33235                           postinc2	equ	0xFDE
 33236                           postdec2	equ	0xFDD
 33237                           plusw2	equ	0xFDB
 33238                           fsr2h	equ	0xFDA
 33239                           fsr2l	equ	0xFD9
 33240                           status	equ	0xFD8
 33241                           
 33242 ;; *************** function _Byte_GetZone *****************
 33243 ;; Defined at:
 33244 ;;		line 64 in file "Library/Types.c"
 33245 ;; Parameters:    Size  Location     Type
 33246 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 33247 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 33248 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 33249 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 33250 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 33251 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 33252 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 33253 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 33254 ;;		 -> NULL(0), 
 33255 ;;  pMax            1    2[BANK0 ] unsigned char 
 33256 ;;  pChunk          1    3[BANK0 ] unsigned char 
 33257 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 33258 ;; Auto vars:     Size  Location     Type
 33259 ;;  Output          1    8[BANK0 ] unsigned char 
 33260 ;;  Offset          1    7[BANK0 ] unsigned char 
 33261 ;;  MASK            1    6[BANK0 ] unsigned char 
 33262 ;; Return value:  Size  Location     Type
 33263 ;;                  1    wreg      unsigned char 
 33264 ;; Registers used:
 33265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 33266 ;; Tracked objects:
 33267 ;;		On entry : 0/0
 33268 ;;		On exit  : 0/0
 33269 ;;		Unchanged: 0/0
 33270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33271 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33272 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33274 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33275 ;;Total ram usage:        9 bytes
 33276 ;; Hardware stack levels used:    1
 33277 ;; Hardware stack levels required when called:    7
 33278 ;; This function calls:
 33279 ;;		Nothing
 33280 ;; This function is called by:
 33281 ;;		_Byte_GetPair
 33282 ;;		_Byte_GetTriple
 33283 ;;		_Byte_GetQuad
 33284 ;; This function uses a non-reentrant model
 33285 ;;
 33286                           
 33287                           	psect	text161
 33288  016410                     __ptext161:
 33289                           	opt stack 0
 33290  016410                     _Byte_GetZone:
 33291                           	opt stack 17
 33292                           
 33293                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 33294                           
 33295                           ;incstack = 0
 33296  016410  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 33297  016414  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 33298  016418  0E00               	movlw	low (__mediumconst shr (0+16))
 33299  01641A  6EF8               	movwf	tblptru,c
 33300  01641C  0E0F               	movlw	(high __ramtop+-1)
 33301  01641E  64F7               	cpfsgt	tblptrh,c
 33302  016420  D003               	bra	u10667
 33303  016422  0008               	tblrd		*
 33304  016424  50F5               	movf	tablat,w,c
 33305  016426  D005               	bra	u10660
 33306  016428                     u10667:
 33307  016428  CFF6 FFE9          	movff	tblptrl,fsr0l
 33308  01642C  CFF7 FFEA          	movff	tblptrh,fsr0h
 33309  016430  50EF               	movf	indf0,w,c
 33310  016432                     u10660:
 33311  016432  0100               	movlb	0	; () banked
 33312  016434  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 33313                           
 33314                           ; BSR set to: 0
 33315                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 33316  016436  0100               	movlb	0	; () banked
 33317  016438  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 33318  01643A  0D01               	mullw	1
 33319  01643C  0E5B               	movlw	low _MASKS
 33320  01643E  24F3               	addwf	prodl,w,c
 33321  016440  6EF6               	movwf	tblptrl,c
 33322  016442  0EFD               	movlw	high _MASKS
 33323  016444  20F4               	addwfc	prodh,w,c
 33324  016446  6EF7               	movwf	tblptrh,c
 33325  016448                     	if	1	;There are 3 active tblptr bytes
 33326  016448  6AF8               	clrf	tblptru,c
 33327  01644A  0E00               	movlw	low (__mediumconst shr (0+16))
 33328  01644C  22F8               	addwfc	tblptru,f,c
 33329  01644E                     	endif
 33330  01644E  0008               	tblrd		*
 33331  016450  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 33332                           
 33333                           ; BSR set to: 0
 33334                           ;Types.c: 68: UINT8 Offset = 0;
 33335  016454  0E00               	movlw	0
 33336  016456  0100               	movlb	0	; () banked
 33337  016458  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 33338                           
 33339                           ;Types.c: 70: while (pChunk >= pMax)
 33340  01645A  D006               	goto	l732
 33341  01645C                     
 33342                           ; BSR set to: 0
 33343                           ;Types.c: 71: {
 33344                           ;Types.c: 72: pChunk -= pMax;
 33345                           
 33346                           ; BSR set to: 0
 33347  01645C  0100               	movlb	0	; () banked
 33348  01645E  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 33349  016460  0100               	movlb	0	; () banked
 33350  016462  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 33351                           
 33352                           ; BSR set to: 0
 33353                           ;Types.c: 73: Offset += 1;
 33354  016464  0100               	movlb	0	; () banked
 33355  016466  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 33356  016468                     l732:
 33357                           
 33358                           ; BSR set to: 0
 33359                           
 33360                           ; BSR set to: 0
 33361  016468  0100               	movlb	0	; () banked
 33362  01646A  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 33363  01646C  0100               	movlb	0	; () banked
 33364  01646E  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 33365  016470  B0D8               	btfsc	status,0,c
 33366  016472  D7F4               	goto	l733
 33367                           
 33368                           ; BSR set to: 0
 33369                           ;Types.c: 74: }
 33370                           ;Types.c: 75: pChunk *= pChunkSize;
 33371                           
 33372                           ; BSR set to: 0
 33373  016474  0100               	movlb	0	; () banked
 33374  016476  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 33375  016478  0100               	movlb	0	; () banked
 33376  01647A  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 33377  01647C  50F3               	movf	prodl,w,c
 33378  01647E  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 33379                           
 33380                           ; BSR set to: 0
 33381                           ;Types.c: 76: pChunk += Offset;
 33382  016480  0100               	movlb	0	; () banked
 33383  016482  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 33384  016484  0100               	movlb	0	; () banked
 33385  016486  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 33386                           
 33387                           ; BSR set to: 0
 33388                           ;Types.c: 78: Output >>= pChunk;
 33389  016488  0100               	movlb	0	; () banked
 33390  01648A  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 33391  01648C  0100               	movlb	0	; () banked
 33392  01648E  6F65               	movwf	??_Byte_GetZone& (0+255),b
 33393  016490  D003               	goto	u10680
 33394  016492                     u10685:
 33395  016492  0100               	movlb	0	; () banked
 33396  016494  90D8               	bcf	status,0,c
 33397  016496  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 33398  016498                     u10680:
 33399  016498  0100               	movlb	0	; () banked
 33400  01649A  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 33401  01649C  D7FA               	goto	u10685
 33402                           
 33403                           ;Types.c: 79: Output &= MASK;
 33404  01649E  0100               	movlb	0	; () banked
 33405  0164A0  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 33406  0164A2  0100               	movlb	0	; () banked
 33407  0164A4  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 33408                           
 33409                           ; BSR set to: 0
 33410                           ;Types.c: 80: return Output;
 33411  0164A6  0100               	movlb	0	; () banked
 33412  0164A8  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 33413  0164AA  0012               	return	
 33414  0164AC                     __end_of_Byte_GetZone:
 33415                           	opt stack 0
 33416                           tosu	equ	0xFFF
 33417                           tosh	equ	0xFFE
 33418                           tosl	equ	0xFFD
 33419                           pclath	equ	0xFFA
 33420                           tblptru	equ	0xFF8
 33421                           tblptrh	equ	0xFF7
 33422                           tblptrl	equ	0xFF6
 33423                           tablat	equ	0xFF5
 33424                           prodh	equ	0xFF4
 33425                           prodl	equ	0xFF3
 33426                           intcon	equ	0xFF2
 33427                           indf0	equ	0xFEF
 33428                           postinc0	equ	0xFEE
 33429                           fsr0h	equ	0xFEA
 33430                           fsr0l	equ	0xFE9
 33431                           wreg	equ	0xFE8
 33432                           indf1	equ	0xFE7
 33433                           postdec1	equ	0xFE5
 33434                           fsr1h	equ	0xFE2
 33435                           fsr1l	equ	0xFE1
 33436                           indf2	equ	0xFDF
 33437                           postinc2	equ	0xFDE
 33438                           postdec2	equ	0xFDD
 33439                           plusw2	equ	0xFDB
 33440                           fsr2h	equ	0xFDA
 33441                           fsr2l	equ	0xFD9
 33442                           status	equ	0xFD8
 33443                           
 33444 ;; *************** function _Byte_SetBit *****************
 33445 ;; Defined at:
 33446 ;;		line 32 in file "Library/Types.c"
 33447 ;; Parameters:    Size  Location     Type
 33448 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 33449 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 33450 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 33451 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 33452 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 33453 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 33454 ;;		 -> NULL(0), 
 33455 ;;  pBit            1    2[BANK0 ] unsigned char 
 33456 ;;  pValue          1    3[BANK0 ] unsigned char 
 33457 ;; Auto vars:     Size  Location     Type
 33458 ;;		None
 33459 ;; Return value:  Size  Location     Type
 33460 ;;                  1    wreg      void 
 33461 ;; Registers used:
 33462 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 33463 ;; Tracked objects:
 33464 ;;		On entry : 0/0
 33465 ;;		On exit  : 0/0
 33466 ;;		Unchanged: 0/0
 33467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33470 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33471 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33472 ;;Total ram usage:        7 bytes
 33473 ;; Hardware stack levels used:    1
 33474 ;; Hardware stack levels required when called:    7
 33475 ;; This function calls:
 33476 ;;		Nothing
 33477 ;; This function is called by:
 33478 ;;		_Port_SetPinType
 33479 ;;		_Port_SetPin
 33480 ;;		_SPI_Init
 33481 ;;		_SPI_MinSpeed
 33482 ;;		_SPI_MaxSpeed
 33483 ;;		_Word_SetBit
 33484 ;;		_I2C_Init
 33485 ;; This function uses a non-reentrant model
 33486 ;;
 33487                           
 33488                           	psect	text162
 33489  0171B8                     __ptext162:
 33490                           	opt stack 0
 33491  0171B8                     _Byte_SetBit:
 33492                           	opt stack 19
 33493                           
 33494                           ;Types.c: 34: pValue &= 1;
 33495                           
 33496                           ; BSR set to: 0
 33497                           ;incstack = 0
 33498  0171B8  0E01               	movlw	1
 33499  0171BA  0100               	movlb	0	; () banked
 33500  0171BC  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 33501                           
 33502                           ; BSR set to: 0
 33503                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 33504  0171BE  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 33505  0171C2  0E01               	movlw	1
 33506  0171C4  0100               	movlb	0	; () banked
 33507  0171C6  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 33508  0171C8  0100               	movlb	0	; () banked
 33509  0171CA  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 33510  0171CC  D003               	goto	u10734
 33511  0171CE                     u10735:
 33512  0171CE  0100               	movlb	0	; () banked
 33513  0171D0  90D8               	bcf	status,0,c
 33514  0171D2  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 33515  0171D4                     u10734:
 33516  0171D4  0100               	movlb	0	; () banked
 33517  0171D6  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 33518  0171D8  D7FA               	goto	u10735
 33519  0171DA  0100               	movlb	0	; () banked
 33520  0171DC  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 33521  0171DE  0AFF               	xorlw	255
 33522  0171E0  0100               	movlb	0	; () banked
 33523  0171E2  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 33524  0171E4  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 33525  0171E8  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 33526  0171EC  0100               	movlb	0	; () banked
 33527  0171EE  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 33528  0171F0  16DF               	andwf	indf2,f,c
 33529                           
 33530                           ; BSR set to: 0
 33531                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 33532  0171F2  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 33533  0171F6  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 33534  0171FA  0100               	movlb	0	; () banked
 33535  0171FC  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 33536  0171FE  D003               	goto	u10744
 33537  017200                     u10745:
 33538  017200  0100               	movlb	0	; () banked
 33539  017202  90D8               	bcf	status,0,c
 33540  017204  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 33541  017206                     u10744:
 33542  017206  0100               	movlb	0	; () banked
 33543  017208  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 33544  01720A  D7FA               	goto	u10745
 33545  01720C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 33546  017210  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 33547  017214  0100               	movlb	0	; () banked
 33548  017216  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 33549  017218  12DF               	iorwf	indf2,f,c
 33550                           
 33551                           ; BSR set to: 0
 33552  01721A  0012               	return		;funcret
 33553  01721C                     __end_of_Byte_SetBit:
 33554                           	opt stack 0
 33555                           tosu	equ	0xFFF
 33556                           tosh	equ	0xFFE
 33557                           tosl	equ	0xFFD
 33558                           pclath	equ	0xFFA
 33559                           tblptru	equ	0xFF8
 33560                           tblptrh	equ	0xFF7
 33561                           tblptrl	equ	0xFF6
 33562                           tablat	equ	0xFF5
 33563                           prodh	equ	0xFF4
 33564                           prodl	equ	0xFF3
 33565                           intcon	equ	0xFF2
 33566                           indf0	equ	0xFEF
 33567                           postinc0	equ	0xFEE
 33568                           fsr0h	equ	0xFEA
 33569                           fsr0l	equ	0xFE9
 33570                           wreg	equ	0xFE8
 33571                           indf1	equ	0xFE7
 33572                           postdec1	equ	0xFE5
 33573                           fsr1h	equ	0xFE2
 33574                           fsr1l	equ	0xFE1
 33575                           indf2	equ	0xFDF
 33576                           postinc2	equ	0xFDE
 33577                           postdec2	equ	0xFDD
 33578                           plusw2	equ	0xFDB
 33579                           fsr2h	equ	0xFDA
 33580                           fsr2l	equ	0xFD9
 33581                           status	equ	0xFD8
 33582                           
 33583 ;; *************** function _Port_GetPin *****************
 33584 ;; Defined at:
 33585 ;;		line 271 in file "Library/Port.c"
 33586 ;; Parameters:    Size  Location     Type
 33587 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 33588 ;;		 -> PortB(10), PortE(10), PortC(10), 
 33589 ;;  pPin            1    2[BANK0 ] enum E6750
 33590 ;; Auto vars:     Size  Location     Type
 33591 ;;  Output          1    5[BANK0 ] unsigned char 
 33592 ;; Return value:  Size  Location     Type
 33593 ;;                  1    wreg      unsigned char 
 33594 ;; Registers used:
 33595 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 33596 ;; Tracked objects:
 33597 ;;		On entry : 0/0
 33598 ;;		On exit  : 0/0
 33599 ;;		Unchanged: 0/0
 33600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33601 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33603 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33604 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33605 ;;Total ram usage:        6 bytes
 33606 ;; Hardware stack levels used:    1
 33607 ;; Hardware stack levels required when called:    7
 33608 ;; This function calls:
 33609 ;;		Nothing
 33610 ;; This function is called by:
 33611 ;;		_Port_TogglePin
 33612 ;;		_HMI_LeftSwitch
 33613 ;;		_HMI_RightSwitch
 33614 ;;		_HMI_UpSwitch
 33615 ;;		_HMI_DownSwitch
 33616 ;;		_MXK_TestButton
 33617 ;; This function uses a non-reentrant model
 33618 ;;
 33619                           
 33620                           	psect	text163
 33621  01777A                     __ptext163:
 33622                           	opt stack 0
 33623  01777A                     _Port_GetPin:
 33624                           	opt stack 19
 33625                           
 33626                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 33627                           
 33628                           ; BSR set to: 0
 33629                           ;incstack = 0
 33630  01777A  0100               	movlb	0	; () banked
 33631  01777C  EE20 F006          	lfsr	2,6
 33632  017780  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 33633  017782  26D9               	addwf	fsr2l,f,c
 33634  017784  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 33635  017786  22DA               	addwfc	fsr2h,f,c
 33636  017788  CFDE F063          	movff	postinc2,??_Port_GetPin
 33637  01778C  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 33638  017790  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 33639  017794  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 33640  017798  50DF               	movf	indf2,w,c
 33641  01779A  0100               	movlb	0	; () banked
 33642  01779C  6F65               	movwf	Port_GetPin@Output& (0+255),b
 33643                           
 33644                           ; BSR set to: 0
 33645                           ;Port.c: 274: Output >>= (UINT8)pPin;
 33646  01779E  0100               	movlb	0	; () banked
 33647  0177A0  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 33648  0177A2  0100               	movlb	0	; () banked
 33649  0177A4  6F63               	movwf	??_Port_GetPin& (0+255),b
 33650  0177A6  D003               	goto	u10790
 33651  0177A8                     u10795:
 33652  0177A8  0100               	movlb	0	; () banked
 33653  0177AA  90D8               	bcf	status,0,c
 33654  0177AC  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 33655  0177AE                     u10790:
 33656  0177AE  0100               	movlb	0	; () banked
 33657  0177B0  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 33658  0177B2  D7FA               	goto	u10795
 33659                           
 33660                           ;Port.c: 275: Output &= 1;
 33661  0177B4  0E01               	movlw	1
 33662  0177B6  0100               	movlb	0	; () banked
 33663  0177B8  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 33664                           
 33665                           ; BSR set to: 0
 33666                           ;Port.c: 276: return Output;
 33667  0177BA  0100               	movlb	0	; () banked
 33668  0177BC  5165               	movf	Port_GetPin@Output& (0+255),w,b
 33669  0177BE  0012               	return	
 33670  0177C0                     __end_of_Port_GetPin:
 33671                           	opt stack 0
 33672                           tosu	equ	0xFFF
 33673                           tosh	equ	0xFFE
 33674                           tosl	equ	0xFFD
 33675                           pclath	equ	0xFFA
 33676                           tblptru	equ	0xFF8
 33677                           tblptrh	equ	0xFF7
 33678                           tblptrl	equ	0xFF6
 33679                           tablat	equ	0xFF5
 33680                           prodh	equ	0xFF4
 33681                           prodl	equ	0xFF3
 33682                           intcon	equ	0xFF2
 33683                           indf0	equ	0xFEF
 33684                           postinc0	equ	0xFEE
 33685                           fsr0h	equ	0xFEA
 33686                           fsr0l	equ	0xFE9
 33687                           wreg	equ	0xFE8
 33688                           indf1	equ	0xFE7
 33689                           postdec1	equ	0xFE5
 33690                           fsr1h	equ	0xFE2
 33691                           fsr1l	equ	0xFE1
 33692                           indf2	equ	0xFDF
 33693                           postinc2	equ	0xFDE
 33694                           postdec2	equ	0xFDD
 33695                           plusw2	equ	0xFDB
 33696                           fsr2h	equ	0xFDA
 33697                           fsr2l	equ	0xFD9
 33698                           status	equ	0xFD8
 33699                           
 33700 ;; *************** function _HMI_SetBar *****************
 33701 ;; Defined at:
 33702 ;;		line 205 in file "HMI.c"
 33703 ;; Parameters:    Size  Location     Type
 33704 ;;  pValue          1    wreg     unsigned char 
 33705 ;; Auto vars:     Size  Location     Type
 33706 ;;  pValue          1    0[BANK0 ] unsigned char 
 33707 ;; Return value:  Size  Location     Type
 33708 ;;                  1    wreg      void 
 33709 ;; Registers used:
 33710 ;;		wreg
 33711 ;; Tracked objects:
 33712 ;;		On entry : 0/0
 33713 ;;		On exit  : 0/0
 33714 ;;		Unchanged: 0/0
 33715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33719 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33720 ;;Total ram usage:        1 bytes
 33721 ;; Hardware stack levels used:    1
 33722 ;; Hardware stack levels required when called:    7
 33723 ;; This function calls:
 33724 ;;		Nothing
 33725 ;; This function is called by:
 33726 ;;		_Event_DIPSwitch
 33727 ;;		_Event_HMI_DIPSwitch
 33728 ;;		_Event_HMI_LeftButton
 33729 ;;		_Event_HMI_RightButton
 33730 ;; This function uses a non-reentrant model
 33731 ;;
 33732                           
 33733                           	psect	text164
 33734  0180B0                     __ptext164:
 33735                           	opt stack 0
 33736  0180B0                     _HMI_SetBar:
 33737                           	opt stack 19
 33738                           
 33739                           ; BSR set to: 0
 33740                           ;incstack = 0
 33741                           ;HMI_SetBar@pValue stored from wreg
 33742  0180B0  0100               	movlb	0	; () banked
 33743  0180B2  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 33744                           
 33745                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 33746  0180B4  C060  F346         	movff	HMI_SetBar@pValue,_HMIBoard+7
 33747  0180B8  0012               	return		;funcret
 33748  0180BA                     __end_of_HMI_SetBar:
 33749                           	opt stack 0
 33750                           tosu	equ	0xFFF
 33751                           tosh	equ	0xFFE
 33752                           tosl	equ	0xFFD
 33753                           pclath	equ	0xFFA
 33754                           tblptru	equ	0xFF8
 33755                           tblptrh	equ	0xFF7
 33756                           tblptrl	equ	0xFF6
 33757                           tablat	equ	0xFF5
 33758                           prodh	equ	0xFF4
 33759                           prodl	equ	0xFF3
 33760                           intcon	equ	0xFF2
 33761                           indf0	equ	0xFEF
 33762                           postinc0	equ	0xFEE
 33763                           fsr0h	equ	0xFEA
 33764                           fsr0l	equ	0xFE9
 33765                           wreg	equ	0xFE8
 33766                           indf1	equ	0xFE7
 33767                           postdec1	equ	0xFE5
 33768                           fsr1h	equ	0xFE2
 33769                           fsr1l	equ	0xFE1
 33770                           indf2	equ	0xFDF
 33771                           postinc2	equ	0xFDE
 33772                           postdec2	equ	0xFDD
 33773                           plusw2	equ	0xFDB
 33774                           fsr2h	equ	0xFDA
 33775                           fsr2l	equ	0xFD9
 33776                           status	equ	0xFD8
 33777                           
 33778 ;; *************** function _HMI_GetBar *****************
 33779 ;; Defined at:
 33780 ;;		line 209 in file "HMI.c"
 33781 ;; Parameters:    Size  Location     Type
 33782 ;;		None
 33783 ;; Auto vars:     Size  Location     Type
 33784 ;;		None
 33785 ;; Return value:  Size  Location     Type
 33786 ;;                  1    wreg      unsigned char 
 33787 ;; Registers used:
 33788 ;;		wreg, status,2
 33789 ;; Tracked objects:
 33790 ;;		On entry : 0/0
 33791 ;;		On exit  : 0/0
 33792 ;;		Unchanged: 0/0
 33793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33798 ;;Total ram usage:        0 bytes
 33799 ;; Hardware stack levels used:    1
 33800 ;; Hardware stack levels required when called:    7
 33801 ;; This function calls:
 33802 ;;		Nothing
 33803 ;; This function is called by:
 33804 ;;		_Event_DIPSwitch
 33805 ;;		_Event_HMI_DIPSwitch
 33806 ;; This function uses a non-reentrant model
 33807 ;;
 33808                           
 33809                           	psect	text165
 33810  0180E4                     __ptext165:
 33811                           	opt stack 0
 33812  0180E4                     _HMI_GetBar:
 33813                           	opt stack 19
 33814                           
 33815                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 33816                           
 33817                           ;incstack = 0
 33818  0180E4  0103               	movlb	3	; () banked
 33819  0180E6  5146               	movf	(_HMIBoard+7)& (0+255),w,b
 33820  0180E8  0012               	return	
 33821  0180EA                     __end_of_HMI_GetBar:
 33822                           	opt stack 0
 33823                           tosu	equ	0xFFF
 33824                           tosh	equ	0xFFE
 33825                           tosl	equ	0xFFD
 33826                           pclath	equ	0xFFA
 33827                           tblptru	equ	0xFF8
 33828                           tblptrh	equ	0xFF7
 33829                           tblptrl	equ	0xFF6
 33830                           tablat	equ	0xFF5
 33831                           prodh	equ	0xFF4
 33832                           prodl	equ	0xFF3
 33833                           intcon	equ	0xFF2
 33834                           indf0	equ	0xFEF
 33835                           postinc0	equ	0xFEE
 33836                           fsr0h	equ	0xFEA
 33837                           fsr0l	equ	0xFE9
 33838                           wreg	equ	0xFE8
 33839                           indf1	equ	0xFE7
 33840                           postdec1	equ	0xFE5
 33841                           fsr1h	equ	0xFE2
 33842                           fsr1l	equ	0xFE1
 33843                           indf2	equ	0xFDF
 33844                           postinc2	equ	0xFDE
 33845                           postdec2	equ	0xFDD
 33846                           plusw2	equ	0xFDB
 33847                           fsr2h	equ	0xFDA
 33848                           fsr2l	equ	0xFD9
 33849                           status	equ	0xFD8
 33850                           
 33851 ;; *************** function _ISR_Function *****************
 33852 ;; Defined at:
 33853 ;;		line 38 in file "Library/ISR.c"
 33854 ;; Parameters:    Size  Location     Type
 33855 ;;		None
 33856 ;; Auto vars:     Size  Location     Type
 33857 ;;		None
 33858 ;; Return value:  Size  Location     Type
 33859 ;;                  1    wreg      void 
 33860 ;; Registers used:
 33861 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33862 ;; Tracked objects:
 33863 ;;		On entry : 0/0
 33864 ;;		On exit  : 0/0
 33865 ;;		Unchanged: 0/0
 33866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33869 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33870 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33871 ;;Total ram usage:       18 bytes
 33872 ;; Hardware stack levels used:    1
 33873 ;; Hardware stack levels required when called:    6
 33874 ;; This function calls:
 33875 ;;		_Timer0_ISR
 33876 ;; This function is called by:
 33877 ;;		Interrupt level 2
 33878 ;; This function uses a non-reentrant model
 33879 ;;
 33880                           
 33881                           	psect	intcode
 33882  001408                     __pintcode:
 33883                           	opt stack 0
 33884  001408                     _ISR_Function:
 33885                           	opt stack 13
 33886                           
 33887                           ; BSR set to: 3
 33888                           ;incstack = 0
 33889  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 33890  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 33891  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 33892  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 33893  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 33894  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 33895  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 33896  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 33897  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 33898  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 33899  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 33900  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 33901  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 33902  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 33903  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 33904  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 33905  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 33906  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 33907  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 33908                           
 33909                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 33910  001452  92F2               	bcf	intcon,1,c	;volatile
 33911                           
 33912                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 33913  001454  B4F2               	btfsc	intcon,2,c	;volatile
 33914  001456  AAF2               	btfss	intcon,5,c	;volatile
 33915  001458  D002               	goto	i2l1590
 33916                           
 33917                           ;ISR.c: 68: Timer0_ISR();
 33918  00145A  EC16  F0BE         	call	_Timer0_ISR	;wreg free
 33919  00145E                     i2l1590:
 33920  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 33921  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 33922  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 33923  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 33924  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 33925  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 33926  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 33927  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 33928  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 33929  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 33930  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 33931  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 33932  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 33933  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 33934  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 33935  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 33936  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 33937  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 33938  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 33939  0014A8  0011               	retfie		f
 33940  0014AA                     __end_of_ISR_Function:
 33941                           	opt stack 0
 33942                           tosu	equ	0xFFF
 33943                           tosh	equ	0xFFE
 33944                           tosl	equ	0xFFD
 33945                           pclatu	equ	0xFFB
 33946                           pclath	equ	0xFFA
 33947                           tblptru	equ	0xFF8
 33948                           tblptrh	equ	0xFF7
 33949                           tblptrl	equ	0xFF6
 33950                           tablat	equ	0xFF5
 33951                           prodh	equ	0xFF4
 33952                           prodl	equ	0xFF3
 33953                           intcon	equ	0xFF2
 33954                           indf0	equ	0xFEF
 33955                           postinc0	equ	0xFEE
 33956                           fsr0h	equ	0xFEA
 33957                           fsr0l	equ	0xFE9
 33958                           wreg	equ	0xFE8
 33959                           indf1	equ	0xFE7
 33960                           postdec1	equ	0xFE5
 33961                           fsr1h	equ	0xFE2
 33962                           fsr1l	equ	0xFE1
 33963                           indf2	equ	0xFDF
 33964                           postinc2	equ	0xFDE
 33965                           postdec2	equ	0xFDD
 33966                           plusw2	equ	0xFDB
 33967                           fsr2h	equ	0xFDA
 33968                           fsr2l	equ	0xFD9
 33969                           status	equ	0xFD8
 33970                           
 33971 ;; *************** function _Timer0_ISR *****************
 33972 ;; Defined at:
 33973 ;;		line 94 in file "Library/Timer0.c"
 33974 ;; Parameters:    Size  Location     Type
 33975 ;;		None
 33976 ;; Auto vars:     Size  Location     Type
 33977 ;;		None
 33978 ;; Return value:  Size  Location     Type
 33979 ;;                  1    wreg      void 
 33980 ;; Registers used:
 33981 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33982 ;; Tracked objects:
 33983 ;;		On entry : 0/0
 33984 ;;		On exit  : 0/0
 33985 ;;		Unchanged: 0/0
 33986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33991 ;;Total ram usage:        0 bytes
 33992 ;; Hardware stack levels used:    1
 33993 ;; Hardware stack levels required when called:    5
 33994 ;; This function calls:
 33995 ;;		Absolute function
 33996 ;;		i2_Motor_Step
 33997 ;;		i2_Timer0_Stop
 33998 ;; This function is called by:
 33999 ;;		_ISR_Function
 34000 ;; This function uses a non-reentrant model
 34001 ;;
 34002                           
 34003                           	psect	text167
 34004  017C2C                     __ptext167:
 34005                           	opt stack 0
 34006  017C2C                     _Timer0_ISR:
 34007                           	opt stack 13
 34008                           
 34009                           ;Timer0.c: 96: Timer0_Stop();
 34010                           
 34011                           ;incstack = 0
 34012  017C2C  EC75  F0C0         	call	i2_Timer0_Stop	;wreg free
 34013                           
 34014                           ;Timer0.c: 99: if (gISR != 0)
 34015  017C30  0103               	movlb	3	; () banked
 34016  017C32  5114               	movf	_gISR& (0+255),w,b
 34017  017C34  0103               	movlb	3	; () banked
 34018  017C36  1115               	iorwf	(_gISR+1)& (0+255),w,b
 34019  017C38  0103               	movlb	3	; () banked
 34020  017C3A  1116               	iorwf	(_gISR+2)& (0+255),w,b
 34021  017C3C  B4D8               	btfsc	status,2,c
 34022  017C3E  0012               	return	
 34023                           
 34024                           ; BSR set to: 3
 34025                           ;Timer0.c: 100: gISR();
 34026  017C40  D801               	call	i2u1631_48
 34027  017C42  0012               	return	
 34028  017C44                     i2u1631_48:
 34029  017C44  0005               	push	
 34030  017C46  6EFA               	movwf	pclath,c
 34031  017C48  0103               	movlb	3	; () banked
 34032  017C4A  5114               	movf	_gISR& (0+255),w,b
 34033  017C4C  6EFD               	movwf	tosl,c
 34034  017C4E  5115               	movf	(_gISR+1)& (0+255),w,b
 34035  017C50  6EFE               	movwf	tosh,c
 34036  017C52  5116               	movf	(_gISR+2)& (0+255),w,b
 34037  017C54  6EFF               	movwf	tosu,c
 34038  017C56  50FA               	movf	pclath,w,c
 34039  017C58  0012               	return		;indir
 34040  017C5A                     __end_of_Timer0_ISR:
 34041                           	opt stack 0
 34042                           tosu	equ	0xFFF
 34043                           tosh	equ	0xFFE
 34044                           tosl	equ	0xFFD
 34045                           pclatu	equ	0xFFB
 34046                           pclath	equ	0xFFA
 34047                           tblptru	equ	0xFF8
 34048                           tblptrh	equ	0xFF7
 34049                           tblptrl	equ	0xFF6
 34050                           tablat	equ	0xFF5
 34051                           prodh	equ	0xFF4
 34052                           prodl	equ	0xFF3
 34053                           intcon	equ	0xFF2
 34054                           indf0	equ	0xFEF
 34055                           postinc0	equ	0xFEE
 34056                           fsr0h	equ	0xFEA
 34057                           fsr0l	equ	0xFE9
 34058                           wreg	equ	0xFE8
 34059                           indf1	equ	0xFE7
 34060                           postdec1	equ	0xFE5
 34061                           fsr1h	equ	0xFE2
 34062                           fsr1l	equ	0xFE1
 34063                           indf2	equ	0xFDF
 34064                           postinc2	equ	0xFDE
 34065                           postdec2	equ	0xFDD
 34066                           plusw2	equ	0xFDB
 34067                           fsr2h	equ	0xFDA
 34068                           fsr2l	equ	0xFD9
 34069                           status	equ	0xFD8
 34070                           
 34071 ;; *************** function i2_Motor_Step *****************
 34072 ;; Defined at:
 34073 ;;		line 75 in file "Library/Motor.c"
 34074 ;; Parameters:    Size  Location     Type
 34075 ;;		None
 34076 ;; Auto vars:     Size  Location     Type
 34077 ;;		None
 34078 ;; Return value:  Size  Location     Type
 34079 ;;                  1    wreg      void 
 34080 ;; Registers used:
 34081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34082 ;; Tracked objects:
 34083 ;;		On entry : 0/0
 34084 ;;		On exit  : 0/0
 34085 ;;		Unchanged: 0/0
 34086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34089 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34090 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34091 ;;Total ram usage:        2 bytes
 34092 ;; Hardware stack levels used:    1
 34093 ;; Hardware stack levels required when called:    4
 34094 ;; This function calls:
 34095 ;;		i2_MXK_Queue
 34096 ;;		i2_MXK_Release
 34097 ;;		i2_MXK_SwitchTo
 34098 ;;		i2_Port_SetPin
 34099 ;;		i2_Timer0_Restart
 34100 ;;		i2_Timer0_Stop
 34101 ;; This function is called by:
 34102 ;; This function uses a non-reentrant model
 34103 ;;
 34104                           
 34105                           	psect	text168
 34106  0150BA                     __ptext168:
 34107                           	opt stack 0
 34108  0150BA                     i2_Motor_Step:
 34109                           	opt stack 13
 34110                           
 34111                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 34112                           
 34113                           ;incstack = 0
 34114  0150BA  0100               	movlb	0	; () banked
 34115  0150BC  EE20 F004          	lfsr	2,4
 34116  0150C0  51EA               	movf	_lMotor& (0+255),w,b
 34117  0150C2  26D9               	addwf	fsr2l,f,c
 34118  0150C4  51EB               	movf	(_lMotor+1)& (0+255),w,b
 34119  0150C6  22DA               	addwfc	fsr2h,f,c
 34120  0150C8  50DF               	movf	indf2,w,c
 34121  0150CA  EC4F  F0BD         	call	i2_MXK_SwitchTo
 34122  0150CE  0900               	iorlw	0
 34123  0150D0  B4D8               	btfsc	status,2,c
 34124  0150D2  D06A               	goto	i2l1627
 34125                           
 34126                           ;Motor.c: 78: {
 34127                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 34128  0150D4  C0EA  FFD9         	movff	_lMotor,fsr2l
 34129  0150D8  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34130  0150DC  50DE               	movf	postinc2,w,c
 34131  0150DE  10DE               	iorwf	postinc2,w,c
 34132  0150E0  B4D8               	btfsc	status,2,c
 34133  0150E2  D05D               	goto	i2l1628
 34134                           
 34135                           ;Motor.c: 80: {
 34136                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 34137  0150E4  C0EA  FFD9         	movff	_lMotor,fsr2l
 34138  0150E8  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34139  0150EC  0E01               	movlw	1
 34140  0150EE  BEDB               	btfsc	plusw2,7,c
 34141  0150F0  D022               	goto	i2l1629
 34142  0150F2  0E01               	movlw	1
 34143  0150F4  50DB               	movf	plusw2,w,c
 34144  0150F6  E103               	bnz	i2u913_40
 34145  0150F8  04DE               	decf	postinc2,w,c
 34146  0150FA  A0D8               	btfss	status,0,c
 34147  0150FC  D01C               	goto	i2l1629
 34148  0150FE                     i2u913_40:
 34149                           
 34150                           ;Motor.c: 83: {
 34151                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 34152  0150FE  C0EA  FFD9         	movff	_lMotor,fsr2l
 34153  015102  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34154  015106  28DE               	incf	postinc2,w,c
 34155  015108  E104               	bnz	i2u914_40
 34156  01510A  0E7F               	movlw	127
 34157  01510C  18DE               	xorwf	postinc2,w,c
 34158  01510E  B4D8               	btfsc	status,2,c
 34159  015110  D007               	goto	i2l1630
 34160  015112                     i2u914_40:
 34161                           
 34162                           ;Motor.c: 85: lMotor->mDelta --;
 34163  015112  C0EA  FFD9         	movff	_lMotor,fsr2l
 34164  015116  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34165  01511A  06DE               	decf	postinc2,f,c
 34166  01511C  0E00               	movlw	0
 34167  01511E  5ADD               	subwfb	postdec2,f,c
 34168  015120                     i2l1630:
 34169                           
 34170                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 34171  015120  0E8F               	movlw	low _PortE
 34172  015122  6E10               	movwf	i2Port_SetPin@pInput,c
 34173  015124  0E03               	movlw	high _PortE
 34174  015126  6E11               	movwf	i2Port_SetPin@pInput+1,c
 34175  015128  0E00               	movlw	0
 34176  01512A  6E12               	movwf	i2Port_SetPin@pPin,c
 34177  01512C  0E01               	movlw	1
 34178  01512E  6E13               	movwf	i2Port_SetPin@pValue,c
 34179  015130  EC74  F0AF         	call	i2_Port_SetPin	;wreg free
 34180                           
 34181                           ;Motor.c: 88: }
 34182  015134  D01B               	goto	i2l1631
 34183  015136                     i2l1629:
 34184                           
 34185                           ;Motor.c: 89: else
 34186                           ;Motor.c: 90: {
 34187                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 34188  015136  C0EA  FFD9         	movff	_lMotor,fsr2l
 34189  01513A  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34190  01513E  04DE               	decf	postinc2,w,c
 34191  015140  E104               	bnz	i2u915_40
 34192  015142  0E80               	movlw	128
 34193  015144  18DE               	xorwf	postinc2,w,c
 34194  015146  B4D8               	btfsc	status,2,c
 34195  015148  D007               	goto	i2l1632
 34196  01514A                     i2u915_40:
 34197                           
 34198                           ;Motor.c: 92: lMotor->mDelta ++;
 34199  01514A  C0EA  FFD9         	movff	_lMotor,fsr2l
 34200  01514E  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34201  015152  2ADE               	incf	postinc2,f,c
 34202  015154  0E00               	movlw	0
 34203  015156  22DD               	addwfc	postdec2,f,c
 34204  015158                     i2l1632:
 34205                           
 34206                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 34207  015158  0E8F               	movlw	low _PortE
 34208  01515A  6E10               	movwf	i2Port_SetPin@pInput,c
 34209  01515C  0E03               	movlw	high _PortE
 34210  01515E  6E11               	movwf	i2Port_SetPin@pInput+1,c
 34211  015160  0E00               	movlw	0
 34212  015162  6E12               	movwf	i2Port_SetPin@pPin,c
 34213  015164  0E00               	movlw	0
 34214  015166  6E13               	movwf	i2Port_SetPin@pValue,c
 34215  015168  EC74  F0AF         	call	i2_Port_SetPin	;wreg free
 34216  01516C                     i2l1631:
 34217                           
 34218                           ;Motor.c: 95: }
 34219                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 34220  01516C  0E8F               	movlw	low _PortE
 34221  01516E  6E10               	movwf	i2Port_SetPin@pInput,c
 34222  015170  0E03               	movlw	high _PortE
 34223  015172  6E11               	movwf	i2Port_SetPin@pInput+1,c
 34224  015174  0E01               	movlw	1
 34225  015176  6E12               	movwf	i2Port_SetPin@pPin,c
 34226  015178  0E01               	movlw	1
 34227  01517A  6E13               	movwf	i2Port_SetPin@pValue,c
 34228  01517C  EC74  F0AF         	call	i2_Port_SetPin	;wreg free
 34229                           
 34230                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 34231  015180  0E8F               	movlw	low _PortE
 34232  015182  6E10               	movwf	i2Port_SetPin@pInput,c
 34233  015184  0E03               	movlw	high _PortE
 34234  015186  6E11               	movwf	i2Port_SetPin@pInput+1,c
 34235  015188  0E01               	movlw	1
 34236  01518A  6E12               	movwf	i2Port_SetPin@pPin,c
 34237  01518C  0E00               	movlw	0
 34238  01518E  6E13               	movwf	i2Port_SetPin@pValue,c
 34239  015190  EC74  F0AF         	call	i2_Port_SetPin	;wreg free
 34240                           
 34241                           ;Motor.c: 101: MXK_Release();
 34242  015194  EC78  F0C0         	call	i2_MXK_Release	;wreg free
 34243                           
 34244                           ;Motor.c: 102: Timer0_Restart();
 34245  015198  EC4D  F0C0         	call	i2_Timer0_Restart	;wreg free
 34246                           
 34247                           ;Motor.c: 103: return;
 34248  01519C  0012               	return	
 34249  01519E                     i2l1628:
 34250                           
 34251                           ;Motor.c: 104: }
 34252                           ;Motor.c: 105: MXK_Release();
 34253  01519E  EC78  F0C0         	call	i2_MXK_Release	;wreg free
 34254                           
 34255                           ;Motor.c: 106: Timer0_Stop();
 34256  0151A2  EC75  F0C0         	call	i2_Timer0_Stop	;wreg free
 34257                           
 34258                           ;Motor.c: 107: return;
 34259  0151A6  0012               	return	
 34260  0151A8                     i2l1627:
 34261                           
 34262                           ;Motor.c: 108: }
 34263                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 34264  0151A8  C317  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 34265  0151AC  C318  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 34266  0151B0  C319  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 34267  0151B4  EC34  F0C0         	call	i2_MXK_Queue	;wreg free
 34268  0151B8  0012               	return		;funcret
 34269  0151BA                     __end_ofi2_Motor_Step:
 34270                           	opt stack 0
 34271                           tosu	equ	0xFFF
 34272                           tosh	equ	0xFFE
 34273                           tosl	equ	0xFFD
 34274                           pclatu	equ	0xFFB
 34275                           pclath	equ	0xFFA
 34276                           tblptru	equ	0xFF8
 34277                           tblptrh	equ	0xFF7
 34278                           tblptrl	equ	0xFF6
 34279                           tablat	equ	0xFF5
 34280                           prodh	equ	0xFF4
 34281                           prodl	equ	0xFF3
 34282                           intcon	equ	0xFF2
 34283                           indf0	equ	0xFEF
 34284                           postinc0	equ	0xFEE
 34285                           fsr0h	equ	0xFEA
 34286                           fsr0l	equ	0xFE9
 34287                           wreg	equ	0xFE8
 34288                           indf1	equ	0xFE7
 34289                           postdec1	equ	0xFE5
 34290                           fsr1h	equ	0xFE2
 34291                           fsr1l	equ	0xFE1
 34292                           indf2	equ	0xFDF
 34293                           postinc2	equ	0xFDE
 34294                           postdec2	equ	0xFDD
 34295                           plusw2	equ	0xFDB
 34296                           fsr2h	equ	0xFDA
 34297                           fsr2l	equ	0xFD9
 34298                           status	equ	0xFD8
 34299                           
 34300 ;; *************** function i2_Timer0_Stop *****************
 34301 ;; Defined at:
 34302 ;;		line 89 in file "Library/Timer0.c"
 34303 ;; Parameters:    Size  Location     Type
 34304 ;;		None
 34305 ;; Auto vars:     Size  Location     Type
 34306 ;;		None
 34307 ;; Return value:  Size  Location     Type
 34308 ;;                  1    wreg      void 
 34309 ;; Registers used:
 34310 ;;		None
 34311 ;; Tracked objects:
 34312 ;;		On entry : 0/0
 34313 ;;		On exit  : 0/0
 34314 ;;		Unchanged: 0/0
 34315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34320 ;;Total ram usage:        0 bytes
 34321 ;; Hardware stack levels used:    1
 34322 ;; This function calls:
 34323 ;;		Nothing
 34324 ;; This function is called by:
 34325 ;;		_Timer0_ISR
 34326 ;;		i2_Motor_Step
 34327 ;; This function uses a non-reentrant model
 34328 ;;
 34329                           
 34330                           	psect	text169
 34331  0180EA                     __ptext169:
 34332                           	opt stack 0
 34333  0180EA                     i2_Timer0_Stop:
 34334                           	opt stack 17
 34335                           
 34336                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 34337                           
 34338                           ;incstack = 0
 34339  0180EA  9AF2               	bcf	intcon,5,c	;volatile
 34340                           
 34341                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 34342  0180EC  94F2               	bcf	intcon,2,c	;volatile
 34343  0180EE  0012               	return		;funcret
 34344  0180F0                     __end_ofi2_Timer0_Stop:
 34345                           	opt stack 0
 34346                           tosu	equ	0xFFF
 34347                           tosh	equ	0xFFE
 34348                           tosl	equ	0xFFD
 34349                           pclatu	equ	0xFFB
 34350                           pclath	equ	0xFFA
 34351                           tblptru	equ	0xFF8
 34352                           tblptrh	equ	0xFF7
 34353                           tblptrl	equ	0xFF6
 34354                           tablat	equ	0xFF5
 34355                           prodh	equ	0xFF4
 34356                           prodl	equ	0xFF3
 34357                           intcon	equ	0xFF2
 34358                           indf0	equ	0xFEF
 34359                           postinc0	equ	0xFEE
 34360                           fsr0h	equ	0xFEA
 34361                           fsr0l	equ	0xFE9
 34362                           wreg	equ	0xFE8
 34363                           indf1	equ	0xFE7
 34364                           postdec1	equ	0xFE5
 34365                           fsr1h	equ	0xFE2
 34366                           fsr1l	equ	0xFE1
 34367                           indf2	equ	0xFDF
 34368                           postinc2	equ	0xFDE
 34369                           postdec2	equ	0xFDD
 34370                           plusw2	equ	0xFDB
 34371                           fsr2h	equ	0xFDA
 34372                           fsr2l	equ	0xFD9
 34373                           status	equ	0xFD8
 34374                           
 34375 ;; *************** function i2_Timer0_Restart *****************
 34376 ;; Defined at:
 34377 ;;		line 83 in file "Library/Timer0.c"
 34378 ;; Parameters:    Size  Location     Type
 34379 ;;		None
 34380 ;; Auto vars:     Size  Location     Type
 34381 ;;		None
 34382 ;; Return value:  Size  Location     Type
 34383 ;;                  1    wreg      void 
 34384 ;; Registers used:
 34385 ;;		None
 34386 ;; Tracked objects:
 34387 ;;		On entry : 0/0
 34388 ;;		On exit  : 0/0
 34389 ;;		Unchanged: 0/0
 34390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34395 ;;Total ram usage:        0 bytes
 34396 ;; Hardware stack levels used:    1
 34397 ;; This function calls:
 34398 ;;		Nothing
 34399 ;; This function is called by:
 34400 ;;		i2_Motor_Step
 34401 ;; This function uses a non-reentrant model
 34402 ;;
 34403                           
 34404                           	psect	text170
 34405  01809A                     __ptext170:
 34406                           	opt stack 0
 34407  01809A                     i2_Timer0_Restart:
 34408                           	opt stack 16
 34409                           
 34410                           ;Timer0.c: 85: TMR0 = COUNTER;
 34411                           
 34412                           ;incstack = 0
 34413  01809A  C02F  FFD6         	movff	_COUNTER,4054	;volatile
 34414  01809E  C030  FFD7         	movff	_COUNTER+1,4055	;volatile
 34415                           
 34416                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 34417  0180A2  8AF2               	bsf	intcon,5,c	;volatile
 34418  0180A4  0012               	return		;funcret
 34419  0180A6                     __end_ofi2_Timer0_Restart:
 34420                           	opt stack 0
 34421                           tosu	equ	0xFFF
 34422                           tosh	equ	0xFFE
 34423                           tosl	equ	0xFFD
 34424                           pclatu	equ	0xFFB
 34425                           pclath	equ	0xFFA
 34426                           tblptru	equ	0xFF8
 34427                           tblptrh	equ	0xFF7
 34428                           tblptrl	equ	0xFF6
 34429                           tablat	equ	0xFF5
 34430                           prodh	equ	0xFF4
 34431                           prodl	equ	0xFF3
 34432                           intcon	equ	0xFF2
 34433                           indf0	equ	0xFEF
 34434                           postinc0	equ	0xFEE
 34435                           fsr0h	equ	0xFEA
 34436                           fsr0l	equ	0xFE9
 34437                           wreg	equ	0xFE8
 34438                           indf1	equ	0xFE7
 34439                           postdec1	equ	0xFE5
 34440                           fsr1h	equ	0xFE2
 34441                           fsr1l	equ	0xFE1
 34442                           indf2	equ	0xFDF
 34443                           postinc2	equ	0xFDE
 34444                           postdec2	equ	0xFDD
 34445                           plusw2	equ	0xFDB
 34446                           fsr2h	equ	0xFDA
 34447                           fsr2l	equ	0xFD9
 34448                           status	equ	0xFD8
 34449                           
 34450 ;; *************** function i2_Port_SetPin *****************
 34451 ;; Defined at:
 34452 ;;		line 247 in file "Library/Port.c"
 34453 ;; Parameters:    Size  Location     Type
 34454 ;;  pInput          2   15[COMRAM] const PTR struct Port
 34455 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 34456 ;;  pPin            1   17[COMRAM] enum E6750
 34457 ;;  pValue          1   18[COMRAM] unsigned char 
 34458 ;; Auto vars:     Size  Location     Type
 34459 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 34460 ;; Return value:  Size  Location     Type
 34461 ;;                  1    wreg      void 
 34462 ;; Registers used:
 34463 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34464 ;; Tracked objects:
 34465 ;;		On entry : 0/0
 34466 ;;		On exit  : 0/0
 34467 ;;		Unchanged: 0/0
 34468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34472 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34473 ;;Total ram usage:        5 bytes
 34474 ;; Hardware stack levels used:    1
 34475 ;; Hardware stack levels required when called:    3
 34476 ;; This function calls:
 34477 ;;		i2_Byte_SetBit
 34478 ;;		i2_Word_GetPair
 34479 ;; This function is called by:
 34480 ;;		i2_Motor_Step
 34481 ;; This function uses a non-reentrant model
 34482 ;;
 34483                           
 34484                           	psect	text171
 34485  015EE8                     __ptext171:
 34486                           	opt stack 0
 34487  015EE8                     i2_Port_SetPin:
 34488                           	opt stack 13
 34489                           
 34490                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 34491                           
 34492                           ;incstack = 0
 34493  015EE8  0E08               	movlw	8
 34494  015EEA  2410               	addwf	i2Port_SetPin@pInput,w,c
 34495  015EEC  6E0D               	movwf	i2Word_GetPair@pInput,c
 34496  015EEE  0E00               	movlw	0
 34497  015EF0  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 34498  015EF2  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 34499  015EF4  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 34500  015EF8  ECE7  F0BD         	call	i2_Word_GetPair	;wreg free
 34501  015EFC  6E14               	movwf	i2Port_SetPin@Type,c
 34502                           
 34503                           ;Port.c: 250: switch (Type)
 34504  015EFE  D03B               	goto	i2l427
 34505  015F00                     
 34506                           ;Port.c: 256: pValue &= 1;
 34507  015F00  0E01               	movlw	1
 34508  015F02  1613               	andwf	i2Port_SetPin@pValue,f,c
 34509                           
 34510                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 34511  015F04  EE20 F002          	lfsr	2,2
 34512  015F08  5010               	movf	i2Port_SetPin@pInput,w,c
 34513  015F0A  26D9               	addwf	fsr2l,f,c
 34514  015F0C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 34515  015F0E  22DA               	addwfc	fsr2h,f,c
 34516  015F10  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 34517  015F14  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 34518  015F18  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 34519  015F1C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 34520  015F20  EC9C  F0BA         	call	i2_Byte_SetBit	;wreg free
 34521                           
 34522                           ;Port.c: 258: break;
 34523  015F24  0012               	return	
 34524  015F26                     
 34525                           ;Port.c: 261: pValue &= 1;
 34526  015F26  0E01               	movlw	1
 34527  015F28  1613               	andwf	i2Port_SetPin@pValue,f,c
 34528                           
 34529                           ;Port.c: 262: pValue ^= 1;
 34530  015F2A  0E01               	movlw	1
 34531  015F2C  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 34532                           
 34533                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 34534  015F2E  EE20 F002          	lfsr	2,2
 34535  015F32  5010               	movf	i2Port_SetPin@pInput,w,c
 34536  015F34  26D9               	addwf	fsr2l,f,c
 34537  015F36  5011               	movf	i2Port_SetPin@pInput+1,w,c
 34538  015F38  22DA               	addwfc	fsr2h,f,c
 34539  015F3A  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 34540  015F3E  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 34541  015F42  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 34542  015F46  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 34543  015F4A  EC9C  F0BA         	call	i2_Byte_SetBit	;wreg free
 34544                           
 34545                           ;Port.c: 264: break;
 34546  015F4E  0012               	return	
 34547  015F50                     
 34548                           ;Port.c: 266: pValue &= 1;
 34549  015F50  0E01               	movlw	1
 34550  015F52  1613               	andwf	i2Port_SetPin@pValue,f,c
 34551                           
 34552                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 34553  015F54  EE20 F004          	lfsr	2,4
 34554  015F58  5010               	movf	i2Port_SetPin@pInput,w,c
 34555  015F5A  26D9               	addwf	fsr2l,f,c
 34556  015F5C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 34557  015F5E  22DA               	addwfc	fsr2h,f,c
 34558  015F60  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 34559  015F64  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 34560  015F68  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 34561  015F6C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 34562  015F70  EC9C  F0BA         	call	i2_Byte_SetBit	;wreg free
 34563                           
 34564                           ;Port.c: 269: }
 34565                           
 34566                           ;Port.c: 268: break;
 34567  015F74  0012               	return	
 34568  015F76                     i2l427:
 34569  015F76  5014               	movf	i2Port_SetPin@Type,w,c
 34570                           
 34571                           ; Switch size 1, requested type "space"
 34572                           ; Number of cases is 4, Range of values is 0 to 3
 34573                           ; switch strategies available:
 34574                           ; Name         Instructions Cycles
 34575                           ; simple_byte           13     7 (average)
 34576                           ;	Chosen strategy is simple_byte
 34577  015F78  0A00               	xorlw	0	; case 0
 34578  015F7A  B4D8               	btfsc	status,2,c
 34579  015F7C  0012               	return	
 34580  015F7E  0A01               	xorlw	1	; case 1
 34581  015F80  B4D8               	btfsc	status,2,c
 34582  015F82  D7BE               	goto	i2l430
 34583  015F84  0A03               	xorlw	3	; case 2
 34584  015F86  B4D8               	btfsc	status,2,c
 34585  015F88  D7CE               	goto	i2l432
 34586  015F8A  0A01               	xorlw	1	; case 3
 34587  015F8C  A4D8               	btfss	status,2,c
 34588  015F8E  0012               	return	
 34589  015F90  D7DF               	goto	i2l433
 34590  015F92                     __end_ofi2_Port_SetPin:
 34591                           	opt stack 0
 34592                           tosu	equ	0xFFF
 34593                           tosh	equ	0xFFE
 34594                           tosl	equ	0xFFD
 34595                           pclatu	equ	0xFFB
 34596                           pclath	equ	0xFFA
 34597                           tblptru	equ	0xFF8
 34598                           tblptrh	equ	0xFF7
 34599                           tblptrl	equ	0xFF6
 34600                           tablat	equ	0xFF5
 34601                           prodh	equ	0xFF4
 34602                           prodl	equ	0xFF3
 34603                           intcon	equ	0xFF2
 34604                           indf0	equ	0xFEF
 34605                           postinc0	equ	0xFEE
 34606                           fsr0h	equ	0xFEA
 34607                           fsr0l	equ	0xFE9
 34608                           wreg	equ	0xFE8
 34609                           indf1	equ	0xFE7
 34610                           postdec1	equ	0xFE5
 34611                           fsr1h	equ	0xFE2
 34612                           fsr1l	equ	0xFE1
 34613                           indf2	equ	0xFDF
 34614                           postinc2	equ	0xFDE
 34615                           postdec2	equ	0xFDD
 34616                           plusw2	equ	0xFDB
 34617                           fsr2h	equ	0xFDA
 34618                           fsr2l	equ	0xFD9
 34619                           status	equ	0xFD8
 34620                           
 34621 ;; *************** function i2_Word_GetPair *****************
 34622 ;; Defined at:
 34623 ;;		line 156 in file "Library/Types.c"
 34624 ;; Parameters:    Size  Location     Type
 34625 ;;  pInput          2   12[COMRAM] PTR struct Word
 34626 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 34627 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 34628 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 34629 ;;		 -> PortC(10), PortF(10), NULL(0), 
 34630 ;;  pPair           1   14[COMRAM] unsigned char 
 34631 ;; Auto vars:     Size  Location     Type
 34632 ;;		None
 34633 ;; Return value:  Size  Location     Type
 34634 ;;                  1    wreg      unsigned char 
 34635 ;; Registers used:
 34636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34637 ;; Tracked objects:
 34638 ;;		On entry : 0/0
 34639 ;;		On exit  : 0/0
 34640 ;;		Unchanged: 0/0
 34641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34642 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34645 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34646 ;;Total ram usage:        3 bytes
 34647 ;; Hardware stack levels used:    1
 34648 ;; Hardware stack levels required when called:    2
 34649 ;; This function calls:
 34650 ;;		i2_Byte_GetPair
 34651 ;; This function is called by:
 34652 ;;		i2_Port_SetPin
 34653 ;; This function uses a non-reentrant model
 34654 ;;
 34655                           
 34656                           	psect	text172
 34657  017BCE                     __ptext172:
 34658                           	opt stack 0
 34659  017BCE                     i2_Word_GetPair:
 34660                           	opt stack 13
 34661                           
 34662                           ;Types.c: 158: if (pPair >= 4)
 34663                           
 34664                           ;incstack = 0
 34665  017BCE  0E03               	movlw	3
 34666  017BD0  640F               	cpfsgt	i2Word_GetPair@pPair,c
 34667  017BD2  D00C               	goto	i2l781
 34668                           
 34669                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 34670  017BD4  0E01               	movlw	1
 34671  017BD6  240D               	addwf	i2Word_GetPair@pInput,w,c
 34672  017BD8  6E0A               	movwf	i2Byte_GetPair@pInput,c
 34673  017BDA  0E00               	movlw	0
 34674  017BDC  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 34675  017BDE  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 34676  017BE0  500F               	movf	i2Word_GetPair@pPair,w,c
 34677  017BE2  0FFC               	addlw	252
 34678  017BE4  6E0C               	movwf	i2Byte_GetPair@pPair,c
 34679  017BE6  EC63  F0BF         	call	i2_Byte_GetPair	;wreg free
 34680  017BEA  0012               	return	
 34681  017BEC                     i2l781:
 34682                           
 34683                           ;Types.c: 160: else
 34684                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 34685  017BEC  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 34686  017BF0  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 34687  017BF4  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 34688  017BF8  EC63  F0BF         	call	i2_Byte_GetPair	;wreg free
 34689  017BFC  0012               	return	
 34690  017BFE                     __end_ofi2_Word_GetPair:
 34691                           	opt stack 0
 34692                           tosu	equ	0xFFF
 34693                           tosh	equ	0xFFE
 34694                           tosl	equ	0xFFD
 34695                           pclatu	equ	0xFFB
 34696                           pclath	equ	0xFFA
 34697                           tblptru	equ	0xFF8
 34698                           tblptrh	equ	0xFF7
 34699                           tblptrl	equ	0xFF6
 34700                           tablat	equ	0xFF5
 34701                           prodh	equ	0xFF4
 34702                           prodl	equ	0xFF3
 34703                           intcon	equ	0xFF2
 34704                           indf0	equ	0xFEF
 34705                           postinc0	equ	0xFEE
 34706                           fsr0h	equ	0xFEA
 34707                           fsr0l	equ	0xFE9
 34708                           wreg	equ	0xFE8
 34709                           indf1	equ	0xFE7
 34710                           postdec1	equ	0xFE5
 34711                           fsr1h	equ	0xFE2
 34712                           fsr1l	equ	0xFE1
 34713                           indf2	equ	0xFDF
 34714                           postinc2	equ	0xFDE
 34715                           postdec2	equ	0xFDD
 34716                           plusw2	equ	0xFDB
 34717                           fsr2h	equ	0xFDA
 34718                           fsr2l	equ	0xFD9
 34719                           status	equ	0xFD8
 34720                           
 34721 ;; *************** function i2_Byte_GetPair *****************
 34722 ;; Defined at:
 34723 ;;		line 87 in file "Library/Types.c"
 34724 ;; Parameters:    Size  Location     Type
 34725 ;;  pInput          2    9[COMRAM] PTR struct Byte
 34726 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 34727 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 34728 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 34729 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 34730 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 34731 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 34732 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 34733 ;;		 -> NULL(0), 
 34734 ;;  pPair           1   11[COMRAM] unsigned char 
 34735 ;; Auto vars:     Size  Location     Type
 34736 ;;		None
 34737 ;; Return value:  Size  Location     Type
 34738 ;;                  1    wreg      unsigned char 
 34739 ;; Registers used:
 34740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34741 ;; Tracked objects:
 34742 ;;		On entry : 0/0
 34743 ;;		On exit  : 0/0
 34744 ;;		Unchanged: 0/0
 34745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34746 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34749 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34750 ;;Total ram usage:        3 bytes
 34751 ;; Hardware stack levels used:    1
 34752 ;; Hardware stack levels required when called:    1
 34753 ;; This function calls:
 34754 ;;		i2_Byte_GetZone
 34755 ;; This function is called by:
 34756 ;;		i2_Word_GetPair
 34757 ;; This function uses a non-reentrant model
 34758 ;;
 34759                           
 34760                           	psect	text173
 34761  017EC6                     __ptext173:
 34762                           	opt stack 0
 34763  017EC6                     i2_Byte_GetPair:
 34764                           	opt stack 13
 34765                           
 34766                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 34767                           
 34768                           ;incstack = 0
 34769  017EC6  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 34770  017ECA  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 34771  017ECE  0E04               	movlw	4
 34772  017ED0  6E03               	movwf	i2Byte_GetZone@pMax,c
 34773  017ED2  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 34774  017ED6  0E02               	movlw	2
 34775  017ED8  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 34776  017EDA  EC10  F0B6         	call	i2_Byte_GetZone	;wreg free
 34777  017EDE  0012               	return	
 34778  017EE0                     __end_ofi2_Byte_GetPair:
 34779                           	opt stack 0
 34780                           tosu	equ	0xFFF
 34781                           tosh	equ	0xFFE
 34782                           tosl	equ	0xFFD
 34783                           pclatu	equ	0xFFB
 34784                           pclath	equ	0xFFA
 34785                           tblptru	equ	0xFF8
 34786                           tblptrh	equ	0xFF7
 34787                           tblptrl	equ	0xFF6
 34788                           tablat	equ	0xFF5
 34789                           prodh	equ	0xFF4
 34790                           prodl	equ	0xFF3
 34791                           intcon	equ	0xFF2
 34792                           indf0	equ	0xFEF
 34793                           postinc0	equ	0xFEE
 34794                           fsr0h	equ	0xFEA
 34795                           fsr0l	equ	0xFE9
 34796                           wreg	equ	0xFE8
 34797                           indf1	equ	0xFE7
 34798                           postdec1	equ	0xFE5
 34799                           fsr1h	equ	0xFE2
 34800                           fsr1l	equ	0xFE1
 34801                           indf2	equ	0xFDF
 34802                           postinc2	equ	0xFDE
 34803                           postdec2	equ	0xFDD
 34804                           plusw2	equ	0xFDB
 34805                           fsr2h	equ	0xFDA
 34806                           fsr2l	equ	0xFD9
 34807                           status	equ	0xFD8
 34808                           
 34809 ;; *************** function i2_Byte_GetZone *****************
 34810 ;; Defined at:
 34811 ;;		line 64 in file "Library/Types.c"
 34812 ;; Parameters:    Size  Location     Type
 34813 ;;  pInput          2    0[COMRAM] PTR struct Byte
 34814 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 34815 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 34816 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 34817 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 34818 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 34819 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 34820 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 34821 ;;		 -> NULL(0), 
 34822 ;;  pMax            1    2[COMRAM] unsigned char 
 34823 ;;  pChunk          1    3[COMRAM] unsigned char 
 34824 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 34825 ;; Auto vars:     Size  Location     Type
 34826 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 34827 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 34828 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 34829 ;; Return value:  Size  Location     Type
 34830 ;;                  1    wreg      unsigned char 
 34831 ;; Registers used:
 34832 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 34833 ;; Tracked objects:
 34834 ;;		On entry : 0/0
 34835 ;;		On exit  : 0/0
 34836 ;;		Unchanged: 0/0
 34837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34838 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34839 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34840 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34841 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34842 ;;Total ram usage:        9 bytes
 34843 ;; Hardware stack levels used:    1
 34844 ;; This function calls:
 34845 ;;		Nothing
 34846 ;; This function is called by:
 34847 ;;		i2_Byte_GetPair
 34848 ;; This function uses a non-reentrant model
 34849 ;;
 34850                           
 34851                           	psect	text174
 34852  016C20                     __ptext174:
 34853                           	opt stack 0
 34854  016C20                     i2_Byte_GetZone:
 34855                           	opt stack 13
 34856                           
 34857                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 34858                           
 34859                           ;incstack = 0
 34860  016C20  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 34861  016C24  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 34862  016C28  0E00               	movlw	low (__mediumconst shr (0+16))
 34863  016C2A  6EF8               	movwf	tblptru,c
 34864  016C2C  0E0F               	movlw	(high __ramtop+-1)
 34865  016C2E  64F7               	cpfsgt	tblptrh,c
 34866  016C30  D003               	bra	i2u599_47
 34867  016C32  0008               	tblrd		*
 34868  016C34  50F5               	movf	tablat,w,c
 34869  016C36  D005               	bra	i2u599_40
 34870  016C38                     i2u599_47:
 34871  016C38  CFF6 FFE9          	movff	tblptrl,fsr0l
 34872  016C3C  CFF7 FFEA          	movff	tblptrh,fsr0h
 34873  016C40  50EF               	movf	indf0,w,c
 34874  016C42                     i2u599_40:
 34875  016C42  6E09               	movwf	i2Byte_GetZone@Output,c
 34876                           
 34877                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 34878  016C44  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 34879  016C46  0D01               	mullw	1
 34880  016C48  0E5B               	movlw	low _MASKS
 34881  016C4A  24F3               	addwf	prodl,w,c
 34882  016C4C  6EF6               	movwf	tblptrl,c
 34883  016C4E  0EFD               	movlw	high _MASKS
 34884  016C50  20F4               	addwfc	prodh,w,c
 34885  016C52  6EF7               	movwf	tblptrh,c
 34886  016C54                     	if	1	;There are 3 active tblptr bytes
 34887  016C54  6AF8               	clrf	tblptru,c
 34888  016C56  0E00               	movlw	low (__mediumconst shr (0+16))
 34889  016C58  22F8               	addwfc	tblptru,f,c
 34890  016C5A                     	endif
 34891  016C5A  0008               	tblrd		*
 34892  016C5C  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 34893                           
 34894                           ;Types.c: 68: UINT8 Offset = 0;
 34895  016C60  0E00               	movlw	0
 34896  016C62  6E08               	movwf	i2Byte_GetZone@Offset,c
 34897                           
 34898                           ;Types.c: 70: while (pChunk >= pMax)
 34899  016C64  D003               	goto	i2l732
 34900  016C66                     
 34901                           ;Types.c: 71: {
 34902                           ;Types.c: 72: pChunk -= pMax;
 34903  016C66  5003               	movf	i2Byte_GetZone@pMax,w,c
 34904  016C68  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 34905                           
 34906                           ;Types.c: 73: Offset += 1;
 34907  016C6A  2A08               	incf	i2Byte_GetZone@Offset,f,c
 34908  016C6C                     i2l732:
 34909  016C6C  5003               	movf	i2Byte_GetZone@pMax,w,c
 34910  016C6E  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 34911  016C70  B0D8               	btfsc	status,0,c
 34912  016C72  D7F9               	goto	i2l733
 34913                           
 34914                           ;Types.c: 74: }
 34915                           ;Types.c: 75: pChunk *= pChunkSize;
 34916  016C74  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 34917  016C76  0204               	mulwf	i2Byte_GetZone@pChunk,c
 34918  016C78  50F3               	movf	prodl,w,c
 34919  016C7A  6E04               	movwf	i2Byte_GetZone@pChunk,c
 34920                           
 34921                           ;Types.c: 76: pChunk += Offset;
 34922  016C7C  5008               	movf	i2Byte_GetZone@Offset,w,c
 34923  016C7E  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 34924                           
 34925                           ;Types.c: 78: Output >>= pChunk;
 34926  016C80  2804               	incf	i2Byte_GetZone@pChunk,w,c
 34927  016C82  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 34928  016C84  D002               	goto	i2u601_40
 34929  016C86                     i2u601_45:
 34930  016C86  90D8               	bcf	status,0,c
 34931  016C88  3209               	rrcf	i2Byte_GetZone@Output,f,c
 34932  016C8A                     i2u601_40:
 34933  016C8A  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 34934  016C8C  D7FC               	goto	i2u601_45
 34935                           
 34936                           ;Types.c: 79: Output &= MASK;
 34937  016C8E  5007               	movf	i2Byte_GetZone@MASK,w,c
 34938  016C90  1609               	andwf	i2Byte_GetZone@Output,f,c
 34939                           
 34940                           ;Types.c: 80: return Output;
 34941  016C92  5009               	movf	i2Byte_GetZone@Output,w,c
 34942  016C94  0012               	return	
 34943  016C96                     __end_ofi2_Byte_GetZone:
 34944                           	opt stack 0
 34945                           tosu	equ	0xFFF
 34946                           tosh	equ	0xFFE
 34947                           tosl	equ	0xFFD
 34948                           pclatu	equ	0xFFB
 34949                           pclath	equ	0xFFA
 34950                           tblptru	equ	0xFF8
 34951                           tblptrh	equ	0xFF7
 34952                           tblptrl	equ	0xFF6
 34953                           tablat	equ	0xFF5
 34954                           prodh	equ	0xFF4
 34955                           prodl	equ	0xFF3
 34956                           intcon	equ	0xFF2
 34957                           indf0	equ	0xFEF
 34958                           postinc0	equ	0xFEE
 34959                           fsr0h	equ	0xFEA
 34960                           fsr0l	equ	0xFE9
 34961                           wreg	equ	0xFE8
 34962                           indf1	equ	0xFE7
 34963                           postdec1	equ	0xFE5
 34964                           fsr1h	equ	0xFE2
 34965                           fsr1l	equ	0xFE1
 34966                           indf2	equ	0xFDF
 34967                           postinc2	equ	0xFDE
 34968                           postdec2	equ	0xFDD
 34969                           plusw2	equ	0xFDB
 34970                           fsr2h	equ	0xFDA
 34971                           fsr2l	equ	0xFD9
 34972                           status	equ	0xFD8
 34973                           
 34974 ;; *************** function i2_Byte_SetBit *****************
 34975 ;; Defined at:
 34976 ;;		line 32 in file "Library/Types.c"
 34977 ;; Parameters:    Size  Location     Type
 34978 ;;  pInput          2    0[COMRAM] PTR struct Byte
 34979 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 34980 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 34981 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 34982 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 34983 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 34984 ;;		 -> NULL(0), 
 34985 ;;  pBit            1    2[COMRAM] unsigned char 
 34986 ;;  pValue          1    3[COMRAM] unsigned char 
 34987 ;; Auto vars:     Size  Location     Type
 34988 ;;		None
 34989 ;; Return value:  Size  Location     Type
 34990 ;;                  1    wreg      void 
 34991 ;; Registers used:
 34992 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 34993 ;; Tracked objects:
 34994 ;;		On entry : 0/0
 34995 ;;		On exit  : 0/0
 34996 ;;		Unchanged: 0/0
 34997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34998 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35000 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35001 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35002 ;;Total ram usage:        7 bytes
 35003 ;; Hardware stack levels used:    1
 35004 ;; This function calls:
 35005 ;;		Nothing
 35006 ;; This function is called by:
 35007 ;;		i2_Port_SetPin
 35008 ;; This function uses a non-reentrant model
 35009 ;;
 35010                           
 35011                           	psect	text175
 35012  017538                     __ptext175:
 35013                           	opt stack 0
 35014  017538                     i2_Byte_SetBit:
 35015                           	opt stack 15
 35016                           
 35017                           ;Types.c: 34: pValue &= 1;
 35018                           
 35019                           ;incstack = 0
 35020  017538  0E01               	movlw	1
 35021  01753A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 35022                           
 35023                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 35024  01753C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 35025  017540  0E01               	movlw	1
 35026  017542  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 35027  017544  2A05               	incf	??i2_Byte_SetBit,f,c
 35028  017546  D002               	goto	i2u714_44
 35029  017548                     i2u714_45:
 35030  017548  90D8               	bcf	status,0,c
 35031  01754A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 35032  01754C                     i2u714_44:
 35033  01754C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 35034  01754E  D7FC               	goto	i2u714_45
 35035  017550  5006               	movf	??i2_Byte_SetBit+1,w,c
 35036  017552  0AFF               	xorlw	255
 35037  017554  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 35038  017556  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 35039  01755A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 35040  01755E  5007               	movf	??i2_Byte_SetBit+2,w,c
 35041  017560  16DF               	andwf	indf2,f,c
 35042                           
 35043                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 35044  017562  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 35045  017566  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 35046  01756A  2A05               	incf	??i2_Byte_SetBit,f,c
 35047  01756C  D002               	goto	i2u715_44
 35048  01756E                     i2u715_45:
 35049  01756E  90D8               	bcf	status,0,c
 35050  017570  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 35051  017572                     i2u715_44:
 35052  017572  2E05               	decfsz	??i2_Byte_SetBit,f,c
 35053  017574  D7FC               	goto	i2u715_45
 35054  017576  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 35055  01757A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 35056  01757E  5006               	movf	??i2_Byte_SetBit+1,w,c
 35057  017580  12DF               	iorwf	indf2,f,c
 35058  017582  0012               	return		;funcret
 35059  017584                     __end_ofi2_Byte_SetBit:
 35060                           	opt stack 0
 35061                           tosu	equ	0xFFF
 35062                           tosh	equ	0xFFE
 35063                           tosl	equ	0xFFD
 35064                           pclatu	equ	0xFFB
 35065                           pclath	equ	0xFFA
 35066                           tblptru	equ	0xFF8
 35067                           tblptrh	equ	0xFF7
 35068                           tblptrl	equ	0xFF6
 35069                           tablat	equ	0xFF5
 35070                           prodh	equ	0xFF4
 35071                           prodl	equ	0xFF3
 35072                           intcon	equ	0xFF2
 35073                           indf0	equ	0xFEF
 35074                           postinc0	equ	0xFEE
 35075                           fsr0h	equ	0xFEA
 35076                           fsr0l	equ	0xFE9
 35077                           wreg	equ	0xFE8
 35078                           indf1	equ	0xFE7
 35079                           postdec1	equ	0xFE5
 35080                           fsr1h	equ	0xFE2
 35081                           fsr1l	equ	0xFE1
 35082                           indf2	equ	0xFDF
 35083                           postinc2	equ	0xFDE
 35084                           postdec2	equ	0xFDD
 35085                           plusw2	equ	0xFDB
 35086                           fsr2h	equ	0xFDA
 35087                           fsr2l	equ	0xFD9
 35088                           status	equ	0xFD8
 35089                           
 35090 ;; *************** function i2_MXK_SwitchTo *****************
 35091 ;; Defined at:
 35092 ;;		line 105 in file "Library/MXK.c"
 35093 ;; Parameters:    Size  Location     Type
 35094 ;;  pModule         1    wreg     enum E6927
 35095 ;; Auto vars:     Size  Location     Type
 35096 ;;  pModule         1    7[COMRAM] enum E6927
 35097 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 35098 ;; Return value:  Size  Location     Type
 35099 ;;                  1    wreg      unsigned char 
 35100 ;; Registers used:
 35101 ;;		wreg, status,2, status,0, cstack
 35102 ;; Tracked objects:
 35103 ;;		On entry : 0/0
 35104 ;;		On exit  : 0/0
 35105 ;;		Unchanged: 0/0
 35106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35108 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35110 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35111 ;;Total ram usage:        2 bytes
 35112 ;; Hardware stack levels used:    1
 35113 ;; Hardware stack levels required when called:    1
 35114 ;; This function calls:
 35115 ;;		i2_delay_us
 35116 ;; This function is called by:
 35117 ;;		i2_Motor_Step
 35118 ;; This function uses a non-reentrant model
 35119 ;;
 35120                           
 35121                           	psect	text176
 35122  017A9E                     __ptext176:
 35123                           	opt stack 0
 35124  017A9E                     i2_MXK_SwitchTo:
 35125                           	opt stack 15
 35126                           
 35127                           ;incstack = 0
 35128                           ;i2MXK_SwitchTo@pModule stored from wreg
 35129  017A9E  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 35130                           
 35131                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 35132  017AA0  5086               	movf	3974,w,c	;volatile
 35133  017AA2  0B0F               	andlw	15
 35134  017AA4  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 35135                           
 35136                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 35137  017AA6  504D               	movf	_Bus_State,w,c
 35138  017AA8  A4D8               	btfss	status,2,c
 35139  017AAA  D002               	goto	i2l1730
 35140                           
 35141                           ;MXK.c: 110: return 0;
 35142  017AAC  0E00               	movlw	0
 35143  017AAE  0012               	return	
 35144  017AB0                     i2l1730:
 35145                           
 35146                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 35147  017AB0  0E00               	movlw	0
 35148  017AB2  6E4D               	movwf	_Bus_State,c
 35149                           
 35150                           ;MXK.c: 114: if (CUR != pModule)
 35151  017AB4  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 35152  017AB6  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 35153  017AB8  B4D8               	btfsc	status,2,c
 35154  017ABA  D00A               	goto	i2l1732
 35155                           
 35156                           ;MXK.c: 115: {
 35157                           ;MXK.c: 116: PORTG &= ~(0xF);
 35158  017ABC  0EF0               	movlw	240
 35159  017ABE  1686               	andwf	3974,f,c	;volatile
 35160                           
 35161                           ;MXK.c: 117: PORTG |= pModule;
 35162  017AC0  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 35163  017AC2  1286               	iorwf	3974,f,c	;volatile
 35164                           
 35165                           ;MXK.c: 120: delay_us(10);
 35166  017AC4  0E00               	movlw	0
 35167  017AC6  6E02               	movwf	i2delay_us@us+1,c
 35168  017AC8  0E0A               	movlw	10
 35169  017ACA  6E01               	movwf	i2delay_us@us,c
 35170  017ACC  EC23  F0BC         	call	i2_delay_us	;wreg free
 35171  017AD0                     i2l1732:
 35172                           
 35173                           ;MXK.c: 121: }
 35174                           ;MXK.c: 122: return 1;
 35175  017AD0  0E01               	movlw	1
 35176  017AD2  0012               	return	
 35177  017AD4                     __end_ofi2_MXK_SwitchTo:
 35178                           	opt stack 0
 35179                           tosu	equ	0xFFF
 35180                           tosh	equ	0xFFE
 35181                           tosl	equ	0xFFD
 35182                           pclatu	equ	0xFFB
 35183                           pclath	equ	0xFFA
 35184                           tblptru	equ	0xFF8
 35185                           tblptrh	equ	0xFF7
 35186                           tblptrl	equ	0xFF6
 35187                           tablat	equ	0xFF5
 35188                           prodh	equ	0xFF4
 35189                           prodl	equ	0xFF3
 35190                           intcon	equ	0xFF2
 35191                           indf0	equ	0xFEF
 35192                           postinc0	equ	0xFEE
 35193                           fsr0h	equ	0xFEA
 35194                           fsr0l	equ	0xFE9
 35195                           wreg	equ	0xFE8
 35196                           indf1	equ	0xFE7
 35197                           postdec1	equ	0xFE5
 35198                           fsr1h	equ	0xFE2
 35199                           fsr1l	equ	0xFE1
 35200                           indf2	equ	0xFDF
 35201                           postinc2	equ	0xFDE
 35202                           postdec2	equ	0xFDD
 35203                           plusw2	equ	0xFDB
 35204                           fsr2h	equ	0xFDA
 35205                           fsr2l	equ	0xFD9
 35206                           status	equ	0xFD8
 35207                           
 35208 ;; *************** function i2_delay_us *****************
 35209 ;; Defined at:
 35210 ;;		line 255 in file "Library/Types.c"
 35211 ;; Parameters:    Size  Location     Type
 35212 ;;  us              2    0[COMRAM] unsigned short 
 35213 ;; Auto vars:     Size  Location     Type
 35214 ;;  delay_us        4    2[COMRAM] unsigned long 
 35215 ;; Return value:  Size  Location     Type
 35216 ;;                  1    wreg      void 
 35217 ;; Registers used:
 35218 ;;		wreg, status,2, status,0
 35219 ;; Tracked objects:
 35220 ;;		On entry : 0/0
 35221 ;;		On exit  : 0/0
 35222 ;;		Unchanged: 0/0
 35223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35224 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35225 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35227 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35228 ;;Total ram usage:        6 bytes
 35229 ;; Hardware stack levels used:    1
 35230 ;; This function calls:
 35231 ;;		Nothing
 35232 ;; This function is called by:
 35233 ;;		i2_MXK_SwitchTo
 35234 ;; This function uses a non-reentrant model
 35235 ;;
 35236                           
 35237                           	psect	text177
 35238  017846                     __ptext177:
 35239                           	opt stack 0
 35240  017846                     i2_delay_us:
 35241                           	opt stack 15
 35242                           
 35243                           ;Types.c: 256: unsigned long u;
 35244                           ;Types.c: 257: while (us--) {
 35245                           
 35246                           ;incstack = 0
 35247  017846  D016               	goto	i2u718_40
 35248  017848                     i2l10226:
 35249                           
 35250                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 35251  017848  0E00               	movlw	0
 35252  01784A  6E03               	movwf	i2delay_us@u,c
 35253  01784C  0E00               	movlw	0
 35254  01784E  6E04               	movwf	i2delay_us@u+1,c
 35255  017850  0E00               	movlw	0
 35256  017852  6E05               	movwf	i2delay_us@u+2,c
 35257  017854  0E00               	movlw	0
 35258  017856  6E06               	movwf	i2delay_us@u+3,c
 35259  017858                     i2l10228:
 35260  017858  5003               	movf	i2delay_us@u,w,c
 35261  01785A  1004               	iorwf	i2delay_us@u+1,w,c
 35262  01785C  1005               	iorwf	i2delay_us@u+2,w,c
 35263  01785E  1006               	iorwf	i2delay_us@u+3,w,c
 35264  017860  A4D8               	btfss	status,2,c
 35265  017862  D008               	goto	i2u718_40
 35266  017864  F000               	nop		; ;# 
 35267  017866  0E01               	movlw	1
 35268  017868  2603               	addwf	i2delay_us@u,f,c
 35269  01786A  0E00               	movlw	0
 35270  01786C  2204               	addwfc	i2delay_us@u+1,f,c
 35271  01786E  2205               	addwfc	i2delay_us@u+2,f,c
 35272  017870  2206               	addwfc	i2delay_us@u+3,f,c
 35273  017872  D7F2               	goto	i2l10228
 35274  017874                     i2u718_40:
 35275  017874  0601               	decf	i2delay_us@us,f,c
 35276  017876  A0D8               	btfss	status,0,c
 35277  017878  0602               	decf	i2delay_us@us+1,f,c
 35278  01787A  2801               	incf	i2delay_us@us,w,c
 35279  01787C  E1E5               	bnz	i2l10226
 35280  01787E  2802               	incf	i2delay_us@us+1,w,c
 35281  017880  B4D8               	btfsc	status,2,c
 35282  017882  0012               	return	
 35283  017884  D7E1               	goto	i2l832
 35284  017886                     __end_ofi2_delay_us:
 35285                           	opt stack 0
 35286                           tosu	equ	0xFFF
 35287                           tosh	equ	0xFFE
 35288                           tosl	equ	0xFFD
 35289                           pclatu	equ	0xFFB
 35290                           pclath	equ	0xFFA
 35291                           tblptru	equ	0xFF8
 35292                           tblptrh	equ	0xFF7
 35293                           tblptrl	equ	0xFF6
 35294                           tablat	equ	0xFF5
 35295                           prodh	equ	0xFF4
 35296                           prodl	equ	0xFF3
 35297                           intcon	equ	0xFF2
 35298                           indf0	equ	0xFEF
 35299                           postinc0	equ	0xFEE
 35300                           fsr0h	equ	0xFEA
 35301                           fsr0l	equ	0xFE9
 35302                           wreg	equ	0xFE8
 35303                           indf1	equ	0xFE7
 35304                           postdec1	equ	0xFE5
 35305                           fsr1h	equ	0xFE2
 35306                           fsr1l	equ	0xFE1
 35307                           indf2	equ	0xFDF
 35308                           postinc2	equ	0xFDE
 35309                           postdec2	equ	0xFDD
 35310                           plusw2	equ	0xFDB
 35311                           fsr2h	equ	0xFDA
 35312                           fsr2l	equ	0xFD9
 35313                           status	equ	0xFD8
 35314                           
 35315 ;; *************** function i2_MXK_Release *****************
 35316 ;; Defined at:
 35317 ;;		line 130 in file "Library/MXK.c"
 35318 ;; Parameters:    Size  Location     Type
 35319 ;;		None
 35320 ;; Auto vars:     Size  Location     Type
 35321 ;;		None
 35322 ;; Return value:  Size  Location     Type
 35323 ;;                  1    wreg      unsigned char 
 35324 ;; Registers used:
 35325 ;;		wreg, status,2, status,0
 35326 ;; Tracked objects:
 35327 ;;		On entry : 0/0
 35328 ;;		On exit  : 0/0
 35329 ;;		Unchanged: 0/0
 35330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35335 ;;Total ram usage:        0 bytes
 35336 ;; Hardware stack levels used:    1
 35337 ;; This function calls:
 35338 ;;		Nothing
 35339 ;; This function is called by:
 35340 ;;		i2_Motor_Step
 35341 ;; This function uses a non-reentrant model
 35342 ;;
 35343                           
 35344                           	psect	text178
 35345  0180F0                     __ptext178:
 35346                           	opt stack 0
 35347  0180F0                     i2_MXK_Release:
 35348                           	opt stack 16
 35349                           
 35350                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 35351                           
 35352                           ;incstack = 0
 35353  0180F0  0E01               	movlw	1
 35354  0180F2  6E4D               	movwf	_Bus_State,c
 35355                           
 35356                           ;MXK.c: 135: return 1;
 35357                           ;	Return value of i2_MXK_Release is never used
 35358  0180F4  0012               	return	
 35359  0180F6                     __end_ofi2_MXK_Release:
 35360                           	opt stack 0
 35361                           tosu	equ	0xFFF
 35362                           tosh	equ	0xFFE
 35363                           tosl	equ	0xFFD
 35364                           pclatu	equ	0xFFB
 35365                           pclath	equ	0xFFA
 35366                           tblptru	equ	0xFF8
 35367                           tblptrh	equ	0xFF7
 35368                           tblptrl	equ	0xFF6
 35369                           tablat	equ	0xFF5
 35370                           prodh	equ	0xFF4
 35371                           prodl	equ	0xFF3
 35372                           intcon	equ	0xFF2
 35373                           indf0	equ	0xFEF
 35374                           postinc0	equ	0xFEE
 35375                           fsr0h	equ	0xFEA
 35376                           fsr0l	equ	0xFE9
 35377                           wreg	equ	0xFE8
 35378                           indf1	equ	0xFE7
 35379                           postdec1	equ	0xFE5
 35380                           fsr1h	equ	0xFE2
 35381                           fsr1l	equ	0xFE1
 35382                           indf2	equ	0xFDF
 35383                           postinc2	equ	0xFDE
 35384                           postdec2	equ	0xFDD
 35385                           plusw2	equ	0xFDB
 35386                           fsr2h	equ	0xFDA
 35387                           fsr2l	equ	0xFD9
 35388                           status	equ	0xFD8
 35389                           
 35390 ;; *************** function i2_MXK_Queue *****************
 35391 ;; Defined at:
 35392 ;;		line 144 in file "Library/MXK.c"
 35393 ;; Parameters:    Size  Location     Type
 35394 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 35395 ;;		 -> Absolute function(1), Motor_Step(1), 
 35396 ;; Auto vars:     Size  Location     Type
 35397 ;;		None
 35398 ;; Return value:  Size  Location     Type
 35399 ;;                  1    wreg      void 
 35400 ;; Registers used:
 35401 ;;		wreg, status,2, status,0
 35402 ;; Tracked objects:
 35403 ;;		On entry : 0/0
 35404 ;;		On exit  : 0/0
 35405 ;;		Unchanged: 0/0
 35406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35407 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35410 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35411 ;;Total ram usage:        3 bytes
 35412 ;; Hardware stack levels used:    1
 35413 ;; This function calls:
 35414 ;;		Nothing
 35415 ;; This function is called by:
 35416 ;;		i2_Motor_Step
 35417 ;; This function uses a non-reentrant model
 35418 ;;
 35419                           
 35420                           	psect	text179
 35421  018068                     __ptext179:
 35422                           	opt stack 0
 35423  018068                     i2_MXK_Queue:
 35424                           	opt stack 16
 35425                           
 35426                           ;MXK.c: 146: lQueue = pCallback;
 35427                           
 35428                           ;incstack = 0
 35429  018068  C001  F0E1         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 35430  01806C  C002  F0E2         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 35431  018070  C003  F0E3         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 35432  018074  0012               	return		;funcret
 35433  018076                     __end_ofi2_MXK_Queue:
 35434                           	opt stack 0
 35435                           tosu	equ	0xFFF
 35436                           tosh	equ	0xFFE
 35437                           tosl	equ	0xFFD
 35438                           pclatu	equ	0xFFB
 35439                           pclath	equ	0xFFA
 35440                           tblptru	equ	0xFF8
 35441                           tblptrh	equ	0xFF7
 35442                           tblptrl	equ	0xFF6
 35443                           tablat	equ	0xFF5
 35444                           prodh	equ	0xFF4
 35445                           prodl	equ	0xFF3
 35446                           intcon	equ	0xFF2
 35447                           indf0	equ	0xFEF
 35448                           postinc0	equ	0xFEE
 35449                           fsr0h	equ	0xFEA
 35450                           fsr0l	equ	0xFE9
 35451                           wreg	equ	0xFE8
 35452                           indf1	equ	0xFE7
 35453                           postdec1	equ	0xFE5
 35454                           fsr1h	equ	0xFE2
 35455                           fsr1l	equ	0xFE1
 35456                           indf2	equ	0xFDF
 35457                           postinc2	equ	0xFDE
 35458                           postdec2	equ	0xFDD
 35459                           plusw2	equ	0xFDB
 35460                           fsr2h	equ	0xFDA
 35461                           fsr2l	equ	0xFD9
 35462                           status	equ	0xFD8
 35463                           tosu	equ	0xFFF
 35464                           tosh	equ	0xFFE
 35465                           tosl	equ	0xFFD
 35466                           pclatu	equ	0xFFB
 35467                           pclath	equ	0xFFA
 35468                           tblptru	equ	0xFF8
 35469                           tblptrh	equ	0xFF7
 35470                           tblptrl	equ	0xFF6
 35471                           tablat	equ	0xFF5
 35472                           prodh	equ	0xFF4
 35473                           prodl	equ	0xFF3
 35474                           intcon	equ	0xFF2
 35475                           indf0	equ	0xFEF
 35476                           postinc0	equ	0xFEE
 35477                           fsr0h	equ	0xFEA
 35478                           fsr0l	equ	0xFE9
 35479                           wreg	equ	0xFE8
 35480                           indf1	equ	0xFE7
 35481                           postdec1	equ	0xFE5
 35482                           fsr1h	equ	0xFE2
 35483                           fsr1l	equ	0xFE1
 35484                           indf2	equ	0xFDF
 35485                           postinc2	equ	0xFDE
 35486                           postdec2	equ	0xFDD
 35487                           plusw2	equ	0xFDB
 35488                           fsr2h	equ	0xFDA
 35489                           fsr2l	equ	0xFD9
 35490                           status	equ	0xFD8
 35491                           
 35492                           	psect	text180
 35493  000000                     __ptext180:
 35494                           	opt stack 0
 35495                           tosu	equ	0xFFF
 35496                           tosh	equ	0xFFE
 35497                           tosl	equ	0xFFD
 35498                           pclatu	equ	0xFFB
 35499                           pclath	equ	0xFFA
 35500                           tblptru	equ	0xFF8
 35501                           tblptrh	equ	0xFF7
 35502                           tblptrl	equ	0xFF6
 35503                           tablat	equ	0xFF5
 35504                           prodh	equ	0xFF4
 35505                           prodl	equ	0xFF3
 35506                           intcon	equ	0xFF2
 35507                           indf0	equ	0xFEF
 35508                           postinc0	equ	0xFEE
 35509                           fsr0h	equ	0xFEA
 35510                           fsr0l	equ	0xFE9
 35511                           wreg	equ	0xFE8
 35512                           indf1	equ	0xFE7
 35513                           postdec1	equ	0xFE5
 35514                           fsr1h	equ	0xFE2
 35515                           fsr1l	equ	0xFE1
 35516                           indf2	equ	0xFDF
 35517                           postinc2	equ	0xFDE
 35518                           postdec2	equ	0xFDD
 35519                           plusw2	equ	0xFDB
 35520                           fsr2h	equ	0xFDA
 35521                           fsr2l	equ	0xFD9
 35522                           status	equ	0xFD8
 35523                           
 35524                           	psect	rparam
 35525  0000                     tosu	equ	0xFFF
 35526                           tosh	equ	0xFFE
 35527                           tosl	equ	0xFFD
 35528                           pclatu	equ	0xFFB
 35529                           pclath	equ	0xFFA
 35530                           tblptru	equ	0xFF8
 35531                           tblptrh	equ	0xFF7
 35532                           tblptrl	equ	0xFF6
 35533                           tablat	equ	0xFF5
 35534                           prodh	equ	0xFF4
 35535                           prodl	equ	0xFF3
 35536                           intcon	equ	0xFF2
 35537                           indf0	equ	0xFEF
 35538                           postinc0	equ	0xFEE
 35539                           fsr0h	equ	0xFEA
 35540                           fsr0l	equ	0xFE9
 35541                           wreg	equ	0xFE8
 35542                           indf1	equ	0xFE7
 35543                           postdec1	equ	0xFE5
 35544                           fsr1h	equ	0xFE2
 35545                           fsr1l	equ	0xFE1
 35546                           indf2	equ	0xFDF
 35547                           postinc2	equ	0xFDE
 35548                           postdec2	equ	0xFDD
 35549                           plusw2	equ	0xFDB
 35550                           fsr2h	equ	0xFDA
 35551                           fsr2l	equ	0xFD9
 35552                           status	equ	0xFD8
 35553                           
 35554                           	psect	temp
 35555  000051                     btemp:
 35556                           	opt stack 0
 35557  000051                     	ds	1
 35558  0000                     int$flags	set	btemp
 35559  0000                     wtemp6	set	btemp+1
 35560                           tosu	equ	0xFFF
 35561                           tosh	equ	0xFFE
 35562                           tosl	equ	0xFFD
 35563                           pclatu	equ	0xFFB
 35564                           pclath	equ	0xFFA
 35565                           tblptru	equ	0xFF8
 35566                           tblptrh	equ	0xFF7
 35567                           tblptrl	equ	0xFF6
 35568                           tablat	equ	0xFF5
 35569                           prodh	equ	0xFF4
 35570                           prodl	equ	0xFF3
 35571                           intcon	equ	0xFF2
 35572                           indf0	equ	0xFEF
 35573                           postinc0	equ	0xFEE
 35574                           fsr0h	equ	0xFEA
 35575                           fsr0l	equ	0xFE9
 35576                           wreg	equ	0xFE8
 35577                           indf1	equ	0xFE7
 35578                           postdec1	equ	0xFE5
 35579                           fsr1h	equ	0xFE2
 35580                           fsr1l	equ	0xFE1
 35581                           indf2	equ	0xFDF
 35582                           postinc2	equ	0xFDE
 35583                           postdec2	equ	0xFDD
 35584                           plusw2	equ	0xFDB
 35585                           fsr2h	equ	0xFDA
 35586                           fsr2l	equ	0xFD9
 35587                           status	equ	0xFD8


Data Sizes:
    Strings     165
    Constant    864
    Data        29
    BSS         824
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    129     149
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      0     253
    BANK4           256      0     240
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK3[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_14(CODE[21]), STR_13(CODE[21]), STR_12(CODE[21]), STR_11(CODE[21]), 
		 -> STR_10(CODE[21]), STR_9(CODE[3]), STR_8(CODE[60]), STR_7(CODE[3]), 
		 -> STR_6(CODE[14]), STR_5(CODE[3]), STR_4(CODE[46]), STR_3(CODE[3]), 
		 -> STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(COMRAM[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(COMRAM[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(COMRAM[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(COMRAM[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK3[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK3[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK3[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK3[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK4[2]), PortG..(BANK4[2]), PortG(BANK4[10]), PortA(BANK4[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK3[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK3[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK4[2]), PortG..(BANK4[2]), PortG(BANK4[10]), 
		 -> PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK3[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK3[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK4[2]), PortG..(BANK4[2]), PortG(BANK4[10]), PortA(BANK4[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK3[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK3[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK4[2]), PortG..(BANK4[2]), PortG(BANK4[10]), 
		 -> PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK3[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK3[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK3[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK3[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK3[10]), PortD(BANK3[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK3[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK3[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortC(BANK3[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortE(BANK3[10]), PortC(BANK3[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK3[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK3[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK3[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK3[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK3[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK4[10]), PortA(BANK4[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK3[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK4[10]), TestButton(BANK4[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK4[10]), TestButton(BANK4[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_mode1
    _mode4->_printf
    _move_and_rotate->_irobot_rotate
    _mode2->_printf
    _irobot_move_straight->_irobot_move
    _mode1->_printf
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->___flsub
    _scale->___flmul
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _fround->___flmul
    ___awdiv->___awmod
    ___llmod->___lldiv
    ___fltol->_ADC_Voltage
    ___flsub->___fladd
    ___fladd->_fround
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _init->_HMI_Init
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwdiv
    _itos->_reverse
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2131684
                                            127 BANK0      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                9     9      0  287091
                                            119 BANK0      5     5      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
               _irobot_move_straight
                      _irobot_rotate
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0   19517
                    _move_and_rotate
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      0     0      0   19517
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate                                       10     6      4    9290
                                             29 BANK0     10     6      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  237234
                                            119 BANK0      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3662
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  265568
                                            119 BANK0      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              47    35     12   73423
                                            105 BANK0     14     2     12
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               13     9      4   15888
                                             64 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    5012
                                             26 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    4981
                                             22 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    4430
                                             14 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    13      4   15609
                                             64 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    3169
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    4093
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     758
                                              0 BANK0     17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     758
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1752
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1705
                                             82 BANK0     10     6      4
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    4447
                                             97 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    3814
                                             77 BANK0     20    12      8
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     217
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    1178
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    5055
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4   13235
                                             64 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1152
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    7929
                                             39 BANK0     25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    3193
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0 1001136
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   89390
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    4050
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362616
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  292340
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  263029
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94741
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1622
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  218813
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   87051
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    3876
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    3585
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (3) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96215
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   84557
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   84557
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (4) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37189
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (2) _HMI_SetNumber                                        2     0      2    4094
                                             17 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (3) _itos                                                10     6      4    2401
                                              7 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     536
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     545
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (4) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___awdiv
         ___awmod (ARG)
       ___fladd
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flneg
       ___flsub
         ___fladd
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
             ___xxtofl (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___awdiv
         ___awmod (ARG)
       ___fladd
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flneg
       ___flsub
         ___fladd
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
             ___xxtofl (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     ___xxtofl
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_rotate
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___awdiv
         ___awmod (ARG)
       ___fladd
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flneg
       ___flsub
         ___fladd
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
             ___xxtofl (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flneg
     ___flsub
       ___fladd
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv
             ___awmod (ARG)
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      F0      14       93.8%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      FD      11       98.8%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     81      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4D2      12        0.0%
DATA                 0      0     5FE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Sep 14 18:44:06 2017

                                 _update_angle 7FEC                                  i2_Timer0_Stop 80EA  
                             SPI_Init@pChannel 0091                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 50BA                                              _A 03FA  
                        __end_of_irobot_rotate 5E3E                                              l8 5662  
                                 ___fldiv@aexp 0086                                   ___fldiv@bexp 0085  
                                            _a 03FB                                              _i 033D  
                                            _j 033C                                              _l 004F  
                                            _u 033B                                              _w 0050  
                          _irobot_led_power_on 7E72                                   ___fldiv@sign 007A  
                                           l11 49B4                                             l12 499E  
                                           l90 48EA                                             l85 47E6  
                                           l87 4854                                             l89 48C0  
                                 ___awdiv@sign 006B                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 0062                                  _HMI_DIPSwitch 7F10  
                           LCD_DrawField@pSize 0078                             LCD_DrawField@count 007E  
                   __end_of_irobot_stop_motion 7734                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 809A                           ADC_ClockDivision@reg 0061  
                                          l120 657E                                            l121 6594  
                                          l122 65AA                                            l220 725E  
                                          l117 65C0                                            l221 7222  
                                          l118 6568                                            l230 74BA  
                                          l222 726E                                            l223 7240  
                                  ?_LED_Toggle 0001                                            l234 76DC  
                                          l235 76AC                                            l227 74D6  
                                          l403 415C                                            l412 3C9E  
                                          l228 749E                                            l340 60F2  
                                          l404 40FC                                            l237 76C4  
                                          l421 3C32                                            l413 3B34  
                                          l341 6100                                            l405 418C  
                                ??_Console_Tab 006E                                            l430 57D6  
                                          l414 3CBA                                            l350 61FA  
                                          l342 610E                                            l510 3324  
                                          l406 4114                                            l415 3B5A  
                                          l351 618A                                            l343 611C  
                                          l511 3434                                            l407 412C  
                                          l183 62AE                                            l432 5800  
                                          l600 1BC0                                            l344 612A  
                                          l512 3346                                            l408 4144  
                                          l184 6288                                            l433 5830  
                                          l417 3BC6                                            l601 1D54  
                                          l353 6198                                            l337 6154  
                                          l345 6138                                            l610 1DDC  
                                          l602 1BF2                                            l354 61A6  
                                          l346 6146                                            l338 60E4  
                                          l370 6084                                            l427 585A  
                                          l611 1E2A                                            l603 1D66  
                                          l355 61B4                                            l363 60AE  
                                          l371 6092                                            l531 2AD8  
                                  ?_HMI_GetBar 0001                                            l612 1E78  
                                          l604 1CA0                                            l356 61C2  
                                          l372 60A0                                            l364 603E  
                                          l532 2AFC                                            l516 338E  
                                          l357 61D0                                            l509 3418  
                                          l614 1F5A                                            l358 61DE  
                                          l366 604C                                            l526 2B1C  
                                          l615 1F52                                            l607 1EC6  
                                          l359 61EC                                            l367 605A  
                                          l519 33D6                                            l616 1F6C  
                                          l608 1D8E                                            l368 6068  
                                          l528 2B3A                                            l393 7390  
                                          l617 1F56                                            l609 1EE4  
                                          l369 6076                                            l529 2AB8  
                                          l483 3184                                            l732 6468  
                                          l900 2EFC                                            l476 325C  
                                          l733 645C                                            l901 2F00  
                                          l389 70E6                                            l477 30CE  
                                          l397 7658                                            l910 2F24  
                                          l902 2F04                                            l726 5C60  
                                          l478 3278                                            l486 31F0  
                                          l654 7CB8                                            l911 2F28  
                                          l903 2F08                                            l727 5C54  
                                          l479 3118                                            l655 7CB0  
                                          l912 2F2C                                            l904 2F0C  
                                          l824 701A                                            l832 7448  
                                          l913 2F30                                            l905 2F10  
                                          l921 6F90                                            l673 7B90  
                                          l657 7CB4                                            l681 6EE8  
                                          l914 2F34                                            l906 2F14  
                                          l922 6F5C                                            l930 54A0  
                                          l915 2F38                                            l907 2F18  
                                          l819 6B28                                            l916 2F3C  
                                          l908 2F1C                                            l860 2E5C  
                                          l684 6EFE                                            l781 79AA  
                                          l853 2F44                                            l917 2F40  
                                          l909 2F20                                            l861 2E60  
                                          l597 1BCE                                            l870 2E84  
                                          l862 2E64                                            l854 2E48  
                                          l598 1BB6                                            l678 6F24  
                                          l686 6F0E                                            l871 2E88  
                                          l863 2E68                                            l599 1BDE  
                                          l679 6ED8                                            l880 2EAC  
                                          l872 2E8C                                            l864 2E6C  
                                          l856 2E4C                                            l928 5520  
                                          l776 7764                                            l881 2EB0  
                                          l873 2E90                                            l865 2E70  
                                          l857 2E50                                            l929 54F0  
                                          l890 2ED4                                            l882 2EB4  
                                          l874 2E94                                            l866 2E74  
                                          l858 2E54                                            l891 2ED8  
                                          l883 2EB8                                            l875 2E98  
                                          l867 2E78                                            l859 2E58  
                                          l892 2EDC                                            l884 2EBC  
                                          l876 2E9C                                            l868 2E7C  
                                          l893 2EE0                                            l885 2EC0  
                                          l877 2EA0                                            l869 2E80  
                                          l894 2EE4                                            l886 2EC4  
                                          l878 2EA4                                            l990 67A4  
                                          l895 2EE8                                            l887 2EC8  
                                          l879 2EA8                                            l983 63EC  
                                          l896 2EEC                                            l888 2ECC  
                                          l976 6830                                            l992 67B4  
                                          l984 6372                                            l897 2EF0  
                                          l889 2ED0                                            l985 63E8  
                                          l898 2EF4                                            l978 6840  
                                          l899 2EF8                                            l997 72F6  
                                          l999 731A                                            _PR2 000FCB  
                                          _dip 032A                                            _val 002D  
                              __end_of_ADC_Off 80D2                                    ?_HMI_SetBar 0001  
                                 ___awmod@sign 0065                             ??_Event_TestButton 0079  
                                 _Word_GetPair 797E                                            prod 000FF3  
                                  ?_HMI_Render 0001                            MXK_SwitchTo@pModule 0067  
                   __end_of_ADC_ConversionTime 76A6                                            tosl 000FFD  
                                          wreg 000FE8                             Console_MakeField@x 0070  
                           Console_MakeField@y 0071                                     _TXSTA1bits 000FAD  
                              _update_distance 7FDA                                   Console_Tab@c 0075  
                                 Console_Tab@i 0074                            LCD_DrawField@pField 0072  
                                 Console_Tab@t 0073                     __size_of_ADC_ClockDivision 008A  
                                 ___flmul@aexp 0094                                   ___flmul@bexp 0099  
                                   i2_delay_us 7846                           Port_Set@TypeRequired 0082  
                                 ___flmul@sign 0093                                   ___flmul@temp 009E  
                                 ___flmul@prod 009A                              Console_FormFeed@x 0062  
                            Console_FormFeed@y 0063                            LCD_DrawField@pPoint 0074  
                               ?_LCD_DrawField 0072                          Port_SetPinType@Output 008A  
                              Port_SetPin@Type 0073                                Port_SetPin@pPin 0071  
                         ?_irobot_led_power_on 0001                                  ?_Byte_GetPair 0069  
                              __end_of_LED_Set 74E8                        __size_ofi2_Word_GetPair 0030  
                                i2_Port_SetPin 5EE8                                   ___fltol@exp1 00BB  
                                 _Word_SetPair 7734                                           l1000 7336  
                                         l1010 58CA                                           l1004 7186  
                                ?_Byte_GetZone 0060                                           l1005 71B4  
                                         l1200 5B80                                           l1040 3E86  
                                         l1201 5BD4                                           l1009 58D6  
                                         l1041 3E8C                                           l1202 5BF0  
                                         l1042 3E92                                           l1043 3E98  
                                         l1204 5C1A                                           l1300 68C2  
                                         l1036 3FDE                                           l1044 3E9E  
                                         l1205 5C00                                           l1301 68C6  
                                         l1045 3EA4                                           l1037 3E80  
                                         l2021 7116                                           l2101 4636  
                                         l1302 68D0                                           l1062 36DE  
                                         l2110 77FA                                           l2030 710E  
                                         l2022 70F2                                           l2102 457A  
                                         l1207 5C2C                                           l1303 68DE  
                                         l1063 370C                                           l1047 3F48  
                                         l2031 7112                                           l2103 45C2  
                                         l1056 356E                                           l2112 77E6  
                                         l2024 70F6                                           l2040 51D6  
                                         l2104 4580                                           l1313 7686  
                                         l1153 394C                                           l1057 3734  
                                         l3001 104C                                           l2025 70FA  
                                         l2041 51DC                                           l1082 5750  
                                         l1058 3576                                           l1146 6A4A  
                                         l2114 77EE                                           l3010 1190  
                                         l3002 1052                                           l2026 70FE  
                                         l2042 51E2                                           l1059 35A0  
                                         l3011 11A6                                           l3003 105C  
                                         l2027 7102                                           l2035 526E  
                                         l2051 5242                                           l2043 51E8  
                                         l3100 39D0                                           l1084 5758  
                                         l3012 11B2                                           l2028 7106  
                                         l2044 51EE                                           l2036 51C0  
                                         l1077 5720                                           l3005 113E  
                                         l2029 710A                                           l1254 7FBC  
                                         l2118 7004                                           l3102 39E8  
                                         l1158 7900                                           l3022 1248  
                                         l3014 11C6                                           l2070 6762  
                                         l2062 671E                                           l2046 5202  
                                         l2038 51CA                                           l2311 5974  
                                         l2119 6FC6                                           l2303 5FBE  
                                         l3103 39D8                                           l1079 5730  
                                         l3007 115E                                           l2039 51D0  
                                         l2312 59A0                                           l1280 6944  
                                         l2144 73CE                                           l3040 246C  
                                         l2400 535A                                           l2313 59CC  
                                         l2305 5FF0                                           l3041 2462  
                                         l3113 3AB8                                           l3105 3A44  
                                         l2049 522E                                           l2161 5E16  
                                         l2401 52B4                                           l3050 25EC  
                                         l3114 3B0A                                           l3106 3A26  
                                         l3026 127C                                           l2074 6780  
                                         l2066 673E                                           l2058 6704  
                                         l2162 5E02                                           l1283 69A6  
                                         l3043 24C0                                           l3035 23E0  
                                         l2139 5D6C                                           l3027 1288  
                                         l3019 11F2                                           l2331 20A0  
                                         l2403 52BA                                           l1276 692C  
                                         l3060 2696                                           l3036 240E  
                                         l3108 3A92                                           l3028 128C  
                                         l2324 1FFA                                           l2156 5DC2  
                                         l2404 52C0                                           l3053 263C  
                                         l3045 24EE                                           l3037 2404  
                                         l3109 3A82                                           l3029 12A0  
                                         l2501 07F6                                           l2341 2206  
                                         l2333 213E                                           l2405 52C6  
                                         l1294 68E6                                           l1630 4EF4  
                                         l3062 26E6                                           l3054 2612  
                                         l3046 25F0                                           l3070 12FA  
                                         l2502 0896                                           l2334 216A  
                                         l2158 5DC8                                           l2318 69DA  
                                         l2406 52CC                                           l1295 68AC  
                                         l1631 4F50                                           l3063 2714  
                                         l3055 2628                                           l3047 256C  
                                         l3039 243E                                           l3071 12F4  
                                         l2503 0806                                           l2095 4536  
                                         l2327 2010                                           l2159 5DEA  
                                         l2319 69C6                                           l1296 6910  
                                         l1632 4F34                                           l3064 274A  
                                         l3048 25A4                                           l3072 130C  
                                         l2168 7718                                           l2432 2DEA  
                                         l2440 0CF6                                           l2096 44F0  
                                         l2336 21B6                                           l2360 4E12  
                                         l1297 68B6                                           l3065 275A  
                                         l3049 2598                                           l3081 1616  
                                         l3073 132A                                           l2329 206E  
                                         l1298 68BA                                           l1730 781A  
                                         l3066 275E                                           l3090 16C0  
                                         l3082 15EC                                           l3074 1354  
                                         l2442 0DD8                                           l2098 4566  
                                         l2346 23AC                                           l2338 226E  
                                         l2354 4D8C                                           l1299 68BE  
                                         l1627 4F9C                                           l3091 16E6  
                                         l3083 1602                                           l3075 134E  
                                         l2435 0B74                                           l2451 0032  
                                         l2099 454A                                           l2347 2312  
                                         l2339 21CE                                           l1724 794C  
                                         l1732 7842                                           l1628 4F92  
                                         l3076 1366                                           l2436 0A60  
                                         l2452 00A4                                           l2372 1796  
                                         l1629 4F12                                           l3093 1714  
                                         l3077 138E                                           l3069 12D0  
                                         l2429 2CE2                                           l2461 018E  
                                         l2349 234A                                           l2357 4DA2  
                                         l2381 1A0C                                           l1726 797A  
                                         l3094 173E                                           l2710 442A  
                                         l2462 0212                                           l2446 0010  
                                         l2390 1B78                                           l2382 196C  
                                         l2374 183E                                           l1735 7EA6  
                                         l3095 1734                                           l2439 0B42  
                                         l2455 0038                                           l2447 0026  
                                         l2359 4E5C                                           l3088 1670  
                                         l2712 4476                                           l2480 0520  
                                         l2464 0244                                           l2448 0062  
                                         l2456 0050                                           l2384 19A4  
                                         l2376 18DE                                           l2713 4462  
                                         l2481 048C                                           l2465 0296  
                                         l2457 005C                                           l2377 190A  
                                         l2369 1780                                           l3098 3998  
                                         l2730 7A56                                           l2706 435C  
                                         l2810 3D16                                           l2490 05F8  
                                         l2466 039A                                           l2458 070A  
                                         l1827 4C66                                           l3099 39A8  
                                         l2723 41F4                                           l2483 053C  
                                         l2475 0412                                           l2459 010A  
                                         l2387 1AD8                                           l2379 1954  
                                         l1828 4C86                                           l2724 4242  
                                         l2708 4382                                           l2812 3D50  
                                         l2492 06FC                                           l2484 052E  
                                         l2725 4294                                           l2901 64D8  
                                         l2709 43D6                                           l2813 3DA4  
                                         l2493 06EE                                           l2469 0330  
                                         l2389 1B8A                                           l2726 42E6  
                                         l2902 64C8                                           l2718 44A2  
                                         l2822 3E5E                                           l2814 3DE8  
                                         l2486 056E                                           l2719 4492  
                                         l2823 3E4E                                           l2495 0756  
                                         l2487 0572                                           l2399 52AE  
                                         l1784 4B02                                           l2816 3E32  
                                         l2488 0596                                           l1873 7B34  
                                         l1785 4B10                                           l2761 5082  
                                         l2753 4FD4                                           l2905 6522  
                                         l2817 3E1E                                           l2681 5A8C  
                                         l2497 077E                                           l2489 06E0  
                                         l2762 5072                                           l2906 6534  
                                         l2682 5A9A                                           l2674 5A16  
                                         l2690 631A                                           l1787 4B1A  
                                         l2755 5056                                           l2683 5AAE  
                                         l2675 5A2C                                           l2691 630E  
                                         l2764 50A8                                           l2756 5042  
                                         l2677 5A56                                           l2678 5A4A  
                                         l2694 6344                                           l2695 6352  
                                         l2687 62EA                                           l2944 6BD2  
                                         l2696 6366                                           l2688 62FA  
                                         l2945 6BC6                                           l2954 729E  
                                         l2955 7292                                           l2891 5AF6  
                                         l2948 6C08                                           l2892 5AE6  
                                         l2980 0E4C                                           l2949 6C16  
                                         l2958 72C8                                           l2982 0E82  
                                         l2959 72D6                                           l2895 5B50  
                                         l2991 0FDE                                           l2983 0E96  
                                         l2896 5B62                                           l2992 0FAA  
                                         l2984 0EC4                                           l2993 0FBE  
                                         l2985 0EBA                                           l2994 0FC4  
                                         l2978 0E28                                           l2995 0FCE  
                                         l2987 0F2A                                           l2979 0E56  
                                         l2988 0EEE                                           l2997 106E  
                                         l2998 100E                                 ??_Console_Init 0060  
                        Port_SetPinType@pInput 0086                                           STR_1 FFFB  
                                         STR_2 FF95                                           STR_3 FFFB  
                                         STR_4 FF95                                           STR_5 FFFB  
                                         STR_6 FFED                                           STR_7 FFFB  
                                         STR_8 FF59                                           STR_9 FFFB  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                                 printf@tmpval 0110                            __end_of_GetPortPORT 622A  
                     __end_of_irobot_song_play 7FB4                                           u8120 2690  
                                         _PIR1 000F9E                                           _PIR2 000FA1  
                                         _PIR3 000FA4                                           u8150 26FA  
                          __end_of_GetPortTRIS 60DE                                           u8160 2728  
                                         _SPI1 0379                                           _SPI2 0384  
                                         _TMR0 000FD6                 irobot_query_and_update@RXArray 0100  
                            rx_assign@packetID 0065                                           _gISR 0314  
                           Event_DIPSwitch@Bar 007A                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 0063                                  _iRVirtualWall 0335  
                         __size_of_ADC_SetupIO 0032                             SPI_MaxSpeed@pInput 006F  
                                         _dist 0326                                  ?_Byte_SetByte 0060  
                                ?_Byte_SetPair 006B                                __end_of_SPI_DCS 7B9E  
                                         _main 52AA                     irobot_leds@powerLuminosity 0072  
                                         _init 5F92                                           _mode 0328  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 006B  
                                         _itos 5462                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 0060                                           btemp 0051  
                                         _zero 03FC                               __end_of_ADC_Init 6BA8  
                                ??_Byte_SetBit 0064                             __size_of_LCD_Reset 0050  
                         __size_of_ADC_Voltage 00D8                                           prodh 000FF4  
                                         prodl 000FF3                               Motor_Move@pDelta 0065  
                                         start 14AA                             __size_of_LCD_Write 0022  
                                __CFG_IESO$OFF 000000                                ___fldiv@new_exp 007F  
                            Timer0_Init@DIVIDE 0077                                ?_SPI_DisableISR 0060  
                             Motor_Move@pMotor 0063                            HMI_SetButton@pValue 0066  
                                Console_Init@x 0062                                  Console_Init@y 0063  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FF4B  
                         Set_Rotation@rotation 0066                         __size_of_HMI_SetButton 0090  
                       __size_of_HMI_SetNumber 002A                                    ?_ISR_Enable 0001  
                           _irobot_init_song_0 7D62                   __size_of_Console_ClearCursor 003E  
                             __end_of_LCD_Fill 7446                               __end_of_LCD_Init 4936  
                               ?_HMI_DIPSwitch 0001                                  __CFG_PLLDIV$3 000000  
                             __end_of_LED_Init 727E                                   _BAUDCON1bits 000F7E  
                                ??_Button_Init 00A8                        GetPortProperties@pInput 0062  
                                ??_Button_Poll 007E                               __end_of_HMI_Init 394E  
                                        l14004 7058                                          l14100 7448  
                                        l13132 4332                                          l14102 745A  
                                        l14062 4C66                                          l10962 274A  
                                        l15310 6A42                                          l15160 7424  
                                        l13560 679A                                          l15156 7416  
                                        l15180 6CDA                                          l15238 40F2  
                                        l13566 67AA                                          l13728 550C  
                                        l15280 5726                                          l15184 6CE8  
                                        l16240 0296                                          l15274 5716  
                                        l13780 5C1A                               __end_of_HMI_Poll 6E66  
                                        l13846 8042                                          l15384 4B02  
                                        l16344 0784                                          l16248 02FE  
                                        l16362 0806                                          l18210 21CE  
                                        l16292 052E                                          l16268 0418  
                                        l15814 4854                                          l15912 3920  
                                        l15824 48F8                                          l15842 6836  
                                        l15836 6826                                          l13996 701A  
                                        l15924 78CE                                          l18244 2312  
                                        l18228 226E                                          l13998 702C  
                                        l15870 3596                                          l18372 196C  
                                        l18390 1A0C                                          _I2C1T 03C8  
                                        _I2C2T 03C1                                  ___fltol@sign1 00BA  
                              __end_of___fladd 12B2                                          ?_main 0001  
                                        ?_init 0001                                __end_of___fldiv 2782  
                              __end_of___awdiv 5AB8                          irobot_rotate@isScript 0082  
                              __end_of___flneg 7A68                                          ?_itos 0067  
                                        STR_10 FFD8                                          STR_11 FFC3  
                                        STR_12 FFC3                                          STR_13 FFC3  
                                        STR_14 FFC3                                __end_of___awmod 6370  
                              __end_of___flmul 1758                                __end_of___flsub 7616  
                              __end_of___fltol 50BA                                _Event_DIPSwitch 7BFE  
                              __end_of___lldiv 5B74                                          u11050 550C  
                                        u11220 5A5C                                          u11060 7182  
                                        u12110 125A                                          u12030 11CC  
                                        u11070 71AC                                          u11320 7058  
                                        u11410 4CD2                                          u11170 77DA  
                                        u13011 3D2C                        __size_of_HMI_LeftSwitch 0018  
                                        u10700 6AC2                                          u11260 5AFC  
                                        u12220 137A                                          u12060 11EC  
                              ___awdiv@divisor 0068                                          u12310 16D4  
                                        u12230 158E                                          u11440 7480  
                                        u12320 16FA                                          u14000 07D0  
                              __end_of___llmod 6546                                          u12235 1582  
                                        u10660 6432                                          u11380 75BC  
                                        u13220 4FF4                                          u13140 44AC  
                                        u14020 08AC                                          u11605 27E0  
                                        u10734 71D4                                          u13070 3E68  
                                        u10735 71CE                                          u11615 2802  
                                        u10744 7206                                          u10680 6498  
                                        u12280 166A                                          u10745 7200  
                                        u11385 75B6                                          u11625 2982  
                                        u13225 4FE8                                          u10930 6BD8  
                                        u13410 47E4                                          u12370 6320  
                                        u10850 67F6                                          u10667 6428  
                                        u11395 4C1E                                          u11635 2A00  
                                        u10764 5C9C                                          u12540 7440  
                                        u12620 4192                                          u11900 0FEA  
                                        u13260 508C                                          u10860 67FC  
                                        u10685 6492                                          u10765 5C96  
                                        u11645 2A42                                          u10790 77AE  
                                        u11494 663A                                          u12518 4A84  
                                        u10774 5CCE                                          u11670 7AF6  
                                        u12710 6A98                                          u11495 6634  
                                        u10775 5CC8                                          u11655 2A84  
                                        u10960 72A4                                          u11585 27B0  
                                        u12705 6A5A                                          u12458 56CE  
                                        u13450 48F8                                          u13370 3AA0  
                                        u11850 0F74                                          u13290 64DE  
                                        u10795 77A8                                          u11595 27C8  
                                        u11675 7AF0                                          u12468 4948  
                                        u12740 7680                                          u12820 4B6E  
                                        u12660 579A                                          u12580 6D04  
                                        u11860 0F8C                                          u12469 495C  
                                        u14318 5950                                          u12670 57A6  
                                        u13550 371C                                          u11870 0F8E  
                                        u14319 5964                                          u13480 6898  
                                        u13800 025A                                          u10985 800C  
                                        u14338 597C                                          u10986 800E  
                                        u12850 4ED2                                          u13810 02AC  
                                        u14339 5990                                          u12860 4EE6  
                                        u14358 59A8                                          u12774 7B56  
                                        u12870 4F26                                          u13910 0550  
                                        u14359 59BC                                          u12775 7B50  
                                        u13920 0566                                          u13840 02FE  
                                        u14378 59D4                                          u12890 5DB6  
                                        u14379 59E8                                          u12991 3CF2  
                                        u13880 0464                                          u16370 1FEE  
                                        u16380 200A                                          u16630 1774  
                                        u16800 1BA6                                          u16640 1790  
                                        u16298 7916                                          u16490 227C  
                                        u16570 4D80                                          u16730 1A1A  
                                        _INDEX 00F1                                          u16299 792C  
                                        u16580 4D9C                                          u16760 1AE6  
                                        u16761 1AE4                                __end_of___lwdiv 6C20  
                                        _MASKS FD5B                                __end_of___lwmod 72E0  
                                        i2l430 5F00                                          i2l432 5F26  
                                        i2l433 5F50                                          i2l427 5F76  
                                        i2l732 6C6C                                          i2l733 6C66  
                                        i2l832 7848                                          i2l781 7BEC  
                              ___awdiv@counter 006A                            ?_irobot_init_song_0 0001  
                                        _PORTA 000F80                                          _PORTB 000F81  
                                        _PORTC 000F82                                          _PORTD 000F83  
                                        _PORTE 000F84                                          _PORTF 000F85  
                                        _PORTG 000F86                        __size_of_HMI_DownSwitch 0018  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TRISD 000F95  
                                        _TRISE 000F96                                          _TRISF 000F97  
                                        _TRISG 000F98                               ??i2_Byte_GetPair 000D  
                             ??i2_Byte_GetZone 0006                             Port_TogglePin@pPin 0076  
                              __end_of_getMode 59FA                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 04E6                                          _PortB 03A3  
                                        _PortC 03AD                                          _PortD 0399  
                                        _PortE 038F                                          _PortF 03B7  
                                        _PortG 04DC                        __end_of_Port_SetPinType 3CDC  
                              _ADC_Initialised 033E                                 ??_Byte_GetPair 006C  
                        ??_irobot_led_power_on 0074                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 0075                                __end_of_dpowers FD3B  
                               ??_Byte_GetZone 0065                      irobot_move@moveTurnRadius 0072  
                                        _mode1 1FD2                                          _mode2 4D58  
                                        _mode3 7FC8                                          _mode4 1758  
                               Button_Poll@Pin 0083                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 593A                                          _scale 08D0  
                             __end_of_MXK_Init 47C4                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 8022                               __end_of_SPI_Init 1FD2  
                             __end_of_SPI_Send 6F42                          __end_ofi2_MXK_Release 80F6  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 6FAE                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 0063                              __end_of_ADC_Start 69AC  
                               ??_Byte_SetPair 006F                                 ??_Byte_SetQuad 006F  
                                        plusw2 000FDB                                 ??_Byte_SetZone 0066  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 6E66  
                         i2MXK_Queue@pCallback 0001                                    i2delay_us@u 0003  
                         ??_irobot_init_song_0 0061                                 _LCD_Word_Write 7DBE  
                          __size_of_LED_Toggle 0048                            __size_of_HMI_GetBar 0006  
                                ?_HMI_UpSwitch 0001                                     _Event_NULL 1404  
                  __size_of_Port_CheckPairType 006A                                    mode1@moveto 00D9  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 0070  
                                 ?_irobot_init 0001                                __initialization 666E  
                          __size_of_HMI_Render 003E                                   ?_irobot_move 0070  
                          __end_of_Byte_GetBit 7B08                         irobot_leds@powerColour 0071  
                                 __end_of_main 538A                                   __end_of_init 6038  
             irobot_query_and_update@packetIDs 0075                                   __end_of_itos 553A  
                         HMI_SetButton@reindex 0062                                   SPI_Send9@dat 0332  
                          __end_of_Byte_SetBit 721C                               __end_of_InitList FCAB  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 8010  
                                    ??_ADC_Off 0060                        __end_of_update_distance 7FEC  
                  __size_of_Port_CheckPortType 0048                                    HMI_Render@a 0068  
                                       ??_main 00DF                                         ??_init 00AA  
                                       ??_itos 006B                        _Console_MakeField$10974 006E  
                                __activetblptr 000003                              Port_SetPin@pInput 006F  
                            __end_of_LCD_Reset 7538                              Port_SetPin@pValue 0072  
                         __size_of__tdiv_to_l_ 019E                                      ??_LED_Set 0075  
                            _MXK_InitDIPSwitch 7E18                              GetPortPORT@pInput 0062  
                       Port_CheckPairType@Pin1 008A                         Port_CheckPairType@Pin2 008B  
                            __end_of_LCD_Write 7D1E                                    _GetPortPORT 6184  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 6038  
                              ??_LCD_DrawField 007C                     __end_of_PortProperty_Valid 6B2C  
                             __end_of_Port_Set 2B3C                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 56E4  
                          __end_of_Button_Poll 4A9C                              Word_GetPair@pPair 006E  
                      LCD_FillRectangle@pPoint 006B                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 65DE                                      ??_SPI_DCS 0062  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                             ___llmod@dividend 006D                                         ?_scale 00A0  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                       _ADC_On 80DE                                  _HMI_SetNumber 7C84  
                       Port_SetQuadType@Output 009A                                         _ANCON0 000FC1  
                             ___awdiv@dividend 0066                                         ?_putch 0001  
                             ??_Console_Render 0083                                  ToSegment@pCHR 0060  
                             _Console_FormFeed 6788                         Port_SetQuadType@pInput 0096  
                                       i2l1630 5120                                         i2l1631 516C  
                                       i2l1632 5158                                         i2l1730 7AB0  
                                       i2l1627 51A8                                         i2l1732 7AD0  
                                       i2l1628 519E                                         i2l1629 5136  
                                       i2l1590 145E                                 __CFG_WDTEN$OFF 000000  
                          __size_of_ISR_Enable 000A                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 7DDC  
                               _Timer0_Restart 808E                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 009B                                         _TXREG1 000FAE  
                             __end_of___xxtofl 3B1C                                 i2_MXK_SwitchTo 7A9E  
                                       _TXSTA1 000FAD                                Byte_GetBit@pBit 0062  
                                   _Reset_High 7DFA                             Console_Render@temp 0085  
                               ??_HMI_UpSwitch 0066                                 OutSeg@pSegment 0063  
                              ??i2_Timer0_Stop 0001                            Port_TogglePin@Value 0077  
                       ADC_SetChannel@pChannel 0061                               __end_of_delay_ms 7082  
                                 LED_Init@pLED 008D                               __end_of_delay_us 7498  
                                ??_Timer0_Init 0071                                  ??_Timer2_Init 0071  
                                ??_Timer0_Stop 0060                                     _Timer0_ISR 7C2C  
                     __size_of_Console_NewLine 00A0                              Timer2_Init@DIVIDE 007A  
                               __CFG_XINST$OFF 000000                               __end_of__powers_ FCDF  
                                       _TimerX 0049                                         _OutSeg 6A2E  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 553A  
                   __end_of_load_iRScriptStack 7018                                     _Motor_Move 79F6  
                                       _iRWall 033A                                  ??_Motor_Speed 007F  
                                       ___flge 41A6                                     _Motor_Step 4E88  
                          rx_assign@byteNumber 0062                        __end_of_Event_DIPSwitch 7C2C  
                                    ??___fladd 00B5                                         ___wmul 7A68  
                              ??_HMI_DIPSwitch 0066                  load_iRScriptStack@bytesToLoad 006E  
                                    ??___fldiv 0076                                      ??___awdiv 006A  
                                    ??___flneg 0064                                 __CFG_STVREN$ON 000000  
                                    ??___awmod 0064                                         _change 004E  
                                    ??___flmul 008F                                         _lMotor 00EA  
                                    ??___flsub 00C9                                      ??___fltol 00B6  
                                    ??___lldiv 0068                                         _lQueue 00E1  
                                   _TestButton 04D2                                      ??___llmod 0075  
                                    ??___lwdiv 0064                             __size_of_ToSegment 0284  
                                    ??___lwmod 0064                       __end_of_Port_SetQuadType 331C  
                     i2Byte_GetZone@pChunkSize 0005                                   HMI_GRender@a 0031  
                         __end_of_Console_Init 689E                                         _fround 2B3C  
                            GetPortTRIS@pInput 0062                             __size_of_Reset_Low 001E  
                                       clear_0 66B6                                         clear_1 66C8  
                                       clear_2 66D4                                         clear_3 66E0  
                                       clear_4 66EC                               ___awdiv@quotient 006C  
                              ___awmod@divisor 0062                     irobot_stop_motion@isScript 0079  
                                ?_eusart_getch 0001                                     Port_Init@i 00A5  
                                   _iRDistance 0330                              __end_of_MXK_Queue 8068  
                   __end_ofHMI_SetButton@F7213 FD68                                      ??_getMode 0084  
                              ___awmod@counter 0064                                     _iRBumpLeft 00EE  
                                       _printf 0000                                     _iRBumpDrop 0037  
                    __end_of_MXK_InitDIPSwitch 7E36                                  _ADC_Calibrate 7FB4  
                                   _iRDropLeft 0035                                 HMI_SetButton@v 0067  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 0061  
                                  _Console_Tab 5878                            LCD_Word_Write@value 0065  
                                 __pdataCOMRAM 0045                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 0063                       Port_CheckPortType@Output 0099  
                                    ?_ADC_Init 0064                             _twos_complement_of 77C0  
                              ??i2_Port_SetPin 0014                                   __mediumconst FBF8  
                  __end_ofTimer2_Init@PRESCALE FD6B                       Port_CheckPortType@pDrive 0098  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 0096  
                                ??_Port_SetPin 0073                                      ??_reverse 0064  
                                   _StepRotate 0029                          Console_MakeField@Fill 0482  
                             ?_Port_SetPinType 0086                                         putch@c 007A  
                            Motor_Speed@pMotor 007B                                 ?_HMI_SetNumber 0071  
                               i2_Word_GetPair 7BCE                        __end_of_Configure_GPIOs 6ED6  
                          irobot_leds@isScript 0073                               ??_MXK_TestButton 0066  
                       __end_of_Timer0_Restart 809A                                  Set_Rotation@m 0065  
                                 ?_MXK_Release 0001                            ?_twos_complement_of 0060  
                                   ___flge@ff1 0060                                     ___flge@ff2 0064  
                __size_of_irobot_move_straight 0018                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 7AD4                                   ___xxtofl@arg 006A  
                                 i2delay_us@us 0001                                   ___xxtofl@exp 0069  
                                 ___xxtofl@val 0060                          _update_bump_and_cliff 79BC  
                              ?_LCD_Word_Write 0065                                     __accesstop 0060  
                      __end_of__initialization 66F2                                      ?_LCD_Fill 0069  
        irobot_query_and_update@packetVariable 0079                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 0092                                     ___flneg@f1 0060  
                                  _Byte_GetBit 7AD4                                     _Stepstomin 00E6  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 80A6  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 0068  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 0060  
                                   ___fltol@f1 00B2                                    _Byte_SetBit 71B8  
                                __end_of_MASKS FD64                                 _PortA_Property FF57  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 006B  
                                    LCD_Fill@j 006C                            load_iRScriptStack@i 006F  
                                    LCD_Init@i 0097                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF55                            __size_ofi2_delay_us 0040  
                                 __pidataBANK3 8010              irobot_move_straight@straightSpeed 0079  
                          i2Byte_SetBit@pInput 0001                           __end_of_Byte_GetPair 7E72  
                              Console_Render@x 008A                                Console_Render@y 008B  
                          i2Byte_SetBit@pValue 0004                                  ?_Set_Rotation 0001  
                          Timer0_Init@PRESCALE FD3B                           __end_of_Byte_GetZone 64AC  
                                __end_of_mode1 23C2                                  __end_of_mode2 4E88  
                                __end_of_mode3 7FDA                                  __end_of_mode4 1BB4  
                                __end_of_scale 0E0A                           ??_twos_complement_of 0062  
                            irobot_leds@LEDBit 0070                                 _PortC_Property FF53  
                          __end_of_Timer0_Init 4BFA                                  __end_of_putch 8030  
                               ??_eusart_getch 0060                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 4D58                            __end_of_Timer0_Stop 80D8  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 008D  
                             ?_update_distance 0001                                      ?_SPI_Send 0060  
                               ??_eusart_putch 0060                                    _Button_Init 5610  
                            Port_SetType@pType 009C                                    _Button_Poll 4936  
                         __end_of_Byte_SetByte 805A                           __end_of_Byte_SetPair 7D40  
                               _HMI_LeftSwitch 7F70                                 _PortD_Property FF51  
                         __end_of_Byte_SetQuad 7D62                                   ??_LED_Toggle 0078  
                                 ??_HMI_GetBar 0060                     eusart_putch@eusartSendChar 0060  
                         __end_of_Byte_SetZone 5CE4                            __end_of_Motor_Speed 7C84  
                               _HMI_DownSwitch 7F28                                  SPI_Send@pData 0062  
                                   __div_to_l_ 4336                          __end_of_MXK_DIPSwitch 7F10  
                                 ??_HMI_SetBar 0060                       __size_of_get_packet_size 0066  
                                 ??_HMI_Render 0068                                 _PortE_Property FF4F  
                                   ??_ADC_Init 0067                       __size_of_HMI_SetSegments 00BA  
                       __end_ofi2_Word_GetPair 7BFE                        irobot_rotate@angleTotal 0083  
                               _PortF_Property FF4D                        Port_CheckQuadType@Pair1 0093  
                      Port_CheckQuadType@Pair2 0094                       MXK_BlockSwitchTo@pModule 0067  
                              __div_to_l_@exp1 006D                                        ??_mode1 00D7  
                                      ??_mode2 00D7                                        ??_mode3 0087  
                              __div_to_l_@cntr 006C                                        ??_mode4 00D7  
                                      ??_scale 00A4                                        ?_ADC_On 0001  
                            _Console_Backspace 72E0                                __div_to_l_@quot 0068  
                              ?_Timer0_Restart 0001                                        ??_putch 007A  
                     __size_of_HMI_RightSwitch 0018                            _Console_ClearCursor 7886  
                            __end_of_ToSegment 30C6                                 _PortG_Property FF4B  
                                   __pbssBANK0 00E1                                     __pbssBANK3 0300  
                                   __pbssBANK4 0400                            __end_of_Port_GetPin 77C0  
                           _irobot_stop_motion 76EE                        Port_CheckQuadType@pQuad 0091  
                              reverse@iterator 0065                               ??_SPI_DisableISR 0062  
                              ?i2_MXK_SwitchTo 0001                              ?_irobot_song_play 0001  
                           ?_Console_Backspace 0001                              __end_of_Reset_Low 7DFA  
                    __size_of_Event_TestButton 0034                        __size_of_Port_TogglePin 0030  
                                   ??_LCD_Fill 006B                                     ??_LCD_Init 0095  
                         __size_of_eusart_init 001E                            __end_of_Port_SetPin 5878  
                       __end_of_PortA_Property FF59               irobot_led_power_on@powerOnColour 0074  
                                    ?_Mode_Set 0001                             Byte_SetByte@pInput 0060  
                                   ??_LED_Init 008D                       ADC_ClockDivision@pDivide 0060  
                           Byte_SetByte@pValue 0062                                  ?_ISR_Function 0001  
                                  ?_Reset_High 0001                             _ADC_ConversionTime 765E  
                                ?_Timer0_Clear 0001                                     ??_HMI_Init 00A8  
                           ??_irobot_song_play 0061                                     ??_HMI_Poll 0084  
                                ?_Timer2_Clear 0001                                  __div_to_l_@f1 0060  
                                __div_to_l_@f2 0064                        Port_CheckPairType@Props 008D  
                       __end_of_PortB_Property FF57                                  ?_Timer0_Start 0060  
                          ?_irobot_stop_motion 0001                              __end_of_Port_Init 41A6  
                                  ?_Timer0_ISR 0001                        Port_CheckPairType@pPair 0088  
                           __end_of_LED_Toggle 76EE                             __end_of_HMI_GetBar 80EA  
                     LCD_FillRectangle@pColour 0069                                     _angleTotal 002B  
                          ??_Console_Backspace 0062                              Set_Addr_Window@xe 0066  
                            Set_Addr_Window@ye 0067                              Set_Addr_Window@xs 0068  
                            Set_Addr_Window@ys 0065                                        ?_OutSeg 0063  
                                  ?_Motor_Init 008D                             Byte_SetPair@pInput 006B  
                                  ?_Motor_Move 0063                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 006E                                        ?___flge 0060  
                           __end_of_HMI_SetBar 80BA                         __end_of_PortC_Property FF55  
                           Word_GetPair@pInput 006C                             __end_of_HMI_Render 7902  
                               ??_Set_Rotation 0065                                      ?_Port_Set 006F  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 0060  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 0065  
                                 ??_ISR_Enable 0060                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 7F88                         __end_of_PortD_Property FF53  
                                      _ADC_AN0 0040                                        _ADC_AN1 03DF  
                                      _ADC_AN2 03DA                                        _ADC_AN3 03D5  
                                   ??_MXK_Init 00A6                              Port_GetPin@pInput 0060  
                            _Console_MakeField 56E4                                        ?_fround 00A0  
                                      _ADC_Off 80CA                              ??_Console_NewLine 0060  
                     ADC_ClockDivision@unfound 0062                         __end_of_HMI_DownSwitch 7F40  
                                   ??_SPI_Init 0093                         Event_TestButton@pState 0079  
                                   ??_SPI_Send 0063                                        ?_printf 00C9  
                            ??_HMI_InitButtons 0060                     __size_of_MXK_InitDIPSwitch 001E  
                     __size_of_move_and_rotate 0082                         __end_of_PortE_Property FF51  
                          Console_Render@F6956 03EC                             ?_Console_MakeField 0065  
                                      _COUNTER 002F                                        i2l10226 7848  
                                      i2l10228 7858                                ??_HMI_SetButton 0060  
                         __end_of_HMI_UpSwitch 7F58                           ??_irobot_stop_motion 0079  
                                      _LED_Set 7498                        _Console_IncrementCursor 7152  
                                    ?___xxtofl 0060                         __end_of_PortF_Property FF4F  
                                  _gBackcolour 0033                                ??_HMI_SetNumber 0073  
                                    _I2C1_Done 0323                                ?i2_Word_GetPair 000D  
                                    _I2C2_Done 0320                                      _I2C1_More 031D  
                                    _I2C2_More 031A                                      ?_delay_ms 0060  
                    __end_of_Console_Backspace 733C                                      ?_delay_us 0060  
                          __size_of_Event_NULL 0002                     __end_of_MXK_InitTestButton 7E54  
                                      _SSP1ADD 000FC8                                        _SSP1BUF 000FC9  
                                      _SSP2BUF 000F6F                             __size_of_rx_assign 00F0  
                         ??_ADC_ConversionTime 0060                         __end_of_PortG_Property FF4D  
                          ??_Console_MakeField 0067                        __size_of_ADC_SetChannel 001C  
                                      _IRValue 00E4                                        _SPI_DCS 7B6E  
                         __size_ofi2_MXK_Queue 000E                                  ??_ADC_SetupIO 0060  
                             ?_Configure_GPIOs 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 00AA  
                             ADC_Init@pChannel 0066                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00A4                             __end_of_ISR_Enable 80B0  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 0060                              Event_TestButton@j 0039  
                                   ??_Mode_Set 0060                                 ??_Timer2_Clear 0060  
                                      _Font5x7 FD6B                           i2Byte_GetZone@pChunk 0004  
                     ADC_ConversionTime@pCount 0061                                        _MinDist 004B  
                         i2Byte_GetZone@pInput 0001                                 ??_Timer0_Start 0063  
                         SPI_DisableISR@pInput 0060                                  ?_Port_GetQuad 0060  
                              Byte_SetBit@pBit 0062                           Port_TogglePin@pInput 0074  
                        __end_ofi2_Byte_SetBit 7584                                      _ADC_Start 6928  
                            __end_of__npowers_ FD13                                        __Hparam 0000  
                            Port_GetQuad@pQuad 0062                                    _Timer0_Init 4A9C  
                                  _Timer2_Init 4BFA                                        __Lparam 0000  
                                  _Timer0_Stop 80D2                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD5B  
                                      _iRAngle 032E                                  LCD_Write@mode 0063  
                              __size_of_OutSeg 0082                                     ??_Port_Set 0072  
                              __size_of___flge 0190                      __end_of_Console_MakeField 57B4  
                            _Console_PrintChar 3E7A                                    _Motor_Speed 7C5A  
                                      _Stepper 03CF                                        ___fladd 0E0A  
                                ?_Port_SetType 009A                                        _gCursor 0045  
                                      ___fldiv 23C2                                        ___awdiv 59FA  
                                      ___flneg 7A30                          ??_Console_ClearCursor 0060  
                                      ___awmod 62CE                                        ___flmul 12B2  
                                      ___flsub 75CE                                        ___fltol 4FAE  
                                      _lBuffer 04F0                                        ___lldiv 5AB8  
                              __size_of___wmul 0036                                ??_ADC_Calibrate 0060  
                                      ___llmod 64AC                                        ___lwdiv 6BA8  
                                      ___lwmod 727E                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 6814                             ?_Console_PrintChar 0001  
                                      __pcinit 666E                                __size_of_fround 0306  
                              ?_HMI_DownSwitch 0001                                        __ramtop 1000  
                                      _getMode 593A                                        __ptext0 52AA  
                                      __ptext1 1758                                        __ptext2 7FC8  
                                      __ptext3 69AC                                        __ptext4 5D94  
                                      __ptext5 4D58                                        __ptext6 7EE0  
                                      __ptext7 1FD2                                        __ptext8 7FDA  
                                      __ptext9 79BC                                __size_of_printf 08D0  
                                    _T0CONbits 000FD5                    __end_of_irobot_led_power_on 7E8E  
                            i2MXK_SwitchTo@CUR 0007                                    ?__div_to_l_ 0060  
                                      _dpowers FD13                                      _T2CONbits 000FCA  
                                LED_Set@pValue 0074                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 0079                                     ??___xxtofl 0064  
                                 ?_GetPortPORT 0060                               ___awmod@dividend 0060  
                                 ?_GetPortTRIS 0060                            ??_Console_PrintChar 0076  
                                  _Port_GetPin 777A                              __CFG_MSSPMSK$MSK5 000000  
                          LCD_DrawRectangle@p2 03E8                            LCD_DrawRectangle@p4 03E4  
                                 ??i2_delay_us 0003                                     ??_delay_ms 0062  
                                   ??_delay_us 0062                                        _reverse 6F42  
                                    _DIPSwitch 04C8                            __size_of_Timer0_ISR 002E  
                                  _Port_SetPin 57B4                                    _iRBumpRight 00EF  
                               LCD_DrawField@i 0082                                      _LCD_Reset 74E8  
                          __size_of_Motor_Init 00D6                            __size_of_Motor_Move 003A  
                          __size_of_Motor_Step 0126                                      _LCD_Write 7CFC  
                                  _iRDropRight 0036                           __size_of_MXK_Dequeue 003E  
                                   delay_ms@ms 0060                           end_of_initialization 66F2  
                          ADC_SetupIO@pChannel 0062                              ??_get_packet_size 0060  
irobot_query_and_update@numberOfPacketRequests 0078                                     delay_us@us 0060  
                            ??_HMI_SetSegments 0063                        Console_PrintChar@pInput 0079  
                                 _Console_Init 6814                           __end_of_eusart_getch 80C2  
                      _irobot_query_and_update 44BE                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 70EC                           __end_of_eusart_putch 804C  
                                      itos@Out 006F                                 ??_Port_GetQuad 0063  
                           _PortProperty_Valid 6AB0                             Byte_SetQuad@pInput 006B  
                           SPI_MinSpeed@pInput 006F                                      i2u1631_48 7C44  
                           Byte_SetQuad@pValue 006E                            __end_of_ADC_SetupIO 7B6E  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 0064                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 0062                              ??_HMI_RightSwitch 0066  
                              ___lldiv@counter 006C                      __end_of_Console_PrintChar 4014  
                          __end_of_ADC_Voltage 5462                                 ??_Port_SetType 009D  
                   __end_of_Port_CheckQuadType 7396                                        printf@c 0118  
                                      printf@f 00C9                                 Port_Init@pPort 00A2  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 0069                              __end_of_rx_assign 52AA  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 006F                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 765E                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 7886                             Button_Init@pInitIO 009F  
                                _irobot_rotate 5D94                                 __tdiv_to_l_@f1 0060  
                               __tdiv_to_l_@f2 0064                          Timer0_Init@pFrequency 006D  
                            ?_Port_SetQuadType 0096                                    _gForecolour 03F8  
                                ??__tdiv_to_l_ 0068                      ??_Console_IncrementCursor 0064  
                       __size_ofi2_MXK_Release 0006                                      _PORTFbits 000F85  
                           ??_Port_SetQuadType 009A                                   ?_Console_Tab 0001  
                             Byte_GetZone@MASK 0066                                    ___fladd@grs 00C0  
                        Console_Render@lCursor 0086                             _load_iRScriptStack 6FAE  
                                    _MXK_Queue 805A                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 0068                               Byte_GetZone@pMax 0062  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 006C                                _Set_Addr_Window 5E3E  
                               SPI_Init@pClock 008D                               ??_LCD_Word_Write 0067  
                              _sort_iRBumpDrop 66FC                              ??_move_and_rotate 0087  
                                  ___fldiv@grs 0081                                    ___fldiv@rem 007B  
                        __end_of_LCD_DrawField 62CE                                 Port_Set@pInput 006F  
                               SPI_Init@pInput 0093                           ??_PortProperty_Valid 0073  
                            __size_of_ADC_Init 007C                                 Port_Set@pValue 0071  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 65DE  
                                   ?_LCD_Write 0063                                   _Byte_GetPair 7E54  
                           HMI_SetButton@F7213 FD64                            ?_load_iRScriptStack 0060  
                                 _Byte_GetZone 6410                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 0080                              LCD_DrawField@ymax 0081  
                               __end_of_ADC_On 80E4                                 _Port_TogglePin 7B9E  
                             _Event_TestButton 7B08                                    ___flmul@grs 0095  
                         Port_SetPinType@Props 008B                                   ?_Byte_GetBit 0060  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 804C  
                                 _Byte_SetPair 7D1E                                ADC_SetupIO@MASK 0063  
                                 _Byte_SetQuad 7D40                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 5C2E                           Port_SetPinType@pType 0089  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 0060  
                                ?_SPI_MaxSpeed 006F                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 0060                              __size_of_LCD_Init 0172  
                          __size_of__div_to_l_ 0188                              __size_of_LED_Init 0062  
                                ?_SPI_MinSpeed 006F                          __end_ofi2_Timer0_Stop 80F0  
                           ??i2_Timer0_Restart 0001                              __size_of_HMI_Init 01FA  
                            __size_of_HMI_Poll 0074                                  ?_update_angle 0001  
                                ?i2_Motor_Step 0001                     __size_of_Console_MakeField 00D0  
                               ?_irobot_rotate 007D                                 __end_of_OutSeg 6AB0  
                         ??_load_iRScriptStack 006A                   __end_of_irobot_move_straight 7EF8  
                               __end_of___flge 4336                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 7A9E                          __end_of_HMI_DIPSwitch 7F28  
                                __pidataCOMRAM 8076                                   ?_Button_Init 009B  
                                 ?_Button_Poll 007B                                      _Bus_State 004D  
                               __end_of_fround 2E42                            i2Byte_GetPair@pPair 000C  
                         __end_of_ISR_Function 14AA                           __end_of_Timer0_Clear 808E  
                            __size_of_MXK_Init 0180                           __end_of_Timer2_Clear 80CA  
                               __end_of_printf 08D0                              __size_of_SPI_Init 041E  
                      get_packet_size@packetID 0060                              __size_of_SPI_Send 006C  
                                ?_Word_GetPair 006C                               ??_Timer0_Restart 0060  
                         __end_of_Timer0_Start 7CFC                             Port_SetType@Output 009F  
                          start_initialization 666E                                     ?_MXK_Queue 0060  
                     PortProperty_Valid@Errors 0075                               ??i2_MXK_SwitchTo 0007  
                          __end_of__tdiv_to_l_ 3E7A                              _LCD_FillRectangle 6C96  
                           Port_SetType@pInput 009A                                 _ADC_SetChannel 7EAA  
                                   HMI_Init@in 00A8                            HMI_SetNumber@pInput 0071  
                        __end_ofi2_Port_SetPin 5F92                             __end_of_Event_NULL 1406  
                       rx_assign@packetIDValue 0061                         __end_of_Port_TogglePin 7BCE  
                                ?_Word_SetPair 006F                              Byte_SetBit@pInput 0060  
                                     ??_ADC_On 0060                                 ??_MXK_SwitchTo 0066  
                            Byte_SetBit@pValue 0063                             ?_LCD_FillRectangle 0069  
                    ??_irobot_query_and_update 0070                            _Console_ResetCursor 7D82  
                  PortProperty_Valid@pPinDrive 0071                                    _ADC_SetupIO 7B3C  
                         MXK_BlockSwitchTo@CUR 0066                       PortProperty_Valid@pInput 006F  
                                i2_MXK_Release 80F0                                    _ADC_Voltage 538A  
                       LCD_FillRectangle@pSize 006F                                 SPI_Send@pInput 0060  
                                 ??_Reset_High 0074                                ___llmod@divisor 0071  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 0071  
                        Port_SetQuadType@pQuad 0098                                ___llmod@counter 0075  
                                    _ToSegment 2E42                            ??_LCD_FillRectangle 0073  
                        Port_SetQuadType@pType 0099                                _Console_NewLine 6370  
                               ??_SPI_MinSpeed 0071                                    ??_ADC_Start 0064  
                                 _HMI_UpSwitch 7F40                                      _Reset_Low 7DDC  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 80D8  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019A  
                               ??_update_angle 007D                                 ADC_Init@pInput 0064  
                                    _gCharSize 03F4                               Timer2_Init@INDEX 00F0  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 0091                                       ??_OutSeg 0064  
                                    OutSeg@out 0067                        __size_of_Console_Render 020E  
                                 ??_Motor_Move 0067                                   ??_Motor_Step 0074  
                                    _iRAngleSS 0304                                       ??___flge 0068  
                                    _iRCliffFL 0338                                      _iRCliffFR 0337  
                           Byte_SetZone@Offset 0069                                       ??___wmul 0064  
                         ?_Console_ResetCursor 0001                                      _Port_Init 4014  
                                  __pdataBANK3 03EC                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                                       ??_fround 00A4  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 0063  
                                     ?_ADC_Off 0001                               ??i2_Word_GetPair 0010  
                           Byte_SetZone@pInput 0060                             Byte_SetZone@pValue 0065  
                                Mode_Set@pMode 0060                                       ??_printf 00D5  
                      __end_of_Set_Addr_Window 5EE8                       Port_CheckQuadType@Output 0095  
                      __end_of_sort_iRBumpDrop 6788                                      _gLineSize 03F0  
                     Port_CheckQuadType@pDrive 0092                                      ___fladd@a 00B1  
                                    ___fladd@b 00AD                                 ??_Word_GetPair 006F  
                                   fround@prec 00AC                       Port_CheckQuadType@pInput 008F  
                         __end_of_Port_GetQuad 75CE                                      ___fldiv@a 0072  
                                    ___fldiv@b 006E                      __end_of_LCD_FillRectangle 6D0A  
                                  __pbssBIGRAM 04F0                         __end_of_ADC_SetChannel 7EC6  
                                     ?_LED_Set 0074                                      ___flmul@a 008B  
                                    ___flmul@b 0087                                    __pbssCOMRAM 0029  
                                    ___flsub@a 00C5                                      ___flsub@b 00C1  
                              ADC_Start@pInput 0062                             __end_of_Reset_High 7E18  
                                __pcstackBANK0 0060                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                        ??_update_bump_and_cliff 007D  
                                 _fround$15633 00A8                                   _fround$15634 00A4  
                                   itos@Length 006D                          __size_of_eusart_getch 0008  
                               ??_Word_SetPair 0073                       __size_of_update_distance 0012  
                            __size_of___xxtofl 01CE                             __end_of_Timer0_ISR 7C5A  
                         __size_of_GetPortPORT 00A6                                    ??_LCD_Reset 0079  
                         __size_of_GetPortTRIS 00A6                           __end_of_Port_SetType 3546  
                                     ?_SPI_DCS 0060                          __size_of_eusart_putch 000E  
                              ?_Port_TogglePin 0074                                  ??_eusart_init 0060  
                                  ??_LCD_Write 0064                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                             __end_of_Motor_Init 5610  
                          __CFG_CCP2MX$DEFAULT 000000                             __end_of_Motor_Move 7A30  
                           __end_of_Motor_Step 4FAE                          Timer2_Init@pFrequency 006D  
                               ?i2_MXK_Release 0001                       Port_CheckPairType@Output 008C  
            twos_complement_of@complementValue 0060                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 0089                       Port_CheckPairType@pInput 0086  
                               reverse@tempVar 0064                             _MXK_InitTestButton 7E36  
                                   ?_Reset_Low 0001                                   ?_Timer0_Init 006D  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 006D  
                             ??_HMI_LeftSwitch 0066                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 0060                                  ??_irobot_leds 0073  
                                ??_irobot_init 0061                                ??_irobot_rotate 0081  
                                ??_irobot_move 0074                                  _lStepFunction 0317  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 006D  
                             ??_HMI_DownSwitch 0066                                      __pintcode 1408  
                                __pmediumconst FBF8                                   ?_Motor_Speed 007B  
                        ??_Console_ResetCursor 0060                                       ?___fladd 00AD  
                                     ?___fldiv 006E                                       ?___awdiv 0066  
                                    __ptext100 7DDC                                      __ptext101 7DFA  
                                    __ptext110 7B6E                                      __ptext102 80A6  
                                     ?___flneg 0060                                      __ptext111 5610  
                                    __ptext103 3754                                      __ptext120 7082  
                                    __ptext112 7E18                                      __ptext104 6D7E  
                                    __ptext121 6AB0                                      __ptext113 80D8  
                                    __ptext105 1BB4                                      __ptext130 689E  
                                    __ptext122 7D40                                      __ptext114 7E36  
                                    __ptext106 4BFA                                      __ptext131 7FB4  
                                    __ptext123 5C2E                                      __ptext115 3B1C  
                                    __ptext107 5AB8                                      __ptext140 7F40  
                                    __ptext132 80DE                                      __ptext124 6814  
                                    __ptext116 30C6                                      __ptext108 80C2  
                                    __ptext141 7F58                                      __ptext133 80CA  
                                    __ptext125 6928                                      __ptext117 7734  
                                    __ptext109 7CAE                                      __ptext150 6F42  
                                    __ptext142 7F70                                      __ptext134 593A  
                                    __ptext126 6B2C                                      __ptext118 7D1E  
                                    __ptext151 727E                                      __ptext143 7F88  
                                    __ptext135 6DF2                                      __ptext127 7B3C  
                                    __ptext119 733C                                      __ptext160 7E54  
                                    __ptext152 6BA8                                      __ptext144 7584  
                                    __ptext136 4936                                      __ptext128 7EAA  
                                    __ptext161 6410                                      __ptext153 5B74  
                                    __ptext145 7BFE                                      __ptext137 7EF8  
                                    __ptext129 765E                                      __ptext170 809A  
                                    __ptext162 71B8                                      __ptext154 2E42  
                                    __ptext146 1404                                      __ptext138 7F10  
                                    __ptext171 5EE8                                      __ptext163 777A  
                                    __ptext155 65DE                                      __ptext147 7B08  
                                    __ptext139 7F28                __end_of_irobot_query_and_update 4644  
                                    __ptext180 0000                                      __ptext172 7BCE  
                                    __ptext164 80B0                                      __ptext156 76A6  
                                    __ptext148 7C84                                      __ptext173 7EC6  
                                    __ptext165 80E4                                      __ptext157 7B9E  
                                    __ptext149 5462                                      __ptext174 6C20  
                                    __ptext158 57B4                                      _pShiftVal 00E8  
                                    __ptext175 7538                                      __ptext167 7C2C  
                                    __ptext159 797E                                      __ptext176 7A9E  
                                    __ptext168 50BA                                      __ptext177 7846  
                                    __ptext169 80EA                                      __ptext178 80F0  
                                    __ptext179 8068                                       ?___awmod 0060  
                                     ?___flmul 0087                                       ?___flsub 00C1  
                                     ?___fltol 00B2                                       ?___lldiv 0060  
                                   ?_Port_Init 00A0                                       ?___llmod 006D  
                                    __npowers_ FCDF                           Timer0_Init@pCPUClock 0073  
                                     ?___lwdiv 0060                                       ?___lwmod 0060  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 60DE                                       ?_getMode 0001  
                                  __tdiv_to_l_ 3CDC                                   _eusart_getch 80BA  
                  __end_ofTimer0_Init@PRESCALE FD4B                                   ??__div_to_l_ 0068  
                              _get_packet_size 70EC                                   _eusart_putch 803E  
                           ??_Console_FormFeed 0060                                _HMI_SetSegments 5B74  
                           ?_GetPortProperties 0060                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 0063                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 0060                                       _ADC_Init 6B2C  
                 irobot_rotate@rotateDirection 0085                          __end_of_HMI_SetButton 666E  
                         __size_of_Console_Tab 00C2                                       ?_reverse 0060  
                         irobot_move@moveSpeed 0070                                   ?_Port_SetPin 006F  
                        __end_of_HMI_SetNumber 7CAE                               ___lwdiv@quotient 0065  
                              _HMI_RightSwitch 7F58                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 03F0                                 __size_of_mode2 0130  
                               __size_of_mode3 0012                                 __size_of_mode4 045C  
                          ??_GetPortProperties 0062                                 __size_of_scale 053A  
                      __end_of_Console_NewLine 6410                           ??_MXK_InitTestButton 008D  
                           Byte_GetPair@pInput 0069                                 __size_of_putch 000E  
                      __end_of_HMI_InitButtons 80DE                              i2Port_SetPin@Type 0014  
                         _irobot_move_straight 7EE0                              i2Port_SetPin@pPin 0012  
                               i2_Byte_GetPair 7EC6                                       _LCD_Fill 73EE  
                                     _LCD_Init 47C4                                 ___wmul@product 0064  
                                     _HMIBoard 033F                                 i2_Byte_GetZone 6C20  
                                     _LED_Init 721C                                      delay_ms@u 0062  
                           Button_Poll@pButton 007B                                      delay_us@u 0062  
                                     _HMI_Init 3754                                       _HMI_Poll 6DF2  
                           MXK_Queue@pCallback 0060                                       _IPR1bits 000F9F  
                                     _IPR3bits 000FA5                                       _PIE1bits 000F9D  
                          __end_of_eusart_init 7DBE                                       _PIE3bits 000FA3  
                  __end_of_Console_ClearCursor 78C4                       __size_of_Configure_GPIOs 0070  
                         __size_of_Byte_GetBit 0034                              Byte_SetQuad@pQuad 006D  
                                     i2u601_40 6C8A                                       _PIR1bits 000F9E  
                                     i2u601_45 6C86                             __end_of__div_to_l_ 44BE  
                                     _PIR3bits 000FA4                                       i2u714_44 754C  
                                     i2u714_45 7548                                       i2u715_44 7572  
                                     i2u715_45 756E                                       i2u718_40 7874  
                                     i2u913_40 50FE                                       i2u914_40 5112  
                                     i2u915_40 514A                                       i2u599_40 6C42  
                                     i2u599_47 6C38                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 000D  
                                  _mode1$15631 00DB                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 0061                               HMI_SetBar@pValue 0060  
                            Button_Init@pInput 009B                        __size_of_SPI_DisableISR 0028  
                                  _mode4$15632 00D8                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 008A                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 6184  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 6546  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 7846  
                           _Port_CheckPairType 7082                                       _MXK_Init 4644  
                        __size_of_Timer0_Start 0026                                _move_and_rotate 69AC  
                              MXK_SwitchTo@CUR 0066                          __end_of_ADC_Calibrate 7FC8  
                          __end_of_irobot_leds 73EE                                       _SPI_Init 1BB4  
                          __end_of_irobot_init 803E                       __end_of_Event_TestButton 7B3C  
                                     _SPI_Send 6ED6                            __end_of_irobot_move 5D94  
                                    _rx_assign 51BA                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 0065                              ___wmul@multiplier 0060  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 0064  
                                   printf@flag 0106                           Timer2_Init@pCPUClock 0076  
                   __size_of_LCD_FillRectangle 0074                                     printf@fval 0114  
                         __size_of_Button_Init 00D4                           __end_of_SPI_MaxSpeed 6D7E  
                                   printf@prec 0108                          Motor_Speed@pFrequency 007D  
                            Byte_GetBit@pInput 0060                            Port_SetPinType@pPin 0088  
                         __size_of_Button_Poll 0166                                  _MXK_DIPSwitch 7EF8  
                           _Port_CheckQuadType 733C                            ?_Port_CheckPairType 0086  
                         __end_of_SPI_MinSpeed 6DF2                                  ??_MXK_Dequeue 0076  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 7616                           __end_of_update_angle 7FFE  
                        Button_Poll@pIncrement 007D                        PortProperty_Valid@F6830 FD4B  
                         __end_ofi2_Motor_Step 51BA                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 6682  
                                    copy_data1 66A2                                  ??_MXK_Release 0060  
                       __end_ofi2_Byte_GetPair 7EE0                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 008F  
                        ?_irobot_move_straight 0079                         __end_ofi2_Byte_GetZone 6C96  
                          __end_ofi2_MXK_Queue 8076                                      mode2@dist 00D7  
                          ?_Port_CheckPortType 0096                                itos@destination 0069  
                                     _InitList FBF9                     __end_of_irobot_init_song_0 7D82  
                         _Motor_Step$intlevel0 4E8E                                       _Mode_Set 7FFE  
                           Port_GetQuad@Output 0065                              ??_update_distance 007D  
                                  ??_ToSegment 0060                                   _ISR_Function 1408  
                                 _Timer0_Clear 8082                             Port_GetQuad@pInput 0060  
                                 _Timer2_Clear 80C2                                    _scale$15635 00A4  
                         __end_of_Word_GetPair 79BC                                       _lCBuffer 0400  
                         ??_Port_CheckPairType 008A                                    ??_Reset_Low 0074  
                                     __Hrparam 0000                                   _Timer0_Start 7CD6  
                                 OutSeg@pInput 0066                                 _Console_Render 3546  
                                     __Lrparam 0000                                Timer2_Init@RDIV 0072  
                                     _iRCliffL 0339                                       _iRCliffR 0336  
                            _stepsToMinDegrees 0300                                 LCD_Write@value 0064  
                                     _Port_Set 2782                                   OutSeg@segset 003E  
                                    rand@screw 003C                           __end_of_Word_SetPair 777A  
                      __end_of_get_packet_size 7152                                    ??_Port_Init 00A3  
                      __end_of_HMI_SetSegments 5C2E                           ??_Port_CheckQuadType 0093  
                             __size_of___fladd 04A8                               __size_of___fldiv 03C0  
                             _irobot_song_play 7FA0                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___flneg 0038  
                             __size_of___awmod 00A2                               __size_of___flmul 04A6  
                             __size_of___flsub 0048                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 7940  
                             __size_of___llmod 009A                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 0099                               __size_of___lwmod 0062  
                                     _lBufferX 00F3                                       _lBufferY 00F2  
                          Timer2_Init@PRESCALE FD68                                     ?_rx_assign 0061  
                              LCD_Fill@pColour 0069                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 00EC  
                             __size_of_getMode 00C0                        __end_of_HMI_RightSwitch 7F70  
                       Byte_GetZone@pChunkSize 0064                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 0064                          __size_of_Port_SetType 022A  
                                reverse@length 0062                                      itos@input 0067  
                        i2MXK_SwitchTo@pModule 0008                                       ___xxtofl 394E  
                          irobot_move@isScript 0078                             Motor_Init@pAddress 008F  
                                     _delay_ms 7018                                       _delay_us 7446  
                                     _clearall 00F4                                ___lwdiv@divisor 0062  
                              ___lwdiv@counter 0064                                Port_GetPin@pPin 0062  
                                     __ptext10 7FEC                                       __ptext11 44BE  
                                     __ptext20 5878                                       __ptext12 51BA  
                                     __ptext21 7152                                       __ptext13 66FC  
                                     __ptext30 3CDC                                       __ptext22 6370  
                                     __ptext14 70EC                                       __ptext31 4336  
                                     __ptext23 6788                                       __ptext15 80BA  
                                     __ptext40 77C0                                       __ptext32 64AC  
                                     __ptext24 7D82                                       __ptext16 0000  
                                     __ptext41 7FA0                                       __ptext33 4FAE  
                                     __ptext25 72E0                                       __ptext17 08D0  
                                     __ptext50 7A68                                       __ptext42 7C5A  
                                     __ptext34 75CE                                       __ptext26 7886  
                                     __ptext18 8022                                       __ptext51 56E4  
                                     __ptext43 79F6                                       __ptext35 0E0A  
                                     __ptext27 2B3C                                       __ptext19 3E7A  
                                     __ptext60 6FAE                                       __ptext52 7AD4  
                                     __ptext44 7CD6                                       __ptext36 7A30  
                                     __ptext28 62CE                                       __ptext61 7D62  
                                     __ptext53 538A                                       __ptext45 78C4  
                                     __ptext37 41A6                                       __ptext29 59FA  
                                     __ptext70 331C                                       __ptext62 8030  
                                     __ptext54 394E                                       __ptext46 6A2E  
                                     __ptext38 76EE                                       __ptext71 7616  
                                     __ptext63 803E                                       __ptext55 12B2  
                                     __ptext47 3546                                       __ptext39 5CE4  
                          ??_MXK_BlockSwitchTo 0066                                       __ptext80 4E88  
                                     __ptext72 2782                                       __ptext64 7DA0  
                                     __ptext56 23C2                                       __ptext48 6C96  
                                     __ptext81 80D2                                       __ptext73 804C  
                                     __ptext65 553A                                       __ptext57 5F92  
                                     __ptext49 622A                                       __ptext90 73EE  
                                     __ptext82 808E                                       __ptext74 6038  
                                     __ptext66 4A9C                                       __ptext58 7E72  
                                     __ptext91 5E3E                                       __ptext83 7804  
                                     __ptext75 60DE                                       __ptext67 8082  
                                     __ptext59 7396                                       __ptext92 7DBE  
                                     __ptext84 7E8E                                       __ptext76 6184  
                                     __ptext68 4644                                       __ptext93 7CFC  
                                     __ptext85 805A                                       __ptext77 721C  
                                     __ptext69 4014                                       __ptext94 6ED6  
                                     __ptext86 7940                                       __ptext78 7498  
                                     __ptext95 7FFE                                       __ptext87 7446  
                                     __ptext79 7902                                       __ptext96 6E66  
                                     __ptext88 47C4                                       __ptext97 6D0A  
                                     __ptext89 6546                                       __ptext98 74E8  
                                     __ptext99 7018                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                                     __powers_ FCAB                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 689E  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 7DA0  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 0079                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00A0  
                          __end_of_MXK_Dequeue 7940                              HMI_SetSegments@in 0064  
                        Button_Init@pThreshold 009D                                  __size_of_main 00E0  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 006B                         __end_of_Console_Render 3754  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 7584                            __end_of_MXK_Release 7EAA  
                               _MXK_TestButton 7F88                                  i2_Byte_SetBit 7538  
                      __end_of_move_and_rotate 6A2E                            ??_ADC_ClockDivision 0060  
                                 _iRDistanceSS 0308                                    _irobot_leds 7396  
                                  _irobot_init 8030                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 5CE4                                 ADC_Voltage@max 00A6  
                               ADC_Voltage@ref 00AA                      __end_of_MXK_BlockSwitchTo 797E  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer0_Init 015E  
                         __size_of_Timer2_Init 015E                                       int$flags 0051  
                         __size_of_Timer0_Stop 0006                                   _Port_SetType 331C  
                                 Port_Set@Type 0086                     __size_of_GetPortProperties 00A6  
                       __size_of_LCD_DrawField 00A4                                   _iRDropCaster 0334  
                  __size_of_load_iRScriptStack 006A                              ??_Configure_GPIOs 0095  
                                    printf@exp 010E                                      printf@val 010A  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 0310                                 Timer0_Init@PRE 003B  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 76A6  
                                   _HMI_GetBar 80E4                           Button_Init@pGetState 00A2  
                       PortProperty_Valid@Pair 0085                               ??_Port_TogglePin 0077  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 0072                                     _HMI_SetBar 80B0  
                                   _HMI_Render 78C4                               Byte_SetZone@MASK 006A  
                                  i2_MXK_Queue 8068                      __end_of_ADC_ClockDivision 6928  
                               Timer2_Init@DIV 030C                                 Timer2_Init@PRE 003A  
                             Byte_SetZone@pMax 0062                         __size_ofi2_Timer0_Stop 0006  
                                     scale@scl 00A8                           __size_of_Port_GetPin 0046  
                       ??_irobot_move_straight 007B                 __size_of_update_bump_and_cliff 003A  
                         Button_Init@pFunction 00A5                                       itos@Data 006B  
                __end_of_update_bump_and_cliff 79F6                                   _printf$15636 0100  
                           LCD_FillRectangle@i 0075                             LCD_FillRectangle@j 0076  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                             __tdiv_to_l_@exp1 0070                               __tdiv_to_l_@cntr 006F  
                                 reverse@input 0060                               __tdiv_to_l_@quot 006B  
                       __size_of_HMI_DIPSwitch 0018                               ___lwmod@dividend 0060  
                             ___lldiv@dividend 0060                         __end_of_MXK_TestButton 7FA0  
                              ?_Console_Render 0001                                  _iRScriptIndex 0038  
                      __size_of_LCD_Word_Write 001E                                 ?i2_Byte_SetBit 0001  
                                _iRScriptStack 041E                          __size_of_MXK_SwitchTo 0042  
                     irobot_query_and_update@i 007C                       irobot_query_and_update@j 007A  
                               _SPI_DisableISR 7CAE                     __end_of_twos_complement_of 7804  
                     irobot_rotate@rotateAngle 007D                                Port_Init@pInput 00A0  
                                     printf@ap 0104                               ?_get_packet_size 0001  
                       __size_ofi2_Port_SetPin 00AA                       irobot_rotate@rotateSpeed 007F  
                                   _ISR_Enable 80A6                               ?_HMI_SetSegments 0061  
                      Console_MakeField@Column 006C                          __size_of_SPI_MaxSpeed 0074  
                             ??_ADC_SetChannel 0060                                  SPI_DCS@pInput 0060  
                        __size_of_SPI_MinSpeed 0074                                   ?__tdiv_to_l_ 0060  
                              ??_MXK_DIPSwitch 0066                                    ??_rx_assign 0063  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00A0                        Console_MakeField@pInput 006B  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 0068  
                                ??_GetPortPORT 0062                                ___lwmod@divisor 0062  
                                ??_GetPortTRIS 0062                          Timer0_Start@pFunction 0060  
                           Word_SetPair@pInput 006F                                ___lwmod@counter 0064  
                           Word_SetPair@pValue 0072                       ?_irobot_query_and_update 0066  
                             Motor_Init@pMotor 008D                                    _MXK_Dequeue 7902  
                            ADC_Voltage@output 00AE                                  _distanceTotal 032C  
                               LED_Toggle@pLED 0078                                  ___fladd@signs 00BD  
                                _LCD_DrawField 622A                               _Port_SetQuadType 30C6  
                                  _MXK_Release 7E8E                      __size_of_Console_FormFeed 008C  
                                 _MXK_SwitchTo 7804                          __size_of_Word_GetPair 003E  
            irobot_query_and_update@startIndex 007B                             Byte_GetZone@Offset 0067  
                                ?_Console_Init 0001                              Word_SetPair@pPair 0071  
                              _Port_SetPinType 3B1C                                   ___fladd@aexp 00BE  
                                 ___fladd@bexp 00BF                        __size_of_Timer0_Restart 000C  
                           Byte_GetZone@Output 0068                             Byte_GetZone@pChunk 0063  
                              ?_MXK_TestButton 0001                    __end_of_Console_ResetCursor 7DA0  
                           Byte_GetZone@pInput 0060                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 71B8                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 7CD6                                   _SPI_MaxSpeed 6D0A  
            irobot_query_and_update@streamSize 0077                                   _SPI_MinSpeed 6D7E  
                           Port_Set@TypeActual 0084                               ?_move_and_rotate 0001  
